<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='73480' time_ms='1690513293198'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
25.362-b00-debug
</release>
<info>
OpenJDK 64-Bit Server VM (25.362-b00-debug) for bsd-amd64 JRE (1.8.0_362-internal-dengyouxu_2023_07_22_15_01-b00), built on Jul 28 2023 10:44:49 by &quot;dengyouxu&quot; with gcc Apple LLVM 14.0.0 (clang-1400.0.29.202)
</info>
</vm_version>
<vm_arguments>
<args>
-Dslog.level=NONE -Xint -XX:-ProfileInterpreter -XX:+UnlockDiagnosticVMOptions -XX:+PrintInterpreter -XX:+LogCompilation -XX:LogFile=file.log 
</args>
<command>
Sample
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=25.362-b00-debug
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=interpreted mode, sharing
java.ext.dirs=/Users/dengyouxu/Library/Java/Extensions:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java
java.endorsed.dirs=/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/endorsed
sun.boot.library.path=/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib
java.library.path=/Users/dengyouxu/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.
java.home=/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk
java.class.path=.
sun.boot.class.path=/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/resources.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/rt.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/sunrsasign.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/jsse.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/jce.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/charsets.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/jfr.jar:/Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.8
java.vm.vendor=Oracle Corporation
slog.level=NONE
sun.java.command=Sample
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<writer thread='9987'/>

----------------------------------------------------------------------
Interpreter

code size        =    243K bytes
total space      =   1023K bytes
wasted space     =    780K bytes

# of codelets    =    266
avg codelet size =    938 bytes


----------------------------------------------------------------------
slow signature handler  [0x0000000116b35420, 0x0000000116b357a0]  896 bytes

Loaded disassembler from /Users/dengyouxu/Developer/Software/openjdk8u/jdk8u-xcode10/jdk8u-dev/build/macosx-x86_64-normal-server-slowdebug/jdk/lib/server/hsdis-amd64.dylib
[Disassembling for mach=&apos;i386:x86-64&apos;]
  0x0000000116b35420: mov    %rsp,%rcx
  0x0000000116b35423: sub    $0x70,%rsp
  0x0000000116b35427: callq  0x0000000116b35431
  0x0000000116b3542c: jmpq   0x0000000116b35686
  0x0000000116b35431: mov    %r14,%rdx
  0x0000000116b35434: mov    %rbx,%rsi
  0x0000000116b35437: lea    0x8(%rsp),%rax
  0x0000000116b3543c: mov    %r13,-0x38(%rbp)
  0x0000000116b35440: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b35448: je     0x0000000116b354c5
  0x0000000116b3544e: mov    %rsp,-0x28(%rsp)
  0x0000000116b35453: sub    $0x80,%rsp
  0x0000000116b3545a: mov    %rax,0x78(%rsp)
  0x0000000116b3545f: mov    %rcx,0x70(%rsp)
  0x0000000116b35464: mov    %rdx,0x68(%rsp)
  0x0000000116b35469: mov    %rbx,0x60(%rsp)
  0x0000000116b3546e: mov    %rbp,0x50(%rsp)
  0x0000000116b35473: mov    %rsi,0x48(%rsp)
  0x0000000116b35478: mov    %rdi,0x40(%rsp)
  0x0000000116b3547d: mov    %r8,0x38(%rsp)
  0x0000000116b35482: mov    %r9,0x30(%rsp)
  0x0000000116b35487: mov    %r10,0x28(%rsp)
  0x0000000116b3548c: mov    %r11,0x20(%rsp)
  0x0000000116b35491: mov    %r12,0x18(%rsp)
  0x0000000116b35496: mov    %r13,0x10(%rsp)
  0x0000000116b3549b: mov    %r14,0x8(%rsp)
  0x0000000116b354a0: mov    %r15,(%rsp)
  0x0000000116b354a4: movabs $0x10cc2363b,%rdi
  0x0000000116b354ae: movabs $0x116b3544e,%rsi
  0x0000000116b354b8: mov    %rsp,%rdx
  0x0000000116b354bb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b354bf: callq  0x000000010c7dd830
  0x0000000116b354c4: hlt    
  0x0000000116b354c5: push   %r10
  0x0000000116b354c7: cmp    -0x9ceec1e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b354ce: je     0x0000000116b3554b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b354d4: mov    %rsp,-0x28(%rsp)
  0x0000000116b354d9: sub    $0x80,%rsp
  0x0000000116b354e0: mov    %rax,0x78(%rsp)
  0x0000000116b354e5: mov    %rcx,0x70(%rsp)
  0x0000000116b354ea: mov    %rdx,0x68(%rsp)
  0x0000000116b354ef: mov    %rbx,0x60(%rsp)
  0x0000000116b354f4: mov    %rbp,0x50(%rsp)
  0x0000000116b354f9: mov    %rsi,0x48(%rsp)
  0x0000000116b354fe: mov    %rdi,0x40(%rsp)
  0x0000000116b35503: mov    %r8,0x38(%rsp)
  0x0000000116b35508: mov    %r9,0x30(%rsp)
  0x0000000116b3550d: mov    %r10,0x28(%rsp)
  0x0000000116b35512: mov    %r11,0x20(%rsp)
  0x0000000116b35517: mov    %r12,0x18(%rsp)
  0x0000000116b3551c: mov    %r13,0x10(%rsp)
  0x0000000116b35521: mov    %r14,0x8(%rsp)
  0x0000000116b35526: mov    %r15,(%rsp)
  0x0000000116b3552a: movabs $0x10cc63f17,%rdi
  0x0000000116b35534: movabs $0x116b354d4,%rsi
  0x0000000116b3553e: mov    %rsp,%rdx
  0x0000000116b35541: and    $0xfffffffffffffff0,%rsp
  0x0000000116b35545: callq  0x000000010c7dd830
  0x0000000116b3554a: hlt    
  0x0000000116b3554b: pop    %r10
  0x0000000116b3554d: mov    %r15,%rdi
  0x0000000116b35550: mov    %rbp,0x290(%r15)
  0x0000000116b35557: mov    %rax,0x280(%r15)
  0x0000000116b3555e: test   $0xf,%esp
  0x0000000116b35564: je     0x0000000116b3557c
  0x0000000116b3556a: sub    $0x8,%rsp
  0x0000000116b3556e: callq  0x000000010c584840
  0x0000000116b35573: add    $0x8,%rsp
  0x0000000116b35577: jmpq   0x0000000116b35581
  0x0000000116b3557c: callq  0x000000010c584840
  0x0000000116b35581: push   %rax
  0x0000000116b35582: push   %rdi
  0x0000000116b35583: push   %rsi
  0x0000000116b35584: push   %rdx
  0x0000000116b35585: push   %rcx
  0x0000000116b35586: push   %r8
  0x0000000116b35588: push   %r9
  0x0000000116b3558a: push   %r10
  0x0000000116b3558c: mov    %rsp,%r10
  0x0000000116b3558f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b35593: push   %r10
  0x0000000116b35595: push   %r11
  0x0000000116b35597: mov    $0x109,%edi
  0x0000000116b3559c: movabs $0x7ff815049fd5,%r10
  0x0000000116b355a6: callq  *%r10
  0x0000000116b355a9: pop    %r11
  0x0000000116b355ab: pop    %rsp
  0x0000000116b355ac: pop    %r10
  0x0000000116b355ae: pop    %r9
  0x0000000116b355b0: pop    %r8
  0x0000000116b355b2: pop    %rcx
  0x0000000116b355b3: pop    %rdx
  0x0000000116b355b4: pop    %rsi
  0x0000000116b355b5: pop    %rdi
  0x0000000116b355b6: cmp    %rax,%r15
  0x0000000116b355b9: je     0x0000000116b35636
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b355bf: mov    %rsp,-0x28(%rsp)
  0x0000000116b355c4: sub    $0x80,%rsp
  0x0000000116b355cb: mov    %rax,0x78(%rsp)
  0x0000000116b355d0: mov    %rcx,0x70(%rsp)
  0x0000000116b355d5: mov    %rdx,0x68(%rsp)
  0x0000000116b355da: mov    %rbx,0x60(%rsp)
  0x0000000116b355df: mov    %rbp,0x50(%rsp)
  0x0000000116b355e4: mov    %rsi,0x48(%rsp)
  0x0000000116b355e9: mov    %rdi,0x40(%rsp)
  0x0000000116b355ee: mov    %r8,0x38(%rsp)
  0x0000000116b355f3: mov    %r9,0x30(%rsp)
  0x0000000116b355f8: mov    %r10,0x28(%rsp)
  0x0000000116b355fd: mov    %r11,0x20(%rsp)
  0x0000000116b35602: mov    %r12,0x18(%rsp)
  0x0000000116b35607: mov    %r13,0x10(%rsp)
  0x0000000116b3560c: mov    %r14,0x8(%rsp)
  0x0000000116b35611: mov    %r15,(%rsp)
  0x0000000116b35615: movabs $0x10cc6405e,%rdi
  0x0000000116b3561f: movabs $0x116b355bf,%rsi
  0x0000000116b35629: mov    %rsp,%rdx
  0x0000000116b3562c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b35630: callq  0x000000010c7dd830
  0x0000000116b35635: hlt    
  0x0000000116b35636: pop    %rax
  0x0000000116b35637: movabs $0x0,%r10
  0x0000000116b35641: mov    %r10,0x280(%r15)
  0x0000000116b35648: movabs $0x0,%r10
  0x0000000116b35652: mov    %r10,0x290(%r15)
  0x0000000116b35659: movabs $0x0,%r10
  0x0000000116b35663: mov    %r10,0x288(%r15)
  0x0000000116b3566a: cmpq   $0x0,0x8(%r15)
  0x0000000116b35672: je     0x0000000116b3567d
  0x0000000116b35678: jmpq   0x0000000116b30420
  0x0000000116b3567d: mov    -0x38(%rbp),%r13
  0x0000000116b35681: mov    -0x30(%rbp),%r14
  0x0000000116b35685: retq   
  0x0000000116b35686: mov    0x28(%rsp),%ecx
  0x0000000116b3568a: test   $0x1,%ecx
  0x0000000116b35690: jne    0x0000000116b356a1
  0x0000000116b35696: vmovss 0x30(%rsp),%xmm0
  0x0000000116b3569c: jmpq   0x0000000116b356a7
  0x0000000116b356a1: vmovsd 0x30(%rsp),%xmm0
  0x0000000116b356a7: test   $0x2,%ecx
  0x0000000116b356ad: jne    0x0000000116b356be
  0x0000000116b356b3: vmovss 0x38(%rsp),%xmm1
  0x0000000116b356b9: jmpq   0x0000000116b356c4
  0x0000000116b356be: vmovsd 0x38(%rsp),%xmm1
  0x0000000116b356c4: test   $0x4,%ecx
  0x0000000116b356ca: jne    0x0000000116b356db
  0x0000000116b356d0: vmovss 0x40(%rsp),%xmm2
  0x0000000116b356d6: jmpq   0x0000000116b356e1
  0x0000000116b356db: vmovsd 0x40(%rsp),%xmm2
  0x0000000116b356e1: test   $0x8,%ecx
  0x0000000116b356e7: jne    0x0000000116b356f8
  0x0000000116b356ed: vmovss 0x48(%rsp),%xmm3
  0x0000000116b356f3: jmpq   0x0000000116b356fe
  0x0000000116b356f8: vmovsd 0x48(%rsp),%xmm3
  0x0000000116b356fe: test   $0x10,%ecx
  0x0000000116b35704: jne    0x0000000116b35715
  0x0000000116b3570a: vmovss 0x50(%rsp),%xmm4
  0x0000000116b35710: jmpq   0x0000000116b3571b
  0x0000000116b35715: vmovsd 0x50(%rsp),%xmm4
  0x0000000116b3571b: test   $0x20,%ecx
  0x0000000116b35721: jne    0x0000000116b35732
  0x0000000116b35727: vmovss 0x58(%rsp),%xmm5
  0x0000000116b3572d: jmpq   0x0000000116b35738
  0x0000000116b35732: vmovsd 0x58(%rsp),%xmm5
  0x0000000116b35738: test   $0x40,%ecx
  0x0000000116b3573e: jne    0x0000000116b3574f
  0x0000000116b35744: vmovss 0x60(%rsp),%xmm6
  0x0000000116b3574a: jmpq   0x0000000116b35755
  0x0000000116b3574f: vmovsd 0x60(%rsp),%xmm6
  0x0000000116b35755: test   $0x80,%ecx
  0x0000000116b3575b: jne    0x0000000116b3576c
  0x0000000116b35761: vmovss 0x68(%rsp),%xmm7
  0x0000000116b35767: jmpq   0x0000000116b35772
  0x0000000116b3576c: vmovsd 0x68(%rsp),%xmm7
  0x0000000116b35772: mov    0x28(%rbx),%ecx
  0x0000000116b35775: test   $0x8,%ecx
  0x0000000116b3577b: cmove  (%rsp),%rsi
  0x0000000116b35780: mov    0x8(%rsp),%rdx
  0x0000000116b35785: mov    0x10(%rsp),%rcx
  0x0000000116b3578a: mov    0x18(%rsp),%r8
  0x0000000116b3578f: mov    0x20(%rsp),%r9
  0x0000000116b35794: add    $0x70,%rsp
  0x0000000116b35798: retq   
  0x0000000116b35799: nop
  0x0000000116b3579a: nop
  0x0000000116b3579b: nop
  0x0000000116b3579c: nop
  0x0000000116b3579d: nop
  0x0000000116b3579e: nop
  0x0000000116b3579f: nop

----------------------------------------------------------------------
error exits  [0x0000000116b357e0, 0x0000000116b358e0]  256 bytes

  0x0000000116b357e0: mov    %rsp,-0x28(%rsp)
  0x0000000116b357e5: sub    $0x80,%rsp
  0x0000000116b357ec: mov    %rax,0x78(%rsp)
  0x0000000116b357f1: mov    %rcx,0x70(%rsp)
  0x0000000116b357f6: mov    %rdx,0x68(%rsp)
  0x0000000116b357fb: mov    %rbx,0x60(%rsp)
  0x0000000116b35800: mov    %rbp,0x50(%rsp)
  0x0000000116b35805: mov    %rsi,0x48(%rsp)
  0x0000000116b3580a: mov    %rdi,0x40(%rsp)
  0x0000000116b3580f: mov    %r8,0x38(%rsp)
  0x0000000116b35814: mov    %r9,0x30(%rsp)
  0x0000000116b35819: mov    %r10,0x28(%rsp)
  0x0000000116b3581e: mov    %r11,0x20(%rsp)
  0x0000000116b35823: mov    %r12,0x18(%rsp)
  0x0000000116b35828: mov    %r13,0x10(%rsp)
  0x0000000116b3582d: mov    %r14,0x8(%rsp)
  0x0000000116b35832: mov    %r15,(%rsp)
  0x0000000116b35836: movabs $0x10ccaeb68,%rdi
  0x0000000116b35840: movabs $0x116b357e0,%rsi
  0x0000000116b3584a: mov    %rsp,%rdx
  0x0000000116b3584d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b35851: callq  0x000000010c7dd830
  0x0000000116b35856: hlt    
  0x0000000116b35857: mov    %rsp,-0x28(%rsp)
  0x0000000116b3585c: sub    $0x80,%rsp
  0x0000000116b35863: mov    %rax,0x78(%rsp)
  0x0000000116b35868: mov    %rcx,0x70(%rsp)
  0x0000000116b3586d: mov    %rdx,0x68(%rsp)
  0x0000000116b35872: mov    %rbx,0x60(%rsp)
  0x0000000116b35877: mov    %rbp,0x50(%rsp)
  0x0000000116b3587c: mov    %rsi,0x48(%rsp)
  0x0000000116b35881: mov    %rdi,0x40(%rsp)
  0x0000000116b35886: mov    %r8,0x38(%rsp)
  0x0000000116b3588b: mov    %r9,0x30(%rsp)
  0x0000000116b35890: mov    %r10,0x28(%rsp)
  0x0000000116b35895: mov    %r11,0x20(%rsp)
  0x0000000116b3589a: mov    %r12,0x18(%rsp)
  0x0000000116b3589f: mov    %r13,0x10(%rsp)
  0x0000000116b358a4: mov    %r14,0x8(%rsp)
  0x0000000116b358a9: mov    %r15,(%rsp)
  0x0000000116b358ad: movabs $0x10ccaeb7f,%rdi
  0x0000000116b358b7: movabs $0x116b35857,%rsi
  0x0000000116b358c1: mov    %rsp,%rdx
  0x0000000116b358c4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b358c8: callq  0x000000010c7dd830
  0x0000000116b358cd: hlt    
  0x0000000116b358ce: nop
  0x0000000116b358cf: nop
  0x0000000116b358d0: int3   
  0x0000000116b358d1: int3   
  0x0000000116b358d2: int3   
  0x0000000116b358d3: int3   
  0x0000000116b358d4: int3   
  0x0000000116b358d5: int3   
  0x0000000116b358d6: int3   
  0x0000000116b358d7: int3   
  0x0000000116b358d8: int3   
  0x0000000116b358d9: int3   
  0x0000000116b358da: int3   
  0x0000000116b358db: int3   
  0x0000000116b358dc: int3   
  0x0000000116b358dd: int3   
  0x0000000116b358de: int3   
  0x0000000116b358df: int3   

----------------------------------------------------------------------
return entry points  [0x0000000116b35920, 0x0000000116b37400]  6880 bytes

  0x0000000116b35920: mov    -0x10(%rbp),%rsp
  0x0000000116b35924: movq   $0x0,-0x10(%rbp)
  0x0000000116b3592c: mov    -0x38(%rbp),%r13
  0x0000000116b35930: mov    -0x30(%rbp),%r14
  0x0000000116b35934: movzwl 0x1(%r13),%ecx
  0x0000000116b35939: mov    -0x28(%rbp),%rbx
  0x0000000116b3593d: shl    $0x2,%ecx
  0x0000000116b35940: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35944: and    $0xff,%ebx
  0x0000000116b3594a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3594e: movzbl 0x0(%r13),%ebx
  0x0000000116b35953: movabs $0x10ce38e80,%r10
  0x0000000116b3595d: jmpq   *(%r10,%rbx,8)
  0x0000000116b35961: mov    -0x10(%rbp),%rsp
  0x0000000116b35965: movq   $0x0,-0x10(%rbp)
  0x0000000116b3596d: mov    -0x38(%rbp),%r13
  0x0000000116b35971: mov    -0x30(%rbp),%r14
  0x0000000116b35975: movzwl 0x1(%r13),%ecx
  0x0000000116b3597a: mov    -0x28(%rbp),%rbx
  0x0000000116b3597e: shl    $0x2,%ecx
  0x0000000116b35981: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35985: and    $0xff,%ebx
  0x0000000116b3598b: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3598f: movzbl 0x0(%r13),%ebx
  0x0000000116b35994: movabs $0x10ce38e80,%r10
  0x0000000116b3599e: jmpq   *(%r10,%rbx,8)
  0x0000000116b359a2: mov    -0x10(%rbp),%rsp
  0x0000000116b359a6: movq   $0x0,-0x10(%rbp)
  0x0000000116b359ae: mov    -0x38(%rbp),%r13
  0x0000000116b359b2: mov    -0x30(%rbp),%r14
  0x0000000116b359b6: movzwl 0x1(%r13),%ecx
  0x0000000116b359bb: mov    -0x28(%rbp),%rbx
  0x0000000116b359bf: shl    $0x2,%ecx
  0x0000000116b359c2: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b359c6: and    $0xff,%ebx
  0x0000000116b359cc: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b359d0: movzbl 0x0(%r13),%ebx
  0x0000000116b359d5: movabs $0x10ce38e80,%r10
  0x0000000116b359df: jmpq   *(%r10,%rbx,8)
  0x0000000116b359e3: mov    -0x10(%rbp),%rsp
  0x0000000116b359e7: movq   $0x0,-0x10(%rbp)
  0x0000000116b359ef: mov    -0x38(%rbp),%r13
  0x0000000116b359f3: mov    -0x30(%rbp),%r14
  0x0000000116b359f7: movzwl 0x1(%r13),%ecx
  0x0000000116b359fc: mov    -0x28(%rbp),%rbx
  0x0000000116b35a00: shl    $0x2,%ecx
  0x0000000116b35a03: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35a07: and    $0xff,%ebx
  0x0000000116b35a0d: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35a11: movzbl 0x0(%r13),%ebx
  0x0000000116b35a16: movabs $0x10ce38e80,%r10
  0x0000000116b35a20: jmpq   *(%r10,%rbx,8)
  0x0000000116b35a24: mov    -0x10(%rbp),%rsp
  0x0000000116b35a28: movq   $0x0,-0x10(%rbp)
  0x0000000116b35a30: mov    -0x38(%rbp),%r13
  0x0000000116b35a34: mov    -0x30(%rbp),%r14
  0x0000000116b35a38: movzwl 0x1(%r13),%ecx
  0x0000000116b35a3d: mov    -0x28(%rbp),%rbx
  0x0000000116b35a41: shl    $0x2,%ecx
  0x0000000116b35a44: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35a48: and    $0xff,%ebx
  0x0000000116b35a4e: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35a52: movzbl 0x0(%r13),%ebx
  0x0000000116b35a57: movabs $0x10ce3ae80,%r10
  0x0000000116b35a61: jmpq   *(%r10,%rbx,8)
  0x0000000116b35a65: mov    -0x10(%rbp),%rsp
  0x0000000116b35a69: movq   $0x0,-0x10(%rbp)
  0x0000000116b35a71: mov    -0x38(%rbp),%r13
  0x0000000116b35a75: mov    -0x30(%rbp),%r14
  0x0000000116b35a79: movzwl 0x1(%r13),%ecx
  0x0000000116b35a7e: mov    -0x28(%rbp),%rbx
  0x0000000116b35a82: shl    $0x2,%ecx
  0x0000000116b35a85: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35a89: and    $0xff,%ebx
  0x0000000116b35a8f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35a93: movzbl 0x0(%r13),%ebx
  0x0000000116b35a98: movabs $0x10ce38e80,%r10
  0x0000000116b35aa2: jmpq   *(%r10,%rbx,8)
  0x0000000116b35aa6: mov    -0x10(%rbp),%rsp
  0x0000000116b35aaa: movq   $0x0,-0x10(%rbp)
  0x0000000116b35ab2: mov    -0x38(%rbp),%r13
  0x0000000116b35ab6: mov    -0x30(%rbp),%r14
  0x0000000116b35aba: movzwl 0x1(%r13),%ecx
  0x0000000116b35abf: mov    -0x28(%rbp),%rbx
  0x0000000116b35ac3: shl    $0x2,%ecx
  0x0000000116b35ac6: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35aca: and    $0xff,%ebx
  0x0000000116b35ad0: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35ad4: movzbl 0x0(%r13),%ebx
  0x0000000116b35ad9: movabs $0x10ce39680,%r10
  0x0000000116b35ae3: jmpq   *(%r10,%rbx,8)
  0x0000000116b35ae7: mov    -0x10(%rbp),%rsp
  0x0000000116b35aeb: movq   $0x0,-0x10(%rbp)
  0x0000000116b35af3: mov    -0x38(%rbp),%r13
  0x0000000116b35af7: mov    -0x30(%rbp),%r14
  0x0000000116b35afb: movzwl 0x1(%r13),%ecx
  0x0000000116b35b00: mov    -0x28(%rbp),%rbx
  0x0000000116b35b04: shl    $0x2,%ecx
  0x0000000116b35b07: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35b0b: and    $0xff,%ebx
  0x0000000116b35b11: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35b15: movzbl 0x0(%r13),%ebx
  0x0000000116b35b1a: movabs $0x10ce39e80,%r10
  0x0000000116b35b24: jmpq   *(%r10,%rbx,8)
  0x0000000116b35b28: mov    -0x10(%rbp),%rsp
  0x0000000116b35b2c: movq   $0x0,-0x10(%rbp)
  0x0000000116b35b34: mov    -0x38(%rbp),%r13
  0x0000000116b35b38: mov    -0x30(%rbp),%r14
  0x0000000116b35b3c: movzwl 0x1(%r13),%ecx
  0x0000000116b35b41: mov    -0x28(%rbp),%rbx
  0x0000000116b35b45: shl    $0x2,%ecx
  0x0000000116b35b48: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35b4c: and    $0xff,%ebx
  0x0000000116b35b52: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35b56: movzbl 0x0(%r13),%ebx
  0x0000000116b35b5b: movabs $0x10ce3a680,%r10
  0x0000000116b35b65: jmpq   *(%r10,%rbx,8)
  0x0000000116b35b69: mov    -0x10(%rbp),%rsp
  0x0000000116b35b6d: movq   $0x0,-0x10(%rbp)
  0x0000000116b35b75: mov    -0x38(%rbp),%r13
  0x0000000116b35b79: mov    -0x30(%rbp),%r14
  0x0000000116b35b7d: movzwl 0x1(%r13),%ecx
  0x0000000116b35b82: mov    -0x28(%rbp),%rbx
  0x0000000116b35b86: shl    $0x2,%ecx
  0x0000000116b35b89: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35b8d: and    $0xff,%ebx
  0x0000000116b35b93: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35b97: movzbl 0x0(%r13),%ebx
  0x0000000116b35b9c: movabs $0x10ce3b680,%r10
  0x0000000116b35ba6: jmpq   *(%r10,%rbx,8)
  0x0000000116b35baa: mov    -0x10(%rbp),%rsp
  0x0000000116b35bae: movq   $0x0,-0x10(%rbp)
  0x0000000116b35bb6: mov    -0x38(%rbp),%r13
  0x0000000116b35bba: mov    -0x30(%rbp),%r14
  0x0000000116b35bbe: movzwl 0x1(%r13),%ecx
  0x0000000116b35bc3: mov    -0x28(%rbp),%rbx
  0x0000000116b35bc7: shl    $0x2,%ecx
  0x0000000116b35bca: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35bce: and    $0xff,%ebx
  0x0000000116b35bd4: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35bd8: movzbl 0x1(%r13),%ebx
  0x0000000116b35bdd: inc    %r13
  0x0000000116b35be0: movabs $0x10ce38e80,%r10
  0x0000000116b35bea: jmpq   *(%r10,%rbx,8)
  0x0000000116b35bee: mov    -0x10(%rbp),%rsp
  0x0000000116b35bf2: movq   $0x0,-0x10(%rbp)
  0x0000000116b35bfa: mov    -0x38(%rbp),%r13
  0x0000000116b35bfe: mov    -0x30(%rbp),%r14
  0x0000000116b35c02: movzwl 0x1(%r13),%ecx
  0x0000000116b35c07: mov    -0x28(%rbp),%rbx
  0x0000000116b35c0b: shl    $0x2,%ecx
  0x0000000116b35c0e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35c12: and    $0xff,%ebx
  0x0000000116b35c18: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35c1c: movzbl 0x1(%r13),%ebx
  0x0000000116b35c21: inc    %r13
  0x0000000116b35c24: movabs $0x10ce38e80,%r10
  0x0000000116b35c2e: jmpq   *(%r10,%rbx,8)
  0x0000000116b35c32: mov    -0x10(%rbp),%rsp
  0x0000000116b35c36: movq   $0x0,-0x10(%rbp)
  0x0000000116b35c3e: mov    -0x38(%rbp),%r13
  0x0000000116b35c42: mov    -0x30(%rbp),%r14
  0x0000000116b35c46: movzwl 0x1(%r13),%ecx
  0x0000000116b35c4b: mov    -0x28(%rbp),%rbx
  0x0000000116b35c4f: shl    $0x2,%ecx
  0x0000000116b35c52: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35c56: and    $0xff,%ebx
  0x0000000116b35c5c: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35c60: movzbl 0x1(%r13),%ebx
  0x0000000116b35c65: inc    %r13
  0x0000000116b35c68: movabs $0x10ce38e80,%r10
  0x0000000116b35c72: jmpq   *(%r10,%rbx,8)
  0x0000000116b35c76: mov    -0x10(%rbp),%rsp
  0x0000000116b35c7a: movq   $0x0,-0x10(%rbp)
  0x0000000116b35c82: mov    -0x38(%rbp),%r13
  0x0000000116b35c86: mov    -0x30(%rbp),%r14
  0x0000000116b35c8a: movzwl 0x1(%r13),%ecx
  0x0000000116b35c8f: mov    -0x28(%rbp),%rbx
  0x0000000116b35c93: shl    $0x2,%ecx
  0x0000000116b35c96: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35c9a: and    $0xff,%ebx
  0x0000000116b35ca0: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35ca4: movzbl 0x1(%r13),%ebx
  0x0000000116b35ca9: inc    %r13
  0x0000000116b35cac: movabs $0x10ce38e80,%r10
  0x0000000116b35cb6: jmpq   *(%r10,%rbx,8)
  0x0000000116b35cba: mov    -0x10(%rbp),%rsp
  0x0000000116b35cbe: movq   $0x0,-0x10(%rbp)
  0x0000000116b35cc6: mov    -0x38(%rbp),%r13
  0x0000000116b35cca: mov    -0x30(%rbp),%r14
  0x0000000116b35cce: movzwl 0x1(%r13),%ecx
  0x0000000116b35cd3: mov    -0x28(%rbp),%rbx
  0x0000000116b35cd7: shl    $0x2,%ecx
  0x0000000116b35cda: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35cde: and    $0xff,%ebx
  0x0000000116b35ce4: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35ce8: movzbl 0x1(%r13),%ebx
  0x0000000116b35ced: inc    %r13
  0x0000000116b35cf0: movabs $0x10ce3ae80,%r10
  0x0000000116b35cfa: jmpq   *(%r10,%rbx,8)
  0x0000000116b35cfe: mov    -0x10(%rbp),%rsp
  0x0000000116b35d02: movq   $0x0,-0x10(%rbp)
  0x0000000116b35d0a: mov    -0x38(%rbp),%r13
  0x0000000116b35d0e: mov    -0x30(%rbp),%r14
  0x0000000116b35d12: movzwl 0x1(%r13),%ecx
  0x0000000116b35d17: mov    -0x28(%rbp),%rbx
  0x0000000116b35d1b: shl    $0x2,%ecx
  0x0000000116b35d1e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35d22: and    $0xff,%ebx
  0x0000000116b35d28: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35d2c: movzbl 0x1(%r13),%ebx
  0x0000000116b35d31: inc    %r13
  0x0000000116b35d34: movabs $0x10ce38e80,%r10
  0x0000000116b35d3e: jmpq   *(%r10,%rbx,8)
  0x0000000116b35d42: mov    -0x10(%rbp),%rsp
  0x0000000116b35d46: movq   $0x0,-0x10(%rbp)
  0x0000000116b35d4e: mov    -0x38(%rbp),%r13
  0x0000000116b35d52: mov    -0x30(%rbp),%r14
  0x0000000116b35d56: movzwl 0x1(%r13),%ecx
  0x0000000116b35d5b: mov    -0x28(%rbp),%rbx
  0x0000000116b35d5f: shl    $0x2,%ecx
  0x0000000116b35d62: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35d66: and    $0xff,%ebx
  0x0000000116b35d6c: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35d70: movzbl 0x1(%r13),%ebx
  0x0000000116b35d75: inc    %r13
  0x0000000116b35d78: movabs $0x10ce39680,%r10
  0x0000000116b35d82: jmpq   *(%r10,%rbx,8)
  0x0000000116b35d86: mov    -0x10(%rbp),%rsp
  0x0000000116b35d8a: movq   $0x0,-0x10(%rbp)
  0x0000000116b35d92: mov    -0x38(%rbp),%r13
  0x0000000116b35d96: mov    -0x30(%rbp),%r14
  0x0000000116b35d9a: movzwl 0x1(%r13),%ecx
  0x0000000116b35d9f: mov    -0x28(%rbp),%rbx
  0x0000000116b35da3: shl    $0x2,%ecx
  0x0000000116b35da6: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35daa: and    $0xff,%ebx
  0x0000000116b35db0: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35db4: movzbl 0x1(%r13),%ebx
  0x0000000116b35db9: inc    %r13
  0x0000000116b35dbc: movabs $0x10ce39e80,%r10
  0x0000000116b35dc6: jmpq   *(%r10,%rbx,8)
  0x0000000116b35dca: mov    -0x10(%rbp),%rsp
  0x0000000116b35dce: movq   $0x0,-0x10(%rbp)
  0x0000000116b35dd6: mov    -0x38(%rbp),%r13
  0x0000000116b35dda: mov    -0x30(%rbp),%r14
  0x0000000116b35dde: movzwl 0x1(%r13),%ecx
  0x0000000116b35de3: mov    -0x28(%rbp),%rbx
  0x0000000116b35de7: shl    $0x2,%ecx
  0x0000000116b35dea: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35dee: and    $0xff,%ebx
  0x0000000116b35df4: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35df8: movzbl 0x1(%r13),%ebx
  0x0000000116b35dfd: inc    %r13
  0x0000000116b35e00: movabs $0x10ce3a680,%r10
  0x0000000116b35e0a: jmpq   *(%r10,%rbx,8)
  0x0000000116b35e0e: mov    -0x10(%rbp),%rsp
  0x0000000116b35e12: movq   $0x0,-0x10(%rbp)
  0x0000000116b35e1a: mov    -0x38(%rbp),%r13
  0x0000000116b35e1e: mov    -0x30(%rbp),%r14
  0x0000000116b35e22: movzwl 0x1(%r13),%ecx
  0x0000000116b35e27: mov    -0x28(%rbp),%rbx
  0x0000000116b35e2b: shl    $0x2,%ecx
  0x0000000116b35e2e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35e32: and    $0xff,%ebx
  0x0000000116b35e38: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35e3c: movzbl 0x1(%r13),%ebx
  0x0000000116b35e41: inc    %r13
  0x0000000116b35e44: movabs $0x10ce3b680,%r10
  0x0000000116b35e4e: jmpq   *(%r10,%rbx,8)
  0x0000000116b35e52: mov    -0x10(%rbp),%rsp
  0x0000000116b35e56: movq   $0x0,-0x10(%rbp)
  0x0000000116b35e5e: mov    -0x38(%rbp),%r13
  0x0000000116b35e62: mov    -0x30(%rbp),%r14
  0x0000000116b35e66: movzwl 0x1(%r13),%ecx
  0x0000000116b35e6b: mov    -0x28(%rbp),%rbx
  0x0000000116b35e6f: shl    $0x2,%ecx
  0x0000000116b35e72: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35e76: and    $0xff,%ebx
  0x0000000116b35e7c: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35e80: movzbl 0x2(%r13),%ebx
  0x0000000116b35e85: add    $0x2,%r13
  0x0000000116b35e89: movabs $0x10ce38e80,%r10
  0x0000000116b35e93: jmpq   *(%r10,%rbx,8)
  0x0000000116b35e97: mov    -0x10(%rbp),%rsp
  0x0000000116b35e9b: movq   $0x0,-0x10(%rbp)
  0x0000000116b35ea3: mov    -0x38(%rbp),%r13
  0x0000000116b35ea7: mov    -0x30(%rbp),%r14
  0x0000000116b35eab: movzwl 0x1(%r13),%ecx
  0x0000000116b35eb0: mov    -0x28(%rbp),%rbx
  0x0000000116b35eb4: shl    $0x2,%ecx
  0x0000000116b35eb7: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35ebb: and    $0xff,%ebx
  0x0000000116b35ec1: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35ec5: movzbl 0x2(%r13),%ebx
  0x0000000116b35eca: add    $0x2,%r13
  0x0000000116b35ece: movabs $0x10ce38e80,%r10
  0x0000000116b35ed8: jmpq   *(%r10,%rbx,8)
  0x0000000116b35edc: mov    -0x10(%rbp),%rsp
  0x0000000116b35ee0: movq   $0x0,-0x10(%rbp)
  0x0000000116b35ee8: mov    -0x38(%rbp),%r13
  0x0000000116b35eec: mov    -0x30(%rbp),%r14
  0x0000000116b35ef0: movzwl 0x1(%r13),%ecx
  0x0000000116b35ef5: mov    -0x28(%rbp),%rbx
  0x0000000116b35ef9: shl    $0x2,%ecx
  0x0000000116b35efc: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35f00: and    $0xff,%ebx
  0x0000000116b35f06: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35f0a: movzbl 0x2(%r13),%ebx
  0x0000000116b35f0f: add    $0x2,%r13
  0x0000000116b35f13: movabs $0x10ce38e80,%r10
  0x0000000116b35f1d: jmpq   *(%r10,%rbx,8)
  0x0000000116b35f21: mov    -0x10(%rbp),%rsp
  0x0000000116b35f25: movq   $0x0,-0x10(%rbp)
  0x0000000116b35f2d: mov    -0x38(%rbp),%r13
  0x0000000116b35f31: mov    -0x30(%rbp),%r14
  0x0000000116b35f35: movzwl 0x1(%r13),%ecx
  0x0000000116b35f3a: mov    -0x28(%rbp),%rbx
  0x0000000116b35f3e: shl    $0x2,%ecx
  0x0000000116b35f41: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35f45: and    $0xff,%ebx
  0x0000000116b35f4b: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35f4f: movzbl 0x2(%r13),%ebx
  0x0000000116b35f54: add    $0x2,%r13
  0x0000000116b35f58: movabs $0x10ce38e80,%r10
  0x0000000116b35f62: jmpq   *(%r10,%rbx,8)
  0x0000000116b35f66: mov    -0x10(%rbp),%rsp
  0x0000000116b35f6a: movq   $0x0,-0x10(%rbp)
  0x0000000116b35f72: mov    -0x38(%rbp),%r13
  0x0000000116b35f76: mov    -0x30(%rbp),%r14
  0x0000000116b35f7a: movzwl 0x1(%r13),%ecx
  0x0000000116b35f7f: mov    -0x28(%rbp),%rbx
  0x0000000116b35f83: shl    $0x2,%ecx
  0x0000000116b35f86: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35f8a: and    $0xff,%ebx
  0x0000000116b35f90: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35f94: movzbl 0x2(%r13),%ebx
  0x0000000116b35f99: add    $0x2,%r13
  0x0000000116b35f9d: movabs $0x10ce3ae80,%r10
  0x0000000116b35fa7: jmpq   *(%r10,%rbx,8)
  0x0000000116b35fab: mov    -0x10(%rbp),%rsp
  0x0000000116b35faf: movq   $0x0,-0x10(%rbp)
  0x0000000116b35fb7: mov    -0x38(%rbp),%r13
  0x0000000116b35fbb: mov    -0x30(%rbp),%r14
  0x0000000116b35fbf: movzwl 0x1(%r13),%ecx
  0x0000000116b35fc4: mov    -0x28(%rbp),%rbx
  0x0000000116b35fc8: shl    $0x2,%ecx
  0x0000000116b35fcb: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b35fcf: and    $0xff,%ebx
  0x0000000116b35fd5: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b35fd9: movzbl 0x2(%r13),%ebx
  0x0000000116b35fde: add    $0x2,%r13
  0x0000000116b35fe2: movabs $0x10ce38e80,%r10
  0x0000000116b35fec: jmpq   *(%r10,%rbx,8)
  0x0000000116b35ff0: mov    -0x10(%rbp),%rsp
  0x0000000116b35ff4: movq   $0x0,-0x10(%rbp)
  0x0000000116b35ffc: mov    -0x38(%rbp),%r13
  0x0000000116b36000: mov    -0x30(%rbp),%r14
  0x0000000116b36004: movzwl 0x1(%r13),%ecx
  0x0000000116b36009: mov    -0x28(%rbp),%rbx
  0x0000000116b3600d: shl    $0x2,%ecx
  0x0000000116b36010: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36014: and    $0xff,%ebx
  0x0000000116b3601a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3601e: movzbl 0x2(%r13),%ebx
  0x0000000116b36023: add    $0x2,%r13
  0x0000000116b36027: movabs $0x10ce39680,%r10
  0x0000000116b36031: jmpq   *(%r10,%rbx,8)
  0x0000000116b36035: mov    -0x10(%rbp),%rsp
  0x0000000116b36039: movq   $0x0,-0x10(%rbp)
  0x0000000116b36041: mov    -0x38(%rbp),%r13
  0x0000000116b36045: mov    -0x30(%rbp),%r14
  0x0000000116b36049: movzwl 0x1(%r13),%ecx
  0x0000000116b3604e: mov    -0x28(%rbp),%rbx
  0x0000000116b36052: shl    $0x2,%ecx
  0x0000000116b36055: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36059: and    $0xff,%ebx
  0x0000000116b3605f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36063: movzbl 0x2(%r13),%ebx
  0x0000000116b36068: add    $0x2,%r13
  0x0000000116b3606c: movabs $0x10ce39e80,%r10
  0x0000000116b36076: jmpq   *(%r10,%rbx,8)
  0x0000000116b3607a: mov    -0x10(%rbp),%rsp
  0x0000000116b3607e: movq   $0x0,-0x10(%rbp)
  0x0000000116b36086: mov    -0x38(%rbp),%r13
  0x0000000116b3608a: mov    -0x30(%rbp),%r14
  0x0000000116b3608e: movzwl 0x1(%r13),%ecx
  0x0000000116b36093: mov    -0x28(%rbp),%rbx
  0x0000000116b36097: shl    $0x2,%ecx
  0x0000000116b3609a: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3609e: and    $0xff,%ebx
  0x0000000116b360a4: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b360a8: movzbl 0x2(%r13),%ebx
  0x0000000116b360ad: add    $0x2,%r13
  0x0000000116b360b1: movabs $0x10ce3a680,%r10
  0x0000000116b360bb: jmpq   *(%r10,%rbx,8)
  0x0000000116b360bf: mov    -0x10(%rbp),%rsp
  0x0000000116b360c3: movq   $0x0,-0x10(%rbp)
  0x0000000116b360cb: mov    -0x38(%rbp),%r13
  0x0000000116b360cf: mov    -0x30(%rbp),%r14
  0x0000000116b360d3: movzwl 0x1(%r13),%ecx
  0x0000000116b360d8: mov    -0x28(%rbp),%rbx
  0x0000000116b360dc: shl    $0x2,%ecx
  0x0000000116b360df: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b360e3: and    $0xff,%ebx
  0x0000000116b360e9: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b360ed: movzbl 0x2(%r13),%ebx
  0x0000000116b360f2: add    $0x2,%r13
  0x0000000116b360f6: movabs $0x10ce3b680,%r10
  0x0000000116b36100: jmpq   *(%r10,%rbx,8)
  0x0000000116b36104: mov    -0x10(%rbp),%rsp
  0x0000000116b36108: movq   $0x0,-0x10(%rbp)
  0x0000000116b36110: mov    -0x38(%rbp),%r13
  0x0000000116b36114: mov    -0x30(%rbp),%r14
  0x0000000116b36118: movzwl 0x1(%r13),%ecx
  0x0000000116b3611d: mov    -0x28(%rbp),%rbx
  0x0000000116b36121: shl    $0x2,%ecx
  0x0000000116b36124: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36128: and    $0xff,%ebx
  0x0000000116b3612e: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36132: movzbl 0x3(%r13),%ebx
  0x0000000116b36137: add    $0x3,%r13
  0x0000000116b3613b: movabs $0x10ce38e80,%r10
  0x0000000116b36145: jmpq   *(%r10,%rbx,8)
  0x0000000116b36149: mov    -0x10(%rbp),%rsp
  0x0000000116b3614d: movq   $0x0,-0x10(%rbp)
  0x0000000116b36155: mov    -0x38(%rbp),%r13
  0x0000000116b36159: mov    -0x30(%rbp),%r14
  0x0000000116b3615d: movzwl 0x1(%r13),%ecx
  0x0000000116b36162: mov    -0x28(%rbp),%rbx
  0x0000000116b36166: shl    $0x2,%ecx
  0x0000000116b36169: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3616d: and    $0xff,%ebx
  0x0000000116b36173: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36177: movzbl 0x3(%r13),%ebx
  0x0000000116b3617c: add    $0x3,%r13
  0x0000000116b36180: movabs $0x10ce38e80,%r10
  0x0000000116b3618a: jmpq   *(%r10,%rbx,8)
  0x0000000116b3618e: mov    -0x10(%rbp),%rsp
  0x0000000116b36192: movq   $0x0,-0x10(%rbp)
  0x0000000116b3619a: mov    -0x38(%rbp),%r13
  0x0000000116b3619e: mov    -0x30(%rbp),%r14
  0x0000000116b361a2: movzwl 0x1(%r13),%ecx
  0x0000000116b361a7: mov    -0x28(%rbp),%rbx
  0x0000000116b361ab: shl    $0x2,%ecx
  0x0000000116b361ae: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b361b2: and    $0xff,%ebx
  0x0000000116b361b8: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b361bc: movzbl 0x3(%r13),%ebx
  0x0000000116b361c1: add    $0x3,%r13
  0x0000000116b361c5: movabs $0x10ce38e80,%r10
  0x0000000116b361cf: jmpq   *(%r10,%rbx,8)
  0x0000000116b361d3: mov    -0x10(%rbp),%rsp
  0x0000000116b361d7: movq   $0x0,-0x10(%rbp)
  0x0000000116b361df: mov    -0x38(%rbp),%r13
  0x0000000116b361e3: mov    -0x30(%rbp),%r14
  0x0000000116b361e7: movzwl 0x1(%r13),%ecx
  0x0000000116b361ec: mov    -0x28(%rbp),%rbx
  0x0000000116b361f0: shl    $0x2,%ecx
  0x0000000116b361f3: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b361f7: and    $0xff,%ebx
  0x0000000116b361fd: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36201: movzbl 0x3(%r13),%ebx
  0x0000000116b36206: add    $0x3,%r13
  0x0000000116b3620a: movabs $0x10ce38e80,%r10
  0x0000000116b36214: jmpq   *(%r10,%rbx,8)
  0x0000000116b36218: mov    -0x10(%rbp),%rsp
  0x0000000116b3621c: movq   $0x0,-0x10(%rbp)
  0x0000000116b36224: mov    -0x38(%rbp),%r13
  0x0000000116b36228: mov    -0x30(%rbp),%r14
  0x0000000116b3622c: movzwl 0x1(%r13),%ecx
  0x0000000116b36231: mov    -0x28(%rbp),%rbx
  0x0000000116b36235: shl    $0x2,%ecx
  0x0000000116b36238: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3623c: and    $0xff,%ebx
  0x0000000116b36242: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36246: movzbl 0x3(%r13),%ebx
  0x0000000116b3624b: add    $0x3,%r13
  0x0000000116b3624f: movabs $0x10ce3ae80,%r10
  0x0000000116b36259: jmpq   *(%r10,%rbx,8)
  0x0000000116b3625d: mov    -0x10(%rbp),%rsp
  0x0000000116b36261: movq   $0x0,-0x10(%rbp)
  0x0000000116b36269: mov    -0x38(%rbp),%r13
  0x0000000116b3626d: mov    -0x30(%rbp),%r14
  0x0000000116b36271: movzwl 0x1(%r13),%ecx
  0x0000000116b36276: mov    -0x28(%rbp),%rbx
  0x0000000116b3627a: shl    $0x2,%ecx
  0x0000000116b3627d: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36281: and    $0xff,%ebx
  0x0000000116b36287: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3628b: movzbl 0x3(%r13),%ebx
  0x0000000116b36290: add    $0x3,%r13
  0x0000000116b36294: movabs $0x10ce38e80,%r10
  0x0000000116b3629e: jmpq   *(%r10,%rbx,8)
  0x0000000116b362a2: mov    -0x10(%rbp),%rsp
  0x0000000116b362a6: movq   $0x0,-0x10(%rbp)
  0x0000000116b362ae: mov    -0x38(%rbp),%r13
  0x0000000116b362b2: mov    -0x30(%rbp),%r14
  0x0000000116b362b6: movzwl 0x1(%r13),%ecx
  0x0000000116b362bb: mov    -0x28(%rbp),%rbx
  0x0000000116b362bf: shl    $0x2,%ecx
  0x0000000116b362c2: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b362c6: and    $0xff,%ebx
  0x0000000116b362cc: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b362d0: movzbl 0x3(%r13),%ebx
  0x0000000116b362d5: add    $0x3,%r13
  0x0000000116b362d9: movabs $0x10ce39680,%r10
  0x0000000116b362e3: jmpq   *(%r10,%rbx,8)
  0x0000000116b362e7: mov    -0x10(%rbp),%rsp
  0x0000000116b362eb: movq   $0x0,-0x10(%rbp)
  0x0000000116b362f3: mov    -0x38(%rbp),%r13
  0x0000000116b362f7: mov    -0x30(%rbp),%r14
  0x0000000116b362fb: movzwl 0x1(%r13),%ecx
  0x0000000116b36300: mov    -0x28(%rbp),%rbx
  0x0000000116b36304: shl    $0x2,%ecx
  0x0000000116b36307: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3630b: and    $0xff,%ebx
  0x0000000116b36311: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36315: movzbl 0x3(%r13),%ebx
  0x0000000116b3631a: add    $0x3,%r13
  0x0000000116b3631e: movabs $0x10ce39e80,%r10
  0x0000000116b36328: jmpq   *(%r10,%rbx,8)
  0x0000000116b3632c: mov    -0x10(%rbp),%rsp
  0x0000000116b36330: movq   $0x0,-0x10(%rbp)
  0x0000000116b36338: mov    -0x38(%rbp),%r13
  0x0000000116b3633c: mov    -0x30(%rbp),%r14
  0x0000000116b36340: movzwl 0x1(%r13),%ecx
  0x0000000116b36345: mov    -0x28(%rbp),%rbx
  0x0000000116b36349: shl    $0x2,%ecx
  0x0000000116b3634c: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36350: and    $0xff,%ebx
  0x0000000116b36356: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3635a: movzbl 0x3(%r13),%ebx
  0x0000000116b3635f: add    $0x3,%r13
  0x0000000116b36363: movabs $0x10ce3a680,%r10
  0x0000000116b3636d: jmpq   *(%r10,%rbx,8)
  0x0000000116b36371: mov    -0x10(%rbp),%rsp
  0x0000000116b36375: movq   $0x0,-0x10(%rbp)
  0x0000000116b3637d: mov    -0x38(%rbp),%r13
  0x0000000116b36381: mov    -0x30(%rbp),%r14
  0x0000000116b36385: movzwl 0x1(%r13),%ecx
  0x0000000116b3638a: mov    -0x28(%rbp),%rbx
  0x0000000116b3638e: shl    $0x2,%ecx
  0x0000000116b36391: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36395: and    $0xff,%ebx
  0x0000000116b3639b: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3639f: movzbl 0x3(%r13),%ebx
  0x0000000116b363a4: add    $0x3,%r13
  0x0000000116b363a8: movabs $0x10ce3b680,%r10
  0x0000000116b363b2: jmpq   *(%r10,%rbx,8)
  0x0000000116b363b6: mov    -0x10(%rbp),%rsp
  0x0000000116b363ba: movq   $0x0,-0x10(%rbp)
  0x0000000116b363c2: mov    -0x38(%rbp),%r13
  0x0000000116b363c6: mov    -0x30(%rbp),%r14
  0x0000000116b363ca: movzwl 0x1(%r13),%ecx
  0x0000000116b363cf: mov    -0x28(%rbp),%rbx
  0x0000000116b363d3: shl    $0x2,%ecx
  0x0000000116b363d6: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b363da: and    $0xff,%ebx
  0x0000000116b363e0: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b363e4: movzbl 0x4(%r13),%ebx
  0x0000000116b363e9: add    $0x4,%r13
  0x0000000116b363ed: movabs $0x10ce38e80,%r10
  0x0000000116b363f7: jmpq   *(%r10,%rbx,8)
  0x0000000116b363fb: mov    -0x10(%rbp),%rsp
  0x0000000116b363ff: movq   $0x0,-0x10(%rbp)
  0x0000000116b36407: mov    -0x38(%rbp),%r13
  0x0000000116b3640b: mov    -0x30(%rbp),%r14
  0x0000000116b3640f: movzwl 0x1(%r13),%ecx
  0x0000000116b36414: mov    -0x28(%rbp),%rbx
  0x0000000116b36418: shl    $0x2,%ecx
  0x0000000116b3641b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3641f: and    $0xff,%ebx
  0x0000000116b36425: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36429: movzbl 0x4(%r13),%ebx
  0x0000000116b3642e: add    $0x4,%r13
  0x0000000116b36432: movabs $0x10ce38e80,%r10
  0x0000000116b3643c: jmpq   *(%r10,%rbx,8)
  0x0000000116b36440: mov    -0x10(%rbp),%rsp
  0x0000000116b36444: movq   $0x0,-0x10(%rbp)
  0x0000000116b3644c: mov    -0x38(%rbp),%r13
  0x0000000116b36450: mov    -0x30(%rbp),%r14
  0x0000000116b36454: movzwl 0x1(%r13),%ecx
  0x0000000116b36459: mov    -0x28(%rbp),%rbx
  0x0000000116b3645d: shl    $0x2,%ecx
  0x0000000116b36460: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36464: and    $0xff,%ebx
  0x0000000116b3646a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3646e: movzbl 0x4(%r13),%ebx
  0x0000000116b36473: add    $0x4,%r13
  0x0000000116b36477: movabs $0x10ce38e80,%r10
  0x0000000116b36481: jmpq   *(%r10,%rbx,8)
  0x0000000116b36485: mov    -0x10(%rbp),%rsp
  0x0000000116b36489: movq   $0x0,-0x10(%rbp)
  0x0000000116b36491: mov    -0x38(%rbp),%r13
  0x0000000116b36495: mov    -0x30(%rbp),%r14
  0x0000000116b36499: movzwl 0x1(%r13),%ecx
  0x0000000116b3649e: mov    -0x28(%rbp),%rbx
  0x0000000116b364a2: shl    $0x2,%ecx
  0x0000000116b364a5: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b364a9: and    $0xff,%ebx
  0x0000000116b364af: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b364b3: movzbl 0x4(%r13),%ebx
  0x0000000116b364b8: add    $0x4,%r13
  0x0000000116b364bc: movabs $0x10ce38e80,%r10
  0x0000000116b364c6: jmpq   *(%r10,%rbx,8)
  0x0000000116b364ca: mov    -0x10(%rbp),%rsp
  0x0000000116b364ce: movq   $0x0,-0x10(%rbp)
  0x0000000116b364d6: mov    -0x38(%rbp),%r13
  0x0000000116b364da: mov    -0x30(%rbp),%r14
  0x0000000116b364de: movzwl 0x1(%r13),%ecx
  0x0000000116b364e3: mov    -0x28(%rbp),%rbx
  0x0000000116b364e7: shl    $0x2,%ecx
  0x0000000116b364ea: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b364ee: and    $0xff,%ebx
  0x0000000116b364f4: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b364f8: movzbl 0x4(%r13),%ebx
  0x0000000116b364fd: add    $0x4,%r13
  0x0000000116b36501: movabs $0x10ce3ae80,%r10
  0x0000000116b3650b: jmpq   *(%r10,%rbx,8)
  0x0000000116b3650f: mov    -0x10(%rbp),%rsp
  0x0000000116b36513: movq   $0x0,-0x10(%rbp)
  0x0000000116b3651b: mov    -0x38(%rbp),%r13
  0x0000000116b3651f: mov    -0x30(%rbp),%r14
  0x0000000116b36523: movzwl 0x1(%r13),%ecx
  0x0000000116b36528: mov    -0x28(%rbp),%rbx
  0x0000000116b3652c: shl    $0x2,%ecx
  0x0000000116b3652f: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36533: and    $0xff,%ebx
  0x0000000116b36539: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3653d: movzbl 0x4(%r13),%ebx
  0x0000000116b36542: add    $0x4,%r13
  0x0000000116b36546: movabs $0x10ce38e80,%r10
  0x0000000116b36550: jmpq   *(%r10,%rbx,8)
  0x0000000116b36554: mov    -0x10(%rbp),%rsp
  0x0000000116b36558: movq   $0x0,-0x10(%rbp)
  0x0000000116b36560: mov    -0x38(%rbp),%r13
  0x0000000116b36564: mov    -0x30(%rbp),%r14
  0x0000000116b36568: movzwl 0x1(%r13),%ecx
  0x0000000116b3656d: mov    -0x28(%rbp),%rbx
  0x0000000116b36571: shl    $0x2,%ecx
  0x0000000116b36574: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36578: and    $0xff,%ebx
  0x0000000116b3657e: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36582: movzbl 0x4(%r13),%ebx
  0x0000000116b36587: add    $0x4,%r13
  0x0000000116b3658b: movabs $0x10ce39680,%r10
  0x0000000116b36595: jmpq   *(%r10,%rbx,8)
  0x0000000116b36599: mov    -0x10(%rbp),%rsp
  0x0000000116b3659d: movq   $0x0,-0x10(%rbp)
  0x0000000116b365a5: mov    -0x38(%rbp),%r13
  0x0000000116b365a9: mov    -0x30(%rbp),%r14
  0x0000000116b365ad: movzwl 0x1(%r13),%ecx
  0x0000000116b365b2: mov    -0x28(%rbp),%rbx
  0x0000000116b365b6: shl    $0x2,%ecx
  0x0000000116b365b9: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b365bd: and    $0xff,%ebx
  0x0000000116b365c3: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b365c7: movzbl 0x4(%r13),%ebx
  0x0000000116b365cc: add    $0x4,%r13
  0x0000000116b365d0: movabs $0x10ce39e80,%r10
  0x0000000116b365da: jmpq   *(%r10,%rbx,8)
  0x0000000116b365de: mov    -0x10(%rbp),%rsp
  0x0000000116b365e2: movq   $0x0,-0x10(%rbp)
  0x0000000116b365ea: mov    -0x38(%rbp),%r13
  0x0000000116b365ee: mov    -0x30(%rbp),%r14
  0x0000000116b365f2: movzwl 0x1(%r13),%ecx
  0x0000000116b365f7: mov    -0x28(%rbp),%rbx
  0x0000000116b365fb: shl    $0x2,%ecx
  0x0000000116b365fe: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36602: and    $0xff,%ebx
  0x0000000116b36608: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3660c: movzbl 0x4(%r13),%ebx
  0x0000000116b36611: add    $0x4,%r13
  0x0000000116b36615: movabs $0x10ce3a680,%r10
  0x0000000116b3661f: jmpq   *(%r10,%rbx,8)
  0x0000000116b36623: mov    -0x10(%rbp),%rsp
  0x0000000116b36627: movq   $0x0,-0x10(%rbp)
  0x0000000116b3662f: mov    -0x38(%rbp),%r13
  0x0000000116b36633: mov    -0x30(%rbp),%r14
  0x0000000116b36637: movzwl 0x1(%r13),%ecx
  0x0000000116b3663c: mov    -0x28(%rbp),%rbx
  0x0000000116b36640: shl    $0x2,%ecx
  0x0000000116b36643: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36647: and    $0xff,%ebx
  0x0000000116b3664d: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36651: movzbl 0x4(%r13),%ebx
  0x0000000116b36656: add    $0x4,%r13
  0x0000000116b3665a: movabs $0x10ce3b680,%r10
  0x0000000116b36664: jmpq   *(%r10,%rbx,8)
  0x0000000116b36668: mov    -0x10(%rbp),%rsp
  0x0000000116b3666c: movq   $0x0,-0x10(%rbp)
  0x0000000116b36674: mov    -0x38(%rbp),%r13
  0x0000000116b36678: mov    -0x30(%rbp),%r14
  0x0000000116b3667c: movzwl 0x1(%r13),%ecx
  0x0000000116b36681: mov    -0x28(%rbp),%rbx
  0x0000000116b36685: shl    $0x2,%ecx
  0x0000000116b36688: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3668c: and    $0xff,%ebx
  0x0000000116b36692: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36696: movzbl 0x5(%r13),%ebx
  0x0000000116b3669b: add    $0x5,%r13
  0x0000000116b3669f: movabs $0x10ce38e80,%r10
  0x0000000116b366a9: jmpq   *(%r10,%rbx,8)
  0x0000000116b366ad: mov    -0x10(%rbp),%rsp
  0x0000000116b366b1: movq   $0x0,-0x10(%rbp)
  0x0000000116b366b9: mov    -0x38(%rbp),%r13
  0x0000000116b366bd: mov    -0x30(%rbp),%r14
  0x0000000116b366c1: movzwl 0x1(%r13),%ecx
  0x0000000116b366c6: mov    -0x28(%rbp),%rbx
  0x0000000116b366ca: shl    $0x2,%ecx
  0x0000000116b366cd: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b366d1: and    $0xff,%ebx
  0x0000000116b366d7: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b366db: movzbl 0x5(%r13),%ebx
  0x0000000116b366e0: add    $0x5,%r13
  0x0000000116b366e4: movabs $0x10ce38e80,%r10
  0x0000000116b366ee: jmpq   *(%r10,%rbx,8)
  0x0000000116b366f2: mov    -0x10(%rbp),%rsp
  0x0000000116b366f6: movq   $0x0,-0x10(%rbp)
  0x0000000116b366fe: mov    -0x38(%rbp),%r13
  0x0000000116b36702: mov    -0x30(%rbp),%r14
  0x0000000116b36706: movzwl 0x1(%r13),%ecx
  0x0000000116b3670b: mov    -0x28(%rbp),%rbx
  0x0000000116b3670f: shl    $0x2,%ecx
  0x0000000116b36712: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36716: and    $0xff,%ebx
  0x0000000116b3671c: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36720: movzbl 0x5(%r13),%ebx
  0x0000000116b36725: add    $0x5,%r13
  0x0000000116b36729: movabs $0x10ce38e80,%r10
  0x0000000116b36733: jmpq   *(%r10,%rbx,8)
  0x0000000116b36737: mov    -0x10(%rbp),%rsp
  0x0000000116b3673b: movq   $0x0,-0x10(%rbp)
  0x0000000116b36743: mov    -0x38(%rbp),%r13
  0x0000000116b36747: mov    -0x30(%rbp),%r14
  0x0000000116b3674b: movzwl 0x1(%r13),%ecx
  0x0000000116b36750: mov    -0x28(%rbp),%rbx
  0x0000000116b36754: shl    $0x2,%ecx
  0x0000000116b36757: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3675b: and    $0xff,%ebx
  0x0000000116b36761: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36765: movzbl 0x5(%r13),%ebx
  0x0000000116b3676a: add    $0x5,%r13
  0x0000000116b3676e: movabs $0x10ce38e80,%r10
  0x0000000116b36778: jmpq   *(%r10,%rbx,8)
  0x0000000116b3677c: mov    -0x10(%rbp),%rsp
  0x0000000116b36780: movq   $0x0,-0x10(%rbp)
  0x0000000116b36788: mov    -0x38(%rbp),%r13
  0x0000000116b3678c: mov    -0x30(%rbp),%r14
  0x0000000116b36790: movzwl 0x1(%r13),%ecx
  0x0000000116b36795: mov    -0x28(%rbp),%rbx
  0x0000000116b36799: shl    $0x2,%ecx
  0x0000000116b3679c: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b367a0: and    $0xff,%ebx
  0x0000000116b367a6: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b367aa: movzbl 0x5(%r13),%ebx
  0x0000000116b367af: add    $0x5,%r13
  0x0000000116b367b3: movabs $0x10ce3ae80,%r10
  0x0000000116b367bd: jmpq   *(%r10,%rbx,8)
  0x0000000116b367c1: mov    -0x10(%rbp),%rsp
  0x0000000116b367c5: movq   $0x0,-0x10(%rbp)
  0x0000000116b367cd: mov    -0x38(%rbp),%r13
  0x0000000116b367d1: mov    -0x30(%rbp),%r14
  0x0000000116b367d5: movzwl 0x1(%r13),%ecx
  0x0000000116b367da: mov    -0x28(%rbp),%rbx
  0x0000000116b367de: shl    $0x2,%ecx
  0x0000000116b367e1: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b367e5: and    $0xff,%ebx
  0x0000000116b367eb: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b367ef: movzbl 0x5(%r13),%ebx
  0x0000000116b367f4: add    $0x5,%r13
  0x0000000116b367f8: movabs $0x10ce38e80,%r10
  0x0000000116b36802: jmpq   *(%r10,%rbx,8)
  0x0000000116b36806: mov    -0x10(%rbp),%rsp
  0x0000000116b3680a: movq   $0x0,-0x10(%rbp)
  0x0000000116b36812: mov    -0x38(%rbp),%r13
  0x0000000116b36816: mov    -0x30(%rbp),%r14
  0x0000000116b3681a: movzwl 0x1(%r13),%ecx
  0x0000000116b3681f: mov    -0x28(%rbp),%rbx
  0x0000000116b36823: shl    $0x2,%ecx
  0x0000000116b36826: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3682a: and    $0xff,%ebx
  0x0000000116b36830: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36834: movzbl 0x5(%r13),%ebx
  0x0000000116b36839: add    $0x5,%r13
  0x0000000116b3683d: movabs $0x10ce39680,%r10
  0x0000000116b36847: jmpq   *(%r10,%rbx,8)
  0x0000000116b3684b: mov    -0x10(%rbp),%rsp
  0x0000000116b3684f: movq   $0x0,-0x10(%rbp)
  0x0000000116b36857: mov    -0x38(%rbp),%r13
  0x0000000116b3685b: mov    -0x30(%rbp),%r14
  0x0000000116b3685f: movzwl 0x1(%r13),%ecx
  0x0000000116b36864: mov    -0x28(%rbp),%rbx
  0x0000000116b36868: shl    $0x2,%ecx
  0x0000000116b3686b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3686f: and    $0xff,%ebx
  0x0000000116b36875: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36879: movzbl 0x5(%r13),%ebx
  0x0000000116b3687e: add    $0x5,%r13
  0x0000000116b36882: movabs $0x10ce39e80,%r10
  0x0000000116b3688c: jmpq   *(%r10,%rbx,8)
  0x0000000116b36890: mov    -0x10(%rbp),%rsp
  0x0000000116b36894: movq   $0x0,-0x10(%rbp)
  0x0000000116b3689c: mov    -0x38(%rbp),%r13
  0x0000000116b368a0: mov    -0x30(%rbp),%r14
  0x0000000116b368a4: movzwl 0x1(%r13),%ecx
  0x0000000116b368a9: mov    -0x28(%rbp),%rbx
  0x0000000116b368ad: shl    $0x2,%ecx
  0x0000000116b368b0: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b368b4: and    $0xff,%ebx
  0x0000000116b368ba: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b368be: movzbl 0x5(%r13),%ebx
  0x0000000116b368c3: add    $0x5,%r13
  0x0000000116b368c7: movabs $0x10ce3a680,%r10
  0x0000000116b368d1: jmpq   *(%r10,%rbx,8)
  0x0000000116b368d5: mov    -0x10(%rbp),%rsp
  0x0000000116b368d9: movq   $0x0,-0x10(%rbp)
  0x0000000116b368e1: mov    -0x38(%rbp),%r13
  0x0000000116b368e5: mov    -0x30(%rbp),%r14
  0x0000000116b368e9: movzwl 0x1(%r13),%ecx
  0x0000000116b368ee: mov    -0x28(%rbp),%rbx
  0x0000000116b368f2: shl    $0x2,%ecx
  0x0000000116b368f5: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b368f9: and    $0xff,%ebx
  0x0000000116b368ff: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36903: movzbl 0x5(%r13),%ebx
  0x0000000116b36908: add    $0x5,%r13
  0x0000000116b3690c: movabs $0x10ce3b680,%r10
  0x0000000116b36916: jmpq   *(%r10,%rbx,8)
  0x0000000116b3691a: mov    -0x10(%rbp),%rsp
  0x0000000116b3691e: movq   $0x0,-0x10(%rbp)
  0x0000000116b36926: mov    -0x38(%rbp),%r13
  0x0000000116b3692a: mov    -0x30(%rbp),%r14
  0x0000000116b3692e: movzwl 0x1(%r13),%ecx
  0x0000000116b36933: mov    -0x28(%rbp),%rbx
  0x0000000116b36937: shl    $0x2,%ecx
  0x0000000116b3693a: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3693e: and    $0xff,%ebx
  0x0000000116b36944: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36948: movzbl 0x6(%r13),%ebx
  0x0000000116b3694d: add    $0x6,%r13
  0x0000000116b36951: movabs $0x10ce38e80,%r10
  0x0000000116b3695b: jmpq   *(%r10,%rbx,8)
  0x0000000116b3695f: mov    -0x10(%rbp),%rsp
  0x0000000116b36963: movq   $0x0,-0x10(%rbp)
  0x0000000116b3696b: mov    -0x38(%rbp),%r13
  0x0000000116b3696f: mov    -0x30(%rbp),%r14
  0x0000000116b36973: movzwl 0x1(%r13),%ecx
  0x0000000116b36978: mov    -0x28(%rbp),%rbx
  0x0000000116b3697c: shl    $0x2,%ecx
  0x0000000116b3697f: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36983: and    $0xff,%ebx
  0x0000000116b36989: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3698d: movzbl 0x6(%r13),%ebx
  0x0000000116b36992: add    $0x6,%r13
  0x0000000116b36996: movabs $0x10ce38e80,%r10
  0x0000000116b369a0: jmpq   *(%r10,%rbx,8)
  0x0000000116b369a4: mov    -0x10(%rbp),%rsp
  0x0000000116b369a8: movq   $0x0,-0x10(%rbp)
  0x0000000116b369b0: mov    -0x38(%rbp),%r13
  0x0000000116b369b4: mov    -0x30(%rbp),%r14
  0x0000000116b369b8: movzwl 0x1(%r13),%ecx
  0x0000000116b369bd: mov    -0x28(%rbp),%rbx
  0x0000000116b369c1: shl    $0x2,%ecx
  0x0000000116b369c4: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b369c8: and    $0xff,%ebx
  0x0000000116b369ce: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b369d2: movzbl 0x6(%r13),%ebx
  0x0000000116b369d7: add    $0x6,%r13
  0x0000000116b369db: movabs $0x10ce38e80,%r10
  0x0000000116b369e5: jmpq   *(%r10,%rbx,8)
  0x0000000116b369e9: mov    -0x10(%rbp),%rsp
  0x0000000116b369ed: movq   $0x0,-0x10(%rbp)
  0x0000000116b369f5: mov    -0x38(%rbp),%r13
  0x0000000116b369f9: mov    -0x30(%rbp),%r14
  0x0000000116b369fd: movzwl 0x1(%r13),%ecx
  0x0000000116b36a02: mov    -0x28(%rbp),%rbx
  0x0000000116b36a06: shl    $0x2,%ecx
  0x0000000116b36a09: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36a0d: and    $0xff,%ebx
  0x0000000116b36a13: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36a17: movzbl 0x6(%r13),%ebx
  0x0000000116b36a1c: add    $0x6,%r13
  0x0000000116b36a20: movabs $0x10ce38e80,%r10
  0x0000000116b36a2a: jmpq   *(%r10,%rbx,8)
  0x0000000116b36a2e: mov    -0x10(%rbp),%rsp
  0x0000000116b36a32: movq   $0x0,-0x10(%rbp)
  0x0000000116b36a3a: mov    -0x38(%rbp),%r13
  0x0000000116b36a3e: mov    -0x30(%rbp),%r14
  0x0000000116b36a42: movzwl 0x1(%r13),%ecx
  0x0000000116b36a47: mov    -0x28(%rbp),%rbx
  0x0000000116b36a4b: shl    $0x2,%ecx
  0x0000000116b36a4e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36a52: and    $0xff,%ebx
  0x0000000116b36a58: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36a5c: movzbl 0x6(%r13),%ebx
  0x0000000116b36a61: add    $0x6,%r13
  0x0000000116b36a65: movabs $0x10ce3ae80,%r10
  0x0000000116b36a6f: jmpq   *(%r10,%rbx,8)
  0x0000000116b36a73: mov    -0x10(%rbp),%rsp
  0x0000000116b36a77: movq   $0x0,-0x10(%rbp)
  0x0000000116b36a7f: mov    -0x38(%rbp),%r13
  0x0000000116b36a83: mov    -0x30(%rbp),%r14
  0x0000000116b36a87: movzwl 0x1(%r13),%ecx
  0x0000000116b36a8c: mov    -0x28(%rbp),%rbx
  0x0000000116b36a90: shl    $0x2,%ecx
  0x0000000116b36a93: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36a97: and    $0xff,%ebx
  0x0000000116b36a9d: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36aa1: movzbl 0x6(%r13),%ebx
  0x0000000116b36aa6: add    $0x6,%r13
  0x0000000116b36aaa: movabs $0x10ce38e80,%r10
  0x0000000116b36ab4: jmpq   *(%r10,%rbx,8)
  0x0000000116b36ab8: mov    -0x10(%rbp),%rsp
  0x0000000116b36abc: movq   $0x0,-0x10(%rbp)
  0x0000000116b36ac4: mov    -0x38(%rbp),%r13
  0x0000000116b36ac8: mov    -0x30(%rbp),%r14
  0x0000000116b36acc: movzwl 0x1(%r13),%ecx
  0x0000000116b36ad1: mov    -0x28(%rbp),%rbx
  0x0000000116b36ad5: shl    $0x2,%ecx
  0x0000000116b36ad8: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36adc: and    $0xff,%ebx
  0x0000000116b36ae2: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36ae6: movzbl 0x6(%r13),%ebx
  0x0000000116b36aeb: add    $0x6,%r13
  0x0000000116b36aef: movabs $0x10ce39680,%r10
  0x0000000116b36af9: jmpq   *(%r10,%rbx,8)
  0x0000000116b36afd: mov    -0x10(%rbp),%rsp
  0x0000000116b36b01: movq   $0x0,-0x10(%rbp)
  0x0000000116b36b09: mov    -0x38(%rbp),%r13
  0x0000000116b36b0d: mov    -0x30(%rbp),%r14
  0x0000000116b36b11: movzwl 0x1(%r13),%ecx
  0x0000000116b36b16: mov    -0x28(%rbp),%rbx
  0x0000000116b36b1a: shl    $0x2,%ecx
  0x0000000116b36b1d: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36b21: and    $0xff,%ebx
  0x0000000116b36b27: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36b2b: movzbl 0x6(%r13),%ebx
  0x0000000116b36b30: add    $0x6,%r13
  0x0000000116b36b34: movabs $0x10ce39e80,%r10
  0x0000000116b36b3e: jmpq   *(%r10,%rbx,8)
  0x0000000116b36b42: mov    -0x10(%rbp),%rsp
  0x0000000116b36b46: movq   $0x0,-0x10(%rbp)
  0x0000000116b36b4e: mov    -0x38(%rbp),%r13
  0x0000000116b36b52: mov    -0x30(%rbp),%r14
  0x0000000116b36b56: movzwl 0x1(%r13),%ecx
  0x0000000116b36b5b: mov    -0x28(%rbp),%rbx
  0x0000000116b36b5f: shl    $0x2,%ecx
  0x0000000116b36b62: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36b66: and    $0xff,%ebx
  0x0000000116b36b6c: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36b70: movzbl 0x6(%r13),%ebx
  0x0000000116b36b75: add    $0x6,%r13
  0x0000000116b36b79: movabs $0x10ce3a680,%r10
  0x0000000116b36b83: jmpq   *(%r10,%rbx,8)
  0x0000000116b36b87: mov    -0x10(%rbp),%rsp
  0x0000000116b36b8b: movq   $0x0,-0x10(%rbp)
  0x0000000116b36b93: mov    -0x38(%rbp),%r13
  0x0000000116b36b97: mov    -0x30(%rbp),%r14
  0x0000000116b36b9b: movzwl 0x1(%r13),%ecx
  0x0000000116b36ba0: mov    -0x28(%rbp),%rbx
  0x0000000116b36ba4: shl    $0x2,%ecx
  0x0000000116b36ba7: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36bab: and    $0xff,%ebx
  0x0000000116b36bb1: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36bb5: movzbl 0x6(%r13),%ebx
  0x0000000116b36bba: add    $0x6,%r13
  0x0000000116b36bbe: movabs $0x10ce3b680,%r10
  0x0000000116b36bc8: jmpq   *(%r10,%rbx,8)
  0x0000000116b36bcc: mov    -0x10(%rbp),%rsp
  0x0000000116b36bd0: movq   $0x0,-0x10(%rbp)
  0x0000000116b36bd8: mov    -0x38(%rbp),%r13
  0x0000000116b36bdc: mov    -0x30(%rbp),%r14
  0x0000000116b36be0: movzwl 0x1(%r13),%ecx
  0x0000000116b36be5: mov    -0x28(%rbp),%rbx
  0x0000000116b36be9: shl    $0x2,%ecx
  0x0000000116b36bec: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36bf0: and    $0xff,%ebx
  0x0000000116b36bf6: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36bfa: movzbl 0x7(%r13),%ebx
  0x0000000116b36bff: add    $0x7,%r13
  0x0000000116b36c03: movabs $0x10ce38e80,%r10
  0x0000000116b36c0d: jmpq   *(%r10,%rbx,8)
  0x0000000116b36c11: mov    -0x10(%rbp),%rsp
  0x0000000116b36c15: movq   $0x0,-0x10(%rbp)
  0x0000000116b36c1d: mov    -0x38(%rbp),%r13
  0x0000000116b36c21: mov    -0x30(%rbp),%r14
  0x0000000116b36c25: movzwl 0x1(%r13),%ecx
  0x0000000116b36c2a: mov    -0x28(%rbp),%rbx
  0x0000000116b36c2e: shl    $0x2,%ecx
  0x0000000116b36c31: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36c35: and    $0xff,%ebx
  0x0000000116b36c3b: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36c3f: movzbl 0x7(%r13),%ebx
  0x0000000116b36c44: add    $0x7,%r13
  0x0000000116b36c48: movabs $0x10ce38e80,%r10
  0x0000000116b36c52: jmpq   *(%r10,%rbx,8)
  0x0000000116b36c56: mov    -0x10(%rbp),%rsp
  0x0000000116b36c5a: movq   $0x0,-0x10(%rbp)
  0x0000000116b36c62: mov    -0x38(%rbp),%r13
  0x0000000116b36c66: mov    -0x30(%rbp),%r14
  0x0000000116b36c6a: movzwl 0x1(%r13),%ecx
  0x0000000116b36c6f: mov    -0x28(%rbp),%rbx
  0x0000000116b36c73: shl    $0x2,%ecx
  0x0000000116b36c76: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36c7a: and    $0xff,%ebx
  0x0000000116b36c80: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36c84: movzbl 0x7(%r13),%ebx
  0x0000000116b36c89: add    $0x7,%r13
  0x0000000116b36c8d: movabs $0x10ce38e80,%r10
  0x0000000116b36c97: jmpq   *(%r10,%rbx,8)
  0x0000000116b36c9b: mov    -0x10(%rbp),%rsp
  0x0000000116b36c9f: movq   $0x0,-0x10(%rbp)
  0x0000000116b36ca7: mov    -0x38(%rbp),%r13
  0x0000000116b36cab: mov    -0x30(%rbp),%r14
  0x0000000116b36caf: movzwl 0x1(%r13),%ecx
  0x0000000116b36cb4: mov    -0x28(%rbp),%rbx
  0x0000000116b36cb8: shl    $0x2,%ecx
  0x0000000116b36cbb: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36cbf: and    $0xff,%ebx
  0x0000000116b36cc5: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36cc9: movzbl 0x7(%r13),%ebx
  0x0000000116b36cce: add    $0x7,%r13
  0x0000000116b36cd2: movabs $0x10ce38e80,%r10
  0x0000000116b36cdc: jmpq   *(%r10,%rbx,8)
  0x0000000116b36ce0: mov    -0x10(%rbp),%rsp
  0x0000000116b36ce4: movq   $0x0,-0x10(%rbp)
  0x0000000116b36cec: mov    -0x38(%rbp),%r13
  0x0000000116b36cf0: mov    -0x30(%rbp),%r14
  0x0000000116b36cf4: movzwl 0x1(%r13),%ecx
  0x0000000116b36cf9: mov    -0x28(%rbp),%rbx
  0x0000000116b36cfd: shl    $0x2,%ecx
  0x0000000116b36d00: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36d04: and    $0xff,%ebx
  0x0000000116b36d0a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36d0e: movzbl 0x7(%r13),%ebx
  0x0000000116b36d13: add    $0x7,%r13
  0x0000000116b36d17: movabs $0x10ce3ae80,%r10
  0x0000000116b36d21: jmpq   *(%r10,%rbx,8)
  0x0000000116b36d25: mov    -0x10(%rbp),%rsp
  0x0000000116b36d29: movq   $0x0,-0x10(%rbp)
  0x0000000116b36d31: mov    -0x38(%rbp),%r13
  0x0000000116b36d35: mov    -0x30(%rbp),%r14
  0x0000000116b36d39: movzwl 0x1(%r13),%ecx
  0x0000000116b36d3e: mov    -0x28(%rbp),%rbx
  0x0000000116b36d42: shl    $0x2,%ecx
  0x0000000116b36d45: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36d49: and    $0xff,%ebx
  0x0000000116b36d4f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36d53: movzbl 0x7(%r13),%ebx
  0x0000000116b36d58: add    $0x7,%r13
  0x0000000116b36d5c: movabs $0x10ce38e80,%r10
  0x0000000116b36d66: jmpq   *(%r10,%rbx,8)
  0x0000000116b36d6a: mov    -0x10(%rbp),%rsp
  0x0000000116b36d6e: movq   $0x0,-0x10(%rbp)
  0x0000000116b36d76: mov    -0x38(%rbp),%r13
  0x0000000116b36d7a: mov    -0x30(%rbp),%r14
  0x0000000116b36d7e: movzwl 0x1(%r13),%ecx
  0x0000000116b36d83: mov    -0x28(%rbp),%rbx
  0x0000000116b36d87: shl    $0x2,%ecx
  0x0000000116b36d8a: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36d8e: and    $0xff,%ebx
  0x0000000116b36d94: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36d98: movzbl 0x7(%r13),%ebx
  0x0000000116b36d9d: add    $0x7,%r13
  0x0000000116b36da1: movabs $0x10ce39680,%r10
  0x0000000116b36dab: jmpq   *(%r10,%rbx,8)
  0x0000000116b36daf: mov    -0x10(%rbp),%rsp
  0x0000000116b36db3: movq   $0x0,-0x10(%rbp)
  0x0000000116b36dbb: mov    -0x38(%rbp),%r13
  0x0000000116b36dbf: mov    -0x30(%rbp),%r14
  0x0000000116b36dc3: movzwl 0x1(%r13),%ecx
  0x0000000116b36dc8: mov    -0x28(%rbp),%rbx
  0x0000000116b36dcc: shl    $0x2,%ecx
  0x0000000116b36dcf: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36dd3: and    $0xff,%ebx
  0x0000000116b36dd9: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36ddd: movzbl 0x7(%r13),%ebx
  0x0000000116b36de2: add    $0x7,%r13
  0x0000000116b36de6: movabs $0x10ce39e80,%r10
  0x0000000116b36df0: jmpq   *(%r10,%rbx,8)
  0x0000000116b36df4: mov    -0x10(%rbp),%rsp
  0x0000000116b36df8: movq   $0x0,-0x10(%rbp)
  0x0000000116b36e00: mov    -0x38(%rbp),%r13
  0x0000000116b36e04: mov    -0x30(%rbp),%r14
  0x0000000116b36e08: movzwl 0x1(%r13),%ecx
  0x0000000116b36e0d: mov    -0x28(%rbp),%rbx
  0x0000000116b36e11: shl    $0x2,%ecx
  0x0000000116b36e14: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36e18: and    $0xff,%ebx
  0x0000000116b36e1e: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36e22: movzbl 0x7(%r13),%ebx
  0x0000000116b36e27: add    $0x7,%r13
  0x0000000116b36e2b: movabs $0x10ce3a680,%r10
  0x0000000116b36e35: jmpq   *(%r10,%rbx,8)
  0x0000000116b36e39: mov    -0x10(%rbp),%rsp
  0x0000000116b36e3d: movq   $0x0,-0x10(%rbp)
  0x0000000116b36e45: mov    -0x38(%rbp),%r13
  0x0000000116b36e49: mov    -0x30(%rbp),%r14
  0x0000000116b36e4d: movzwl 0x1(%r13),%ecx
  0x0000000116b36e52: mov    -0x28(%rbp),%rbx
  0x0000000116b36e56: shl    $0x2,%ecx
  0x0000000116b36e59: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36e5d: and    $0xff,%ebx
  0x0000000116b36e63: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36e67: movzbl 0x7(%r13),%ebx
  0x0000000116b36e6c: add    $0x7,%r13
  0x0000000116b36e70: movabs $0x10ce3b680,%r10
  0x0000000116b36e7a: jmpq   *(%r10,%rbx,8)
  0x0000000116b36e7e: mov    -0x10(%rbp),%rsp
  0x0000000116b36e82: movq   $0x0,-0x10(%rbp)
  0x0000000116b36e8a: mov    -0x38(%rbp),%r13
  0x0000000116b36e8e: mov    -0x30(%rbp),%r14
  0x0000000116b36e92: movzwl 0x1(%r13),%ecx
  0x0000000116b36e97: mov    -0x28(%rbp),%rbx
  0x0000000116b36e9b: shl    $0x2,%ecx
  0x0000000116b36e9e: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36ea2: and    $0xff,%ebx
  0x0000000116b36ea8: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36eac: movzbl 0x8(%r13),%ebx
  0x0000000116b36eb1: add    $0x8,%r13
  0x0000000116b36eb5: movabs $0x10ce38e80,%r10
  0x0000000116b36ebf: jmpq   *(%r10,%rbx,8)
  0x0000000116b36ec3: mov    -0x10(%rbp),%rsp
  0x0000000116b36ec7: movq   $0x0,-0x10(%rbp)
  0x0000000116b36ecf: mov    -0x38(%rbp),%r13
  0x0000000116b36ed3: mov    -0x30(%rbp),%r14
  0x0000000116b36ed7: movzwl 0x1(%r13),%ecx
  0x0000000116b36edc: mov    -0x28(%rbp),%rbx
  0x0000000116b36ee0: shl    $0x2,%ecx
  0x0000000116b36ee3: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36ee7: and    $0xff,%ebx
  0x0000000116b36eed: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36ef1: movzbl 0x8(%r13),%ebx
  0x0000000116b36ef6: add    $0x8,%r13
  0x0000000116b36efa: movabs $0x10ce38e80,%r10
  0x0000000116b36f04: jmpq   *(%r10,%rbx,8)
  0x0000000116b36f08: mov    -0x10(%rbp),%rsp
  0x0000000116b36f0c: movq   $0x0,-0x10(%rbp)
  0x0000000116b36f14: mov    -0x38(%rbp),%r13
  0x0000000116b36f18: mov    -0x30(%rbp),%r14
  0x0000000116b36f1c: movzwl 0x1(%r13),%ecx
  0x0000000116b36f21: mov    -0x28(%rbp),%rbx
  0x0000000116b36f25: shl    $0x2,%ecx
  0x0000000116b36f28: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36f2c: and    $0xff,%ebx
  0x0000000116b36f32: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36f36: movzbl 0x8(%r13),%ebx
  0x0000000116b36f3b: add    $0x8,%r13
  0x0000000116b36f3f: movabs $0x10ce38e80,%r10
  0x0000000116b36f49: jmpq   *(%r10,%rbx,8)
  0x0000000116b36f4d: mov    -0x10(%rbp),%rsp
  0x0000000116b36f51: movq   $0x0,-0x10(%rbp)
  0x0000000116b36f59: mov    -0x38(%rbp),%r13
  0x0000000116b36f5d: mov    -0x30(%rbp),%r14
  0x0000000116b36f61: movzwl 0x1(%r13),%ecx
  0x0000000116b36f66: mov    -0x28(%rbp),%rbx
  0x0000000116b36f6a: shl    $0x2,%ecx
  0x0000000116b36f6d: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36f71: and    $0xff,%ebx
  0x0000000116b36f77: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36f7b: movzbl 0x8(%r13),%ebx
  0x0000000116b36f80: add    $0x8,%r13
  0x0000000116b36f84: movabs $0x10ce38e80,%r10
  0x0000000116b36f8e: jmpq   *(%r10,%rbx,8)
  0x0000000116b36f92: mov    -0x10(%rbp),%rsp
  0x0000000116b36f96: movq   $0x0,-0x10(%rbp)
  0x0000000116b36f9e: mov    -0x38(%rbp),%r13
  0x0000000116b36fa2: mov    -0x30(%rbp),%r14
  0x0000000116b36fa6: movzwl 0x1(%r13),%ecx
  0x0000000116b36fab: mov    -0x28(%rbp),%rbx
  0x0000000116b36faf: shl    $0x2,%ecx
  0x0000000116b36fb2: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36fb6: and    $0xff,%ebx
  0x0000000116b36fbc: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b36fc0: movzbl 0x8(%r13),%ebx
  0x0000000116b36fc5: add    $0x8,%r13
  0x0000000116b36fc9: movabs $0x10ce3ae80,%r10
  0x0000000116b36fd3: jmpq   *(%r10,%rbx,8)
  0x0000000116b36fd7: mov    -0x10(%rbp),%rsp
  0x0000000116b36fdb: movq   $0x0,-0x10(%rbp)
  0x0000000116b36fe3: mov    -0x38(%rbp),%r13
  0x0000000116b36fe7: mov    -0x30(%rbp),%r14
  0x0000000116b36feb: movzwl 0x1(%r13),%ecx
  0x0000000116b36ff0: mov    -0x28(%rbp),%rbx
  0x0000000116b36ff4: shl    $0x2,%ecx
  0x0000000116b36ff7: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b36ffb: and    $0xff,%ebx
  0x0000000116b37001: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37005: movzbl 0x8(%r13),%ebx
  0x0000000116b3700a: add    $0x8,%r13
  0x0000000116b3700e: movabs $0x10ce38e80,%r10
  0x0000000116b37018: jmpq   *(%r10,%rbx,8)
  0x0000000116b3701c: mov    -0x10(%rbp),%rsp
  0x0000000116b37020: movq   $0x0,-0x10(%rbp)
  0x0000000116b37028: mov    -0x38(%rbp),%r13
  0x0000000116b3702c: mov    -0x30(%rbp),%r14
  0x0000000116b37030: movzwl 0x1(%r13),%ecx
  0x0000000116b37035: mov    -0x28(%rbp),%rbx
  0x0000000116b37039: shl    $0x2,%ecx
  0x0000000116b3703c: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37040: and    $0xff,%ebx
  0x0000000116b37046: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3704a: movzbl 0x8(%r13),%ebx
  0x0000000116b3704f: add    $0x8,%r13
  0x0000000116b37053: movabs $0x10ce39680,%r10
  0x0000000116b3705d: jmpq   *(%r10,%rbx,8)
  0x0000000116b37061: mov    -0x10(%rbp),%rsp
  0x0000000116b37065: movq   $0x0,-0x10(%rbp)
  0x0000000116b3706d: mov    -0x38(%rbp),%r13
  0x0000000116b37071: mov    -0x30(%rbp),%r14
  0x0000000116b37075: movzwl 0x1(%r13),%ecx
  0x0000000116b3707a: mov    -0x28(%rbp),%rbx
  0x0000000116b3707e: shl    $0x2,%ecx
  0x0000000116b37081: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37085: and    $0xff,%ebx
  0x0000000116b3708b: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3708f: movzbl 0x8(%r13),%ebx
  0x0000000116b37094: add    $0x8,%r13
  0x0000000116b37098: movabs $0x10ce39e80,%r10
  0x0000000116b370a2: jmpq   *(%r10,%rbx,8)
  0x0000000116b370a6: mov    -0x10(%rbp),%rsp
  0x0000000116b370aa: movq   $0x0,-0x10(%rbp)
  0x0000000116b370b2: mov    -0x38(%rbp),%r13
  0x0000000116b370b6: mov    -0x30(%rbp),%r14
  0x0000000116b370ba: movzwl 0x1(%r13),%ecx
  0x0000000116b370bf: mov    -0x28(%rbp),%rbx
  0x0000000116b370c3: shl    $0x2,%ecx
  0x0000000116b370c6: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b370ca: and    $0xff,%ebx
  0x0000000116b370d0: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b370d4: movzbl 0x8(%r13),%ebx
  0x0000000116b370d9: add    $0x8,%r13
  0x0000000116b370dd: movabs $0x10ce3a680,%r10
  0x0000000116b370e7: jmpq   *(%r10,%rbx,8)
  0x0000000116b370eb: mov    -0x10(%rbp),%rsp
  0x0000000116b370ef: movq   $0x0,-0x10(%rbp)
  0x0000000116b370f7: mov    -0x38(%rbp),%r13
  0x0000000116b370fb: mov    -0x30(%rbp),%r14
  0x0000000116b370ff: movzwl 0x1(%r13),%ecx
  0x0000000116b37104: mov    -0x28(%rbp),%rbx
  0x0000000116b37108: shl    $0x2,%ecx
  0x0000000116b3710b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3710f: and    $0xff,%ebx
  0x0000000116b37115: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37119: movzbl 0x8(%r13),%ebx
  0x0000000116b3711e: add    $0x8,%r13
  0x0000000116b37122: movabs $0x10ce3b680,%r10
  0x0000000116b3712c: jmpq   *(%r10,%rbx,8)
  0x0000000116b37130: mov    -0x10(%rbp),%rsp
  0x0000000116b37134: movq   $0x0,-0x10(%rbp)
  0x0000000116b3713c: mov    -0x38(%rbp),%r13
  0x0000000116b37140: mov    -0x30(%rbp),%r14
  0x0000000116b37144: movzwl 0x1(%r13),%ecx
  0x0000000116b37149: mov    -0x28(%rbp),%rbx
  0x0000000116b3714d: shl    $0x2,%ecx
  0x0000000116b37150: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37154: and    $0xff,%ebx
  0x0000000116b3715a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3715e: movzbl 0x9(%r13),%ebx
  0x0000000116b37163: add    $0x9,%r13
  0x0000000116b37167: movabs $0x10ce38e80,%r10
  0x0000000116b37171: jmpq   *(%r10,%rbx,8)
  0x0000000116b37175: mov    -0x10(%rbp),%rsp
  0x0000000116b37179: movq   $0x0,-0x10(%rbp)
  0x0000000116b37181: mov    -0x38(%rbp),%r13
  0x0000000116b37185: mov    -0x30(%rbp),%r14
  0x0000000116b37189: movzwl 0x1(%r13),%ecx
  0x0000000116b3718e: mov    -0x28(%rbp),%rbx
  0x0000000116b37192: shl    $0x2,%ecx
  0x0000000116b37195: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37199: and    $0xff,%ebx
  0x0000000116b3719f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b371a3: movzbl 0x9(%r13),%ebx
  0x0000000116b371a8: add    $0x9,%r13
  0x0000000116b371ac: movabs $0x10ce38e80,%r10
  0x0000000116b371b6: jmpq   *(%r10,%rbx,8)
  0x0000000116b371ba: mov    -0x10(%rbp),%rsp
  0x0000000116b371be: movq   $0x0,-0x10(%rbp)
  0x0000000116b371c6: mov    -0x38(%rbp),%r13
  0x0000000116b371ca: mov    -0x30(%rbp),%r14
  0x0000000116b371ce: movzwl 0x1(%r13),%ecx
  0x0000000116b371d3: mov    -0x28(%rbp),%rbx
  0x0000000116b371d7: shl    $0x2,%ecx
  0x0000000116b371da: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b371de: and    $0xff,%ebx
  0x0000000116b371e4: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b371e8: movzbl 0x9(%r13),%ebx
  0x0000000116b371ed: add    $0x9,%r13
  0x0000000116b371f1: movabs $0x10ce38e80,%r10
  0x0000000116b371fb: jmpq   *(%r10,%rbx,8)
  0x0000000116b371ff: mov    -0x10(%rbp),%rsp
  0x0000000116b37203: movq   $0x0,-0x10(%rbp)
  0x0000000116b3720b: mov    -0x38(%rbp),%r13
  0x0000000116b3720f: mov    -0x30(%rbp),%r14
  0x0000000116b37213: movzwl 0x1(%r13),%ecx
  0x0000000116b37218: mov    -0x28(%rbp),%rbx
  0x0000000116b3721c: shl    $0x2,%ecx
  0x0000000116b3721f: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37223: and    $0xff,%ebx
  0x0000000116b37229: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3722d: movzbl 0x9(%r13),%ebx
  0x0000000116b37232: add    $0x9,%r13
  0x0000000116b37236: movabs $0x10ce38e80,%r10
  0x0000000116b37240: jmpq   *(%r10,%rbx,8)
  0x0000000116b37244: mov    -0x10(%rbp),%rsp
  0x0000000116b37248: movq   $0x0,-0x10(%rbp)
  0x0000000116b37250: mov    -0x38(%rbp),%r13
  0x0000000116b37254: mov    -0x30(%rbp),%r14
  0x0000000116b37258: movzwl 0x1(%r13),%ecx
  0x0000000116b3725d: mov    -0x28(%rbp),%rbx
  0x0000000116b37261: shl    $0x2,%ecx
  0x0000000116b37264: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37268: and    $0xff,%ebx
  0x0000000116b3726e: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37272: movzbl 0x9(%r13),%ebx
  0x0000000116b37277: add    $0x9,%r13
  0x0000000116b3727b: movabs $0x10ce3ae80,%r10
  0x0000000116b37285: jmpq   *(%r10,%rbx,8)
  0x0000000116b37289: mov    -0x10(%rbp),%rsp
  0x0000000116b3728d: movq   $0x0,-0x10(%rbp)
  0x0000000116b37295: mov    -0x38(%rbp),%r13
  0x0000000116b37299: mov    -0x30(%rbp),%r14
  0x0000000116b3729d: movzwl 0x1(%r13),%ecx
  0x0000000116b372a2: mov    -0x28(%rbp),%rbx
  0x0000000116b372a6: shl    $0x2,%ecx
  0x0000000116b372a9: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b372ad: and    $0xff,%ebx
  0x0000000116b372b3: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b372b7: movzbl 0x9(%r13),%ebx
  0x0000000116b372bc: add    $0x9,%r13
  0x0000000116b372c0: movabs $0x10ce38e80,%r10
  0x0000000116b372ca: jmpq   *(%r10,%rbx,8)
  0x0000000116b372ce: mov    -0x10(%rbp),%rsp
  0x0000000116b372d2: movq   $0x0,-0x10(%rbp)
  0x0000000116b372da: mov    -0x38(%rbp),%r13
  0x0000000116b372de: mov    -0x30(%rbp),%r14
  0x0000000116b372e2: movzwl 0x1(%r13),%ecx
  0x0000000116b372e7: mov    -0x28(%rbp),%rbx
  0x0000000116b372eb: shl    $0x2,%ecx
  0x0000000116b372ee: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b372f2: and    $0xff,%ebx
  0x0000000116b372f8: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b372fc: movzbl 0x9(%r13),%ebx
  0x0000000116b37301: add    $0x9,%r13
  0x0000000116b37305: movabs $0x10ce39680,%r10
  0x0000000116b3730f: jmpq   *(%r10,%rbx,8)
  0x0000000116b37313: mov    -0x10(%rbp),%rsp
  0x0000000116b37317: movq   $0x0,-0x10(%rbp)
  0x0000000116b3731f: mov    -0x38(%rbp),%r13
  0x0000000116b37323: mov    -0x30(%rbp),%r14
  0x0000000116b37327: movzwl 0x1(%r13),%ecx
  0x0000000116b3732c: mov    -0x28(%rbp),%rbx
  0x0000000116b37330: shl    $0x2,%ecx
  0x0000000116b37333: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37337: and    $0xff,%ebx
  0x0000000116b3733d: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37341: movzbl 0x9(%r13),%ebx
  0x0000000116b37346: add    $0x9,%r13
  0x0000000116b3734a: movabs $0x10ce39e80,%r10
  0x0000000116b37354: jmpq   *(%r10,%rbx,8)
  0x0000000116b37358: mov    -0x10(%rbp),%rsp
  0x0000000116b3735c: movq   $0x0,-0x10(%rbp)
  0x0000000116b37364: mov    -0x38(%rbp),%r13
  0x0000000116b37368: mov    -0x30(%rbp),%r14
  0x0000000116b3736c: movzwl 0x1(%r13),%ecx
  0x0000000116b37371: mov    -0x28(%rbp),%rbx
  0x0000000116b37375: shl    $0x2,%ecx
  0x0000000116b37378: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3737c: and    $0xff,%ebx
  0x0000000116b37382: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37386: movzbl 0x9(%r13),%ebx
  0x0000000116b3738b: add    $0x9,%r13
  0x0000000116b3738f: movabs $0x10ce3a680,%r10
  0x0000000116b37399: jmpq   *(%r10,%rbx,8)
  0x0000000116b3739d: mov    -0x10(%rbp),%rsp
  0x0000000116b373a1: movq   $0x0,-0x10(%rbp)
  0x0000000116b373a9: mov    -0x38(%rbp),%r13
  0x0000000116b373ad: mov    -0x30(%rbp),%r14
  0x0000000116b373b1: movzwl 0x1(%r13),%ecx
  0x0000000116b373b6: mov    -0x28(%rbp),%rbx
  0x0000000116b373ba: shl    $0x2,%ecx
  0x0000000116b373bd: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b373c1: and    $0xff,%ebx
  0x0000000116b373c7: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b373cb: movzbl 0x9(%r13),%ebx
  0x0000000116b373d0: add    $0x9,%r13
  0x0000000116b373d4: movabs $0x10ce3b680,%r10
  0x0000000116b373de: jmpq   *(%r10,%rbx,8)
  0x0000000116b373e2: nop
  0x0000000116b373e3: nop
  0x0000000116b373e4: nop
  0x0000000116b373e5: nop
  0x0000000116b373e6: nop
  0x0000000116b373e7: nop
  0x0000000116b373e8: int3   
  0x0000000116b373e9: int3   
  0x0000000116b373ea: int3   
  0x0000000116b373eb: int3   
  0x0000000116b373ec: int3   
  0x0000000116b373ed: int3   
  0x0000000116b373ee: int3   
  0x0000000116b373ef: int3   
  0x0000000116b373f0: int3   
  0x0000000116b373f1: int3   
  0x0000000116b373f2: int3   
  0x0000000116b373f3: int3   
  0x0000000116b373f4: int3   
  0x0000000116b373f5: int3   
  0x0000000116b373f6: int3   
  0x0000000116b373f7: int3   
  0x0000000116b373f8: int3   
  0x0000000116b373f9: int3   
  0x0000000116b373fa: int3   
  0x0000000116b373fb: int3   
  0x0000000116b373fc: int3   
  0x0000000116b373fd: int3   
  0x0000000116b373fe: int3   
  0x0000000116b373ff: int3   

----------------------------------------------------------------------
invoke return entry points  [0x0000000116b37440, 0x0000000116b37c60]  2080 bytes

  0x0000000116b37440: mov    -0x10(%rbp),%rsp
  0x0000000116b37444: movq   $0x0,-0x10(%rbp)
  0x0000000116b3744c: mov    -0x38(%rbp),%r13
  0x0000000116b37450: mov    -0x30(%rbp),%r14
  0x0000000116b37454: movzwl 0x1(%r13),%ecx
  0x0000000116b37459: mov    -0x28(%rbp),%rbx
  0x0000000116b3745d: shl    $0x2,%ecx
  0x0000000116b37460: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37464: and    $0xff,%ebx
  0x0000000116b3746a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3746e: movzbl 0x3(%r13),%ebx
  0x0000000116b37473: add    $0x3,%r13
  0x0000000116b37477: movabs $0x10ce38e80,%r10
  0x0000000116b37481: jmpq   *(%r10,%rbx,8)
  0x0000000116b37485: mov    -0x10(%rbp),%rsp
  0x0000000116b37489: movq   $0x0,-0x10(%rbp)
  0x0000000116b37491: mov    -0x38(%rbp),%r13
  0x0000000116b37495: mov    -0x30(%rbp),%r14
  0x0000000116b37499: movzwl 0x1(%r13),%ecx
  0x0000000116b3749e: mov    -0x28(%rbp),%rbx
  0x0000000116b374a2: shl    $0x2,%ecx
  0x0000000116b374a5: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b374a9: and    $0xff,%ebx
  0x0000000116b374af: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b374b3: movzbl 0x5(%r13),%ebx
  0x0000000116b374b8: add    $0x5,%r13
  0x0000000116b374bc: movabs $0x10ce38e80,%r10
  0x0000000116b374c6: jmpq   *(%r10,%rbx,8)
  0x0000000116b374ca: mov    -0x10(%rbp),%rsp
  0x0000000116b374ce: movq   $0x0,-0x10(%rbp)
  0x0000000116b374d6: mov    -0x38(%rbp),%r13
  0x0000000116b374da: mov    -0x30(%rbp),%r14
  0x0000000116b374de: mov    0x1(%r13),%ecx
  0x0000000116b374e2: not    %ecx
  0x0000000116b374e4: mov    -0x28(%rbp),%rbx
  0x0000000116b374e8: shl    $0x2,%ecx
  0x0000000116b374eb: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b374ef: and    $0xff,%ebx
  0x0000000116b374f5: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b374f9: movzbl 0x5(%r13),%ebx
  0x0000000116b374fe: add    $0x5,%r13
  0x0000000116b37502: movabs $0x10ce38e80,%r10
  0x0000000116b3750c: jmpq   *(%r10,%rbx,8)
  0x0000000116b37510: mov    -0x10(%rbp),%rsp
  0x0000000116b37514: movq   $0x0,-0x10(%rbp)
  0x0000000116b3751c: mov    -0x38(%rbp),%r13
  0x0000000116b37520: mov    -0x30(%rbp),%r14
  0x0000000116b37524: movzwl 0x1(%r13),%ecx
  0x0000000116b37529: mov    -0x28(%rbp),%rbx
  0x0000000116b3752d: shl    $0x2,%ecx
  0x0000000116b37530: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37534: and    $0xff,%ebx
  0x0000000116b3753a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3753e: movzbl 0x3(%r13),%ebx
  0x0000000116b37543: add    $0x3,%r13
  0x0000000116b37547: movabs $0x10ce38e80,%r10
  0x0000000116b37551: jmpq   *(%r10,%rbx,8)
  0x0000000116b37555: mov    -0x10(%rbp),%rsp
  0x0000000116b37559: movq   $0x0,-0x10(%rbp)
  0x0000000116b37561: mov    -0x38(%rbp),%r13
  0x0000000116b37565: mov    -0x30(%rbp),%r14
  0x0000000116b37569: movzwl 0x1(%r13),%ecx
  0x0000000116b3756e: mov    -0x28(%rbp),%rbx
  0x0000000116b37572: shl    $0x2,%ecx
  0x0000000116b37575: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37579: and    $0xff,%ebx
  0x0000000116b3757f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37583: movzbl 0x5(%r13),%ebx
  0x0000000116b37588: add    $0x5,%r13
  0x0000000116b3758c: movabs $0x10ce38e80,%r10
  0x0000000116b37596: jmpq   *(%r10,%rbx,8)
  0x0000000116b3759a: mov    -0x10(%rbp),%rsp
  0x0000000116b3759e: movq   $0x0,-0x10(%rbp)
  0x0000000116b375a6: mov    -0x38(%rbp),%r13
  0x0000000116b375aa: mov    -0x30(%rbp),%r14
  0x0000000116b375ae: mov    0x1(%r13),%ecx
  0x0000000116b375b2: not    %ecx
  0x0000000116b375b4: mov    -0x28(%rbp),%rbx
  0x0000000116b375b8: shl    $0x2,%ecx
  0x0000000116b375bb: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b375bf: and    $0xff,%ebx
  0x0000000116b375c5: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b375c9: movzbl 0x5(%r13),%ebx
  0x0000000116b375ce: add    $0x5,%r13
  0x0000000116b375d2: movabs $0x10ce38e80,%r10
  0x0000000116b375dc: jmpq   *(%r10,%rbx,8)
  0x0000000116b375e0: mov    -0x10(%rbp),%rsp
  0x0000000116b375e4: movq   $0x0,-0x10(%rbp)
  0x0000000116b375ec: mov    -0x38(%rbp),%r13
  0x0000000116b375f0: mov    -0x30(%rbp),%r14
  0x0000000116b375f4: movzwl 0x1(%r13),%ecx
  0x0000000116b375f9: mov    -0x28(%rbp),%rbx
  0x0000000116b375fd: shl    $0x2,%ecx
  0x0000000116b37600: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37604: and    $0xff,%ebx
  0x0000000116b3760a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3760e: movzbl 0x3(%r13),%ebx
  0x0000000116b37613: add    $0x3,%r13
  0x0000000116b37617: movabs $0x10ce38e80,%r10
  0x0000000116b37621: jmpq   *(%r10,%rbx,8)
  0x0000000116b37625: mov    -0x10(%rbp),%rsp
  0x0000000116b37629: movq   $0x0,-0x10(%rbp)
  0x0000000116b37631: mov    -0x38(%rbp),%r13
  0x0000000116b37635: mov    -0x30(%rbp),%r14
  0x0000000116b37639: movzwl 0x1(%r13),%ecx
  0x0000000116b3763e: mov    -0x28(%rbp),%rbx
  0x0000000116b37642: shl    $0x2,%ecx
  0x0000000116b37645: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37649: and    $0xff,%ebx
  0x0000000116b3764f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37653: movzbl 0x5(%r13),%ebx
  0x0000000116b37658: add    $0x5,%r13
  0x0000000116b3765c: movabs $0x10ce38e80,%r10
  0x0000000116b37666: jmpq   *(%r10,%rbx,8)
  0x0000000116b3766a: mov    -0x10(%rbp),%rsp
  0x0000000116b3766e: movq   $0x0,-0x10(%rbp)
  0x0000000116b37676: mov    -0x38(%rbp),%r13
  0x0000000116b3767a: mov    -0x30(%rbp),%r14
  0x0000000116b3767e: mov    0x1(%r13),%ecx
  0x0000000116b37682: not    %ecx
  0x0000000116b37684: mov    -0x28(%rbp),%rbx
  0x0000000116b37688: shl    $0x2,%ecx
  0x0000000116b3768b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3768f: and    $0xff,%ebx
  0x0000000116b37695: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37699: movzbl 0x5(%r13),%ebx
  0x0000000116b3769e: add    $0x5,%r13
  0x0000000116b376a2: movabs $0x10ce38e80,%r10
  0x0000000116b376ac: jmpq   *(%r10,%rbx,8)
  0x0000000116b376b0: mov    -0x10(%rbp),%rsp
  0x0000000116b376b4: movq   $0x0,-0x10(%rbp)
  0x0000000116b376bc: mov    -0x38(%rbp),%r13
  0x0000000116b376c0: mov    -0x30(%rbp),%r14
  0x0000000116b376c4: movzwl 0x1(%r13),%ecx
  0x0000000116b376c9: mov    -0x28(%rbp),%rbx
  0x0000000116b376cd: shl    $0x2,%ecx
  0x0000000116b376d0: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b376d4: and    $0xff,%ebx
  0x0000000116b376da: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b376de: movzbl 0x3(%r13),%ebx
  0x0000000116b376e3: add    $0x3,%r13
  0x0000000116b376e7: movabs $0x10ce38e80,%r10
  0x0000000116b376f1: jmpq   *(%r10,%rbx,8)
  0x0000000116b376f5: mov    -0x10(%rbp),%rsp
  0x0000000116b376f9: movq   $0x0,-0x10(%rbp)
  0x0000000116b37701: mov    -0x38(%rbp),%r13
  0x0000000116b37705: mov    -0x30(%rbp),%r14
  0x0000000116b37709: movzwl 0x1(%r13),%ecx
  0x0000000116b3770e: mov    -0x28(%rbp),%rbx
  0x0000000116b37712: shl    $0x2,%ecx
  0x0000000116b37715: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37719: and    $0xff,%ebx
  0x0000000116b3771f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37723: movzbl 0x5(%r13),%ebx
  0x0000000116b37728: add    $0x5,%r13
  0x0000000116b3772c: movabs $0x10ce38e80,%r10
  0x0000000116b37736: jmpq   *(%r10,%rbx,8)
  0x0000000116b3773a: mov    -0x10(%rbp),%rsp
  0x0000000116b3773e: movq   $0x0,-0x10(%rbp)
  0x0000000116b37746: mov    -0x38(%rbp),%r13
  0x0000000116b3774a: mov    -0x30(%rbp),%r14
  0x0000000116b3774e: mov    0x1(%r13),%ecx
  0x0000000116b37752: not    %ecx
  0x0000000116b37754: mov    -0x28(%rbp),%rbx
  0x0000000116b37758: shl    $0x2,%ecx
  0x0000000116b3775b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3775f: and    $0xff,%ebx
  0x0000000116b37765: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37769: movzbl 0x5(%r13),%ebx
  0x0000000116b3776e: add    $0x5,%r13
  0x0000000116b37772: movabs $0x10ce38e80,%r10
  0x0000000116b3777c: jmpq   *(%r10,%rbx,8)
  0x0000000116b37780: mov    -0x10(%rbp),%rsp
  0x0000000116b37784: movq   $0x0,-0x10(%rbp)
  0x0000000116b3778c: mov    -0x38(%rbp),%r13
  0x0000000116b37790: mov    -0x30(%rbp),%r14
  0x0000000116b37794: movzwl 0x1(%r13),%ecx
  0x0000000116b37799: mov    -0x28(%rbp),%rbx
  0x0000000116b3779d: shl    $0x2,%ecx
  0x0000000116b377a0: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b377a4: and    $0xff,%ebx
  0x0000000116b377aa: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b377ae: movzbl 0x3(%r13),%ebx
  0x0000000116b377b3: add    $0x3,%r13
  0x0000000116b377b7: movabs $0x10ce38e80,%r10
  0x0000000116b377c1: jmpq   *(%r10,%rbx,8)
  0x0000000116b377c5: mov    -0x10(%rbp),%rsp
  0x0000000116b377c9: movq   $0x0,-0x10(%rbp)
  0x0000000116b377d1: mov    -0x38(%rbp),%r13
  0x0000000116b377d5: mov    -0x30(%rbp),%r14
  0x0000000116b377d9: movzwl 0x1(%r13),%ecx
  0x0000000116b377de: mov    -0x28(%rbp),%rbx
  0x0000000116b377e2: shl    $0x2,%ecx
  0x0000000116b377e5: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b377e9: and    $0xff,%ebx
  0x0000000116b377ef: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b377f3: movzbl 0x5(%r13),%ebx
  0x0000000116b377f8: add    $0x5,%r13
  0x0000000116b377fc: movabs $0x10ce38e80,%r10
  0x0000000116b37806: jmpq   *(%r10,%rbx,8)
  0x0000000116b3780a: mov    -0x10(%rbp),%rsp
  0x0000000116b3780e: movq   $0x0,-0x10(%rbp)
  0x0000000116b37816: mov    -0x38(%rbp),%r13
  0x0000000116b3781a: mov    -0x30(%rbp),%r14
  0x0000000116b3781e: mov    0x1(%r13),%ecx
  0x0000000116b37822: not    %ecx
  0x0000000116b37824: mov    -0x28(%rbp),%rbx
  0x0000000116b37828: shl    $0x2,%ecx
  0x0000000116b3782b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b3782f: and    $0xff,%ebx
  0x0000000116b37835: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37839: movzbl 0x5(%r13),%ebx
  0x0000000116b3783e: add    $0x5,%r13
  0x0000000116b37842: movabs $0x10ce38e80,%r10
  0x0000000116b3784c: jmpq   *(%r10,%rbx,8)
  0x0000000116b37850: mov    -0x10(%rbp),%rsp
  0x0000000116b37854: movq   $0x0,-0x10(%rbp)
  0x0000000116b3785c: mov    -0x38(%rbp),%r13
  0x0000000116b37860: mov    -0x30(%rbp),%r14
  0x0000000116b37864: movzwl 0x1(%r13),%ecx
  0x0000000116b37869: mov    -0x28(%rbp),%rbx
  0x0000000116b3786d: shl    $0x2,%ecx
  0x0000000116b37870: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37874: and    $0xff,%ebx
  0x0000000116b3787a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3787e: movzbl 0x3(%r13),%ebx
  0x0000000116b37883: add    $0x3,%r13
  0x0000000116b37887: movabs $0x10ce39680,%r10
  0x0000000116b37891: jmpq   *(%r10,%rbx,8)
  0x0000000116b37895: mov    -0x10(%rbp),%rsp
  0x0000000116b37899: movq   $0x0,-0x10(%rbp)
  0x0000000116b378a1: mov    -0x38(%rbp),%r13
  0x0000000116b378a5: mov    -0x30(%rbp),%r14
  0x0000000116b378a9: movzwl 0x1(%r13),%ecx
  0x0000000116b378ae: mov    -0x28(%rbp),%rbx
  0x0000000116b378b2: shl    $0x2,%ecx
  0x0000000116b378b5: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b378b9: and    $0xff,%ebx
  0x0000000116b378bf: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b378c3: movzbl 0x5(%r13),%ebx
  0x0000000116b378c8: add    $0x5,%r13
  0x0000000116b378cc: movabs $0x10ce39680,%r10
  0x0000000116b378d6: jmpq   *(%r10,%rbx,8)
  0x0000000116b378da: mov    -0x10(%rbp),%rsp
  0x0000000116b378de: movq   $0x0,-0x10(%rbp)
  0x0000000116b378e6: mov    -0x38(%rbp),%r13
  0x0000000116b378ea: mov    -0x30(%rbp),%r14
  0x0000000116b378ee: mov    0x1(%r13),%ecx
  0x0000000116b378f2: not    %ecx
  0x0000000116b378f4: mov    -0x28(%rbp),%rbx
  0x0000000116b378f8: shl    $0x2,%ecx
  0x0000000116b378fb: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b378ff: and    $0xff,%ebx
  0x0000000116b37905: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37909: movzbl 0x5(%r13),%ebx
  0x0000000116b3790e: add    $0x5,%r13
  0x0000000116b37912: movabs $0x10ce39680,%r10
  0x0000000116b3791c: jmpq   *(%r10,%rbx,8)
  0x0000000116b37920: mov    -0x10(%rbp),%rsp
  0x0000000116b37924: movq   $0x0,-0x10(%rbp)
  0x0000000116b3792c: mov    -0x38(%rbp),%r13
  0x0000000116b37930: mov    -0x30(%rbp),%r14
  0x0000000116b37934: movzwl 0x1(%r13),%ecx
  0x0000000116b37939: mov    -0x28(%rbp),%rbx
  0x0000000116b3793d: shl    $0x2,%ecx
  0x0000000116b37940: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37944: and    $0xff,%ebx
  0x0000000116b3794a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b3794e: movzbl 0x3(%r13),%ebx
  0x0000000116b37953: add    $0x3,%r13
  0x0000000116b37957: movabs $0x10ce39e80,%r10
  0x0000000116b37961: jmpq   *(%r10,%rbx,8)
  0x0000000116b37965: mov    -0x10(%rbp),%rsp
  0x0000000116b37969: movq   $0x0,-0x10(%rbp)
  0x0000000116b37971: mov    -0x38(%rbp),%r13
  0x0000000116b37975: mov    -0x30(%rbp),%r14
  0x0000000116b37979: movzwl 0x1(%r13),%ecx
  0x0000000116b3797e: mov    -0x28(%rbp),%rbx
  0x0000000116b37982: shl    $0x2,%ecx
  0x0000000116b37985: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37989: and    $0xff,%ebx
  0x0000000116b3798f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37993: movzbl 0x5(%r13),%ebx
  0x0000000116b37998: add    $0x5,%r13
  0x0000000116b3799c: movabs $0x10ce39e80,%r10
  0x0000000116b379a6: jmpq   *(%r10,%rbx,8)
  0x0000000116b379aa: mov    -0x10(%rbp),%rsp
  0x0000000116b379ae: movq   $0x0,-0x10(%rbp)
  0x0000000116b379b6: mov    -0x38(%rbp),%r13
  0x0000000116b379ba: mov    -0x30(%rbp),%r14
  0x0000000116b379be: mov    0x1(%r13),%ecx
  0x0000000116b379c2: not    %ecx
  0x0000000116b379c4: mov    -0x28(%rbp),%rbx
  0x0000000116b379c8: shl    $0x2,%ecx
  0x0000000116b379cb: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b379cf: and    $0xff,%ebx
  0x0000000116b379d5: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b379d9: movzbl 0x5(%r13),%ebx
  0x0000000116b379de: add    $0x5,%r13
  0x0000000116b379e2: movabs $0x10ce39e80,%r10
  0x0000000116b379ec: jmpq   *(%r10,%rbx,8)
  0x0000000116b379f0: mov    -0x10(%rbp),%rsp
  0x0000000116b379f4: movq   $0x0,-0x10(%rbp)
  0x0000000116b379fc: mov    -0x38(%rbp),%r13
  0x0000000116b37a00: mov    -0x30(%rbp),%r14
  0x0000000116b37a04: movzwl 0x1(%r13),%ecx
  0x0000000116b37a09: mov    -0x28(%rbp),%rbx
  0x0000000116b37a0d: shl    $0x2,%ecx
  0x0000000116b37a10: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37a14: and    $0xff,%ebx
  0x0000000116b37a1a: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37a1e: movzbl 0x3(%r13),%ebx
  0x0000000116b37a23: add    $0x3,%r13
  0x0000000116b37a27: movabs $0x10ce3a680,%r10
  0x0000000116b37a31: jmpq   *(%r10,%rbx,8)
  0x0000000116b37a35: mov    -0x10(%rbp),%rsp
  0x0000000116b37a39: movq   $0x0,-0x10(%rbp)
  0x0000000116b37a41: mov    -0x38(%rbp),%r13
  0x0000000116b37a45: mov    -0x30(%rbp),%r14
  0x0000000116b37a49: movzwl 0x1(%r13),%ecx
  0x0000000116b37a4e: mov    -0x28(%rbp),%rbx
  0x0000000116b37a52: shl    $0x2,%ecx
  0x0000000116b37a55: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37a59: and    $0xff,%ebx
  0x0000000116b37a5f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37a63: movzbl 0x5(%r13),%ebx
  0x0000000116b37a68: add    $0x5,%r13
  0x0000000116b37a6c: movabs $0x10ce3a680,%r10
  0x0000000116b37a76: jmpq   *(%r10,%rbx,8)
  0x0000000116b37a7a: mov    -0x10(%rbp),%rsp
  0x0000000116b37a7e: movq   $0x0,-0x10(%rbp)
  0x0000000116b37a86: mov    -0x38(%rbp),%r13
  0x0000000116b37a8a: mov    -0x30(%rbp),%r14
  0x0000000116b37a8e: mov    0x1(%r13),%ecx
  0x0000000116b37a92: not    %ecx
  0x0000000116b37a94: mov    -0x28(%rbp),%rbx
  0x0000000116b37a98: shl    $0x2,%ecx
  0x0000000116b37a9b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37a9f: and    $0xff,%ebx
  0x0000000116b37aa5: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37aa9: movzbl 0x5(%r13),%ebx
  0x0000000116b37aae: add    $0x5,%r13
  0x0000000116b37ab2: movabs $0x10ce3a680,%r10
  0x0000000116b37abc: jmpq   *(%r10,%rbx,8)
  0x0000000116b37ac0: mov    -0x10(%rbp),%rsp
  0x0000000116b37ac4: movq   $0x0,-0x10(%rbp)
  0x0000000116b37acc: mov    -0x38(%rbp),%r13
  0x0000000116b37ad0: mov    -0x30(%rbp),%r14
  0x0000000116b37ad4: movzwl 0x1(%r13),%ecx
  0x0000000116b37ad9: mov    -0x28(%rbp),%rbx
  0x0000000116b37add: shl    $0x2,%ecx
  0x0000000116b37ae0: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37ae4: and    $0xff,%ebx
  0x0000000116b37aea: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37aee: movzbl 0x3(%r13),%ebx
  0x0000000116b37af3: add    $0x3,%r13
  0x0000000116b37af7: movabs $0x10ce3ae80,%r10
  0x0000000116b37b01: jmpq   *(%r10,%rbx,8)
  0x0000000116b37b05: mov    -0x10(%rbp),%rsp
  0x0000000116b37b09: movq   $0x0,-0x10(%rbp)
  0x0000000116b37b11: mov    -0x38(%rbp),%r13
  0x0000000116b37b15: mov    -0x30(%rbp),%r14
  0x0000000116b37b19: movzwl 0x1(%r13),%ecx
  0x0000000116b37b1e: mov    -0x28(%rbp),%rbx
  0x0000000116b37b22: shl    $0x2,%ecx
  0x0000000116b37b25: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37b29: and    $0xff,%ebx
  0x0000000116b37b2f: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37b33: movzbl 0x5(%r13),%ebx
  0x0000000116b37b38: add    $0x5,%r13
  0x0000000116b37b3c: movabs $0x10ce3ae80,%r10
  0x0000000116b37b46: jmpq   *(%r10,%rbx,8)
  0x0000000116b37b4a: mov    -0x10(%rbp),%rsp
  0x0000000116b37b4e: movq   $0x0,-0x10(%rbp)
  0x0000000116b37b56: mov    -0x38(%rbp),%r13
  0x0000000116b37b5a: mov    -0x30(%rbp),%r14
  0x0000000116b37b5e: mov    0x1(%r13),%ecx
  0x0000000116b37b62: not    %ecx
  0x0000000116b37b64: mov    -0x28(%rbp),%rbx
  0x0000000116b37b68: shl    $0x2,%ecx
  0x0000000116b37b6b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37b6f: and    $0xff,%ebx
  0x0000000116b37b75: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37b79: movzbl 0x5(%r13),%ebx
  0x0000000116b37b7e: add    $0x5,%r13
  0x0000000116b37b82: movabs $0x10ce3ae80,%r10
  0x0000000116b37b8c: jmpq   *(%r10,%rbx,8)
  0x0000000116b37b90: mov    -0x10(%rbp),%rsp
  0x0000000116b37b94: movq   $0x0,-0x10(%rbp)
  0x0000000116b37b9c: mov    -0x38(%rbp),%r13
  0x0000000116b37ba0: mov    -0x30(%rbp),%r14
  0x0000000116b37ba4: movzwl 0x1(%r13),%ecx
  0x0000000116b37ba9: mov    -0x28(%rbp),%rbx
  0x0000000116b37bad: shl    $0x2,%ecx
  0x0000000116b37bb0: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37bb4: and    $0xff,%ebx
  0x0000000116b37bba: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37bbe: movzbl 0x3(%r13),%ebx
  0x0000000116b37bc3: add    $0x3,%r13
  0x0000000116b37bc7: movabs $0x10ce3b680,%r10
  0x0000000116b37bd1: jmpq   *(%r10,%rbx,8)
  0x0000000116b37bd5: mov    -0x10(%rbp),%rsp
  0x0000000116b37bd9: movq   $0x0,-0x10(%rbp)
  0x0000000116b37be1: mov    -0x38(%rbp),%r13
  0x0000000116b37be5: mov    -0x30(%rbp),%r14
  0x0000000116b37be9: movzwl 0x1(%r13),%ecx
  0x0000000116b37bee: mov    -0x28(%rbp),%rbx
  0x0000000116b37bf2: shl    $0x2,%ecx
  0x0000000116b37bf5: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37bf9: and    $0xff,%ebx
  0x0000000116b37bff: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37c03: movzbl 0x5(%r13),%ebx
  0x0000000116b37c08: add    $0x5,%r13
  0x0000000116b37c0c: movabs $0x10ce3b680,%r10
  0x0000000116b37c16: jmpq   *(%r10,%rbx,8)
  0x0000000116b37c1a: mov    -0x10(%rbp),%rsp
  0x0000000116b37c1e: movq   $0x0,-0x10(%rbp)
  0x0000000116b37c26: mov    -0x38(%rbp),%r13
  0x0000000116b37c2a: mov    -0x30(%rbp),%r14
  0x0000000116b37c2e: mov    0x1(%r13),%ecx
  0x0000000116b37c32: not    %ecx
  0x0000000116b37c34: mov    -0x28(%rbp),%rbx
  0x0000000116b37c38: shl    $0x2,%ecx
  0x0000000116b37c3b: mov    0x28(%rbx,%rcx,8),%ebx
  0x0000000116b37c3f: and    $0xff,%ebx
  0x0000000116b37c45: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b37c49: movzbl 0x5(%r13),%ebx
  0x0000000116b37c4e: add    $0x5,%r13
  0x0000000116b37c52: movabs $0x10ce3b680,%r10
  0x0000000116b37c5c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
earlyret entry points  [0x0000000116b37ca0, 0x0000000116b3c0c0]  17440 bytes

  0x0000000116b37ca0: mov    -0x38(%rbp),%r13
  0x0000000116b37ca4: mov    -0x30(%rbp),%r14
  0x0000000116b37ca8: mov    -0x40(%rbp),%rsp
  0x0000000116b37cac: movq   $0x0,-0x10(%rbp)
  0x0000000116b37cb4: mov    0x630(%r15),%rcx
  0x0000000116b37cbb: mov    0x88(%rcx),%eax
  0x0000000116b37cc1: movl   $0xb,0x80(%rcx)
  0x0000000116b37ccb: movl   $0x0,0x88(%rcx)
  0x0000000116b37cd5: mov    0x630(%r15),%rdx
  0x0000000116b37cdc: movl   $0x0,0x7c(%rdx)
  0x0000000116b37ce3: mov    0x33d(%r15),%dl
  0x0000000116b37cea: movb   $0x0,0x33d(%r15)
  0x0000000116b37cf2: mov    -0x18(%rbp),%rbx
  0x0000000116b37cf6: mov    0x28(%rbx),%ecx
  0x0000000116b37cf9: test   $0x20,%ecx
  0x0000000116b37cff: je     0x0000000116b37fcf
  0x0000000116b37d05: test   $0xff,%dl
  0x0000000116b37d08: jne    0x0000000116b3829c
  0x0000000116b37d0e: push   %rax
  0x0000000116b37d0f: lea    -0x50(%rbp),%rsi
  0x0000000116b37d13: mov    0x8(%rsi),%rax
  0x0000000116b37d17: test   %rax,%rax
  0x0000000116b37d1a: jne    0x0000000116b37d2c
  0x0000000116b37d20: mov    (%rsp),%eax
  0x0000000116b37d23: add    $0x8,%rsp
  0x0000000116b37d27: jmpq   0x0000000116b37fcf
  0x0000000116b37d2c: mov    %r13,-0x38(%rbp)
  0x0000000116b37d30: lea    (%rsi),%rax
  0x0000000116b37d33: mov    0x8(%rsi),%rcx
  0x0000000116b37d37: movq   $0x0,0x8(%rsi)
  0x0000000116b37d3f: mov    (%rcx),%rdx
  0x0000000116b37d42: and    $0x7,%rdx
  0x0000000116b37d46: cmp    $0x5,%rdx
  0x0000000116b37d4a: je     0x0000000116b37fc4
  0x0000000116b37d50: mov    (%rax),%rdx
  0x0000000116b37d53: test   %rdx,%rdx
  0x0000000116b37d56: je     0x0000000116b37fc4
  0x0000000116b37d5c: lock cmpxchg %rdx,(%rcx)
  0x0000000116b37d61: je     0x0000000116b37fc4
  0x0000000116b37d67: mov    %rcx,0x8(%rsi)
  0x0000000116b37d6b: callq  0x0000000116b37d75
  0x0000000116b37d70: jmpq   0x0000000116b37fc4
  0x0000000116b37d75: lea    0x8(%rsp),%rax
  0x0000000116b37d7a: mov    %r13,-0x38(%rbp)
  0x0000000116b37d7e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b37d86: je     0x0000000116b37e03
  0x0000000116b37d8c: mov    %rsp,-0x28(%rsp)
  0x0000000116b37d91: sub    $0x80,%rsp
  0x0000000116b37d98: mov    %rax,0x78(%rsp)
  0x0000000116b37d9d: mov    %rcx,0x70(%rsp)
  0x0000000116b37da2: mov    %rdx,0x68(%rsp)
  0x0000000116b37da7: mov    %rbx,0x60(%rsp)
  0x0000000116b37dac: mov    %rbp,0x50(%rsp)
  0x0000000116b37db1: mov    %rsi,0x48(%rsp)
  0x0000000116b37db6: mov    %rdi,0x40(%rsp)
  0x0000000116b37dbb: mov    %r8,0x38(%rsp)
  0x0000000116b37dc0: mov    %r9,0x30(%rsp)
  0x0000000116b37dc5: mov    %r10,0x28(%rsp)
  0x0000000116b37dca: mov    %r11,0x20(%rsp)
  0x0000000116b37dcf: mov    %r12,0x18(%rsp)
  0x0000000116b37dd4: mov    %r13,0x10(%rsp)
  0x0000000116b37dd9: mov    %r14,0x8(%rsp)
  0x0000000116b37dde: mov    %r15,(%rsp)
  0x0000000116b37de2: movabs $0x10cc2363b,%rdi
  0x0000000116b37dec: movabs $0x116b37d8c,%rsi
  0x0000000116b37df6: mov    %rsp,%rdx
  0x0000000116b37df9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b37dfd: callq  0x000000010c7dd830
  0x0000000116b37e02: hlt    
  0x0000000116b37e03: push   %r10
  0x0000000116b37e05: cmp    -0x9cf155c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b37e0c: je     0x0000000116b37e89
  ;; call_VM_base: heap base corrupted?
  0x0000000116b37e12: mov    %rsp,-0x28(%rsp)
  0x0000000116b37e17: sub    $0x80,%rsp
  0x0000000116b37e1e: mov    %rax,0x78(%rsp)
  0x0000000116b37e23: mov    %rcx,0x70(%rsp)
  0x0000000116b37e28: mov    %rdx,0x68(%rsp)
  0x0000000116b37e2d: mov    %rbx,0x60(%rsp)
  0x0000000116b37e32: mov    %rbp,0x50(%rsp)
  0x0000000116b37e37: mov    %rsi,0x48(%rsp)
  0x0000000116b37e3c: mov    %rdi,0x40(%rsp)
  0x0000000116b37e41: mov    %r8,0x38(%rsp)
  0x0000000116b37e46: mov    %r9,0x30(%rsp)
  0x0000000116b37e4b: mov    %r10,0x28(%rsp)
  0x0000000116b37e50: mov    %r11,0x20(%rsp)
  0x0000000116b37e55: mov    %r12,0x18(%rsp)
  0x0000000116b37e5a: mov    %r13,0x10(%rsp)
  0x0000000116b37e5f: mov    %r14,0x8(%rsp)
  0x0000000116b37e64: mov    %r15,(%rsp)
  0x0000000116b37e68: movabs $0x10cc63f17,%rdi
  0x0000000116b37e72: movabs $0x116b37e12,%rsi
  0x0000000116b37e7c: mov    %rsp,%rdx
  0x0000000116b37e7f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b37e83: callq  0x000000010c7dd830
  0x0000000116b37e88: hlt    
  0x0000000116b37e89: pop    %r10
  0x0000000116b37e8b: mov    %r15,%rdi
  0x0000000116b37e8e: mov    %rbp,0x290(%r15)
  0x0000000116b37e95: mov    %rax,0x280(%r15)
  0x0000000116b37e9c: test   $0xf,%esp
  0x0000000116b37ea2: je     0x0000000116b37eba
  0x0000000116b37ea8: sub    $0x8,%rsp
  0x0000000116b37eac: callq  0x000000010c588f80
  0x0000000116b37eb1: add    $0x8,%rsp
  0x0000000116b37eb5: jmpq   0x0000000116b37ebf
  0x0000000116b37eba: callq  0x000000010c588f80
  0x0000000116b37ebf: push   %rax
  0x0000000116b37ec0: push   %rdi
  0x0000000116b37ec1: push   %rsi
  0x0000000116b37ec2: push   %rdx
  0x0000000116b37ec3: push   %rcx
  0x0000000116b37ec4: push   %r8
  0x0000000116b37ec6: push   %r9
  0x0000000116b37ec8: push   %r10
  0x0000000116b37eca: mov    %rsp,%r10
  0x0000000116b37ecd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b37ed1: push   %r10
  0x0000000116b37ed3: push   %r11
  0x0000000116b37ed5: mov    $0x109,%edi
  0x0000000116b37eda: movabs $0x7ff815049fd5,%r10
  0x0000000116b37ee4: callq  *%r10
  0x0000000116b37ee7: pop    %r11
  0x0000000116b37ee9: pop    %rsp
  0x0000000116b37eea: pop    %r10
  0x0000000116b37eec: pop    %r9
  0x0000000116b37eee: pop    %r8
  0x0000000116b37ef0: pop    %rcx
  0x0000000116b37ef1: pop    %rdx
  0x0000000116b37ef2: pop    %rsi
  0x0000000116b37ef3: pop    %rdi
  0x0000000116b37ef4: cmp    %rax,%r15
  0x0000000116b37ef7: je     0x0000000116b37f74
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b37efd: mov    %rsp,-0x28(%rsp)
  0x0000000116b37f02: sub    $0x80,%rsp
  0x0000000116b37f09: mov    %rax,0x78(%rsp)
  0x0000000116b37f0e: mov    %rcx,0x70(%rsp)
  0x0000000116b37f13: mov    %rdx,0x68(%rsp)
  0x0000000116b37f18: mov    %rbx,0x60(%rsp)
  0x0000000116b37f1d: mov    %rbp,0x50(%rsp)
  0x0000000116b37f22: mov    %rsi,0x48(%rsp)
  0x0000000116b37f27: mov    %rdi,0x40(%rsp)
  0x0000000116b37f2c: mov    %r8,0x38(%rsp)
  0x0000000116b37f31: mov    %r9,0x30(%rsp)
  0x0000000116b37f36: mov    %r10,0x28(%rsp)
  0x0000000116b37f3b: mov    %r11,0x20(%rsp)
  0x0000000116b37f40: mov    %r12,0x18(%rsp)
  0x0000000116b37f45: mov    %r13,0x10(%rsp)
  0x0000000116b37f4a: mov    %r14,0x8(%rsp)
  0x0000000116b37f4f: mov    %r15,(%rsp)
  0x0000000116b37f53: movabs $0x10cc6405e,%rdi
  0x0000000116b37f5d: movabs $0x116b37efd,%rsi
  0x0000000116b37f67: mov    %rsp,%rdx
  0x0000000116b37f6a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b37f6e: callq  0x000000010c7dd830
  0x0000000116b37f73: hlt    
  0x0000000116b37f74: pop    %rax
  0x0000000116b37f75: movabs $0x0,%r10
  0x0000000116b37f7f: mov    %r10,0x280(%r15)
  0x0000000116b37f86: movabs $0x0,%r10
  0x0000000116b37f90: mov    %r10,0x290(%r15)
  0x0000000116b37f97: movabs $0x0,%r10
  0x0000000116b37fa1: mov    %r10,0x288(%r15)
  0x0000000116b37fa8: cmpq   $0x0,0x8(%r15)
  0x0000000116b37fb0: je     0x0000000116b37fbb
  0x0000000116b37fb6: jmpq   0x0000000116b30420
  0x0000000116b37fbb: mov    -0x38(%rbp),%r13
  0x0000000116b37fbf: mov    -0x30(%rbp),%r14
  0x0000000116b37fc3: retq   
  0x0000000116b37fc4: mov    -0x38(%rbp),%r13
  0x0000000116b37fc8: mov    (%rsp),%eax
  0x0000000116b37fcb: add    $0x8,%rsp
  0x0000000116b37fcf: mov    -0x40(%rbp),%rsi
  0x0000000116b37fd3: lea    -0x40(%rbp),%rbx
  0x0000000116b37fd7: jmpq   0x0000000116b38297
  0x0000000116b37fdc: push   %rax
  0x0000000116b37fdd: mov    %r13,-0x38(%rbp)
  0x0000000116b37fe1: lea    (%rsi),%rax
  0x0000000116b37fe4: mov    0x8(%rsi),%rcx
  0x0000000116b37fe8: movq   $0x0,0x8(%rsi)
  0x0000000116b37ff0: mov    (%rcx),%rdx
  0x0000000116b37ff3: and    $0x7,%rdx
  0x0000000116b37ff7: cmp    $0x5,%rdx
  0x0000000116b37ffb: je     0x0000000116b38275
  0x0000000116b38001: mov    (%rax),%rdx
  0x0000000116b38004: test   %rdx,%rdx
  0x0000000116b38007: je     0x0000000116b38275
  0x0000000116b3800d: lock cmpxchg %rdx,(%rcx)
  0x0000000116b38012: je     0x0000000116b38275
  0x0000000116b38018: mov    %rcx,0x8(%rsi)
  0x0000000116b3801c: callq  0x0000000116b38026
  0x0000000116b38021: jmpq   0x0000000116b38275
  0x0000000116b38026: lea    0x8(%rsp),%rax
  0x0000000116b3802b: mov    %r13,-0x38(%rbp)
  0x0000000116b3802f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b38037: je     0x0000000116b380b4
  0x0000000116b3803d: mov    %rsp,-0x28(%rsp)
  0x0000000116b38042: sub    $0x80,%rsp
  0x0000000116b38049: mov    %rax,0x78(%rsp)
  0x0000000116b3804e: mov    %rcx,0x70(%rsp)
  0x0000000116b38053: mov    %rdx,0x68(%rsp)
  0x0000000116b38058: mov    %rbx,0x60(%rsp)
  0x0000000116b3805d: mov    %rbp,0x50(%rsp)
  0x0000000116b38062: mov    %rsi,0x48(%rsp)
  0x0000000116b38067: mov    %rdi,0x40(%rsp)
  0x0000000116b3806c: mov    %r8,0x38(%rsp)
  0x0000000116b38071: mov    %r9,0x30(%rsp)
  0x0000000116b38076: mov    %r10,0x28(%rsp)
  0x0000000116b3807b: mov    %r11,0x20(%rsp)
  0x0000000116b38080: mov    %r12,0x18(%rsp)
  0x0000000116b38085: mov    %r13,0x10(%rsp)
  0x0000000116b3808a: mov    %r14,0x8(%rsp)
  0x0000000116b3808f: mov    %r15,(%rsp)
  0x0000000116b38093: movabs $0x10cc2363b,%rdi
  0x0000000116b3809d: movabs $0x116b3803d,%rsi
  0x0000000116b380a7: mov    %rsp,%rdx
  0x0000000116b380aa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b380ae: callq  0x000000010c7dd830
  0x0000000116b380b3: hlt    
  0x0000000116b380b4: push   %r10
  0x0000000116b380b6: cmp    -0x9cf180d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b380bd: je     0x0000000116b3813a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b380c3: mov    %rsp,-0x28(%rsp)
  0x0000000116b380c8: sub    $0x80,%rsp
  0x0000000116b380cf: mov    %rax,0x78(%rsp)
  0x0000000116b380d4: mov    %rcx,0x70(%rsp)
  0x0000000116b380d9: mov    %rdx,0x68(%rsp)
  0x0000000116b380de: mov    %rbx,0x60(%rsp)
  0x0000000116b380e3: mov    %rbp,0x50(%rsp)
  0x0000000116b380e8: mov    %rsi,0x48(%rsp)
  0x0000000116b380ed: mov    %rdi,0x40(%rsp)
  0x0000000116b380f2: mov    %r8,0x38(%rsp)
  0x0000000116b380f7: mov    %r9,0x30(%rsp)
  0x0000000116b380fc: mov    %r10,0x28(%rsp)
  0x0000000116b38101: mov    %r11,0x20(%rsp)
  0x0000000116b38106: mov    %r12,0x18(%rsp)
  0x0000000116b3810b: mov    %r13,0x10(%rsp)
  0x0000000116b38110: mov    %r14,0x8(%rsp)
  0x0000000116b38115: mov    %r15,(%rsp)
  0x0000000116b38119: movabs $0x10cc63f17,%rdi
  0x0000000116b38123: movabs $0x116b380c3,%rsi
  0x0000000116b3812d: mov    %rsp,%rdx
  0x0000000116b38130: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38134: callq  0x000000010c7dd830
  0x0000000116b38139: hlt    
  0x0000000116b3813a: pop    %r10
  0x0000000116b3813c: mov    %r15,%rdi
  0x0000000116b3813f: mov    %rbp,0x290(%r15)
  0x0000000116b38146: mov    %rax,0x280(%r15)
  0x0000000116b3814d: test   $0xf,%esp
  0x0000000116b38153: je     0x0000000116b3816b
  0x0000000116b38159: sub    $0x8,%rsp
  0x0000000116b3815d: callq  0x000000010c588f80
  0x0000000116b38162: add    $0x8,%rsp
  0x0000000116b38166: jmpq   0x0000000116b38170
  0x0000000116b3816b: callq  0x000000010c588f80
  0x0000000116b38170: push   %rax
  0x0000000116b38171: push   %rdi
  0x0000000116b38172: push   %rsi
  0x0000000116b38173: push   %rdx
  0x0000000116b38174: push   %rcx
  0x0000000116b38175: push   %r8
  0x0000000116b38177: push   %r9
  0x0000000116b38179: push   %r10
  0x0000000116b3817b: mov    %rsp,%r10
  0x0000000116b3817e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38182: push   %r10
  0x0000000116b38184: push   %r11
  0x0000000116b38186: mov    $0x109,%edi
  0x0000000116b3818b: movabs $0x7ff815049fd5,%r10
  0x0000000116b38195: callq  *%r10
  0x0000000116b38198: pop    %r11
  0x0000000116b3819a: pop    %rsp
  0x0000000116b3819b: pop    %r10
  0x0000000116b3819d: pop    %r9
  0x0000000116b3819f: pop    %r8
  0x0000000116b381a1: pop    %rcx
  0x0000000116b381a2: pop    %rdx
  0x0000000116b381a3: pop    %rsi
  0x0000000116b381a4: pop    %rdi
  0x0000000116b381a5: cmp    %rax,%r15
  0x0000000116b381a8: je     0x0000000116b38225
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b381ae: mov    %rsp,-0x28(%rsp)
  0x0000000116b381b3: sub    $0x80,%rsp
  0x0000000116b381ba: mov    %rax,0x78(%rsp)
  0x0000000116b381bf: mov    %rcx,0x70(%rsp)
  0x0000000116b381c4: mov    %rdx,0x68(%rsp)
  0x0000000116b381c9: mov    %rbx,0x60(%rsp)
  0x0000000116b381ce: mov    %rbp,0x50(%rsp)
  0x0000000116b381d3: mov    %rsi,0x48(%rsp)
  0x0000000116b381d8: mov    %rdi,0x40(%rsp)
  0x0000000116b381dd: mov    %r8,0x38(%rsp)
  0x0000000116b381e2: mov    %r9,0x30(%rsp)
  0x0000000116b381e7: mov    %r10,0x28(%rsp)
  0x0000000116b381ec: mov    %r11,0x20(%rsp)
  0x0000000116b381f1: mov    %r12,0x18(%rsp)
  0x0000000116b381f6: mov    %r13,0x10(%rsp)
  0x0000000116b381fb: mov    %r14,0x8(%rsp)
  0x0000000116b38200: mov    %r15,(%rsp)
  0x0000000116b38204: movabs $0x10cc6405e,%rdi
  0x0000000116b3820e: movabs $0x116b381ae,%rsi
  0x0000000116b38218: mov    %rsp,%rdx
  0x0000000116b3821b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3821f: callq  0x000000010c7dd830
  0x0000000116b38224: hlt    
  0x0000000116b38225: pop    %rax
  0x0000000116b38226: movabs $0x0,%r10
  0x0000000116b38230: mov    %r10,0x280(%r15)
  0x0000000116b38237: movabs $0x0,%r10
  0x0000000116b38241: mov    %r10,0x290(%r15)
  0x0000000116b38248: movabs $0x0,%r10
  0x0000000116b38252: mov    %r10,0x288(%r15)
  0x0000000116b38259: cmpq   $0x0,0x8(%r15)
  0x0000000116b38261: je     0x0000000116b3826c
  0x0000000116b38267: jmpq   0x0000000116b30420
  0x0000000116b3826c: mov    -0x38(%rbp),%r13
  0x0000000116b38270: mov    -0x30(%rbp),%r14
  0x0000000116b38274: retq   
  0x0000000116b38275: mov    -0x38(%rbp),%r13
  0x0000000116b38279: mov    (%rsp),%eax
  0x0000000116b3827c: add    $0x8,%rsp
  0x0000000116b38280: jmpq   0x0000000116b37fcf
  0x0000000116b38285: cmpq   $0x0,0x8(%rsi)
  0x0000000116b3828d: jne    0x0000000116b37fdc
  0x0000000116b38293: add    $0x10,%rsi
  0x0000000116b38297: cmp    %rbx,%rsi
  0x0000000116b3829a: jne    0x0000000116b38285
  0x0000000116b3829c: cmpb   $0x0,-0x9d1b0a1(%rip)        # 0x000000010ce1d202
  0x0000000116b382a3: je     0x0000000116b38360
  0x0000000116b382a9: push   %rax
  0x0000000116b382aa: mov    -0x18(%rbp),%rsi
  0x0000000116b382ae: mov    %r15,%rdi
  0x0000000116b382b1: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b382b9: je     0x0000000116b38336
  0x0000000116b382bf: mov    %rsp,-0x28(%rsp)
  0x0000000116b382c4: sub    $0x80,%rsp
  0x0000000116b382cb: mov    %rax,0x78(%rsp)
  0x0000000116b382d0: mov    %rcx,0x70(%rsp)
  0x0000000116b382d5: mov    %rdx,0x68(%rsp)
  0x0000000116b382da: mov    %rbx,0x60(%rsp)
  0x0000000116b382df: mov    %rbp,0x50(%rsp)
  0x0000000116b382e4: mov    %rsi,0x48(%rsp)
  0x0000000116b382e9: mov    %rdi,0x40(%rsp)
  0x0000000116b382ee: mov    %r8,0x38(%rsp)
  0x0000000116b382f3: mov    %r9,0x30(%rsp)
  0x0000000116b382f8: mov    %r10,0x28(%rsp)
  0x0000000116b382fd: mov    %r11,0x20(%rsp)
  0x0000000116b38302: mov    %r12,0x18(%rsp)
  0x0000000116b38307: mov    %r13,0x10(%rsp)
  0x0000000116b3830c: mov    %r14,0x8(%rsp)
  0x0000000116b38311: mov    %r15,(%rsp)
  0x0000000116b38315: movabs $0x10cc2363b,%rdi
  0x0000000116b3831f: movabs $0x116b382bf,%rsi
  0x0000000116b38329: mov    %rsp,%rdx
  0x0000000116b3832c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38330: callq  0x000000010c7dd830
  0x0000000116b38335: hlt    
  0x0000000116b38336: test   $0xf,%esp
  0x0000000116b3833c: je     0x0000000116b38354
  0x0000000116b38342: sub    $0x8,%rsp
  0x0000000116b38346: callq  0x000000010c9c9850
  0x0000000116b3834b: add    $0x8,%rsp
  0x0000000116b3834f: jmpq   0x0000000116b38359
  0x0000000116b38354: callq  0x000000010c9c9850
  0x0000000116b38359: mov    (%rsp),%eax
  0x0000000116b3835c: add    $0x8,%rsp
  0x0000000116b38360: mov    -0x8(%rbp),%rbx
  0x0000000116b38364: leaveq 
  0x0000000116b38365: pop    %rsi
  0x0000000116b38366: mov    %rbx,%rsp
  0x0000000116b38369: jmpq   *%rsi
  0x0000000116b3836b: mov    -0x38(%rbp),%r13
  0x0000000116b3836f: mov    -0x30(%rbp),%r14
  0x0000000116b38373: mov    -0x40(%rbp),%rsp
  0x0000000116b38377: movq   $0x0,-0x10(%rbp)
  0x0000000116b3837f: mov    0x630(%r15),%rcx
  0x0000000116b38386: mov    0x88(%rcx),%eax
  0x0000000116b3838c: movl   $0xb,0x80(%rcx)
  0x0000000116b38396: movl   $0x0,0x88(%rcx)
  0x0000000116b383a0: mov    0x630(%r15),%rdx
  0x0000000116b383a7: movl   $0x0,0x7c(%rdx)
  0x0000000116b383ae: mov    0x33d(%r15),%dl
  0x0000000116b383b5: movb   $0x0,0x33d(%r15)
  0x0000000116b383bd: mov    -0x18(%rbp),%rbx
  0x0000000116b383c1: mov    0x28(%rbx),%ecx
  0x0000000116b383c4: test   $0x20,%ecx
  0x0000000116b383ca: je     0x0000000116b3869a
  0x0000000116b383d0: test   $0xff,%dl
  0x0000000116b383d3: jne    0x0000000116b38967
  0x0000000116b383d9: push   %rax
  0x0000000116b383da: lea    -0x50(%rbp),%rsi
  0x0000000116b383de: mov    0x8(%rsi),%rax
  0x0000000116b383e2: test   %rax,%rax
  0x0000000116b383e5: jne    0x0000000116b383f7
  0x0000000116b383eb: mov    (%rsp),%eax
  0x0000000116b383ee: add    $0x8,%rsp
  0x0000000116b383f2: jmpq   0x0000000116b3869a
  0x0000000116b383f7: mov    %r13,-0x38(%rbp)
  0x0000000116b383fb: lea    (%rsi),%rax
  0x0000000116b383fe: mov    0x8(%rsi),%rcx
  0x0000000116b38402: movq   $0x0,0x8(%rsi)
  0x0000000116b3840a: mov    (%rcx),%rdx
  0x0000000116b3840d: and    $0x7,%rdx
  0x0000000116b38411: cmp    $0x5,%rdx
  0x0000000116b38415: je     0x0000000116b3868f
  0x0000000116b3841b: mov    (%rax),%rdx
  0x0000000116b3841e: test   %rdx,%rdx
  0x0000000116b38421: je     0x0000000116b3868f
  0x0000000116b38427: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3842c: je     0x0000000116b3868f
  0x0000000116b38432: mov    %rcx,0x8(%rsi)
  0x0000000116b38436: callq  0x0000000116b38440
  0x0000000116b3843b: jmpq   0x0000000116b3868f
  0x0000000116b38440: lea    0x8(%rsp),%rax
  0x0000000116b38445: mov    %r13,-0x38(%rbp)
  0x0000000116b38449: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b38451: je     0x0000000116b384ce
  0x0000000116b38457: mov    %rsp,-0x28(%rsp)
  0x0000000116b3845c: sub    $0x80,%rsp
  0x0000000116b38463: mov    %rax,0x78(%rsp)
  0x0000000116b38468: mov    %rcx,0x70(%rsp)
  0x0000000116b3846d: mov    %rdx,0x68(%rsp)
  0x0000000116b38472: mov    %rbx,0x60(%rsp)
  0x0000000116b38477: mov    %rbp,0x50(%rsp)
  0x0000000116b3847c: mov    %rsi,0x48(%rsp)
  0x0000000116b38481: mov    %rdi,0x40(%rsp)
  0x0000000116b38486: mov    %r8,0x38(%rsp)
  0x0000000116b3848b: mov    %r9,0x30(%rsp)
  0x0000000116b38490: mov    %r10,0x28(%rsp)
  0x0000000116b38495: mov    %r11,0x20(%rsp)
  0x0000000116b3849a: mov    %r12,0x18(%rsp)
  0x0000000116b3849f: mov    %r13,0x10(%rsp)
  0x0000000116b384a4: mov    %r14,0x8(%rsp)
  0x0000000116b384a9: mov    %r15,(%rsp)
  0x0000000116b384ad: movabs $0x10cc2363b,%rdi
  0x0000000116b384b7: movabs $0x116b38457,%rsi
  0x0000000116b384c1: mov    %rsp,%rdx
  0x0000000116b384c4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b384c8: callq  0x000000010c7dd830
  0x0000000116b384cd: hlt    
  0x0000000116b384ce: push   %r10
  0x0000000116b384d0: cmp    -0x9cf1c27(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b384d7: je     0x0000000116b38554
  ;; call_VM_base: heap base corrupted?
  0x0000000116b384dd: mov    %rsp,-0x28(%rsp)
  0x0000000116b384e2: sub    $0x80,%rsp
  0x0000000116b384e9: mov    %rax,0x78(%rsp)
  0x0000000116b384ee: mov    %rcx,0x70(%rsp)
  0x0000000116b384f3: mov    %rdx,0x68(%rsp)
  0x0000000116b384f8: mov    %rbx,0x60(%rsp)
  0x0000000116b384fd: mov    %rbp,0x50(%rsp)
  0x0000000116b38502: mov    %rsi,0x48(%rsp)
  0x0000000116b38507: mov    %rdi,0x40(%rsp)
  0x0000000116b3850c: mov    %r8,0x38(%rsp)
  0x0000000116b38511: mov    %r9,0x30(%rsp)
  0x0000000116b38516: mov    %r10,0x28(%rsp)
  0x0000000116b3851b: mov    %r11,0x20(%rsp)
  0x0000000116b38520: mov    %r12,0x18(%rsp)
  0x0000000116b38525: mov    %r13,0x10(%rsp)
  0x0000000116b3852a: mov    %r14,0x8(%rsp)
  0x0000000116b3852f: mov    %r15,(%rsp)
  0x0000000116b38533: movabs $0x10cc63f17,%rdi
  0x0000000116b3853d: movabs $0x116b384dd,%rsi
  0x0000000116b38547: mov    %rsp,%rdx
  0x0000000116b3854a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3854e: callq  0x000000010c7dd830
  0x0000000116b38553: hlt    
  0x0000000116b38554: pop    %r10
  0x0000000116b38556: mov    %r15,%rdi
  0x0000000116b38559: mov    %rbp,0x290(%r15)
  0x0000000116b38560: mov    %rax,0x280(%r15)
  0x0000000116b38567: test   $0xf,%esp
  0x0000000116b3856d: je     0x0000000116b38585
  0x0000000116b38573: sub    $0x8,%rsp
  0x0000000116b38577: callq  0x000000010c588f80
  0x0000000116b3857c: add    $0x8,%rsp
  0x0000000116b38580: jmpq   0x0000000116b3858a
  0x0000000116b38585: callq  0x000000010c588f80
  0x0000000116b3858a: push   %rax
  0x0000000116b3858b: push   %rdi
  0x0000000116b3858c: push   %rsi
  0x0000000116b3858d: push   %rdx
  0x0000000116b3858e: push   %rcx
  0x0000000116b3858f: push   %r8
  0x0000000116b38591: push   %r9
  0x0000000116b38593: push   %r10
  0x0000000116b38595: mov    %rsp,%r10
  0x0000000116b38598: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3859c: push   %r10
  0x0000000116b3859e: push   %r11
  0x0000000116b385a0: mov    $0x109,%edi
  0x0000000116b385a5: movabs $0x7ff815049fd5,%r10
  0x0000000116b385af: callq  *%r10
  0x0000000116b385b2: pop    %r11
  0x0000000116b385b4: pop    %rsp
  0x0000000116b385b5: pop    %r10
  0x0000000116b385b7: pop    %r9
  0x0000000116b385b9: pop    %r8
  0x0000000116b385bb: pop    %rcx
  0x0000000116b385bc: pop    %rdx
  0x0000000116b385bd: pop    %rsi
  0x0000000116b385be: pop    %rdi
  0x0000000116b385bf: cmp    %rax,%r15
  0x0000000116b385c2: je     0x0000000116b3863f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b385c8: mov    %rsp,-0x28(%rsp)
  0x0000000116b385cd: sub    $0x80,%rsp
  0x0000000116b385d4: mov    %rax,0x78(%rsp)
  0x0000000116b385d9: mov    %rcx,0x70(%rsp)
  0x0000000116b385de: mov    %rdx,0x68(%rsp)
  0x0000000116b385e3: mov    %rbx,0x60(%rsp)
  0x0000000116b385e8: mov    %rbp,0x50(%rsp)
  0x0000000116b385ed: mov    %rsi,0x48(%rsp)
  0x0000000116b385f2: mov    %rdi,0x40(%rsp)
  0x0000000116b385f7: mov    %r8,0x38(%rsp)
  0x0000000116b385fc: mov    %r9,0x30(%rsp)
  0x0000000116b38601: mov    %r10,0x28(%rsp)
  0x0000000116b38606: mov    %r11,0x20(%rsp)
  0x0000000116b3860b: mov    %r12,0x18(%rsp)
  0x0000000116b38610: mov    %r13,0x10(%rsp)
  0x0000000116b38615: mov    %r14,0x8(%rsp)
  0x0000000116b3861a: mov    %r15,(%rsp)
  0x0000000116b3861e: movabs $0x10cc6405e,%rdi
  0x0000000116b38628: movabs $0x116b385c8,%rsi
  0x0000000116b38632: mov    %rsp,%rdx
  0x0000000116b38635: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38639: callq  0x000000010c7dd830
  0x0000000116b3863e: hlt    
  0x0000000116b3863f: pop    %rax
  0x0000000116b38640: movabs $0x0,%r10
  0x0000000116b3864a: mov    %r10,0x280(%r15)
  0x0000000116b38651: movabs $0x0,%r10
  0x0000000116b3865b: mov    %r10,0x290(%r15)
  0x0000000116b38662: movabs $0x0,%r10
  0x0000000116b3866c: mov    %r10,0x288(%r15)
  0x0000000116b38673: cmpq   $0x0,0x8(%r15)
  0x0000000116b3867b: je     0x0000000116b38686
  0x0000000116b38681: jmpq   0x0000000116b30420
  0x0000000116b38686: mov    -0x38(%rbp),%r13
  0x0000000116b3868a: mov    -0x30(%rbp),%r14
  0x0000000116b3868e: retq   
  0x0000000116b3868f: mov    -0x38(%rbp),%r13
  0x0000000116b38693: mov    (%rsp),%eax
  0x0000000116b38696: add    $0x8,%rsp
  0x0000000116b3869a: mov    -0x40(%rbp),%rsi
  0x0000000116b3869e: lea    -0x40(%rbp),%rbx
  0x0000000116b386a2: jmpq   0x0000000116b38962
  0x0000000116b386a7: push   %rax
  0x0000000116b386a8: mov    %r13,-0x38(%rbp)
  0x0000000116b386ac: lea    (%rsi),%rax
  0x0000000116b386af: mov    0x8(%rsi),%rcx
  0x0000000116b386b3: movq   $0x0,0x8(%rsi)
  0x0000000116b386bb: mov    (%rcx),%rdx
  0x0000000116b386be: and    $0x7,%rdx
  0x0000000116b386c2: cmp    $0x5,%rdx
  0x0000000116b386c6: je     0x0000000116b38940
  0x0000000116b386cc: mov    (%rax),%rdx
  0x0000000116b386cf: test   %rdx,%rdx
  0x0000000116b386d2: je     0x0000000116b38940
  0x0000000116b386d8: lock cmpxchg %rdx,(%rcx)
  0x0000000116b386dd: je     0x0000000116b38940
  0x0000000116b386e3: mov    %rcx,0x8(%rsi)
  0x0000000116b386e7: callq  0x0000000116b386f1
  0x0000000116b386ec: jmpq   0x0000000116b38940
  0x0000000116b386f1: lea    0x8(%rsp),%rax
  0x0000000116b386f6: mov    %r13,-0x38(%rbp)
  0x0000000116b386fa: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b38702: je     0x0000000116b3877f
  0x0000000116b38708: mov    %rsp,-0x28(%rsp)
  0x0000000116b3870d: sub    $0x80,%rsp
  0x0000000116b38714: mov    %rax,0x78(%rsp)
  0x0000000116b38719: mov    %rcx,0x70(%rsp)
  0x0000000116b3871e: mov    %rdx,0x68(%rsp)
  0x0000000116b38723: mov    %rbx,0x60(%rsp)
  0x0000000116b38728: mov    %rbp,0x50(%rsp)
  0x0000000116b3872d: mov    %rsi,0x48(%rsp)
  0x0000000116b38732: mov    %rdi,0x40(%rsp)
  0x0000000116b38737: mov    %r8,0x38(%rsp)
  0x0000000116b3873c: mov    %r9,0x30(%rsp)
  0x0000000116b38741: mov    %r10,0x28(%rsp)
  0x0000000116b38746: mov    %r11,0x20(%rsp)
  0x0000000116b3874b: mov    %r12,0x18(%rsp)
  0x0000000116b38750: mov    %r13,0x10(%rsp)
  0x0000000116b38755: mov    %r14,0x8(%rsp)
  0x0000000116b3875a: mov    %r15,(%rsp)
  0x0000000116b3875e: movabs $0x10cc2363b,%rdi
  0x0000000116b38768: movabs $0x116b38708,%rsi
  0x0000000116b38772: mov    %rsp,%rdx
  0x0000000116b38775: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38779: callq  0x000000010c7dd830
  0x0000000116b3877e: hlt    
  0x0000000116b3877f: push   %r10
  0x0000000116b38781: cmp    -0x9cf1ed8(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b38788: je     0x0000000116b38805
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3878e: mov    %rsp,-0x28(%rsp)
  0x0000000116b38793: sub    $0x80,%rsp
  0x0000000116b3879a: mov    %rax,0x78(%rsp)
  0x0000000116b3879f: mov    %rcx,0x70(%rsp)
  0x0000000116b387a4: mov    %rdx,0x68(%rsp)
  0x0000000116b387a9: mov    %rbx,0x60(%rsp)
  0x0000000116b387ae: mov    %rbp,0x50(%rsp)
  0x0000000116b387b3: mov    %rsi,0x48(%rsp)
  0x0000000116b387b8: mov    %rdi,0x40(%rsp)
  0x0000000116b387bd: mov    %r8,0x38(%rsp)
  0x0000000116b387c2: mov    %r9,0x30(%rsp)
  0x0000000116b387c7: mov    %r10,0x28(%rsp)
  0x0000000116b387cc: mov    %r11,0x20(%rsp)
  0x0000000116b387d1: mov    %r12,0x18(%rsp)
  0x0000000116b387d6: mov    %r13,0x10(%rsp)
  0x0000000116b387db: mov    %r14,0x8(%rsp)
  0x0000000116b387e0: mov    %r15,(%rsp)
  0x0000000116b387e4: movabs $0x10cc63f17,%rdi
  0x0000000116b387ee: movabs $0x116b3878e,%rsi
  0x0000000116b387f8: mov    %rsp,%rdx
  0x0000000116b387fb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b387ff: callq  0x000000010c7dd830
  0x0000000116b38804: hlt    
  0x0000000116b38805: pop    %r10
  0x0000000116b38807: mov    %r15,%rdi
  0x0000000116b3880a: mov    %rbp,0x290(%r15)
  0x0000000116b38811: mov    %rax,0x280(%r15)
  0x0000000116b38818: test   $0xf,%esp
  0x0000000116b3881e: je     0x0000000116b38836
  0x0000000116b38824: sub    $0x8,%rsp
  0x0000000116b38828: callq  0x000000010c588f80
  0x0000000116b3882d: add    $0x8,%rsp
  0x0000000116b38831: jmpq   0x0000000116b3883b
  0x0000000116b38836: callq  0x000000010c588f80
  0x0000000116b3883b: push   %rax
  0x0000000116b3883c: push   %rdi
  0x0000000116b3883d: push   %rsi
  0x0000000116b3883e: push   %rdx
  0x0000000116b3883f: push   %rcx
  0x0000000116b38840: push   %r8
  0x0000000116b38842: push   %r9
  0x0000000116b38844: push   %r10
  0x0000000116b38846: mov    %rsp,%r10
  0x0000000116b38849: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3884d: push   %r10
  0x0000000116b3884f: push   %r11
  0x0000000116b38851: mov    $0x109,%edi
  0x0000000116b38856: movabs $0x7ff815049fd5,%r10
  0x0000000116b38860: callq  *%r10
  0x0000000116b38863: pop    %r11
  0x0000000116b38865: pop    %rsp
  0x0000000116b38866: pop    %r10
  0x0000000116b38868: pop    %r9
  0x0000000116b3886a: pop    %r8
  0x0000000116b3886c: pop    %rcx
  0x0000000116b3886d: pop    %rdx
  0x0000000116b3886e: pop    %rsi
  0x0000000116b3886f: pop    %rdi
  0x0000000116b38870: cmp    %rax,%r15
  0x0000000116b38873: je     0x0000000116b388f0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b38879: mov    %rsp,-0x28(%rsp)
  0x0000000116b3887e: sub    $0x80,%rsp
  0x0000000116b38885: mov    %rax,0x78(%rsp)
  0x0000000116b3888a: mov    %rcx,0x70(%rsp)
  0x0000000116b3888f: mov    %rdx,0x68(%rsp)
  0x0000000116b38894: mov    %rbx,0x60(%rsp)
  0x0000000116b38899: mov    %rbp,0x50(%rsp)
  0x0000000116b3889e: mov    %rsi,0x48(%rsp)
  0x0000000116b388a3: mov    %rdi,0x40(%rsp)
  0x0000000116b388a8: mov    %r8,0x38(%rsp)
  0x0000000116b388ad: mov    %r9,0x30(%rsp)
  0x0000000116b388b2: mov    %r10,0x28(%rsp)
  0x0000000116b388b7: mov    %r11,0x20(%rsp)
  0x0000000116b388bc: mov    %r12,0x18(%rsp)
  0x0000000116b388c1: mov    %r13,0x10(%rsp)
  0x0000000116b388c6: mov    %r14,0x8(%rsp)
  0x0000000116b388cb: mov    %r15,(%rsp)
  0x0000000116b388cf: movabs $0x10cc6405e,%rdi
  0x0000000116b388d9: movabs $0x116b38879,%rsi
  0x0000000116b388e3: mov    %rsp,%rdx
  0x0000000116b388e6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b388ea: callq  0x000000010c7dd830
  0x0000000116b388ef: hlt    
  0x0000000116b388f0: pop    %rax
  0x0000000116b388f1: movabs $0x0,%r10
  0x0000000116b388fb: mov    %r10,0x280(%r15)
  0x0000000116b38902: movabs $0x0,%r10
  0x0000000116b3890c: mov    %r10,0x290(%r15)
  0x0000000116b38913: movabs $0x0,%r10
  0x0000000116b3891d: mov    %r10,0x288(%r15)
  0x0000000116b38924: cmpq   $0x0,0x8(%r15)
  0x0000000116b3892c: je     0x0000000116b38937
  0x0000000116b38932: jmpq   0x0000000116b30420
  0x0000000116b38937: mov    -0x38(%rbp),%r13
  0x0000000116b3893b: mov    -0x30(%rbp),%r14
  0x0000000116b3893f: retq   
  0x0000000116b38940: mov    -0x38(%rbp),%r13
  0x0000000116b38944: mov    (%rsp),%eax
  0x0000000116b38947: add    $0x8,%rsp
  0x0000000116b3894b: jmpq   0x0000000116b3869a
  0x0000000116b38950: cmpq   $0x0,0x8(%rsi)
  0x0000000116b38958: jne    0x0000000116b386a7
  0x0000000116b3895e: add    $0x10,%rsi
  0x0000000116b38962: cmp    %rbx,%rsi
  0x0000000116b38965: jne    0x0000000116b38950
  0x0000000116b38967: cmpb   $0x0,-0x9d1b76c(%rip)        # 0x000000010ce1d202
  0x0000000116b3896e: je     0x0000000116b38a2b
  0x0000000116b38974: push   %rax
  0x0000000116b38975: mov    -0x18(%rbp),%rsi
  0x0000000116b38979: mov    %r15,%rdi
  0x0000000116b3897c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b38984: je     0x0000000116b38a01
  0x0000000116b3898a: mov    %rsp,-0x28(%rsp)
  0x0000000116b3898f: sub    $0x80,%rsp
  0x0000000116b38996: mov    %rax,0x78(%rsp)
  0x0000000116b3899b: mov    %rcx,0x70(%rsp)
  0x0000000116b389a0: mov    %rdx,0x68(%rsp)
  0x0000000116b389a5: mov    %rbx,0x60(%rsp)
  0x0000000116b389aa: mov    %rbp,0x50(%rsp)
  0x0000000116b389af: mov    %rsi,0x48(%rsp)
  0x0000000116b389b4: mov    %rdi,0x40(%rsp)
  0x0000000116b389b9: mov    %r8,0x38(%rsp)
  0x0000000116b389be: mov    %r9,0x30(%rsp)
  0x0000000116b389c3: mov    %r10,0x28(%rsp)
  0x0000000116b389c8: mov    %r11,0x20(%rsp)
  0x0000000116b389cd: mov    %r12,0x18(%rsp)
  0x0000000116b389d2: mov    %r13,0x10(%rsp)
  0x0000000116b389d7: mov    %r14,0x8(%rsp)
  0x0000000116b389dc: mov    %r15,(%rsp)
  0x0000000116b389e0: movabs $0x10cc2363b,%rdi
  0x0000000116b389ea: movabs $0x116b3898a,%rsi
  0x0000000116b389f4: mov    %rsp,%rdx
  0x0000000116b389f7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b389fb: callq  0x000000010c7dd830
  0x0000000116b38a00: hlt    
  0x0000000116b38a01: test   $0xf,%esp
  0x0000000116b38a07: je     0x0000000116b38a1f
  0x0000000116b38a0d: sub    $0x8,%rsp
  0x0000000116b38a11: callq  0x000000010c9c9850
  0x0000000116b38a16: add    $0x8,%rsp
  0x0000000116b38a1a: jmpq   0x0000000116b38a24
  0x0000000116b38a1f: callq  0x000000010c9c9850
  0x0000000116b38a24: mov    (%rsp),%eax
  0x0000000116b38a27: add    $0x8,%rsp
  0x0000000116b38a2b: mov    -0x8(%rbp),%rbx
  0x0000000116b38a2f: leaveq 
  0x0000000116b38a30: pop    %rsi
  0x0000000116b38a31: mov    %rbx,%rsp
  0x0000000116b38a34: jmpq   *%rsi
  0x0000000116b38a36: mov    -0x38(%rbp),%r13
  0x0000000116b38a3a: mov    -0x30(%rbp),%r14
  0x0000000116b38a3e: mov    -0x40(%rbp),%rsp
  0x0000000116b38a42: movq   $0x0,-0x10(%rbp)
  0x0000000116b38a4a: mov    0x630(%r15),%rcx
  0x0000000116b38a51: mov    0x88(%rcx),%eax
  0x0000000116b38a57: movl   $0xb,0x80(%rcx)
  0x0000000116b38a61: movl   $0x0,0x88(%rcx)
  0x0000000116b38a6b: mov    0x630(%r15),%rdx
  0x0000000116b38a72: movl   $0x0,0x7c(%rdx)
  0x0000000116b38a79: mov    0x33d(%r15),%dl
  0x0000000116b38a80: movb   $0x0,0x33d(%r15)
  0x0000000116b38a88: mov    -0x18(%rbp),%rbx
  0x0000000116b38a8c: mov    0x28(%rbx),%ecx
  0x0000000116b38a8f: test   $0x20,%ecx
  0x0000000116b38a95: je     0x0000000116b38d65
  0x0000000116b38a9b: test   $0xff,%dl
  0x0000000116b38a9e: jne    0x0000000116b39032
  0x0000000116b38aa4: push   %rax
  0x0000000116b38aa5: lea    -0x50(%rbp),%rsi
  0x0000000116b38aa9: mov    0x8(%rsi),%rax
  0x0000000116b38aad: test   %rax,%rax
  0x0000000116b38ab0: jne    0x0000000116b38ac2
  0x0000000116b38ab6: mov    (%rsp),%eax
  0x0000000116b38ab9: add    $0x8,%rsp
  0x0000000116b38abd: jmpq   0x0000000116b38d65
  0x0000000116b38ac2: mov    %r13,-0x38(%rbp)
  0x0000000116b38ac6: lea    (%rsi),%rax
  0x0000000116b38ac9: mov    0x8(%rsi),%rcx
  0x0000000116b38acd: movq   $0x0,0x8(%rsi)
  0x0000000116b38ad5: mov    (%rcx),%rdx
  0x0000000116b38ad8: and    $0x7,%rdx
  0x0000000116b38adc: cmp    $0x5,%rdx
  0x0000000116b38ae0: je     0x0000000116b38d5a
  0x0000000116b38ae6: mov    (%rax),%rdx
  0x0000000116b38ae9: test   %rdx,%rdx
  0x0000000116b38aec: je     0x0000000116b38d5a
  0x0000000116b38af2: lock cmpxchg %rdx,(%rcx)
  0x0000000116b38af7: je     0x0000000116b38d5a
  0x0000000116b38afd: mov    %rcx,0x8(%rsi)
  0x0000000116b38b01: callq  0x0000000116b38b0b
  0x0000000116b38b06: jmpq   0x0000000116b38d5a
  0x0000000116b38b0b: lea    0x8(%rsp),%rax
  0x0000000116b38b10: mov    %r13,-0x38(%rbp)
  0x0000000116b38b14: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b38b1c: je     0x0000000116b38b99
  0x0000000116b38b22: mov    %rsp,-0x28(%rsp)
  0x0000000116b38b27: sub    $0x80,%rsp
  0x0000000116b38b2e: mov    %rax,0x78(%rsp)
  0x0000000116b38b33: mov    %rcx,0x70(%rsp)
  0x0000000116b38b38: mov    %rdx,0x68(%rsp)
  0x0000000116b38b3d: mov    %rbx,0x60(%rsp)
  0x0000000116b38b42: mov    %rbp,0x50(%rsp)
  0x0000000116b38b47: mov    %rsi,0x48(%rsp)
  0x0000000116b38b4c: mov    %rdi,0x40(%rsp)
  0x0000000116b38b51: mov    %r8,0x38(%rsp)
  0x0000000116b38b56: mov    %r9,0x30(%rsp)
  0x0000000116b38b5b: mov    %r10,0x28(%rsp)
  0x0000000116b38b60: mov    %r11,0x20(%rsp)
  0x0000000116b38b65: mov    %r12,0x18(%rsp)
  0x0000000116b38b6a: mov    %r13,0x10(%rsp)
  0x0000000116b38b6f: mov    %r14,0x8(%rsp)
  0x0000000116b38b74: mov    %r15,(%rsp)
  0x0000000116b38b78: movabs $0x10cc2363b,%rdi
  0x0000000116b38b82: movabs $0x116b38b22,%rsi
  0x0000000116b38b8c: mov    %rsp,%rdx
  0x0000000116b38b8f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38b93: callq  0x000000010c7dd830
  0x0000000116b38b98: hlt    
  0x0000000116b38b99: push   %r10
  0x0000000116b38b9b: cmp    -0x9cf22f2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b38ba2: je     0x0000000116b38c1f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b38ba8: mov    %rsp,-0x28(%rsp)
  0x0000000116b38bad: sub    $0x80,%rsp
  0x0000000116b38bb4: mov    %rax,0x78(%rsp)
  0x0000000116b38bb9: mov    %rcx,0x70(%rsp)
  0x0000000116b38bbe: mov    %rdx,0x68(%rsp)
  0x0000000116b38bc3: mov    %rbx,0x60(%rsp)
  0x0000000116b38bc8: mov    %rbp,0x50(%rsp)
  0x0000000116b38bcd: mov    %rsi,0x48(%rsp)
  0x0000000116b38bd2: mov    %rdi,0x40(%rsp)
  0x0000000116b38bd7: mov    %r8,0x38(%rsp)
  0x0000000116b38bdc: mov    %r9,0x30(%rsp)
  0x0000000116b38be1: mov    %r10,0x28(%rsp)
  0x0000000116b38be6: mov    %r11,0x20(%rsp)
  0x0000000116b38beb: mov    %r12,0x18(%rsp)
  0x0000000116b38bf0: mov    %r13,0x10(%rsp)
  0x0000000116b38bf5: mov    %r14,0x8(%rsp)
  0x0000000116b38bfa: mov    %r15,(%rsp)
  0x0000000116b38bfe: movabs $0x10cc63f17,%rdi
  0x0000000116b38c08: movabs $0x116b38ba8,%rsi
  0x0000000116b38c12: mov    %rsp,%rdx
  0x0000000116b38c15: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38c19: callq  0x000000010c7dd830
  0x0000000116b38c1e: hlt    
  0x0000000116b38c1f: pop    %r10
  0x0000000116b38c21: mov    %r15,%rdi
  0x0000000116b38c24: mov    %rbp,0x290(%r15)
  0x0000000116b38c2b: mov    %rax,0x280(%r15)
  0x0000000116b38c32: test   $0xf,%esp
  0x0000000116b38c38: je     0x0000000116b38c50
  0x0000000116b38c3e: sub    $0x8,%rsp
  0x0000000116b38c42: callq  0x000000010c588f80
  0x0000000116b38c47: add    $0x8,%rsp
  0x0000000116b38c4b: jmpq   0x0000000116b38c55
  0x0000000116b38c50: callq  0x000000010c588f80
  0x0000000116b38c55: push   %rax
  0x0000000116b38c56: push   %rdi
  0x0000000116b38c57: push   %rsi
  0x0000000116b38c58: push   %rdx
  0x0000000116b38c59: push   %rcx
  0x0000000116b38c5a: push   %r8
  0x0000000116b38c5c: push   %r9
  0x0000000116b38c5e: push   %r10
  0x0000000116b38c60: mov    %rsp,%r10
  0x0000000116b38c63: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38c67: push   %r10
  0x0000000116b38c69: push   %r11
  0x0000000116b38c6b: mov    $0x109,%edi
  0x0000000116b38c70: movabs $0x7ff815049fd5,%r10
  0x0000000116b38c7a: callq  *%r10
  0x0000000116b38c7d: pop    %r11
  0x0000000116b38c7f: pop    %rsp
  0x0000000116b38c80: pop    %r10
  0x0000000116b38c82: pop    %r9
  0x0000000116b38c84: pop    %r8
  0x0000000116b38c86: pop    %rcx
  0x0000000116b38c87: pop    %rdx
  0x0000000116b38c88: pop    %rsi
  0x0000000116b38c89: pop    %rdi
  0x0000000116b38c8a: cmp    %rax,%r15
  0x0000000116b38c8d: je     0x0000000116b38d0a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b38c93: mov    %rsp,-0x28(%rsp)
  0x0000000116b38c98: sub    $0x80,%rsp
  0x0000000116b38c9f: mov    %rax,0x78(%rsp)
  0x0000000116b38ca4: mov    %rcx,0x70(%rsp)
  0x0000000116b38ca9: mov    %rdx,0x68(%rsp)
  0x0000000116b38cae: mov    %rbx,0x60(%rsp)
  0x0000000116b38cb3: mov    %rbp,0x50(%rsp)
  0x0000000116b38cb8: mov    %rsi,0x48(%rsp)
  0x0000000116b38cbd: mov    %rdi,0x40(%rsp)
  0x0000000116b38cc2: mov    %r8,0x38(%rsp)
  0x0000000116b38cc7: mov    %r9,0x30(%rsp)
  0x0000000116b38ccc: mov    %r10,0x28(%rsp)
  0x0000000116b38cd1: mov    %r11,0x20(%rsp)
  0x0000000116b38cd6: mov    %r12,0x18(%rsp)
  0x0000000116b38cdb: mov    %r13,0x10(%rsp)
  0x0000000116b38ce0: mov    %r14,0x8(%rsp)
  0x0000000116b38ce5: mov    %r15,(%rsp)
  0x0000000116b38ce9: movabs $0x10cc6405e,%rdi
  0x0000000116b38cf3: movabs $0x116b38c93,%rsi
  0x0000000116b38cfd: mov    %rsp,%rdx
  0x0000000116b38d00: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38d04: callq  0x000000010c7dd830
  0x0000000116b38d09: hlt    
  0x0000000116b38d0a: pop    %rax
  0x0000000116b38d0b: movabs $0x0,%r10
  0x0000000116b38d15: mov    %r10,0x280(%r15)
  0x0000000116b38d1c: movabs $0x0,%r10
  0x0000000116b38d26: mov    %r10,0x290(%r15)
  0x0000000116b38d2d: movabs $0x0,%r10
  0x0000000116b38d37: mov    %r10,0x288(%r15)
  0x0000000116b38d3e: cmpq   $0x0,0x8(%r15)
  0x0000000116b38d46: je     0x0000000116b38d51
  0x0000000116b38d4c: jmpq   0x0000000116b30420
  0x0000000116b38d51: mov    -0x38(%rbp),%r13
  0x0000000116b38d55: mov    -0x30(%rbp),%r14
  0x0000000116b38d59: retq   
  0x0000000116b38d5a: mov    -0x38(%rbp),%r13
  0x0000000116b38d5e: mov    (%rsp),%eax
  0x0000000116b38d61: add    $0x8,%rsp
  0x0000000116b38d65: mov    -0x40(%rbp),%rsi
  0x0000000116b38d69: lea    -0x40(%rbp),%rbx
  0x0000000116b38d6d: jmpq   0x0000000116b3902d
  0x0000000116b38d72: push   %rax
  0x0000000116b38d73: mov    %r13,-0x38(%rbp)
  0x0000000116b38d77: lea    (%rsi),%rax
  0x0000000116b38d7a: mov    0x8(%rsi),%rcx
  0x0000000116b38d7e: movq   $0x0,0x8(%rsi)
  0x0000000116b38d86: mov    (%rcx),%rdx
  0x0000000116b38d89: and    $0x7,%rdx
  0x0000000116b38d8d: cmp    $0x5,%rdx
  0x0000000116b38d91: je     0x0000000116b3900b
  0x0000000116b38d97: mov    (%rax),%rdx
  0x0000000116b38d9a: test   %rdx,%rdx
  0x0000000116b38d9d: je     0x0000000116b3900b
  0x0000000116b38da3: lock cmpxchg %rdx,(%rcx)
  0x0000000116b38da8: je     0x0000000116b3900b
  0x0000000116b38dae: mov    %rcx,0x8(%rsi)
  0x0000000116b38db2: callq  0x0000000116b38dbc
  0x0000000116b38db7: jmpq   0x0000000116b3900b
  0x0000000116b38dbc: lea    0x8(%rsp),%rax
  0x0000000116b38dc1: mov    %r13,-0x38(%rbp)
  0x0000000116b38dc5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b38dcd: je     0x0000000116b38e4a
  0x0000000116b38dd3: mov    %rsp,-0x28(%rsp)
  0x0000000116b38dd8: sub    $0x80,%rsp
  0x0000000116b38ddf: mov    %rax,0x78(%rsp)
  0x0000000116b38de4: mov    %rcx,0x70(%rsp)
  0x0000000116b38de9: mov    %rdx,0x68(%rsp)
  0x0000000116b38dee: mov    %rbx,0x60(%rsp)
  0x0000000116b38df3: mov    %rbp,0x50(%rsp)
  0x0000000116b38df8: mov    %rsi,0x48(%rsp)
  0x0000000116b38dfd: mov    %rdi,0x40(%rsp)
  0x0000000116b38e02: mov    %r8,0x38(%rsp)
  0x0000000116b38e07: mov    %r9,0x30(%rsp)
  0x0000000116b38e0c: mov    %r10,0x28(%rsp)
  0x0000000116b38e11: mov    %r11,0x20(%rsp)
  0x0000000116b38e16: mov    %r12,0x18(%rsp)
  0x0000000116b38e1b: mov    %r13,0x10(%rsp)
  0x0000000116b38e20: mov    %r14,0x8(%rsp)
  0x0000000116b38e25: mov    %r15,(%rsp)
  0x0000000116b38e29: movabs $0x10cc2363b,%rdi
  0x0000000116b38e33: movabs $0x116b38dd3,%rsi
  0x0000000116b38e3d: mov    %rsp,%rdx
  0x0000000116b38e40: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38e44: callq  0x000000010c7dd830
  0x0000000116b38e49: hlt    
  0x0000000116b38e4a: push   %r10
  0x0000000116b38e4c: cmp    -0x9cf25a3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b38e53: je     0x0000000116b38ed0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b38e59: mov    %rsp,-0x28(%rsp)
  0x0000000116b38e5e: sub    $0x80,%rsp
  0x0000000116b38e65: mov    %rax,0x78(%rsp)
  0x0000000116b38e6a: mov    %rcx,0x70(%rsp)
  0x0000000116b38e6f: mov    %rdx,0x68(%rsp)
  0x0000000116b38e74: mov    %rbx,0x60(%rsp)
  0x0000000116b38e79: mov    %rbp,0x50(%rsp)
  0x0000000116b38e7e: mov    %rsi,0x48(%rsp)
  0x0000000116b38e83: mov    %rdi,0x40(%rsp)
  0x0000000116b38e88: mov    %r8,0x38(%rsp)
  0x0000000116b38e8d: mov    %r9,0x30(%rsp)
  0x0000000116b38e92: mov    %r10,0x28(%rsp)
  0x0000000116b38e97: mov    %r11,0x20(%rsp)
  0x0000000116b38e9c: mov    %r12,0x18(%rsp)
  0x0000000116b38ea1: mov    %r13,0x10(%rsp)
  0x0000000116b38ea6: mov    %r14,0x8(%rsp)
  0x0000000116b38eab: mov    %r15,(%rsp)
  0x0000000116b38eaf: movabs $0x10cc63f17,%rdi
  0x0000000116b38eb9: movabs $0x116b38e59,%rsi
  0x0000000116b38ec3: mov    %rsp,%rdx
  0x0000000116b38ec6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38eca: callq  0x000000010c7dd830
  0x0000000116b38ecf: hlt    
  0x0000000116b38ed0: pop    %r10
  0x0000000116b38ed2: mov    %r15,%rdi
  0x0000000116b38ed5: mov    %rbp,0x290(%r15)
  0x0000000116b38edc: mov    %rax,0x280(%r15)
  0x0000000116b38ee3: test   $0xf,%esp
  0x0000000116b38ee9: je     0x0000000116b38f01
  0x0000000116b38eef: sub    $0x8,%rsp
  0x0000000116b38ef3: callq  0x000000010c588f80
  0x0000000116b38ef8: add    $0x8,%rsp
  0x0000000116b38efc: jmpq   0x0000000116b38f06
  0x0000000116b38f01: callq  0x000000010c588f80
  0x0000000116b38f06: push   %rax
  0x0000000116b38f07: push   %rdi
  0x0000000116b38f08: push   %rsi
  0x0000000116b38f09: push   %rdx
  0x0000000116b38f0a: push   %rcx
  0x0000000116b38f0b: push   %r8
  0x0000000116b38f0d: push   %r9
  0x0000000116b38f0f: push   %r10
  0x0000000116b38f11: mov    %rsp,%r10
  0x0000000116b38f14: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38f18: push   %r10
  0x0000000116b38f1a: push   %r11
  0x0000000116b38f1c: mov    $0x109,%edi
  0x0000000116b38f21: movabs $0x7ff815049fd5,%r10
  0x0000000116b38f2b: callq  *%r10
  0x0000000116b38f2e: pop    %r11
  0x0000000116b38f30: pop    %rsp
  0x0000000116b38f31: pop    %r10
  0x0000000116b38f33: pop    %r9
  0x0000000116b38f35: pop    %r8
  0x0000000116b38f37: pop    %rcx
  0x0000000116b38f38: pop    %rdx
  0x0000000116b38f39: pop    %rsi
  0x0000000116b38f3a: pop    %rdi
  0x0000000116b38f3b: cmp    %rax,%r15
  0x0000000116b38f3e: je     0x0000000116b38fbb
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b38f44: mov    %rsp,-0x28(%rsp)
  0x0000000116b38f49: sub    $0x80,%rsp
  0x0000000116b38f50: mov    %rax,0x78(%rsp)
  0x0000000116b38f55: mov    %rcx,0x70(%rsp)
  0x0000000116b38f5a: mov    %rdx,0x68(%rsp)
  0x0000000116b38f5f: mov    %rbx,0x60(%rsp)
  0x0000000116b38f64: mov    %rbp,0x50(%rsp)
  0x0000000116b38f69: mov    %rsi,0x48(%rsp)
  0x0000000116b38f6e: mov    %rdi,0x40(%rsp)
  0x0000000116b38f73: mov    %r8,0x38(%rsp)
  0x0000000116b38f78: mov    %r9,0x30(%rsp)
  0x0000000116b38f7d: mov    %r10,0x28(%rsp)
  0x0000000116b38f82: mov    %r11,0x20(%rsp)
  0x0000000116b38f87: mov    %r12,0x18(%rsp)
  0x0000000116b38f8c: mov    %r13,0x10(%rsp)
  0x0000000116b38f91: mov    %r14,0x8(%rsp)
  0x0000000116b38f96: mov    %r15,(%rsp)
  0x0000000116b38f9a: movabs $0x10cc6405e,%rdi
  0x0000000116b38fa4: movabs $0x116b38f44,%rsi
  0x0000000116b38fae: mov    %rsp,%rdx
  0x0000000116b38fb1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b38fb5: callq  0x000000010c7dd830
  0x0000000116b38fba: hlt    
  0x0000000116b38fbb: pop    %rax
  0x0000000116b38fbc: movabs $0x0,%r10
  0x0000000116b38fc6: mov    %r10,0x280(%r15)
  0x0000000116b38fcd: movabs $0x0,%r10
  0x0000000116b38fd7: mov    %r10,0x290(%r15)
  0x0000000116b38fde: movabs $0x0,%r10
  0x0000000116b38fe8: mov    %r10,0x288(%r15)
  0x0000000116b38fef: cmpq   $0x0,0x8(%r15)
  0x0000000116b38ff7: je     0x0000000116b39002
  0x0000000116b38ffd: jmpq   0x0000000116b30420
  0x0000000116b39002: mov    -0x38(%rbp),%r13
  0x0000000116b39006: mov    -0x30(%rbp),%r14
  0x0000000116b3900a: retq   
  0x0000000116b3900b: mov    -0x38(%rbp),%r13
  0x0000000116b3900f: mov    (%rsp),%eax
  0x0000000116b39012: add    $0x8,%rsp
  0x0000000116b39016: jmpq   0x0000000116b38d65
  0x0000000116b3901b: cmpq   $0x0,0x8(%rsi)
  0x0000000116b39023: jne    0x0000000116b38d72
  0x0000000116b39029: add    $0x10,%rsi
  0x0000000116b3902d: cmp    %rbx,%rsi
  0x0000000116b39030: jne    0x0000000116b3901b
  0x0000000116b39032: cmpb   $0x0,-0x9d1be37(%rip)        # 0x000000010ce1d202
  0x0000000116b39039: je     0x0000000116b390f6
  0x0000000116b3903f: push   %rax
  0x0000000116b39040: mov    -0x18(%rbp),%rsi
  0x0000000116b39044: mov    %r15,%rdi
  0x0000000116b39047: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3904f: je     0x0000000116b390cc
  0x0000000116b39055: mov    %rsp,-0x28(%rsp)
  0x0000000116b3905a: sub    $0x80,%rsp
  0x0000000116b39061: mov    %rax,0x78(%rsp)
  0x0000000116b39066: mov    %rcx,0x70(%rsp)
  0x0000000116b3906b: mov    %rdx,0x68(%rsp)
  0x0000000116b39070: mov    %rbx,0x60(%rsp)
  0x0000000116b39075: mov    %rbp,0x50(%rsp)
  0x0000000116b3907a: mov    %rsi,0x48(%rsp)
  0x0000000116b3907f: mov    %rdi,0x40(%rsp)
  0x0000000116b39084: mov    %r8,0x38(%rsp)
  0x0000000116b39089: mov    %r9,0x30(%rsp)
  0x0000000116b3908e: mov    %r10,0x28(%rsp)
  0x0000000116b39093: mov    %r11,0x20(%rsp)
  0x0000000116b39098: mov    %r12,0x18(%rsp)
  0x0000000116b3909d: mov    %r13,0x10(%rsp)
  0x0000000116b390a2: mov    %r14,0x8(%rsp)
  0x0000000116b390a7: mov    %r15,(%rsp)
  0x0000000116b390ab: movabs $0x10cc2363b,%rdi
  0x0000000116b390b5: movabs $0x116b39055,%rsi
  0x0000000116b390bf: mov    %rsp,%rdx
  0x0000000116b390c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b390c6: callq  0x000000010c7dd830
  0x0000000116b390cb: hlt    
  0x0000000116b390cc: test   $0xf,%esp
  0x0000000116b390d2: je     0x0000000116b390ea
  0x0000000116b390d8: sub    $0x8,%rsp
  0x0000000116b390dc: callq  0x000000010c9c9850
  0x0000000116b390e1: add    $0x8,%rsp
  0x0000000116b390e5: jmpq   0x0000000116b390ef
  0x0000000116b390ea: callq  0x000000010c9c9850
  0x0000000116b390ef: mov    (%rsp),%eax
  0x0000000116b390f2: add    $0x8,%rsp
  0x0000000116b390f6: mov    -0x8(%rbp),%rbx
  0x0000000116b390fa: leaveq 
  0x0000000116b390fb: pop    %rsi
  0x0000000116b390fc: mov    %rbx,%rsp
  0x0000000116b390ff: jmpq   *%rsi
  0x0000000116b39101: mov    -0x38(%rbp),%r13
  0x0000000116b39105: mov    -0x30(%rbp),%r14
  0x0000000116b39109: mov    -0x40(%rbp),%rsp
  0x0000000116b3910d: movq   $0x0,-0x10(%rbp)
  0x0000000116b39115: mov    0x630(%r15),%rcx
  0x0000000116b3911c: mov    0x88(%rcx),%eax
  0x0000000116b39122: movl   $0xb,0x80(%rcx)
  0x0000000116b3912c: movl   $0x0,0x88(%rcx)
  0x0000000116b39136: mov    0x630(%r15),%rdx
  0x0000000116b3913d: movl   $0x0,0x7c(%rdx)
  0x0000000116b39144: mov    0x33d(%r15),%dl
  0x0000000116b3914b: movb   $0x0,0x33d(%r15)
  0x0000000116b39153: mov    -0x18(%rbp),%rbx
  0x0000000116b39157: mov    0x28(%rbx),%ecx
  0x0000000116b3915a: test   $0x20,%ecx
  0x0000000116b39160: je     0x0000000116b39430
  0x0000000116b39166: test   $0xff,%dl
  0x0000000116b39169: jne    0x0000000116b396fd
  0x0000000116b3916f: push   %rax
  0x0000000116b39170: lea    -0x50(%rbp),%rsi
  0x0000000116b39174: mov    0x8(%rsi),%rax
  0x0000000116b39178: test   %rax,%rax
  0x0000000116b3917b: jne    0x0000000116b3918d
  0x0000000116b39181: mov    (%rsp),%eax
  0x0000000116b39184: add    $0x8,%rsp
  0x0000000116b39188: jmpq   0x0000000116b39430
  0x0000000116b3918d: mov    %r13,-0x38(%rbp)
  0x0000000116b39191: lea    (%rsi),%rax
  0x0000000116b39194: mov    0x8(%rsi),%rcx
  0x0000000116b39198: movq   $0x0,0x8(%rsi)
  0x0000000116b391a0: mov    (%rcx),%rdx
  0x0000000116b391a3: and    $0x7,%rdx
  0x0000000116b391a7: cmp    $0x5,%rdx
  0x0000000116b391ab: je     0x0000000116b39425
  0x0000000116b391b1: mov    (%rax),%rdx
  0x0000000116b391b4: test   %rdx,%rdx
  0x0000000116b391b7: je     0x0000000116b39425
  0x0000000116b391bd: lock cmpxchg %rdx,(%rcx)
  0x0000000116b391c2: je     0x0000000116b39425
  0x0000000116b391c8: mov    %rcx,0x8(%rsi)
  0x0000000116b391cc: callq  0x0000000116b391d6
  0x0000000116b391d1: jmpq   0x0000000116b39425
  0x0000000116b391d6: lea    0x8(%rsp),%rax
  0x0000000116b391db: mov    %r13,-0x38(%rbp)
  0x0000000116b391df: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b391e7: je     0x0000000116b39264
  0x0000000116b391ed: mov    %rsp,-0x28(%rsp)
  0x0000000116b391f2: sub    $0x80,%rsp
  0x0000000116b391f9: mov    %rax,0x78(%rsp)
  0x0000000116b391fe: mov    %rcx,0x70(%rsp)
  0x0000000116b39203: mov    %rdx,0x68(%rsp)
  0x0000000116b39208: mov    %rbx,0x60(%rsp)
  0x0000000116b3920d: mov    %rbp,0x50(%rsp)
  0x0000000116b39212: mov    %rsi,0x48(%rsp)
  0x0000000116b39217: mov    %rdi,0x40(%rsp)
  0x0000000116b3921c: mov    %r8,0x38(%rsp)
  0x0000000116b39221: mov    %r9,0x30(%rsp)
  0x0000000116b39226: mov    %r10,0x28(%rsp)
  0x0000000116b3922b: mov    %r11,0x20(%rsp)
  0x0000000116b39230: mov    %r12,0x18(%rsp)
  0x0000000116b39235: mov    %r13,0x10(%rsp)
  0x0000000116b3923a: mov    %r14,0x8(%rsp)
  0x0000000116b3923f: mov    %r15,(%rsp)
  0x0000000116b39243: movabs $0x10cc2363b,%rdi
  0x0000000116b3924d: movabs $0x116b391ed,%rsi
  0x0000000116b39257: mov    %rsp,%rdx
  0x0000000116b3925a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3925e: callq  0x000000010c7dd830
  0x0000000116b39263: hlt    
  0x0000000116b39264: push   %r10
  0x0000000116b39266: cmp    -0x9cf29bd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3926d: je     0x0000000116b392ea
  ;; call_VM_base: heap base corrupted?
  0x0000000116b39273: mov    %rsp,-0x28(%rsp)
  0x0000000116b39278: sub    $0x80,%rsp
  0x0000000116b3927f: mov    %rax,0x78(%rsp)
  0x0000000116b39284: mov    %rcx,0x70(%rsp)
  0x0000000116b39289: mov    %rdx,0x68(%rsp)
  0x0000000116b3928e: mov    %rbx,0x60(%rsp)
  0x0000000116b39293: mov    %rbp,0x50(%rsp)
  0x0000000116b39298: mov    %rsi,0x48(%rsp)
  0x0000000116b3929d: mov    %rdi,0x40(%rsp)
  0x0000000116b392a2: mov    %r8,0x38(%rsp)
  0x0000000116b392a7: mov    %r9,0x30(%rsp)
  0x0000000116b392ac: mov    %r10,0x28(%rsp)
  0x0000000116b392b1: mov    %r11,0x20(%rsp)
  0x0000000116b392b6: mov    %r12,0x18(%rsp)
  0x0000000116b392bb: mov    %r13,0x10(%rsp)
  0x0000000116b392c0: mov    %r14,0x8(%rsp)
  0x0000000116b392c5: mov    %r15,(%rsp)
  0x0000000116b392c9: movabs $0x10cc63f17,%rdi
  0x0000000116b392d3: movabs $0x116b39273,%rsi
  0x0000000116b392dd: mov    %rsp,%rdx
  0x0000000116b392e0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b392e4: callq  0x000000010c7dd830
  0x0000000116b392e9: hlt    
  0x0000000116b392ea: pop    %r10
  0x0000000116b392ec: mov    %r15,%rdi
  0x0000000116b392ef: mov    %rbp,0x290(%r15)
  0x0000000116b392f6: mov    %rax,0x280(%r15)
  0x0000000116b392fd: test   $0xf,%esp
  0x0000000116b39303: je     0x0000000116b3931b
  0x0000000116b39309: sub    $0x8,%rsp
  0x0000000116b3930d: callq  0x000000010c588f80
  0x0000000116b39312: add    $0x8,%rsp
  0x0000000116b39316: jmpq   0x0000000116b39320
  0x0000000116b3931b: callq  0x000000010c588f80
  0x0000000116b39320: push   %rax
  0x0000000116b39321: push   %rdi
  0x0000000116b39322: push   %rsi
  0x0000000116b39323: push   %rdx
  0x0000000116b39324: push   %rcx
  0x0000000116b39325: push   %r8
  0x0000000116b39327: push   %r9
  0x0000000116b39329: push   %r10
  0x0000000116b3932b: mov    %rsp,%r10
  0x0000000116b3932e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39332: push   %r10
  0x0000000116b39334: push   %r11
  0x0000000116b39336: mov    $0x109,%edi
  0x0000000116b3933b: movabs $0x7ff815049fd5,%r10
  0x0000000116b39345: callq  *%r10
  0x0000000116b39348: pop    %r11
  0x0000000116b3934a: pop    %rsp
  0x0000000116b3934b: pop    %r10
  0x0000000116b3934d: pop    %r9
  0x0000000116b3934f: pop    %r8
  0x0000000116b39351: pop    %rcx
  0x0000000116b39352: pop    %rdx
  0x0000000116b39353: pop    %rsi
  0x0000000116b39354: pop    %rdi
  0x0000000116b39355: cmp    %rax,%r15
  0x0000000116b39358: je     0x0000000116b393d5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3935e: mov    %rsp,-0x28(%rsp)
  0x0000000116b39363: sub    $0x80,%rsp
  0x0000000116b3936a: mov    %rax,0x78(%rsp)
  0x0000000116b3936f: mov    %rcx,0x70(%rsp)
  0x0000000116b39374: mov    %rdx,0x68(%rsp)
  0x0000000116b39379: mov    %rbx,0x60(%rsp)
  0x0000000116b3937e: mov    %rbp,0x50(%rsp)
  0x0000000116b39383: mov    %rsi,0x48(%rsp)
  0x0000000116b39388: mov    %rdi,0x40(%rsp)
  0x0000000116b3938d: mov    %r8,0x38(%rsp)
  0x0000000116b39392: mov    %r9,0x30(%rsp)
  0x0000000116b39397: mov    %r10,0x28(%rsp)
  0x0000000116b3939c: mov    %r11,0x20(%rsp)
  0x0000000116b393a1: mov    %r12,0x18(%rsp)
  0x0000000116b393a6: mov    %r13,0x10(%rsp)
  0x0000000116b393ab: mov    %r14,0x8(%rsp)
  0x0000000116b393b0: mov    %r15,(%rsp)
  0x0000000116b393b4: movabs $0x10cc6405e,%rdi
  0x0000000116b393be: movabs $0x116b3935e,%rsi
  0x0000000116b393c8: mov    %rsp,%rdx
  0x0000000116b393cb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b393cf: callq  0x000000010c7dd830
  0x0000000116b393d4: hlt    
  0x0000000116b393d5: pop    %rax
  0x0000000116b393d6: movabs $0x0,%r10
  0x0000000116b393e0: mov    %r10,0x280(%r15)
  0x0000000116b393e7: movabs $0x0,%r10
  0x0000000116b393f1: mov    %r10,0x290(%r15)
  0x0000000116b393f8: movabs $0x0,%r10
  0x0000000116b39402: mov    %r10,0x288(%r15)
  0x0000000116b39409: cmpq   $0x0,0x8(%r15)
  0x0000000116b39411: je     0x0000000116b3941c
  0x0000000116b39417: jmpq   0x0000000116b30420
  0x0000000116b3941c: mov    -0x38(%rbp),%r13
  0x0000000116b39420: mov    -0x30(%rbp),%r14
  0x0000000116b39424: retq   
  0x0000000116b39425: mov    -0x38(%rbp),%r13
  0x0000000116b39429: mov    (%rsp),%eax
  0x0000000116b3942c: add    $0x8,%rsp
  0x0000000116b39430: mov    -0x40(%rbp),%rsi
  0x0000000116b39434: lea    -0x40(%rbp),%rbx
  0x0000000116b39438: jmpq   0x0000000116b396f8
  0x0000000116b3943d: push   %rax
  0x0000000116b3943e: mov    %r13,-0x38(%rbp)
  0x0000000116b39442: lea    (%rsi),%rax
  0x0000000116b39445: mov    0x8(%rsi),%rcx
  0x0000000116b39449: movq   $0x0,0x8(%rsi)
  0x0000000116b39451: mov    (%rcx),%rdx
  0x0000000116b39454: and    $0x7,%rdx
  0x0000000116b39458: cmp    $0x5,%rdx
  0x0000000116b3945c: je     0x0000000116b396d6
  0x0000000116b39462: mov    (%rax),%rdx
  0x0000000116b39465: test   %rdx,%rdx
  0x0000000116b39468: je     0x0000000116b396d6
  0x0000000116b3946e: lock cmpxchg %rdx,(%rcx)
  0x0000000116b39473: je     0x0000000116b396d6
  0x0000000116b39479: mov    %rcx,0x8(%rsi)
  0x0000000116b3947d: callq  0x0000000116b39487
  0x0000000116b39482: jmpq   0x0000000116b396d6
  0x0000000116b39487: lea    0x8(%rsp),%rax
  0x0000000116b3948c: mov    %r13,-0x38(%rbp)
  0x0000000116b39490: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b39498: je     0x0000000116b39515
  0x0000000116b3949e: mov    %rsp,-0x28(%rsp)
  0x0000000116b394a3: sub    $0x80,%rsp
  0x0000000116b394aa: mov    %rax,0x78(%rsp)
  0x0000000116b394af: mov    %rcx,0x70(%rsp)
  0x0000000116b394b4: mov    %rdx,0x68(%rsp)
  0x0000000116b394b9: mov    %rbx,0x60(%rsp)
  0x0000000116b394be: mov    %rbp,0x50(%rsp)
  0x0000000116b394c3: mov    %rsi,0x48(%rsp)
  0x0000000116b394c8: mov    %rdi,0x40(%rsp)
  0x0000000116b394cd: mov    %r8,0x38(%rsp)
  0x0000000116b394d2: mov    %r9,0x30(%rsp)
  0x0000000116b394d7: mov    %r10,0x28(%rsp)
  0x0000000116b394dc: mov    %r11,0x20(%rsp)
  0x0000000116b394e1: mov    %r12,0x18(%rsp)
  0x0000000116b394e6: mov    %r13,0x10(%rsp)
  0x0000000116b394eb: mov    %r14,0x8(%rsp)
  0x0000000116b394f0: mov    %r15,(%rsp)
  0x0000000116b394f4: movabs $0x10cc2363b,%rdi
  0x0000000116b394fe: movabs $0x116b3949e,%rsi
  0x0000000116b39508: mov    %rsp,%rdx
  0x0000000116b3950b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3950f: callq  0x000000010c7dd830
  0x0000000116b39514: hlt    
  0x0000000116b39515: push   %r10
  0x0000000116b39517: cmp    -0x9cf2c6e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3951e: je     0x0000000116b3959b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b39524: mov    %rsp,-0x28(%rsp)
  0x0000000116b39529: sub    $0x80,%rsp
  0x0000000116b39530: mov    %rax,0x78(%rsp)
  0x0000000116b39535: mov    %rcx,0x70(%rsp)
  0x0000000116b3953a: mov    %rdx,0x68(%rsp)
  0x0000000116b3953f: mov    %rbx,0x60(%rsp)
  0x0000000116b39544: mov    %rbp,0x50(%rsp)
  0x0000000116b39549: mov    %rsi,0x48(%rsp)
  0x0000000116b3954e: mov    %rdi,0x40(%rsp)
  0x0000000116b39553: mov    %r8,0x38(%rsp)
  0x0000000116b39558: mov    %r9,0x30(%rsp)
  0x0000000116b3955d: mov    %r10,0x28(%rsp)
  0x0000000116b39562: mov    %r11,0x20(%rsp)
  0x0000000116b39567: mov    %r12,0x18(%rsp)
  0x0000000116b3956c: mov    %r13,0x10(%rsp)
  0x0000000116b39571: mov    %r14,0x8(%rsp)
  0x0000000116b39576: mov    %r15,(%rsp)
  0x0000000116b3957a: movabs $0x10cc63f17,%rdi
  0x0000000116b39584: movabs $0x116b39524,%rsi
  0x0000000116b3958e: mov    %rsp,%rdx
  0x0000000116b39591: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39595: callq  0x000000010c7dd830
  0x0000000116b3959a: hlt    
  0x0000000116b3959b: pop    %r10
  0x0000000116b3959d: mov    %r15,%rdi
  0x0000000116b395a0: mov    %rbp,0x290(%r15)
  0x0000000116b395a7: mov    %rax,0x280(%r15)
  0x0000000116b395ae: test   $0xf,%esp
  0x0000000116b395b4: je     0x0000000116b395cc
  0x0000000116b395ba: sub    $0x8,%rsp
  0x0000000116b395be: callq  0x000000010c588f80
  0x0000000116b395c3: add    $0x8,%rsp
  0x0000000116b395c7: jmpq   0x0000000116b395d1
  0x0000000116b395cc: callq  0x000000010c588f80
  0x0000000116b395d1: push   %rax
  0x0000000116b395d2: push   %rdi
  0x0000000116b395d3: push   %rsi
  0x0000000116b395d4: push   %rdx
  0x0000000116b395d5: push   %rcx
  0x0000000116b395d6: push   %r8
  0x0000000116b395d8: push   %r9
  0x0000000116b395da: push   %r10
  0x0000000116b395dc: mov    %rsp,%r10
  0x0000000116b395df: and    $0xfffffffffffffff0,%rsp
  0x0000000116b395e3: push   %r10
  0x0000000116b395e5: push   %r11
  0x0000000116b395e7: mov    $0x109,%edi
  0x0000000116b395ec: movabs $0x7ff815049fd5,%r10
  0x0000000116b395f6: callq  *%r10
  0x0000000116b395f9: pop    %r11
  0x0000000116b395fb: pop    %rsp
  0x0000000116b395fc: pop    %r10
  0x0000000116b395fe: pop    %r9
  0x0000000116b39600: pop    %r8
  0x0000000116b39602: pop    %rcx
  0x0000000116b39603: pop    %rdx
  0x0000000116b39604: pop    %rsi
  0x0000000116b39605: pop    %rdi
  0x0000000116b39606: cmp    %rax,%r15
  0x0000000116b39609: je     0x0000000116b39686
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3960f: mov    %rsp,-0x28(%rsp)
  0x0000000116b39614: sub    $0x80,%rsp
  0x0000000116b3961b: mov    %rax,0x78(%rsp)
  0x0000000116b39620: mov    %rcx,0x70(%rsp)
  0x0000000116b39625: mov    %rdx,0x68(%rsp)
  0x0000000116b3962a: mov    %rbx,0x60(%rsp)
  0x0000000116b3962f: mov    %rbp,0x50(%rsp)
  0x0000000116b39634: mov    %rsi,0x48(%rsp)
  0x0000000116b39639: mov    %rdi,0x40(%rsp)
  0x0000000116b3963e: mov    %r8,0x38(%rsp)
  0x0000000116b39643: mov    %r9,0x30(%rsp)
  0x0000000116b39648: mov    %r10,0x28(%rsp)
  0x0000000116b3964d: mov    %r11,0x20(%rsp)
  0x0000000116b39652: mov    %r12,0x18(%rsp)
  0x0000000116b39657: mov    %r13,0x10(%rsp)
  0x0000000116b3965c: mov    %r14,0x8(%rsp)
  0x0000000116b39661: mov    %r15,(%rsp)
  0x0000000116b39665: movabs $0x10cc6405e,%rdi
  0x0000000116b3966f: movabs $0x116b3960f,%rsi
  0x0000000116b39679: mov    %rsp,%rdx
  0x0000000116b3967c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39680: callq  0x000000010c7dd830
  0x0000000116b39685: hlt    
  0x0000000116b39686: pop    %rax
  0x0000000116b39687: movabs $0x0,%r10
  0x0000000116b39691: mov    %r10,0x280(%r15)
  0x0000000116b39698: movabs $0x0,%r10
  0x0000000116b396a2: mov    %r10,0x290(%r15)
  0x0000000116b396a9: movabs $0x0,%r10
  0x0000000116b396b3: mov    %r10,0x288(%r15)
  0x0000000116b396ba: cmpq   $0x0,0x8(%r15)
  0x0000000116b396c2: je     0x0000000116b396cd
  0x0000000116b396c8: jmpq   0x0000000116b30420
  0x0000000116b396cd: mov    -0x38(%rbp),%r13
  0x0000000116b396d1: mov    -0x30(%rbp),%r14
  0x0000000116b396d5: retq   
  0x0000000116b396d6: mov    -0x38(%rbp),%r13
  0x0000000116b396da: mov    (%rsp),%eax
  0x0000000116b396dd: add    $0x8,%rsp
  0x0000000116b396e1: jmpq   0x0000000116b39430
  0x0000000116b396e6: cmpq   $0x0,0x8(%rsi)
  0x0000000116b396ee: jne    0x0000000116b3943d
  0x0000000116b396f4: add    $0x10,%rsi
  0x0000000116b396f8: cmp    %rbx,%rsi
  0x0000000116b396fb: jne    0x0000000116b396e6
  0x0000000116b396fd: cmpb   $0x0,-0x9d1c502(%rip)        # 0x000000010ce1d202
  0x0000000116b39704: je     0x0000000116b397c1
  0x0000000116b3970a: push   %rax
  0x0000000116b3970b: mov    -0x18(%rbp),%rsi
  0x0000000116b3970f: mov    %r15,%rdi
  0x0000000116b39712: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3971a: je     0x0000000116b39797
  0x0000000116b39720: mov    %rsp,-0x28(%rsp)
  0x0000000116b39725: sub    $0x80,%rsp
  0x0000000116b3972c: mov    %rax,0x78(%rsp)
  0x0000000116b39731: mov    %rcx,0x70(%rsp)
  0x0000000116b39736: mov    %rdx,0x68(%rsp)
  0x0000000116b3973b: mov    %rbx,0x60(%rsp)
  0x0000000116b39740: mov    %rbp,0x50(%rsp)
  0x0000000116b39745: mov    %rsi,0x48(%rsp)
  0x0000000116b3974a: mov    %rdi,0x40(%rsp)
  0x0000000116b3974f: mov    %r8,0x38(%rsp)
  0x0000000116b39754: mov    %r9,0x30(%rsp)
  0x0000000116b39759: mov    %r10,0x28(%rsp)
  0x0000000116b3975e: mov    %r11,0x20(%rsp)
  0x0000000116b39763: mov    %r12,0x18(%rsp)
  0x0000000116b39768: mov    %r13,0x10(%rsp)
  0x0000000116b3976d: mov    %r14,0x8(%rsp)
  0x0000000116b39772: mov    %r15,(%rsp)
  0x0000000116b39776: movabs $0x10cc2363b,%rdi
  0x0000000116b39780: movabs $0x116b39720,%rsi
  0x0000000116b3978a: mov    %rsp,%rdx
  0x0000000116b3978d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39791: callq  0x000000010c7dd830
  0x0000000116b39796: hlt    
  0x0000000116b39797: test   $0xf,%esp
  0x0000000116b3979d: je     0x0000000116b397b5
  0x0000000116b397a3: sub    $0x8,%rsp
  0x0000000116b397a7: callq  0x000000010c9c9850
  0x0000000116b397ac: add    $0x8,%rsp
  0x0000000116b397b0: jmpq   0x0000000116b397ba
  0x0000000116b397b5: callq  0x000000010c9c9850
  0x0000000116b397ba: mov    (%rsp),%eax
  0x0000000116b397bd: add    $0x8,%rsp
  0x0000000116b397c1: mov    -0x8(%rbp),%rbx
  0x0000000116b397c5: leaveq 
  0x0000000116b397c6: pop    %rsi
  0x0000000116b397c7: mov    %rbx,%rsp
  0x0000000116b397ca: jmpq   *%rsi
  0x0000000116b397cc: mov    -0x38(%rbp),%r13
  0x0000000116b397d0: mov    -0x30(%rbp),%r14
  0x0000000116b397d4: mov    -0x40(%rbp),%rsp
  0x0000000116b397d8: movq   $0x0,-0x10(%rbp)
  0x0000000116b397e0: mov    0x630(%r15),%rcx
  0x0000000116b397e7: mov    0x90(%rcx),%rax
  0x0000000116b397ee: movq   $0x0,0x90(%rcx)
  0x0000000116b397f9: movl   $0xb,0x80(%rcx)
  0x0000000116b39803: movl   $0x0,0x88(%rcx)
  0x0000000116b3980d: mov    0x630(%r15),%rdx
  0x0000000116b39814: movl   $0x0,0x7c(%rdx)
  0x0000000116b3981b: mov    0x33d(%r15),%dl
  0x0000000116b39822: movb   $0x0,0x33d(%r15)
  0x0000000116b3982a: mov    -0x18(%rbp),%rbx
  0x0000000116b3982e: mov    0x28(%rbx),%ecx
  0x0000000116b39831: test   $0x20,%ecx
  0x0000000116b39837: je     0x0000000116b39afb
  0x0000000116b3983d: test   $0xff,%dl
  0x0000000116b39840: jne    0x0000000116b39dc2
  0x0000000116b39846: push   %rax
  0x0000000116b39847: lea    -0x50(%rbp),%rsi
  0x0000000116b3984b: mov    0x8(%rsi),%rax
  0x0000000116b3984f: test   %rax,%rax
  0x0000000116b39852: jne    0x0000000116b3985e
  0x0000000116b39858: pop    %rax
  0x0000000116b39859: jmpq   0x0000000116b39afb
  0x0000000116b3985e: mov    %r13,-0x38(%rbp)
  0x0000000116b39862: lea    (%rsi),%rax
  0x0000000116b39865: mov    0x8(%rsi),%rcx
  0x0000000116b39869: movq   $0x0,0x8(%rsi)
  0x0000000116b39871: mov    (%rcx),%rdx
  0x0000000116b39874: and    $0x7,%rdx
  0x0000000116b39878: cmp    $0x5,%rdx
  0x0000000116b3987c: je     0x0000000116b39af6
  0x0000000116b39882: mov    (%rax),%rdx
  0x0000000116b39885: test   %rdx,%rdx
  0x0000000116b39888: je     0x0000000116b39af6
  0x0000000116b3988e: lock cmpxchg %rdx,(%rcx)
  0x0000000116b39893: je     0x0000000116b39af6
  0x0000000116b39899: mov    %rcx,0x8(%rsi)
  0x0000000116b3989d: callq  0x0000000116b398a7
  0x0000000116b398a2: jmpq   0x0000000116b39af6
  0x0000000116b398a7: lea    0x8(%rsp),%rax
  0x0000000116b398ac: mov    %r13,-0x38(%rbp)
  0x0000000116b398b0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b398b8: je     0x0000000116b39935
  0x0000000116b398be: mov    %rsp,-0x28(%rsp)
  0x0000000116b398c3: sub    $0x80,%rsp
  0x0000000116b398ca: mov    %rax,0x78(%rsp)
  0x0000000116b398cf: mov    %rcx,0x70(%rsp)
  0x0000000116b398d4: mov    %rdx,0x68(%rsp)
  0x0000000116b398d9: mov    %rbx,0x60(%rsp)
  0x0000000116b398de: mov    %rbp,0x50(%rsp)
  0x0000000116b398e3: mov    %rsi,0x48(%rsp)
  0x0000000116b398e8: mov    %rdi,0x40(%rsp)
  0x0000000116b398ed: mov    %r8,0x38(%rsp)
  0x0000000116b398f2: mov    %r9,0x30(%rsp)
  0x0000000116b398f7: mov    %r10,0x28(%rsp)
  0x0000000116b398fc: mov    %r11,0x20(%rsp)
  0x0000000116b39901: mov    %r12,0x18(%rsp)
  0x0000000116b39906: mov    %r13,0x10(%rsp)
  0x0000000116b3990b: mov    %r14,0x8(%rsp)
  0x0000000116b39910: mov    %r15,(%rsp)
  0x0000000116b39914: movabs $0x10cc2363b,%rdi
  0x0000000116b3991e: movabs $0x116b398be,%rsi
  0x0000000116b39928: mov    %rsp,%rdx
  0x0000000116b3992b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3992f: callq  0x000000010c7dd830
  0x0000000116b39934: hlt    
  0x0000000116b39935: push   %r10
  0x0000000116b39937: cmp    -0x9cf308e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3993e: je     0x0000000116b399bb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b39944: mov    %rsp,-0x28(%rsp)
  0x0000000116b39949: sub    $0x80,%rsp
  0x0000000116b39950: mov    %rax,0x78(%rsp)
  0x0000000116b39955: mov    %rcx,0x70(%rsp)
  0x0000000116b3995a: mov    %rdx,0x68(%rsp)
  0x0000000116b3995f: mov    %rbx,0x60(%rsp)
  0x0000000116b39964: mov    %rbp,0x50(%rsp)
  0x0000000116b39969: mov    %rsi,0x48(%rsp)
  0x0000000116b3996e: mov    %rdi,0x40(%rsp)
  0x0000000116b39973: mov    %r8,0x38(%rsp)
  0x0000000116b39978: mov    %r9,0x30(%rsp)
  0x0000000116b3997d: mov    %r10,0x28(%rsp)
  0x0000000116b39982: mov    %r11,0x20(%rsp)
  0x0000000116b39987: mov    %r12,0x18(%rsp)
  0x0000000116b3998c: mov    %r13,0x10(%rsp)
  0x0000000116b39991: mov    %r14,0x8(%rsp)
  0x0000000116b39996: mov    %r15,(%rsp)
  0x0000000116b3999a: movabs $0x10cc63f17,%rdi
  0x0000000116b399a4: movabs $0x116b39944,%rsi
  0x0000000116b399ae: mov    %rsp,%rdx
  0x0000000116b399b1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b399b5: callq  0x000000010c7dd830
  0x0000000116b399ba: hlt    
  0x0000000116b399bb: pop    %r10
  0x0000000116b399bd: mov    %r15,%rdi
  0x0000000116b399c0: mov    %rbp,0x290(%r15)
  0x0000000116b399c7: mov    %rax,0x280(%r15)
  0x0000000116b399ce: test   $0xf,%esp
  0x0000000116b399d4: je     0x0000000116b399ec
  0x0000000116b399da: sub    $0x8,%rsp
  0x0000000116b399de: callq  0x000000010c588f80
  0x0000000116b399e3: add    $0x8,%rsp
  0x0000000116b399e7: jmpq   0x0000000116b399f1
  0x0000000116b399ec: callq  0x000000010c588f80
  0x0000000116b399f1: push   %rax
  0x0000000116b399f2: push   %rdi
  0x0000000116b399f3: push   %rsi
  0x0000000116b399f4: push   %rdx
  0x0000000116b399f5: push   %rcx
  0x0000000116b399f6: push   %r8
  0x0000000116b399f8: push   %r9
  0x0000000116b399fa: push   %r10
  0x0000000116b399fc: mov    %rsp,%r10
  0x0000000116b399ff: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39a03: push   %r10
  0x0000000116b39a05: push   %r11
  0x0000000116b39a07: mov    $0x109,%edi
  0x0000000116b39a0c: movabs $0x7ff815049fd5,%r10
  0x0000000116b39a16: callq  *%r10
  0x0000000116b39a19: pop    %r11
  0x0000000116b39a1b: pop    %rsp
  0x0000000116b39a1c: pop    %r10
  0x0000000116b39a1e: pop    %r9
  0x0000000116b39a20: pop    %r8
  0x0000000116b39a22: pop    %rcx
  0x0000000116b39a23: pop    %rdx
  0x0000000116b39a24: pop    %rsi
  0x0000000116b39a25: pop    %rdi
  0x0000000116b39a26: cmp    %rax,%r15
  0x0000000116b39a29: je     0x0000000116b39aa6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b39a2f: mov    %rsp,-0x28(%rsp)
  0x0000000116b39a34: sub    $0x80,%rsp
  0x0000000116b39a3b: mov    %rax,0x78(%rsp)
  0x0000000116b39a40: mov    %rcx,0x70(%rsp)
  0x0000000116b39a45: mov    %rdx,0x68(%rsp)
  0x0000000116b39a4a: mov    %rbx,0x60(%rsp)
  0x0000000116b39a4f: mov    %rbp,0x50(%rsp)
  0x0000000116b39a54: mov    %rsi,0x48(%rsp)
  0x0000000116b39a59: mov    %rdi,0x40(%rsp)
  0x0000000116b39a5e: mov    %r8,0x38(%rsp)
  0x0000000116b39a63: mov    %r9,0x30(%rsp)
  0x0000000116b39a68: mov    %r10,0x28(%rsp)
  0x0000000116b39a6d: mov    %r11,0x20(%rsp)
  0x0000000116b39a72: mov    %r12,0x18(%rsp)
  0x0000000116b39a77: mov    %r13,0x10(%rsp)
  0x0000000116b39a7c: mov    %r14,0x8(%rsp)
  0x0000000116b39a81: mov    %r15,(%rsp)
  0x0000000116b39a85: movabs $0x10cc6405e,%rdi
  0x0000000116b39a8f: movabs $0x116b39a2f,%rsi
  0x0000000116b39a99: mov    %rsp,%rdx
  0x0000000116b39a9c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39aa0: callq  0x000000010c7dd830
  0x0000000116b39aa5: hlt    
  0x0000000116b39aa6: pop    %rax
  0x0000000116b39aa7: movabs $0x0,%r10
  0x0000000116b39ab1: mov    %r10,0x280(%r15)
  0x0000000116b39ab8: movabs $0x0,%r10
  0x0000000116b39ac2: mov    %r10,0x290(%r15)
  0x0000000116b39ac9: movabs $0x0,%r10
  0x0000000116b39ad3: mov    %r10,0x288(%r15)
  0x0000000116b39ada: cmpq   $0x0,0x8(%r15)
  0x0000000116b39ae2: je     0x0000000116b39aed
  0x0000000116b39ae8: jmpq   0x0000000116b30420
  0x0000000116b39aed: mov    -0x38(%rbp),%r13
  0x0000000116b39af1: mov    -0x30(%rbp),%r14
  0x0000000116b39af5: retq   
  0x0000000116b39af6: mov    -0x38(%rbp),%r13
  0x0000000116b39afa: pop    %rax
  0x0000000116b39afb: mov    -0x40(%rbp),%rsi
  0x0000000116b39aff: lea    -0x40(%rbp),%rbx
  0x0000000116b39b03: jmpq   0x0000000116b39dbd
  0x0000000116b39b08: push   %rax
  0x0000000116b39b09: mov    %r13,-0x38(%rbp)
  0x0000000116b39b0d: lea    (%rsi),%rax
  0x0000000116b39b10: mov    0x8(%rsi),%rcx
  0x0000000116b39b14: movq   $0x0,0x8(%rsi)
  0x0000000116b39b1c: mov    (%rcx),%rdx
  0x0000000116b39b1f: and    $0x7,%rdx
  0x0000000116b39b23: cmp    $0x5,%rdx
  0x0000000116b39b27: je     0x0000000116b39da1
  0x0000000116b39b2d: mov    (%rax),%rdx
  0x0000000116b39b30: test   %rdx,%rdx
  0x0000000116b39b33: je     0x0000000116b39da1
  0x0000000116b39b39: lock cmpxchg %rdx,(%rcx)
  0x0000000116b39b3e: je     0x0000000116b39da1
  0x0000000116b39b44: mov    %rcx,0x8(%rsi)
  0x0000000116b39b48: callq  0x0000000116b39b52
  0x0000000116b39b4d: jmpq   0x0000000116b39da1
  0x0000000116b39b52: lea    0x8(%rsp),%rax
  0x0000000116b39b57: mov    %r13,-0x38(%rbp)
  0x0000000116b39b5b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b39b63: je     0x0000000116b39be0
  0x0000000116b39b69: mov    %rsp,-0x28(%rsp)
  0x0000000116b39b6e: sub    $0x80,%rsp
  0x0000000116b39b75: mov    %rax,0x78(%rsp)
  0x0000000116b39b7a: mov    %rcx,0x70(%rsp)
  0x0000000116b39b7f: mov    %rdx,0x68(%rsp)
  0x0000000116b39b84: mov    %rbx,0x60(%rsp)
  0x0000000116b39b89: mov    %rbp,0x50(%rsp)
  0x0000000116b39b8e: mov    %rsi,0x48(%rsp)
  0x0000000116b39b93: mov    %rdi,0x40(%rsp)
  0x0000000116b39b98: mov    %r8,0x38(%rsp)
  0x0000000116b39b9d: mov    %r9,0x30(%rsp)
  0x0000000116b39ba2: mov    %r10,0x28(%rsp)
  0x0000000116b39ba7: mov    %r11,0x20(%rsp)
  0x0000000116b39bac: mov    %r12,0x18(%rsp)
  0x0000000116b39bb1: mov    %r13,0x10(%rsp)
  0x0000000116b39bb6: mov    %r14,0x8(%rsp)
  0x0000000116b39bbb: mov    %r15,(%rsp)
  0x0000000116b39bbf: movabs $0x10cc2363b,%rdi
  0x0000000116b39bc9: movabs $0x116b39b69,%rsi
  0x0000000116b39bd3: mov    %rsp,%rdx
  0x0000000116b39bd6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39bda: callq  0x000000010c7dd830
  0x0000000116b39bdf: hlt    
  0x0000000116b39be0: push   %r10
  0x0000000116b39be2: cmp    -0x9cf3339(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b39be9: je     0x0000000116b39c66
  ;; call_VM_base: heap base corrupted?
  0x0000000116b39bef: mov    %rsp,-0x28(%rsp)
  0x0000000116b39bf4: sub    $0x80,%rsp
  0x0000000116b39bfb: mov    %rax,0x78(%rsp)
  0x0000000116b39c00: mov    %rcx,0x70(%rsp)
  0x0000000116b39c05: mov    %rdx,0x68(%rsp)
  0x0000000116b39c0a: mov    %rbx,0x60(%rsp)
  0x0000000116b39c0f: mov    %rbp,0x50(%rsp)
  0x0000000116b39c14: mov    %rsi,0x48(%rsp)
  0x0000000116b39c19: mov    %rdi,0x40(%rsp)
  0x0000000116b39c1e: mov    %r8,0x38(%rsp)
  0x0000000116b39c23: mov    %r9,0x30(%rsp)
  0x0000000116b39c28: mov    %r10,0x28(%rsp)
  0x0000000116b39c2d: mov    %r11,0x20(%rsp)
  0x0000000116b39c32: mov    %r12,0x18(%rsp)
  0x0000000116b39c37: mov    %r13,0x10(%rsp)
  0x0000000116b39c3c: mov    %r14,0x8(%rsp)
  0x0000000116b39c41: mov    %r15,(%rsp)
  0x0000000116b39c45: movabs $0x10cc63f17,%rdi
  0x0000000116b39c4f: movabs $0x116b39bef,%rsi
  0x0000000116b39c59: mov    %rsp,%rdx
  0x0000000116b39c5c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39c60: callq  0x000000010c7dd830
  0x0000000116b39c65: hlt    
  0x0000000116b39c66: pop    %r10
  0x0000000116b39c68: mov    %r15,%rdi
  0x0000000116b39c6b: mov    %rbp,0x290(%r15)
  0x0000000116b39c72: mov    %rax,0x280(%r15)
  0x0000000116b39c79: test   $0xf,%esp
  0x0000000116b39c7f: je     0x0000000116b39c97
  0x0000000116b39c85: sub    $0x8,%rsp
  0x0000000116b39c89: callq  0x000000010c588f80
  0x0000000116b39c8e: add    $0x8,%rsp
  0x0000000116b39c92: jmpq   0x0000000116b39c9c
  0x0000000116b39c97: callq  0x000000010c588f80
  0x0000000116b39c9c: push   %rax
  0x0000000116b39c9d: push   %rdi
  0x0000000116b39c9e: push   %rsi
  0x0000000116b39c9f: push   %rdx
  0x0000000116b39ca0: push   %rcx
  0x0000000116b39ca1: push   %r8
  0x0000000116b39ca3: push   %r9
  0x0000000116b39ca5: push   %r10
  0x0000000116b39ca7: mov    %rsp,%r10
  0x0000000116b39caa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39cae: push   %r10
  0x0000000116b39cb0: push   %r11
  0x0000000116b39cb2: mov    $0x109,%edi
  0x0000000116b39cb7: movabs $0x7ff815049fd5,%r10
  0x0000000116b39cc1: callq  *%r10
  0x0000000116b39cc4: pop    %r11
  0x0000000116b39cc6: pop    %rsp
  0x0000000116b39cc7: pop    %r10
  0x0000000116b39cc9: pop    %r9
  0x0000000116b39ccb: pop    %r8
  0x0000000116b39ccd: pop    %rcx
  0x0000000116b39cce: pop    %rdx
  0x0000000116b39ccf: pop    %rsi
  0x0000000116b39cd0: pop    %rdi
  0x0000000116b39cd1: cmp    %rax,%r15
  0x0000000116b39cd4: je     0x0000000116b39d51
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b39cda: mov    %rsp,-0x28(%rsp)
  0x0000000116b39cdf: sub    $0x80,%rsp
  0x0000000116b39ce6: mov    %rax,0x78(%rsp)
  0x0000000116b39ceb: mov    %rcx,0x70(%rsp)
  0x0000000116b39cf0: mov    %rdx,0x68(%rsp)
  0x0000000116b39cf5: mov    %rbx,0x60(%rsp)
  0x0000000116b39cfa: mov    %rbp,0x50(%rsp)
  0x0000000116b39cff: mov    %rsi,0x48(%rsp)
  0x0000000116b39d04: mov    %rdi,0x40(%rsp)
  0x0000000116b39d09: mov    %r8,0x38(%rsp)
  0x0000000116b39d0e: mov    %r9,0x30(%rsp)
  0x0000000116b39d13: mov    %r10,0x28(%rsp)
  0x0000000116b39d18: mov    %r11,0x20(%rsp)
  0x0000000116b39d1d: mov    %r12,0x18(%rsp)
  0x0000000116b39d22: mov    %r13,0x10(%rsp)
  0x0000000116b39d27: mov    %r14,0x8(%rsp)
  0x0000000116b39d2c: mov    %r15,(%rsp)
  0x0000000116b39d30: movabs $0x10cc6405e,%rdi
  0x0000000116b39d3a: movabs $0x116b39cda,%rsi
  0x0000000116b39d44: mov    %rsp,%rdx
  0x0000000116b39d47: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39d4b: callq  0x000000010c7dd830
  0x0000000116b39d50: hlt    
  0x0000000116b39d51: pop    %rax
  0x0000000116b39d52: movabs $0x0,%r10
  0x0000000116b39d5c: mov    %r10,0x280(%r15)
  0x0000000116b39d63: movabs $0x0,%r10
  0x0000000116b39d6d: mov    %r10,0x290(%r15)
  0x0000000116b39d74: movabs $0x0,%r10
  0x0000000116b39d7e: mov    %r10,0x288(%r15)
  0x0000000116b39d85: cmpq   $0x0,0x8(%r15)
  0x0000000116b39d8d: je     0x0000000116b39d98
  0x0000000116b39d93: jmpq   0x0000000116b30420
  0x0000000116b39d98: mov    -0x38(%rbp),%r13
  0x0000000116b39d9c: mov    -0x30(%rbp),%r14
  0x0000000116b39da0: retq   
  0x0000000116b39da1: mov    -0x38(%rbp),%r13
  0x0000000116b39da5: pop    %rax
  0x0000000116b39da6: jmpq   0x0000000116b39afb
  0x0000000116b39dab: cmpq   $0x0,0x8(%rsi)
  0x0000000116b39db3: jne    0x0000000116b39b08
  0x0000000116b39db9: add    $0x10,%rsi
  0x0000000116b39dbd: cmp    %rbx,%rsi
  0x0000000116b39dc0: jne    0x0000000116b39dab
  0x0000000116b39dc2: cmpb   $0x0,-0x9d1cbc7(%rip)        # 0x000000010ce1d202
  0x0000000116b39dc9: je     0x0000000116b39e80
  0x0000000116b39dcf: push   %rax
  0x0000000116b39dd0: mov    -0x18(%rbp),%rsi
  0x0000000116b39dd4: mov    %r15,%rdi
  0x0000000116b39dd7: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b39ddf: je     0x0000000116b39e5c
  0x0000000116b39de5: mov    %rsp,-0x28(%rsp)
  0x0000000116b39dea: sub    $0x80,%rsp
  0x0000000116b39df1: mov    %rax,0x78(%rsp)
  0x0000000116b39df6: mov    %rcx,0x70(%rsp)
  0x0000000116b39dfb: mov    %rdx,0x68(%rsp)
  0x0000000116b39e00: mov    %rbx,0x60(%rsp)
  0x0000000116b39e05: mov    %rbp,0x50(%rsp)
  0x0000000116b39e0a: mov    %rsi,0x48(%rsp)
  0x0000000116b39e0f: mov    %rdi,0x40(%rsp)
  0x0000000116b39e14: mov    %r8,0x38(%rsp)
  0x0000000116b39e19: mov    %r9,0x30(%rsp)
  0x0000000116b39e1e: mov    %r10,0x28(%rsp)
  0x0000000116b39e23: mov    %r11,0x20(%rsp)
  0x0000000116b39e28: mov    %r12,0x18(%rsp)
  0x0000000116b39e2d: mov    %r13,0x10(%rsp)
  0x0000000116b39e32: mov    %r14,0x8(%rsp)
  0x0000000116b39e37: mov    %r15,(%rsp)
  0x0000000116b39e3b: movabs $0x10cc2363b,%rdi
  0x0000000116b39e45: movabs $0x116b39de5,%rsi
  0x0000000116b39e4f: mov    %rsp,%rdx
  0x0000000116b39e52: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39e56: callq  0x000000010c7dd830
  0x0000000116b39e5b: hlt    
  0x0000000116b39e5c: test   $0xf,%esp
  0x0000000116b39e62: je     0x0000000116b39e7a
  0x0000000116b39e68: sub    $0x8,%rsp
  0x0000000116b39e6c: callq  0x000000010c9c9850
  0x0000000116b39e71: add    $0x8,%rsp
  0x0000000116b39e75: jmpq   0x0000000116b39e7f
  0x0000000116b39e7a: callq  0x000000010c9c9850
  0x0000000116b39e7f: pop    %rax
  0x0000000116b39e80: mov    -0x8(%rbp),%rbx
  0x0000000116b39e84: leaveq 
  0x0000000116b39e85: pop    %rsi
  0x0000000116b39e86: mov    %rbx,%rsp
  0x0000000116b39e89: jmpq   *%rsi
  0x0000000116b39e8b: mov    -0x38(%rbp),%r13
  0x0000000116b39e8f: mov    -0x30(%rbp),%r14
  0x0000000116b39e93: mov    -0x40(%rbp),%rsp
  0x0000000116b39e97: movq   $0x0,-0x10(%rbp)
  0x0000000116b39e9f: mov    0x630(%r15),%rcx
  0x0000000116b39ea6: mov    0x88(%rcx),%eax
  0x0000000116b39eac: movl   $0xb,0x80(%rcx)
  0x0000000116b39eb6: movl   $0x0,0x88(%rcx)
  0x0000000116b39ec0: mov    0x630(%r15),%rdx
  0x0000000116b39ec7: movl   $0x0,0x7c(%rdx)
  0x0000000116b39ece: mov    0x33d(%r15),%dl
  0x0000000116b39ed5: movb   $0x0,0x33d(%r15)
  0x0000000116b39edd: mov    -0x18(%rbp),%rbx
  0x0000000116b39ee1: mov    0x28(%rbx),%ecx
  0x0000000116b39ee4: test   $0x20,%ecx
  0x0000000116b39eea: je     0x0000000116b3a1ba
  0x0000000116b39ef0: test   $0xff,%dl
  0x0000000116b39ef3: jne    0x0000000116b3a487
  0x0000000116b39ef9: push   %rax
  0x0000000116b39efa: lea    -0x50(%rbp),%rsi
  0x0000000116b39efe: mov    0x8(%rsi),%rax
  0x0000000116b39f02: test   %rax,%rax
  0x0000000116b39f05: jne    0x0000000116b39f17
  0x0000000116b39f0b: mov    (%rsp),%eax
  0x0000000116b39f0e: add    $0x8,%rsp
  0x0000000116b39f12: jmpq   0x0000000116b3a1ba
  0x0000000116b39f17: mov    %r13,-0x38(%rbp)
  0x0000000116b39f1b: lea    (%rsi),%rax
  0x0000000116b39f1e: mov    0x8(%rsi),%rcx
  0x0000000116b39f22: movq   $0x0,0x8(%rsi)
  0x0000000116b39f2a: mov    (%rcx),%rdx
  0x0000000116b39f2d: and    $0x7,%rdx
  0x0000000116b39f31: cmp    $0x5,%rdx
  0x0000000116b39f35: je     0x0000000116b3a1af
  0x0000000116b39f3b: mov    (%rax),%rdx
  0x0000000116b39f3e: test   %rdx,%rdx
  0x0000000116b39f41: je     0x0000000116b3a1af
  0x0000000116b39f47: lock cmpxchg %rdx,(%rcx)
  0x0000000116b39f4c: je     0x0000000116b3a1af
  0x0000000116b39f52: mov    %rcx,0x8(%rsi)
  0x0000000116b39f56: callq  0x0000000116b39f60
  0x0000000116b39f5b: jmpq   0x0000000116b3a1af
  0x0000000116b39f60: lea    0x8(%rsp),%rax
  0x0000000116b39f65: mov    %r13,-0x38(%rbp)
  0x0000000116b39f69: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b39f71: je     0x0000000116b39fee
  0x0000000116b39f77: mov    %rsp,-0x28(%rsp)
  0x0000000116b39f7c: sub    $0x80,%rsp
  0x0000000116b39f83: mov    %rax,0x78(%rsp)
  0x0000000116b39f88: mov    %rcx,0x70(%rsp)
  0x0000000116b39f8d: mov    %rdx,0x68(%rsp)
  0x0000000116b39f92: mov    %rbx,0x60(%rsp)
  0x0000000116b39f97: mov    %rbp,0x50(%rsp)
  0x0000000116b39f9c: mov    %rsi,0x48(%rsp)
  0x0000000116b39fa1: mov    %rdi,0x40(%rsp)
  0x0000000116b39fa6: mov    %r8,0x38(%rsp)
  0x0000000116b39fab: mov    %r9,0x30(%rsp)
  0x0000000116b39fb0: mov    %r10,0x28(%rsp)
  0x0000000116b39fb5: mov    %r11,0x20(%rsp)
  0x0000000116b39fba: mov    %r12,0x18(%rsp)
  0x0000000116b39fbf: mov    %r13,0x10(%rsp)
  0x0000000116b39fc4: mov    %r14,0x8(%rsp)
  0x0000000116b39fc9: mov    %r15,(%rsp)
  0x0000000116b39fcd: movabs $0x10cc2363b,%rdi
  0x0000000116b39fd7: movabs $0x116b39f77,%rsi
  0x0000000116b39fe1: mov    %rsp,%rdx
  0x0000000116b39fe4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b39fe8: callq  0x000000010c7dd830
  0x0000000116b39fed: hlt    
  0x0000000116b39fee: push   %r10
  0x0000000116b39ff0: cmp    -0x9cf3747(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b39ff7: je     0x0000000116b3a074
  ;; call_VM_base: heap base corrupted?
  0x0000000116b39ffd: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a002: sub    $0x80,%rsp
  0x0000000116b3a009: mov    %rax,0x78(%rsp)
  0x0000000116b3a00e: mov    %rcx,0x70(%rsp)
  0x0000000116b3a013: mov    %rdx,0x68(%rsp)
  0x0000000116b3a018: mov    %rbx,0x60(%rsp)
  0x0000000116b3a01d: mov    %rbp,0x50(%rsp)
  0x0000000116b3a022: mov    %rsi,0x48(%rsp)
  0x0000000116b3a027: mov    %rdi,0x40(%rsp)
  0x0000000116b3a02c: mov    %r8,0x38(%rsp)
  0x0000000116b3a031: mov    %r9,0x30(%rsp)
  0x0000000116b3a036: mov    %r10,0x28(%rsp)
  0x0000000116b3a03b: mov    %r11,0x20(%rsp)
  0x0000000116b3a040: mov    %r12,0x18(%rsp)
  0x0000000116b3a045: mov    %r13,0x10(%rsp)
  0x0000000116b3a04a: mov    %r14,0x8(%rsp)
  0x0000000116b3a04f: mov    %r15,(%rsp)
  0x0000000116b3a053: movabs $0x10cc63f17,%rdi
  0x0000000116b3a05d: movabs $0x116b39ffd,%rsi
  0x0000000116b3a067: mov    %rsp,%rdx
  0x0000000116b3a06a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a06e: callq  0x000000010c7dd830
  0x0000000116b3a073: hlt    
  0x0000000116b3a074: pop    %r10
  0x0000000116b3a076: mov    %r15,%rdi
  0x0000000116b3a079: mov    %rbp,0x290(%r15)
  0x0000000116b3a080: mov    %rax,0x280(%r15)
  0x0000000116b3a087: test   $0xf,%esp
  0x0000000116b3a08d: je     0x0000000116b3a0a5
  0x0000000116b3a093: sub    $0x8,%rsp
  0x0000000116b3a097: callq  0x000000010c588f80
  0x0000000116b3a09c: add    $0x8,%rsp
  0x0000000116b3a0a0: jmpq   0x0000000116b3a0aa
  0x0000000116b3a0a5: callq  0x000000010c588f80
  0x0000000116b3a0aa: push   %rax
  0x0000000116b3a0ab: push   %rdi
  0x0000000116b3a0ac: push   %rsi
  0x0000000116b3a0ad: push   %rdx
  0x0000000116b3a0ae: push   %rcx
  0x0000000116b3a0af: push   %r8
  0x0000000116b3a0b1: push   %r9
  0x0000000116b3a0b3: push   %r10
  0x0000000116b3a0b5: mov    %rsp,%r10
  0x0000000116b3a0b8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a0bc: push   %r10
  0x0000000116b3a0be: push   %r11
  0x0000000116b3a0c0: mov    $0x109,%edi
  0x0000000116b3a0c5: movabs $0x7ff815049fd5,%r10
  0x0000000116b3a0cf: callq  *%r10
  0x0000000116b3a0d2: pop    %r11
  0x0000000116b3a0d4: pop    %rsp
  0x0000000116b3a0d5: pop    %r10
  0x0000000116b3a0d7: pop    %r9
  0x0000000116b3a0d9: pop    %r8
  0x0000000116b3a0db: pop    %rcx
  0x0000000116b3a0dc: pop    %rdx
  0x0000000116b3a0dd: pop    %rsi
  0x0000000116b3a0de: pop    %rdi
  0x0000000116b3a0df: cmp    %rax,%r15
  0x0000000116b3a0e2: je     0x0000000116b3a15f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3a0e8: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a0ed: sub    $0x80,%rsp
  0x0000000116b3a0f4: mov    %rax,0x78(%rsp)
  0x0000000116b3a0f9: mov    %rcx,0x70(%rsp)
  0x0000000116b3a0fe: mov    %rdx,0x68(%rsp)
  0x0000000116b3a103: mov    %rbx,0x60(%rsp)
  0x0000000116b3a108: mov    %rbp,0x50(%rsp)
  0x0000000116b3a10d: mov    %rsi,0x48(%rsp)
  0x0000000116b3a112: mov    %rdi,0x40(%rsp)
  0x0000000116b3a117: mov    %r8,0x38(%rsp)
  0x0000000116b3a11c: mov    %r9,0x30(%rsp)
  0x0000000116b3a121: mov    %r10,0x28(%rsp)
  0x0000000116b3a126: mov    %r11,0x20(%rsp)
  0x0000000116b3a12b: mov    %r12,0x18(%rsp)
  0x0000000116b3a130: mov    %r13,0x10(%rsp)
  0x0000000116b3a135: mov    %r14,0x8(%rsp)
  0x0000000116b3a13a: mov    %r15,(%rsp)
  0x0000000116b3a13e: movabs $0x10cc6405e,%rdi
  0x0000000116b3a148: movabs $0x116b3a0e8,%rsi
  0x0000000116b3a152: mov    %rsp,%rdx
  0x0000000116b3a155: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a159: callq  0x000000010c7dd830
  0x0000000116b3a15e: hlt    
  0x0000000116b3a15f: pop    %rax
  0x0000000116b3a160: movabs $0x0,%r10
  0x0000000116b3a16a: mov    %r10,0x280(%r15)
  0x0000000116b3a171: movabs $0x0,%r10
  0x0000000116b3a17b: mov    %r10,0x290(%r15)
  0x0000000116b3a182: movabs $0x0,%r10
  0x0000000116b3a18c: mov    %r10,0x288(%r15)
  0x0000000116b3a193: cmpq   $0x0,0x8(%r15)
  0x0000000116b3a19b: je     0x0000000116b3a1a6
  0x0000000116b3a1a1: jmpq   0x0000000116b30420
  0x0000000116b3a1a6: mov    -0x38(%rbp),%r13
  0x0000000116b3a1aa: mov    -0x30(%rbp),%r14
  0x0000000116b3a1ae: retq   
  0x0000000116b3a1af: mov    -0x38(%rbp),%r13
  0x0000000116b3a1b3: mov    (%rsp),%eax
  0x0000000116b3a1b6: add    $0x8,%rsp
  0x0000000116b3a1ba: mov    -0x40(%rbp),%rsi
  0x0000000116b3a1be: lea    -0x40(%rbp),%rbx
  0x0000000116b3a1c2: jmpq   0x0000000116b3a482
  0x0000000116b3a1c7: push   %rax
  0x0000000116b3a1c8: mov    %r13,-0x38(%rbp)
  0x0000000116b3a1cc: lea    (%rsi),%rax
  0x0000000116b3a1cf: mov    0x8(%rsi),%rcx
  0x0000000116b3a1d3: movq   $0x0,0x8(%rsi)
  0x0000000116b3a1db: mov    (%rcx),%rdx
  0x0000000116b3a1de: and    $0x7,%rdx
  0x0000000116b3a1e2: cmp    $0x5,%rdx
  0x0000000116b3a1e6: je     0x0000000116b3a460
  0x0000000116b3a1ec: mov    (%rax),%rdx
  0x0000000116b3a1ef: test   %rdx,%rdx
  0x0000000116b3a1f2: je     0x0000000116b3a460
  0x0000000116b3a1f8: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3a1fd: je     0x0000000116b3a460
  0x0000000116b3a203: mov    %rcx,0x8(%rsi)
  0x0000000116b3a207: callq  0x0000000116b3a211
  0x0000000116b3a20c: jmpq   0x0000000116b3a460
  0x0000000116b3a211: lea    0x8(%rsp),%rax
  0x0000000116b3a216: mov    %r13,-0x38(%rbp)
  0x0000000116b3a21a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3a222: je     0x0000000116b3a29f
  0x0000000116b3a228: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a22d: sub    $0x80,%rsp
  0x0000000116b3a234: mov    %rax,0x78(%rsp)
  0x0000000116b3a239: mov    %rcx,0x70(%rsp)
  0x0000000116b3a23e: mov    %rdx,0x68(%rsp)
  0x0000000116b3a243: mov    %rbx,0x60(%rsp)
  0x0000000116b3a248: mov    %rbp,0x50(%rsp)
  0x0000000116b3a24d: mov    %rsi,0x48(%rsp)
  0x0000000116b3a252: mov    %rdi,0x40(%rsp)
  0x0000000116b3a257: mov    %r8,0x38(%rsp)
  0x0000000116b3a25c: mov    %r9,0x30(%rsp)
  0x0000000116b3a261: mov    %r10,0x28(%rsp)
  0x0000000116b3a266: mov    %r11,0x20(%rsp)
  0x0000000116b3a26b: mov    %r12,0x18(%rsp)
  0x0000000116b3a270: mov    %r13,0x10(%rsp)
  0x0000000116b3a275: mov    %r14,0x8(%rsp)
  0x0000000116b3a27a: mov    %r15,(%rsp)
  0x0000000116b3a27e: movabs $0x10cc2363b,%rdi
  0x0000000116b3a288: movabs $0x116b3a228,%rsi
  0x0000000116b3a292: mov    %rsp,%rdx
  0x0000000116b3a295: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a299: callq  0x000000010c7dd830
  0x0000000116b3a29e: hlt    
  0x0000000116b3a29f: push   %r10
  0x0000000116b3a2a1: cmp    -0x9cf39f8(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3a2a8: je     0x0000000116b3a325
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3a2ae: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a2b3: sub    $0x80,%rsp
  0x0000000116b3a2ba: mov    %rax,0x78(%rsp)
  0x0000000116b3a2bf: mov    %rcx,0x70(%rsp)
  0x0000000116b3a2c4: mov    %rdx,0x68(%rsp)
  0x0000000116b3a2c9: mov    %rbx,0x60(%rsp)
  0x0000000116b3a2ce: mov    %rbp,0x50(%rsp)
  0x0000000116b3a2d3: mov    %rsi,0x48(%rsp)
  0x0000000116b3a2d8: mov    %rdi,0x40(%rsp)
  0x0000000116b3a2dd: mov    %r8,0x38(%rsp)
  0x0000000116b3a2e2: mov    %r9,0x30(%rsp)
  0x0000000116b3a2e7: mov    %r10,0x28(%rsp)
  0x0000000116b3a2ec: mov    %r11,0x20(%rsp)
  0x0000000116b3a2f1: mov    %r12,0x18(%rsp)
  0x0000000116b3a2f6: mov    %r13,0x10(%rsp)
  0x0000000116b3a2fb: mov    %r14,0x8(%rsp)
  0x0000000116b3a300: mov    %r15,(%rsp)
  0x0000000116b3a304: movabs $0x10cc63f17,%rdi
  0x0000000116b3a30e: movabs $0x116b3a2ae,%rsi
  0x0000000116b3a318: mov    %rsp,%rdx
  0x0000000116b3a31b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a31f: callq  0x000000010c7dd830
  0x0000000116b3a324: hlt    
  0x0000000116b3a325: pop    %r10
  0x0000000116b3a327: mov    %r15,%rdi
  0x0000000116b3a32a: mov    %rbp,0x290(%r15)
  0x0000000116b3a331: mov    %rax,0x280(%r15)
  0x0000000116b3a338: test   $0xf,%esp
  0x0000000116b3a33e: je     0x0000000116b3a356
  0x0000000116b3a344: sub    $0x8,%rsp
  0x0000000116b3a348: callq  0x000000010c588f80
  0x0000000116b3a34d: add    $0x8,%rsp
  0x0000000116b3a351: jmpq   0x0000000116b3a35b
  0x0000000116b3a356: callq  0x000000010c588f80
  0x0000000116b3a35b: push   %rax
  0x0000000116b3a35c: push   %rdi
  0x0000000116b3a35d: push   %rsi
  0x0000000116b3a35e: push   %rdx
  0x0000000116b3a35f: push   %rcx
  0x0000000116b3a360: push   %r8
  0x0000000116b3a362: push   %r9
  0x0000000116b3a364: push   %r10
  0x0000000116b3a366: mov    %rsp,%r10
  0x0000000116b3a369: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a36d: push   %r10
  0x0000000116b3a36f: push   %r11
  0x0000000116b3a371: mov    $0x109,%edi
  0x0000000116b3a376: movabs $0x7ff815049fd5,%r10
  0x0000000116b3a380: callq  *%r10
  0x0000000116b3a383: pop    %r11
  0x0000000116b3a385: pop    %rsp
  0x0000000116b3a386: pop    %r10
  0x0000000116b3a388: pop    %r9
  0x0000000116b3a38a: pop    %r8
  0x0000000116b3a38c: pop    %rcx
  0x0000000116b3a38d: pop    %rdx
  0x0000000116b3a38e: pop    %rsi
  0x0000000116b3a38f: pop    %rdi
  0x0000000116b3a390: cmp    %rax,%r15
  0x0000000116b3a393: je     0x0000000116b3a410
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3a399: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a39e: sub    $0x80,%rsp
  0x0000000116b3a3a5: mov    %rax,0x78(%rsp)
  0x0000000116b3a3aa: mov    %rcx,0x70(%rsp)
  0x0000000116b3a3af: mov    %rdx,0x68(%rsp)
  0x0000000116b3a3b4: mov    %rbx,0x60(%rsp)
  0x0000000116b3a3b9: mov    %rbp,0x50(%rsp)
  0x0000000116b3a3be: mov    %rsi,0x48(%rsp)
  0x0000000116b3a3c3: mov    %rdi,0x40(%rsp)
  0x0000000116b3a3c8: mov    %r8,0x38(%rsp)
  0x0000000116b3a3cd: mov    %r9,0x30(%rsp)
  0x0000000116b3a3d2: mov    %r10,0x28(%rsp)
  0x0000000116b3a3d7: mov    %r11,0x20(%rsp)
  0x0000000116b3a3dc: mov    %r12,0x18(%rsp)
  0x0000000116b3a3e1: mov    %r13,0x10(%rsp)
  0x0000000116b3a3e6: mov    %r14,0x8(%rsp)
  0x0000000116b3a3eb: mov    %r15,(%rsp)
  0x0000000116b3a3ef: movabs $0x10cc6405e,%rdi
  0x0000000116b3a3f9: movabs $0x116b3a399,%rsi
  0x0000000116b3a403: mov    %rsp,%rdx
  0x0000000116b3a406: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a40a: callq  0x000000010c7dd830
  0x0000000116b3a40f: hlt    
  0x0000000116b3a410: pop    %rax
  0x0000000116b3a411: movabs $0x0,%r10
  0x0000000116b3a41b: mov    %r10,0x280(%r15)
  0x0000000116b3a422: movabs $0x0,%r10
  0x0000000116b3a42c: mov    %r10,0x290(%r15)
  0x0000000116b3a433: movabs $0x0,%r10
  0x0000000116b3a43d: mov    %r10,0x288(%r15)
  0x0000000116b3a444: cmpq   $0x0,0x8(%r15)
  0x0000000116b3a44c: je     0x0000000116b3a457
  0x0000000116b3a452: jmpq   0x0000000116b30420
  0x0000000116b3a457: mov    -0x38(%rbp),%r13
  0x0000000116b3a45b: mov    -0x30(%rbp),%r14
  0x0000000116b3a45f: retq   
  0x0000000116b3a460: mov    -0x38(%rbp),%r13
  0x0000000116b3a464: mov    (%rsp),%eax
  0x0000000116b3a467: add    $0x8,%rsp
  0x0000000116b3a46b: jmpq   0x0000000116b3a1ba
  0x0000000116b3a470: cmpq   $0x0,0x8(%rsi)
  0x0000000116b3a478: jne    0x0000000116b3a1c7
  0x0000000116b3a47e: add    $0x10,%rsi
  0x0000000116b3a482: cmp    %rbx,%rsi
  0x0000000116b3a485: jne    0x0000000116b3a470
  0x0000000116b3a487: cmpb   $0x0,-0x9d1d28c(%rip)        # 0x000000010ce1d202
  0x0000000116b3a48e: je     0x0000000116b3a54b
  0x0000000116b3a494: push   %rax
  0x0000000116b3a495: mov    -0x18(%rbp),%rsi
  0x0000000116b3a499: mov    %r15,%rdi
  0x0000000116b3a49c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3a4a4: je     0x0000000116b3a521
  0x0000000116b3a4aa: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a4af: sub    $0x80,%rsp
  0x0000000116b3a4b6: mov    %rax,0x78(%rsp)
  0x0000000116b3a4bb: mov    %rcx,0x70(%rsp)
  0x0000000116b3a4c0: mov    %rdx,0x68(%rsp)
  0x0000000116b3a4c5: mov    %rbx,0x60(%rsp)
  0x0000000116b3a4ca: mov    %rbp,0x50(%rsp)
  0x0000000116b3a4cf: mov    %rsi,0x48(%rsp)
  0x0000000116b3a4d4: mov    %rdi,0x40(%rsp)
  0x0000000116b3a4d9: mov    %r8,0x38(%rsp)
  0x0000000116b3a4de: mov    %r9,0x30(%rsp)
  0x0000000116b3a4e3: mov    %r10,0x28(%rsp)
  0x0000000116b3a4e8: mov    %r11,0x20(%rsp)
  0x0000000116b3a4ed: mov    %r12,0x18(%rsp)
  0x0000000116b3a4f2: mov    %r13,0x10(%rsp)
  0x0000000116b3a4f7: mov    %r14,0x8(%rsp)
  0x0000000116b3a4fc: mov    %r15,(%rsp)
  0x0000000116b3a500: movabs $0x10cc2363b,%rdi
  0x0000000116b3a50a: movabs $0x116b3a4aa,%rsi
  0x0000000116b3a514: mov    %rsp,%rdx
  0x0000000116b3a517: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a51b: callq  0x000000010c7dd830
  0x0000000116b3a520: hlt    
  0x0000000116b3a521: test   $0xf,%esp
  0x0000000116b3a527: je     0x0000000116b3a53f
  0x0000000116b3a52d: sub    $0x8,%rsp
  0x0000000116b3a531: callq  0x000000010c9c9850
  0x0000000116b3a536: add    $0x8,%rsp
  0x0000000116b3a53a: jmpq   0x0000000116b3a544
  0x0000000116b3a53f: callq  0x000000010c9c9850
  0x0000000116b3a544: mov    (%rsp),%eax
  0x0000000116b3a547: add    $0x8,%rsp
  0x0000000116b3a54b: mov    -0x8(%rbp),%rbx
  0x0000000116b3a54f: leaveq 
  0x0000000116b3a550: pop    %rsi
  0x0000000116b3a551: mov    %rbx,%rsp
  0x0000000116b3a554: jmpq   *%rsi
  0x0000000116b3a556: mov    -0x38(%rbp),%r13
  0x0000000116b3a55a: mov    -0x30(%rbp),%r14
  0x0000000116b3a55e: mov    -0x40(%rbp),%rsp
  0x0000000116b3a562: movq   $0x0,-0x10(%rbp)
  0x0000000116b3a56a: mov    0x630(%r15),%rcx
  0x0000000116b3a571: mov    0x88(%rcx),%rax
  0x0000000116b3a578: movl   $0xb,0x80(%rcx)
  0x0000000116b3a582: movl   $0x0,0x88(%rcx)
  0x0000000116b3a58c: mov    0x630(%r15),%rdx
  0x0000000116b3a593: movl   $0x0,0x7c(%rdx)
  0x0000000116b3a59a: mov    0x33d(%r15),%dl
  0x0000000116b3a5a1: movb   $0x0,0x33d(%r15)
  0x0000000116b3a5a9: mov    -0x18(%rbp),%rbx
  0x0000000116b3a5ad: mov    0x28(%rbx),%ecx
  0x0000000116b3a5b0: test   $0x20,%ecx
  0x0000000116b3a5b6: je     0x0000000116b3a88f
  0x0000000116b3a5bc: test   $0xff,%dl
  0x0000000116b3a5bf: jne    0x0000000116b3ab64
  0x0000000116b3a5c5: sub    $0x10,%rsp
  0x0000000116b3a5c9: mov    %rax,(%rsp)
  0x0000000116b3a5cd: lea    -0x50(%rbp),%rsi
  0x0000000116b3a5d1: mov    0x8(%rsi),%rax
  0x0000000116b3a5d5: test   %rax,%rax
  0x0000000116b3a5d8: jne    0x0000000116b3a5eb
  0x0000000116b3a5de: mov    (%rsp),%rax
  0x0000000116b3a5e2: add    $0x10,%rsp
  0x0000000116b3a5e6: jmpq   0x0000000116b3a88f
  0x0000000116b3a5eb: mov    %r13,-0x38(%rbp)
  0x0000000116b3a5ef: lea    (%rsi),%rax
  0x0000000116b3a5f2: mov    0x8(%rsi),%rcx
  0x0000000116b3a5f6: movq   $0x0,0x8(%rsi)
  0x0000000116b3a5fe: mov    (%rcx),%rdx
  0x0000000116b3a601: and    $0x7,%rdx
  0x0000000116b3a605: cmp    $0x5,%rdx
  0x0000000116b3a609: je     0x0000000116b3a883
  0x0000000116b3a60f: mov    (%rax),%rdx
  0x0000000116b3a612: test   %rdx,%rdx
  0x0000000116b3a615: je     0x0000000116b3a883
  0x0000000116b3a61b: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3a620: je     0x0000000116b3a883
  0x0000000116b3a626: mov    %rcx,0x8(%rsi)
  0x0000000116b3a62a: callq  0x0000000116b3a634
  0x0000000116b3a62f: jmpq   0x0000000116b3a883
  0x0000000116b3a634: lea    0x8(%rsp),%rax
  0x0000000116b3a639: mov    %r13,-0x38(%rbp)
  0x0000000116b3a63d: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3a645: je     0x0000000116b3a6c2
  0x0000000116b3a64b: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a650: sub    $0x80,%rsp
  0x0000000116b3a657: mov    %rax,0x78(%rsp)
  0x0000000116b3a65c: mov    %rcx,0x70(%rsp)
  0x0000000116b3a661: mov    %rdx,0x68(%rsp)
  0x0000000116b3a666: mov    %rbx,0x60(%rsp)
  0x0000000116b3a66b: mov    %rbp,0x50(%rsp)
  0x0000000116b3a670: mov    %rsi,0x48(%rsp)
  0x0000000116b3a675: mov    %rdi,0x40(%rsp)
  0x0000000116b3a67a: mov    %r8,0x38(%rsp)
  0x0000000116b3a67f: mov    %r9,0x30(%rsp)
  0x0000000116b3a684: mov    %r10,0x28(%rsp)
  0x0000000116b3a689: mov    %r11,0x20(%rsp)
  0x0000000116b3a68e: mov    %r12,0x18(%rsp)
  0x0000000116b3a693: mov    %r13,0x10(%rsp)
  0x0000000116b3a698: mov    %r14,0x8(%rsp)
  0x0000000116b3a69d: mov    %r15,(%rsp)
  0x0000000116b3a6a1: movabs $0x10cc2363b,%rdi
  0x0000000116b3a6ab: movabs $0x116b3a64b,%rsi
  0x0000000116b3a6b5: mov    %rsp,%rdx
  0x0000000116b3a6b8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a6bc: callq  0x000000010c7dd830
  0x0000000116b3a6c1: hlt    
  0x0000000116b3a6c2: push   %r10
  0x0000000116b3a6c4: cmp    -0x9cf3e1b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3a6cb: je     0x0000000116b3a748
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3a6d1: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a6d6: sub    $0x80,%rsp
  0x0000000116b3a6dd: mov    %rax,0x78(%rsp)
  0x0000000116b3a6e2: mov    %rcx,0x70(%rsp)
  0x0000000116b3a6e7: mov    %rdx,0x68(%rsp)
  0x0000000116b3a6ec: mov    %rbx,0x60(%rsp)
  0x0000000116b3a6f1: mov    %rbp,0x50(%rsp)
  0x0000000116b3a6f6: mov    %rsi,0x48(%rsp)
  0x0000000116b3a6fb: mov    %rdi,0x40(%rsp)
  0x0000000116b3a700: mov    %r8,0x38(%rsp)
  0x0000000116b3a705: mov    %r9,0x30(%rsp)
  0x0000000116b3a70a: mov    %r10,0x28(%rsp)
  0x0000000116b3a70f: mov    %r11,0x20(%rsp)
  0x0000000116b3a714: mov    %r12,0x18(%rsp)
  0x0000000116b3a719: mov    %r13,0x10(%rsp)
  0x0000000116b3a71e: mov    %r14,0x8(%rsp)
  0x0000000116b3a723: mov    %r15,(%rsp)
  0x0000000116b3a727: movabs $0x10cc63f17,%rdi
  0x0000000116b3a731: movabs $0x116b3a6d1,%rsi
  0x0000000116b3a73b: mov    %rsp,%rdx
  0x0000000116b3a73e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a742: callq  0x000000010c7dd830
  0x0000000116b3a747: hlt    
  0x0000000116b3a748: pop    %r10
  0x0000000116b3a74a: mov    %r15,%rdi
  0x0000000116b3a74d: mov    %rbp,0x290(%r15)
  0x0000000116b3a754: mov    %rax,0x280(%r15)
  0x0000000116b3a75b: test   $0xf,%esp
  0x0000000116b3a761: je     0x0000000116b3a779
  0x0000000116b3a767: sub    $0x8,%rsp
  0x0000000116b3a76b: callq  0x000000010c588f80
  0x0000000116b3a770: add    $0x8,%rsp
  0x0000000116b3a774: jmpq   0x0000000116b3a77e
  0x0000000116b3a779: callq  0x000000010c588f80
  0x0000000116b3a77e: push   %rax
  0x0000000116b3a77f: push   %rdi
  0x0000000116b3a780: push   %rsi
  0x0000000116b3a781: push   %rdx
  0x0000000116b3a782: push   %rcx
  0x0000000116b3a783: push   %r8
  0x0000000116b3a785: push   %r9
  0x0000000116b3a787: push   %r10
  0x0000000116b3a789: mov    %rsp,%r10
  0x0000000116b3a78c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a790: push   %r10
  0x0000000116b3a792: push   %r11
  0x0000000116b3a794: mov    $0x109,%edi
  0x0000000116b3a799: movabs $0x7ff815049fd5,%r10
  0x0000000116b3a7a3: callq  *%r10
  0x0000000116b3a7a6: pop    %r11
  0x0000000116b3a7a8: pop    %rsp
  0x0000000116b3a7a9: pop    %r10
  0x0000000116b3a7ab: pop    %r9
  0x0000000116b3a7ad: pop    %r8
  0x0000000116b3a7af: pop    %rcx
  0x0000000116b3a7b0: pop    %rdx
  0x0000000116b3a7b1: pop    %rsi
  0x0000000116b3a7b2: pop    %rdi
  0x0000000116b3a7b3: cmp    %rax,%r15
  0x0000000116b3a7b6: je     0x0000000116b3a833
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3a7bc: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a7c1: sub    $0x80,%rsp
  0x0000000116b3a7c8: mov    %rax,0x78(%rsp)
  0x0000000116b3a7cd: mov    %rcx,0x70(%rsp)
  0x0000000116b3a7d2: mov    %rdx,0x68(%rsp)
  0x0000000116b3a7d7: mov    %rbx,0x60(%rsp)
  0x0000000116b3a7dc: mov    %rbp,0x50(%rsp)
  0x0000000116b3a7e1: mov    %rsi,0x48(%rsp)
  0x0000000116b3a7e6: mov    %rdi,0x40(%rsp)
  0x0000000116b3a7eb: mov    %r8,0x38(%rsp)
  0x0000000116b3a7f0: mov    %r9,0x30(%rsp)
  0x0000000116b3a7f5: mov    %r10,0x28(%rsp)
  0x0000000116b3a7fa: mov    %r11,0x20(%rsp)
  0x0000000116b3a7ff: mov    %r12,0x18(%rsp)
  0x0000000116b3a804: mov    %r13,0x10(%rsp)
  0x0000000116b3a809: mov    %r14,0x8(%rsp)
  0x0000000116b3a80e: mov    %r15,(%rsp)
  0x0000000116b3a812: movabs $0x10cc6405e,%rdi
  0x0000000116b3a81c: movabs $0x116b3a7bc,%rsi
  0x0000000116b3a826: mov    %rsp,%rdx
  0x0000000116b3a829: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a82d: callq  0x000000010c7dd830
  0x0000000116b3a832: hlt    
  0x0000000116b3a833: pop    %rax
  0x0000000116b3a834: movabs $0x0,%r10
  0x0000000116b3a83e: mov    %r10,0x280(%r15)
  0x0000000116b3a845: movabs $0x0,%r10
  0x0000000116b3a84f: mov    %r10,0x290(%r15)
  0x0000000116b3a856: movabs $0x0,%r10
  0x0000000116b3a860: mov    %r10,0x288(%r15)
  0x0000000116b3a867: cmpq   $0x0,0x8(%r15)
  0x0000000116b3a86f: je     0x0000000116b3a87a
  0x0000000116b3a875: jmpq   0x0000000116b30420
  0x0000000116b3a87a: mov    -0x38(%rbp),%r13
  0x0000000116b3a87e: mov    -0x30(%rbp),%r14
  0x0000000116b3a882: retq   
  0x0000000116b3a883: mov    -0x38(%rbp),%r13
  0x0000000116b3a887: mov    (%rsp),%rax
  0x0000000116b3a88b: add    $0x10,%rsp
  0x0000000116b3a88f: mov    -0x40(%rbp),%rsi
  0x0000000116b3a893: lea    -0x40(%rbp),%rbx
  0x0000000116b3a897: jmpq   0x0000000116b3ab5f
  0x0000000116b3a89c: sub    $0x10,%rsp
  0x0000000116b3a8a0: mov    %rax,(%rsp)
  0x0000000116b3a8a4: mov    %r13,-0x38(%rbp)
  0x0000000116b3a8a8: lea    (%rsi),%rax
  0x0000000116b3a8ab: mov    0x8(%rsi),%rcx
  0x0000000116b3a8af: movq   $0x0,0x8(%rsi)
  0x0000000116b3a8b7: mov    (%rcx),%rdx
  0x0000000116b3a8ba: and    $0x7,%rdx
  0x0000000116b3a8be: cmp    $0x5,%rdx
  0x0000000116b3a8c2: je     0x0000000116b3ab3c
  0x0000000116b3a8c8: mov    (%rax),%rdx
  0x0000000116b3a8cb: test   %rdx,%rdx
  0x0000000116b3a8ce: je     0x0000000116b3ab3c
  0x0000000116b3a8d4: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3a8d9: je     0x0000000116b3ab3c
  0x0000000116b3a8df: mov    %rcx,0x8(%rsi)
  0x0000000116b3a8e3: callq  0x0000000116b3a8ed
  0x0000000116b3a8e8: jmpq   0x0000000116b3ab3c
  0x0000000116b3a8ed: lea    0x8(%rsp),%rax
  0x0000000116b3a8f2: mov    %r13,-0x38(%rbp)
  0x0000000116b3a8f6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3a8fe: je     0x0000000116b3a97b
  0x0000000116b3a904: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a909: sub    $0x80,%rsp
  0x0000000116b3a910: mov    %rax,0x78(%rsp)
  0x0000000116b3a915: mov    %rcx,0x70(%rsp)
  0x0000000116b3a91a: mov    %rdx,0x68(%rsp)
  0x0000000116b3a91f: mov    %rbx,0x60(%rsp)
  0x0000000116b3a924: mov    %rbp,0x50(%rsp)
  0x0000000116b3a929: mov    %rsi,0x48(%rsp)
  0x0000000116b3a92e: mov    %rdi,0x40(%rsp)
  0x0000000116b3a933: mov    %r8,0x38(%rsp)
  0x0000000116b3a938: mov    %r9,0x30(%rsp)
  0x0000000116b3a93d: mov    %r10,0x28(%rsp)
  0x0000000116b3a942: mov    %r11,0x20(%rsp)
  0x0000000116b3a947: mov    %r12,0x18(%rsp)
  0x0000000116b3a94c: mov    %r13,0x10(%rsp)
  0x0000000116b3a951: mov    %r14,0x8(%rsp)
  0x0000000116b3a956: mov    %r15,(%rsp)
  0x0000000116b3a95a: movabs $0x10cc2363b,%rdi
  0x0000000116b3a964: movabs $0x116b3a904,%rsi
  0x0000000116b3a96e: mov    %rsp,%rdx
  0x0000000116b3a971: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a975: callq  0x000000010c7dd830
  0x0000000116b3a97a: hlt    
  0x0000000116b3a97b: push   %r10
  0x0000000116b3a97d: cmp    -0x9cf40d4(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3a984: je     0x0000000116b3aa01
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3a98a: mov    %rsp,-0x28(%rsp)
  0x0000000116b3a98f: sub    $0x80,%rsp
  0x0000000116b3a996: mov    %rax,0x78(%rsp)
  0x0000000116b3a99b: mov    %rcx,0x70(%rsp)
  0x0000000116b3a9a0: mov    %rdx,0x68(%rsp)
  0x0000000116b3a9a5: mov    %rbx,0x60(%rsp)
  0x0000000116b3a9aa: mov    %rbp,0x50(%rsp)
  0x0000000116b3a9af: mov    %rsi,0x48(%rsp)
  0x0000000116b3a9b4: mov    %rdi,0x40(%rsp)
  0x0000000116b3a9b9: mov    %r8,0x38(%rsp)
  0x0000000116b3a9be: mov    %r9,0x30(%rsp)
  0x0000000116b3a9c3: mov    %r10,0x28(%rsp)
  0x0000000116b3a9c8: mov    %r11,0x20(%rsp)
  0x0000000116b3a9cd: mov    %r12,0x18(%rsp)
  0x0000000116b3a9d2: mov    %r13,0x10(%rsp)
  0x0000000116b3a9d7: mov    %r14,0x8(%rsp)
  0x0000000116b3a9dc: mov    %r15,(%rsp)
  0x0000000116b3a9e0: movabs $0x10cc63f17,%rdi
  0x0000000116b3a9ea: movabs $0x116b3a98a,%rsi
  0x0000000116b3a9f4: mov    %rsp,%rdx
  0x0000000116b3a9f7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3a9fb: callq  0x000000010c7dd830
  0x0000000116b3aa00: hlt    
  0x0000000116b3aa01: pop    %r10
  0x0000000116b3aa03: mov    %r15,%rdi
  0x0000000116b3aa06: mov    %rbp,0x290(%r15)
  0x0000000116b3aa0d: mov    %rax,0x280(%r15)
  0x0000000116b3aa14: test   $0xf,%esp
  0x0000000116b3aa1a: je     0x0000000116b3aa32
  0x0000000116b3aa20: sub    $0x8,%rsp
  0x0000000116b3aa24: callq  0x000000010c588f80
  0x0000000116b3aa29: add    $0x8,%rsp
  0x0000000116b3aa2d: jmpq   0x0000000116b3aa37
  0x0000000116b3aa32: callq  0x000000010c588f80
  0x0000000116b3aa37: push   %rax
  0x0000000116b3aa38: push   %rdi
  0x0000000116b3aa39: push   %rsi
  0x0000000116b3aa3a: push   %rdx
  0x0000000116b3aa3b: push   %rcx
  0x0000000116b3aa3c: push   %r8
  0x0000000116b3aa3e: push   %r9
  0x0000000116b3aa40: push   %r10
  0x0000000116b3aa42: mov    %rsp,%r10
  0x0000000116b3aa45: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3aa49: push   %r10
  0x0000000116b3aa4b: push   %r11
  0x0000000116b3aa4d: mov    $0x109,%edi
  0x0000000116b3aa52: movabs $0x7ff815049fd5,%r10
  0x0000000116b3aa5c: callq  *%r10
  0x0000000116b3aa5f: pop    %r11
  0x0000000116b3aa61: pop    %rsp
  0x0000000116b3aa62: pop    %r10
  0x0000000116b3aa64: pop    %r9
  0x0000000116b3aa66: pop    %r8
  0x0000000116b3aa68: pop    %rcx
  0x0000000116b3aa69: pop    %rdx
  0x0000000116b3aa6a: pop    %rsi
  0x0000000116b3aa6b: pop    %rdi
  0x0000000116b3aa6c: cmp    %rax,%r15
  0x0000000116b3aa6f: je     0x0000000116b3aaec
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3aa75: mov    %rsp,-0x28(%rsp)
  0x0000000116b3aa7a: sub    $0x80,%rsp
  0x0000000116b3aa81: mov    %rax,0x78(%rsp)
  0x0000000116b3aa86: mov    %rcx,0x70(%rsp)
  0x0000000116b3aa8b: mov    %rdx,0x68(%rsp)
  0x0000000116b3aa90: mov    %rbx,0x60(%rsp)
  0x0000000116b3aa95: mov    %rbp,0x50(%rsp)
  0x0000000116b3aa9a: mov    %rsi,0x48(%rsp)
  0x0000000116b3aa9f: mov    %rdi,0x40(%rsp)
  0x0000000116b3aaa4: mov    %r8,0x38(%rsp)
  0x0000000116b3aaa9: mov    %r9,0x30(%rsp)
  0x0000000116b3aaae: mov    %r10,0x28(%rsp)
  0x0000000116b3aab3: mov    %r11,0x20(%rsp)
  0x0000000116b3aab8: mov    %r12,0x18(%rsp)
  0x0000000116b3aabd: mov    %r13,0x10(%rsp)
  0x0000000116b3aac2: mov    %r14,0x8(%rsp)
  0x0000000116b3aac7: mov    %r15,(%rsp)
  0x0000000116b3aacb: movabs $0x10cc6405e,%rdi
  0x0000000116b3aad5: movabs $0x116b3aa75,%rsi
  0x0000000116b3aadf: mov    %rsp,%rdx
  0x0000000116b3aae2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3aae6: callq  0x000000010c7dd830
  0x0000000116b3aaeb: hlt    
  0x0000000116b3aaec: pop    %rax
  0x0000000116b3aaed: movabs $0x0,%r10
  0x0000000116b3aaf7: mov    %r10,0x280(%r15)
  0x0000000116b3aafe: movabs $0x0,%r10
  0x0000000116b3ab08: mov    %r10,0x290(%r15)
  0x0000000116b3ab0f: movabs $0x0,%r10
  0x0000000116b3ab19: mov    %r10,0x288(%r15)
  0x0000000116b3ab20: cmpq   $0x0,0x8(%r15)
  0x0000000116b3ab28: je     0x0000000116b3ab33
  0x0000000116b3ab2e: jmpq   0x0000000116b30420
  0x0000000116b3ab33: mov    -0x38(%rbp),%r13
  0x0000000116b3ab37: mov    -0x30(%rbp),%r14
  0x0000000116b3ab3b: retq   
  0x0000000116b3ab3c: mov    -0x38(%rbp),%r13
  0x0000000116b3ab40: mov    (%rsp),%rax
  0x0000000116b3ab44: add    $0x10,%rsp
  0x0000000116b3ab48: jmpq   0x0000000116b3a88f
  0x0000000116b3ab4d: cmpq   $0x0,0x8(%rsi)
  0x0000000116b3ab55: jne    0x0000000116b3a89c
  0x0000000116b3ab5b: add    $0x10,%rsi
  0x0000000116b3ab5f: cmp    %rbx,%rsi
  0x0000000116b3ab62: jne    0x0000000116b3ab4d
  0x0000000116b3ab64: cmpb   $0x0,-0x9d1d969(%rip)        # 0x000000010ce1d202
  0x0000000116b3ab6b: je     0x0000000116b3ac30
  0x0000000116b3ab71: sub    $0x10,%rsp
  0x0000000116b3ab75: mov    %rax,(%rsp)
  0x0000000116b3ab79: mov    -0x18(%rbp),%rsi
  0x0000000116b3ab7d: mov    %r15,%rdi
  0x0000000116b3ab80: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3ab88: je     0x0000000116b3ac05
  0x0000000116b3ab8e: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ab93: sub    $0x80,%rsp
  0x0000000116b3ab9a: mov    %rax,0x78(%rsp)
  0x0000000116b3ab9f: mov    %rcx,0x70(%rsp)
  0x0000000116b3aba4: mov    %rdx,0x68(%rsp)
  0x0000000116b3aba9: mov    %rbx,0x60(%rsp)
  0x0000000116b3abae: mov    %rbp,0x50(%rsp)
  0x0000000116b3abb3: mov    %rsi,0x48(%rsp)
  0x0000000116b3abb8: mov    %rdi,0x40(%rsp)
  0x0000000116b3abbd: mov    %r8,0x38(%rsp)
  0x0000000116b3abc2: mov    %r9,0x30(%rsp)
  0x0000000116b3abc7: mov    %r10,0x28(%rsp)
  0x0000000116b3abcc: mov    %r11,0x20(%rsp)
  0x0000000116b3abd1: mov    %r12,0x18(%rsp)
  0x0000000116b3abd6: mov    %r13,0x10(%rsp)
  0x0000000116b3abdb: mov    %r14,0x8(%rsp)
  0x0000000116b3abe0: mov    %r15,(%rsp)
  0x0000000116b3abe4: movabs $0x10cc2363b,%rdi
  0x0000000116b3abee: movabs $0x116b3ab8e,%rsi
  0x0000000116b3abf8: mov    %rsp,%rdx
  0x0000000116b3abfb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3abff: callq  0x000000010c7dd830
  0x0000000116b3ac04: hlt    
  0x0000000116b3ac05: test   $0xf,%esp
  0x0000000116b3ac0b: je     0x0000000116b3ac23
  0x0000000116b3ac11: sub    $0x8,%rsp
  0x0000000116b3ac15: callq  0x000000010c9c9850
  0x0000000116b3ac1a: add    $0x8,%rsp
  0x0000000116b3ac1e: jmpq   0x0000000116b3ac28
  0x0000000116b3ac23: callq  0x000000010c9c9850
  0x0000000116b3ac28: mov    (%rsp),%rax
  0x0000000116b3ac2c: add    $0x10,%rsp
  0x0000000116b3ac30: mov    -0x8(%rbp),%rbx
  0x0000000116b3ac34: leaveq 
  0x0000000116b3ac35: pop    %rsi
  0x0000000116b3ac36: mov    %rbx,%rsp
  0x0000000116b3ac39: jmpq   *%rsi
  0x0000000116b3ac3b: mov    -0x38(%rbp),%r13
  0x0000000116b3ac3f: mov    -0x30(%rbp),%r14
  0x0000000116b3ac43: mov    -0x40(%rbp),%rsp
  0x0000000116b3ac47: movq   $0x0,-0x10(%rbp)
  0x0000000116b3ac4f: mov    0x630(%r15),%rcx
  0x0000000116b3ac56: vmovss 0x88(%rcx),%xmm0
  0x0000000116b3ac5e: movl   $0xb,0x80(%rcx)
  0x0000000116b3ac68: movl   $0x0,0x88(%rcx)
  0x0000000116b3ac72: mov    0x630(%r15),%rdx
  0x0000000116b3ac79: movl   $0x0,0x7c(%rdx)
  0x0000000116b3ac80: mov    0x33d(%r15),%dl
  0x0000000116b3ac87: movb   $0x0,0x33d(%r15)
  0x0000000116b3ac8f: mov    -0x18(%rbp),%rbx
  0x0000000116b3ac93: mov    0x28(%rbx),%ecx
  0x0000000116b3ac96: test   $0x20,%ecx
  0x0000000116b3ac9c: je     0x0000000116b3af78
  0x0000000116b3aca2: test   $0xff,%dl
  0x0000000116b3aca5: jne    0x0000000116b3b24f
  0x0000000116b3acab: sub    $0x8,%rsp
  0x0000000116b3acaf: vmovss %xmm0,(%rsp)
  0x0000000116b3acb4: lea    -0x50(%rbp),%rsi
  0x0000000116b3acb8: mov    0x8(%rsi),%rax
  0x0000000116b3acbc: test   %rax,%rax
  0x0000000116b3acbf: jne    0x0000000116b3acd3
  0x0000000116b3acc5: vmovss (%rsp),%xmm0
  0x0000000116b3acca: add    $0x8,%rsp
  0x0000000116b3acce: jmpq   0x0000000116b3af78
  0x0000000116b3acd3: mov    %r13,-0x38(%rbp)
  0x0000000116b3acd7: lea    (%rsi),%rax
  0x0000000116b3acda: mov    0x8(%rsi),%rcx
  0x0000000116b3acde: movq   $0x0,0x8(%rsi)
  0x0000000116b3ace6: mov    (%rcx),%rdx
  0x0000000116b3ace9: and    $0x7,%rdx
  0x0000000116b3aced: cmp    $0x5,%rdx
  0x0000000116b3acf1: je     0x0000000116b3af6b
  0x0000000116b3acf7: mov    (%rax),%rdx
  0x0000000116b3acfa: test   %rdx,%rdx
  0x0000000116b3acfd: je     0x0000000116b3af6b
  0x0000000116b3ad03: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3ad08: je     0x0000000116b3af6b
  0x0000000116b3ad0e: mov    %rcx,0x8(%rsi)
  0x0000000116b3ad12: callq  0x0000000116b3ad1c
  0x0000000116b3ad17: jmpq   0x0000000116b3af6b
  0x0000000116b3ad1c: lea    0x8(%rsp),%rax
  0x0000000116b3ad21: mov    %r13,-0x38(%rbp)
  0x0000000116b3ad25: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3ad2d: je     0x0000000116b3adaa
  0x0000000116b3ad33: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ad38: sub    $0x80,%rsp
  0x0000000116b3ad3f: mov    %rax,0x78(%rsp)
  0x0000000116b3ad44: mov    %rcx,0x70(%rsp)
  0x0000000116b3ad49: mov    %rdx,0x68(%rsp)
  0x0000000116b3ad4e: mov    %rbx,0x60(%rsp)
  0x0000000116b3ad53: mov    %rbp,0x50(%rsp)
  0x0000000116b3ad58: mov    %rsi,0x48(%rsp)
  0x0000000116b3ad5d: mov    %rdi,0x40(%rsp)
  0x0000000116b3ad62: mov    %r8,0x38(%rsp)
  0x0000000116b3ad67: mov    %r9,0x30(%rsp)
  0x0000000116b3ad6c: mov    %r10,0x28(%rsp)
  0x0000000116b3ad71: mov    %r11,0x20(%rsp)
  0x0000000116b3ad76: mov    %r12,0x18(%rsp)
  0x0000000116b3ad7b: mov    %r13,0x10(%rsp)
  0x0000000116b3ad80: mov    %r14,0x8(%rsp)
  0x0000000116b3ad85: mov    %r15,(%rsp)
  0x0000000116b3ad89: movabs $0x10cc2363b,%rdi
  0x0000000116b3ad93: movabs $0x116b3ad33,%rsi
  0x0000000116b3ad9d: mov    %rsp,%rdx
  0x0000000116b3ada0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ada4: callq  0x000000010c7dd830
  0x0000000116b3ada9: hlt    
  0x0000000116b3adaa: push   %r10
  0x0000000116b3adac: cmp    -0x9cf4503(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3adb3: je     0x0000000116b3ae30
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3adb9: mov    %rsp,-0x28(%rsp)
  0x0000000116b3adbe: sub    $0x80,%rsp
  0x0000000116b3adc5: mov    %rax,0x78(%rsp)
  0x0000000116b3adca: mov    %rcx,0x70(%rsp)
  0x0000000116b3adcf: mov    %rdx,0x68(%rsp)
  0x0000000116b3add4: mov    %rbx,0x60(%rsp)
  0x0000000116b3add9: mov    %rbp,0x50(%rsp)
  0x0000000116b3adde: mov    %rsi,0x48(%rsp)
  0x0000000116b3ade3: mov    %rdi,0x40(%rsp)
  0x0000000116b3ade8: mov    %r8,0x38(%rsp)
  0x0000000116b3aded: mov    %r9,0x30(%rsp)
  0x0000000116b3adf2: mov    %r10,0x28(%rsp)
  0x0000000116b3adf7: mov    %r11,0x20(%rsp)
  0x0000000116b3adfc: mov    %r12,0x18(%rsp)
  0x0000000116b3ae01: mov    %r13,0x10(%rsp)
  0x0000000116b3ae06: mov    %r14,0x8(%rsp)
  0x0000000116b3ae0b: mov    %r15,(%rsp)
  0x0000000116b3ae0f: movabs $0x10cc63f17,%rdi
  0x0000000116b3ae19: movabs $0x116b3adb9,%rsi
  0x0000000116b3ae23: mov    %rsp,%rdx
  0x0000000116b3ae26: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ae2a: callq  0x000000010c7dd830
  0x0000000116b3ae2f: hlt    
  0x0000000116b3ae30: pop    %r10
  0x0000000116b3ae32: mov    %r15,%rdi
  0x0000000116b3ae35: mov    %rbp,0x290(%r15)
  0x0000000116b3ae3c: mov    %rax,0x280(%r15)
  0x0000000116b3ae43: test   $0xf,%esp
  0x0000000116b3ae49: je     0x0000000116b3ae61
  0x0000000116b3ae4f: sub    $0x8,%rsp
  0x0000000116b3ae53: callq  0x000000010c588f80
  0x0000000116b3ae58: add    $0x8,%rsp
  0x0000000116b3ae5c: jmpq   0x0000000116b3ae66
  0x0000000116b3ae61: callq  0x000000010c588f80
  0x0000000116b3ae66: push   %rax
  0x0000000116b3ae67: push   %rdi
  0x0000000116b3ae68: push   %rsi
  0x0000000116b3ae69: push   %rdx
  0x0000000116b3ae6a: push   %rcx
  0x0000000116b3ae6b: push   %r8
  0x0000000116b3ae6d: push   %r9
  0x0000000116b3ae6f: push   %r10
  0x0000000116b3ae71: mov    %rsp,%r10
  0x0000000116b3ae74: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ae78: push   %r10
  0x0000000116b3ae7a: push   %r11
  0x0000000116b3ae7c: mov    $0x109,%edi
  0x0000000116b3ae81: movabs $0x7ff815049fd5,%r10
  0x0000000116b3ae8b: callq  *%r10
  0x0000000116b3ae8e: pop    %r11
  0x0000000116b3ae90: pop    %rsp
  0x0000000116b3ae91: pop    %r10
  0x0000000116b3ae93: pop    %r9
  0x0000000116b3ae95: pop    %r8
  0x0000000116b3ae97: pop    %rcx
  0x0000000116b3ae98: pop    %rdx
  0x0000000116b3ae99: pop    %rsi
  0x0000000116b3ae9a: pop    %rdi
  0x0000000116b3ae9b: cmp    %rax,%r15
  0x0000000116b3ae9e: je     0x0000000116b3af1b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3aea4: mov    %rsp,-0x28(%rsp)
  0x0000000116b3aea9: sub    $0x80,%rsp
  0x0000000116b3aeb0: mov    %rax,0x78(%rsp)
  0x0000000116b3aeb5: mov    %rcx,0x70(%rsp)
  0x0000000116b3aeba: mov    %rdx,0x68(%rsp)
  0x0000000116b3aebf: mov    %rbx,0x60(%rsp)
  0x0000000116b3aec4: mov    %rbp,0x50(%rsp)
  0x0000000116b3aec9: mov    %rsi,0x48(%rsp)
  0x0000000116b3aece: mov    %rdi,0x40(%rsp)
  0x0000000116b3aed3: mov    %r8,0x38(%rsp)
  0x0000000116b3aed8: mov    %r9,0x30(%rsp)
  0x0000000116b3aedd: mov    %r10,0x28(%rsp)
  0x0000000116b3aee2: mov    %r11,0x20(%rsp)
  0x0000000116b3aee7: mov    %r12,0x18(%rsp)
  0x0000000116b3aeec: mov    %r13,0x10(%rsp)
  0x0000000116b3aef1: mov    %r14,0x8(%rsp)
  0x0000000116b3aef6: mov    %r15,(%rsp)
  0x0000000116b3aefa: movabs $0x10cc6405e,%rdi
  0x0000000116b3af04: movabs $0x116b3aea4,%rsi
  0x0000000116b3af0e: mov    %rsp,%rdx
  0x0000000116b3af11: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3af15: callq  0x000000010c7dd830
  0x0000000116b3af1a: hlt    
  0x0000000116b3af1b: pop    %rax
  0x0000000116b3af1c: movabs $0x0,%r10
  0x0000000116b3af26: mov    %r10,0x280(%r15)
  0x0000000116b3af2d: movabs $0x0,%r10
  0x0000000116b3af37: mov    %r10,0x290(%r15)
  0x0000000116b3af3e: movabs $0x0,%r10
  0x0000000116b3af48: mov    %r10,0x288(%r15)
  0x0000000116b3af4f: cmpq   $0x0,0x8(%r15)
  0x0000000116b3af57: je     0x0000000116b3af62
  0x0000000116b3af5d: jmpq   0x0000000116b30420
  0x0000000116b3af62: mov    -0x38(%rbp),%r13
  0x0000000116b3af66: mov    -0x30(%rbp),%r14
  0x0000000116b3af6a: retq   
  0x0000000116b3af6b: mov    -0x38(%rbp),%r13
  0x0000000116b3af6f: vmovss (%rsp),%xmm0
  0x0000000116b3af74: add    $0x8,%rsp
  0x0000000116b3af78: mov    -0x40(%rbp),%rsi
  0x0000000116b3af7c: lea    -0x40(%rbp),%rbx
  0x0000000116b3af80: jmpq   0x0000000116b3b24a
  0x0000000116b3af85: sub    $0x8,%rsp
  0x0000000116b3af89: vmovss %xmm0,(%rsp)
  0x0000000116b3af8e: mov    %r13,-0x38(%rbp)
  0x0000000116b3af92: lea    (%rsi),%rax
  0x0000000116b3af95: mov    0x8(%rsi),%rcx
  0x0000000116b3af99: movq   $0x0,0x8(%rsi)
  0x0000000116b3afa1: mov    (%rcx),%rdx
  0x0000000116b3afa4: and    $0x7,%rdx
  0x0000000116b3afa8: cmp    $0x5,%rdx
  0x0000000116b3afac: je     0x0000000116b3b226
  0x0000000116b3afb2: mov    (%rax),%rdx
  0x0000000116b3afb5: test   %rdx,%rdx
  0x0000000116b3afb8: je     0x0000000116b3b226
  0x0000000116b3afbe: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3afc3: je     0x0000000116b3b226
  0x0000000116b3afc9: mov    %rcx,0x8(%rsi)
  0x0000000116b3afcd: callq  0x0000000116b3afd7
  0x0000000116b3afd2: jmpq   0x0000000116b3b226
  0x0000000116b3afd7: lea    0x8(%rsp),%rax
  0x0000000116b3afdc: mov    %r13,-0x38(%rbp)
  0x0000000116b3afe0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3afe8: je     0x0000000116b3b065
  0x0000000116b3afee: mov    %rsp,-0x28(%rsp)
  0x0000000116b3aff3: sub    $0x80,%rsp
  0x0000000116b3affa: mov    %rax,0x78(%rsp)
  0x0000000116b3afff: mov    %rcx,0x70(%rsp)
  0x0000000116b3b004: mov    %rdx,0x68(%rsp)
  0x0000000116b3b009: mov    %rbx,0x60(%rsp)
  0x0000000116b3b00e: mov    %rbp,0x50(%rsp)
  0x0000000116b3b013: mov    %rsi,0x48(%rsp)
  0x0000000116b3b018: mov    %rdi,0x40(%rsp)
  0x0000000116b3b01d: mov    %r8,0x38(%rsp)
  0x0000000116b3b022: mov    %r9,0x30(%rsp)
  0x0000000116b3b027: mov    %r10,0x28(%rsp)
  0x0000000116b3b02c: mov    %r11,0x20(%rsp)
  0x0000000116b3b031: mov    %r12,0x18(%rsp)
  0x0000000116b3b036: mov    %r13,0x10(%rsp)
  0x0000000116b3b03b: mov    %r14,0x8(%rsp)
  0x0000000116b3b040: mov    %r15,(%rsp)
  0x0000000116b3b044: movabs $0x10cc2363b,%rdi
  0x0000000116b3b04e: movabs $0x116b3afee,%rsi
  0x0000000116b3b058: mov    %rsp,%rdx
  0x0000000116b3b05b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b05f: callq  0x000000010c7dd830
  0x0000000116b3b064: hlt    
  0x0000000116b3b065: push   %r10
  0x0000000116b3b067: cmp    -0x9cf47be(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3b06e: je     0x0000000116b3b0eb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3b074: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b079: sub    $0x80,%rsp
  0x0000000116b3b080: mov    %rax,0x78(%rsp)
  0x0000000116b3b085: mov    %rcx,0x70(%rsp)
  0x0000000116b3b08a: mov    %rdx,0x68(%rsp)
  0x0000000116b3b08f: mov    %rbx,0x60(%rsp)
  0x0000000116b3b094: mov    %rbp,0x50(%rsp)
  0x0000000116b3b099: mov    %rsi,0x48(%rsp)
  0x0000000116b3b09e: mov    %rdi,0x40(%rsp)
  0x0000000116b3b0a3: mov    %r8,0x38(%rsp)
  0x0000000116b3b0a8: mov    %r9,0x30(%rsp)
  0x0000000116b3b0ad: mov    %r10,0x28(%rsp)
  0x0000000116b3b0b2: mov    %r11,0x20(%rsp)
  0x0000000116b3b0b7: mov    %r12,0x18(%rsp)
  0x0000000116b3b0bc: mov    %r13,0x10(%rsp)
  0x0000000116b3b0c1: mov    %r14,0x8(%rsp)
  0x0000000116b3b0c6: mov    %r15,(%rsp)
  0x0000000116b3b0ca: movabs $0x10cc63f17,%rdi
  0x0000000116b3b0d4: movabs $0x116b3b074,%rsi
  0x0000000116b3b0de: mov    %rsp,%rdx
  0x0000000116b3b0e1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b0e5: callq  0x000000010c7dd830
  0x0000000116b3b0ea: hlt    
  0x0000000116b3b0eb: pop    %r10
  0x0000000116b3b0ed: mov    %r15,%rdi
  0x0000000116b3b0f0: mov    %rbp,0x290(%r15)
  0x0000000116b3b0f7: mov    %rax,0x280(%r15)
  0x0000000116b3b0fe: test   $0xf,%esp
  0x0000000116b3b104: je     0x0000000116b3b11c
  0x0000000116b3b10a: sub    $0x8,%rsp
  0x0000000116b3b10e: callq  0x000000010c588f80
  0x0000000116b3b113: add    $0x8,%rsp
  0x0000000116b3b117: jmpq   0x0000000116b3b121
  0x0000000116b3b11c: callq  0x000000010c588f80
  0x0000000116b3b121: push   %rax
  0x0000000116b3b122: push   %rdi
  0x0000000116b3b123: push   %rsi
  0x0000000116b3b124: push   %rdx
  0x0000000116b3b125: push   %rcx
  0x0000000116b3b126: push   %r8
  0x0000000116b3b128: push   %r9
  0x0000000116b3b12a: push   %r10
  0x0000000116b3b12c: mov    %rsp,%r10
  0x0000000116b3b12f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b133: push   %r10
  0x0000000116b3b135: push   %r11
  0x0000000116b3b137: mov    $0x109,%edi
  0x0000000116b3b13c: movabs $0x7ff815049fd5,%r10
  0x0000000116b3b146: callq  *%r10
  0x0000000116b3b149: pop    %r11
  0x0000000116b3b14b: pop    %rsp
  0x0000000116b3b14c: pop    %r10
  0x0000000116b3b14e: pop    %r9
  0x0000000116b3b150: pop    %r8
  0x0000000116b3b152: pop    %rcx
  0x0000000116b3b153: pop    %rdx
  0x0000000116b3b154: pop    %rsi
  0x0000000116b3b155: pop    %rdi
  0x0000000116b3b156: cmp    %rax,%r15
  0x0000000116b3b159: je     0x0000000116b3b1d6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3b15f: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b164: sub    $0x80,%rsp
  0x0000000116b3b16b: mov    %rax,0x78(%rsp)
  0x0000000116b3b170: mov    %rcx,0x70(%rsp)
  0x0000000116b3b175: mov    %rdx,0x68(%rsp)
  0x0000000116b3b17a: mov    %rbx,0x60(%rsp)
  0x0000000116b3b17f: mov    %rbp,0x50(%rsp)
  0x0000000116b3b184: mov    %rsi,0x48(%rsp)
  0x0000000116b3b189: mov    %rdi,0x40(%rsp)
  0x0000000116b3b18e: mov    %r8,0x38(%rsp)
  0x0000000116b3b193: mov    %r9,0x30(%rsp)
  0x0000000116b3b198: mov    %r10,0x28(%rsp)
  0x0000000116b3b19d: mov    %r11,0x20(%rsp)
  0x0000000116b3b1a2: mov    %r12,0x18(%rsp)
  0x0000000116b3b1a7: mov    %r13,0x10(%rsp)
  0x0000000116b3b1ac: mov    %r14,0x8(%rsp)
  0x0000000116b3b1b1: mov    %r15,(%rsp)
  0x0000000116b3b1b5: movabs $0x10cc6405e,%rdi
  0x0000000116b3b1bf: movabs $0x116b3b15f,%rsi
  0x0000000116b3b1c9: mov    %rsp,%rdx
  0x0000000116b3b1cc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b1d0: callq  0x000000010c7dd830
  0x0000000116b3b1d5: hlt    
  0x0000000116b3b1d6: pop    %rax
  0x0000000116b3b1d7: movabs $0x0,%r10
  0x0000000116b3b1e1: mov    %r10,0x280(%r15)
  0x0000000116b3b1e8: movabs $0x0,%r10
  0x0000000116b3b1f2: mov    %r10,0x290(%r15)
  0x0000000116b3b1f9: movabs $0x0,%r10
  0x0000000116b3b203: mov    %r10,0x288(%r15)
  0x0000000116b3b20a: cmpq   $0x0,0x8(%r15)
  0x0000000116b3b212: je     0x0000000116b3b21d
  0x0000000116b3b218: jmpq   0x0000000116b30420
  0x0000000116b3b21d: mov    -0x38(%rbp),%r13
  0x0000000116b3b221: mov    -0x30(%rbp),%r14
  0x0000000116b3b225: retq   
  0x0000000116b3b226: mov    -0x38(%rbp),%r13
  0x0000000116b3b22a: vmovss (%rsp),%xmm0
  0x0000000116b3b22f: add    $0x8,%rsp
  0x0000000116b3b233: jmpq   0x0000000116b3af78
  0x0000000116b3b238: cmpq   $0x0,0x8(%rsi)
  0x0000000116b3b240: jne    0x0000000116b3af85
  0x0000000116b3b246: add    $0x10,%rsi
  0x0000000116b3b24a: cmp    %rbx,%rsi
  0x0000000116b3b24d: jne    0x0000000116b3b238
  0x0000000116b3b24f: cmpb   $0x0,-0x9d1e054(%rip)        # 0x000000010ce1d202
  0x0000000116b3b256: je     0x0000000116b3b31d
  0x0000000116b3b25c: sub    $0x8,%rsp
  0x0000000116b3b260: vmovss %xmm0,(%rsp)
  0x0000000116b3b265: mov    -0x18(%rbp),%rsi
  0x0000000116b3b269: mov    %r15,%rdi
  0x0000000116b3b26c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3b274: je     0x0000000116b3b2f1
  0x0000000116b3b27a: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b27f: sub    $0x80,%rsp
  0x0000000116b3b286: mov    %rax,0x78(%rsp)
  0x0000000116b3b28b: mov    %rcx,0x70(%rsp)
  0x0000000116b3b290: mov    %rdx,0x68(%rsp)
  0x0000000116b3b295: mov    %rbx,0x60(%rsp)
  0x0000000116b3b29a: mov    %rbp,0x50(%rsp)
  0x0000000116b3b29f: mov    %rsi,0x48(%rsp)
  0x0000000116b3b2a4: mov    %rdi,0x40(%rsp)
  0x0000000116b3b2a9: mov    %r8,0x38(%rsp)
  0x0000000116b3b2ae: mov    %r9,0x30(%rsp)
  0x0000000116b3b2b3: mov    %r10,0x28(%rsp)
  0x0000000116b3b2b8: mov    %r11,0x20(%rsp)
  0x0000000116b3b2bd: mov    %r12,0x18(%rsp)
  0x0000000116b3b2c2: mov    %r13,0x10(%rsp)
  0x0000000116b3b2c7: mov    %r14,0x8(%rsp)
  0x0000000116b3b2cc: mov    %r15,(%rsp)
  0x0000000116b3b2d0: movabs $0x10cc2363b,%rdi
  0x0000000116b3b2da: movabs $0x116b3b27a,%rsi
  0x0000000116b3b2e4: mov    %rsp,%rdx
  0x0000000116b3b2e7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b2eb: callq  0x000000010c7dd830
  0x0000000116b3b2f0: hlt    
  0x0000000116b3b2f1: test   $0xf,%esp
  0x0000000116b3b2f7: je     0x0000000116b3b30f
  0x0000000116b3b2fd: sub    $0x8,%rsp
  0x0000000116b3b301: callq  0x000000010c9c9850
  0x0000000116b3b306: add    $0x8,%rsp
  0x0000000116b3b30a: jmpq   0x0000000116b3b314
  0x0000000116b3b30f: callq  0x000000010c9c9850
  0x0000000116b3b314: vmovss (%rsp),%xmm0
  0x0000000116b3b319: add    $0x8,%rsp
  0x0000000116b3b31d: mov    -0x8(%rbp),%rbx
  0x0000000116b3b321: leaveq 
  0x0000000116b3b322: pop    %rsi
  0x0000000116b3b323: mov    %rbx,%rsp
  0x0000000116b3b326: jmpq   *%rsi
  0x0000000116b3b328: mov    -0x38(%rbp),%r13
  0x0000000116b3b32c: mov    -0x30(%rbp),%r14
  0x0000000116b3b330: mov    -0x40(%rbp),%rsp
  0x0000000116b3b334: movq   $0x0,-0x10(%rbp)
  0x0000000116b3b33c: mov    0x630(%r15),%rcx
  0x0000000116b3b343: vmovsd 0x88(%rcx),%xmm0
  0x0000000116b3b34b: movl   $0xb,0x80(%rcx)
  0x0000000116b3b355: movl   $0x0,0x88(%rcx)
  0x0000000116b3b35f: mov    0x630(%r15),%rdx
  0x0000000116b3b366: movl   $0x0,0x7c(%rdx)
  0x0000000116b3b36d: mov    0x33d(%r15),%dl
  0x0000000116b3b374: movb   $0x0,0x33d(%r15)
  0x0000000116b3b37c: mov    -0x18(%rbp),%rbx
  0x0000000116b3b380: mov    0x28(%rbx),%ecx
  0x0000000116b3b383: test   $0x20,%ecx
  0x0000000116b3b389: je     0x0000000116b3b665
  0x0000000116b3b38f: test   $0xff,%dl
  0x0000000116b3b392: jne    0x0000000116b3b93c
  0x0000000116b3b398: sub    $0x10,%rsp
  0x0000000116b3b39c: vmovsd %xmm0,(%rsp)
  0x0000000116b3b3a1: lea    -0x50(%rbp),%rsi
  0x0000000116b3b3a5: mov    0x8(%rsi),%rax
  0x0000000116b3b3a9: test   %rax,%rax
  0x0000000116b3b3ac: jne    0x0000000116b3b3c0
  0x0000000116b3b3b2: vmovsd (%rsp),%xmm0
  0x0000000116b3b3b7: add    $0x10,%rsp
  0x0000000116b3b3bb: jmpq   0x0000000116b3b665
  0x0000000116b3b3c0: mov    %r13,-0x38(%rbp)
  0x0000000116b3b3c4: lea    (%rsi),%rax
  0x0000000116b3b3c7: mov    0x8(%rsi),%rcx
  0x0000000116b3b3cb: movq   $0x0,0x8(%rsi)
  0x0000000116b3b3d3: mov    (%rcx),%rdx
  0x0000000116b3b3d6: and    $0x7,%rdx
  0x0000000116b3b3da: cmp    $0x5,%rdx
  0x0000000116b3b3de: je     0x0000000116b3b658
  0x0000000116b3b3e4: mov    (%rax),%rdx
  0x0000000116b3b3e7: test   %rdx,%rdx
  0x0000000116b3b3ea: je     0x0000000116b3b658
  0x0000000116b3b3f0: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3b3f5: je     0x0000000116b3b658
  0x0000000116b3b3fb: mov    %rcx,0x8(%rsi)
  0x0000000116b3b3ff: callq  0x0000000116b3b409
  0x0000000116b3b404: jmpq   0x0000000116b3b658
  0x0000000116b3b409: lea    0x8(%rsp),%rax
  0x0000000116b3b40e: mov    %r13,-0x38(%rbp)
  0x0000000116b3b412: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3b41a: je     0x0000000116b3b497
  0x0000000116b3b420: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b425: sub    $0x80,%rsp
  0x0000000116b3b42c: mov    %rax,0x78(%rsp)
  0x0000000116b3b431: mov    %rcx,0x70(%rsp)
  0x0000000116b3b436: mov    %rdx,0x68(%rsp)
  0x0000000116b3b43b: mov    %rbx,0x60(%rsp)
  0x0000000116b3b440: mov    %rbp,0x50(%rsp)
  0x0000000116b3b445: mov    %rsi,0x48(%rsp)
  0x0000000116b3b44a: mov    %rdi,0x40(%rsp)
  0x0000000116b3b44f: mov    %r8,0x38(%rsp)
  0x0000000116b3b454: mov    %r9,0x30(%rsp)
  0x0000000116b3b459: mov    %r10,0x28(%rsp)
  0x0000000116b3b45e: mov    %r11,0x20(%rsp)
  0x0000000116b3b463: mov    %r12,0x18(%rsp)
  0x0000000116b3b468: mov    %r13,0x10(%rsp)
  0x0000000116b3b46d: mov    %r14,0x8(%rsp)
  0x0000000116b3b472: mov    %r15,(%rsp)
  0x0000000116b3b476: movabs $0x10cc2363b,%rdi
  0x0000000116b3b480: movabs $0x116b3b420,%rsi
  0x0000000116b3b48a: mov    %rsp,%rdx
  0x0000000116b3b48d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b491: callq  0x000000010c7dd830
  0x0000000116b3b496: hlt    
  0x0000000116b3b497: push   %r10
  0x0000000116b3b499: cmp    -0x9cf4bf0(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3b4a0: je     0x0000000116b3b51d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3b4a6: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b4ab: sub    $0x80,%rsp
  0x0000000116b3b4b2: mov    %rax,0x78(%rsp)
  0x0000000116b3b4b7: mov    %rcx,0x70(%rsp)
  0x0000000116b3b4bc: mov    %rdx,0x68(%rsp)
  0x0000000116b3b4c1: mov    %rbx,0x60(%rsp)
  0x0000000116b3b4c6: mov    %rbp,0x50(%rsp)
  0x0000000116b3b4cb: mov    %rsi,0x48(%rsp)
  0x0000000116b3b4d0: mov    %rdi,0x40(%rsp)
  0x0000000116b3b4d5: mov    %r8,0x38(%rsp)
  0x0000000116b3b4da: mov    %r9,0x30(%rsp)
  0x0000000116b3b4df: mov    %r10,0x28(%rsp)
  0x0000000116b3b4e4: mov    %r11,0x20(%rsp)
  0x0000000116b3b4e9: mov    %r12,0x18(%rsp)
  0x0000000116b3b4ee: mov    %r13,0x10(%rsp)
  0x0000000116b3b4f3: mov    %r14,0x8(%rsp)
  0x0000000116b3b4f8: mov    %r15,(%rsp)
  0x0000000116b3b4fc: movabs $0x10cc63f17,%rdi
  0x0000000116b3b506: movabs $0x116b3b4a6,%rsi
  0x0000000116b3b510: mov    %rsp,%rdx
  0x0000000116b3b513: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b517: callq  0x000000010c7dd830
  0x0000000116b3b51c: hlt    
  0x0000000116b3b51d: pop    %r10
  0x0000000116b3b51f: mov    %r15,%rdi
  0x0000000116b3b522: mov    %rbp,0x290(%r15)
  0x0000000116b3b529: mov    %rax,0x280(%r15)
  0x0000000116b3b530: test   $0xf,%esp
  0x0000000116b3b536: je     0x0000000116b3b54e
  0x0000000116b3b53c: sub    $0x8,%rsp
  0x0000000116b3b540: callq  0x000000010c588f80
  0x0000000116b3b545: add    $0x8,%rsp
  0x0000000116b3b549: jmpq   0x0000000116b3b553
  0x0000000116b3b54e: callq  0x000000010c588f80
  0x0000000116b3b553: push   %rax
  0x0000000116b3b554: push   %rdi
  0x0000000116b3b555: push   %rsi
  0x0000000116b3b556: push   %rdx
  0x0000000116b3b557: push   %rcx
  0x0000000116b3b558: push   %r8
  0x0000000116b3b55a: push   %r9
  0x0000000116b3b55c: push   %r10
  0x0000000116b3b55e: mov    %rsp,%r10
  0x0000000116b3b561: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b565: push   %r10
  0x0000000116b3b567: push   %r11
  0x0000000116b3b569: mov    $0x109,%edi
  0x0000000116b3b56e: movabs $0x7ff815049fd5,%r10
  0x0000000116b3b578: callq  *%r10
  0x0000000116b3b57b: pop    %r11
  0x0000000116b3b57d: pop    %rsp
  0x0000000116b3b57e: pop    %r10
  0x0000000116b3b580: pop    %r9
  0x0000000116b3b582: pop    %r8
  0x0000000116b3b584: pop    %rcx
  0x0000000116b3b585: pop    %rdx
  0x0000000116b3b586: pop    %rsi
  0x0000000116b3b587: pop    %rdi
  0x0000000116b3b588: cmp    %rax,%r15
  0x0000000116b3b58b: je     0x0000000116b3b608
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3b591: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b596: sub    $0x80,%rsp
  0x0000000116b3b59d: mov    %rax,0x78(%rsp)
  0x0000000116b3b5a2: mov    %rcx,0x70(%rsp)
  0x0000000116b3b5a7: mov    %rdx,0x68(%rsp)
  0x0000000116b3b5ac: mov    %rbx,0x60(%rsp)
  0x0000000116b3b5b1: mov    %rbp,0x50(%rsp)
  0x0000000116b3b5b6: mov    %rsi,0x48(%rsp)
  0x0000000116b3b5bb: mov    %rdi,0x40(%rsp)
  0x0000000116b3b5c0: mov    %r8,0x38(%rsp)
  0x0000000116b3b5c5: mov    %r9,0x30(%rsp)
  0x0000000116b3b5ca: mov    %r10,0x28(%rsp)
  0x0000000116b3b5cf: mov    %r11,0x20(%rsp)
  0x0000000116b3b5d4: mov    %r12,0x18(%rsp)
  0x0000000116b3b5d9: mov    %r13,0x10(%rsp)
  0x0000000116b3b5de: mov    %r14,0x8(%rsp)
  0x0000000116b3b5e3: mov    %r15,(%rsp)
  0x0000000116b3b5e7: movabs $0x10cc6405e,%rdi
  0x0000000116b3b5f1: movabs $0x116b3b591,%rsi
  0x0000000116b3b5fb: mov    %rsp,%rdx
  0x0000000116b3b5fe: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b602: callq  0x000000010c7dd830
  0x0000000116b3b607: hlt    
  0x0000000116b3b608: pop    %rax
  0x0000000116b3b609: movabs $0x0,%r10
  0x0000000116b3b613: mov    %r10,0x280(%r15)
  0x0000000116b3b61a: movabs $0x0,%r10
  0x0000000116b3b624: mov    %r10,0x290(%r15)
  0x0000000116b3b62b: movabs $0x0,%r10
  0x0000000116b3b635: mov    %r10,0x288(%r15)
  0x0000000116b3b63c: cmpq   $0x0,0x8(%r15)
  0x0000000116b3b644: je     0x0000000116b3b64f
  0x0000000116b3b64a: jmpq   0x0000000116b30420
  0x0000000116b3b64f: mov    -0x38(%rbp),%r13
  0x0000000116b3b653: mov    -0x30(%rbp),%r14
  0x0000000116b3b657: retq   
  0x0000000116b3b658: mov    -0x38(%rbp),%r13
  0x0000000116b3b65c: vmovsd (%rsp),%xmm0
  0x0000000116b3b661: add    $0x10,%rsp
  0x0000000116b3b665: mov    -0x40(%rbp),%rsi
  0x0000000116b3b669: lea    -0x40(%rbp),%rbx
  0x0000000116b3b66d: jmpq   0x0000000116b3b937
  0x0000000116b3b672: sub    $0x10,%rsp
  0x0000000116b3b676: vmovsd %xmm0,(%rsp)
  0x0000000116b3b67b: mov    %r13,-0x38(%rbp)
  0x0000000116b3b67f: lea    (%rsi),%rax
  0x0000000116b3b682: mov    0x8(%rsi),%rcx
  0x0000000116b3b686: movq   $0x0,0x8(%rsi)
  0x0000000116b3b68e: mov    (%rcx),%rdx
  0x0000000116b3b691: and    $0x7,%rdx
  0x0000000116b3b695: cmp    $0x5,%rdx
  0x0000000116b3b699: je     0x0000000116b3b913
  0x0000000116b3b69f: mov    (%rax),%rdx
  0x0000000116b3b6a2: test   %rdx,%rdx
  0x0000000116b3b6a5: je     0x0000000116b3b913
  0x0000000116b3b6ab: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3b6b0: je     0x0000000116b3b913
  0x0000000116b3b6b6: mov    %rcx,0x8(%rsi)
  0x0000000116b3b6ba: callq  0x0000000116b3b6c4
  0x0000000116b3b6bf: jmpq   0x0000000116b3b913
  0x0000000116b3b6c4: lea    0x8(%rsp),%rax
  0x0000000116b3b6c9: mov    %r13,-0x38(%rbp)
  0x0000000116b3b6cd: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3b6d5: je     0x0000000116b3b752
  0x0000000116b3b6db: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b6e0: sub    $0x80,%rsp
  0x0000000116b3b6e7: mov    %rax,0x78(%rsp)
  0x0000000116b3b6ec: mov    %rcx,0x70(%rsp)
  0x0000000116b3b6f1: mov    %rdx,0x68(%rsp)
  0x0000000116b3b6f6: mov    %rbx,0x60(%rsp)
  0x0000000116b3b6fb: mov    %rbp,0x50(%rsp)
  0x0000000116b3b700: mov    %rsi,0x48(%rsp)
  0x0000000116b3b705: mov    %rdi,0x40(%rsp)
  0x0000000116b3b70a: mov    %r8,0x38(%rsp)
  0x0000000116b3b70f: mov    %r9,0x30(%rsp)
  0x0000000116b3b714: mov    %r10,0x28(%rsp)
  0x0000000116b3b719: mov    %r11,0x20(%rsp)
  0x0000000116b3b71e: mov    %r12,0x18(%rsp)
  0x0000000116b3b723: mov    %r13,0x10(%rsp)
  0x0000000116b3b728: mov    %r14,0x8(%rsp)
  0x0000000116b3b72d: mov    %r15,(%rsp)
  0x0000000116b3b731: movabs $0x10cc2363b,%rdi
  0x0000000116b3b73b: movabs $0x116b3b6db,%rsi
  0x0000000116b3b745: mov    %rsp,%rdx
  0x0000000116b3b748: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b74c: callq  0x000000010c7dd830
  0x0000000116b3b751: hlt    
  0x0000000116b3b752: push   %r10
  0x0000000116b3b754: cmp    -0x9cf4eab(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3b75b: je     0x0000000116b3b7d8
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3b761: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b766: sub    $0x80,%rsp
  0x0000000116b3b76d: mov    %rax,0x78(%rsp)
  0x0000000116b3b772: mov    %rcx,0x70(%rsp)
  0x0000000116b3b777: mov    %rdx,0x68(%rsp)
  0x0000000116b3b77c: mov    %rbx,0x60(%rsp)
  0x0000000116b3b781: mov    %rbp,0x50(%rsp)
  0x0000000116b3b786: mov    %rsi,0x48(%rsp)
  0x0000000116b3b78b: mov    %rdi,0x40(%rsp)
  0x0000000116b3b790: mov    %r8,0x38(%rsp)
  0x0000000116b3b795: mov    %r9,0x30(%rsp)
  0x0000000116b3b79a: mov    %r10,0x28(%rsp)
  0x0000000116b3b79f: mov    %r11,0x20(%rsp)
  0x0000000116b3b7a4: mov    %r12,0x18(%rsp)
  0x0000000116b3b7a9: mov    %r13,0x10(%rsp)
  0x0000000116b3b7ae: mov    %r14,0x8(%rsp)
  0x0000000116b3b7b3: mov    %r15,(%rsp)
  0x0000000116b3b7b7: movabs $0x10cc63f17,%rdi
  0x0000000116b3b7c1: movabs $0x116b3b761,%rsi
  0x0000000116b3b7cb: mov    %rsp,%rdx
  0x0000000116b3b7ce: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b7d2: callq  0x000000010c7dd830
  0x0000000116b3b7d7: hlt    
  0x0000000116b3b7d8: pop    %r10
  0x0000000116b3b7da: mov    %r15,%rdi
  0x0000000116b3b7dd: mov    %rbp,0x290(%r15)
  0x0000000116b3b7e4: mov    %rax,0x280(%r15)
  0x0000000116b3b7eb: test   $0xf,%esp
  0x0000000116b3b7f1: je     0x0000000116b3b809
  0x0000000116b3b7f7: sub    $0x8,%rsp
  0x0000000116b3b7fb: callq  0x000000010c588f80
  0x0000000116b3b800: add    $0x8,%rsp
  0x0000000116b3b804: jmpq   0x0000000116b3b80e
  0x0000000116b3b809: callq  0x000000010c588f80
  0x0000000116b3b80e: push   %rax
  0x0000000116b3b80f: push   %rdi
  0x0000000116b3b810: push   %rsi
  0x0000000116b3b811: push   %rdx
  0x0000000116b3b812: push   %rcx
  0x0000000116b3b813: push   %r8
  0x0000000116b3b815: push   %r9
  0x0000000116b3b817: push   %r10
  0x0000000116b3b819: mov    %rsp,%r10
  0x0000000116b3b81c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b820: push   %r10
  0x0000000116b3b822: push   %r11
  0x0000000116b3b824: mov    $0x109,%edi
  0x0000000116b3b829: movabs $0x7ff815049fd5,%r10
  0x0000000116b3b833: callq  *%r10
  0x0000000116b3b836: pop    %r11
  0x0000000116b3b838: pop    %rsp
  0x0000000116b3b839: pop    %r10
  0x0000000116b3b83b: pop    %r9
  0x0000000116b3b83d: pop    %r8
  0x0000000116b3b83f: pop    %rcx
  0x0000000116b3b840: pop    %rdx
  0x0000000116b3b841: pop    %rsi
  0x0000000116b3b842: pop    %rdi
  0x0000000116b3b843: cmp    %rax,%r15
  0x0000000116b3b846: je     0x0000000116b3b8c3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3b84c: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b851: sub    $0x80,%rsp
  0x0000000116b3b858: mov    %rax,0x78(%rsp)
  0x0000000116b3b85d: mov    %rcx,0x70(%rsp)
  0x0000000116b3b862: mov    %rdx,0x68(%rsp)
  0x0000000116b3b867: mov    %rbx,0x60(%rsp)
  0x0000000116b3b86c: mov    %rbp,0x50(%rsp)
  0x0000000116b3b871: mov    %rsi,0x48(%rsp)
  0x0000000116b3b876: mov    %rdi,0x40(%rsp)
  0x0000000116b3b87b: mov    %r8,0x38(%rsp)
  0x0000000116b3b880: mov    %r9,0x30(%rsp)
  0x0000000116b3b885: mov    %r10,0x28(%rsp)
  0x0000000116b3b88a: mov    %r11,0x20(%rsp)
  0x0000000116b3b88f: mov    %r12,0x18(%rsp)
  0x0000000116b3b894: mov    %r13,0x10(%rsp)
  0x0000000116b3b899: mov    %r14,0x8(%rsp)
  0x0000000116b3b89e: mov    %r15,(%rsp)
  0x0000000116b3b8a2: movabs $0x10cc6405e,%rdi
  0x0000000116b3b8ac: movabs $0x116b3b84c,%rsi
  0x0000000116b3b8b6: mov    %rsp,%rdx
  0x0000000116b3b8b9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b8bd: callq  0x000000010c7dd830
  0x0000000116b3b8c2: hlt    
  0x0000000116b3b8c3: pop    %rax
  0x0000000116b3b8c4: movabs $0x0,%r10
  0x0000000116b3b8ce: mov    %r10,0x280(%r15)
  0x0000000116b3b8d5: movabs $0x0,%r10
  0x0000000116b3b8df: mov    %r10,0x290(%r15)
  0x0000000116b3b8e6: movabs $0x0,%r10
  0x0000000116b3b8f0: mov    %r10,0x288(%r15)
  0x0000000116b3b8f7: cmpq   $0x0,0x8(%r15)
  0x0000000116b3b8ff: je     0x0000000116b3b90a
  0x0000000116b3b905: jmpq   0x0000000116b30420
  0x0000000116b3b90a: mov    -0x38(%rbp),%r13
  0x0000000116b3b90e: mov    -0x30(%rbp),%r14
  0x0000000116b3b912: retq   
  0x0000000116b3b913: mov    -0x38(%rbp),%r13
  0x0000000116b3b917: vmovsd (%rsp),%xmm0
  0x0000000116b3b91c: add    $0x10,%rsp
  0x0000000116b3b920: jmpq   0x0000000116b3b665
  0x0000000116b3b925: cmpq   $0x0,0x8(%rsi)
  0x0000000116b3b92d: jne    0x0000000116b3b672
  0x0000000116b3b933: add    $0x10,%rsi
  0x0000000116b3b937: cmp    %rbx,%rsi
  0x0000000116b3b93a: jne    0x0000000116b3b925
  0x0000000116b3b93c: cmpb   $0x0,-0x9d1e741(%rip)        # 0x000000010ce1d202
  0x0000000116b3b943: je     0x0000000116b3ba0a
  0x0000000116b3b949: sub    $0x10,%rsp
  0x0000000116b3b94d: vmovsd %xmm0,(%rsp)
  0x0000000116b3b952: mov    -0x18(%rbp),%rsi
  0x0000000116b3b956: mov    %r15,%rdi
  0x0000000116b3b959: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3b961: je     0x0000000116b3b9de
  0x0000000116b3b967: mov    %rsp,-0x28(%rsp)
  0x0000000116b3b96c: sub    $0x80,%rsp
  0x0000000116b3b973: mov    %rax,0x78(%rsp)
  0x0000000116b3b978: mov    %rcx,0x70(%rsp)
  0x0000000116b3b97d: mov    %rdx,0x68(%rsp)
  0x0000000116b3b982: mov    %rbx,0x60(%rsp)
  0x0000000116b3b987: mov    %rbp,0x50(%rsp)
  0x0000000116b3b98c: mov    %rsi,0x48(%rsp)
  0x0000000116b3b991: mov    %rdi,0x40(%rsp)
  0x0000000116b3b996: mov    %r8,0x38(%rsp)
  0x0000000116b3b99b: mov    %r9,0x30(%rsp)
  0x0000000116b3b9a0: mov    %r10,0x28(%rsp)
  0x0000000116b3b9a5: mov    %r11,0x20(%rsp)
  0x0000000116b3b9aa: mov    %r12,0x18(%rsp)
  0x0000000116b3b9af: mov    %r13,0x10(%rsp)
  0x0000000116b3b9b4: mov    %r14,0x8(%rsp)
  0x0000000116b3b9b9: mov    %r15,(%rsp)
  0x0000000116b3b9bd: movabs $0x10cc2363b,%rdi
  0x0000000116b3b9c7: movabs $0x116b3b967,%rsi
  0x0000000116b3b9d1: mov    %rsp,%rdx
  0x0000000116b3b9d4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3b9d8: callq  0x000000010c7dd830
  0x0000000116b3b9dd: hlt    
  0x0000000116b3b9de: test   $0xf,%esp
  0x0000000116b3b9e4: je     0x0000000116b3b9fc
  0x0000000116b3b9ea: sub    $0x8,%rsp
  0x0000000116b3b9ee: callq  0x000000010c9c9850
  0x0000000116b3b9f3: add    $0x8,%rsp
  0x0000000116b3b9f7: jmpq   0x0000000116b3ba01
  0x0000000116b3b9fc: callq  0x000000010c9c9850
  0x0000000116b3ba01: vmovsd (%rsp),%xmm0
  0x0000000116b3ba06: add    $0x10,%rsp
  0x0000000116b3ba0a: mov    -0x8(%rbp),%rbx
  0x0000000116b3ba0e: leaveq 
  0x0000000116b3ba0f: pop    %rsi
  0x0000000116b3ba10: mov    %rbx,%rsp
  0x0000000116b3ba13: jmpq   *%rsi
  0x0000000116b3ba15: mov    -0x38(%rbp),%r13
  0x0000000116b3ba19: mov    -0x30(%rbp),%r14
  0x0000000116b3ba1d: mov    -0x40(%rbp),%rsp
  0x0000000116b3ba21: movq   $0x0,-0x10(%rbp)
  0x0000000116b3ba29: mov    0x630(%r15),%rcx
  0x0000000116b3ba30: movl   $0xb,0x80(%rcx)
  0x0000000116b3ba3a: movl   $0x0,0x88(%rcx)
  0x0000000116b3ba44: mov    0x630(%r15),%rdx
  0x0000000116b3ba4b: movl   $0x0,0x7c(%rdx)
  0x0000000116b3ba52: mov    0x33d(%r15),%dl
  0x0000000116b3ba59: movb   $0x0,0x33d(%r15)
  0x0000000116b3ba61: mov    -0x18(%rbp),%rbx
  0x0000000116b3ba65: mov    0x28(%rbx),%ecx
  0x0000000116b3ba68: test   $0x20,%ecx
  0x0000000116b3ba6e: je     0x0000000116b3bd2f
  0x0000000116b3ba74: test   $0xff,%dl
  0x0000000116b3ba77: jne    0x0000000116b3bff4
  0x0000000116b3ba7d: lea    -0x50(%rbp),%rsi
  0x0000000116b3ba81: mov    0x8(%rsi),%rax
  0x0000000116b3ba85: test   %rax,%rax
  0x0000000116b3ba88: jne    0x0000000116b3ba93
  0x0000000116b3ba8e: jmpq   0x0000000116b3bd2f
  0x0000000116b3ba93: mov    %r13,-0x38(%rbp)
  0x0000000116b3ba97: lea    (%rsi),%rax
  0x0000000116b3ba9a: mov    0x8(%rsi),%rcx
  0x0000000116b3ba9e: movq   $0x0,0x8(%rsi)
  0x0000000116b3baa6: mov    (%rcx),%rdx
  0x0000000116b3baa9: and    $0x7,%rdx
  0x0000000116b3baad: cmp    $0x5,%rdx
  0x0000000116b3bab1: je     0x0000000116b3bd2b
  0x0000000116b3bab7: mov    (%rax),%rdx
  0x0000000116b3baba: test   %rdx,%rdx
  0x0000000116b3babd: je     0x0000000116b3bd2b
  0x0000000116b3bac3: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3bac8: je     0x0000000116b3bd2b
  0x0000000116b3bace: mov    %rcx,0x8(%rsi)
  0x0000000116b3bad2: callq  0x0000000116b3badc
  0x0000000116b3bad7: jmpq   0x0000000116b3bd2b
  0x0000000116b3badc: lea    0x8(%rsp),%rax
  0x0000000116b3bae1: mov    %r13,-0x38(%rbp)
  0x0000000116b3bae5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3baed: je     0x0000000116b3bb6a
  0x0000000116b3baf3: mov    %rsp,-0x28(%rsp)
  0x0000000116b3baf8: sub    $0x80,%rsp
  0x0000000116b3baff: mov    %rax,0x78(%rsp)
  0x0000000116b3bb04: mov    %rcx,0x70(%rsp)
  0x0000000116b3bb09: mov    %rdx,0x68(%rsp)
  0x0000000116b3bb0e: mov    %rbx,0x60(%rsp)
  0x0000000116b3bb13: mov    %rbp,0x50(%rsp)
  0x0000000116b3bb18: mov    %rsi,0x48(%rsp)
  0x0000000116b3bb1d: mov    %rdi,0x40(%rsp)
  0x0000000116b3bb22: mov    %r8,0x38(%rsp)
  0x0000000116b3bb27: mov    %r9,0x30(%rsp)
  0x0000000116b3bb2c: mov    %r10,0x28(%rsp)
  0x0000000116b3bb31: mov    %r11,0x20(%rsp)
  0x0000000116b3bb36: mov    %r12,0x18(%rsp)
  0x0000000116b3bb3b: mov    %r13,0x10(%rsp)
  0x0000000116b3bb40: mov    %r14,0x8(%rsp)
  0x0000000116b3bb45: mov    %r15,(%rsp)
  0x0000000116b3bb49: movabs $0x10cc2363b,%rdi
  0x0000000116b3bb53: movabs $0x116b3baf3,%rsi
  0x0000000116b3bb5d: mov    %rsp,%rdx
  0x0000000116b3bb60: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3bb64: callq  0x000000010c7dd830
  0x0000000116b3bb69: hlt    
  0x0000000116b3bb6a: push   %r10
  0x0000000116b3bb6c: cmp    -0x9cf52c3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3bb73: je     0x0000000116b3bbf0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3bb79: mov    %rsp,-0x28(%rsp)
  0x0000000116b3bb7e: sub    $0x80,%rsp
  0x0000000116b3bb85: mov    %rax,0x78(%rsp)
  0x0000000116b3bb8a: mov    %rcx,0x70(%rsp)
  0x0000000116b3bb8f: mov    %rdx,0x68(%rsp)
  0x0000000116b3bb94: mov    %rbx,0x60(%rsp)
  0x0000000116b3bb99: mov    %rbp,0x50(%rsp)
  0x0000000116b3bb9e: mov    %rsi,0x48(%rsp)
  0x0000000116b3bba3: mov    %rdi,0x40(%rsp)
  0x0000000116b3bba8: mov    %r8,0x38(%rsp)
  0x0000000116b3bbad: mov    %r9,0x30(%rsp)
  0x0000000116b3bbb2: mov    %r10,0x28(%rsp)
  0x0000000116b3bbb7: mov    %r11,0x20(%rsp)
  0x0000000116b3bbbc: mov    %r12,0x18(%rsp)
  0x0000000116b3bbc1: mov    %r13,0x10(%rsp)
  0x0000000116b3bbc6: mov    %r14,0x8(%rsp)
  0x0000000116b3bbcb: mov    %r15,(%rsp)
  0x0000000116b3bbcf: movabs $0x10cc63f17,%rdi
  0x0000000116b3bbd9: movabs $0x116b3bb79,%rsi
  0x0000000116b3bbe3: mov    %rsp,%rdx
  0x0000000116b3bbe6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3bbea: callq  0x000000010c7dd830
  0x0000000116b3bbef: hlt    
  0x0000000116b3bbf0: pop    %r10
  0x0000000116b3bbf2: mov    %r15,%rdi
  0x0000000116b3bbf5: mov    %rbp,0x290(%r15)
  0x0000000116b3bbfc: mov    %rax,0x280(%r15)
  0x0000000116b3bc03: test   $0xf,%esp
  0x0000000116b3bc09: je     0x0000000116b3bc21
  0x0000000116b3bc0f: sub    $0x8,%rsp
  0x0000000116b3bc13: callq  0x000000010c588f80
  0x0000000116b3bc18: add    $0x8,%rsp
  0x0000000116b3bc1c: jmpq   0x0000000116b3bc26
  0x0000000116b3bc21: callq  0x000000010c588f80
  0x0000000116b3bc26: push   %rax
  0x0000000116b3bc27: push   %rdi
  0x0000000116b3bc28: push   %rsi
  0x0000000116b3bc29: push   %rdx
  0x0000000116b3bc2a: push   %rcx
  0x0000000116b3bc2b: push   %r8
  0x0000000116b3bc2d: push   %r9
  0x0000000116b3bc2f: push   %r10
  0x0000000116b3bc31: mov    %rsp,%r10
  0x0000000116b3bc34: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3bc38: push   %r10
  0x0000000116b3bc3a: push   %r11
  0x0000000116b3bc3c: mov    $0x109,%edi
  0x0000000116b3bc41: movabs $0x7ff815049fd5,%r10
  0x0000000116b3bc4b: callq  *%r10
  0x0000000116b3bc4e: pop    %r11
  0x0000000116b3bc50: pop    %rsp
  0x0000000116b3bc51: pop    %r10
  0x0000000116b3bc53: pop    %r9
  0x0000000116b3bc55: pop    %r8
  0x0000000116b3bc57: pop    %rcx
  0x0000000116b3bc58: pop    %rdx
  0x0000000116b3bc59: pop    %rsi
  0x0000000116b3bc5a: pop    %rdi
  0x0000000116b3bc5b: cmp    %rax,%r15
  0x0000000116b3bc5e: je     0x0000000116b3bcdb
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3bc64: mov    %rsp,-0x28(%rsp)
  0x0000000116b3bc69: sub    $0x80,%rsp
  0x0000000116b3bc70: mov    %rax,0x78(%rsp)
  0x0000000116b3bc75: mov    %rcx,0x70(%rsp)
  0x0000000116b3bc7a: mov    %rdx,0x68(%rsp)
  0x0000000116b3bc7f: mov    %rbx,0x60(%rsp)
  0x0000000116b3bc84: mov    %rbp,0x50(%rsp)
  0x0000000116b3bc89: mov    %rsi,0x48(%rsp)
  0x0000000116b3bc8e: mov    %rdi,0x40(%rsp)
  0x0000000116b3bc93: mov    %r8,0x38(%rsp)
  0x0000000116b3bc98: mov    %r9,0x30(%rsp)
  0x0000000116b3bc9d: mov    %r10,0x28(%rsp)
  0x0000000116b3bca2: mov    %r11,0x20(%rsp)
  0x0000000116b3bca7: mov    %r12,0x18(%rsp)
  0x0000000116b3bcac: mov    %r13,0x10(%rsp)
  0x0000000116b3bcb1: mov    %r14,0x8(%rsp)
  0x0000000116b3bcb6: mov    %r15,(%rsp)
  0x0000000116b3bcba: movabs $0x10cc6405e,%rdi
  0x0000000116b3bcc4: movabs $0x116b3bc64,%rsi
  0x0000000116b3bcce: mov    %rsp,%rdx
  0x0000000116b3bcd1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3bcd5: callq  0x000000010c7dd830
  0x0000000116b3bcda: hlt    
  0x0000000116b3bcdb: pop    %rax
  0x0000000116b3bcdc: movabs $0x0,%r10
  0x0000000116b3bce6: mov    %r10,0x280(%r15)
  0x0000000116b3bced: movabs $0x0,%r10
  0x0000000116b3bcf7: mov    %r10,0x290(%r15)
  0x0000000116b3bcfe: movabs $0x0,%r10
  0x0000000116b3bd08: mov    %r10,0x288(%r15)
  0x0000000116b3bd0f: cmpq   $0x0,0x8(%r15)
  0x0000000116b3bd17: je     0x0000000116b3bd22
  0x0000000116b3bd1d: jmpq   0x0000000116b30420
  0x0000000116b3bd22: mov    -0x38(%rbp),%r13
  0x0000000116b3bd26: mov    -0x30(%rbp),%r14
  0x0000000116b3bd2a: retq   
  0x0000000116b3bd2b: mov    -0x38(%rbp),%r13
  0x0000000116b3bd2f: mov    -0x40(%rbp),%rsi
  0x0000000116b3bd33: lea    -0x40(%rbp),%rbx
  0x0000000116b3bd37: jmpq   0x0000000116b3bfef
  0x0000000116b3bd3c: mov    %r13,-0x38(%rbp)
  0x0000000116b3bd40: lea    (%rsi),%rax
  0x0000000116b3bd43: mov    0x8(%rsi),%rcx
  0x0000000116b3bd47: movq   $0x0,0x8(%rsi)
  0x0000000116b3bd4f: mov    (%rcx),%rdx
  0x0000000116b3bd52: and    $0x7,%rdx
  0x0000000116b3bd56: cmp    $0x5,%rdx
  0x0000000116b3bd5a: je     0x0000000116b3bfd4
  0x0000000116b3bd60: mov    (%rax),%rdx
  0x0000000116b3bd63: test   %rdx,%rdx
  0x0000000116b3bd66: je     0x0000000116b3bfd4
  0x0000000116b3bd6c: lock cmpxchg %rdx,(%rcx)
  0x0000000116b3bd71: je     0x0000000116b3bfd4
  0x0000000116b3bd77: mov    %rcx,0x8(%rsi)
  0x0000000116b3bd7b: callq  0x0000000116b3bd85
  0x0000000116b3bd80: jmpq   0x0000000116b3bfd4
  0x0000000116b3bd85: lea    0x8(%rsp),%rax
  0x0000000116b3bd8a: mov    %r13,-0x38(%rbp)
  0x0000000116b3bd8e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3bd96: je     0x0000000116b3be13
  0x0000000116b3bd9c: mov    %rsp,-0x28(%rsp)
  0x0000000116b3bda1: sub    $0x80,%rsp
  0x0000000116b3bda8: mov    %rax,0x78(%rsp)
  0x0000000116b3bdad: mov    %rcx,0x70(%rsp)
  0x0000000116b3bdb2: mov    %rdx,0x68(%rsp)
  0x0000000116b3bdb7: mov    %rbx,0x60(%rsp)
  0x0000000116b3bdbc: mov    %rbp,0x50(%rsp)
  0x0000000116b3bdc1: mov    %rsi,0x48(%rsp)
  0x0000000116b3bdc6: mov    %rdi,0x40(%rsp)
  0x0000000116b3bdcb: mov    %r8,0x38(%rsp)
  0x0000000116b3bdd0: mov    %r9,0x30(%rsp)
  0x0000000116b3bdd5: mov    %r10,0x28(%rsp)
  0x0000000116b3bdda: mov    %r11,0x20(%rsp)
  0x0000000116b3bddf: mov    %r12,0x18(%rsp)
  0x0000000116b3bde4: mov    %r13,0x10(%rsp)
  0x0000000116b3bde9: mov    %r14,0x8(%rsp)
  0x0000000116b3bdee: mov    %r15,(%rsp)
  0x0000000116b3bdf2: movabs $0x10cc2363b,%rdi
  0x0000000116b3bdfc: movabs $0x116b3bd9c,%rsi
  0x0000000116b3be06: mov    %rsp,%rdx
  0x0000000116b3be09: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3be0d: callq  0x000000010c7dd830
  0x0000000116b3be12: hlt    
  0x0000000116b3be13: push   %r10
  0x0000000116b3be15: cmp    -0x9cf556c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3be1c: je     0x0000000116b3be99
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3be22: mov    %rsp,-0x28(%rsp)
  0x0000000116b3be27: sub    $0x80,%rsp
  0x0000000116b3be2e: mov    %rax,0x78(%rsp)
  0x0000000116b3be33: mov    %rcx,0x70(%rsp)
  0x0000000116b3be38: mov    %rdx,0x68(%rsp)
  0x0000000116b3be3d: mov    %rbx,0x60(%rsp)
  0x0000000116b3be42: mov    %rbp,0x50(%rsp)
  0x0000000116b3be47: mov    %rsi,0x48(%rsp)
  0x0000000116b3be4c: mov    %rdi,0x40(%rsp)
  0x0000000116b3be51: mov    %r8,0x38(%rsp)
  0x0000000116b3be56: mov    %r9,0x30(%rsp)
  0x0000000116b3be5b: mov    %r10,0x28(%rsp)
  0x0000000116b3be60: mov    %r11,0x20(%rsp)
  0x0000000116b3be65: mov    %r12,0x18(%rsp)
  0x0000000116b3be6a: mov    %r13,0x10(%rsp)
  0x0000000116b3be6f: mov    %r14,0x8(%rsp)
  0x0000000116b3be74: mov    %r15,(%rsp)
  0x0000000116b3be78: movabs $0x10cc63f17,%rdi
  0x0000000116b3be82: movabs $0x116b3be22,%rsi
  0x0000000116b3be8c: mov    %rsp,%rdx
  0x0000000116b3be8f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3be93: callq  0x000000010c7dd830
  0x0000000116b3be98: hlt    
  0x0000000116b3be99: pop    %r10
  0x0000000116b3be9b: mov    %r15,%rdi
  0x0000000116b3be9e: mov    %rbp,0x290(%r15)
  0x0000000116b3bea5: mov    %rax,0x280(%r15)
  0x0000000116b3beac: test   $0xf,%esp
  0x0000000116b3beb2: je     0x0000000116b3beca
  0x0000000116b3beb8: sub    $0x8,%rsp
  0x0000000116b3bebc: callq  0x000000010c588f80
  0x0000000116b3bec1: add    $0x8,%rsp
  0x0000000116b3bec5: jmpq   0x0000000116b3becf
  0x0000000116b3beca: callq  0x000000010c588f80
  0x0000000116b3becf: push   %rax
  0x0000000116b3bed0: push   %rdi
  0x0000000116b3bed1: push   %rsi
  0x0000000116b3bed2: push   %rdx
  0x0000000116b3bed3: push   %rcx
  0x0000000116b3bed4: push   %r8
  0x0000000116b3bed6: push   %r9
  0x0000000116b3bed8: push   %r10
  0x0000000116b3beda: mov    %rsp,%r10
  0x0000000116b3bedd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3bee1: push   %r10
  0x0000000116b3bee3: push   %r11
  0x0000000116b3bee5: mov    $0x109,%edi
  0x0000000116b3beea: movabs $0x7ff815049fd5,%r10
  0x0000000116b3bef4: callq  *%r10
  0x0000000116b3bef7: pop    %r11
  0x0000000116b3bef9: pop    %rsp
  0x0000000116b3befa: pop    %r10
  0x0000000116b3befc: pop    %r9
  0x0000000116b3befe: pop    %r8
  0x0000000116b3bf00: pop    %rcx
  0x0000000116b3bf01: pop    %rdx
  0x0000000116b3bf02: pop    %rsi
  0x0000000116b3bf03: pop    %rdi
  0x0000000116b3bf04: cmp    %rax,%r15
  0x0000000116b3bf07: je     0x0000000116b3bf84
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3bf0d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3bf12: sub    $0x80,%rsp
  0x0000000116b3bf19: mov    %rax,0x78(%rsp)
  0x0000000116b3bf1e: mov    %rcx,0x70(%rsp)
  0x0000000116b3bf23: mov    %rdx,0x68(%rsp)
  0x0000000116b3bf28: mov    %rbx,0x60(%rsp)
  0x0000000116b3bf2d: mov    %rbp,0x50(%rsp)
  0x0000000116b3bf32: mov    %rsi,0x48(%rsp)
  0x0000000116b3bf37: mov    %rdi,0x40(%rsp)
  0x0000000116b3bf3c: mov    %r8,0x38(%rsp)
  0x0000000116b3bf41: mov    %r9,0x30(%rsp)
  0x0000000116b3bf46: mov    %r10,0x28(%rsp)
  0x0000000116b3bf4b: mov    %r11,0x20(%rsp)
  0x0000000116b3bf50: mov    %r12,0x18(%rsp)
  0x0000000116b3bf55: mov    %r13,0x10(%rsp)
  0x0000000116b3bf5a: mov    %r14,0x8(%rsp)
  0x0000000116b3bf5f: mov    %r15,(%rsp)
  0x0000000116b3bf63: movabs $0x10cc6405e,%rdi
  0x0000000116b3bf6d: movabs $0x116b3bf0d,%rsi
  0x0000000116b3bf77: mov    %rsp,%rdx
  0x0000000116b3bf7a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3bf7e: callq  0x000000010c7dd830
  0x0000000116b3bf83: hlt    
  0x0000000116b3bf84: pop    %rax
  0x0000000116b3bf85: movabs $0x0,%r10
  0x0000000116b3bf8f: mov    %r10,0x280(%r15)
  0x0000000116b3bf96: movabs $0x0,%r10
  0x0000000116b3bfa0: mov    %r10,0x290(%r15)
  0x0000000116b3bfa7: movabs $0x0,%r10
  0x0000000116b3bfb1: mov    %r10,0x288(%r15)
  0x0000000116b3bfb8: cmpq   $0x0,0x8(%r15)
  0x0000000116b3bfc0: je     0x0000000116b3bfcb
  0x0000000116b3bfc6: jmpq   0x0000000116b30420
  0x0000000116b3bfcb: mov    -0x38(%rbp),%r13
  0x0000000116b3bfcf: mov    -0x30(%rbp),%r14
  0x0000000116b3bfd3: retq   
  0x0000000116b3bfd4: mov    -0x38(%rbp),%r13
  0x0000000116b3bfd8: jmpq   0x0000000116b3bd2f
  0x0000000116b3bfdd: cmpq   $0x0,0x8(%rsi)
  0x0000000116b3bfe5: jne    0x0000000116b3bd3c
  0x0000000116b3bfeb: add    $0x10,%rsi
  0x0000000116b3bfef: cmp    %rbx,%rsi
  0x0000000116b3bff2: jne    0x0000000116b3bfdd
  0x0000000116b3bff4: cmpb   $0x0,-0x9d1edf9(%rip)        # 0x000000010ce1d202
  0x0000000116b3bffb: je     0x0000000116b3c0b0
  0x0000000116b3c001: mov    -0x18(%rbp),%rsi
  0x0000000116b3c005: mov    %r15,%rdi
  0x0000000116b3c008: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3c010: je     0x0000000116b3c08d
  0x0000000116b3c016: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c01b: sub    $0x80,%rsp
  0x0000000116b3c022: mov    %rax,0x78(%rsp)
  0x0000000116b3c027: mov    %rcx,0x70(%rsp)
  0x0000000116b3c02c: mov    %rdx,0x68(%rsp)
  0x0000000116b3c031: mov    %rbx,0x60(%rsp)
  0x0000000116b3c036: mov    %rbp,0x50(%rsp)
  0x0000000116b3c03b: mov    %rsi,0x48(%rsp)
  0x0000000116b3c040: mov    %rdi,0x40(%rsp)
  0x0000000116b3c045: mov    %r8,0x38(%rsp)
  0x0000000116b3c04a: mov    %r9,0x30(%rsp)
  0x0000000116b3c04f: mov    %r10,0x28(%rsp)
  0x0000000116b3c054: mov    %r11,0x20(%rsp)
  0x0000000116b3c059: mov    %r12,0x18(%rsp)
  0x0000000116b3c05e: mov    %r13,0x10(%rsp)
  0x0000000116b3c063: mov    %r14,0x8(%rsp)
  0x0000000116b3c068: mov    %r15,(%rsp)
  0x0000000116b3c06c: movabs $0x10cc2363b,%rdi
  0x0000000116b3c076: movabs $0x116b3c016,%rsi
  0x0000000116b3c080: mov    %rsp,%rdx
  0x0000000116b3c083: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c087: callq  0x000000010c7dd830
  0x0000000116b3c08c: hlt    
  0x0000000116b3c08d: test   $0xf,%esp
  0x0000000116b3c093: je     0x0000000116b3c0ab
  0x0000000116b3c099: sub    $0x8,%rsp
  0x0000000116b3c09d: callq  0x000000010c9c9850
  0x0000000116b3c0a2: add    $0x8,%rsp
  0x0000000116b3c0a6: jmpq   0x0000000116b3c0b0
  0x0000000116b3c0ab: callq  0x000000010c9c9850
  0x0000000116b3c0b0: mov    -0x8(%rbp),%rbx
  0x0000000116b3c0b4: leaveq 
  0x0000000116b3c0b5: pop    %rsi
  0x0000000116b3c0b6: mov    %rbx,%rsp
  0x0000000116b3c0b9: jmpq   *%rsi
  0x0000000116b3c0bb: nop
  0x0000000116b3c0bc: nop
  0x0000000116b3c0bd: nop
  0x0000000116b3c0be: nop
  0x0000000116b3c0bf: nop

----------------------------------------------------------------------
deoptimization entry points  [0x0000000116b3c100, 0x0000000116b4eee0]  77280 bytes

  0x0000000116b3c100: movq   $0x0,-0x10(%rbp)
  0x0000000116b3c108: mov    -0x38(%rbp),%r13
  0x0000000116b3c10c: mov    -0x30(%rbp),%r14
  0x0000000116b3c110: cmpq   $0x0,0x8(%r15)
  0x0000000116b3c118: je     0x0000000116b3c3ee
  0x0000000116b3c11e: callq  0x0000000116b3c128
  0x0000000116b3c123: jmpq   0x0000000116b3c377
  0x0000000116b3c128: lea    0x8(%rsp),%rax
  0x0000000116b3c12d: mov    %r13,-0x38(%rbp)
  0x0000000116b3c131: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3c139: je     0x0000000116b3c1b6
  0x0000000116b3c13f: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c144: sub    $0x80,%rsp
  0x0000000116b3c14b: mov    %rax,0x78(%rsp)
  0x0000000116b3c150: mov    %rcx,0x70(%rsp)
  0x0000000116b3c155: mov    %rdx,0x68(%rsp)
  0x0000000116b3c15a: mov    %rbx,0x60(%rsp)
  0x0000000116b3c15f: mov    %rbp,0x50(%rsp)
  0x0000000116b3c164: mov    %rsi,0x48(%rsp)
  0x0000000116b3c169: mov    %rdi,0x40(%rsp)
  0x0000000116b3c16e: mov    %r8,0x38(%rsp)
  0x0000000116b3c173: mov    %r9,0x30(%rsp)
  0x0000000116b3c178: mov    %r10,0x28(%rsp)
  0x0000000116b3c17d: mov    %r11,0x20(%rsp)
  0x0000000116b3c182: mov    %r12,0x18(%rsp)
  0x0000000116b3c187: mov    %r13,0x10(%rsp)
  0x0000000116b3c18c: mov    %r14,0x8(%rsp)
  0x0000000116b3c191: mov    %r15,(%rsp)
  0x0000000116b3c195: movabs $0x10cc2363b,%rdi
  0x0000000116b3c19f: movabs $0x116b3c13f,%rsi
  0x0000000116b3c1a9: mov    %rsp,%rdx
  0x0000000116b3c1ac: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c1b0: callq  0x000000010c7dd830
  0x0000000116b3c1b5: hlt    
  0x0000000116b3c1b6: push   %r10
  0x0000000116b3c1b8: cmp    -0x9cf590f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3c1bf: je     0x0000000116b3c23c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3c1c5: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c1ca: sub    $0x80,%rsp
  0x0000000116b3c1d1: mov    %rax,0x78(%rsp)
  0x0000000116b3c1d6: mov    %rcx,0x70(%rsp)
  0x0000000116b3c1db: mov    %rdx,0x68(%rsp)
  0x0000000116b3c1e0: mov    %rbx,0x60(%rsp)
  0x0000000116b3c1e5: mov    %rbp,0x50(%rsp)
  0x0000000116b3c1ea: mov    %rsi,0x48(%rsp)
  0x0000000116b3c1ef: mov    %rdi,0x40(%rsp)
  0x0000000116b3c1f4: mov    %r8,0x38(%rsp)
  0x0000000116b3c1f9: mov    %r9,0x30(%rsp)
  0x0000000116b3c1fe: mov    %r10,0x28(%rsp)
  0x0000000116b3c203: mov    %r11,0x20(%rsp)
  0x0000000116b3c208: mov    %r12,0x18(%rsp)
  0x0000000116b3c20d: mov    %r13,0x10(%rsp)
  0x0000000116b3c212: mov    %r14,0x8(%rsp)
  0x0000000116b3c217: mov    %r15,(%rsp)
  0x0000000116b3c21b: movabs $0x10cc63f17,%rdi
  0x0000000116b3c225: movabs $0x116b3c1c5,%rsi
  0x0000000116b3c22f: mov    %rsp,%rdx
  0x0000000116b3c232: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c236: callq  0x000000010c7dd830
  0x0000000116b3c23b: hlt    
  0x0000000116b3c23c: pop    %r10
  0x0000000116b3c23e: mov    %r15,%rdi
  0x0000000116b3c241: mov    %rbp,0x290(%r15)
  0x0000000116b3c248: mov    %rax,0x280(%r15)
  0x0000000116b3c24f: test   $0xf,%esp
  0x0000000116b3c255: je     0x0000000116b3c26d
  0x0000000116b3c25b: sub    $0x8,%rsp
  0x0000000116b3c25f: callq  0x000000010c5881a0
  0x0000000116b3c264: add    $0x8,%rsp
  0x0000000116b3c268: jmpq   0x0000000116b3c272
  0x0000000116b3c26d: callq  0x000000010c5881a0
  0x0000000116b3c272: push   %rax
  0x0000000116b3c273: push   %rdi
  0x0000000116b3c274: push   %rsi
  0x0000000116b3c275: push   %rdx
  0x0000000116b3c276: push   %rcx
  0x0000000116b3c277: push   %r8
  0x0000000116b3c279: push   %r9
  0x0000000116b3c27b: push   %r10
  0x0000000116b3c27d: mov    %rsp,%r10
  0x0000000116b3c280: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c284: push   %r10
  0x0000000116b3c286: push   %r11
  0x0000000116b3c288: mov    $0x109,%edi
  0x0000000116b3c28d: movabs $0x7ff815049fd5,%r10
  0x0000000116b3c297: callq  *%r10
  0x0000000116b3c29a: pop    %r11
  0x0000000116b3c29c: pop    %rsp
  0x0000000116b3c29d: pop    %r10
  0x0000000116b3c29f: pop    %r9
  0x0000000116b3c2a1: pop    %r8
  0x0000000116b3c2a3: pop    %rcx
  0x0000000116b3c2a4: pop    %rdx
  0x0000000116b3c2a5: pop    %rsi
  0x0000000116b3c2a6: pop    %rdi
  0x0000000116b3c2a7: cmp    %rax,%r15
  0x0000000116b3c2aa: je     0x0000000116b3c327
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3c2b0: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c2b5: sub    $0x80,%rsp
  0x0000000116b3c2bc: mov    %rax,0x78(%rsp)
  0x0000000116b3c2c1: mov    %rcx,0x70(%rsp)
  0x0000000116b3c2c6: mov    %rdx,0x68(%rsp)
  0x0000000116b3c2cb: mov    %rbx,0x60(%rsp)
  0x0000000116b3c2d0: mov    %rbp,0x50(%rsp)
  0x0000000116b3c2d5: mov    %rsi,0x48(%rsp)
  0x0000000116b3c2da: mov    %rdi,0x40(%rsp)
  0x0000000116b3c2df: mov    %r8,0x38(%rsp)
  0x0000000116b3c2e4: mov    %r9,0x30(%rsp)
  0x0000000116b3c2e9: mov    %r10,0x28(%rsp)
  0x0000000116b3c2ee: mov    %r11,0x20(%rsp)
  0x0000000116b3c2f3: mov    %r12,0x18(%rsp)
  0x0000000116b3c2f8: mov    %r13,0x10(%rsp)
  0x0000000116b3c2fd: mov    %r14,0x8(%rsp)
  0x0000000116b3c302: mov    %r15,(%rsp)
  0x0000000116b3c306: movabs $0x10cc6405e,%rdi
  0x0000000116b3c310: movabs $0x116b3c2b0,%rsi
  0x0000000116b3c31a: mov    %rsp,%rdx
  0x0000000116b3c31d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c321: callq  0x000000010c7dd830
  0x0000000116b3c326: hlt    
  0x0000000116b3c327: pop    %rax
  0x0000000116b3c328: movabs $0x0,%r10
  0x0000000116b3c332: mov    %r10,0x280(%r15)
  0x0000000116b3c339: movabs $0x0,%r10
  0x0000000116b3c343: mov    %r10,0x290(%r15)
  0x0000000116b3c34a: movabs $0x0,%r10
  0x0000000116b3c354: mov    %r10,0x288(%r15)
  0x0000000116b3c35b: cmpq   $0x0,0x8(%r15)
  0x0000000116b3c363: je     0x0000000116b3c36e
  0x0000000116b3c369: jmpq   0x0000000116b30420
  0x0000000116b3c36e: mov    -0x38(%rbp),%r13
  0x0000000116b3c372: mov    -0x30(%rbp),%r14
  0x0000000116b3c376: retq   
  0x0000000116b3c377: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c37c: sub    $0x80,%rsp
  0x0000000116b3c383: mov    %rax,0x78(%rsp)
  0x0000000116b3c388: mov    %rcx,0x70(%rsp)
  0x0000000116b3c38d: mov    %rdx,0x68(%rsp)
  0x0000000116b3c392: mov    %rbx,0x60(%rsp)
  0x0000000116b3c397: mov    %rbp,0x50(%rsp)
  0x0000000116b3c39c: mov    %rsi,0x48(%rsp)
  0x0000000116b3c3a1: mov    %rdi,0x40(%rsp)
  0x0000000116b3c3a6: mov    %r8,0x38(%rsp)
  0x0000000116b3c3ab: mov    %r9,0x30(%rsp)
  0x0000000116b3c3b0: mov    %r10,0x28(%rsp)
  0x0000000116b3c3b5: mov    %r11,0x20(%rsp)
  0x0000000116b3c3ba: mov    %r12,0x18(%rsp)
  0x0000000116b3c3bf: mov    %r13,0x10(%rsp)
  0x0000000116b3c3c4: mov    %r14,0x8(%rsp)
  0x0000000116b3c3c9: mov    %r15,(%rsp)
  0x0000000116b3c3cd: movabs $0x10cb763be,%rdi
  0x0000000116b3c3d7: movabs $0x116b3c377,%rsi
  0x0000000116b3c3e1: mov    %rsp,%rdx
  0x0000000116b3c3e4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c3e8: callq  0x000000010c7dd830
  0x0000000116b3c3ed: hlt    
  0x0000000116b3c3ee: movzbl 0x0(%r13),%ebx
  0x0000000116b3c3f3: movabs $0x10ce38e80,%r10
  0x0000000116b3c3fd: jmpq   *(%r10,%rbx,8)
  0x0000000116b3c401: movq   $0x0,-0x10(%rbp)
  0x0000000116b3c409: mov    -0x38(%rbp),%r13
  0x0000000116b3c40d: mov    -0x30(%rbp),%r14
  0x0000000116b3c411: cmpq   $0x0,0x8(%r15)
  0x0000000116b3c419: je     0x0000000116b3c6ef
  0x0000000116b3c41f: callq  0x0000000116b3c429
  0x0000000116b3c424: jmpq   0x0000000116b3c678
  0x0000000116b3c429: lea    0x8(%rsp),%rax
  0x0000000116b3c42e: mov    %r13,-0x38(%rbp)
  0x0000000116b3c432: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3c43a: je     0x0000000116b3c4b7
  0x0000000116b3c440: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c445: sub    $0x80,%rsp
  0x0000000116b3c44c: mov    %rax,0x78(%rsp)
  0x0000000116b3c451: mov    %rcx,0x70(%rsp)
  0x0000000116b3c456: mov    %rdx,0x68(%rsp)
  0x0000000116b3c45b: mov    %rbx,0x60(%rsp)
  0x0000000116b3c460: mov    %rbp,0x50(%rsp)
  0x0000000116b3c465: mov    %rsi,0x48(%rsp)
  0x0000000116b3c46a: mov    %rdi,0x40(%rsp)
  0x0000000116b3c46f: mov    %r8,0x38(%rsp)
  0x0000000116b3c474: mov    %r9,0x30(%rsp)
  0x0000000116b3c479: mov    %r10,0x28(%rsp)
  0x0000000116b3c47e: mov    %r11,0x20(%rsp)
  0x0000000116b3c483: mov    %r12,0x18(%rsp)
  0x0000000116b3c488: mov    %r13,0x10(%rsp)
  0x0000000116b3c48d: mov    %r14,0x8(%rsp)
  0x0000000116b3c492: mov    %r15,(%rsp)
  0x0000000116b3c496: movabs $0x10cc2363b,%rdi
  0x0000000116b3c4a0: movabs $0x116b3c440,%rsi
  0x0000000116b3c4aa: mov    %rsp,%rdx
  0x0000000116b3c4ad: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c4b1: callq  0x000000010c7dd830
  0x0000000116b3c4b6: hlt    
  0x0000000116b3c4b7: push   %r10
  0x0000000116b3c4b9: cmp    -0x9cf5c10(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3c4c0: je     0x0000000116b3c53d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3c4c6: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c4cb: sub    $0x80,%rsp
  0x0000000116b3c4d2: mov    %rax,0x78(%rsp)
  0x0000000116b3c4d7: mov    %rcx,0x70(%rsp)
  0x0000000116b3c4dc: mov    %rdx,0x68(%rsp)
  0x0000000116b3c4e1: mov    %rbx,0x60(%rsp)
  0x0000000116b3c4e6: mov    %rbp,0x50(%rsp)
  0x0000000116b3c4eb: mov    %rsi,0x48(%rsp)
  0x0000000116b3c4f0: mov    %rdi,0x40(%rsp)
  0x0000000116b3c4f5: mov    %r8,0x38(%rsp)
  0x0000000116b3c4fa: mov    %r9,0x30(%rsp)
  0x0000000116b3c4ff: mov    %r10,0x28(%rsp)
  0x0000000116b3c504: mov    %r11,0x20(%rsp)
  0x0000000116b3c509: mov    %r12,0x18(%rsp)
  0x0000000116b3c50e: mov    %r13,0x10(%rsp)
  0x0000000116b3c513: mov    %r14,0x8(%rsp)
  0x0000000116b3c518: mov    %r15,(%rsp)
  0x0000000116b3c51c: movabs $0x10cc63f17,%rdi
  0x0000000116b3c526: movabs $0x116b3c4c6,%rsi
  0x0000000116b3c530: mov    %rsp,%rdx
  0x0000000116b3c533: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c537: callq  0x000000010c7dd830
  0x0000000116b3c53c: hlt    
  0x0000000116b3c53d: pop    %r10
  0x0000000116b3c53f: mov    %r15,%rdi
  0x0000000116b3c542: mov    %rbp,0x290(%r15)
  0x0000000116b3c549: mov    %rax,0x280(%r15)
  0x0000000116b3c550: test   $0xf,%esp
  0x0000000116b3c556: je     0x0000000116b3c56e
  0x0000000116b3c55c: sub    $0x8,%rsp
  0x0000000116b3c560: callq  0x000000010c5881a0
  0x0000000116b3c565: add    $0x8,%rsp
  0x0000000116b3c569: jmpq   0x0000000116b3c573
  0x0000000116b3c56e: callq  0x000000010c5881a0
  0x0000000116b3c573: push   %rax
  0x0000000116b3c574: push   %rdi
  0x0000000116b3c575: push   %rsi
  0x0000000116b3c576: push   %rdx
  0x0000000116b3c577: push   %rcx
  0x0000000116b3c578: push   %r8
  0x0000000116b3c57a: push   %r9
  0x0000000116b3c57c: push   %r10
  0x0000000116b3c57e: mov    %rsp,%r10
  0x0000000116b3c581: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c585: push   %r10
  0x0000000116b3c587: push   %r11
  0x0000000116b3c589: mov    $0x109,%edi
  0x0000000116b3c58e: movabs $0x7ff815049fd5,%r10
  0x0000000116b3c598: callq  *%r10
  0x0000000116b3c59b: pop    %r11
  0x0000000116b3c59d: pop    %rsp
  0x0000000116b3c59e: pop    %r10
  0x0000000116b3c5a0: pop    %r9
  0x0000000116b3c5a2: pop    %r8
  0x0000000116b3c5a4: pop    %rcx
  0x0000000116b3c5a5: pop    %rdx
  0x0000000116b3c5a6: pop    %rsi
  0x0000000116b3c5a7: pop    %rdi
  0x0000000116b3c5a8: cmp    %rax,%r15
  0x0000000116b3c5ab: je     0x0000000116b3c628
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3c5b1: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c5b6: sub    $0x80,%rsp
  0x0000000116b3c5bd: mov    %rax,0x78(%rsp)
  0x0000000116b3c5c2: mov    %rcx,0x70(%rsp)
  0x0000000116b3c5c7: mov    %rdx,0x68(%rsp)
  0x0000000116b3c5cc: mov    %rbx,0x60(%rsp)
  0x0000000116b3c5d1: mov    %rbp,0x50(%rsp)
  0x0000000116b3c5d6: mov    %rsi,0x48(%rsp)
  0x0000000116b3c5db: mov    %rdi,0x40(%rsp)
  0x0000000116b3c5e0: mov    %r8,0x38(%rsp)
  0x0000000116b3c5e5: mov    %r9,0x30(%rsp)
  0x0000000116b3c5ea: mov    %r10,0x28(%rsp)
  0x0000000116b3c5ef: mov    %r11,0x20(%rsp)
  0x0000000116b3c5f4: mov    %r12,0x18(%rsp)
  0x0000000116b3c5f9: mov    %r13,0x10(%rsp)
  0x0000000116b3c5fe: mov    %r14,0x8(%rsp)
  0x0000000116b3c603: mov    %r15,(%rsp)
  0x0000000116b3c607: movabs $0x10cc6405e,%rdi
  0x0000000116b3c611: movabs $0x116b3c5b1,%rsi
  0x0000000116b3c61b: mov    %rsp,%rdx
  0x0000000116b3c61e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c622: callq  0x000000010c7dd830
  0x0000000116b3c627: hlt    
  0x0000000116b3c628: pop    %rax
  0x0000000116b3c629: movabs $0x0,%r10
  0x0000000116b3c633: mov    %r10,0x280(%r15)
  0x0000000116b3c63a: movabs $0x0,%r10
  0x0000000116b3c644: mov    %r10,0x290(%r15)
  0x0000000116b3c64b: movabs $0x0,%r10
  0x0000000116b3c655: mov    %r10,0x288(%r15)
  0x0000000116b3c65c: cmpq   $0x0,0x8(%r15)
  0x0000000116b3c664: je     0x0000000116b3c66f
  0x0000000116b3c66a: jmpq   0x0000000116b30420
  0x0000000116b3c66f: mov    -0x38(%rbp),%r13
  0x0000000116b3c673: mov    -0x30(%rbp),%r14
  0x0000000116b3c677: retq   
  0x0000000116b3c678: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c67d: sub    $0x80,%rsp
  0x0000000116b3c684: mov    %rax,0x78(%rsp)
  0x0000000116b3c689: mov    %rcx,0x70(%rsp)
  0x0000000116b3c68e: mov    %rdx,0x68(%rsp)
  0x0000000116b3c693: mov    %rbx,0x60(%rsp)
  0x0000000116b3c698: mov    %rbp,0x50(%rsp)
  0x0000000116b3c69d: mov    %rsi,0x48(%rsp)
  0x0000000116b3c6a2: mov    %rdi,0x40(%rsp)
  0x0000000116b3c6a7: mov    %r8,0x38(%rsp)
  0x0000000116b3c6ac: mov    %r9,0x30(%rsp)
  0x0000000116b3c6b1: mov    %r10,0x28(%rsp)
  0x0000000116b3c6b6: mov    %r11,0x20(%rsp)
  0x0000000116b3c6bb: mov    %r12,0x18(%rsp)
  0x0000000116b3c6c0: mov    %r13,0x10(%rsp)
  0x0000000116b3c6c5: mov    %r14,0x8(%rsp)
  0x0000000116b3c6ca: mov    %r15,(%rsp)
  0x0000000116b3c6ce: movabs $0x10cb763be,%rdi
  0x0000000116b3c6d8: movabs $0x116b3c678,%rsi
  0x0000000116b3c6e2: mov    %rsp,%rdx
  0x0000000116b3c6e5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c6e9: callq  0x000000010c7dd830
  0x0000000116b3c6ee: hlt    
  0x0000000116b3c6ef: movzbl 0x0(%r13),%ebx
  0x0000000116b3c6f4: movabs $0x10ce38e80,%r10
  0x0000000116b3c6fe: jmpq   *(%r10,%rbx,8)
  0x0000000116b3c702: movq   $0x0,-0x10(%rbp)
  0x0000000116b3c70a: mov    -0x38(%rbp),%r13
  0x0000000116b3c70e: mov    -0x30(%rbp),%r14
  0x0000000116b3c712: cmpq   $0x0,0x8(%r15)
  0x0000000116b3c71a: je     0x0000000116b3c9f0
  0x0000000116b3c720: callq  0x0000000116b3c72a
  0x0000000116b3c725: jmpq   0x0000000116b3c979
  0x0000000116b3c72a: lea    0x8(%rsp),%rax
  0x0000000116b3c72f: mov    %r13,-0x38(%rbp)
  0x0000000116b3c733: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3c73b: je     0x0000000116b3c7b8
  0x0000000116b3c741: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c746: sub    $0x80,%rsp
  0x0000000116b3c74d: mov    %rax,0x78(%rsp)
  0x0000000116b3c752: mov    %rcx,0x70(%rsp)
  0x0000000116b3c757: mov    %rdx,0x68(%rsp)
  0x0000000116b3c75c: mov    %rbx,0x60(%rsp)
  0x0000000116b3c761: mov    %rbp,0x50(%rsp)
  0x0000000116b3c766: mov    %rsi,0x48(%rsp)
  0x0000000116b3c76b: mov    %rdi,0x40(%rsp)
  0x0000000116b3c770: mov    %r8,0x38(%rsp)
  0x0000000116b3c775: mov    %r9,0x30(%rsp)
  0x0000000116b3c77a: mov    %r10,0x28(%rsp)
  0x0000000116b3c77f: mov    %r11,0x20(%rsp)
  0x0000000116b3c784: mov    %r12,0x18(%rsp)
  0x0000000116b3c789: mov    %r13,0x10(%rsp)
  0x0000000116b3c78e: mov    %r14,0x8(%rsp)
  0x0000000116b3c793: mov    %r15,(%rsp)
  0x0000000116b3c797: movabs $0x10cc2363b,%rdi
  0x0000000116b3c7a1: movabs $0x116b3c741,%rsi
  0x0000000116b3c7ab: mov    %rsp,%rdx
  0x0000000116b3c7ae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c7b2: callq  0x000000010c7dd830
  0x0000000116b3c7b7: hlt    
  0x0000000116b3c7b8: push   %r10
  0x0000000116b3c7ba: cmp    -0x9cf5f11(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3c7c1: je     0x0000000116b3c83e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3c7c7: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c7cc: sub    $0x80,%rsp
  0x0000000116b3c7d3: mov    %rax,0x78(%rsp)
  0x0000000116b3c7d8: mov    %rcx,0x70(%rsp)
  0x0000000116b3c7dd: mov    %rdx,0x68(%rsp)
  0x0000000116b3c7e2: mov    %rbx,0x60(%rsp)
  0x0000000116b3c7e7: mov    %rbp,0x50(%rsp)
  0x0000000116b3c7ec: mov    %rsi,0x48(%rsp)
  0x0000000116b3c7f1: mov    %rdi,0x40(%rsp)
  0x0000000116b3c7f6: mov    %r8,0x38(%rsp)
  0x0000000116b3c7fb: mov    %r9,0x30(%rsp)
  0x0000000116b3c800: mov    %r10,0x28(%rsp)
  0x0000000116b3c805: mov    %r11,0x20(%rsp)
  0x0000000116b3c80a: mov    %r12,0x18(%rsp)
  0x0000000116b3c80f: mov    %r13,0x10(%rsp)
  0x0000000116b3c814: mov    %r14,0x8(%rsp)
  0x0000000116b3c819: mov    %r15,(%rsp)
  0x0000000116b3c81d: movabs $0x10cc63f17,%rdi
  0x0000000116b3c827: movabs $0x116b3c7c7,%rsi
  0x0000000116b3c831: mov    %rsp,%rdx
  0x0000000116b3c834: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c838: callq  0x000000010c7dd830
  0x0000000116b3c83d: hlt    
  0x0000000116b3c83e: pop    %r10
  0x0000000116b3c840: mov    %r15,%rdi
  0x0000000116b3c843: mov    %rbp,0x290(%r15)
  0x0000000116b3c84a: mov    %rax,0x280(%r15)
  0x0000000116b3c851: test   $0xf,%esp
  0x0000000116b3c857: je     0x0000000116b3c86f
  0x0000000116b3c85d: sub    $0x8,%rsp
  0x0000000116b3c861: callq  0x000000010c5881a0
  0x0000000116b3c866: add    $0x8,%rsp
  0x0000000116b3c86a: jmpq   0x0000000116b3c874
  0x0000000116b3c86f: callq  0x000000010c5881a0
  0x0000000116b3c874: push   %rax
  0x0000000116b3c875: push   %rdi
  0x0000000116b3c876: push   %rsi
  0x0000000116b3c877: push   %rdx
  0x0000000116b3c878: push   %rcx
  0x0000000116b3c879: push   %r8
  0x0000000116b3c87b: push   %r9
  0x0000000116b3c87d: push   %r10
  0x0000000116b3c87f: mov    %rsp,%r10
  0x0000000116b3c882: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c886: push   %r10
  0x0000000116b3c888: push   %r11
  0x0000000116b3c88a: mov    $0x109,%edi
  0x0000000116b3c88f: movabs $0x7ff815049fd5,%r10
  0x0000000116b3c899: callq  *%r10
  0x0000000116b3c89c: pop    %r11
  0x0000000116b3c89e: pop    %rsp
  0x0000000116b3c89f: pop    %r10
  0x0000000116b3c8a1: pop    %r9
  0x0000000116b3c8a3: pop    %r8
  0x0000000116b3c8a5: pop    %rcx
  0x0000000116b3c8a6: pop    %rdx
  0x0000000116b3c8a7: pop    %rsi
  0x0000000116b3c8a8: pop    %rdi
  0x0000000116b3c8a9: cmp    %rax,%r15
  0x0000000116b3c8ac: je     0x0000000116b3c929
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3c8b2: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c8b7: sub    $0x80,%rsp
  0x0000000116b3c8be: mov    %rax,0x78(%rsp)
  0x0000000116b3c8c3: mov    %rcx,0x70(%rsp)
  0x0000000116b3c8c8: mov    %rdx,0x68(%rsp)
  0x0000000116b3c8cd: mov    %rbx,0x60(%rsp)
  0x0000000116b3c8d2: mov    %rbp,0x50(%rsp)
  0x0000000116b3c8d7: mov    %rsi,0x48(%rsp)
  0x0000000116b3c8dc: mov    %rdi,0x40(%rsp)
  0x0000000116b3c8e1: mov    %r8,0x38(%rsp)
  0x0000000116b3c8e6: mov    %r9,0x30(%rsp)
  0x0000000116b3c8eb: mov    %r10,0x28(%rsp)
  0x0000000116b3c8f0: mov    %r11,0x20(%rsp)
  0x0000000116b3c8f5: mov    %r12,0x18(%rsp)
  0x0000000116b3c8fa: mov    %r13,0x10(%rsp)
  0x0000000116b3c8ff: mov    %r14,0x8(%rsp)
  0x0000000116b3c904: mov    %r15,(%rsp)
  0x0000000116b3c908: movabs $0x10cc6405e,%rdi
  0x0000000116b3c912: movabs $0x116b3c8b2,%rsi
  0x0000000116b3c91c: mov    %rsp,%rdx
  0x0000000116b3c91f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c923: callq  0x000000010c7dd830
  0x0000000116b3c928: hlt    
  0x0000000116b3c929: pop    %rax
  0x0000000116b3c92a: movabs $0x0,%r10
  0x0000000116b3c934: mov    %r10,0x280(%r15)
  0x0000000116b3c93b: movabs $0x0,%r10
  0x0000000116b3c945: mov    %r10,0x290(%r15)
  0x0000000116b3c94c: movabs $0x0,%r10
  0x0000000116b3c956: mov    %r10,0x288(%r15)
  0x0000000116b3c95d: cmpq   $0x0,0x8(%r15)
  0x0000000116b3c965: je     0x0000000116b3c970
  0x0000000116b3c96b: jmpq   0x0000000116b30420
  0x0000000116b3c970: mov    -0x38(%rbp),%r13
  0x0000000116b3c974: mov    -0x30(%rbp),%r14
  0x0000000116b3c978: retq   
  0x0000000116b3c979: mov    %rsp,-0x28(%rsp)
  0x0000000116b3c97e: sub    $0x80,%rsp
  0x0000000116b3c985: mov    %rax,0x78(%rsp)
  0x0000000116b3c98a: mov    %rcx,0x70(%rsp)
  0x0000000116b3c98f: mov    %rdx,0x68(%rsp)
  0x0000000116b3c994: mov    %rbx,0x60(%rsp)
  0x0000000116b3c999: mov    %rbp,0x50(%rsp)
  0x0000000116b3c99e: mov    %rsi,0x48(%rsp)
  0x0000000116b3c9a3: mov    %rdi,0x40(%rsp)
  0x0000000116b3c9a8: mov    %r8,0x38(%rsp)
  0x0000000116b3c9ad: mov    %r9,0x30(%rsp)
  0x0000000116b3c9b2: mov    %r10,0x28(%rsp)
  0x0000000116b3c9b7: mov    %r11,0x20(%rsp)
  0x0000000116b3c9bc: mov    %r12,0x18(%rsp)
  0x0000000116b3c9c1: mov    %r13,0x10(%rsp)
  0x0000000116b3c9c6: mov    %r14,0x8(%rsp)
  0x0000000116b3c9cb: mov    %r15,(%rsp)
  0x0000000116b3c9cf: movabs $0x10cb763be,%rdi
  0x0000000116b3c9d9: movabs $0x116b3c979,%rsi
  0x0000000116b3c9e3: mov    %rsp,%rdx
  0x0000000116b3c9e6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3c9ea: callq  0x000000010c7dd830
  0x0000000116b3c9ef: hlt    
  0x0000000116b3c9f0: movzbl 0x0(%r13),%ebx
  0x0000000116b3c9f5: movabs $0x10ce38e80,%r10
  0x0000000116b3c9ff: jmpq   *(%r10,%rbx,8)
  0x0000000116b3ca03: movq   $0x0,-0x10(%rbp)
  0x0000000116b3ca0b: mov    -0x38(%rbp),%r13
  0x0000000116b3ca0f: mov    -0x30(%rbp),%r14
  0x0000000116b3ca13: cmpq   $0x0,0x8(%r15)
  0x0000000116b3ca1b: je     0x0000000116b3ccf1
  0x0000000116b3ca21: callq  0x0000000116b3ca2b
  0x0000000116b3ca26: jmpq   0x0000000116b3cc7a
  0x0000000116b3ca2b: lea    0x8(%rsp),%rax
  0x0000000116b3ca30: mov    %r13,-0x38(%rbp)
  0x0000000116b3ca34: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3ca3c: je     0x0000000116b3cab9
  0x0000000116b3ca42: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ca47: sub    $0x80,%rsp
  0x0000000116b3ca4e: mov    %rax,0x78(%rsp)
  0x0000000116b3ca53: mov    %rcx,0x70(%rsp)
  0x0000000116b3ca58: mov    %rdx,0x68(%rsp)
  0x0000000116b3ca5d: mov    %rbx,0x60(%rsp)
  0x0000000116b3ca62: mov    %rbp,0x50(%rsp)
  0x0000000116b3ca67: mov    %rsi,0x48(%rsp)
  0x0000000116b3ca6c: mov    %rdi,0x40(%rsp)
  0x0000000116b3ca71: mov    %r8,0x38(%rsp)
  0x0000000116b3ca76: mov    %r9,0x30(%rsp)
  0x0000000116b3ca7b: mov    %r10,0x28(%rsp)
  0x0000000116b3ca80: mov    %r11,0x20(%rsp)
  0x0000000116b3ca85: mov    %r12,0x18(%rsp)
  0x0000000116b3ca8a: mov    %r13,0x10(%rsp)
  0x0000000116b3ca8f: mov    %r14,0x8(%rsp)
  0x0000000116b3ca94: mov    %r15,(%rsp)
  0x0000000116b3ca98: movabs $0x10cc2363b,%rdi
  0x0000000116b3caa2: movabs $0x116b3ca42,%rsi
  0x0000000116b3caac: mov    %rsp,%rdx
  0x0000000116b3caaf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cab3: callq  0x000000010c7dd830
  0x0000000116b3cab8: hlt    
  0x0000000116b3cab9: push   %r10
  0x0000000116b3cabb: cmp    -0x9cf6212(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3cac2: je     0x0000000116b3cb3f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3cac8: mov    %rsp,-0x28(%rsp)
  0x0000000116b3cacd: sub    $0x80,%rsp
  0x0000000116b3cad4: mov    %rax,0x78(%rsp)
  0x0000000116b3cad9: mov    %rcx,0x70(%rsp)
  0x0000000116b3cade: mov    %rdx,0x68(%rsp)
  0x0000000116b3cae3: mov    %rbx,0x60(%rsp)
  0x0000000116b3cae8: mov    %rbp,0x50(%rsp)
  0x0000000116b3caed: mov    %rsi,0x48(%rsp)
  0x0000000116b3caf2: mov    %rdi,0x40(%rsp)
  0x0000000116b3caf7: mov    %r8,0x38(%rsp)
  0x0000000116b3cafc: mov    %r9,0x30(%rsp)
  0x0000000116b3cb01: mov    %r10,0x28(%rsp)
  0x0000000116b3cb06: mov    %r11,0x20(%rsp)
  0x0000000116b3cb0b: mov    %r12,0x18(%rsp)
  0x0000000116b3cb10: mov    %r13,0x10(%rsp)
  0x0000000116b3cb15: mov    %r14,0x8(%rsp)
  0x0000000116b3cb1a: mov    %r15,(%rsp)
  0x0000000116b3cb1e: movabs $0x10cc63f17,%rdi
  0x0000000116b3cb28: movabs $0x116b3cac8,%rsi
  0x0000000116b3cb32: mov    %rsp,%rdx
  0x0000000116b3cb35: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cb39: callq  0x000000010c7dd830
  0x0000000116b3cb3e: hlt    
  0x0000000116b3cb3f: pop    %r10
  0x0000000116b3cb41: mov    %r15,%rdi
  0x0000000116b3cb44: mov    %rbp,0x290(%r15)
  0x0000000116b3cb4b: mov    %rax,0x280(%r15)
  0x0000000116b3cb52: test   $0xf,%esp
  0x0000000116b3cb58: je     0x0000000116b3cb70
  0x0000000116b3cb5e: sub    $0x8,%rsp
  0x0000000116b3cb62: callq  0x000000010c5881a0
  0x0000000116b3cb67: add    $0x8,%rsp
  0x0000000116b3cb6b: jmpq   0x0000000116b3cb75
  0x0000000116b3cb70: callq  0x000000010c5881a0
  0x0000000116b3cb75: push   %rax
  0x0000000116b3cb76: push   %rdi
  0x0000000116b3cb77: push   %rsi
  0x0000000116b3cb78: push   %rdx
  0x0000000116b3cb79: push   %rcx
  0x0000000116b3cb7a: push   %r8
  0x0000000116b3cb7c: push   %r9
  0x0000000116b3cb7e: push   %r10
  0x0000000116b3cb80: mov    %rsp,%r10
  0x0000000116b3cb83: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cb87: push   %r10
  0x0000000116b3cb89: push   %r11
  0x0000000116b3cb8b: mov    $0x109,%edi
  0x0000000116b3cb90: movabs $0x7ff815049fd5,%r10
  0x0000000116b3cb9a: callq  *%r10
  0x0000000116b3cb9d: pop    %r11
  0x0000000116b3cb9f: pop    %rsp
  0x0000000116b3cba0: pop    %r10
  0x0000000116b3cba2: pop    %r9
  0x0000000116b3cba4: pop    %r8
  0x0000000116b3cba6: pop    %rcx
  0x0000000116b3cba7: pop    %rdx
  0x0000000116b3cba8: pop    %rsi
  0x0000000116b3cba9: pop    %rdi
  0x0000000116b3cbaa: cmp    %rax,%r15
  0x0000000116b3cbad: je     0x0000000116b3cc2a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3cbb3: mov    %rsp,-0x28(%rsp)
  0x0000000116b3cbb8: sub    $0x80,%rsp
  0x0000000116b3cbbf: mov    %rax,0x78(%rsp)
  0x0000000116b3cbc4: mov    %rcx,0x70(%rsp)
  0x0000000116b3cbc9: mov    %rdx,0x68(%rsp)
  0x0000000116b3cbce: mov    %rbx,0x60(%rsp)
  0x0000000116b3cbd3: mov    %rbp,0x50(%rsp)
  0x0000000116b3cbd8: mov    %rsi,0x48(%rsp)
  0x0000000116b3cbdd: mov    %rdi,0x40(%rsp)
  0x0000000116b3cbe2: mov    %r8,0x38(%rsp)
  0x0000000116b3cbe7: mov    %r9,0x30(%rsp)
  0x0000000116b3cbec: mov    %r10,0x28(%rsp)
  0x0000000116b3cbf1: mov    %r11,0x20(%rsp)
  0x0000000116b3cbf6: mov    %r12,0x18(%rsp)
  0x0000000116b3cbfb: mov    %r13,0x10(%rsp)
  0x0000000116b3cc00: mov    %r14,0x8(%rsp)
  0x0000000116b3cc05: mov    %r15,(%rsp)
  0x0000000116b3cc09: movabs $0x10cc6405e,%rdi
  0x0000000116b3cc13: movabs $0x116b3cbb3,%rsi
  0x0000000116b3cc1d: mov    %rsp,%rdx
  0x0000000116b3cc20: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cc24: callq  0x000000010c7dd830
  0x0000000116b3cc29: hlt    
  0x0000000116b3cc2a: pop    %rax
  0x0000000116b3cc2b: movabs $0x0,%r10
  0x0000000116b3cc35: mov    %r10,0x280(%r15)
  0x0000000116b3cc3c: movabs $0x0,%r10
  0x0000000116b3cc46: mov    %r10,0x290(%r15)
  0x0000000116b3cc4d: movabs $0x0,%r10
  0x0000000116b3cc57: mov    %r10,0x288(%r15)
  0x0000000116b3cc5e: cmpq   $0x0,0x8(%r15)
  0x0000000116b3cc66: je     0x0000000116b3cc71
  0x0000000116b3cc6c: jmpq   0x0000000116b30420
  0x0000000116b3cc71: mov    -0x38(%rbp),%r13
  0x0000000116b3cc75: mov    -0x30(%rbp),%r14
  0x0000000116b3cc79: retq   
  0x0000000116b3cc7a: mov    %rsp,-0x28(%rsp)
  0x0000000116b3cc7f: sub    $0x80,%rsp
  0x0000000116b3cc86: mov    %rax,0x78(%rsp)
  0x0000000116b3cc8b: mov    %rcx,0x70(%rsp)
  0x0000000116b3cc90: mov    %rdx,0x68(%rsp)
  0x0000000116b3cc95: mov    %rbx,0x60(%rsp)
  0x0000000116b3cc9a: mov    %rbp,0x50(%rsp)
  0x0000000116b3cc9f: mov    %rsi,0x48(%rsp)
  0x0000000116b3cca4: mov    %rdi,0x40(%rsp)
  0x0000000116b3cca9: mov    %r8,0x38(%rsp)
  0x0000000116b3ccae: mov    %r9,0x30(%rsp)
  0x0000000116b3ccb3: mov    %r10,0x28(%rsp)
  0x0000000116b3ccb8: mov    %r11,0x20(%rsp)
  0x0000000116b3ccbd: mov    %r12,0x18(%rsp)
  0x0000000116b3ccc2: mov    %r13,0x10(%rsp)
  0x0000000116b3ccc7: mov    %r14,0x8(%rsp)
  0x0000000116b3cccc: mov    %r15,(%rsp)
  0x0000000116b3ccd0: movabs $0x10cb763be,%rdi
  0x0000000116b3ccda: movabs $0x116b3cc7a,%rsi
  0x0000000116b3cce4: mov    %rsp,%rdx
  0x0000000116b3cce7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cceb: callq  0x000000010c7dd830
  0x0000000116b3ccf0: hlt    
  0x0000000116b3ccf1: movzbl 0x0(%r13),%ebx
  0x0000000116b3ccf6: movabs $0x10ce38e80,%r10
  0x0000000116b3cd00: jmpq   *(%r10,%rbx,8)
  0x0000000116b3cd04: movq   $0x0,-0x10(%rbp)
  0x0000000116b3cd0c: mov    -0x38(%rbp),%r13
  0x0000000116b3cd10: mov    -0x30(%rbp),%r14
  0x0000000116b3cd14: cmpq   $0x0,0x8(%r15)
  0x0000000116b3cd1c: je     0x0000000116b3cff2
  0x0000000116b3cd22: callq  0x0000000116b3cd2c
  0x0000000116b3cd27: jmpq   0x0000000116b3cf7b
  0x0000000116b3cd2c: lea    0x8(%rsp),%rax
  0x0000000116b3cd31: mov    %r13,-0x38(%rbp)
  0x0000000116b3cd35: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3cd3d: je     0x0000000116b3cdba
  0x0000000116b3cd43: mov    %rsp,-0x28(%rsp)
  0x0000000116b3cd48: sub    $0x80,%rsp
  0x0000000116b3cd4f: mov    %rax,0x78(%rsp)
  0x0000000116b3cd54: mov    %rcx,0x70(%rsp)
  0x0000000116b3cd59: mov    %rdx,0x68(%rsp)
  0x0000000116b3cd5e: mov    %rbx,0x60(%rsp)
  0x0000000116b3cd63: mov    %rbp,0x50(%rsp)
  0x0000000116b3cd68: mov    %rsi,0x48(%rsp)
  0x0000000116b3cd6d: mov    %rdi,0x40(%rsp)
  0x0000000116b3cd72: mov    %r8,0x38(%rsp)
  0x0000000116b3cd77: mov    %r9,0x30(%rsp)
  0x0000000116b3cd7c: mov    %r10,0x28(%rsp)
  0x0000000116b3cd81: mov    %r11,0x20(%rsp)
  0x0000000116b3cd86: mov    %r12,0x18(%rsp)
  0x0000000116b3cd8b: mov    %r13,0x10(%rsp)
  0x0000000116b3cd90: mov    %r14,0x8(%rsp)
  0x0000000116b3cd95: mov    %r15,(%rsp)
  0x0000000116b3cd99: movabs $0x10cc2363b,%rdi
  0x0000000116b3cda3: movabs $0x116b3cd43,%rsi
  0x0000000116b3cdad: mov    %rsp,%rdx
  0x0000000116b3cdb0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cdb4: callq  0x000000010c7dd830
  0x0000000116b3cdb9: hlt    
  0x0000000116b3cdba: push   %r10
  0x0000000116b3cdbc: cmp    -0x9cf6513(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3cdc3: je     0x0000000116b3ce40
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3cdc9: mov    %rsp,-0x28(%rsp)
  0x0000000116b3cdce: sub    $0x80,%rsp
  0x0000000116b3cdd5: mov    %rax,0x78(%rsp)
  0x0000000116b3cdda: mov    %rcx,0x70(%rsp)
  0x0000000116b3cddf: mov    %rdx,0x68(%rsp)
  0x0000000116b3cde4: mov    %rbx,0x60(%rsp)
  0x0000000116b3cde9: mov    %rbp,0x50(%rsp)
  0x0000000116b3cdee: mov    %rsi,0x48(%rsp)
  0x0000000116b3cdf3: mov    %rdi,0x40(%rsp)
  0x0000000116b3cdf8: mov    %r8,0x38(%rsp)
  0x0000000116b3cdfd: mov    %r9,0x30(%rsp)
  0x0000000116b3ce02: mov    %r10,0x28(%rsp)
  0x0000000116b3ce07: mov    %r11,0x20(%rsp)
  0x0000000116b3ce0c: mov    %r12,0x18(%rsp)
  0x0000000116b3ce11: mov    %r13,0x10(%rsp)
  0x0000000116b3ce16: mov    %r14,0x8(%rsp)
  0x0000000116b3ce1b: mov    %r15,(%rsp)
  0x0000000116b3ce1f: movabs $0x10cc63f17,%rdi
  0x0000000116b3ce29: movabs $0x116b3cdc9,%rsi
  0x0000000116b3ce33: mov    %rsp,%rdx
  0x0000000116b3ce36: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ce3a: callq  0x000000010c7dd830
  0x0000000116b3ce3f: hlt    
  0x0000000116b3ce40: pop    %r10
  0x0000000116b3ce42: mov    %r15,%rdi
  0x0000000116b3ce45: mov    %rbp,0x290(%r15)
  0x0000000116b3ce4c: mov    %rax,0x280(%r15)
  0x0000000116b3ce53: test   $0xf,%esp
  0x0000000116b3ce59: je     0x0000000116b3ce71
  0x0000000116b3ce5f: sub    $0x8,%rsp
  0x0000000116b3ce63: callq  0x000000010c5881a0
  0x0000000116b3ce68: add    $0x8,%rsp
  0x0000000116b3ce6c: jmpq   0x0000000116b3ce76
  0x0000000116b3ce71: callq  0x000000010c5881a0
  0x0000000116b3ce76: push   %rax
  0x0000000116b3ce77: push   %rdi
  0x0000000116b3ce78: push   %rsi
  0x0000000116b3ce79: push   %rdx
  0x0000000116b3ce7a: push   %rcx
  0x0000000116b3ce7b: push   %r8
  0x0000000116b3ce7d: push   %r9
  0x0000000116b3ce7f: push   %r10
  0x0000000116b3ce81: mov    %rsp,%r10
  0x0000000116b3ce84: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ce88: push   %r10
  0x0000000116b3ce8a: push   %r11
  0x0000000116b3ce8c: mov    $0x109,%edi
  0x0000000116b3ce91: movabs $0x7ff815049fd5,%r10
  0x0000000116b3ce9b: callq  *%r10
  0x0000000116b3ce9e: pop    %r11
  0x0000000116b3cea0: pop    %rsp
  0x0000000116b3cea1: pop    %r10
  0x0000000116b3cea3: pop    %r9
  0x0000000116b3cea5: pop    %r8
  0x0000000116b3cea7: pop    %rcx
  0x0000000116b3cea8: pop    %rdx
  0x0000000116b3cea9: pop    %rsi
  0x0000000116b3ceaa: pop    %rdi
  0x0000000116b3ceab: cmp    %rax,%r15
  0x0000000116b3ceae: je     0x0000000116b3cf2b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3ceb4: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ceb9: sub    $0x80,%rsp
  0x0000000116b3cec0: mov    %rax,0x78(%rsp)
  0x0000000116b3cec5: mov    %rcx,0x70(%rsp)
  0x0000000116b3ceca: mov    %rdx,0x68(%rsp)
  0x0000000116b3cecf: mov    %rbx,0x60(%rsp)
  0x0000000116b3ced4: mov    %rbp,0x50(%rsp)
  0x0000000116b3ced9: mov    %rsi,0x48(%rsp)
  0x0000000116b3cede: mov    %rdi,0x40(%rsp)
  0x0000000116b3cee3: mov    %r8,0x38(%rsp)
  0x0000000116b3cee8: mov    %r9,0x30(%rsp)
  0x0000000116b3ceed: mov    %r10,0x28(%rsp)
  0x0000000116b3cef2: mov    %r11,0x20(%rsp)
  0x0000000116b3cef7: mov    %r12,0x18(%rsp)
  0x0000000116b3cefc: mov    %r13,0x10(%rsp)
  0x0000000116b3cf01: mov    %r14,0x8(%rsp)
  0x0000000116b3cf06: mov    %r15,(%rsp)
  0x0000000116b3cf0a: movabs $0x10cc6405e,%rdi
  0x0000000116b3cf14: movabs $0x116b3ceb4,%rsi
  0x0000000116b3cf1e: mov    %rsp,%rdx
  0x0000000116b3cf21: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cf25: callq  0x000000010c7dd830
  0x0000000116b3cf2a: hlt    
  0x0000000116b3cf2b: pop    %rax
  0x0000000116b3cf2c: movabs $0x0,%r10
  0x0000000116b3cf36: mov    %r10,0x280(%r15)
  0x0000000116b3cf3d: movabs $0x0,%r10
  0x0000000116b3cf47: mov    %r10,0x290(%r15)
  0x0000000116b3cf4e: movabs $0x0,%r10
  0x0000000116b3cf58: mov    %r10,0x288(%r15)
  0x0000000116b3cf5f: cmpq   $0x0,0x8(%r15)
  0x0000000116b3cf67: je     0x0000000116b3cf72
  0x0000000116b3cf6d: jmpq   0x0000000116b30420
  0x0000000116b3cf72: mov    -0x38(%rbp),%r13
  0x0000000116b3cf76: mov    -0x30(%rbp),%r14
  0x0000000116b3cf7a: retq   
  0x0000000116b3cf7b: mov    %rsp,-0x28(%rsp)
  0x0000000116b3cf80: sub    $0x80,%rsp
  0x0000000116b3cf87: mov    %rax,0x78(%rsp)
  0x0000000116b3cf8c: mov    %rcx,0x70(%rsp)
  0x0000000116b3cf91: mov    %rdx,0x68(%rsp)
  0x0000000116b3cf96: mov    %rbx,0x60(%rsp)
  0x0000000116b3cf9b: mov    %rbp,0x50(%rsp)
  0x0000000116b3cfa0: mov    %rsi,0x48(%rsp)
  0x0000000116b3cfa5: mov    %rdi,0x40(%rsp)
  0x0000000116b3cfaa: mov    %r8,0x38(%rsp)
  0x0000000116b3cfaf: mov    %r9,0x30(%rsp)
  0x0000000116b3cfb4: mov    %r10,0x28(%rsp)
  0x0000000116b3cfb9: mov    %r11,0x20(%rsp)
  0x0000000116b3cfbe: mov    %r12,0x18(%rsp)
  0x0000000116b3cfc3: mov    %r13,0x10(%rsp)
  0x0000000116b3cfc8: mov    %r14,0x8(%rsp)
  0x0000000116b3cfcd: mov    %r15,(%rsp)
  0x0000000116b3cfd1: movabs $0x10cb763be,%rdi
  0x0000000116b3cfdb: movabs $0x116b3cf7b,%rsi
  0x0000000116b3cfe5: mov    %rsp,%rdx
  0x0000000116b3cfe8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3cfec: callq  0x000000010c7dd830
  0x0000000116b3cff1: hlt    
  0x0000000116b3cff2: movzbl 0x0(%r13),%ebx
  0x0000000116b3cff7: movabs $0x10ce3ae80,%r10
  0x0000000116b3d001: jmpq   *(%r10,%rbx,8)
  0x0000000116b3d005: movq   $0x0,-0x10(%rbp)
  0x0000000116b3d00d: mov    -0x38(%rbp),%r13
  0x0000000116b3d011: mov    -0x30(%rbp),%r14
  0x0000000116b3d015: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d01d: je     0x0000000116b3d2f3
  0x0000000116b3d023: callq  0x0000000116b3d02d
  0x0000000116b3d028: jmpq   0x0000000116b3d27c
  0x0000000116b3d02d: lea    0x8(%rsp),%rax
  0x0000000116b3d032: mov    %r13,-0x38(%rbp)
  0x0000000116b3d036: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3d03e: je     0x0000000116b3d0bb
  0x0000000116b3d044: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d049: sub    $0x80,%rsp
  0x0000000116b3d050: mov    %rax,0x78(%rsp)
  0x0000000116b3d055: mov    %rcx,0x70(%rsp)
  0x0000000116b3d05a: mov    %rdx,0x68(%rsp)
  0x0000000116b3d05f: mov    %rbx,0x60(%rsp)
  0x0000000116b3d064: mov    %rbp,0x50(%rsp)
  0x0000000116b3d069: mov    %rsi,0x48(%rsp)
  0x0000000116b3d06e: mov    %rdi,0x40(%rsp)
  0x0000000116b3d073: mov    %r8,0x38(%rsp)
  0x0000000116b3d078: mov    %r9,0x30(%rsp)
  0x0000000116b3d07d: mov    %r10,0x28(%rsp)
  0x0000000116b3d082: mov    %r11,0x20(%rsp)
  0x0000000116b3d087: mov    %r12,0x18(%rsp)
  0x0000000116b3d08c: mov    %r13,0x10(%rsp)
  0x0000000116b3d091: mov    %r14,0x8(%rsp)
  0x0000000116b3d096: mov    %r15,(%rsp)
  0x0000000116b3d09a: movabs $0x10cc2363b,%rdi
  0x0000000116b3d0a4: movabs $0x116b3d044,%rsi
  0x0000000116b3d0ae: mov    %rsp,%rdx
  0x0000000116b3d0b1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d0b5: callq  0x000000010c7dd830
  0x0000000116b3d0ba: hlt    
  0x0000000116b3d0bb: push   %r10
  0x0000000116b3d0bd: cmp    -0x9cf6814(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3d0c4: je     0x0000000116b3d141
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3d0ca: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d0cf: sub    $0x80,%rsp
  0x0000000116b3d0d6: mov    %rax,0x78(%rsp)
  0x0000000116b3d0db: mov    %rcx,0x70(%rsp)
  0x0000000116b3d0e0: mov    %rdx,0x68(%rsp)
  0x0000000116b3d0e5: mov    %rbx,0x60(%rsp)
  0x0000000116b3d0ea: mov    %rbp,0x50(%rsp)
  0x0000000116b3d0ef: mov    %rsi,0x48(%rsp)
  0x0000000116b3d0f4: mov    %rdi,0x40(%rsp)
  0x0000000116b3d0f9: mov    %r8,0x38(%rsp)
  0x0000000116b3d0fe: mov    %r9,0x30(%rsp)
  0x0000000116b3d103: mov    %r10,0x28(%rsp)
  0x0000000116b3d108: mov    %r11,0x20(%rsp)
  0x0000000116b3d10d: mov    %r12,0x18(%rsp)
  0x0000000116b3d112: mov    %r13,0x10(%rsp)
  0x0000000116b3d117: mov    %r14,0x8(%rsp)
  0x0000000116b3d11c: mov    %r15,(%rsp)
  0x0000000116b3d120: movabs $0x10cc63f17,%rdi
  0x0000000116b3d12a: movabs $0x116b3d0ca,%rsi
  0x0000000116b3d134: mov    %rsp,%rdx
  0x0000000116b3d137: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d13b: callq  0x000000010c7dd830
  0x0000000116b3d140: hlt    
  0x0000000116b3d141: pop    %r10
  0x0000000116b3d143: mov    %r15,%rdi
  0x0000000116b3d146: mov    %rbp,0x290(%r15)
  0x0000000116b3d14d: mov    %rax,0x280(%r15)
  0x0000000116b3d154: test   $0xf,%esp
  0x0000000116b3d15a: je     0x0000000116b3d172
  0x0000000116b3d160: sub    $0x8,%rsp
  0x0000000116b3d164: callq  0x000000010c5881a0
  0x0000000116b3d169: add    $0x8,%rsp
  0x0000000116b3d16d: jmpq   0x0000000116b3d177
  0x0000000116b3d172: callq  0x000000010c5881a0
  0x0000000116b3d177: push   %rax
  0x0000000116b3d178: push   %rdi
  0x0000000116b3d179: push   %rsi
  0x0000000116b3d17a: push   %rdx
  0x0000000116b3d17b: push   %rcx
  0x0000000116b3d17c: push   %r8
  0x0000000116b3d17e: push   %r9
  0x0000000116b3d180: push   %r10
  0x0000000116b3d182: mov    %rsp,%r10
  0x0000000116b3d185: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d189: push   %r10
  0x0000000116b3d18b: push   %r11
  0x0000000116b3d18d: mov    $0x109,%edi
  0x0000000116b3d192: movabs $0x7ff815049fd5,%r10
  0x0000000116b3d19c: callq  *%r10
  0x0000000116b3d19f: pop    %r11
  0x0000000116b3d1a1: pop    %rsp
  0x0000000116b3d1a2: pop    %r10
  0x0000000116b3d1a4: pop    %r9
  0x0000000116b3d1a6: pop    %r8
  0x0000000116b3d1a8: pop    %rcx
  0x0000000116b3d1a9: pop    %rdx
  0x0000000116b3d1aa: pop    %rsi
  0x0000000116b3d1ab: pop    %rdi
  0x0000000116b3d1ac: cmp    %rax,%r15
  0x0000000116b3d1af: je     0x0000000116b3d22c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3d1b5: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d1ba: sub    $0x80,%rsp
  0x0000000116b3d1c1: mov    %rax,0x78(%rsp)
  0x0000000116b3d1c6: mov    %rcx,0x70(%rsp)
  0x0000000116b3d1cb: mov    %rdx,0x68(%rsp)
  0x0000000116b3d1d0: mov    %rbx,0x60(%rsp)
  0x0000000116b3d1d5: mov    %rbp,0x50(%rsp)
  0x0000000116b3d1da: mov    %rsi,0x48(%rsp)
  0x0000000116b3d1df: mov    %rdi,0x40(%rsp)
  0x0000000116b3d1e4: mov    %r8,0x38(%rsp)
  0x0000000116b3d1e9: mov    %r9,0x30(%rsp)
  0x0000000116b3d1ee: mov    %r10,0x28(%rsp)
  0x0000000116b3d1f3: mov    %r11,0x20(%rsp)
  0x0000000116b3d1f8: mov    %r12,0x18(%rsp)
  0x0000000116b3d1fd: mov    %r13,0x10(%rsp)
  0x0000000116b3d202: mov    %r14,0x8(%rsp)
  0x0000000116b3d207: mov    %r15,(%rsp)
  0x0000000116b3d20b: movabs $0x10cc6405e,%rdi
  0x0000000116b3d215: movabs $0x116b3d1b5,%rsi
  0x0000000116b3d21f: mov    %rsp,%rdx
  0x0000000116b3d222: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d226: callq  0x000000010c7dd830
  0x0000000116b3d22b: hlt    
  0x0000000116b3d22c: pop    %rax
  0x0000000116b3d22d: movabs $0x0,%r10
  0x0000000116b3d237: mov    %r10,0x280(%r15)
  0x0000000116b3d23e: movabs $0x0,%r10
  0x0000000116b3d248: mov    %r10,0x290(%r15)
  0x0000000116b3d24f: movabs $0x0,%r10
  0x0000000116b3d259: mov    %r10,0x288(%r15)
  0x0000000116b3d260: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d268: je     0x0000000116b3d273
  0x0000000116b3d26e: jmpq   0x0000000116b30420
  0x0000000116b3d273: mov    -0x38(%rbp),%r13
  0x0000000116b3d277: mov    -0x30(%rbp),%r14
  0x0000000116b3d27b: retq   
  0x0000000116b3d27c: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d281: sub    $0x80,%rsp
  0x0000000116b3d288: mov    %rax,0x78(%rsp)
  0x0000000116b3d28d: mov    %rcx,0x70(%rsp)
  0x0000000116b3d292: mov    %rdx,0x68(%rsp)
  0x0000000116b3d297: mov    %rbx,0x60(%rsp)
  0x0000000116b3d29c: mov    %rbp,0x50(%rsp)
  0x0000000116b3d2a1: mov    %rsi,0x48(%rsp)
  0x0000000116b3d2a6: mov    %rdi,0x40(%rsp)
  0x0000000116b3d2ab: mov    %r8,0x38(%rsp)
  0x0000000116b3d2b0: mov    %r9,0x30(%rsp)
  0x0000000116b3d2b5: mov    %r10,0x28(%rsp)
  0x0000000116b3d2ba: mov    %r11,0x20(%rsp)
  0x0000000116b3d2bf: mov    %r12,0x18(%rsp)
  0x0000000116b3d2c4: mov    %r13,0x10(%rsp)
  0x0000000116b3d2c9: mov    %r14,0x8(%rsp)
  0x0000000116b3d2ce: mov    %r15,(%rsp)
  0x0000000116b3d2d2: movabs $0x10cb763be,%rdi
  0x0000000116b3d2dc: movabs $0x116b3d27c,%rsi
  0x0000000116b3d2e6: mov    %rsp,%rdx
  0x0000000116b3d2e9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d2ed: callq  0x000000010c7dd830
  0x0000000116b3d2f2: hlt    
  0x0000000116b3d2f3: movzbl 0x0(%r13),%ebx
  0x0000000116b3d2f8: movabs $0x10ce38e80,%r10
  0x0000000116b3d302: jmpq   *(%r10,%rbx,8)
  0x0000000116b3d306: movq   $0x0,-0x10(%rbp)
  0x0000000116b3d30e: mov    -0x38(%rbp),%r13
  0x0000000116b3d312: mov    -0x30(%rbp),%r14
  0x0000000116b3d316: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d31e: je     0x0000000116b3d5f4
  0x0000000116b3d324: callq  0x0000000116b3d32e
  0x0000000116b3d329: jmpq   0x0000000116b3d57d
  0x0000000116b3d32e: lea    0x8(%rsp),%rax
  0x0000000116b3d333: mov    %r13,-0x38(%rbp)
  0x0000000116b3d337: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3d33f: je     0x0000000116b3d3bc
  0x0000000116b3d345: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d34a: sub    $0x80,%rsp
  0x0000000116b3d351: mov    %rax,0x78(%rsp)
  0x0000000116b3d356: mov    %rcx,0x70(%rsp)
  0x0000000116b3d35b: mov    %rdx,0x68(%rsp)
  0x0000000116b3d360: mov    %rbx,0x60(%rsp)
  0x0000000116b3d365: mov    %rbp,0x50(%rsp)
  0x0000000116b3d36a: mov    %rsi,0x48(%rsp)
  0x0000000116b3d36f: mov    %rdi,0x40(%rsp)
  0x0000000116b3d374: mov    %r8,0x38(%rsp)
  0x0000000116b3d379: mov    %r9,0x30(%rsp)
  0x0000000116b3d37e: mov    %r10,0x28(%rsp)
  0x0000000116b3d383: mov    %r11,0x20(%rsp)
  0x0000000116b3d388: mov    %r12,0x18(%rsp)
  0x0000000116b3d38d: mov    %r13,0x10(%rsp)
  0x0000000116b3d392: mov    %r14,0x8(%rsp)
  0x0000000116b3d397: mov    %r15,(%rsp)
  0x0000000116b3d39b: movabs $0x10cc2363b,%rdi
  0x0000000116b3d3a5: movabs $0x116b3d345,%rsi
  0x0000000116b3d3af: mov    %rsp,%rdx
  0x0000000116b3d3b2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d3b6: callq  0x000000010c7dd830
  0x0000000116b3d3bb: hlt    
  0x0000000116b3d3bc: push   %r10
  0x0000000116b3d3be: cmp    -0x9cf6b15(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3d3c5: je     0x0000000116b3d442
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3d3cb: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d3d0: sub    $0x80,%rsp
  0x0000000116b3d3d7: mov    %rax,0x78(%rsp)
  0x0000000116b3d3dc: mov    %rcx,0x70(%rsp)
  0x0000000116b3d3e1: mov    %rdx,0x68(%rsp)
  0x0000000116b3d3e6: mov    %rbx,0x60(%rsp)
  0x0000000116b3d3eb: mov    %rbp,0x50(%rsp)
  0x0000000116b3d3f0: mov    %rsi,0x48(%rsp)
  0x0000000116b3d3f5: mov    %rdi,0x40(%rsp)
  0x0000000116b3d3fa: mov    %r8,0x38(%rsp)
  0x0000000116b3d3ff: mov    %r9,0x30(%rsp)
  0x0000000116b3d404: mov    %r10,0x28(%rsp)
  0x0000000116b3d409: mov    %r11,0x20(%rsp)
  0x0000000116b3d40e: mov    %r12,0x18(%rsp)
  0x0000000116b3d413: mov    %r13,0x10(%rsp)
  0x0000000116b3d418: mov    %r14,0x8(%rsp)
  0x0000000116b3d41d: mov    %r15,(%rsp)
  0x0000000116b3d421: movabs $0x10cc63f17,%rdi
  0x0000000116b3d42b: movabs $0x116b3d3cb,%rsi
  0x0000000116b3d435: mov    %rsp,%rdx
  0x0000000116b3d438: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d43c: callq  0x000000010c7dd830
  0x0000000116b3d441: hlt    
  0x0000000116b3d442: pop    %r10
  0x0000000116b3d444: mov    %r15,%rdi
  0x0000000116b3d447: mov    %rbp,0x290(%r15)
  0x0000000116b3d44e: mov    %rax,0x280(%r15)
  0x0000000116b3d455: test   $0xf,%esp
  0x0000000116b3d45b: je     0x0000000116b3d473
  0x0000000116b3d461: sub    $0x8,%rsp
  0x0000000116b3d465: callq  0x000000010c5881a0
  0x0000000116b3d46a: add    $0x8,%rsp
  0x0000000116b3d46e: jmpq   0x0000000116b3d478
  0x0000000116b3d473: callq  0x000000010c5881a0
  0x0000000116b3d478: push   %rax
  0x0000000116b3d479: push   %rdi
  0x0000000116b3d47a: push   %rsi
  0x0000000116b3d47b: push   %rdx
  0x0000000116b3d47c: push   %rcx
  0x0000000116b3d47d: push   %r8
  0x0000000116b3d47f: push   %r9
  0x0000000116b3d481: push   %r10
  0x0000000116b3d483: mov    %rsp,%r10
  0x0000000116b3d486: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d48a: push   %r10
  0x0000000116b3d48c: push   %r11
  0x0000000116b3d48e: mov    $0x109,%edi
  0x0000000116b3d493: movabs $0x7ff815049fd5,%r10
  0x0000000116b3d49d: callq  *%r10
  0x0000000116b3d4a0: pop    %r11
  0x0000000116b3d4a2: pop    %rsp
  0x0000000116b3d4a3: pop    %r10
  0x0000000116b3d4a5: pop    %r9
  0x0000000116b3d4a7: pop    %r8
  0x0000000116b3d4a9: pop    %rcx
  0x0000000116b3d4aa: pop    %rdx
  0x0000000116b3d4ab: pop    %rsi
  0x0000000116b3d4ac: pop    %rdi
  0x0000000116b3d4ad: cmp    %rax,%r15
  0x0000000116b3d4b0: je     0x0000000116b3d52d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3d4b6: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d4bb: sub    $0x80,%rsp
  0x0000000116b3d4c2: mov    %rax,0x78(%rsp)
  0x0000000116b3d4c7: mov    %rcx,0x70(%rsp)
  0x0000000116b3d4cc: mov    %rdx,0x68(%rsp)
  0x0000000116b3d4d1: mov    %rbx,0x60(%rsp)
  0x0000000116b3d4d6: mov    %rbp,0x50(%rsp)
  0x0000000116b3d4db: mov    %rsi,0x48(%rsp)
  0x0000000116b3d4e0: mov    %rdi,0x40(%rsp)
  0x0000000116b3d4e5: mov    %r8,0x38(%rsp)
  0x0000000116b3d4ea: mov    %r9,0x30(%rsp)
  0x0000000116b3d4ef: mov    %r10,0x28(%rsp)
  0x0000000116b3d4f4: mov    %r11,0x20(%rsp)
  0x0000000116b3d4f9: mov    %r12,0x18(%rsp)
  0x0000000116b3d4fe: mov    %r13,0x10(%rsp)
  0x0000000116b3d503: mov    %r14,0x8(%rsp)
  0x0000000116b3d508: mov    %r15,(%rsp)
  0x0000000116b3d50c: movabs $0x10cc6405e,%rdi
  0x0000000116b3d516: movabs $0x116b3d4b6,%rsi
  0x0000000116b3d520: mov    %rsp,%rdx
  0x0000000116b3d523: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d527: callq  0x000000010c7dd830
  0x0000000116b3d52c: hlt    
  0x0000000116b3d52d: pop    %rax
  0x0000000116b3d52e: movabs $0x0,%r10
  0x0000000116b3d538: mov    %r10,0x280(%r15)
  0x0000000116b3d53f: movabs $0x0,%r10
  0x0000000116b3d549: mov    %r10,0x290(%r15)
  0x0000000116b3d550: movabs $0x0,%r10
  0x0000000116b3d55a: mov    %r10,0x288(%r15)
  0x0000000116b3d561: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d569: je     0x0000000116b3d574
  0x0000000116b3d56f: jmpq   0x0000000116b30420
  0x0000000116b3d574: mov    -0x38(%rbp),%r13
  0x0000000116b3d578: mov    -0x30(%rbp),%r14
  0x0000000116b3d57c: retq   
  0x0000000116b3d57d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d582: sub    $0x80,%rsp
  0x0000000116b3d589: mov    %rax,0x78(%rsp)
  0x0000000116b3d58e: mov    %rcx,0x70(%rsp)
  0x0000000116b3d593: mov    %rdx,0x68(%rsp)
  0x0000000116b3d598: mov    %rbx,0x60(%rsp)
  0x0000000116b3d59d: mov    %rbp,0x50(%rsp)
  0x0000000116b3d5a2: mov    %rsi,0x48(%rsp)
  0x0000000116b3d5a7: mov    %rdi,0x40(%rsp)
  0x0000000116b3d5ac: mov    %r8,0x38(%rsp)
  0x0000000116b3d5b1: mov    %r9,0x30(%rsp)
  0x0000000116b3d5b6: mov    %r10,0x28(%rsp)
  0x0000000116b3d5bb: mov    %r11,0x20(%rsp)
  0x0000000116b3d5c0: mov    %r12,0x18(%rsp)
  0x0000000116b3d5c5: mov    %r13,0x10(%rsp)
  0x0000000116b3d5ca: mov    %r14,0x8(%rsp)
  0x0000000116b3d5cf: mov    %r15,(%rsp)
  0x0000000116b3d5d3: movabs $0x10cb763be,%rdi
  0x0000000116b3d5dd: movabs $0x116b3d57d,%rsi
  0x0000000116b3d5e7: mov    %rsp,%rdx
  0x0000000116b3d5ea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d5ee: callq  0x000000010c7dd830
  0x0000000116b3d5f3: hlt    
  0x0000000116b3d5f4: movzbl 0x0(%r13),%ebx
  0x0000000116b3d5f9: movabs $0x10ce39680,%r10
  0x0000000116b3d603: jmpq   *(%r10,%rbx,8)
  0x0000000116b3d607: movq   $0x0,-0x10(%rbp)
  0x0000000116b3d60f: mov    -0x38(%rbp),%r13
  0x0000000116b3d613: mov    -0x30(%rbp),%r14
  0x0000000116b3d617: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d61f: je     0x0000000116b3d8f5
  0x0000000116b3d625: callq  0x0000000116b3d62f
  0x0000000116b3d62a: jmpq   0x0000000116b3d87e
  0x0000000116b3d62f: lea    0x8(%rsp),%rax
  0x0000000116b3d634: mov    %r13,-0x38(%rbp)
  0x0000000116b3d638: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3d640: je     0x0000000116b3d6bd
  0x0000000116b3d646: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d64b: sub    $0x80,%rsp
  0x0000000116b3d652: mov    %rax,0x78(%rsp)
  0x0000000116b3d657: mov    %rcx,0x70(%rsp)
  0x0000000116b3d65c: mov    %rdx,0x68(%rsp)
  0x0000000116b3d661: mov    %rbx,0x60(%rsp)
  0x0000000116b3d666: mov    %rbp,0x50(%rsp)
  0x0000000116b3d66b: mov    %rsi,0x48(%rsp)
  0x0000000116b3d670: mov    %rdi,0x40(%rsp)
  0x0000000116b3d675: mov    %r8,0x38(%rsp)
  0x0000000116b3d67a: mov    %r9,0x30(%rsp)
  0x0000000116b3d67f: mov    %r10,0x28(%rsp)
  0x0000000116b3d684: mov    %r11,0x20(%rsp)
  0x0000000116b3d689: mov    %r12,0x18(%rsp)
  0x0000000116b3d68e: mov    %r13,0x10(%rsp)
  0x0000000116b3d693: mov    %r14,0x8(%rsp)
  0x0000000116b3d698: mov    %r15,(%rsp)
  0x0000000116b3d69c: movabs $0x10cc2363b,%rdi
  0x0000000116b3d6a6: movabs $0x116b3d646,%rsi
  0x0000000116b3d6b0: mov    %rsp,%rdx
  0x0000000116b3d6b3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d6b7: callq  0x000000010c7dd830
  0x0000000116b3d6bc: hlt    
  0x0000000116b3d6bd: push   %r10
  0x0000000116b3d6bf: cmp    -0x9cf6e16(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3d6c6: je     0x0000000116b3d743
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3d6cc: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d6d1: sub    $0x80,%rsp
  0x0000000116b3d6d8: mov    %rax,0x78(%rsp)
  0x0000000116b3d6dd: mov    %rcx,0x70(%rsp)
  0x0000000116b3d6e2: mov    %rdx,0x68(%rsp)
  0x0000000116b3d6e7: mov    %rbx,0x60(%rsp)
  0x0000000116b3d6ec: mov    %rbp,0x50(%rsp)
  0x0000000116b3d6f1: mov    %rsi,0x48(%rsp)
  0x0000000116b3d6f6: mov    %rdi,0x40(%rsp)
  0x0000000116b3d6fb: mov    %r8,0x38(%rsp)
  0x0000000116b3d700: mov    %r9,0x30(%rsp)
  0x0000000116b3d705: mov    %r10,0x28(%rsp)
  0x0000000116b3d70a: mov    %r11,0x20(%rsp)
  0x0000000116b3d70f: mov    %r12,0x18(%rsp)
  0x0000000116b3d714: mov    %r13,0x10(%rsp)
  0x0000000116b3d719: mov    %r14,0x8(%rsp)
  0x0000000116b3d71e: mov    %r15,(%rsp)
  0x0000000116b3d722: movabs $0x10cc63f17,%rdi
  0x0000000116b3d72c: movabs $0x116b3d6cc,%rsi
  0x0000000116b3d736: mov    %rsp,%rdx
  0x0000000116b3d739: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d73d: callq  0x000000010c7dd830
  0x0000000116b3d742: hlt    
  0x0000000116b3d743: pop    %r10
  0x0000000116b3d745: mov    %r15,%rdi
  0x0000000116b3d748: mov    %rbp,0x290(%r15)
  0x0000000116b3d74f: mov    %rax,0x280(%r15)
  0x0000000116b3d756: test   $0xf,%esp
  0x0000000116b3d75c: je     0x0000000116b3d774
  0x0000000116b3d762: sub    $0x8,%rsp
  0x0000000116b3d766: callq  0x000000010c5881a0
  0x0000000116b3d76b: add    $0x8,%rsp
  0x0000000116b3d76f: jmpq   0x0000000116b3d779
  0x0000000116b3d774: callq  0x000000010c5881a0
  0x0000000116b3d779: push   %rax
  0x0000000116b3d77a: push   %rdi
  0x0000000116b3d77b: push   %rsi
  0x0000000116b3d77c: push   %rdx
  0x0000000116b3d77d: push   %rcx
  0x0000000116b3d77e: push   %r8
  0x0000000116b3d780: push   %r9
  0x0000000116b3d782: push   %r10
  0x0000000116b3d784: mov    %rsp,%r10
  0x0000000116b3d787: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d78b: push   %r10
  0x0000000116b3d78d: push   %r11
  0x0000000116b3d78f: mov    $0x109,%edi
  0x0000000116b3d794: movabs $0x7ff815049fd5,%r10
  0x0000000116b3d79e: callq  *%r10
  0x0000000116b3d7a1: pop    %r11
  0x0000000116b3d7a3: pop    %rsp
  0x0000000116b3d7a4: pop    %r10
  0x0000000116b3d7a6: pop    %r9
  0x0000000116b3d7a8: pop    %r8
  0x0000000116b3d7aa: pop    %rcx
  0x0000000116b3d7ab: pop    %rdx
  0x0000000116b3d7ac: pop    %rsi
  0x0000000116b3d7ad: pop    %rdi
  0x0000000116b3d7ae: cmp    %rax,%r15
  0x0000000116b3d7b1: je     0x0000000116b3d82e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3d7b7: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d7bc: sub    $0x80,%rsp
  0x0000000116b3d7c3: mov    %rax,0x78(%rsp)
  0x0000000116b3d7c8: mov    %rcx,0x70(%rsp)
  0x0000000116b3d7cd: mov    %rdx,0x68(%rsp)
  0x0000000116b3d7d2: mov    %rbx,0x60(%rsp)
  0x0000000116b3d7d7: mov    %rbp,0x50(%rsp)
  0x0000000116b3d7dc: mov    %rsi,0x48(%rsp)
  0x0000000116b3d7e1: mov    %rdi,0x40(%rsp)
  0x0000000116b3d7e6: mov    %r8,0x38(%rsp)
  0x0000000116b3d7eb: mov    %r9,0x30(%rsp)
  0x0000000116b3d7f0: mov    %r10,0x28(%rsp)
  0x0000000116b3d7f5: mov    %r11,0x20(%rsp)
  0x0000000116b3d7fa: mov    %r12,0x18(%rsp)
  0x0000000116b3d7ff: mov    %r13,0x10(%rsp)
  0x0000000116b3d804: mov    %r14,0x8(%rsp)
  0x0000000116b3d809: mov    %r15,(%rsp)
  0x0000000116b3d80d: movabs $0x10cc6405e,%rdi
  0x0000000116b3d817: movabs $0x116b3d7b7,%rsi
  0x0000000116b3d821: mov    %rsp,%rdx
  0x0000000116b3d824: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d828: callq  0x000000010c7dd830
  0x0000000116b3d82d: hlt    
  0x0000000116b3d82e: pop    %rax
  0x0000000116b3d82f: movabs $0x0,%r10
  0x0000000116b3d839: mov    %r10,0x280(%r15)
  0x0000000116b3d840: movabs $0x0,%r10
  0x0000000116b3d84a: mov    %r10,0x290(%r15)
  0x0000000116b3d851: movabs $0x0,%r10
  0x0000000116b3d85b: mov    %r10,0x288(%r15)
  0x0000000116b3d862: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d86a: je     0x0000000116b3d875
  0x0000000116b3d870: jmpq   0x0000000116b30420
  0x0000000116b3d875: mov    -0x38(%rbp),%r13
  0x0000000116b3d879: mov    -0x30(%rbp),%r14
  0x0000000116b3d87d: retq   
  0x0000000116b3d87e: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d883: sub    $0x80,%rsp
  0x0000000116b3d88a: mov    %rax,0x78(%rsp)
  0x0000000116b3d88f: mov    %rcx,0x70(%rsp)
  0x0000000116b3d894: mov    %rdx,0x68(%rsp)
  0x0000000116b3d899: mov    %rbx,0x60(%rsp)
  0x0000000116b3d89e: mov    %rbp,0x50(%rsp)
  0x0000000116b3d8a3: mov    %rsi,0x48(%rsp)
  0x0000000116b3d8a8: mov    %rdi,0x40(%rsp)
  0x0000000116b3d8ad: mov    %r8,0x38(%rsp)
  0x0000000116b3d8b2: mov    %r9,0x30(%rsp)
  0x0000000116b3d8b7: mov    %r10,0x28(%rsp)
  0x0000000116b3d8bc: mov    %r11,0x20(%rsp)
  0x0000000116b3d8c1: mov    %r12,0x18(%rsp)
  0x0000000116b3d8c6: mov    %r13,0x10(%rsp)
  0x0000000116b3d8cb: mov    %r14,0x8(%rsp)
  0x0000000116b3d8d0: mov    %r15,(%rsp)
  0x0000000116b3d8d4: movabs $0x10cb763be,%rdi
  0x0000000116b3d8de: movabs $0x116b3d87e,%rsi
  0x0000000116b3d8e8: mov    %rsp,%rdx
  0x0000000116b3d8eb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d8ef: callq  0x000000010c7dd830
  0x0000000116b3d8f4: hlt    
  0x0000000116b3d8f5: movzbl 0x0(%r13),%ebx
  0x0000000116b3d8fa: movabs $0x10ce39e80,%r10
  0x0000000116b3d904: jmpq   *(%r10,%rbx,8)
  0x0000000116b3d908: movq   $0x0,-0x10(%rbp)
  0x0000000116b3d910: mov    -0x38(%rbp),%r13
  0x0000000116b3d914: mov    -0x30(%rbp),%r14
  0x0000000116b3d918: cmpq   $0x0,0x8(%r15)
  0x0000000116b3d920: je     0x0000000116b3dbf6
  0x0000000116b3d926: callq  0x0000000116b3d930
  0x0000000116b3d92b: jmpq   0x0000000116b3db7f
  0x0000000116b3d930: lea    0x8(%rsp),%rax
  0x0000000116b3d935: mov    %r13,-0x38(%rbp)
  0x0000000116b3d939: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3d941: je     0x0000000116b3d9be
  0x0000000116b3d947: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d94c: sub    $0x80,%rsp
  0x0000000116b3d953: mov    %rax,0x78(%rsp)
  0x0000000116b3d958: mov    %rcx,0x70(%rsp)
  0x0000000116b3d95d: mov    %rdx,0x68(%rsp)
  0x0000000116b3d962: mov    %rbx,0x60(%rsp)
  0x0000000116b3d967: mov    %rbp,0x50(%rsp)
  0x0000000116b3d96c: mov    %rsi,0x48(%rsp)
  0x0000000116b3d971: mov    %rdi,0x40(%rsp)
  0x0000000116b3d976: mov    %r8,0x38(%rsp)
  0x0000000116b3d97b: mov    %r9,0x30(%rsp)
  0x0000000116b3d980: mov    %r10,0x28(%rsp)
  0x0000000116b3d985: mov    %r11,0x20(%rsp)
  0x0000000116b3d98a: mov    %r12,0x18(%rsp)
  0x0000000116b3d98f: mov    %r13,0x10(%rsp)
  0x0000000116b3d994: mov    %r14,0x8(%rsp)
  0x0000000116b3d999: mov    %r15,(%rsp)
  0x0000000116b3d99d: movabs $0x10cc2363b,%rdi
  0x0000000116b3d9a7: movabs $0x116b3d947,%rsi
  0x0000000116b3d9b1: mov    %rsp,%rdx
  0x0000000116b3d9b4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3d9b8: callq  0x000000010c7dd830
  0x0000000116b3d9bd: hlt    
  0x0000000116b3d9be: push   %r10
  0x0000000116b3d9c0: cmp    -0x9cf7117(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3d9c7: je     0x0000000116b3da44
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3d9cd: mov    %rsp,-0x28(%rsp)
  0x0000000116b3d9d2: sub    $0x80,%rsp
  0x0000000116b3d9d9: mov    %rax,0x78(%rsp)
  0x0000000116b3d9de: mov    %rcx,0x70(%rsp)
  0x0000000116b3d9e3: mov    %rdx,0x68(%rsp)
  0x0000000116b3d9e8: mov    %rbx,0x60(%rsp)
  0x0000000116b3d9ed: mov    %rbp,0x50(%rsp)
  0x0000000116b3d9f2: mov    %rsi,0x48(%rsp)
  0x0000000116b3d9f7: mov    %rdi,0x40(%rsp)
  0x0000000116b3d9fc: mov    %r8,0x38(%rsp)
  0x0000000116b3da01: mov    %r9,0x30(%rsp)
  0x0000000116b3da06: mov    %r10,0x28(%rsp)
  0x0000000116b3da0b: mov    %r11,0x20(%rsp)
  0x0000000116b3da10: mov    %r12,0x18(%rsp)
  0x0000000116b3da15: mov    %r13,0x10(%rsp)
  0x0000000116b3da1a: mov    %r14,0x8(%rsp)
  0x0000000116b3da1f: mov    %r15,(%rsp)
  0x0000000116b3da23: movabs $0x10cc63f17,%rdi
  0x0000000116b3da2d: movabs $0x116b3d9cd,%rsi
  0x0000000116b3da37: mov    %rsp,%rdx
  0x0000000116b3da3a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3da3e: callq  0x000000010c7dd830
  0x0000000116b3da43: hlt    
  0x0000000116b3da44: pop    %r10
  0x0000000116b3da46: mov    %r15,%rdi
  0x0000000116b3da49: mov    %rbp,0x290(%r15)
  0x0000000116b3da50: mov    %rax,0x280(%r15)
  0x0000000116b3da57: test   $0xf,%esp
  0x0000000116b3da5d: je     0x0000000116b3da75
  0x0000000116b3da63: sub    $0x8,%rsp
  0x0000000116b3da67: callq  0x000000010c5881a0
  0x0000000116b3da6c: add    $0x8,%rsp
  0x0000000116b3da70: jmpq   0x0000000116b3da7a
  0x0000000116b3da75: callq  0x000000010c5881a0
  0x0000000116b3da7a: push   %rax
  0x0000000116b3da7b: push   %rdi
  0x0000000116b3da7c: push   %rsi
  0x0000000116b3da7d: push   %rdx
  0x0000000116b3da7e: push   %rcx
  0x0000000116b3da7f: push   %r8
  0x0000000116b3da81: push   %r9
  0x0000000116b3da83: push   %r10
  0x0000000116b3da85: mov    %rsp,%r10
  0x0000000116b3da88: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3da8c: push   %r10
  0x0000000116b3da8e: push   %r11
  0x0000000116b3da90: mov    $0x109,%edi
  0x0000000116b3da95: movabs $0x7ff815049fd5,%r10
  0x0000000116b3da9f: callq  *%r10
  0x0000000116b3daa2: pop    %r11
  0x0000000116b3daa4: pop    %rsp
  0x0000000116b3daa5: pop    %r10
  0x0000000116b3daa7: pop    %r9
  0x0000000116b3daa9: pop    %r8
  0x0000000116b3daab: pop    %rcx
  0x0000000116b3daac: pop    %rdx
  0x0000000116b3daad: pop    %rsi
  0x0000000116b3daae: pop    %rdi
  0x0000000116b3daaf: cmp    %rax,%r15
  0x0000000116b3dab2: je     0x0000000116b3db2f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3dab8: mov    %rsp,-0x28(%rsp)
  0x0000000116b3dabd: sub    $0x80,%rsp
  0x0000000116b3dac4: mov    %rax,0x78(%rsp)
  0x0000000116b3dac9: mov    %rcx,0x70(%rsp)
  0x0000000116b3dace: mov    %rdx,0x68(%rsp)
  0x0000000116b3dad3: mov    %rbx,0x60(%rsp)
  0x0000000116b3dad8: mov    %rbp,0x50(%rsp)
  0x0000000116b3dadd: mov    %rsi,0x48(%rsp)
  0x0000000116b3dae2: mov    %rdi,0x40(%rsp)
  0x0000000116b3dae7: mov    %r8,0x38(%rsp)
  0x0000000116b3daec: mov    %r9,0x30(%rsp)
  0x0000000116b3daf1: mov    %r10,0x28(%rsp)
  0x0000000116b3daf6: mov    %r11,0x20(%rsp)
  0x0000000116b3dafb: mov    %r12,0x18(%rsp)
  0x0000000116b3db00: mov    %r13,0x10(%rsp)
  0x0000000116b3db05: mov    %r14,0x8(%rsp)
  0x0000000116b3db0a: mov    %r15,(%rsp)
  0x0000000116b3db0e: movabs $0x10cc6405e,%rdi
  0x0000000116b3db18: movabs $0x116b3dab8,%rsi
  0x0000000116b3db22: mov    %rsp,%rdx
  0x0000000116b3db25: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3db29: callq  0x000000010c7dd830
  0x0000000116b3db2e: hlt    
  0x0000000116b3db2f: pop    %rax
  0x0000000116b3db30: movabs $0x0,%r10
  0x0000000116b3db3a: mov    %r10,0x280(%r15)
  0x0000000116b3db41: movabs $0x0,%r10
  0x0000000116b3db4b: mov    %r10,0x290(%r15)
  0x0000000116b3db52: movabs $0x0,%r10
  0x0000000116b3db5c: mov    %r10,0x288(%r15)
  0x0000000116b3db63: cmpq   $0x0,0x8(%r15)
  0x0000000116b3db6b: je     0x0000000116b3db76
  0x0000000116b3db71: jmpq   0x0000000116b30420
  0x0000000116b3db76: mov    -0x38(%rbp),%r13
  0x0000000116b3db7a: mov    -0x30(%rbp),%r14
  0x0000000116b3db7e: retq   
  0x0000000116b3db7f: mov    %rsp,-0x28(%rsp)
  0x0000000116b3db84: sub    $0x80,%rsp
  0x0000000116b3db8b: mov    %rax,0x78(%rsp)
  0x0000000116b3db90: mov    %rcx,0x70(%rsp)
  0x0000000116b3db95: mov    %rdx,0x68(%rsp)
  0x0000000116b3db9a: mov    %rbx,0x60(%rsp)
  0x0000000116b3db9f: mov    %rbp,0x50(%rsp)
  0x0000000116b3dba4: mov    %rsi,0x48(%rsp)
  0x0000000116b3dba9: mov    %rdi,0x40(%rsp)
  0x0000000116b3dbae: mov    %r8,0x38(%rsp)
  0x0000000116b3dbb3: mov    %r9,0x30(%rsp)
  0x0000000116b3dbb8: mov    %r10,0x28(%rsp)
  0x0000000116b3dbbd: mov    %r11,0x20(%rsp)
  0x0000000116b3dbc2: mov    %r12,0x18(%rsp)
  0x0000000116b3dbc7: mov    %r13,0x10(%rsp)
  0x0000000116b3dbcc: mov    %r14,0x8(%rsp)
  0x0000000116b3dbd1: mov    %r15,(%rsp)
  0x0000000116b3dbd5: movabs $0x10cb763be,%rdi
  0x0000000116b3dbdf: movabs $0x116b3db7f,%rsi
  0x0000000116b3dbe9: mov    %rsp,%rdx
  0x0000000116b3dbec: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3dbf0: callq  0x000000010c7dd830
  0x0000000116b3dbf5: hlt    
  0x0000000116b3dbf6: movzbl 0x0(%r13),%ebx
  0x0000000116b3dbfb: movabs $0x10ce3a680,%r10
  0x0000000116b3dc05: jmpq   *(%r10,%rbx,8)
  0x0000000116b3dc09: movq   $0x0,-0x10(%rbp)
  0x0000000116b3dc11: mov    -0x38(%rbp),%r13
  0x0000000116b3dc15: mov    -0x30(%rbp),%r14
  0x0000000116b3dc19: cmpq   $0x0,0x8(%r15)
  0x0000000116b3dc21: je     0x0000000116b3def7
  0x0000000116b3dc27: callq  0x0000000116b3dc31
  0x0000000116b3dc2c: jmpq   0x0000000116b3de80
  0x0000000116b3dc31: lea    0x8(%rsp),%rax
  0x0000000116b3dc36: mov    %r13,-0x38(%rbp)
  0x0000000116b3dc3a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3dc42: je     0x0000000116b3dcbf
  0x0000000116b3dc48: mov    %rsp,-0x28(%rsp)
  0x0000000116b3dc4d: sub    $0x80,%rsp
  0x0000000116b3dc54: mov    %rax,0x78(%rsp)
  0x0000000116b3dc59: mov    %rcx,0x70(%rsp)
  0x0000000116b3dc5e: mov    %rdx,0x68(%rsp)
  0x0000000116b3dc63: mov    %rbx,0x60(%rsp)
  0x0000000116b3dc68: mov    %rbp,0x50(%rsp)
  0x0000000116b3dc6d: mov    %rsi,0x48(%rsp)
  0x0000000116b3dc72: mov    %rdi,0x40(%rsp)
  0x0000000116b3dc77: mov    %r8,0x38(%rsp)
  0x0000000116b3dc7c: mov    %r9,0x30(%rsp)
  0x0000000116b3dc81: mov    %r10,0x28(%rsp)
  0x0000000116b3dc86: mov    %r11,0x20(%rsp)
  0x0000000116b3dc8b: mov    %r12,0x18(%rsp)
  0x0000000116b3dc90: mov    %r13,0x10(%rsp)
  0x0000000116b3dc95: mov    %r14,0x8(%rsp)
  0x0000000116b3dc9a: mov    %r15,(%rsp)
  0x0000000116b3dc9e: movabs $0x10cc2363b,%rdi
  0x0000000116b3dca8: movabs $0x116b3dc48,%rsi
  0x0000000116b3dcb2: mov    %rsp,%rdx
  0x0000000116b3dcb5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3dcb9: callq  0x000000010c7dd830
  0x0000000116b3dcbe: hlt    
  0x0000000116b3dcbf: push   %r10
  0x0000000116b3dcc1: cmp    -0x9cf7418(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3dcc8: je     0x0000000116b3dd45
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3dcce: mov    %rsp,-0x28(%rsp)
  0x0000000116b3dcd3: sub    $0x80,%rsp
  0x0000000116b3dcda: mov    %rax,0x78(%rsp)
  0x0000000116b3dcdf: mov    %rcx,0x70(%rsp)
  0x0000000116b3dce4: mov    %rdx,0x68(%rsp)
  0x0000000116b3dce9: mov    %rbx,0x60(%rsp)
  0x0000000116b3dcee: mov    %rbp,0x50(%rsp)
  0x0000000116b3dcf3: mov    %rsi,0x48(%rsp)
  0x0000000116b3dcf8: mov    %rdi,0x40(%rsp)
  0x0000000116b3dcfd: mov    %r8,0x38(%rsp)
  0x0000000116b3dd02: mov    %r9,0x30(%rsp)
  0x0000000116b3dd07: mov    %r10,0x28(%rsp)
  0x0000000116b3dd0c: mov    %r11,0x20(%rsp)
  0x0000000116b3dd11: mov    %r12,0x18(%rsp)
  0x0000000116b3dd16: mov    %r13,0x10(%rsp)
  0x0000000116b3dd1b: mov    %r14,0x8(%rsp)
  0x0000000116b3dd20: mov    %r15,(%rsp)
  0x0000000116b3dd24: movabs $0x10cc63f17,%rdi
  0x0000000116b3dd2e: movabs $0x116b3dcce,%rsi
  0x0000000116b3dd38: mov    %rsp,%rdx
  0x0000000116b3dd3b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3dd3f: callq  0x000000010c7dd830
  0x0000000116b3dd44: hlt    
  0x0000000116b3dd45: pop    %r10
  0x0000000116b3dd47: mov    %r15,%rdi
  0x0000000116b3dd4a: mov    %rbp,0x290(%r15)
  0x0000000116b3dd51: mov    %rax,0x280(%r15)
  0x0000000116b3dd58: test   $0xf,%esp
  0x0000000116b3dd5e: je     0x0000000116b3dd76
  0x0000000116b3dd64: sub    $0x8,%rsp
  0x0000000116b3dd68: callq  0x000000010c5881a0
  0x0000000116b3dd6d: add    $0x8,%rsp
  0x0000000116b3dd71: jmpq   0x0000000116b3dd7b
  0x0000000116b3dd76: callq  0x000000010c5881a0
  0x0000000116b3dd7b: push   %rax
  0x0000000116b3dd7c: push   %rdi
  0x0000000116b3dd7d: push   %rsi
  0x0000000116b3dd7e: push   %rdx
  0x0000000116b3dd7f: push   %rcx
  0x0000000116b3dd80: push   %r8
  0x0000000116b3dd82: push   %r9
  0x0000000116b3dd84: push   %r10
  0x0000000116b3dd86: mov    %rsp,%r10
  0x0000000116b3dd89: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3dd8d: push   %r10
  0x0000000116b3dd8f: push   %r11
  0x0000000116b3dd91: mov    $0x109,%edi
  0x0000000116b3dd96: movabs $0x7ff815049fd5,%r10
  0x0000000116b3dda0: callq  *%r10
  0x0000000116b3dda3: pop    %r11
  0x0000000116b3dda5: pop    %rsp
  0x0000000116b3dda6: pop    %r10
  0x0000000116b3dda8: pop    %r9
  0x0000000116b3ddaa: pop    %r8
  0x0000000116b3ddac: pop    %rcx
  0x0000000116b3ddad: pop    %rdx
  0x0000000116b3ddae: pop    %rsi
  0x0000000116b3ddaf: pop    %rdi
  0x0000000116b3ddb0: cmp    %rax,%r15
  0x0000000116b3ddb3: je     0x0000000116b3de30
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3ddb9: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ddbe: sub    $0x80,%rsp
  0x0000000116b3ddc5: mov    %rax,0x78(%rsp)
  0x0000000116b3ddca: mov    %rcx,0x70(%rsp)
  0x0000000116b3ddcf: mov    %rdx,0x68(%rsp)
  0x0000000116b3ddd4: mov    %rbx,0x60(%rsp)
  0x0000000116b3ddd9: mov    %rbp,0x50(%rsp)
  0x0000000116b3ddde: mov    %rsi,0x48(%rsp)
  0x0000000116b3dde3: mov    %rdi,0x40(%rsp)
  0x0000000116b3dde8: mov    %r8,0x38(%rsp)
  0x0000000116b3dded: mov    %r9,0x30(%rsp)
  0x0000000116b3ddf2: mov    %r10,0x28(%rsp)
  0x0000000116b3ddf7: mov    %r11,0x20(%rsp)
  0x0000000116b3ddfc: mov    %r12,0x18(%rsp)
  0x0000000116b3de01: mov    %r13,0x10(%rsp)
  0x0000000116b3de06: mov    %r14,0x8(%rsp)
  0x0000000116b3de0b: mov    %r15,(%rsp)
  0x0000000116b3de0f: movabs $0x10cc6405e,%rdi
  0x0000000116b3de19: movabs $0x116b3ddb9,%rsi
  0x0000000116b3de23: mov    %rsp,%rdx
  0x0000000116b3de26: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3de2a: callq  0x000000010c7dd830
  0x0000000116b3de2f: hlt    
  0x0000000116b3de30: pop    %rax
  0x0000000116b3de31: movabs $0x0,%r10
  0x0000000116b3de3b: mov    %r10,0x280(%r15)
  0x0000000116b3de42: movabs $0x0,%r10
  0x0000000116b3de4c: mov    %r10,0x290(%r15)
  0x0000000116b3de53: movabs $0x0,%r10
  0x0000000116b3de5d: mov    %r10,0x288(%r15)
  0x0000000116b3de64: cmpq   $0x0,0x8(%r15)
  0x0000000116b3de6c: je     0x0000000116b3de77
  0x0000000116b3de72: jmpq   0x0000000116b30420
  0x0000000116b3de77: mov    -0x38(%rbp),%r13
  0x0000000116b3de7b: mov    -0x30(%rbp),%r14
  0x0000000116b3de7f: retq   
  0x0000000116b3de80: mov    %rsp,-0x28(%rsp)
  0x0000000116b3de85: sub    $0x80,%rsp
  0x0000000116b3de8c: mov    %rax,0x78(%rsp)
  0x0000000116b3de91: mov    %rcx,0x70(%rsp)
  0x0000000116b3de96: mov    %rdx,0x68(%rsp)
  0x0000000116b3de9b: mov    %rbx,0x60(%rsp)
  0x0000000116b3dea0: mov    %rbp,0x50(%rsp)
  0x0000000116b3dea5: mov    %rsi,0x48(%rsp)
  0x0000000116b3deaa: mov    %rdi,0x40(%rsp)
  0x0000000116b3deaf: mov    %r8,0x38(%rsp)
  0x0000000116b3deb4: mov    %r9,0x30(%rsp)
  0x0000000116b3deb9: mov    %r10,0x28(%rsp)
  0x0000000116b3debe: mov    %r11,0x20(%rsp)
  0x0000000116b3dec3: mov    %r12,0x18(%rsp)
  0x0000000116b3dec8: mov    %r13,0x10(%rsp)
  0x0000000116b3decd: mov    %r14,0x8(%rsp)
  0x0000000116b3ded2: mov    %r15,(%rsp)
  0x0000000116b3ded6: movabs $0x10cb763be,%rdi
  0x0000000116b3dee0: movabs $0x116b3de80,%rsi
  0x0000000116b3deea: mov    %rsp,%rdx
  0x0000000116b3deed: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3def1: callq  0x000000010c7dd830
  0x0000000116b3def6: hlt    
  0x0000000116b3def7: movzbl 0x0(%r13),%ebx
  0x0000000116b3defc: movabs $0x10ce3b680,%r10
  0x0000000116b3df06: jmpq   *(%r10,%rbx,8)
  0x0000000116b3df0a: movq   $0x0,-0x10(%rbp)
  0x0000000116b3df12: mov    -0x38(%rbp),%r13
  0x0000000116b3df16: mov    -0x30(%rbp),%r14
  0x0000000116b3df1a: cmpq   $0x0,0x8(%r15)
  0x0000000116b3df22: je     0x0000000116b3e1f8
  0x0000000116b3df28: callq  0x0000000116b3df32
  0x0000000116b3df2d: jmpq   0x0000000116b3e181
  0x0000000116b3df32: lea    0x8(%rsp),%rax
  0x0000000116b3df37: mov    %r13,-0x38(%rbp)
  0x0000000116b3df3b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3df43: je     0x0000000116b3dfc0
  0x0000000116b3df49: mov    %rsp,-0x28(%rsp)
  0x0000000116b3df4e: sub    $0x80,%rsp
  0x0000000116b3df55: mov    %rax,0x78(%rsp)
  0x0000000116b3df5a: mov    %rcx,0x70(%rsp)
  0x0000000116b3df5f: mov    %rdx,0x68(%rsp)
  0x0000000116b3df64: mov    %rbx,0x60(%rsp)
  0x0000000116b3df69: mov    %rbp,0x50(%rsp)
  0x0000000116b3df6e: mov    %rsi,0x48(%rsp)
  0x0000000116b3df73: mov    %rdi,0x40(%rsp)
  0x0000000116b3df78: mov    %r8,0x38(%rsp)
  0x0000000116b3df7d: mov    %r9,0x30(%rsp)
  0x0000000116b3df82: mov    %r10,0x28(%rsp)
  0x0000000116b3df87: mov    %r11,0x20(%rsp)
  0x0000000116b3df8c: mov    %r12,0x18(%rsp)
  0x0000000116b3df91: mov    %r13,0x10(%rsp)
  0x0000000116b3df96: mov    %r14,0x8(%rsp)
  0x0000000116b3df9b: mov    %r15,(%rsp)
  0x0000000116b3df9f: movabs $0x10cc2363b,%rdi
  0x0000000116b3dfa9: movabs $0x116b3df49,%rsi
  0x0000000116b3dfb3: mov    %rsp,%rdx
  0x0000000116b3dfb6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3dfba: callq  0x000000010c7dd830
  0x0000000116b3dfbf: hlt    
  0x0000000116b3dfc0: push   %r10
  0x0000000116b3dfc2: cmp    -0x9cf7719(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3dfc9: je     0x0000000116b3e046
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3dfcf: mov    %rsp,-0x28(%rsp)
  0x0000000116b3dfd4: sub    $0x80,%rsp
  0x0000000116b3dfdb: mov    %rax,0x78(%rsp)
  0x0000000116b3dfe0: mov    %rcx,0x70(%rsp)
  0x0000000116b3dfe5: mov    %rdx,0x68(%rsp)
  0x0000000116b3dfea: mov    %rbx,0x60(%rsp)
  0x0000000116b3dfef: mov    %rbp,0x50(%rsp)
  0x0000000116b3dff4: mov    %rsi,0x48(%rsp)
  0x0000000116b3dff9: mov    %rdi,0x40(%rsp)
  0x0000000116b3dffe: mov    %r8,0x38(%rsp)
  0x0000000116b3e003: mov    %r9,0x30(%rsp)
  0x0000000116b3e008: mov    %r10,0x28(%rsp)
  0x0000000116b3e00d: mov    %r11,0x20(%rsp)
  0x0000000116b3e012: mov    %r12,0x18(%rsp)
  0x0000000116b3e017: mov    %r13,0x10(%rsp)
  0x0000000116b3e01c: mov    %r14,0x8(%rsp)
  0x0000000116b3e021: mov    %r15,(%rsp)
  0x0000000116b3e025: movabs $0x10cc63f17,%rdi
  0x0000000116b3e02f: movabs $0x116b3dfcf,%rsi
  0x0000000116b3e039: mov    %rsp,%rdx
  0x0000000116b3e03c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e040: callq  0x000000010c7dd830
  0x0000000116b3e045: hlt    
  0x0000000116b3e046: pop    %r10
  0x0000000116b3e048: mov    %r15,%rdi
  0x0000000116b3e04b: mov    %rbp,0x290(%r15)
  0x0000000116b3e052: mov    %rax,0x280(%r15)
  0x0000000116b3e059: test   $0xf,%esp
  0x0000000116b3e05f: je     0x0000000116b3e077
  0x0000000116b3e065: sub    $0x8,%rsp
  0x0000000116b3e069: callq  0x000000010c5881a0
  0x0000000116b3e06e: add    $0x8,%rsp
  0x0000000116b3e072: jmpq   0x0000000116b3e07c
  0x0000000116b3e077: callq  0x000000010c5881a0
  0x0000000116b3e07c: push   %rax
  0x0000000116b3e07d: push   %rdi
  0x0000000116b3e07e: push   %rsi
  0x0000000116b3e07f: push   %rdx
  0x0000000116b3e080: push   %rcx
  0x0000000116b3e081: push   %r8
  0x0000000116b3e083: push   %r9
  0x0000000116b3e085: push   %r10
  0x0000000116b3e087: mov    %rsp,%r10
  0x0000000116b3e08a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e08e: push   %r10
  0x0000000116b3e090: push   %r11
  0x0000000116b3e092: mov    $0x109,%edi
  0x0000000116b3e097: movabs $0x7ff815049fd5,%r10
  0x0000000116b3e0a1: callq  *%r10
  0x0000000116b3e0a4: pop    %r11
  0x0000000116b3e0a6: pop    %rsp
  0x0000000116b3e0a7: pop    %r10
  0x0000000116b3e0a9: pop    %r9
  0x0000000116b3e0ab: pop    %r8
  0x0000000116b3e0ad: pop    %rcx
  0x0000000116b3e0ae: pop    %rdx
  0x0000000116b3e0af: pop    %rsi
  0x0000000116b3e0b0: pop    %rdi
  0x0000000116b3e0b1: cmp    %rax,%r15
  0x0000000116b3e0b4: je     0x0000000116b3e131
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3e0ba: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e0bf: sub    $0x80,%rsp
  0x0000000116b3e0c6: mov    %rax,0x78(%rsp)
  0x0000000116b3e0cb: mov    %rcx,0x70(%rsp)
  0x0000000116b3e0d0: mov    %rdx,0x68(%rsp)
  0x0000000116b3e0d5: mov    %rbx,0x60(%rsp)
  0x0000000116b3e0da: mov    %rbp,0x50(%rsp)
  0x0000000116b3e0df: mov    %rsi,0x48(%rsp)
  0x0000000116b3e0e4: mov    %rdi,0x40(%rsp)
  0x0000000116b3e0e9: mov    %r8,0x38(%rsp)
  0x0000000116b3e0ee: mov    %r9,0x30(%rsp)
  0x0000000116b3e0f3: mov    %r10,0x28(%rsp)
  0x0000000116b3e0f8: mov    %r11,0x20(%rsp)
  0x0000000116b3e0fd: mov    %r12,0x18(%rsp)
  0x0000000116b3e102: mov    %r13,0x10(%rsp)
  0x0000000116b3e107: mov    %r14,0x8(%rsp)
  0x0000000116b3e10c: mov    %r15,(%rsp)
  0x0000000116b3e110: movabs $0x10cc6405e,%rdi
  0x0000000116b3e11a: movabs $0x116b3e0ba,%rsi
  0x0000000116b3e124: mov    %rsp,%rdx
  0x0000000116b3e127: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e12b: callq  0x000000010c7dd830
  0x0000000116b3e130: hlt    
  0x0000000116b3e131: pop    %rax
  0x0000000116b3e132: movabs $0x0,%r10
  0x0000000116b3e13c: mov    %r10,0x280(%r15)
  0x0000000116b3e143: movabs $0x0,%r10
  0x0000000116b3e14d: mov    %r10,0x290(%r15)
  0x0000000116b3e154: movabs $0x0,%r10
  0x0000000116b3e15e: mov    %r10,0x288(%r15)
  0x0000000116b3e165: cmpq   $0x0,0x8(%r15)
  0x0000000116b3e16d: je     0x0000000116b3e178
  0x0000000116b3e173: jmpq   0x0000000116b30420
  0x0000000116b3e178: mov    -0x38(%rbp),%r13
  0x0000000116b3e17c: mov    -0x30(%rbp),%r14
  0x0000000116b3e180: retq   
  0x0000000116b3e181: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e186: sub    $0x80,%rsp
  0x0000000116b3e18d: mov    %rax,0x78(%rsp)
  0x0000000116b3e192: mov    %rcx,0x70(%rsp)
  0x0000000116b3e197: mov    %rdx,0x68(%rsp)
  0x0000000116b3e19c: mov    %rbx,0x60(%rsp)
  0x0000000116b3e1a1: mov    %rbp,0x50(%rsp)
  0x0000000116b3e1a6: mov    %rsi,0x48(%rsp)
  0x0000000116b3e1ab: mov    %rdi,0x40(%rsp)
  0x0000000116b3e1b0: mov    %r8,0x38(%rsp)
  0x0000000116b3e1b5: mov    %r9,0x30(%rsp)
  0x0000000116b3e1ba: mov    %r10,0x28(%rsp)
  0x0000000116b3e1bf: mov    %r11,0x20(%rsp)
  0x0000000116b3e1c4: mov    %r12,0x18(%rsp)
  0x0000000116b3e1c9: mov    %r13,0x10(%rsp)
  0x0000000116b3e1ce: mov    %r14,0x8(%rsp)
  0x0000000116b3e1d3: mov    %r15,(%rsp)
  0x0000000116b3e1d7: movabs $0x10cb763be,%rdi
  0x0000000116b3e1e1: movabs $0x116b3e181,%rsi
  0x0000000116b3e1eb: mov    %rsp,%rdx
  0x0000000116b3e1ee: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e1f2: callq  0x000000010c7dd830
  0x0000000116b3e1f7: hlt    
  0x0000000116b3e1f8: movzbl 0x1(%r13),%ebx
  0x0000000116b3e1fd: inc    %r13
  0x0000000116b3e200: movabs $0x10ce38e80,%r10
  0x0000000116b3e20a: jmpq   *(%r10,%rbx,8)
  0x0000000116b3e20e: movq   $0x0,-0x10(%rbp)
  0x0000000116b3e216: mov    -0x38(%rbp),%r13
  0x0000000116b3e21a: mov    -0x30(%rbp),%r14
  0x0000000116b3e21e: cmpq   $0x0,0x8(%r15)
  0x0000000116b3e226: je     0x0000000116b3e4fc
  0x0000000116b3e22c: callq  0x0000000116b3e236
  0x0000000116b3e231: jmpq   0x0000000116b3e485
  0x0000000116b3e236: lea    0x8(%rsp),%rax
  0x0000000116b3e23b: mov    %r13,-0x38(%rbp)
  0x0000000116b3e23f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3e247: je     0x0000000116b3e2c4
  0x0000000116b3e24d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e252: sub    $0x80,%rsp
  0x0000000116b3e259: mov    %rax,0x78(%rsp)
  0x0000000116b3e25e: mov    %rcx,0x70(%rsp)
  0x0000000116b3e263: mov    %rdx,0x68(%rsp)
  0x0000000116b3e268: mov    %rbx,0x60(%rsp)
  0x0000000116b3e26d: mov    %rbp,0x50(%rsp)
  0x0000000116b3e272: mov    %rsi,0x48(%rsp)
  0x0000000116b3e277: mov    %rdi,0x40(%rsp)
  0x0000000116b3e27c: mov    %r8,0x38(%rsp)
  0x0000000116b3e281: mov    %r9,0x30(%rsp)
  0x0000000116b3e286: mov    %r10,0x28(%rsp)
  0x0000000116b3e28b: mov    %r11,0x20(%rsp)
  0x0000000116b3e290: mov    %r12,0x18(%rsp)
  0x0000000116b3e295: mov    %r13,0x10(%rsp)
  0x0000000116b3e29a: mov    %r14,0x8(%rsp)
  0x0000000116b3e29f: mov    %r15,(%rsp)
  0x0000000116b3e2a3: movabs $0x10cc2363b,%rdi
  0x0000000116b3e2ad: movabs $0x116b3e24d,%rsi
  0x0000000116b3e2b7: mov    %rsp,%rdx
  0x0000000116b3e2ba: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e2be: callq  0x000000010c7dd830
  0x0000000116b3e2c3: hlt    
  0x0000000116b3e2c4: push   %r10
  0x0000000116b3e2c6: cmp    -0x9cf7a1d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3e2cd: je     0x0000000116b3e34a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3e2d3: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e2d8: sub    $0x80,%rsp
  0x0000000116b3e2df: mov    %rax,0x78(%rsp)
  0x0000000116b3e2e4: mov    %rcx,0x70(%rsp)
  0x0000000116b3e2e9: mov    %rdx,0x68(%rsp)
  0x0000000116b3e2ee: mov    %rbx,0x60(%rsp)
  0x0000000116b3e2f3: mov    %rbp,0x50(%rsp)
  0x0000000116b3e2f8: mov    %rsi,0x48(%rsp)
  0x0000000116b3e2fd: mov    %rdi,0x40(%rsp)
  0x0000000116b3e302: mov    %r8,0x38(%rsp)
  0x0000000116b3e307: mov    %r9,0x30(%rsp)
  0x0000000116b3e30c: mov    %r10,0x28(%rsp)
  0x0000000116b3e311: mov    %r11,0x20(%rsp)
  0x0000000116b3e316: mov    %r12,0x18(%rsp)
  0x0000000116b3e31b: mov    %r13,0x10(%rsp)
  0x0000000116b3e320: mov    %r14,0x8(%rsp)
  0x0000000116b3e325: mov    %r15,(%rsp)
  0x0000000116b3e329: movabs $0x10cc63f17,%rdi
  0x0000000116b3e333: movabs $0x116b3e2d3,%rsi
  0x0000000116b3e33d: mov    %rsp,%rdx
  0x0000000116b3e340: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e344: callq  0x000000010c7dd830
  0x0000000116b3e349: hlt    
  0x0000000116b3e34a: pop    %r10
  0x0000000116b3e34c: mov    %r15,%rdi
  0x0000000116b3e34f: mov    %rbp,0x290(%r15)
  0x0000000116b3e356: mov    %rax,0x280(%r15)
  0x0000000116b3e35d: test   $0xf,%esp
  0x0000000116b3e363: je     0x0000000116b3e37b
  0x0000000116b3e369: sub    $0x8,%rsp
  0x0000000116b3e36d: callq  0x000000010c5881a0
  0x0000000116b3e372: add    $0x8,%rsp
  0x0000000116b3e376: jmpq   0x0000000116b3e380
  0x0000000116b3e37b: callq  0x000000010c5881a0
  0x0000000116b3e380: push   %rax
  0x0000000116b3e381: push   %rdi
  0x0000000116b3e382: push   %rsi
  0x0000000116b3e383: push   %rdx
  0x0000000116b3e384: push   %rcx
  0x0000000116b3e385: push   %r8
  0x0000000116b3e387: push   %r9
  0x0000000116b3e389: push   %r10
  0x0000000116b3e38b: mov    %rsp,%r10
  0x0000000116b3e38e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e392: push   %r10
  0x0000000116b3e394: push   %r11
  0x0000000116b3e396: mov    $0x109,%edi
  0x0000000116b3e39b: movabs $0x7ff815049fd5,%r10
  0x0000000116b3e3a5: callq  *%r10
  0x0000000116b3e3a8: pop    %r11
  0x0000000116b3e3aa: pop    %rsp
  0x0000000116b3e3ab: pop    %r10
  0x0000000116b3e3ad: pop    %r9
  0x0000000116b3e3af: pop    %r8
  0x0000000116b3e3b1: pop    %rcx
  0x0000000116b3e3b2: pop    %rdx
  0x0000000116b3e3b3: pop    %rsi
  0x0000000116b3e3b4: pop    %rdi
  0x0000000116b3e3b5: cmp    %rax,%r15
  0x0000000116b3e3b8: je     0x0000000116b3e435
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3e3be: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e3c3: sub    $0x80,%rsp
  0x0000000116b3e3ca: mov    %rax,0x78(%rsp)
  0x0000000116b3e3cf: mov    %rcx,0x70(%rsp)
  0x0000000116b3e3d4: mov    %rdx,0x68(%rsp)
  0x0000000116b3e3d9: mov    %rbx,0x60(%rsp)
  0x0000000116b3e3de: mov    %rbp,0x50(%rsp)
  0x0000000116b3e3e3: mov    %rsi,0x48(%rsp)
  0x0000000116b3e3e8: mov    %rdi,0x40(%rsp)
  0x0000000116b3e3ed: mov    %r8,0x38(%rsp)
  0x0000000116b3e3f2: mov    %r9,0x30(%rsp)
  0x0000000116b3e3f7: mov    %r10,0x28(%rsp)
  0x0000000116b3e3fc: mov    %r11,0x20(%rsp)
  0x0000000116b3e401: mov    %r12,0x18(%rsp)
  0x0000000116b3e406: mov    %r13,0x10(%rsp)
  0x0000000116b3e40b: mov    %r14,0x8(%rsp)
  0x0000000116b3e410: mov    %r15,(%rsp)
  0x0000000116b3e414: movabs $0x10cc6405e,%rdi
  0x0000000116b3e41e: movabs $0x116b3e3be,%rsi
  0x0000000116b3e428: mov    %rsp,%rdx
  0x0000000116b3e42b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e42f: callq  0x000000010c7dd830
  0x0000000116b3e434: hlt    
  0x0000000116b3e435: pop    %rax
  0x0000000116b3e436: movabs $0x0,%r10
  0x0000000116b3e440: mov    %r10,0x280(%r15)
  0x0000000116b3e447: movabs $0x0,%r10
  0x0000000116b3e451: mov    %r10,0x290(%r15)
  0x0000000116b3e458: movabs $0x0,%r10
  0x0000000116b3e462: mov    %r10,0x288(%r15)
  0x0000000116b3e469: cmpq   $0x0,0x8(%r15)
  0x0000000116b3e471: je     0x0000000116b3e47c
  0x0000000116b3e477: jmpq   0x0000000116b30420
  0x0000000116b3e47c: mov    -0x38(%rbp),%r13
  0x0000000116b3e480: mov    -0x30(%rbp),%r14
  0x0000000116b3e484: retq   
  0x0000000116b3e485: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e48a: sub    $0x80,%rsp
  0x0000000116b3e491: mov    %rax,0x78(%rsp)
  0x0000000116b3e496: mov    %rcx,0x70(%rsp)
  0x0000000116b3e49b: mov    %rdx,0x68(%rsp)
  0x0000000116b3e4a0: mov    %rbx,0x60(%rsp)
  0x0000000116b3e4a5: mov    %rbp,0x50(%rsp)
  0x0000000116b3e4aa: mov    %rsi,0x48(%rsp)
  0x0000000116b3e4af: mov    %rdi,0x40(%rsp)
  0x0000000116b3e4b4: mov    %r8,0x38(%rsp)
  0x0000000116b3e4b9: mov    %r9,0x30(%rsp)
  0x0000000116b3e4be: mov    %r10,0x28(%rsp)
  0x0000000116b3e4c3: mov    %r11,0x20(%rsp)
  0x0000000116b3e4c8: mov    %r12,0x18(%rsp)
  0x0000000116b3e4cd: mov    %r13,0x10(%rsp)
  0x0000000116b3e4d2: mov    %r14,0x8(%rsp)
  0x0000000116b3e4d7: mov    %r15,(%rsp)
  0x0000000116b3e4db: movabs $0x10cb763be,%rdi
  0x0000000116b3e4e5: movabs $0x116b3e485,%rsi
  0x0000000116b3e4ef: mov    %rsp,%rdx
  0x0000000116b3e4f2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e4f6: callq  0x000000010c7dd830
  0x0000000116b3e4fb: hlt    
  0x0000000116b3e4fc: movzbl 0x1(%r13),%ebx
  0x0000000116b3e501: inc    %r13
  0x0000000116b3e504: movabs $0x10ce38e80,%r10
  0x0000000116b3e50e: jmpq   *(%r10,%rbx,8)
  0x0000000116b3e512: movq   $0x0,-0x10(%rbp)
  0x0000000116b3e51a: mov    -0x38(%rbp),%r13
  0x0000000116b3e51e: mov    -0x30(%rbp),%r14
  0x0000000116b3e522: cmpq   $0x0,0x8(%r15)
  0x0000000116b3e52a: je     0x0000000116b3e800
  0x0000000116b3e530: callq  0x0000000116b3e53a
  0x0000000116b3e535: jmpq   0x0000000116b3e789
  0x0000000116b3e53a: lea    0x8(%rsp),%rax
  0x0000000116b3e53f: mov    %r13,-0x38(%rbp)
  0x0000000116b3e543: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3e54b: je     0x0000000116b3e5c8
  0x0000000116b3e551: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e556: sub    $0x80,%rsp
  0x0000000116b3e55d: mov    %rax,0x78(%rsp)
  0x0000000116b3e562: mov    %rcx,0x70(%rsp)
  0x0000000116b3e567: mov    %rdx,0x68(%rsp)
  0x0000000116b3e56c: mov    %rbx,0x60(%rsp)
  0x0000000116b3e571: mov    %rbp,0x50(%rsp)
  0x0000000116b3e576: mov    %rsi,0x48(%rsp)
  0x0000000116b3e57b: mov    %rdi,0x40(%rsp)
  0x0000000116b3e580: mov    %r8,0x38(%rsp)
  0x0000000116b3e585: mov    %r9,0x30(%rsp)
  0x0000000116b3e58a: mov    %r10,0x28(%rsp)
  0x0000000116b3e58f: mov    %r11,0x20(%rsp)
  0x0000000116b3e594: mov    %r12,0x18(%rsp)
  0x0000000116b3e599: mov    %r13,0x10(%rsp)
  0x0000000116b3e59e: mov    %r14,0x8(%rsp)
  0x0000000116b3e5a3: mov    %r15,(%rsp)
  0x0000000116b3e5a7: movabs $0x10cc2363b,%rdi
  0x0000000116b3e5b1: movabs $0x116b3e551,%rsi
  0x0000000116b3e5bb: mov    %rsp,%rdx
  0x0000000116b3e5be: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e5c2: callq  0x000000010c7dd830
  0x0000000116b3e5c7: hlt    
  0x0000000116b3e5c8: push   %r10
  0x0000000116b3e5ca: cmp    -0x9cf7d21(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3e5d1: je     0x0000000116b3e64e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3e5d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e5dc: sub    $0x80,%rsp
  0x0000000116b3e5e3: mov    %rax,0x78(%rsp)
  0x0000000116b3e5e8: mov    %rcx,0x70(%rsp)
  0x0000000116b3e5ed: mov    %rdx,0x68(%rsp)
  0x0000000116b3e5f2: mov    %rbx,0x60(%rsp)
  0x0000000116b3e5f7: mov    %rbp,0x50(%rsp)
  0x0000000116b3e5fc: mov    %rsi,0x48(%rsp)
  0x0000000116b3e601: mov    %rdi,0x40(%rsp)
  0x0000000116b3e606: mov    %r8,0x38(%rsp)
  0x0000000116b3e60b: mov    %r9,0x30(%rsp)
  0x0000000116b3e610: mov    %r10,0x28(%rsp)
  0x0000000116b3e615: mov    %r11,0x20(%rsp)
  0x0000000116b3e61a: mov    %r12,0x18(%rsp)
  0x0000000116b3e61f: mov    %r13,0x10(%rsp)
  0x0000000116b3e624: mov    %r14,0x8(%rsp)
  0x0000000116b3e629: mov    %r15,(%rsp)
  0x0000000116b3e62d: movabs $0x10cc63f17,%rdi
  0x0000000116b3e637: movabs $0x116b3e5d7,%rsi
  0x0000000116b3e641: mov    %rsp,%rdx
  0x0000000116b3e644: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e648: callq  0x000000010c7dd830
  0x0000000116b3e64d: hlt    
  0x0000000116b3e64e: pop    %r10
  0x0000000116b3e650: mov    %r15,%rdi
  0x0000000116b3e653: mov    %rbp,0x290(%r15)
  0x0000000116b3e65a: mov    %rax,0x280(%r15)
  0x0000000116b3e661: test   $0xf,%esp
  0x0000000116b3e667: je     0x0000000116b3e67f
  0x0000000116b3e66d: sub    $0x8,%rsp
  0x0000000116b3e671: callq  0x000000010c5881a0
  0x0000000116b3e676: add    $0x8,%rsp
  0x0000000116b3e67a: jmpq   0x0000000116b3e684
  0x0000000116b3e67f: callq  0x000000010c5881a0
  0x0000000116b3e684: push   %rax
  0x0000000116b3e685: push   %rdi
  0x0000000116b3e686: push   %rsi
  0x0000000116b3e687: push   %rdx
  0x0000000116b3e688: push   %rcx
  0x0000000116b3e689: push   %r8
  0x0000000116b3e68b: push   %r9
  0x0000000116b3e68d: push   %r10
  0x0000000116b3e68f: mov    %rsp,%r10
  0x0000000116b3e692: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e696: push   %r10
  0x0000000116b3e698: push   %r11
  0x0000000116b3e69a: mov    $0x109,%edi
  0x0000000116b3e69f: movabs $0x7ff815049fd5,%r10
  0x0000000116b3e6a9: callq  *%r10
  0x0000000116b3e6ac: pop    %r11
  0x0000000116b3e6ae: pop    %rsp
  0x0000000116b3e6af: pop    %r10
  0x0000000116b3e6b1: pop    %r9
  0x0000000116b3e6b3: pop    %r8
  0x0000000116b3e6b5: pop    %rcx
  0x0000000116b3e6b6: pop    %rdx
  0x0000000116b3e6b7: pop    %rsi
  0x0000000116b3e6b8: pop    %rdi
  0x0000000116b3e6b9: cmp    %rax,%r15
  0x0000000116b3e6bc: je     0x0000000116b3e739
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3e6c2: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e6c7: sub    $0x80,%rsp
  0x0000000116b3e6ce: mov    %rax,0x78(%rsp)
  0x0000000116b3e6d3: mov    %rcx,0x70(%rsp)
  0x0000000116b3e6d8: mov    %rdx,0x68(%rsp)
  0x0000000116b3e6dd: mov    %rbx,0x60(%rsp)
  0x0000000116b3e6e2: mov    %rbp,0x50(%rsp)
  0x0000000116b3e6e7: mov    %rsi,0x48(%rsp)
  0x0000000116b3e6ec: mov    %rdi,0x40(%rsp)
  0x0000000116b3e6f1: mov    %r8,0x38(%rsp)
  0x0000000116b3e6f6: mov    %r9,0x30(%rsp)
  0x0000000116b3e6fb: mov    %r10,0x28(%rsp)
  0x0000000116b3e700: mov    %r11,0x20(%rsp)
  0x0000000116b3e705: mov    %r12,0x18(%rsp)
  0x0000000116b3e70a: mov    %r13,0x10(%rsp)
  0x0000000116b3e70f: mov    %r14,0x8(%rsp)
  0x0000000116b3e714: mov    %r15,(%rsp)
  0x0000000116b3e718: movabs $0x10cc6405e,%rdi
  0x0000000116b3e722: movabs $0x116b3e6c2,%rsi
  0x0000000116b3e72c: mov    %rsp,%rdx
  0x0000000116b3e72f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e733: callq  0x000000010c7dd830
  0x0000000116b3e738: hlt    
  0x0000000116b3e739: pop    %rax
  0x0000000116b3e73a: movabs $0x0,%r10
  0x0000000116b3e744: mov    %r10,0x280(%r15)
  0x0000000116b3e74b: movabs $0x0,%r10
  0x0000000116b3e755: mov    %r10,0x290(%r15)
  0x0000000116b3e75c: movabs $0x0,%r10
  0x0000000116b3e766: mov    %r10,0x288(%r15)
  0x0000000116b3e76d: cmpq   $0x0,0x8(%r15)
  0x0000000116b3e775: je     0x0000000116b3e780
  0x0000000116b3e77b: jmpq   0x0000000116b30420
  0x0000000116b3e780: mov    -0x38(%rbp),%r13
  0x0000000116b3e784: mov    -0x30(%rbp),%r14
  0x0000000116b3e788: retq   
  0x0000000116b3e789: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e78e: sub    $0x80,%rsp
  0x0000000116b3e795: mov    %rax,0x78(%rsp)
  0x0000000116b3e79a: mov    %rcx,0x70(%rsp)
  0x0000000116b3e79f: mov    %rdx,0x68(%rsp)
  0x0000000116b3e7a4: mov    %rbx,0x60(%rsp)
  0x0000000116b3e7a9: mov    %rbp,0x50(%rsp)
  0x0000000116b3e7ae: mov    %rsi,0x48(%rsp)
  0x0000000116b3e7b3: mov    %rdi,0x40(%rsp)
  0x0000000116b3e7b8: mov    %r8,0x38(%rsp)
  0x0000000116b3e7bd: mov    %r9,0x30(%rsp)
  0x0000000116b3e7c2: mov    %r10,0x28(%rsp)
  0x0000000116b3e7c7: mov    %r11,0x20(%rsp)
  0x0000000116b3e7cc: mov    %r12,0x18(%rsp)
  0x0000000116b3e7d1: mov    %r13,0x10(%rsp)
  0x0000000116b3e7d6: mov    %r14,0x8(%rsp)
  0x0000000116b3e7db: mov    %r15,(%rsp)
  0x0000000116b3e7df: movabs $0x10cb763be,%rdi
  0x0000000116b3e7e9: movabs $0x116b3e789,%rsi
  0x0000000116b3e7f3: mov    %rsp,%rdx
  0x0000000116b3e7f6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e7fa: callq  0x000000010c7dd830
  0x0000000116b3e7ff: hlt    
  0x0000000116b3e800: movzbl 0x1(%r13),%ebx
  0x0000000116b3e805: inc    %r13
  0x0000000116b3e808: movabs $0x10ce38e80,%r10
  0x0000000116b3e812: jmpq   *(%r10,%rbx,8)
  0x0000000116b3e816: movq   $0x0,-0x10(%rbp)
  0x0000000116b3e81e: mov    -0x38(%rbp),%r13
  0x0000000116b3e822: mov    -0x30(%rbp),%r14
  0x0000000116b3e826: cmpq   $0x0,0x8(%r15)
  0x0000000116b3e82e: je     0x0000000116b3eb04
  0x0000000116b3e834: callq  0x0000000116b3e83e
  0x0000000116b3e839: jmpq   0x0000000116b3ea8d
  0x0000000116b3e83e: lea    0x8(%rsp),%rax
  0x0000000116b3e843: mov    %r13,-0x38(%rbp)
  0x0000000116b3e847: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3e84f: je     0x0000000116b3e8cc
  0x0000000116b3e855: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e85a: sub    $0x80,%rsp
  0x0000000116b3e861: mov    %rax,0x78(%rsp)
  0x0000000116b3e866: mov    %rcx,0x70(%rsp)
  0x0000000116b3e86b: mov    %rdx,0x68(%rsp)
  0x0000000116b3e870: mov    %rbx,0x60(%rsp)
  0x0000000116b3e875: mov    %rbp,0x50(%rsp)
  0x0000000116b3e87a: mov    %rsi,0x48(%rsp)
  0x0000000116b3e87f: mov    %rdi,0x40(%rsp)
  0x0000000116b3e884: mov    %r8,0x38(%rsp)
  0x0000000116b3e889: mov    %r9,0x30(%rsp)
  0x0000000116b3e88e: mov    %r10,0x28(%rsp)
  0x0000000116b3e893: mov    %r11,0x20(%rsp)
  0x0000000116b3e898: mov    %r12,0x18(%rsp)
  0x0000000116b3e89d: mov    %r13,0x10(%rsp)
  0x0000000116b3e8a2: mov    %r14,0x8(%rsp)
  0x0000000116b3e8a7: mov    %r15,(%rsp)
  0x0000000116b3e8ab: movabs $0x10cc2363b,%rdi
  0x0000000116b3e8b5: movabs $0x116b3e855,%rsi
  0x0000000116b3e8bf: mov    %rsp,%rdx
  0x0000000116b3e8c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e8c6: callq  0x000000010c7dd830
  0x0000000116b3e8cb: hlt    
  0x0000000116b3e8cc: push   %r10
  0x0000000116b3e8ce: cmp    -0x9cf8025(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3e8d5: je     0x0000000116b3e952
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3e8db: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e8e0: sub    $0x80,%rsp
  0x0000000116b3e8e7: mov    %rax,0x78(%rsp)
  0x0000000116b3e8ec: mov    %rcx,0x70(%rsp)
  0x0000000116b3e8f1: mov    %rdx,0x68(%rsp)
  0x0000000116b3e8f6: mov    %rbx,0x60(%rsp)
  0x0000000116b3e8fb: mov    %rbp,0x50(%rsp)
  0x0000000116b3e900: mov    %rsi,0x48(%rsp)
  0x0000000116b3e905: mov    %rdi,0x40(%rsp)
  0x0000000116b3e90a: mov    %r8,0x38(%rsp)
  0x0000000116b3e90f: mov    %r9,0x30(%rsp)
  0x0000000116b3e914: mov    %r10,0x28(%rsp)
  0x0000000116b3e919: mov    %r11,0x20(%rsp)
  0x0000000116b3e91e: mov    %r12,0x18(%rsp)
  0x0000000116b3e923: mov    %r13,0x10(%rsp)
  0x0000000116b3e928: mov    %r14,0x8(%rsp)
  0x0000000116b3e92d: mov    %r15,(%rsp)
  0x0000000116b3e931: movabs $0x10cc63f17,%rdi
  0x0000000116b3e93b: movabs $0x116b3e8db,%rsi
  0x0000000116b3e945: mov    %rsp,%rdx
  0x0000000116b3e948: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e94c: callq  0x000000010c7dd830
  0x0000000116b3e951: hlt    
  0x0000000116b3e952: pop    %r10
  0x0000000116b3e954: mov    %r15,%rdi
  0x0000000116b3e957: mov    %rbp,0x290(%r15)
  0x0000000116b3e95e: mov    %rax,0x280(%r15)
  0x0000000116b3e965: test   $0xf,%esp
  0x0000000116b3e96b: je     0x0000000116b3e983
  0x0000000116b3e971: sub    $0x8,%rsp
  0x0000000116b3e975: callq  0x000000010c5881a0
  0x0000000116b3e97a: add    $0x8,%rsp
  0x0000000116b3e97e: jmpq   0x0000000116b3e988
  0x0000000116b3e983: callq  0x000000010c5881a0
  0x0000000116b3e988: push   %rax
  0x0000000116b3e989: push   %rdi
  0x0000000116b3e98a: push   %rsi
  0x0000000116b3e98b: push   %rdx
  0x0000000116b3e98c: push   %rcx
  0x0000000116b3e98d: push   %r8
  0x0000000116b3e98f: push   %r9
  0x0000000116b3e991: push   %r10
  0x0000000116b3e993: mov    %rsp,%r10
  0x0000000116b3e996: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3e99a: push   %r10
  0x0000000116b3e99c: push   %r11
  0x0000000116b3e99e: mov    $0x109,%edi
  0x0000000116b3e9a3: movabs $0x7ff815049fd5,%r10
  0x0000000116b3e9ad: callq  *%r10
  0x0000000116b3e9b0: pop    %r11
  0x0000000116b3e9b2: pop    %rsp
  0x0000000116b3e9b3: pop    %r10
  0x0000000116b3e9b5: pop    %r9
  0x0000000116b3e9b7: pop    %r8
  0x0000000116b3e9b9: pop    %rcx
  0x0000000116b3e9ba: pop    %rdx
  0x0000000116b3e9bb: pop    %rsi
  0x0000000116b3e9bc: pop    %rdi
  0x0000000116b3e9bd: cmp    %rax,%r15
  0x0000000116b3e9c0: je     0x0000000116b3ea3d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3e9c6: mov    %rsp,-0x28(%rsp)
  0x0000000116b3e9cb: sub    $0x80,%rsp
  0x0000000116b3e9d2: mov    %rax,0x78(%rsp)
  0x0000000116b3e9d7: mov    %rcx,0x70(%rsp)
  0x0000000116b3e9dc: mov    %rdx,0x68(%rsp)
  0x0000000116b3e9e1: mov    %rbx,0x60(%rsp)
  0x0000000116b3e9e6: mov    %rbp,0x50(%rsp)
  0x0000000116b3e9eb: mov    %rsi,0x48(%rsp)
  0x0000000116b3e9f0: mov    %rdi,0x40(%rsp)
  0x0000000116b3e9f5: mov    %r8,0x38(%rsp)
  0x0000000116b3e9fa: mov    %r9,0x30(%rsp)
  0x0000000116b3e9ff: mov    %r10,0x28(%rsp)
  0x0000000116b3ea04: mov    %r11,0x20(%rsp)
  0x0000000116b3ea09: mov    %r12,0x18(%rsp)
  0x0000000116b3ea0e: mov    %r13,0x10(%rsp)
  0x0000000116b3ea13: mov    %r14,0x8(%rsp)
  0x0000000116b3ea18: mov    %r15,(%rsp)
  0x0000000116b3ea1c: movabs $0x10cc6405e,%rdi
  0x0000000116b3ea26: movabs $0x116b3e9c6,%rsi
  0x0000000116b3ea30: mov    %rsp,%rdx
  0x0000000116b3ea33: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ea37: callq  0x000000010c7dd830
  0x0000000116b3ea3c: hlt    
  0x0000000116b3ea3d: pop    %rax
  0x0000000116b3ea3e: movabs $0x0,%r10
  0x0000000116b3ea48: mov    %r10,0x280(%r15)
  0x0000000116b3ea4f: movabs $0x0,%r10
  0x0000000116b3ea59: mov    %r10,0x290(%r15)
  0x0000000116b3ea60: movabs $0x0,%r10
  0x0000000116b3ea6a: mov    %r10,0x288(%r15)
  0x0000000116b3ea71: cmpq   $0x0,0x8(%r15)
  0x0000000116b3ea79: je     0x0000000116b3ea84
  0x0000000116b3ea7f: jmpq   0x0000000116b30420
  0x0000000116b3ea84: mov    -0x38(%rbp),%r13
  0x0000000116b3ea88: mov    -0x30(%rbp),%r14
  0x0000000116b3ea8c: retq   
  0x0000000116b3ea8d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ea92: sub    $0x80,%rsp
  0x0000000116b3ea99: mov    %rax,0x78(%rsp)
  0x0000000116b3ea9e: mov    %rcx,0x70(%rsp)
  0x0000000116b3eaa3: mov    %rdx,0x68(%rsp)
  0x0000000116b3eaa8: mov    %rbx,0x60(%rsp)
  0x0000000116b3eaad: mov    %rbp,0x50(%rsp)
  0x0000000116b3eab2: mov    %rsi,0x48(%rsp)
  0x0000000116b3eab7: mov    %rdi,0x40(%rsp)
  0x0000000116b3eabc: mov    %r8,0x38(%rsp)
  0x0000000116b3eac1: mov    %r9,0x30(%rsp)
  0x0000000116b3eac6: mov    %r10,0x28(%rsp)
  0x0000000116b3eacb: mov    %r11,0x20(%rsp)
  0x0000000116b3ead0: mov    %r12,0x18(%rsp)
  0x0000000116b3ead5: mov    %r13,0x10(%rsp)
  0x0000000116b3eada: mov    %r14,0x8(%rsp)
  0x0000000116b3eadf: mov    %r15,(%rsp)
  0x0000000116b3eae3: movabs $0x10cb763be,%rdi
  0x0000000116b3eaed: movabs $0x116b3ea8d,%rsi
  0x0000000116b3eaf7: mov    %rsp,%rdx
  0x0000000116b3eafa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3eafe: callq  0x000000010c7dd830
  0x0000000116b3eb03: hlt    
  0x0000000116b3eb04: movzbl 0x1(%r13),%ebx
  0x0000000116b3eb09: inc    %r13
  0x0000000116b3eb0c: movabs $0x10ce38e80,%r10
  0x0000000116b3eb16: jmpq   *(%r10,%rbx,8)
  0x0000000116b3eb1a: movq   $0x0,-0x10(%rbp)
  0x0000000116b3eb22: mov    -0x38(%rbp),%r13
  0x0000000116b3eb26: mov    -0x30(%rbp),%r14
  0x0000000116b3eb2a: cmpq   $0x0,0x8(%r15)
  0x0000000116b3eb32: je     0x0000000116b3ee08
  0x0000000116b3eb38: callq  0x0000000116b3eb42
  0x0000000116b3eb3d: jmpq   0x0000000116b3ed91
  0x0000000116b3eb42: lea    0x8(%rsp),%rax
  0x0000000116b3eb47: mov    %r13,-0x38(%rbp)
  0x0000000116b3eb4b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3eb53: je     0x0000000116b3ebd0
  0x0000000116b3eb59: mov    %rsp,-0x28(%rsp)
  0x0000000116b3eb5e: sub    $0x80,%rsp
  0x0000000116b3eb65: mov    %rax,0x78(%rsp)
  0x0000000116b3eb6a: mov    %rcx,0x70(%rsp)
  0x0000000116b3eb6f: mov    %rdx,0x68(%rsp)
  0x0000000116b3eb74: mov    %rbx,0x60(%rsp)
  0x0000000116b3eb79: mov    %rbp,0x50(%rsp)
  0x0000000116b3eb7e: mov    %rsi,0x48(%rsp)
  0x0000000116b3eb83: mov    %rdi,0x40(%rsp)
  0x0000000116b3eb88: mov    %r8,0x38(%rsp)
  0x0000000116b3eb8d: mov    %r9,0x30(%rsp)
  0x0000000116b3eb92: mov    %r10,0x28(%rsp)
  0x0000000116b3eb97: mov    %r11,0x20(%rsp)
  0x0000000116b3eb9c: mov    %r12,0x18(%rsp)
  0x0000000116b3eba1: mov    %r13,0x10(%rsp)
  0x0000000116b3eba6: mov    %r14,0x8(%rsp)
  0x0000000116b3ebab: mov    %r15,(%rsp)
  0x0000000116b3ebaf: movabs $0x10cc2363b,%rdi
  0x0000000116b3ebb9: movabs $0x116b3eb59,%rsi
  0x0000000116b3ebc3: mov    %rsp,%rdx
  0x0000000116b3ebc6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ebca: callq  0x000000010c7dd830
  0x0000000116b3ebcf: hlt    
  0x0000000116b3ebd0: push   %r10
  0x0000000116b3ebd2: cmp    -0x9cf8329(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3ebd9: je     0x0000000116b3ec56
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3ebdf: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ebe4: sub    $0x80,%rsp
  0x0000000116b3ebeb: mov    %rax,0x78(%rsp)
  0x0000000116b3ebf0: mov    %rcx,0x70(%rsp)
  0x0000000116b3ebf5: mov    %rdx,0x68(%rsp)
  0x0000000116b3ebfa: mov    %rbx,0x60(%rsp)
  0x0000000116b3ebff: mov    %rbp,0x50(%rsp)
  0x0000000116b3ec04: mov    %rsi,0x48(%rsp)
  0x0000000116b3ec09: mov    %rdi,0x40(%rsp)
  0x0000000116b3ec0e: mov    %r8,0x38(%rsp)
  0x0000000116b3ec13: mov    %r9,0x30(%rsp)
  0x0000000116b3ec18: mov    %r10,0x28(%rsp)
  0x0000000116b3ec1d: mov    %r11,0x20(%rsp)
  0x0000000116b3ec22: mov    %r12,0x18(%rsp)
  0x0000000116b3ec27: mov    %r13,0x10(%rsp)
  0x0000000116b3ec2c: mov    %r14,0x8(%rsp)
  0x0000000116b3ec31: mov    %r15,(%rsp)
  0x0000000116b3ec35: movabs $0x10cc63f17,%rdi
  0x0000000116b3ec3f: movabs $0x116b3ebdf,%rsi
  0x0000000116b3ec49: mov    %rsp,%rdx
  0x0000000116b3ec4c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ec50: callq  0x000000010c7dd830
  0x0000000116b3ec55: hlt    
  0x0000000116b3ec56: pop    %r10
  0x0000000116b3ec58: mov    %r15,%rdi
  0x0000000116b3ec5b: mov    %rbp,0x290(%r15)
  0x0000000116b3ec62: mov    %rax,0x280(%r15)
  0x0000000116b3ec69: test   $0xf,%esp
  0x0000000116b3ec6f: je     0x0000000116b3ec87
  0x0000000116b3ec75: sub    $0x8,%rsp
  0x0000000116b3ec79: callq  0x000000010c5881a0
  0x0000000116b3ec7e: add    $0x8,%rsp
  0x0000000116b3ec82: jmpq   0x0000000116b3ec8c
  0x0000000116b3ec87: callq  0x000000010c5881a0
  0x0000000116b3ec8c: push   %rax
  0x0000000116b3ec8d: push   %rdi
  0x0000000116b3ec8e: push   %rsi
  0x0000000116b3ec8f: push   %rdx
  0x0000000116b3ec90: push   %rcx
  0x0000000116b3ec91: push   %r8
  0x0000000116b3ec93: push   %r9
  0x0000000116b3ec95: push   %r10
  0x0000000116b3ec97: mov    %rsp,%r10
  0x0000000116b3ec9a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ec9e: push   %r10
  0x0000000116b3eca0: push   %r11
  0x0000000116b3eca2: mov    $0x109,%edi
  0x0000000116b3eca7: movabs $0x7ff815049fd5,%r10
  0x0000000116b3ecb1: callq  *%r10
  0x0000000116b3ecb4: pop    %r11
  0x0000000116b3ecb6: pop    %rsp
  0x0000000116b3ecb7: pop    %r10
  0x0000000116b3ecb9: pop    %r9
  0x0000000116b3ecbb: pop    %r8
  0x0000000116b3ecbd: pop    %rcx
  0x0000000116b3ecbe: pop    %rdx
  0x0000000116b3ecbf: pop    %rsi
  0x0000000116b3ecc0: pop    %rdi
  0x0000000116b3ecc1: cmp    %rax,%r15
  0x0000000116b3ecc4: je     0x0000000116b3ed41
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3ecca: mov    %rsp,-0x28(%rsp)
  0x0000000116b3eccf: sub    $0x80,%rsp
  0x0000000116b3ecd6: mov    %rax,0x78(%rsp)
  0x0000000116b3ecdb: mov    %rcx,0x70(%rsp)
  0x0000000116b3ece0: mov    %rdx,0x68(%rsp)
  0x0000000116b3ece5: mov    %rbx,0x60(%rsp)
  0x0000000116b3ecea: mov    %rbp,0x50(%rsp)
  0x0000000116b3ecef: mov    %rsi,0x48(%rsp)
  0x0000000116b3ecf4: mov    %rdi,0x40(%rsp)
  0x0000000116b3ecf9: mov    %r8,0x38(%rsp)
  0x0000000116b3ecfe: mov    %r9,0x30(%rsp)
  0x0000000116b3ed03: mov    %r10,0x28(%rsp)
  0x0000000116b3ed08: mov    %r11,0x20(%rsp)
  0x0000000116b3ed0d: mov    %r12,0x18(%rsp)
  0x0000000116b3ed12: mov    %r13,0x10(%rsp)
  0x0000000116b3ed17: mov    %r14,0x8(%rsp)
  0x0000000116b3ed1c: mov    %r15,(%rsp)
  0x0000000116b3ed20: movabs $0x10cc6405e,%rdi
  0x0000000116b3ed2a: movabs $0x116b3ecca,%rsi
  0x0000000116b3ed34: mov    %rsp,%rdx
  0x0000000116b3ed37: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ed3b: callq  0x000000010c7dd830
  0x0000000116b3ed40: hlt    
  0x0000000116b3ed41: pop    %rax
  0x0000000116b3ed42: movabs $0x0,%r10
  0x0000000116b3ed4c: mov    %r10,0x280(%r15)
  0x0000000116b3ed53: movabs $0x0,%r10
  0x0000000116b3ed5d: mov    %r10,0x290(%r15)
  0x0000000116b3ed64: movabs $0x0,%r10
  0x0000000116b3ed6e: mov    %r10,0x288(%r15)
  0x0000000116b3ed75: cmpq   $0x0,0x8(%r15)
  0x0000000116b3ed7d: je     0x0000000116b3ed88
  0x0000000116b3ed83: jmpq   0x0000000116b30420
  0x0000000116b3ed88: mov    -0x38(%rbp),%r13
  0x0000000116b3ed8c: mov    -0x30(%rbp),%r14
  0x0000000116b3ed90: retq   
  0x0000000116b3ed91: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ed96: sub    $0x80,%rsp
  0x0000000116b3ed9d: mov    %rax,0x78(%rsp)
  0x0000000116b3eda2: mov    %rcx,0x70(%rsp)
  0x0000000116b3eda7: mov    %rdx,0x68(%rsp)
  0x0000000116b3edac: mov    %rbx,0x60(%rsp)
  0x0000000116b3edb1: mov    %rbp,0x50(%rsp)
  0x0000000116b3edb6: mov    %rsi,0x48(%rsp)
  0x0000000116b3edbb: mov    %rdi,0x40(%rsp)
  0x0000000116b3edc0: mov    %r8,0x38(%rsp)
  0x0000000116b3edc5: mov    %r9,0x30(%rsp)
  0x0000000116b3edca: mov    %r10,0x28(%rsp)
  0x0000000116b3edcf: mov    %r11,0x20(%rsp)
  0x0000000116b3edd4: mov    %r12,0x18(%rsp)
  0x0000000116b3edd9: mov    %r13,0x10(%rsp)
  0x0000000116b3edde: mov    %r14,0x8(%rsp)
  0x0000000116b3ede3: mov    %r15,(%rsp)
  0x0000000116b3ede7: movabs $0x10cb763be,%rdi
  0x0000000116b3edf1: movabs $0x116b3ed91,%rsi
  0x0000000116b3edfb: mov    %rsp,%rdx
  0x0000000116b3edfe: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ee02: callq  0x000000010c7dd830
  0x0000000116b3ee07: hlt    
  0x0000000116b3ee08: movzbl 0x1(%r13),%ebx
  0x0000000116b3ee0d: inc    %r13
  0x0000000116b3ee10: movabs $0x10ce3ae80,%r10
  0x0000000116b3ee1a: jmpq   *(%r10,%rbx,8)
  0x0000000116b3ee1e: movq   $0x0,-0x10(%rbp)
  0x0000000116b3ee26: mov    -0x38(%rbp),%r13
  0x0000000116b3ee2a: mov    -0x30(%rbp),%r14
  0x0000000116b3ee2e: cmpq   $0x0,0x8(%r15)
  0x0000000116b3ee36: je     0x0000000116b3f10c
  0x0000000116b3ee3c: callq  0x0000000116b3ee46
  0x0000000116b3ee41: jmpq   0x0000000116b3f095
  0x0000000116b3ee46: lea    0x8(%rsp),%rax
  0x0000000116b3ee4b: mov    %r13,-0x38(%rbp)
  0x0000000116b3ee4f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3ee57: je     0x0000000116b3eed4
  0x0000000116b3ee5d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ee62: sub    $0x80,%rsp
  0x0000000116b3ee69: mov    %rax,0x78(%rsp)
  0x0000000116b3ee6e: mov    %rcx,0x70(%rsp)
  0x0000000116b3ee73: mov    %rdx,0x68(%rsp)
  0x0000000116b3ee78: mov    %rbx,0x60(%rsp)
  0x0000000116b3ee7d: mov    %rbp,0x50(%rsp)
  0x0000000116b3ee82: mov    %rsi,0x48(%rsp)
  0x0000000116b3ee87: mov    %rdi,0x40(%rsp)
  0x0000000116b3ee8c: mov    %r8,0x38(%rsp)
  0x0000000116b3ee91: mov    %r9,0x30(%rsp)
  0x0000000116b3ee96: mov    %r10,0x28(%rsp)
  0x0000000116b3ee9b: mov    %r11,0x20(%rsp)
  0x0000000116b3eea0: mov    %r12,0x18(%rsp)
  0x0000000116b3eea5: mov    %r13,0x10(%rsp)
  0x0000000116b3eeaa: mov    %r14,0x8(%rsp)
  0x0000000116b3eeaf: mov    %r15,(%rsp)
  0x0000000116b3eeb3: movabs $0x10cc2363b,%rdi
  0x0000000116b3eebd: movabs $0x116b3ee5d,%rsi
  0x0000000116b3eec7: mov    %rsp,%rdx
  0x0000000116b3eeca: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3eece: callq  0x000000010c7dd830
  0x0000000116b3eed3: hlt    
  0x0000000116b3eed4: push   %r10
  0x0000000116b3eed6: cmp    -0x9cf862d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3eedd: je     0x0000000116b3ef5a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3eee3: mov    %rsp,-0x28(%rsp)
  0x0000000116b3eee8: sub    $0x80,%rsp
  0x0000000116b3eeef: mov    %rax,0x78(%rsp)
  0x0000000116b3eef4: mov    %rcx,0x70(%rsp)
  0x0000000116b3eef9: mov    %rdx,0x68(%rsp)
  0x0000000116b3eefe: mov    %rbx,0x60(%rsp)
  0x0000000116b3ef03: mov    %rbp,0x50(%rsp)
  0x0000000116b3ef08: mov    %rsi,0x48(%rsp)
  0x0000000116b3ef0d: mov    %rdi,0x40(%rsp)
  0x0000000116b3ef12: mov    %r8,0x38(%rsp)
  0x0000000116b3ef17: mov    %r9,0x30(%rsp)
  0x0000000116b3ef1c: mov    %r10,0x28(%rsp)
  0x0000000116b3ef21: mov    %r11,0x20(%rsp)
  0x0000000116b3ef26: mov    %r12,0x18(%rsp)
  0x0000000116b3ef2b: mov    %r13,0x10(%rsp)
  0x0000000116b3ef30: mov    %r14,0x8(%rsp)
  0x0000000116b3ef35: mov    %r15,(%rsp)
  0x0000000116b3ef39: movabs $0x10cc63f17,%rdi
  0x0000000116b3ef43: movabs $0x116b3eee3,%rsi
  0x0000000116b3ef4d: mov    %rsp,%rdx
  0x0000000116b3ef50: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ef54: callq  0x000000010c7dd830
  0x0000000116b3ef59: hlt    
  0x0000000116b3ef5a: pop    %r10
  0x0000000116b3ef5c: mov    %r15,%rdi
  0x0000000116b3ef5f: mov    %rbp,0x290(%r15)
  0x0000000116b3ef66: mov    %rax,0x280(%r15)
  0x0000000116b3ef6d: test   $0xf,%esp
  0x0000000116b3ef73: je     0x0000000116b3ef8b
  0x0000000116b3ef79: sub    $0x8,%rsp
  0x0000000116b3ef7d: callq  0x000000010c5881a0
  0x0000000116b3ef82: add    $0x8,%rsp
  0x0000000116b3ef86: jmpq   0x0000000116b3ef90
  0x0000000116b3ef8b: callq  0x000000010c5881a0
  0x0000000116b3ef90: push   %rax
  0x0000000116b3ef91: push   %rdi
  0x0000000116b3ef92: push   %rsi
  0x0000000116b3ef93: push   %rdx
  0x0000000116b3ef94: push   %rcx
  0x0000000116b3ef95: push   %r8
  0x0000000116b3ef97: push   %r9
  0x0000000116b3ef99: push   %r10
  0x0000000116b3ef9b: mov    %rsp,%r10
  0x0000000116b3ef9e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3efa2: push   %r10
  0x0000000116b3efa4: push   %r11
  0x0000000116b3efa6: mov    $0x109,%edi
  0x0000000116b3efab: movabs $0x7ff815049fd5,%r10
  0x0000000116b3efb5: callq  *%r10
  0x0000000116b3efb8: pop    %r11
  0x0000000116b3efba: pop    %rsp
  0x0000000116b3efbb: pop    %r10
  0x0000000116b3efbd: pop    %r9
  0x0000000116b3efbf: pop    %r8
  0x0000000116b3efc1: pop    %rcx
  0x0000000116b3efc2: pop    %rdx
  0x0000000116b3efc3: pop    %rsi
  0x0000000116b3efc4: pop    %rdi
  0x0000000116b3efc5: cmp    %rax,%r15
  0x0000000116b3efc8: je     0x0000000116b3f045
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3efce: mov    %rsp,-0x28(%rsp)
  0x0000000116b3efd3: sub    $0x80,%rsp
  0x0000000116b3efda: mov    %rax,0x78(%rsp)
  0x0000000116b3efdf: mov    %rcx,0x70(%rsp)
  0x0000000116b3efe4: mov    %rdx,0x68(%rsp)
  0x0000000116b3efe9: mov    %rbx,0x60(%rsp)
  0x0000000116b3efee: mov    %rbp,0x50(%rsp)
  0x0000000116b3eff3: mov    %rsi,0x48(%rsp)
  0x0000000116b3eff8: mov    %rdi,0x40(%rsp)
  0x0000000116b3effd: mov    %r8,0x38(%rsp)
  0x0000000116b3f002: mov    %r9,0x30(%rsp)
  0x0000000116b3f007: mov    %r10,0x28(%rsp)
  0x0000000116b3f00c: mov    %r11,0x20(%rsp)
  0x0000000116b3f011: mov    %r12,0x18(%rsp)
  0x0000000116b3f016: mov    %r13,0x10(%rsp)
  0x0000000116b3f01b: mov    %r14,0x8(%rsp)
  0x0000000116b3f020: mov    %r15,(%rsp)
  0x0000000116b3f024: movabs $0x10cc6405e,%rdi
  0x0000000116b3f02e: movabs $0x116b3efce,%rsi
  0x0000000116b3f038: mov    %rsp,%rdx
  0x0000000116b3f03b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f03f: callq  0x000000010c7dd830
  0x0000000116b3f044: hlt    
  0x0000000116b3f045: pop    %rax
  0x0000000116b3f046: movabs $0x0,%r10
  0x0000000116b3f050: mov    %r10,0x280(%r15)
  0x0000000116b3f057: movabs $0x0,%r10
  0x0000000116b3f061: mov    %r10,0x290(%r15)
  0x0000000116b3f068: movabs $0x0,%r10
  0x0000000116b3f072: mov    %r10,0x288(%r15)
  0x0000000116b3f079: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f081: je     0x0000000116b3f08c
  0x0000000116b3f087: jmpq   0x0000000116b30420
  0x0000000116b3f08c: mov    -0x38(%rbp),%r13
  0x0000000116b3f090: mov    -0x30(%rbp),%r14
  0x0000000116b3f094: retq   
  0x0000000116b3f095: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f09a: sub    $0x80,%rsp
  0x0000000116b3f0a1: mov    %rax,0x78(%rsp)
  0x0000000116b3f0a6: mov    %rcx,0x70(%rsp)
  0x0000000116b3f0ab: mov    %rdx,0x68(%rsp)
  0x0000000116b3f0b0: mov    %rbx,0x60(%rsp)
  0x0000000116b3f0b5: mov    %rbp,0x50(%rsp)
  0x0000000116b3f0ba: mov    %rsi,0x48(%rsp)
  0x0000000116b3f0bf: mov    %rdi,0x40(%rsp)
  0x0000000116b3f0c4: mov    %r8,0x38(%rsp)
  0x0000000116b3f0c9: mov    %r9,0x30(%rsp)
  0x0000000116b3f0ce: mov    %r10,0x28(%rsp)
  0x0000000116b3f0d3: mov    %r11,0x20(%rsp)
  0x0000000116b3f0d8: mov    %r12,0x18(%rsp)
  0x0000000116b3f0dd: mov    %r13,0x10(%rsp)
  0x0000000116b3f0e2: mov    %r14,0x8(%rsp)
  0x0000000116b3f0e7: mov    %r15,(%rsp)
  0x0000000116b3f0eb: movabs $0x10cb763be,%rdi
  0x0000000116b3f0f5: movabs $0x116b3f095,%rsi
  0x0000000116b3f0ff: mov    %rsp,%rdx
  0x0000000116b3f102: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f106: callq  0x000000010c7dd830
  0x0000000116b3f10b: hlt    
  0x0000000116b3f10c: movzbl 0x1(%r13),%ebx
  0x0000000116b3f111: inc    %r13
  0x0000000116b3f114: movabs $0x10ce38e80,%r10
  0x0000000116b3f11e: jmpq   *(%r10,%rbx,8)
  0x0000000116b3f122: movq   $0x0,-0x10(%rbp)
  0x0000000116b3f12a: mov    -0x38(%rbp),%r13
  0x0000000116b3f12e: mov    -0x30(%rbp),%r14
  0x0000000116b3f132: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f13a: je     0x0000000116b3f410
  0x0000000116b3f140: callq  0x0000000116b3f14a
  0x0000000116b3f145: jmpq   0x0000000116b3f399
  0x0000000116b3f14a: lea    0x8(%rsp),%rax
  0x0000000116b3f14f: mov    %r13,-0x38(%rbp)
  0x0000000116b3f153: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3f15b: je     0x0000000116b3f1d8
  0x0000000116b3f161: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f166: sub    $0x80,%rsp
  0x0000000116b3f16d: mov    %rax,0x78(%rsp)
  0x0000000116b3f172: mov    %rcx,0x70(%rsp)
  0x0000000116b3f177: mov    %rdx,0x68(%rsp)
  0x0000000116b3f17c: mov    %rbx,0x60(%rsp)
  0x0000000116b3f181: mov    %rbp,0x50(%rsp)
  0x0000000116b3f186: mov    %rsi,0x48(%rsp)
  0x0000000116b3f18b: mov    %rdi,0x40(%rsp)
  0x0000000116b3f190: mov    %r8,0x38(%rsp)
  0x0000000116b3f195: mov    %r9,0x30(%rsp)
  0x0000000116b3f19a: mov    %r10,0x28(%rsp)
  0x0000000116b3f19f: mov    %r11,0x20(%rsp)
  0x0000000116b3f1a4: mov    %r12,0x18(%rsp)
  0x0000000116b3f1a9: mov    %r13,0x10(%rsp)
  0x0000000116b3f1ae: mov    %r14,0x8(%rsp)
  0x0000000116b3f1b3: mov    %r15,(%rsp)
  0x0000000116b3f1b7: movabs $0x10cc2363b,%rdi
  0x0000000116b3f1c1: movabs $0x116b3f161,%rsi
  0x0000000116b3f1cb: mov    %rsp,%rdx
  0x0000000116b3f1ce: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f1d2: callq  0x000000010c7dd830
  0x0000000116b3f1d7: hlt    
  0x0000000116b3f1d8: push   %r10
  0x0000000116b3f1da: cmp    -0x9cf8931(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3f1e1: je     0x0000000116b3f25e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3f1e7: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f1ec: sub    $0x80,%rsp
  0x0000000116b3f1f3: mov    %rax,0x78(%rsp)
  0x0000000116b3f1f8: mov    %rcx,0x70(%rsp)
  0x0000000116b3f1fd: mov    %rdx,0x68(%rsp)
  0x0000000116b3f202: mov    %rbx,0x60(%rsp)
  0x0000000116b3f207: mov    %rbp,0x50(%rsp)
  0x0000000116b3f20c: mov    %rsi,0x48(%rsp)
  0x0000000116b3f211: mov    %rdi,0x40(%rsp)
  0x0000000116b3f216: mov    %r8,0x38(%rsp)
  0x0000000116b3f21b: mov    %r9,0x30(%rsp)
  0x0000000116b3f220: mov    %r10,0x28(%rsp)
  0x0000000116b3f225: mov    %r11,0x20(%rsp)
  0x0000000116b3f22a: mov    %r12,0x18(%rsp)
  0x0000000116b3f22f: mov    %r13,0x10(%rsp)
  0x0000000116b3f234: mov    %r14,0x8(%rsp)
  0x0000000116b3f239: mov    %r15,(%rsp)
  0x0000000116b3f23d: movabs $0x10cc63f17,%rdi
  0x0000000116b3f247: movabs $0x116b3f1e7,%rsi
  0x0000000116b3f251: mov    %rsp,%rdx
  0x0000000116b3f254: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f258: callq  0x000000010c7dd830
  0x0000000116b3f25d: hlt    
  0x0000000116b3f25e: pop    %r10
  0x0000000116b3f260: mov    %r15,%rdi
  0x0000000116b3f263: mov    %rbp,0x290(%r15)
  0x0000000116b3f26a: mov    %rax,0x280(%r15)
  0x0000000116b3f271: test   $0xf,%esp
  0x0000000116b3f277: je     0x0000000116b3f28f
  0x0000000116b3f27d: sub    $0x8,%rsp
  0x0000000116b3f281: callq  0x000000010c5881a0
  0x0000000116b3f286: add    $0x8,%rsp
  0x0000000116b3f28a: jmpq   0x0000000116b3f294
  0x0000000116b3f28f: callq  0x000000010c5881a0
  0x0000000116b3f294: push   %rax
  0x0000000116b3f295: push   %rdi
  0x0000000116b3f296: push   %rsi
  0x0000000116b3f297: push   %rdx
  0x0000000116b3f298: push   %rcx
  0x0000000116b3f299: push   %r8
  0x0000000116b3f29b: push   %r9
  0x0000000116b3f29d: push   %r10
  0x0000000116b3f29f: mov    %rsp,%r10
  0x0000000116b3f2a2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f2a6: push   %r10
  0x0000000116b3f2a8: push   %r11
  0x0000000116b3f2aa: mov    $0x109,%edi
  0x0000000116b3f2af: movabs $0x7ff815049fd5,%r10
  0x0000000116b3f2b9: callq  *%r10
  0x0000000116b3f2bc: pop    %r11
  0x0000000116b3f2be: pop    %rsp
  0x0000000116b3f2bf: pop    %r10
  0x0000000116b3f2c1: pop    %r9
  0x0000000116b3f2c3: pop    %r8
  0x0000000116b3f2c5: pop    %rcx
  0x0000000116b3f2c6: pop    %rdx
  0x0000000116b3f2c7: pop    %rsi
  0x0000000116b3f2c8: pop    %rdi
  0x0000000116b3f2c9: cmp    %rax,%r15
  0x0000000116b3f2cc: je     0x0000000116b3f349
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3f2d2: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f2d7: sub    $0x80,%rsp
  0x0000000116b3f2de: mov    %rax,0x78(%rsp)
  0x0000000116b3f2e3: mov    %rcx,0x70(%rsp)
  0x0000000116b3f2e8: mov    %rdx,0x68(%rsp)
  0x0000000116b3f2ed: mov    %rbx,0x60(%rsp)
  0x0000000116b3f2f2: mov    %rbp,0x50(%rsp)
  0x0000000116b3f2f7: mov    %rsi,0x48(%rsp)
  0x0000000116b3f2fc: mov    %rdi,0x40(%rsp)
  0x0000000116b3f301: mov    %r8,0x38(%rsp)
  0x0000000116b3f306: mov    %r9,0x30(%rsp)
  0x0000000116b3f30b: mov    %r10,0x28(%rsp)
  0x0000000116b3f310: mov    %r11,0x20(%rsp)
  0x0000000116b3f315: mov    %r12,0x18(%rsp)
  0x0000000116b3f31a: mov    %r13,0x10(%rsp)
  0x0000000116b3f31f: mov    %r14,0x8(%rsp)
  0x0000000116b3f324: mov    %r15,(%rsp)
  0x0000000116b3f328: movabs $0x10cc6405e,%rdi
  0x0000000116b3f332: movabs $0x116b3f2d2,%rsi
  0x0000000116b3f33c: mov    %rsp,%rdx
  0x0000000116b3f33f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f343: callq  0x000000010c7dd830
  0x0000000116b3f348: hlt    
  0x0000000116b3f349: pop    %rax
  0x0000000116b3f34a: movabs $0x0,%r10
  0x0000000116b3f354: mov    %r10,0x280(%r15)
  0x0000000116b3f35b: movabs $0x0,%r10
  0x0000000116b3f365: mov    %r10,0x290(%r15)
  0x0000000116b3f36c: movabs $0x0,%r10
  0x0000000116b3f376: mov    %r10,0x288(%r15)
  0x0000000116b3f37d: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f385: je     0x0000000116b3f390
  0x0000000116b3f38b: jmpq   0x0000000116b30420
  0x0000000116b3f390: mov    -0x38(%rbp),%r13
  0x0000000116b3f394: mov    -0x30(%rbp),%r14
  0x0000000116b3f398: retq   
  0x0000000116b3f399: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f39e: sub    $0x80,%rsp
  0x0000000116b3f3a5: mov    %rax,0x78(%rsp)
  0x0000000116b3f3aa: mov    %rcx,0x70(%rsp)
  0x0000000116b3f3af: mov    %rdx,0x68(%rsp)
  0x0000000116b3f3b4: mov    %rbx,0x60(%rsp)
  0x0000000116b3f3b9: mov    %rbp,0x50(%rsp)
  0x0000000116b3f3be: mov    %rsi,0x48(%rsp)
  0x0000000116b3f3c3: mov    %rdi,0x40(%rsp)
  0x0000000116b3f3c8: mov    %r8,0x38(%rsp)
  0x0000000116b3f3cd: mov    %r9,0x30(%rsp)
  0x0000000116b3f3d2: mov    %r10,0x28(%rsp)
  0x0000000116b3f3d7: mov    %r11,0x20(%rsp)
  0x0000000116b3f3dc: mov    %r12,0x18(%rsp)
  0x0000000116b3f3e1: mov    %r13,0x10(%rsp)
  0x0000000116b3f3e6: mov    %r14,0x8(%rsp)
  0x0000000116b3f3eb: mov    %r15,(%rsp)
  0x0000000116b3f3ef: movabs $0x10cb763be,%rdi
  0x0000000116b3f3f9: movabs $0x116b3f399,%rsi
  0x0000000116b3f403: mov    %rsp,%rdx
  0x0000000116b3f406: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f40a: callq  0x000000010c7dd830
  0x0000000116b3f40f: hlt    
  0x0000000116b3f410: movzbl 0x1(%r13),%ebx
  0x0000000116b3f415: inc    %r13
  0x0000000116b3f418: movabs $0x10ce39680,%r10
  0x0000000116b3f422: jmpq   *(%r10,%rbx,8)
  0x0000000116b3f426: movq   $0x0,-0x10(%rbp)
  0x0000000116b3f42e: mov    -0x38(%rbp),%r13
  0x0000000116b3f432: mov    -0x30(%rbp),%r14
  0x0000000116b3f436: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f43e: je     0x0000000116b3f714
  0x0000000116b3f444: callq  0x0000000116b3f44e
  0x0000000116b3f449: jmpq   0x0000000116b3f69d
  0x0000000116b3f44e: lea    0x8(%rsp),%rax
  0x0000000116b3f453: mov    %r13,-0x38(%rbp)
  0x0000000116b3f457: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3f45f: je     0x0000000116b3f4dc
  0x0000000116b3f465: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f46a: sub    $0x80,%rsp
  0x0000000116b3f471: mov    %rax,0x78(%rsp)
  0x0000000116b3f476: mov    %rcx,0x70(%rsp)
  0x0000000116b3f47b: mov    %rdx,0x68(%rsp)
  0x0000000116b3f480: mov    %rbx,0x60(%rsp)
  0x0000000116b3f485: mov    %rbp,0x50(%rsp)
  0x0000000116b3f48a: mov    %rsi,0x48(%rsp)
  0x0000000116b3f48f: mov    %rdi,0x40(%rsp)
  0x0000000116b3f494: mov    %r8,0x38(%rsp)
  0x0000000116b3f499: mov    %r9,0x30(%rsp)
  0x0000000116b3f49e: mov    %r10,0x28(%rsp)
  0x0000000116b3f4a3: mov    %r11,0x20(%rsp)
  0x0000000116b3f4a8: mov    %r12,0x18(%rsp)
  0x0000000116b3f4ad: mov    %r13,0x10(%rsp)
  0x0000000116b3f4b2: mov    %r14,0x8(%rsp)
  0x0000000116b3f4b7: mov    %r15,(%rsp)
  0x0000000116b3f4bb: movabs $0x10cc2363b,%rdi
  0x0000000116b3f4c5: movabs $0x116b3f465,%rsi
  0x0000000116b3f4cf: mov    %rsp,%rdx
  0x0000000116b3f4d2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f4d6: callq  0x000000010c7dd830
  0x0000000116b3f4db: hlt    
  0x0000000116b3f4dc: push   %r10
  0x0000000116b3f4de: cmp    -0x9cf8c35(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3f4e5: je     0x0000000116b3f562
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3f4eb: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f4f0: sub    $0x80,%rsp
  0x0000000116b3f4f7: mov    %rax,0x78(%rsp)
  0x0000000116b3f4fc: mov    %rcx,0x70(%rsp)
  0x0000000116b3f501: mov    %rdx,0x68(%rsp)
  0x0000000116b3f506: mov    %rbx,0x60(%rsp)
  0x0000000116b3f50b: mov    %rbp,0x50(%rsp)
  0x0000000116b3f510: mov    %rsi,0x48(%rsp)
  0x0000000116b3f515: mov    %rdi,0x40(%rsp)
  0x0000000116b3f51a: mov    %r8,0x38(%rsp)
  0x0000000116b3f51f: mov    %r9,0x30(%rsp)
  0x0000000116b3f524: mov    %r10,0x28(%rsp)
  0x0000000116b3f529: mov    %r11,0x20(%rsp)
  0x0000000116b3f52e: mov    %r12,0x18(%rsp)
  0x0000000116b3f533: mov    %r13,0x10(%rsp)
  0x0000000116b3f538: mov    %r14,0x8(%rsp)
  0x0000000116b3f53d: mov    %r15,(%rsp)
  0x0000000116b3f541: movabs $0x10cc63f17,%rdi
  0x0000000116b3f54b: movabs $0x116b3f4eb,%rsi
  0x0000000116b3f555: mov    %rsp,%rdx
  0x0000000116b3f558: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f55c: callq  0x000000010c7dd830
  0x0000000116b3f561: hlt    
  0x0000000116b3f562: pop    %r10
  0x0000000116b3f564: mov    %r15,%rdi
  0x0000000116b3f567: mov    %rbp,0x290(%r15)
  0x0000000116b3f56e: mov    %rax,0x280(%r15)
  0x0000000116b3f575: test   $0xf,%esp
  0x0000000116b3f57b: je     0x0000000116b3f593
  0x0000000116b3f581: sub    $0x8,%rsp
  0x0000000116b3f585: callq  0x000000010c5881a0
  0x0000000116b3f58a: add    $0x8,%rsp
  0x0000000116b3f58e: jmpq   0x0000000116b3f598
  0x0000000116b3f593: callq  0x000000010c5881a0
  0x0000000116b3f598: push   %rax
  0x0000000116b3f599: push   %rdi
  0x0000000116b3f59a: push   %rsi
  0x0000000116b3f59b: push   %rdx
  0x0000000116b3f59c: push   %rcx
  0x0000000116b3f59d: push   %r8
  0x0000000116b3f59f: push   %r9
  0x0000000116b3f5a1: push   %r10
  0x0000000116b3f5a3: mov    %rsp,%r10
  0x0000000116b3f5a6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f5aa: push   %r10
  0x0000000116b3f5ac: push   %r11
  0x0000000116b3f5ae: mov    $0x109,%edi
  0x0000000116b3f5b3: movabs $0x7ff815049fd5,%r10
  0x0000000116b3f5bd: callq  *%r10
  0x0000000116b3f5c0: pop    %r11
  0x0000000116b3f5c2: pop    %rsp
  0x0000000116b3f5c3: pop    %r10
  0x0000000116b3f5c5: pop    %r9
  0x0000000116b3f5c7: pop    %r8
  0x0000000116b3f5c9: pop    %rcx
  0x0000000116b3f5ca: pop    %rdx
  0x0000000116b3f5cb: pop    %rsi
  0x0000000116b3f5cc: pop    %rdi
  0x0000000116b3f5cd: cmp    %rax,%r15
  0x0000000116b3f5d0: je     0x0000000116b3f64d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3f5d6: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f5db: sub    $0x80,%rsp
  0x0000000116b3f5e2: mov    %rax,0x78(%rsp)
  0x0000000116b3f5e7: mov    %rcx,0x70(%rsp)
  0x0000000116b3f5ec: mov    %rdx,0x68(%rsp)
  0x0000000116b3f5f1: mov    %rbx,0x60(%rsp)
  0x0000000116b3f5f6: mov    %rbp,0x50(%rsp)
  0x0000000116b3f5fb: mov    %rsi,0x48(%rsp)
  0x0000000116b3f600: mov    %rdi,0x40(%rsp)
  0x0000000116b3f605: mov    %r8,0x38(%rsp)
  0x0000000116b3f60a: mov    %r9,0x30(%rsp)
  0x0000000116b3f60f: mov    %r10,0x28(%rsp)
  0x0000000116b3f614: mov    %r11,0x20(%rsp)
  0x0000000116b3f619: mov    %r12,0x18(%rsp)
  0x0000000116b3f61e: mov    %r13,0x10(%rsp)
  0x0000000116b3f623: mov    %r14,0x8(%rsp)
  0x0000000116b3f628: mov    %r15,(%rsp)
  0x0000000116b3f62c: movabs $0x10cc6405e,%rdi
  0x0000000116b3f636: movabs $0x116b3f5d6,%rsi
  0x0000000116b3f640: mov    %rsp,%rdx
  0x0000000116b3f643: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f647: callq  0x000000010c7dd830
  0x0000000116b3f64c: hlt    
  0x0000000116b3f64d: pop    %rax
  0x0000000116b3f64e: movabs $0x0,%r10
  0x0000000116b3f658: mov    %r10,0x280(%r15)
  0x0000000116b3f65f: movabs $0x0,%r10
  0x0000000116b3f669: mov    %r10,0x290(%r15)
  0x0000000116b3f670: movabs $0x0,%r10
  0x0000000116b3f67a: mov    %r10,0x288(%r15)
  0x0000000116b3f681: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f689: je     0x0000000116b3f694
  0x0000000116b3f68f: jmpq   0x0000000116b30420
  0x0000000116b3f694: mov    -0x38(%rbp),%r13
  0x0000000116b3f698: mov    -0x30(%rbp),%r14
  0x0000000116b3f69c: retq   
  0x0000000116b3f69d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f6a2: sub    $0x80,%rsp
  0x0000000116b3f6a9: mov    %rax,0x78(%rsp)
  0x0000000116b3f6ae: mov    %rcx,0x70(%rsp)
  0x0000000116b3f6b3: mov    %rdx,0x68(%rsp)
  0x0000000116b3f6b8: mov    %rbx,0x60(%rsp)
  0x0000000116b3f6bd: mov    %rbp,0x50(%rsp)
  0x0000000116b3f6c2: mov    %rsi,0x48(%rsp)
  0x0000000116b3f6c7: mov    %rdi,0x40(%rsp)
  0x0000000116b3f6cc: mov    %r8,0x38(%rsp)
  0x0000000116b3f6d1: mov    %r9,0x30(%rsp)
  0x0000000116b3f6d6: mov    %r10,0x28(%rsp)
  0x0000000116b3f6db: mov    %r11,0x20(%rsp)
  0x0000000116b3f6e0: mov    %r12,0x18(%rsp)
  0x0000000116b3f6e5: mov    %r13,0x10(%rsp)
  0x0000000116b3f6ea: mov    %r14,0x8(%rsp)
  0x0000000116b3f6ef: mov    %r15,(%rsp)
  0x0000000116b3f6f3: movabs $0x10cb763be,%rdi
  0x0000000116b3f6fd: movabs $0x116b3f69d,%rsi
  0x0000000116b3f707: mov    %rsp,%rdx
  0x0000000116b3f70a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f70e: callq  0x000000010c7dd830
  0x0000000116b3f713: hlt    
  0x0000000116b3f714: movzbl 0x1(%r13),%ebx
  0x0000000116b3f719: inc    %r13
  0x0000000116b3f71c: movabs $0x10ce39e80,%r10
  0x0000000116b3f726: jmpq   *(%r10,%rbx,8)
  0x0000000116b3f72a: movq   $0x0,-0x10(%rbp)
  0x0000000116b3f732: mov    -0x38(%rbp),%r13
  0x0000000116b3f736: mov    -0x30(%rbp),%r14
  0x0000000116b3f73a: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f742: je     0x0000000116b3fa18
  0x0000000116b3f748: callq  0x0000000116b3f752
  0x0000000116b3f74d: jmpq   0x0000000116b3f9a1
  0x0000000116b3f752: lea    0x8(%rsp),%rax
  0x0000000116b3f757: mov    %r13,-0x38(%rbp)
  0x0000000116b3f75b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3f763: je     0x0000000116b3f7e0
  0x0000000116b3f769: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f76e: sub    $0x80,%rsp
  0x0000000116b3f775: mov    %rax,0x78(%rsp)
  0x0000000116b3f77a: mov    %rcx,0x70(%rsp)
  0x0000000116b3f77f: mov    %rdx,0x68(%rsp)
  0x0000000116b3f784: mov    %rbx,0x60(%rsp)
  0x0000000116b3f789: mov    %rbp,0x50(%rsp)
  0x0000000116b3f78e: mov    %rsi,0x48(%rsp)
  0x0000000116b3f793: mov    %rdi,0x40(%rsp)
  0x0000000116b3f798: mov    %r8,0x38(%rsp)
  0x0000000116b3f79d: mov    %r9,0x30(%rsp)
  0x0000000116b3f7a2: mov    %r10,0x28(%rsp)
  0x0000000116b3f7a7: mov    %r11,0x20(%rsp)
  0x0000000116b3f7ac: mov    %r12,0x18(%rsp)
  0x0000000116b3f7b1: mov    %r13,0x10(%rsp)
  0x0000000116b3f7b6: mov    %r14,0x8(%rsp)
  0x0000000116b3f7bb: mov    %r15,(%rsp)
  0x0000000116b3f7bf: movabs $0x10cc2363b,%rdi
  0x0000000116b3f7c9: movabs $0x116b3f769,%rsi
  0x0000000116b3f7d3: mov    %rsp,%rdx
  0x0000000116b3f7d6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f7da: callq  0x000000010c7dd830
  0x0000000116b3f7df: hlt    
  0x0000000116b3f7e0: push   %r10
  0x0000000116b3f7e2: cmp    -0x9cf8f39(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3f7e9: je     0x0000000116b3f866
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3f7ef: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f7f4: sub    $0x80,%rsp
  0x0000000116b3f7fb: mov    %rax,0x78(%rsp)
  0x0000000116b3f800: mov    %rcx,0x70(%rsp)
  0x0000000116b3f805: mov    %rdx,0x68(%rsp)
  0x0000000116b3f80a: mov    %rbx,0x60(%rsp)
  0x0000000116b3f80f: mov    %rbp,0x50(%rsp)
  0x0000000116b3f814: mov    %rsi,0x48(%rsp)
  0x0000000116b3f819: mov    %rdi,0x40(%rsp)
  0x0000000116b3f81e: mov    %r8,0x38(%rsp)
  0x0000000116b3f823: mov    %r9,0x30(%rsp)
  0x0000000116b3f828: mov    %r10,0x28(%rsp)
  0x0000000116b3f82d: mov    %r11,0x20(%rsp)
  0x0000000116b3f832: mov    %r12,0x18(%rsp)
  0x0000000116b3f837: mov    %r13,0x10(%rsp)
  0x0000000116b3f83c: mov    %r14,0x8(%rsp)
  0x0000000116b3f841: mov    %r15,(%rsp)
  0x0000000116b3f845: movabs $0x10cc63f17,%rdi
  0x0000000116b3f84f: movabs $0x116b3f7ef,%rsi
  0x0000000116b3f859: mov    %rsp,%rdx
  0x0000000116b3f85c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f860: callq  0x000000010c7dd830
  0x0000000116b3f865: hlt    
  0x0000000116b3f866: pop    %r10
  0x0000000116b3f868: mov    %r15,%rdi
  0x0000000116b3f86b: mov    %rbp,0x290(%r15)
  0x0000000116b3f872: mov    %rax,0x280(%r15)
  0x0000000116b3f879: test   $0xf,%esp
  0x0000000116b3f87f: je     0x0000000116b3f897
  0x0000000116b3f885: sub    $0x8,%rsp
  0x0000000116b3f889: callq  0x000000010c5881a0
  0x0000000116b3f88e: add    $0x8,%rsp
  0x0000000116b3f892: jmpq   0x0000000116b3f89c
  0x0000000116b3f897: callq  0x000000010c5881a0
  0x0000000116b3f89c: push   %rax
  0x0000000116b3f89d: push   %rdi
  0x0000000116b3f89e: push   %rsi
  0x0000000116b3f89f: push   %rdx
  0x0000000116b3f8a0: push   %rcx
  0x0000000116b3f8a1: push   %r8
  0x0000000116b3f8a3: push   %r9
  0x0000000116b3f8a5: push   %r10
  0x0000000116b3f8a7: mov    %rsp,%r10
  0x0000000116b3f8aa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f8ae: push   %r10
  0x0000000116b3f8b0: push   %r11
  0x0000000116b3f8b2: mov    $0x109,%edi
  0x0000000116b3f8b7: movabs $0x7ff815049fd5,%r10
  0x0000000116b3f8c1: callq  *%r10
  0x0000000116b3f8c4: pop    %r11
  0x0000000116b3f8c6: pop    %rsp
  0x0000000116b3f8c7: pop    %r10
  0x0000000116b3f8c9: pop    %r9
  0x0000000116b3f8cb: pop    %r8
  0x0000000116b3f8cd: pop    %rcx
  0x0000000116b3f8ce: pop    %rdx
  0x0000000116b3f8cf: pop    %rsi
  0x0000000116b3f8d0: pop    %rdi
  0x0000000116b3f8d1: cmp    %rax,%r15
  0x0000000116b3f8d4: je     0x0000000116b3f951
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3f8da: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f8df: sub    $0x80,%rsp
  0x0000000116b3f8e6: mov    %rax,0x78(%rsp)
  0x0000000116b3f8eb: mov    %rcx,0x70(%rsp)
  0x0000000116b3f8f0: mov    %rdx,0x68(%rsp)
  0x0000000116b3f8f5: mov    %rbx,0x60(%rsp)
  0x0000000116b3f8fa: mov    %rbp,0x50(%rsp)
  0x0000000116b3f8ff: mov    %rsi,0x48(%rsp)
  0x0000000116b3f904: mov    %rdi,0x40(%rsp)
  0x0000000116b3f909: mov    %r8,0x38(%rsp)
  0x0000000116b3f90e: mov    %r9,0x30(%rsp)
  0x0000000116b3f913: mov    %r10,0x28(%rsp)
  0x0000000116b3f918: mov    %r11,0x20(%rsp)
  0x0000000116b3f91d: mov    %r12,0x18(%rsp)
  0x0000000116b3f922: mov    %r13,0x10(%rsp)
  0x0000000116b3f927: mov    %r14,0x8(%rsp)
  0x0000000116b3f92c: mov    %r15,(%rsp)
  0x0000000116b3f930: movabs $0x10cc6405e,%rdi
  0x0000000116b3f93a: movabs $0x116b3f8da,%rsi
  0x0000000116b3f944: mov    %rsp,%rdx
  0x0000000116b3f947: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3f94b: callq  0x000000010c7dd830
  0x0000000116b3f950: hlt    
  0x0000000116b3f951: pop    %rax
  0x0000000116b3f952: movabs $0x0,%r10
  0x0000000116b3f95c: mov    %r10,0x280(%r15)
  0x0000000116b3f963: movabs $0x0,%r10
  0x0000000116b3f96d: mov    %r10,0x290(%r15)
  0x0000000116b3f974: movabs $0x0,%r10
  0x0000000116b3f97e: mov    %r10,0x288(%r15)
  0x0000000116b3f985: cmpq   $0x0,0x8(%r15)
  0x0000000116b3f98d: je     0x0000000116b3f998
  0x0000000116b3f993: jmpq   0x0000000116b30420
  0x0000000116b3f998: mov    -0x38(%rbp),%r13
  0x0000000116b3f99c: mov    -0x30(%rbp),%r14
  0x0000000116b3f9a0: retq   
  0x0000000116b3f9a1: mov    %rsp,-0x28(%rsp)
  0x0000000116b3f9a6: sub    $0x80,%rsp
  0x0000000116b3f9ad: mov    %rax,0x78(%rsp)
  0x0000000116b3f9b2: mov    %rcx,0x70(%rsp)
  0x0000000116b3f9b7: mov    %rdx,0x68(%rsp)
  0x0000000116b3f9bc: mov    %rbx,0x60(%rsp)
  0x0000000116b3f9c1: mov    %rbp,0x50(%rsp)
  0x0000000116b3f9c6: mov    %rsi,0x48(%rsp)
  0x0000000116b3f9cb: mov    %rdi,0x40(%rsp)
  0x0000000116b3f9d0: mov    %r8,0x38(%rsp)
  0x0000000116b3f9d5: mov    %r9,0x30(%rsp)
  0x0000000116b3f9da: mov    %r10,0x28(%rsp)
  0x0000000116b3f9df: mov    %r11,0x20(%rsp)
  0x0000000116b3f9e4: mov    %r12,0x18(%rsp)
  0x0000000116b3f9e9: mov    %r13,0x10(%rsp)
  0x0000000116b3f9ee: mov    %r14,0x8(%rsp)
  0x0000000116b3f9f3: mov    %r15,(%rsp)
  0x0000000116b3f9f7: movabs $0x10cb763be,%rdi
  0x0000000116b3fa01: movabs $0x116b3f9a1,%rsi
  0x0000000116b3fa0b: mov    %rsp,%rdx
  0x0000000116b3fa0e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fa12: callq  0x000000010c7dd830
  0x0000000116b3fa17: hlt    
  0x0000000116b3fa18: movzbl 0x1(%r13),%ebx
  0x0000000116b3fa1d: inc    %r13
  0x0000000116b3fa20: movabs $0x10ce3a680,%r10
  0x0000000116b3fa2a: jmpq   *(%r10,%rbx,8)
  0x0000000116b3fa2e: movq   $0x0,-0x10(%rbp)
  0x0000000116b3fa36: mov    -0x38(%rbp),%r13
  0x0000000116b3fa3a: mov    -0x30(%rbp),%r14
  0x0000000116b3fa3e: cmpq   $0x0,0x8(%r15)
  0x0000000116b3fa46: je     0x0000000116b3fd1c
  0x0000000116b3fa4c: callq  0x0000000116b3fa56
  0x0000000116b3fa51: jmpq   0x0000000116b3fca5
  0x0000000116b3fa56: lea    0x8(%rsp),%rax
  0x0000000116b3fa5b: mov    %r13,-0x38(%rbp)
  0x0000000116b3fa5f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3fa67: je     0x0000000116b3fae4
  0x0000000116b3fa6d: mov    %rsp,-0x28(%rsp)
  0x0000000116b3fa72: sub    $0x80,%rsp
  0x0000000116b3fa79: mov    %rax,0x78(%rsp)
  0x0000000116b3fa7e: mov    %rcx,0x70(%rsp)
  0x0000000116b3fa83: mov    %rdx,0x68(%rsp)
  0x0000000116b3fa88: mov    %rbx,0x60(%rsp)
  0x0000000116b3fa8d: mov    %rbp,0x50(%rsp)
  0x0000000116b3fa92: mov    %rsi,0x48(%rsp)
  0x0000000116b3fa97: mov    %rdi,0x40(%rsp)
  0x0000000116b3fa9c: mov    %r8,0x38(%rsp)
  0x0000000116b3faa1: mov    %r9,0x30(%rsp)
  0x0000000116b3faa6: mov    %r10,0x28(%rsp)
  0x0000000116b3faab: mov    %r11,0x20(%rsp)
  0x0000000116b3fab0: mov    %r12,0x18(%rsp)
  0x0000000116b3fab5: mov    %r13,0x10(%rsp)
  0x0000000116b3faba: mov    %r14,0x8(%rsp)
  0x0000000116b3fabf: mov    %r15,(%rsp)
  0x0000000116b3fac3: movabs $0x10cc2363b,%rdi
  0x0000000116b3facd: movabs $0x116b3fa6d,%rsi
  0x0000000116b3fad7: mov    %rsp,%rdx
  0x0000000116b3fada: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fade: callq  0x000000010c7dd830
  0x0000000116b3fae3: hlt    
  0x0000000116b3fae4: push   %r10
  0x0000000116b3fae6: cmp    -0x9cf923d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3faed: je     0x0000000116b3fb6a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3faf3: mov    %rsp,-0x28(%rsp)
  0x0000000116b3faf8: sub    $0x80,%rsp
  0x0000000116b3faff: mov    %rax,0x78(%rsp)
  0x0000000116b3fb04: mov    %rcx,0x70(%rsp)
  0x0000000116b3fb09: mov    %rdx,0x68(%rsp)
  0x0000000116b3fb0e: mov    %rbx,0x60(%rsp)
  0x0000000116b3fb13: mov    %rbp,0x50(%rsp)
  0x0000000116b3fb18: mov    %rsi,0x48(%rsp)
  0x0000000116b3fb1d: mov    %rdi,0x40(%rsp)
  0x0000000116b3fb22: mov    %r8,0x38(%rsp)
  0x0000000116b3fb27: mov    %r9,0x30(%rsp)
  0x0000000116b3fb2c: mov    %r10,0x28(%rsp)
  0x0000000116b3fb31: mov    %r11,0x20(%rsp)
  0x0000000116b3fb36: mov    %r12,0x18(%rsp)
  0x0000000116b3fb3b: mov    %r13,0x10(%rsp)
  0x0000000116b3fb40: mov    %r14,0x8(%rsp)
  0x0000000116b3fb45: mov    %r15,(%rsp)
  0x0000000116b3fb49: movabs $0x10cc63f17,%rdi
  0x0000000116b3fb53: movabs $0x116b3faf3,%rsi
  0x0000000116b3fb5d: mov    %rsp,%rdx
  0x0000000116b3fb60: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fb64: callq  0x000000010c7dd830
  0x0000000116b3fb69: hlt    
  0x0000000116b3fb6a: pop    %r10
  0x0000000116b3fb6c: mov    %r15,%rdi
  0x0000000116b3fb6f: mov    %rbp,0x290(%r15)
  0x0000000116b3fb76: mov    %rax,0x280(%r15)
  0x0000000116b3fb7d: test   $0xf,%esp
  0x0000000116b3fb83: je     0x0000000116b3fb9b
  0x0000000116b3fb89: sub    $0x8,%rsp
  0x0000000116b3fb8d: callq  0x000000010c5881a0
  0x0000000116b3fb92: add    $0x8,%rsp
  0x0000000116b3fb96: jmpq   0x0000000116b3fba0
  0x0000000116b3fb9b: callq  0x000000010c5881a0
  0x0000000116b3fba0: push   %rax
  0x0000000116b3fba1: push   %rdi
  0x0000000116b3fba2: push   %rsi
  0x0000000116b3fba3: push   %rdx
  0x0000000116b3fba4: push   %rcx
  0x0000000116b3fba5: push   %r8
  0x0000000116b3fba7: push   %r9
  0x0000000116b3fba9: push   %r10
  0x0000000116b3fbab: mov    %rsp,%r10
  0x0000000116b3fbae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fbb2: push   %r10
  0x0000000116b3fbb4: push   %r11
  0x0000000116b3fbb6: mov    $0x109,%edi
  0x0000000116b3fbbb: movabs $0x7ff815049fd5,%r10
  0x0000000116b3fbc5: callq  *%r10
  0x0000000116b3fbc8: pop    %r11
  0x0000000116b3fbca: pop    %rsp
  0x0000000116b3fbcb: pop    %r10
  0x0000000116b3fbcd: pop    %r9
  0x0000000116b3fbcf: pop    %r8
  0x0000000116b3fbd1: pop    %rcx
  0x0000000116b3fbd2: pop    %rdx
  0x0000000116b3fbd3: pop    %rsi
  0x0000000116b3fbd4: pop    %rdi
  0x0000000116b3fbd5: cmp    %rax,%r15
  0x0000000116b3fbd8: je     0x0000000116b3fc55
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3fbde: mov    %rsp,-0x28(%rsp)
  0x0000000116b3fbe3: sub    $0x80,%rsp
  0x0000000116b3fbea: mov    %rax,0x78(%rsp)
  0x0000000116b3fbef: mov    %rcx,0x70(%rsp)
  0x0000000116b3fbf4: mov    %rdx,0x68(%rsp)
  0x0000000116b3fbf9: mov    %rbx,0x60(%rsp)
  0x0000000116b3fbfe: mov    %rbp,0x50(%rsp)
  0x0000000116b3fc03: mov    %rsi,0x48(%rsp)
  0x0000000116b3fc08: mov    %rdi,0x40(%rsp)
  0x0000000116b3fc0d: mov    %r8,0x38(%rsp)
  0x0000000116b3fc12: mov    %r9,0x30(%rsp)
  0x0000000116b3fc17: mov    %r10,0x28(%rsp)
  0x0000000116b3fc1c: mov    %r11,0x20(%rsp)
  0x0000000116b3fc21: mov    %r12,0x18(%rsp)
  0x0000000116b3fc26: mov    %r13,0x10(%rsp)
  0x0000000116b3fc2b: mov    %r14,0x8(%rsp)
  0x0000000116b3fc30: mov    %r15,(%rsp)
  0x0000000116b3fc34: movabs $0x10cc6405e,%rdi
  0x0000000116b3fc3e: movabs $0x116b3fbde,%rsi
  0x0000000116b3fc48: mov    %rsp,%rdx
  0x0000000116b3fc4b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fc4f: callq  0x000000010c7dd830
  0x0000000116b3fc54: hlt    
  0x0000000116b3fc55: pop    %rax
  0x0000000116b3fc56: movabs $0x0,%r10
  0x0000000116b3fc60: mov    %r10,0x280(%r15)
  0x0000000116b3fc67: movabs $0x0,%r10
  0x0000000116b3fc71: mov    %r10,0x290(%r15)
  0x0000000116b3fc78: movabs $0x0,%r10
  0x0000000116b3fc82: mov    %r10,0x288(%r15)
  0x0000000116b3fc89: cmpq   $0x0,0x8(%r15)
  0x0000000116b3fc91: je     0x0000000116b3fc9c
  0x0000000116b3fc97: jmpq   0x0000000116b30420
  0x0000000116b3fc9c: mov    -0x38(%rbp),%r13
  0x0000000116b3fca0: mov    -0x30(%rbp),%r14
  0x0000000116b3fca4: retq   
  0x0000000116b3fca5: mov    %rsp,-0x28(%rsp)
  0x0000000116b3fcaa: sub    $0x80,%rsp
  0x0000000116b3fcb1: mov    %rax,0x78(%rsp)
  0x0000000116b3fcb6: mov    %rcx,0x70(%rsp)
  0x0000000116b3fcbb: mov    %rdx,0x68(%rsp)
  0x0000000116b3fcc0: mov    %rbx,0x60(%rsp)
  0x0000000116b3fcc5: mov    %rbp,0x50(%rsp)
  0x0000000116b3fcca: mov    %rsi,0x48(%rsp)
  0x0000000116b3fccf: mov    %rdi,0x40(%rsp)
  0x0000000116b3fcd4: mov    %r8,0x38(%rsp)
  0x0000000116b3fcd9: mov    %r9,0x30(%rsp)
  0x0000000116b3fcde: mov    %r10,0x28(%rsp)
  0x0000000116b3fce3: mov    %r11,0x20(%rsp)
  0x0000000116b3fce8: mov    %r12,0x18(%rsp)
  0x0000000116b3fced: mov    %r13,0x10(%rsp)
  0x0000000116b3fcf2: mov    %r14,0x8(%rsp)
  0x0000000116b3fcf7: mov    %r15,(%rsp)
  0x0000000116b3fcfb: movabs $0x10cb763be,%rdi
  0x0000000116b3fd05: movabs $0x116b3fca5,%rsi
  0x0000000116b3fd0f: mov    %rsp,%rdx
  0x0000000116b3fd12: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fd16: callq  0x000000010c7dd830
  0x0000000116b3fd1b: hlt    
  0x0000000116b3fd1c: movzbl 0x1(%r13),%ebx
  0x0000000116b3fd21: inc    %r13
  0x0000000116b3fd24: movabs $0x10ce3b680,%r10
  0x0000000116b3fd2e: jmpq   *(%r10,%rbx,8)
  0x0000000116b3fd32: movq   $0x0,-0x10(%rbp)
  0x0000000116b3fd3a: mov    -0x38(%rbp),%r13
  0x0000000116b3fd3e: mov    -0x30(%rbp),%r14
  0x0000000116b3fd42: cmpq   $0x0,0x8(%r15)
  0x0000000116b3fd4a: je     0x0000000116b40020
  0x0000000116b3fd50: callq  0x0000000116b3fd5a
  0x0000000116b3fd55: jmpq   0x0000000116b3ffa9
  0x0000000116b3fd5a: lea    0x8(%rsp),%rax
  0x0000000116b3fd5f: mov    %r13,-0x38(%rbp)
  0x0000000116b3fd63: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b3fd6b: je     0x0000000116b3fde8
  0x0000000116b3fd71: mov    %rsp,-0x28(%rsp)
  0x0000000116b3fd76: sub    $0x80,%rsp
  0x0000000116b3fd7d: mov    %rax,0x78(%rsp)
  0x0000000116b3fd82: mov    %rcx,0x70(%rsp)
  0x0000000116b3fd87: mov    %rdx,0x68(%rsp)
  0x0000000116b3fd8c: mov    %rbx,0x60(%rsp)
  0x0000000116b3fd91: mov    %rbp,0x50(%rsp)
  0x0000000116b3fd96: mov    %rsi,0x48(%rsp)
  0x0000000116b3fd9b: mov    %rdi,0x40(%rsp)
  0x0000000116b3fda0: mov    %r8,0x38(%rsp)
  0x0000000116b3fda5: mov    %r9,0x30(%rsp)
  0x0000000116b3fdaa: mov    %r10,0x28(%rsp)
  0x0000000116b3fdaf: mov    %r11,0x20(%rsp)
  0x0000000116b3fdb4: mov    %r12,0x18(%rsp)
  0x0000000116b3fdb9: mov    %r13,0x10(%rsp)
  0x0000000116b3fdbe: mov    %r14,0x8(%rsp)
  0x0000000116b3fdc3: mov    %r15,(%rsp)
  0x0000000116b3fdc7: movabs $0x10cc2363b,%rdi
  0x0000000116b3fdd1: movabs $0x116b3fd71,%rsi
  0x0000000116b3fddb: mov    %rsp,%rdx
  0x0000000116b3fdde: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fde2: callq  0x000000010c7dd830
  0x0000000116b3fde7: hlt    
  0x0000000116b3fde8: push   %r10
  0x0000000116b3fdea: cmp    -0x9cf9541(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b3fdf1: je     0x0000000116b3fe6e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b3fdf7: mov    %rsp,-0x28(%rsp)
  0x0000000116b3fdfc: sub    $0x80,%rsp
  0x0000000116b3fe03: mov    %rax,0x78(%rsp)
  0x0000000116b3fe08: mov    %rcx,0x70(%rsp)
  0x0000000116b3fe0d: mov    %rdx,0x68(%rsp)
  0x0000000116b3fe12: mov    %rbx,0x60(%rsp)
  0x0000000116b3fe17: mov    %rbp,0x50(%rsp)
  0x0000000116b3fe1c: mov    %rsi,0x48(%rsp)
  0x0000000116b3fe21: mov    %rdi,0x40(%rsp)
  0x0000000116b3fe26: mov    %r8,0x38(%rsp)
  0x0000000116b3fe2b: mov    %r9,0x30(%rsp)
  0x0000000116b3fe30: mov    %r10,0x28(%rsp)
  0x0000000116b3fe35: mov    %r11,0x20(%rsp)
  0x0000000116b3fe3a: mov    %r12,0x18(%rsp)
  0x0000000116b3fe3f: mov    %r13,0x10(%rsp)
  0x0000000116b3fe44: mov    %r14,0x8(%rsp)
  0x0000000116b3fe49: mov    %r15,(%rsp)
  0x0000000116b3fe4d: movabs $0x10cc63f17,%rdi
  0x0000000116b3fe57: movabs $0x116b3fdf7,%rsi
  0x0000000116b3fe61: mov    %rsp,%rdx
  0x0000000116b3fe64: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3fe68: callq  0x000000010c7dd830
  0x0000000116b3fe6d: hlt    
  0x0000000116b3fe6e: pop    %r10
  0x0000000116b3fe70: mov    %r15,%rdi
  0x0000000116b3fe73: mov    %rbp,0x290(%r15)
  0x0000000116b3fe7a: mov    %rax,0x280(%r15)
  0x0000000116b3fe81: test   $0xf,%esp
  0x0000000116b3fe87: je     0x0000000116b3fe9f
  0x0000000116b3fe8d: sub    $0x8,%rsp
  0x0000000116b3fe91: callq  0x000000010c5881a0
  0x0000000116b3fe96: add    $0x8,%rsp
  0x0000000116b3fe9a: jmpq   0x0000000116b3fea4
  0x0000000116b3fe9f: callq  0x000000010c5881a0
  0x0000000116b3fea4: push   %rax
  0x0000000116b3fea5: push   %rdi
  0x0000000116b3fea6: push   %rsi
  0x0000000116b3fea7: push   %rdx
  0x0000000116b3fea8: push   %rcx
  0x0000000116b3fea9: push   %r8
  0x0000000116b3feab: push   %r9
  0x0000000116b3fead: push   %r10
  0x0000000116b3feaf: mov    %rsp,%r10
  0x0000000116b3feb2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3feb6: push   %r10
  0x0000000116b3feb8: push   %r11
  0x0000000116b3feba: mov    $0x109,%edi
  0x0000000116b3febf: movabs $0x7ff815049fd5,%r10
  0x0000000116b3fec9: callq  *%r10
  0x0000000116b3fecc: pop    %r11
  0x0000000116b3fece: pop    %rsp
  0x0000000116b3fecf: pop    %r10
  0x0000000116b3fed1: pop    %r9
  0x0000000116b3fed3: pop    %r8
  0x0000000116b3fed5: pop    %rcx
  0x0000000116b3fed6: pop    %rdx
  0x0000000116b3fed7: pop    %rsi
  0x0000000116b3fed8: pop    %rdi
  0x0000000116b3fed9: cmp    %rax,%r15
  0x0000000116b3fedc: je     0x0000000116b3ff59
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b3fee2: mov    %rsp,-0x28(%rsp)
  0x0000000116b3fee7: sub    $0x80,%rsp
  0x0000000116b3feee: mov    %rax,0x78(%rsp)
  0x0000000116b3fef3: mov    %rcx,0x70(%rsp)
  0x0000000116b3fef8: mov    %rdx,0x68(%rsp)
  0x0000000116b3fefd: mov    %rbx,0x60(%rsp)
  0x0000000116b3ff02: mov    %rbp,0x50(%rsp)
  0x0000000116b3ff07: mov    %rsi,0x48(%rsp)
  0x0000000116b3ff0c: mov    %rdi,0x40(%rsp)
  0x0000000116b3ff11: mov    %r8,0x38(%rsp)
  0x0000000116b3ff16: mov    %r9,0x30(%rsp)
  0x0000000116b3ff1b: mov    %r10,0x28(%rsp)
  0x0000000116b3ff20: mov    %r11,0x20(%rsp)
  0x0000000116b3ff25: mov    %r12,0x18(%rsp)
  0x0000000116b3ff2a: mov    %r13,0x10(%rsp)
  0x0000000116b3ff2f: mov    %r14,0x8(%rsp)
  0x0000000116b3ff34: mov    %r15,(%rsp)
  0x0000000116b3ff38: movabs $0x10cc6405e,%rdi
  0x0000000116b3ff42: movabs $0x116b3fee2,%rsi
  0x0000000116b3ff4c: mov    %rsp,%rdx
  0x0000000116b3ff4f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b3ff53: callq  0x000000010c7dd830
  0x0000000116b3ff58: hlt    
  0x0000000116b3ff59: pop    %rax
  0x0000000116b3ff5a: movabs $0x0,%r10
  0x0000000116b3ff64: mov    %r10,0x280(%r15)
  0x0000000116b3ff6b: movabs $0x0,%r10
  0x0000000116b3ff75: mov    %r10,0x290(%r15)
  0x0000000116b3ff7c: movabs $0x0,%r10
  0x0000000116b3ff86: mov    %r10,0x288(%r15)
  0x0000000116b3ff8d: cmpq   $0x0,0x8(%r15)
  0x0000000116b3ff95: je     0x0000000116b3ffa0
  0x0000000116b3ff9b: jmpq   0x0000000116b30420
  0x0000000116b3ffa0: mov    -0x38(%rbp),%r13
  0x0000000116b3ffa4: mov    -0x30(%rbp),%r14
  0x0000000116b3ffa8: retq   
  0x0000000116b3ffa9: mov    %rsp,-0x28(%rsp)
  0x0000000116b3ffae: sub    $0x80,%rsp
  0x0000000116b3ffb5: mov    %rax,0x78(%rsp)
  0x0000000116b3ffba: mov    %rcx,0x70(%rsp)
  0x0000000116b3ffbf: mov    %rdx,0x68(%rsp)
  0x0000000116b3ffc4: mov    %rbx,0x60(%rsp)
  0x0000000116b3ffc9: mov    %rbp,0x50(%rsp)
  0x0000000116b3ffce: mov    %rsi,0x48(%rsp)
  0x0000000116b3ffd3: mov    %rdi,0x40(%rsp)
  0x0000000116b3ffd8: mov    %r8,0x38(%rsp)
  0x0000000116b3ffdd: mov    %r9,0x30(%rsp)
  0x0000000116b3ffe2: mov    %r10,0x28(%rsp)
  0x0000000116b3ffe7: mov    %r11,0x20(%rsp)
  0x0000000116b3ffec: mov    %r12,0x18(%rsp)
  0x0000000116b3fff1: mov    %r13,0x10(%rsp)
  0x0000000116b3fff6: mov    %r14,0x8(%rsp)
  0x0000000116b3fffb: mov    %r15,(%rsp)
  0x0000000116b3ffff: movabs $0x10cb763be,%rdi
  0x0000000116b40009: movabs $0x116b3ffa9,%rsi
  0x0000000116b40013: mov    %rsp,%rdx
  0x0000000116b40016: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4001a: callq  0x000000010c7dd830
  0x0000000116b4001f: hlt    
  0x0000000116b40020: movzbl 0x2(%r13),%ebx
  0x0000000116b40025: add    $0x2,%r13
  0x0000000116b40029: movabs $0x10ce38e80,%r10
  0x0000000116b40033: jmpq   *(%r10,%rbx,8)
  0x0000000116b40037: movq   $0x0,-0x10(%rbp)
  0x0000000116b4003f: mov    -0x38(%rbp),%r13
  0x0000000116b40043: mov    -0x30(%rbp),%r14
  0x0000000116b40047: cmpq   $0x0,0x8(%r15)
  0x0000000116b4004f: je     0x0000000116b40325
  0x0000000116b40055: callq  0x0000000116b4005f
  0x0000000116b4005a: jmpq   0x0000000116b402ae
  0x0000000116b4005f: lea    0x8(%rsp),%rax
  0x0000000116b40064: mov    %r13,-0x38(%rbp)
  0x0000000116b40068: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b40070: je     0x0000000116b400ed
  0x0000000116b40076: mov    %rsp,-0x28(%rsp)
  0x0000000116b4007b: sub    $0x80,%rsp
  0x0000000116b40082: mov    %rax,0x78(%rsp)
  0x0000000116b40087: mov    %rcx,0x70(%rsp)
  0x0000000116b4008c: mov    %rdx,0x68(%rsp)
  0x0000000116b40091: mov    %rbx,0x60(%rsp)
  0x0000000116b40096: mov    %rbp,0x50(%rsp)
  0x0000000116b4009b: mov    %rsi,0x48(%rsp)
  0x0000000116b400a0: mov    %rdi,0x40(%rsp)
  0x0000000116b400a5: mov    %r8,0x38(%rsp)
  0x0000000116b400aa: mov    %r9,0x30(%rsp)
  0x0000000116b400af: mov    %r10,0x28(%rsp)
  0x0000000116b400b4: mov    %r11,0x20(%rsp)
  0x0000000116b400b9: mov    %r12,0x18(%rsp)
  0x0000000116b400be: mov    %r13,0x10(%rsp)
  0x0000000116b400c3: mov    %r14,0x8(%rsp)
  0x0000000116b400c8: mov    %r15,(%rsp)
  0x0000000116b400cc: movabs $0x10cc2363b,%rdi
  0x0000000116b400d6: movabs $0x116b40076,%rsi
  0x0000000116b400e0: mov    %rsp,%rdx
  0x0000000116b400e3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b400e7: callq  0x000000010c7dd830
  0x0000000116b400ec: hlt    
  0x0000000116b400ed: push   %r10
  0x0000000116b400ef: cmp    -0x9cf9846(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b400f6: je     0x0000000116b40173
  ;; call_VM_base: heap base corrupted?
  0x0000000116b400fc: mov    %rsp,-0x28(%rsp)
  0x0000000116b40101: sub    $0x80,%rsp
  0x0000000116b40108: mov    %rax,0x78(%rsp)
  0x0000000116b4010d: mov    %rcx,0x70(%rsp)
  0x0000000116b40112: mov    %rdx,0x68(%rsp)
  0x0000000116b40117: mov    %rbx,0x60(%rsp)
  0x0000000116b4011c: mov    %rbp,0x50(%rsp)
  0x0000000116b40121: mov    %rsi,0x48(%rsp)
  0x0000000116b40126: mov    %rdi,0x40(%rsp)
  0x0000000116b4012b: mov    %r8,0x38(%rsp)
  0x0000000116b40130: mov    %r9,0x30(%rsp)
  0x0000000116b40135: mov    %r10,0x28(%rsp)
  0x0000000116b4013a: mov    %r11,0x20(%rsp)
  0x0000000116b4013f: mov    %r12,0x18(%rsp)
  0x0000000116b40144: mov    %r13,0x10(%rsp)
  0x0000000116b40149: mov    %r14,0x8(%rsp)
  0x0000000116b4014e: mov    %r15,(%rsp)
  0x0000000116b40152: movabs $0x10cc63f17,%rdi
  0x0000000116b4015c: movabs $0x116b400fc,%rsi
  0x0000000116b40166: mov    %rsp,%rdx
  0x0000000116b40169: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4016d: callq  0x000000010c7dd830
  0x0000000116b40172: hlt    
  0x0000000116b40173: pop    %r10
  0x0000000116b40175: mov    %r15,%rdi
  0x0000000116b40178: mov    %rbp,0x290(%r15)
  0x0000000116b4017f: mov    %rax,0x280(%r15)
  0x0000000116b40186: test   $0xf,%esp
  0x0000000116b4018c: je     0x0000000116b401a4
  0x0000000116b40192: sub    $0x8,%rsp
  0x0000000116b40196: callq  0x000000010c5881a0
  0x0000000116b4019b: add    $0x8,%rsp
  0x0000000116b4019f: jmpq   0x0000000116b401a9
  0x0000000116b401a4: callq  0x000000010c5881a0
  0x0000000116b401a9: push   %rax
  0x0000000116b401aa: push   %rdi
  0x0000000116b401ab: push   %rsi
  0x0000000116b401ac: push   %rdx
  0x0000000116b401ad: push   %rcx
  0x0000000116b401ae: push   %r8
  0x0000000116b401b0: push   %r9
  0x0000000116b401b2: push   %r10
  0x0000000116b401b4: mov    %rsp,%r10
  0x0000000116b401b7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b401bb: push   %r10
  0x0000000116b401bd: push   %r11
  0x0000000116b401bf: mov    $0x109,%edi
  0x0000000116b401c4: movabs $0x7ff815049fd5,%r10
  0x0000000116b401ce: callq  *%r10
  0x0000000116b401d1: pop    %r11
  0x0000000116b401d3: pop    %rsp
  0x0000000116b401d4: pop    %r10
  0x0000000116b401d6: pop    %r9
  0x0000000116b401d8: pop    %r8
  0x0000000116b401da: pop    %rcx
  0x0000000116b401db: pop    %rdx
  0x0000000116b401dc: pop    %rsi
  0x0000000116b401dd: pop    %rdi
  0x0000000116b401de: cmp    %rax,%r15
  0x0000000116b401e1: je     0x0000000116b4025e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b401e7: mov    %rsp,-0x28(%rsp)
  0x0000000116b401ec: sub    $0x80,%rsp
  0x0000000116b401f3: mov    %rax,0x78(%rsp)
  0x0000000116b401f8: mov    %rcx,0x70(%rsp)
  0x0000000116b401fd: mov    %rdx,0x68(%rsp)
  0x0000000116b40202: mov    %rbx,0x60(%rsp)
  0x0000000116b40207: mov    %rbp,0x50(%rsp)
  0x0000000116b4020c: mov    %rsi,0x48(%rsp)
  0x0000000116b40211: mov    %rdi,0x40(%rsp)
  0x0000000116b40216: mov    %r8,0x38(%rsp)
  0x0000000116b4021b: mov    %r9,0x30(%rsp)
  0x0000000116b40220: mov    %r10,0x28(%rsp)
  0x0000000116b40225: mov    %r11,0x20(%rsp)
  0x0000000116b4022a: mov    %r12,0x18(%rsp)
  0x0000000116b4022f: mov    %r13,0x10(%rsp)
  0x0000000116b40234: mov    %r14,0x8(%rsp)
  0x0000000116b40239: mov    %r15,(%rsp)
  0x0000000116b4023d: movabs $0x10cc6405e,%rdi
  0x0000000116b40247: movabs $0x116b401e7,%rsi
  0x0000000116b40251: mov    %rsp,%rdx
  0x0000000116b40254: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40258: callq  0x000000010c7dd830
  0x0000000116b4025d: hlt    
  0x0000000116b4025e: pop    %rax
  0x0000000116b4025f: movabs $0x0,%r10
  0x0000000116b40269: mov    %r10,0x280(%r15)
  0x0000000116b40270: movabs $0x0,%r10
  0x0000000116b4027a: mov    %r10,0x290(%r15)
  0x0000000116b40281: movabs $0x0,%r10
  0x0000000116b4028b: mov    %r10,0x288(%r15)
  0x0000000116b40292: cmpq   $0x0,0x8(%r15)
  0x0000000116b4029a: je     0x0000000116b402a5
  0x0000000116b402a0: jmpq   0x0000000116b30420
  0x0000000116b402a5: mov    -0x38(%rbp),%r13
  0x0000000116b402a9: mov    -0x30(%rbp),%r14
  0x0000000116b402ad: retq   
  0x0000000116b402ae: mov    %rsp,-0x28(%rsp)
  0x0000000116b402b3: sub    $0x80,%rsp
  0x0000000116b402ba: mov    %rax,0x78(%rsp)
  0x0000000116b402bf: mov    %rcx,0x70(%rsp)
  0x0000000116b402c4: mov    %rdx,0x68(%rsp)
  0x0000000116b402c9: mov    %rbx,0x60(%rsp)
  0x0000000116b402ce: mov    %rbp,0x50(%rsp)
  0x0000000116b402d3: mov    %rsi,0x48(%rsp)
  0x0000000116b402d8: mov    %rdi,0x40(%rsp)
  0x0000000116b402dd: mov    %r8,0x38(%rsp)
  0x0000000116b402e2: mov    %r9,0x30(%rsp)
  0x0000000116b402e7: mov    %r10,0x28(%rsp)
  0x0000000116b402ec: mov    %r11,0x20(%rsp)
  0x0000000116b402f1: mov    %r12,0x18(%rsp)
  0x0000000116b402f6: mov    %r13,0x10(%rsp)
  0x0000000116b402fb: mov    %r14,0x8(%rsp)
  0x0000000116b40300: mov    %r15,(%rsp)
  0x0000000116b40304: movabs $0x10cb763be,%rdi
  0x0000000116b4030e: movabs $0x116b402ae,%rsi
  0x0000000116b40318: mov    %rsp,%rdx
  0x0000000116b4031b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4031f: callq  0x000000010c7dd830
  0x0000000116b40324: hlt    
  0x0000000116b40325: movzbl 0x2(%r13),%ebx
  0x0000000116b4032a: add    $0x2,%r13
  0x0000000116b4032e: movabs $0x10ce38e80,%r10
  0x0000000116b40338: jmpq   *(%r10,%rbx,8)
  0x0000000116b4033c: movq   $0x0,-0x10(%rbp)
  0x0000000116b40344: mov    -0x38(%rbp),%r13
  0x0000000116b40348: mov    -0x30(%rbp),%r14
  0x0000000116b4034c: cmpq   $0x0,0x8(%r15)
  0x0000000116b40354: je     0x0000000116b4062a
  0x0000000116b4035a: callq  0x0000000116b40364
  0x0000000116b4035f: jmpq   0x0000000116b405b3
  0x0000000116b40364: lea    0x8(%rsp),%rax
  0x0000000116b40369: mov    %r13,-0x38(%rbp)
  0x0000000116b4036d: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b40375: je     0x0000000116b403f2
  0x0000000116b4037b: mov    %rsp,-0x28(%rsp)
  0x0000000116b40380: sub    $0x80,%rsp
  0x0000000116b40387: mov    %rax,0x78(%rsp)
  0x0000000116b4038c: mov    %rcx,0x70(%rsp)
  0x0000000116b40391: mov    %rdx,0x68(%rsp)
  0x0000000116b40396: mov    %rbx,0x60(%rsp)
  0x0000000116b4039b: mov    %rbp,0x50(%rsp)
  0x0000000116b403a0: mov    %rsi,0x48(%rsp)
  0x0000000116b403a5: mov    %rdi,0x40(%rsp)
  0x0000000116b403aa: mov    %r8,0x38(%rsp)
  0x0000000116b403af: mov    %r9,0x30(%rsp)
  0x0000000116b403b4: mov    %r10,0x28(%rsp)
  0x0000000116b403b9: mov    %r11,0x20(%rsp)
  0x0000000116b403be: mov    %r12,0x18(%rsp)
  0x0000000116b403c3: mov    %r13,0x10(%rsp)
  0x0000000116b403c8: mov    %r14,0x8(%rsp)
  0x0000000116b403cd: mov    %r15,(%rsp)
  0x0000000116b403d1: movabs $0x10cc2363b,%rdi
  0x0000000116b403db: movabs $0x116b4037b,%rsi
  0x0000000116b403e5: mov    %rsp,%rdx
  0x0000000116b403e8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b403ec: callq  0x000000010c7dd830
  0x0000000116b403f1: hlt    
  0x0000000116b403f2: push   %r10
  0x0000000116b403f4: cmp    -0x9cf9b4b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b403fb: je     0x0000000116b40478
  ;; call_VM_base: heap base corrupted?
  0x0000000116b40401: mov    %rsp,-0x28(%rsp)
  0x0000000116b40406: sub    $0x80,%rsp
  0x0000000116b4040d: mov    %rax,0x78(%rsp)
  0x0000000116b40412: mov    %rcx,0x70(%rsp)
  0x0000000116b40417: mov    %rdx,0x68(%rsp)
  0x0000000116b4041c: mov    %rbx,0x60(%rsp)
  0x0000000116b40421: mov    %rbp,0x50(%rsp)
  0x0000000116b40426: mov    %rsi,0x48(%rsp)
  0x0000000116b4042b: mov    %rdi,0x40(%rsp)
  0x0000000116b40430: mov    %r8,0x38(%rsp)
  0x0000000116b40435: mov    %r9,0x30(%rsp)
  0x0000000116b4043a: mov    %r10,0x28(%rsp)
  0x0000000116b4043f: mov    %r11,0x20(%rsp)
  0x0000000116b40444: mov    %r12,0x18(%rsp)
  0x0000000116b40449: mov    %r13,0x10(%rsp)
  0x0000000116b4044e: mov    %r14,0x8(%rsp)
  0x0000000116b40453: mov    %r15,(%rsp)
  0x0000000116b40457: movabs $0x10cc63f17,%rdi
  0x0000000116b40461: movabs $0x116b40401,%rsi
  0x0000000116b4046b: mov    %rsp,%rdx
  0x0000000116b4046e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40472: callq  0x000000010c7dd830
  0x0000000116b40477: hlt    
  0x0000000116b40478: pop    %r10
  0x0000000116b4047a: mov    %r15,%rdi
  0x0000000116b4047d: mov    %rbp,0x290(%r15)
  0x0000000116b40484: mov    %rax,0x280(%r15)
  0x0000000116b4048b: test   $0xf,%esp
  0x0000000116b40491: je     0x0000000116b404a9
  0x0000000116b40497: sub    $0x8,%rsp
  0x0000000116b4049b: callq  0x000000010c5881a0
  0x0000000116b404a0: add    $0x8,%rsp
  0x0000000116b404a4: jmpq   0x0000000116b404ae
  0x0000000116b404a9: callq  0x000000010c5881a0
  0x0000000116b404ae: push   %rax
  0x0000000116b404af: push   %rdi
  0x0000000116b404b0: push   %rsi
  0x0000000116b404b1: push   %rdx
  0x0000000116b404b2: push   %rcx
  0x0000000116b404b3: push   %r8
  0x0000000116b404b5: push   %r9
  0x0000000116b404b7: push   %r10
  0x0000000116b404b9: mov    %rsp,%r10
  0x0000000116b404bc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b404c0: push   %r10
  0x0000000116b404c2: push   %r11
  0x0000000116b404c4: mov    $0x109,%edi
  0x0000000116b404c9: movabs $0x7ff815049fd5,%r10
  0x0000000116b404d3: callq  *%r10
  0x0000000116b404d6: pop    %r11
  0x0000000116b404d8: pop    %rsp
  0x0000000116b404d9: pop    %r10
  0x0000000116b404db: pop    %r9
  0x0000000116b404dd: pop    %r8
  0x0000000116b404df: pop    %rcx
  0x0000000116b404e0: pop    %rdx
  0x0000000116b404e1: pop    %rsi
  0x0000000116b404e2: pop    %rdi
  0x0000000116b404e3: cmp    %rax,%r15
  0x0000000116b404e6: je     0x0000000116b40563
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b404ec: mov    %rsp,-0x28(%rsp)
  0x0000000116b404f1: sub    $0x80,%rsp
  0x0000000116b404f8: mov    %rax,0x78(%rsp)
  0x0000000116b404fd: mov    %rcx,0x70(%rsp)
  0x0000000116b40502: mov    %rdx,0x68(%rsp)
  0x0000000116b40507: mov    %rbx,0x60(%rsp)
  0x0000000116b4050c: mov    %rbp,0x50(%rsp)
  0x0000000116b40511: mov    %rsi,0x48(%rsp)
  0x0000000116b40516: mov    %rdi,0x40(%rsp)
  0x0000000116b4051b: mov    %r8,0x38(%rsp)
  0x0000000116b40520: mov    %r9,0x30(%rsp)
  0x0000000116b40525: mov    %r10,0x28(%rsp)
  0x0000000116b4052a: mov    %r11,0x20(%rsp)
  0x0000000116b4052f: mov    %r12,0x18(%rsp)
  0x0000000116b40534: mov    %r13,0x10(%rsp)
  0x0000000116b40539: mov    %r14,0x8(%rsp)
  0x0000000116b4053e: mov    %r15,(%rsp)
  0x0000000116b40542: movabs $0x10cc6405e,%rdi
  0x0000000116b4054c: movabs $0x116b404ec,%rsi
  0x0000000116b40556: mov    %rsp,%rdx
  0x0000000116b40559: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4055d: callq  0x000000010c7dd830
  0x0000000116b40562: hlt    
  0x0000000116b40563: pop    %rax
  0x0000000116b40564: movabs $0x0,%r10
  0x0000000116b4056e: mov    %r10,0x280(%r15)
  0x0000000116b40575: movabs $0x0,%r10
  0x0000000116b4057f: mov    %r10,0x290(%r15)
  0x0000000116b40586: movabs $0x0,%r10
  0x0000000116b40590: mov    %r10,0x288(%r15)
  0x0000000116b40597: cmpq   $0x0,0x8(%r15)
  0x0000000116b4059f: je     0x0000000116b405aa
  0x0000000116b405a5: jmpq   0x0000000116b30420
  0x0000000116b405aa: mov    -0x38(%rbp),%r13
  0x0000000116b405ae: mov    -0x30(%rbp),%r14
  0x0000000116b405b2: retq   
  0x0000000116b405b3: mov    %rsp,-0x28(%rsp)
  0x0000000116b405b8: sub    $0x80,%rsp
  0x0000000116b405bf: mov    %rax,0x78(%rsp)
  0x0000000116b405c4: mov    %rcx,0x70(%rsp)
  0x0000000116b405c9: mov    %rdx,0x68(%rsp)
  0x0000000116b405ce: mov    %rbx,0x60(%rsp)
  0x0000000116b405d3: mov    %rbp,0x50(%rsp)
  0x0000000116b405d8: mov    %rsi,0x48(%rsp)
  0x0000000116b405dd: mov    %rdi,0x40(%rsp)
  0x0000000116b405e2: mov    %r8,0x38(%rsp)
  0x0000000116b405e7: mov    %r9,0x30(%rsp)
  0x0000000116b405ec: mov    %r10,0x28(%rsp)
  0x0000000116b405f1: mov    %r11,0x20(%rsp)
  0x0000000116b405f6: mov    %r12,0x18(%rsp)
  0x0000000116b405fb: mov    %r13,0x10(%rsp)
  0x0000000116b40600: mov    %r14,0x8(%rsp)
  0x0000000116b40605: mov    %r15,(%rsp)
  0x0000000116b40609: movabs $0x10cb763be,%rdi
  0x0000000116b40613: movabs $0x116b405b3,%rsi
  0x0000000116b4061d: mov    %rsp,%rdx
  0x0000000116b40620: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40624: callq  0x000000010c7dd830
  0x0000000116b40629: hlt    
  0x0000000116b4062a: movzbl 0x2(%r13),%ebx
  0x0000000116b4062f: add    $0x2,%r13
  0x0000000116b40633: movabs $0x10ce38e80,%r10
  0x0000000116b4063d: jmpq   *(%r10,%rbx,8)
  0x0000000116b40641: movq   $0x0,-0x10(%rbp)
  0x0000000116b40649: mov    -0x38(%rbp),%r13
  0x0000000116b4064d: mov    -0x30(%rbp),%r14
  0x0000000116b40651: cmpq   $0x0,0x8(%r15)
  0x0000000116b40659: je     0x0000000116b4092f
  0x0000000116b4065f: callq  0x0000000116b40669
  0x0000000116b40664: jmpq   0x0000000116b408b8
  0x0000000116b40669: lea    0x8(%rsp),%rax
  0x0000000116b4066e: mov    %r13,-0x38(%rbp)
  0x0000000116b40672: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4067a: je     0x0000000116b406f7
  0x0000000116b40680: mov    %rsp,-0x28(%rsp)
  0x0000000116b40685: sub    $0x80,%rsp
  0x0000000116b4068c: mov    %rax,0x78(%rsp)
  0x0000000116b40691: mov    %rcx,0x70(%rsp)
  0x0000000116b40696: mov    %rdx,0x68(%rsp)
  0x0000000116b4069b: mov    %rbx,0x60(%rsp)
  0x0000000116b406a0: mov    %rbp,0x50(%rsp)
  0x0000000116b406a5: mov    %rsi,0x48(%rsp)
  0x0000000116b406aa: mov    %rdi,0x40(%rsp)
  0x0000000116b406af: mov    %r8,0x38(%rsp)
  0x0000000116b406b4: mov    %r9,0x30(%rsp)
  0x0000000116b406b9: mov    %r10,0x28(%rsp)
  0x0000000116b406be: mov    %r11,0x20(%rsp)
  0x0000000116b406c3: mov    %r12,0x18(%rsp)
  0x0000000116b406c8: mov    %r13,0x10(%rsp)
  0x0000000116b406cd: mov    %r14,0x8(%rsp)
  0x0000000116b406d2: mov    %r15,(%rsp)
  0x0000000116b406d6: movabs $0x10cc2363b,%rdi
  0x0000000116b406e0: movabs $0x116b40680,%rsi
  0x0000000116b406ea: mov    %rsp,%rdx
  0x0000000116b406ed: and    $0xfffffffffffffff0,%rsp
  0x0000000116b406f1: callq  0x000000010c7dd830
  0x0000000116b406f6: hlt    
  0x0000000116b406f7: push   %r10
  0x0000000116b406f9: cmp    -0x9cf9e50(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b40700: je     0x0000000116b4077d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b40706: mov    %rsp,-0x28(%rsp)
  0x0000000116b4070b: sub    $0x80,%rsp
  0x0000000116b40712: mov    %rax,0x78(%rsp)
  0x0000000116b40717: mov    %rcx,0x70(%rsp)
  0x0000000116b4071c: mov    %rdx,0x68(%rsp)
  0x0000000116b40721: mov    %rbx,0x60(%rsp)
  0x0000000116b40726: mov    %rbp,0x50(%rsp)
  0x0000000116b4072b: mov    %rsi,0x48(%rsp)
  0x0000000116b40730: mov    %rdi,0x40(%rsp)
  0x0000000116b40735: mov    %r8,0x38(%rsp)
  0x0000000116b4073a: mov    %r9,0x30(%rsp)
  0x0000000116b4073f: mov    %r10,0x28(%rsp)
  0x0000000116b40744: mov    %r11,0x20(%rsp)
  0x0000000116b40749: mov    %r12,0x18(%rsp)
  0x0000000116b4074e: mov    %r13,0x10(%rsp)
  0x0000000116b40753: mov    %r14,0x8(%rsp)
  0x0000000116b40758: mov    %r15,(%rsp)
  0x0000000116b4075c: movabs $0x10cc63f17,%rdi
  0x0000000116b40766: movabs $0x116b40706,%rsi
  0x0000000116b40770: mov    %rsp,%rdx
  0x0000000116b40773: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40777: callq  0x000000010c7dd830
  0x0000000116b4077c: hlt    
  0x0000000116b4077d: pop    %r10
  0x0000000116b4077f: mov    %r15,%rdi
  0x0000000116b40782: mov    %rbp,0x290(%r15)
  0x0000000116b40789: mov    %rax,0x280(%r15)
  0x0000000116b40790: test   $0xf,%esp
  0x0000000116b40796: je     0x0000000116b407ae
  0x0000000116b4079c: sub    $0x8,%rsp
  0x0000000116b407a0: callq  0x000000010c5881a0
  0x0000000116b407a5: add    $0x8,%rsp
  0x0000000116b407a9: jmpq   0x0000000116b407b3
  0x0000000116b407ae: callq  0x000000010c5881a0
  0x0000000116b407b3: push   %rax
  0x0000000116b407b4: push   %rdi
  0x0000000116b407b5: push   %rsi
  0x0000000116b407b6: push   %rdx
  0x0000000116b407b7: push   %rcx
  0x0000000116b407b8: push   %r8
  0x0000000116b407ba: push   %r9
  0x0000000116b407bc: push   %r10
  0x0000000116b407be: mov    %rsp,%r10
  0x0000000116b407c1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b407c5: push   %r10
  0x0000000116b407c7: push   %r11
  0x0000000116b407c9: mov    $0x109,%edi
  0x0000000116b407ce: movabs $0x7ff815049fd5,%r10
  0x0000000116b407d8: callq  *%r10
  0x0000000116b407db: pop    %r11
  0x0000000116b407dd: pop    %rsp
  0x0000000116b407de: pop    %r10
  0x0000000116b407e0: pop    %r9
  0x0000000116b407e2: pop    %r8
  0x0000000116b407e4: pop    %rcx
  0x0000000116b407e5: pop    %rdx
  0x0000000116b407e6: pop    %rsi
  0x0000000116b407e7: pop    %rdi
  0x0000000116b407e8: cmp    %rax,%r15
  0x0000000116b407eb: je     0x0000000116b40868
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b407f1: mov    %rsp,-0x28(%rsp)
  0x0000000116b407f6: sub    $0x80,%rsp
  0x0000000116b407fd: mov    %rax,0x78(%rsp)
  0x0000000116b40802: mov    %rcx,0x70(%rsp)
  0x0000000116b40807: mov    %rdx,0x68(%rsp)
  0x0000000116b4080c: mov    %rbx,0x60(%rsp)
  0x0000000116b40811: mov    %rbp,0x50(%rsp)
  0x0000000116b40816: mov    %rsi,0x48(%rsp)
  0x0000000116b4081b: mov    %rdi,0x40(%rsp)
  0x0000000116b40820: mov    %r8,0x38(%rsp)
  0x0000000116b40825: mov    %r9,0x30(%rsp)
  0x0000000116b4082a: mov    %r10,0x28(%rsp)
  0x0000000116b4082f: mov    %r11,0x20(%rsp)
  0x0000000116b40834: mov    %r12,0x18(%rsp)
  0x0000000116b40839: mov    %r13,0x10(%rsp)
  0x0000000116b4083e: mov    %r14,0x8(%rsp)
  0x0000000116b40843: mov    %r15,(%rsp)
  0x0000000116b40847: movabs $0x10cc6405e,%rdi
  0x0000000116b40851: movabs $0x116b407f1,%rsi
  0x0000000116b4085b: mov    %rsp,%rdx
  0x0000000116b4085e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40862: callq  0x000000010c7dd830
  0x0000000116b40867: hlt    
  0x0000000116b40868: pop    %rax
  0x0000000116b40869: movabs $0x0,%r10
  0x0000000116b40873: mov    %r10,0x280(%r15)
  0x0000000116b4087a: movabs $0x0,%r10
  0x0000000116b40884: mov    %r10,0x290(%r15)
  0x0000000116b4088b: movabs $0x0,%r10
  0x0000000116b40895: mov    %r10,0x288(%r15)
  0x0000000116b4089c: cmpq   $0x0,0x8(%r15)
  0x0000000116b408a4: je     0x0000000116b408af
  0x0000000116b408aa: jmpq   0x0000000116b30420
  0x0000000116b408af: mov    -0x38(%rbp),%r13
  0x0000000116b408b3: mov    -0x30(%rbp),%r14
  0x0000000116b408b7: retq   
  0x0000000116b408b8: mov    %rsp,-0x28(%rsp)
  0x0000000116b408bd: sub    $0x80,%rsp
  0x0000000116b408c4: mov    %rax,0x78(%rsp)
  0x0000000116b408c9: mov    %rcx,0x70(%rsp)
  0x0000000116b408ce: mov    %rdx,0x68(%rsp)
  0x0000000116b408d3: mov    %rbx,0x60(%rsp)
  0x0000000116b408d8: mov    %rbp,0x50(%rsp)
  0x0000000116b408dd: mov    %rsi,0x48(%rsp)
  0x0000000116b408e2: mov    %rdi,0x40(%rsp)
  0x0000000116b408e7: mov    %r8,0x38(%rsp)
  0x0000000116b408ec: mov    %r9,0x30(%rsp)
  0x0000000116b408f1: mov    %r10,0x28(%rsp)
  0x0000000116b408f6: mov    %r11,0x20(%rsp)
  0x0000000116b408fb: mov    %r12,0x18(%rsp)
  0x0000000116b40900: mov    %r13,0x10(%rsp)
  0x0000000116b40905: mov    %r14,0x8(%rsp)
  0x0000000116b4090a: mov    %r15,(%rsp)
  0x0000000116b4090e: movabs $0x10cb763be,%rdi
  0x0000000116b40918: movabs $0x116b408b8,%rsi
  0x0000000116b40922: mov    %rsp,%rdx
  0x0000000116b40925: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40929: callq  0x000000010c7dd830
  0x0000000116b4092e: hlt    
  0x0000000116b4092f: movzbl 0x2(%r13),%ebx
  0x0000000116b40934: add    $0x2,%r13
  0x0000000116b40938: movabs $0x10ce38e80,%r10
  0x0000000116b40942: jmpq   *(%r10,%rbx,8)
  0x0000000116b40946: movq   $0x0,-0x10(%rbp)
  0x0000000116b4094e: mov    -0x38(%rbp),%r13
  0x0000000116b40952: mov    -0x30(%rbp),%r14
  0x0000000116b40956: cmpq   $0x0,0x8(%r15)
  0x0000000116b4095e: je     0x0000000116b40c34
  0x0000000116b40964: callq  0x0000000116b4096e
  0x0000000116b40969: jmpq   0x0000000116b40bbd
  0x0000000116b4096e: lea    0x8(%rsp),%rax
  0x0000000116b40973: mov    %r13,-0x38(%rbp)
  0x0000000116b40977: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4097f: je     0x0000000116b409fc
  0x0000000116b40985: mov    %rsp,-0x28(%rsp)
  0x0000000116b4098a: sub    $0x80,%rsp
  0x0000000116b40991: mov    %rax,0x78(%rsp)
  0x0000000116b40996: mov    %rcx,0x70(%rsp)
  0x0000000116b4099b: mov    %rdx,0x68(%rsp)
  0x0000000116b409a0: mov    %rbx,0x60(%rsp)
  0x0000000116b409a5: mov    %rbp,0x50(%rsp)
  0x0000000116b409aa: mov    %rsi,0x48(%rsp)
  0x0000000116b409af: mov    %rdi,0x40(%rsp)
  0x0000000116b409b4: mov    %r8,0x38(%rsp)
  0x0000000116b409b9: mov    %r9,0x30(%rsp)
  0x0000000116b409be: mov    %r10,0x28(%rsp)
  0x0000000116b409c3: mov    %r11,0x20(%rsp)
  0x0000000116b409c8: mov    %r12,0x18(%rsp)
  0x0000000116b409cd: mov    %r13,0x10(%rsp)
  0x0000000116b409d2: mov    %r14,0x8(%rsp)
  0x0000000116b409d7: mov    %r15,(%rsp)
  0x0000000116b409db: movabs $0x10cc2363b,%rdi
  0x0000000116b409e5: movabs $0x116b40985,%rsi
  0x0000000116b409ef: mov    %rsp,%rdx
  0x0000000116b409f2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b409f6: callq  0x000000010c7dd830
  0x0000000116b409fb: hlt    
  0x0000000116b409fc: push   %r10
  0x0000000116b409fe: cmp    -0x9cfa155(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b40a05: je     0x0000000116b40a82
  ;; call_VM_base: heap base corrupted?
  0x0000000116b40a0b: mov    %rsp,-0x28(%rsp)
  0x0000000116b40a10: sub    $0x80,%rsp
  0x0000000116b40a17: mov    %rax,0x78(%rsp)
  0x0000000116b40a1c: mov    %rcx,0x70(%rsp)
  0x0000000116b40a21: mov    %rdx,0x68(%rsp)
  0x0000000116b40a26: mov    %rbx,0x60(%rsp)
  0x0000000116b40a2b: mov    %rbp,0x50(%rsp)
  0x0000000116b40a30: mov    %rsi,0x48(%rsp)
  0x0000000116b40a35: mov    %rdi,0x40(%rsp)
  0x0000000116b40a3a: mov    %r8,0x38(%rsp)
  0x0000000116b40a3f: mov    %r9,0x30(%rsp)
  0x0000000116b40a44: mov    %r10,0x28(%rsp)
  0x0000000116b40a49: mov    %r11,0x20(%rsp)
  0x0000000116b40a4e: mov    %r12,0x18(%rsp)
  0x0000000116b40a53: mov    %r13,0x10(%rsp)
  0x0000000116b40a58: mov    %r14,0x8(%rsp)
  0x0000000116b40a5d: mov    %r15,(%rsp)
  0x0000000116b40a61: movabs $0x10cc63f17,%rdi
  0x0000000116b40a6b: movabs $0x116b40a0b,%rsi
  0x0000000116b40a75: mov    %rsp,%rdx
  0x0000000116b40a78: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40a7c: callq  0x000000010c7dd830
  0x0000000116b40a81: hlt    
  0x0000000116b40a82: pop    %r10
  0x0000000116b40a84: mov    %r15,%rdi
  0x0000000116b40a87: mov    %rbp,0x290(%r15)
  0x0000000116b40a8e: mov    %rax,0x280(%r15)
  0x0000000116b40a95: test   $0xf,%esp
  0x0000000116b40a9b: je     0x0000000116b40ab3
  0x0000000116b40aa1: sub    $0x8,%rsp
  0x0000000116b40aa5: callq  0x000000010c5881a0
  0x0000000116b40aaa: add    $0x8,%rsp
  0x0000000116b40aae: jmpq   0x0000000116b40ab8
  0x0000000116b40ab3: callq  0x000000010c5881a0
  0x0000000116b40ab8: push   %rax
  0x0000000116b40ab9: push   %rdi
  0x0000000116b40aba: push   %rsi
  0x0000000116b40abb: push   %rdx
  0x0000000116b40abc: push   %rcx
  0x0000000116b40abd: push   %r8
  0x0000000116b40abf: push   %r9
  0x0000000116b40ac1: push   %r10
  0x0000000116b40ac3: mov    %rsp,%r10
  0x0000000116b40ac6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40aca: push   %r10
  0x0000000116b40acc: push   %r11
  0x0000000116b40ace: mov    $0x109,%edi
  0x0000000116b40ad3: movabs $0x7ff815049fd5,%r10
  0x0000000116b40add: callq  *%r10
  0x0000000116b40ae0: pop    %r11
  0x0000000116b40ae2: pop    %rsp
  0x0000000116b40ae3: pop    %r10
  0x0000000116b40ae5: pop    %r9
  0x0000000116b40ae7: pop    %r8
  0x0000000116b40ae9: pop    %rcx
  0x0000000116b40aea: pop    %rdx
  0x0000000116b40aeb: pop    %rsi
  0x0000000116b40aec: pop    %rdi
  0x0000000116b40aed: cmp    %rax,%r15
  0x0000000116b40af0: je     0x0000000116b40b6d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b40af6: mov    %rsp,-0x28(%rsp)
  0x0000000116b40afb: sub    $0x80,%rsp
  0x0000000116b40b02: mov    %rax,0x78(%rsp)
  0x0000000116b40b07: mov    %rcx,0x70(%rsp)
  0x0000000116b40b0c: mov    %rdx,0x68(%rsp)
  0x0000000116b40b11: mov    %rbx,0x60(%rsp)
  0x0000000116b40b16: mov    %rbp,0x50(%rsp)
  0x0000000116b40b1b: mov    %rsi,0x48(%rsp)
  0x0000000116b40b20: mov    %rdi,0x40(%rsp)
  0x0000000116b40b25: mov    %r8,0x38(%rsp)
  0x0000000116b40b2a: mov    %r9,0x30(%rsp)
  0x0000000116b40b2f: mov    %r10,0x28(%rsp)
  0x0000000116b40b34: mov    %r11,0x20(%rsp)
  0x0000000116b40b39: mov    %r12,0x18(%rsp)
  0x0000000116b40b3e: mov    %r13,0x10(%rsp)
  0x0000000116b40b43: mov    %r14,0x8(%rsp)
  0x0000000116b40b48: mov    %r15,(%rsp)
  0x0000000116b40b4c: movabs $0x10cc6405e,%rdi
  0x0000000116b40b56: movabs $0x116b40af6,%rsi
  0x0000000116b40b60: mov    %rsp,%rdx
  0x0000000116b40b63: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40b67: callq  0x000000010c7dd830
  0x0000000116b40b6c: hlt    
  0x0000000116b40b6d: pop    %rax
  0x0000000116b40b6e: movabs $0x0,%r10
  0x0000000116b40b78: mov    %r10,0x280(%r15)
  0x0000000116b40b7f: movabs $0x0,%r10
  0x0000000116b40b89: mov    %r10,0x290(%r15)
  0x0000000116b40b90: movabs $0x0,%r10
  0x0000000116b40b9a: mov    %r10,0x288(%r15)
  0x0000000116b40ba1: cmpq   $0x0,0x8(%r15)
  0x0000000116b40ba9: je     0x0000000116b40bb4
  0x0000000116b40baf: jmpq   0x0000000116b30420
  0x0000000116b40bb4: mov    -0x38(%rbp),%r13
  0x0000000116b40bb8: mov    -0x30(%rbp),%r14
  0x0000000116b40bbc: retq   
  0x0000000116b40bbd: mov    %rsp,-0x28(%rsp)
  0x0000000116b40bc2: sub    $0x80,%rsp
  0x0000000116b40bc9: mov    %rax,0x78(%rsp)
  0x0000000116b40bce: mov    %rcx,0x70(%rsp)
  0x0000000116b40bd3: mov    %rdx,0x68(%rsp)
  0x0000000116b40bd8: mov    %rbx,0x60(%rsp)
  0x0000000116b40bdd: mov    %rbp,0x50(%rsp)
  0x0000000116b40be2: mov    %rsi,0x48(%rsp)
  0x0000000116b40be7: mov    %rdi,0x40(%rsp)
  0x0000000116b40bec: mov    %r8,0x38(%rsp)
  0x0000000116b40bf1: mov    %r9,0x30(%rsp)
  0x0000000116b40bf6: mov    %r10,0x28(%rsp)
  0x0000000116b40bfb: mov    %r11,0x20(%rsp)
  0x0000000116b40c00: mov    %r12,0x18(%rsp)
  0x0000000116b40c05: mov    %r13,0x10(%rsp)
  0x0000000116b40c0a: mov    %r14,0x8(%rsp)
  0x0000000116b40c0f: mov    %r15,(%rsp)
  0x0000000116b40c13: movabs $0x10cb763be,%rdi
  0x0000000116b40c1d: movabs $0x116b40bbd,%rsi
  0x0000000116b40c27: mov    %rsp,%rdx
  0x0000000116b40c2a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40c2e: callq  0x000000010c7dd830
  0x0000000116b40c33: hlt    
  0x0000000116b40c34: movzbl 0x2(%r13),%ebx
  0x0000000116b40c39: add    $0x2,%r13
  0x0000000116b40c3d: movabs $0x10ce3ae80,%r10
  0x0000000116b40c47: jmpq   *(%r10,%rbx,8)
  0x0000000116b40c4b: movq   $0x0,-0x10(%rbp)
  0x0000000116b40c53: mov    -0x38(%rbp),%r13
  0x0000000116b40c57: mov    -0x30(%rbp),%r14
  0x0000000116b40c5b: cmpq   $0x0,0x8(%r15)
  0x0000000116b40c63: je     0x0000000116b40f39
  0x0000000116b40c69: callq  0x0000000116b40c73
  0x0000000116b40c6e: jmpq   0x0000000116b40ec2
  0x0000000116b40c73: lea    0x8(%rsp),%rax
  0x0000000116b40c78: mov    %r13,-0x38(%rbp)
  0x0000000116b40c7c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b40c84: je     0x0000000116b40d01
  0x0000000116b40c8a: mov    %rsp,-0x28(%rsp)
  0x0000000116b40c8f: sub    $0x80,%rsp
  0x0000000116b40c96: mov    %rax,0x78(%rsp)
  0x0000000116b40c9b: mov    %rcx,0x70(%rsp)
  0x0000000116b40ca0: mov    %rdx,0x68(%rsp)
  0x0000000116b40ca5: mov    %rbx,0x60(%rsp)
  0x0000000116b40caa: mov    %rbp,0x50(%rsp)
  0x0000000116b40caf: mov    %rsi,0x48(%rsp)
  0x0000000116b40cb4: mov    %rdi,0x40(%rsp)
  0x0000000116b40cb9: mov    %r8,0x38(%rsp)
  0x0000000116b40cbe: mov    %r9,0x30(%rsp)
  0x0000000116b40cc3: mov    %r10,0x28(%rsp)
  0x0000000116b40cc8: mov    %r11,0x20(%rsp)
  0x0000000116b40ccd: mov    %r12,0x18(%rsp)
  0x0000000116b40cd2: mov    %r13,0x10(%rsp)
  0x0000000116b40cd7: mov    %r14,0x8(%rsp)
  0x0000000116b40cdc: mov    %r15,(%rsp)
  0x0000000116b40ce0: movabs $0x10cc2363b,%rdi
  0x0000000116b40cea: movabs $0x116b40c8a,%rsi
  0x0000000116b40cf4: mov    %rsp,%rdx
  0x0000000116b40cf7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40cfb: callq  0x000000010c7dd830
  0x0000000116b40d00: hlt    
  0x0000000116b40d01: push   %r10
  0x0000000116b40d03: cmp    -0x9cfa45a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b40d0a: je     0x0000000116b40d87
  ;; call_VM_base: heap base corrupted?
  0x0000000116b40d10: mov    %rsp,-0x28(%rsp)
  0x0000000116b40d15: sub    $0x80,%rsp
  0x0000000116b40d1c: mov    %rax,0x78(%rsp)
  0x0000000116b40d21: mov    %rcx,0x70(%rsp)
  0x0000000116b40d26: mov    %rdx,0x68(%rsp)
  0x0000000116b40d2b: mov    %rbx,0x60(%rsp)
  0x0000000116b40d30: mov    %rbp,0x50(%rsp)
  0x0000000116b40d35: mov    %rsi,0x48(%rsp)
  0x0000000116b40d3a: mov    %rdi,0x40(%rsp)
  0x0000000116b40d3f: mov    %r8,0x38(%rsp)
  0x0000000116b40d44: mov    %r9,0x30(%rsp)
  0x0000000116b40d49: mov    %r10,0x28(%rsp)
  0x0000000116b40d4e: mov    %r11,0x20(%rsp)
  0x0000000116b40d53: mov    %r12,0x18(%rsp)
  0x0000000116b40d58: mov    %r13,0x10(%rsp)
  0x0000000116b40d5d: mov    %r14,0x8(%rsp)
  0x0000000116b40d62: mov    %r15,(%rsp)
  0x0000000116b40d66: movabs $0x10cc63f17,%rdi
  0x0000000116b40d70: movabs $0x116b40d10,%rsi
  0x0000000116b40d7a: mov    %rsp,%rdx
  0x0000000116b40d7d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40d81: callq  0x000000010c7dd830
  0x0000000116b40d86: hlt    
  0x0000000116b40d87: pop    %r10
  0x0000000116b40d89: mov    %r15,%rdi
  0x0000000116b40d8c: mov    %rbp,0x290(%r15)
  0x0000000116b40d93: mov    %rax,0x280(%r15)
  0x0000000116b40d9a: test   $0xf,%esp
  0x0000000116b40da0: je     0x0000000116b40db8
  0x0000000116b40da6: sub    $0x8,%rsp
  0x0000000116b40daa: callq  0x000000010c5881a0
  0x0000000116b40daf: add    $0x8,%rsp
  0x0000000116b40db3: jmpq   0x0000000116b40dbd
  0x0000000116b40db8: callq  0x000000010c5881a0
  0x0000000116b40dbd: push   %rax
  0x0000000116b40dbe: push   %rdi
  0x0000000116b40dbf: push   %rsi
  0x0000000116b40dc0: push   %rdx
  0x0000000116b40dc1: push   %rcx
  0x0000000116b40dc2: push   %r8
  0x0000000116b40dc4: push   %r9
  0x0000000116b40dc6: push   %r10
  0x0000000116b40dc8: mov    %rsp,%r10
  0x0000000116b40dcb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40dcf: push   %r10
  0x0000000116b40dd1: push   %r11
  0x0000000116b40dd3: mov    $0x109,%edi
  0x0000000116b40dd8: movabs $0x7ff815049fd5,%r10
  0x0000000116b40de2: callq  *%r10
  0x0000000116b40de5: pop    %r11
  0x0000000116b40de7: pop    %rsp
  0x0000000116b40de8: pop    %r10
  0x0000000116b40dea: pop    %r9
  0x0000000116b40dec: pop    %r8
  0x0000000116b40dee: pop    %rcx
  0x0000000116b40def: pop    %rdx
  0x0000000116b40df0: pop    %rsi
  0x0000000116b40df1: pop    %rdi
  0x0000000116b40df2: cmp    %rax,%r15
  0x0000000116b40df5: je     0x0000000116b40e72
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b40dfb: mov    %rsp,-0x28(%rsp)
  0x0000000116b40e00: sub    $0x80,%rsp
  0x0000000116b40e07: mov    %rax,0x78(%rsp)
  0x0000000116b40e0c: mov    %rcx,0x70(%rsp)
  0x0000000116b40e11: mov    %rdx,0x68(%rsp)
  0x0000000116b40e16: mov    %rbx,0x60(%rsp)
  0x0000000116b40e1b: mov    %rbp,0x50(%rsp)
  0x0000000116b40e20: mov    %rsi,0x48(%rsp)
  0x0000000116b40e25: mov    %rdi,0x40(%rsp)
  0x0000000116b40e2a: mov    %r8,0x38(%rsp)
  0x0000000116b40e2f: mov    %r9,0x30(%rsp)
  0x0000000116b40e34: mov    %r10,0x28(%rsp)
  0x0000000116b40e39: mov    %r11,0x20(%rsp)
  0x0000000116b40e3e: mov    %r12,0x18(%rsp)
  0x0000000116b40e43: mov    %r13,0x10(%rsp)
  0x0000000116b40e48: mov    %r14,0x8(%rsp)
  0x0000000116b40e4d: mov    %r15,(%rsp)
  0x0000000116b40e51: movabs $0x10cc6405e,%rdi
  0x0000000116b40e5b: movabs $0x116b40dfb,%rsi
  0x0000000116b40e65: mov    %rsp,%rdx
  0x0000000116b40e68: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40e6c: callq  0x000000010c7dd830
  0x0000000116b40e71: hlt    
  0x0000000116b40e72: pop    %rax
  0x0000000116b40e73: movabs $0x0,%r10
  0x0000000116b40e7d: mov    %r10,0x280(%r15)
  0x0000000116b40e84: movabs $0x0,%r10
  0x0000000116b40e8e: mov    %r10,0x290(%r15)
  0x0000000116b40e95: movabs $0x0,%r10
  0x0000000116b40e9f: mov    %r10,0x288(%r15)
  0x0000000116b40ea6: cmpq   $0x0,0x8(%r15)
  0x0000000116b40eae: je     0x0000000116b40eb9
  0x0000000116b40eb4: jmpq   0x0000000116b30420
  0x0000000116b40eb9: mov    -0x38(%rbp),%r13
  0x0000000116b40ebd: mov    -0x30(%rbp),%r14
  0x0000000116b40ec1: retq   
  0x0000000116b40ec2: mov    %rsp,-0x28(%rsp)
  0x0000000116b40ec7: sub    $0x80,%rsp
  0x0000000116b40ece: mov    %rax,0x78(%rsp)
  0x0000000116b40ed3: mov    %rcx,0x70(%rsp)
  0x0000000116b40ed8: mov    %rdx,0x68(%rsp)
  0x0000000116b40edd: mov    %rbx,0x60(%rsp)
  0x0000000116b40ee2: mov    %rbp,0x50(%rsp)
  0x0000000116b40ee7: mov    %rsi,0x48(%rsp)
  0x0000000116b40eec: mov    %rdi,0x40(%rsp)
  0x0000000116b40ef1: mov    %r8,0x38(%rsp)
  0x0000000116b40ef6: mov    %r9,0x30(%rsp)
  0x0000000116b40efb: mov    %r10,0x28(%rsp)
  0x0000000116b40f00: mov    %r11,0x20(%rsp)
  0x0000000116b40f05: mov    %r12,0x18(%rsp)
  0x0000000116b40f0a: mov    %r13,0x10(%rsp)
  0x0000000116b40f0f: mov    %r14,0x8(%rsp)
  0x0000000116b40f14: mov    %r15,(%rsp)
  0x0000000116b40f18: movabs $0x10cb763be,%rdi
  0x0000000116b40f22: movabs $0x116b40ec2,%rsi
  0x0000000116b40f2c: mov    %rsp,%rdx
  0x0000000116b40f2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b40f33: callq  0x000000010c7dd830
  0x0000000116b40f38: hlt    
  0x0000000116b40f39: movzbl 0x2(%r13),%ebx
  0x0000000116b40f3e: add    $0x2,%r13
  0x0000000116b40f42: movabs $0x10ce38e80,%r10
  0x0000000116b40f4c: jmpq   *(%r10,%rbx,8)
  0x0000000116b40f50: movq   $0x0,-0x10(%rbp)
  0x0000000116b40f58: mov    -0x38(%rbp),%r13
  0x0000000116b40f5c: mov    -0x30(%rbp),%r14
  0x0000000116b40f60: cmpq   $0x0,0x8(%r15)
  0x0000000116b40f68: je     0x0000000116b4123e
  0x0000000116b40f6e: callq  0x0000000116b40f78
  0x0000000116b40f73: jmpq   0x0000000116b411c7
  0x0000000116b40f78: lea    0x8(%rsp),%rax
  0x0000000116b40f7d: mov    %r13,-0x38(%rbp)
  0x0000000116b40f81: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b40f89: je     0x0000000116b41006
  0x0000000116b40f8f: mov    %rsp,-0x28(%rsp)
  0x0000000116b40f94: sub    $0x80,%rsp
  0x0000000116b40f9b: mov    %rax,0x78(%rsp)
  0x0000000116b40fa0: mov    %rcx,0x70(%rsp)
  0x0000000116b40fa5: mov    %rdx,0x68(%rsp)
  0x0000000116b40faa: mov    %rbx,0x60(%rsp)
  0x0000000116b40faf: mov    %rbp,0x50(%rsp)
  0x0000000116b40fb4: mov    %rsi,0x48(%rsp)
  0x0000000116b40fb9: mov    %rdi,0x40(%rsp)
  0x0000000116b40fbe: mov    %r8,0x38(%rsp)
  0x0000000116b40fc3: mov    %r9,0x30(%rsp)
  0x0000000116b40fc8: mov    %r10,0x28(%rsp)
  0x0000000116b40fcd: mov    %r11,0x20(%rsp)
  0x0000000116b40fd2: mov    %r12,0x18(%rsp)
  0x0000000116b40fd7: mov    %r13,0x10(%rsp)
  0x0000000116b40fdc: mov    %r14,0x8(%rsp)
  0x0000000116b40fe1: mov    %r15,(%rsp)
  0x0000000116b40fe5: movabs $0x10cc2363b,%rdi
  0x0000000116b40fef: movabs $0x116b40f8f,%rsi
  0x0000000116b40ff9: mov    %rsp,%rdx
  0x0000000116b40ffc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41000: callq  0x000000010c7dd830
  0x0000000116b41005: hlt    
  0x0000000116b41006: push   %r10
  0x0000000116b41008: cmp    -0x9cfa75f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4100f: je     0x0000000116b4108c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b41015: mov    %rsp,-0x28(%rsp)
  0x0000000116b4101a: sub    $0x80,%rsp
  0x0000000116b41021: mov    %rax,0x78(%rsp)
  0x0000000116b41026: mov    %rcx,0x70(%rsp)
  0x0000000116b4102b: mov    %rdx,0x68(%rsp)
  0x0000000116b41030: mov    %rbx,0x60(%rsp)
  0x0000000116b41035: mov    %rbp,0x50(%rsp)
  0x0000000116b4103a: mov    %rsi,0x48(%rsp)
  0x0000000116b4103f: mov    %rdi,0x40(%rsp)
  0x0000000116b41044: mov    %r8,0x38(%rsp)
  0x0000000116b41049: mov    %r9,0x30(%rsp)
  0x0000000116b4104e: mov    %r10,0x28(%rsp)
  0x0000000116b41053: mov    %r11,0x20(%rsp)
  0x0000000116b41058: mov    %r12,0x18(%rsp)
  0x0000000116b4105d: mov    %r13,0x10(%rsp)
  0x0000000116b41062: mov    %r14,0x8(%rsp)
  0x0000000116b41067: mov    %r15,(%rsp)
  0x0000000116b4106b: movabs $0x10cc63f17,%rdi
  0x0000000116b41075: movabs $0x116b41015,%rsi
  0x0000000116b4107f: mov    %rsp,%rdx
  0x0000000116b41082: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41086: callq  0x000000010c7dd830
  0x0000000116b4108b: hlt    
  0x0000000116b4108c: pop    %r10
  0x0000000116b4108e: mov    %r15,%rdi
  0x0000000116b41091: mov    %rbp,0x290(%r15)
  0x0000000116b41098: mov    %rax,0x280(%r15)
  0x0000000116b4109f: test   $0xf,%esp
  0x0000000116b410a5: je     0x0000000116b410bd
  0x0000000116b410ab: sub    $0x8,%rsp
  0x0000000116b410af: callq  0x000000010c5881a0
  0x0000000116b410b4: add    $0x8,%rsp
  0x0000000116b410b8: jmpq   0x0000000116b410c2
  0x0000000116b410bd: callq  0x000000010c5881a0
  0x0000000116b410c2: push   %rax
  0x0000000116b410c3: push   %rdi
  0x0000000116b410c4: push   %rsi
  0x0000000116b410c5: push   %rdx
  0x0000000116b410c6: push   %rcx
  0x0000000116b410c7: push   %r8
  0x0000000116b410c9: push   %r9
  0x0000000116b410cb: push   %r10
  0x0000000116b410cd: mov    %rsp,%r10
  0x0000000116b410d0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b410d4: push   %r10
  0x0000000116b410d6: push   %r11
  0x0000000116b410d8: mov    $0x109,%edi
  0x0000000116b410dd: movabs $0x7ff815049fd5,%r10
  0x0000000116b410e7: callq  *%r10
  0x0000000116b410ea: pop    %r11
  0x0000000116b410ec: pop    %rsp
  0x0000000116b410ed: pop    %r10
  0x0000000116b410ef: pop    %r9
  0x0000000116b410f1: pop    %r8
  0x0000000116b410f3: pop    %rcx
  0x0000000116b410f4: pop    %rdx
  0x0000000116b410f5: pop    %rsi
  0x0000000116b410f6: pop    %rdi
  0x0000000116b410f7: cmp    %rax,%r15
  0x0000000116b410fa: je     0x0000000116b41177
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b41100: mov    %rsp,-0x28(%rsp)
  0x0000000116b41105: sub    $0x80,%rsp
  0x0000000116b4110c: mov    %rax,0x78(%rsp)
  0x0000000116b41111: mov    %rcx,0x70(%rsp)
  0x0000000116b41116: mov    %rdx,0x68(%rsp)
  0x0000000116b4111b: mov    %rbx,0x60(%rsp)
  0x0000000116b41120: mov    %rbp,0x50(%rsp)
  0x0000000116b41125: mov    %rsi,0x48(%rsp)
  0x0000000116b4112a: mov    %rdi,0x40(%rsp)
  0x0000000116b4112f: mov    %r8,0x38(%rsp)
  0x0000000116b41134: mov    %r9,0x30(%rsp)
  0x0000000116b41139: mov    %r10,0x28(%rsp)
  0x0000000116b4113e: mov    %r11,0x20(%rsp)
  0x0000000116b41143: mov    %r12,0x18(%rsp)
  0x0000000116b41148: mov    %r13,0x10(%rsp)
  0x0000000116b4114d: mov    %r14,0x8(%rsp)
  0x0000000116b41152: mov    %r15,(%rsp)
  0x0000000116b41156: movabs $0x10cc6405e,%rdi
  0x0000000116b41160: movabs $0x116b41100,%rsi
  0x0000000116b4116a: mov    %rsp,%rdx
  0x0000000116b4116d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41171: callq  0x000000010c7dd830
  0x0000000116b41176: hlt    
  0x0000000116b41177: pop    %rax
  0x0000000116b41178: movabs $0x0,%r10
  0x0000000116b41182: mov    %r10,0x280(%r15)
  0x0000000116b41189: movabs $0x0,%r10
  0x0000000116b41193: mov    %r10,0x290(%r15)
  0x0000000116b4119a: movabs $0x0,%r10
  0x0000000116b411a4: mov    %r10,0x288(%r15)
  0x0000000116b411ab: cmpq   $0x0,0x8(%r15)
  0x0000000116b411b3: je     0x0000000116b411be
  0x0000000116b411b9: jmpq   0x0000000116b30420
  0x0000000116b411be: mov    -0x38(%rbp),%r13
  0x0000000116b411c2: mov    -0x30(%rbp),%r14
  0x0000000116b411c6: retq   
  0x0000000116b411c7: mov    %rsp,-0x28(%rsp)
  0x0000000116b411cc: sub    $0x80,%rsp
  0x0000000116b411d3: mov    %rax,0x78(%rsp)
  0x0000000116b411d8: mov    %rcx,0x70(%rsp)
  0x0000000116b411dd: mov    %rdx,0x68(%rsp)
  0x0000000116b411e2: mov    %rbx,0x60(%rsp)
  0x0000000116b411e7: mov    %rbp,0x50(%rsp)
  0x0000000116b411ec: mov    %rsi,0x48(%rsp)
  0x0000000116b411f1: mov    %rdi,0x40(%rsp)
  0x0000000116b411f6: mov    %r8,0x38(%rsp)
  0x0000000116b411fb: mov    %r9,0x30(%rsp)
  0x0000000116b41200: mov    %r10,0x28(%rsp)
  0x0000000116b41205: mov    %r11,0x20(%rsp)
  0x0000000116b4120a: mov    %r12,0x18(%rsp)
  0x0000000116b4120f: mov    %r13,0x10(%rsp)
  0x0000000116b41214: mov    %r14,0x8(%rsp)
  0x0000000116b41219: mov    %r15,(%rsp)
  0x0000000116b4121d: movabs $0x10cb763be,%rdi
  0x0000000116b41227: movabs $0x116b411c7,%rsi
  0x0000000116b41231: mov    %rsp,%rdx
  0x0000000116b41234: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41238: callq  0x000000010c7dd830
  0x0000000116b4123d: hlt    
  0x0000000116b4123e: movzbl 0x2(%r13),%ebx
  0x0000000116b41243: add    $0x2,%r13
  0x0000000116b41247: movabs $0x10ce39680,%r10
  0x0000000116b41251: jmpq   *(%r10,%rbx,8)
  0x0000000116b41255: movq   $0x0,-0x10(%rbp)
  0x0000000116b4125d: mov    -0x38(%rbp),%r13
  0x0000000116b41261: mov    -0x30(%rbp),%r14
  0x0000000116b41265: cmpq   $0x0,0x8(%r15)
  0x0000000116b4126d: je     0x0000000116b41543
  0x0000000116b41273: callq  0x0000000116b4127d
  0x0000000116b41278: jmpq   0x0000000116b414cc
  0x0000000116b4127d: lea    0x8(%rsp),%rax
  0x0000000116b41282: mov    %r13,-0x38(%rbp)
  0x0000000116b41286: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4128e: je     0x0000000116b4130b
  0x0000000116b41294: mov    %rsp,-0x28(%rsp)
  0x0000000116b41299: sub    $0x80,%rsp
  0x0000000116b412a0: mov    %rax,0x78(%rsp)
  0x0000000116b412a5: mov    %rcx,0x70(%rsp)
  0x0000000116b412aa: mov    %rdx,0x68(%rsp)
  0x0000000116b412af: mov    %rbx,0x60(%rsp)
  0x0000000116b412b4: mov    %rbp,0x50(%rsp)
  0x0000000116b412b9: mov    %rsi,0x48(%rsp)
  0x0000000116b412be: mov    %rdi,0x40(%rsp)
  0x0000000116b412c3: mov    %r8,0x38(%rsp)
  0x0000000116b412c8: mov    %r9,0x30(%rsp)
  0x0000000116b412cd: mov    %r10,0x28(%rsp)
  0x0000000116b412d2: mov    %r11,0x20(%rsp)
  0x0000000116b412d7: mov    %r12,0x18(%rsp)
  0x0000000116b412dc: mov    %r13,0x10(%rsp)
  0x0000000116b412e1: mov    %r14,0x8(%rsp)
  0x0000000116b412e6: mov    %r15,(%rsp)
  0x0000000116b412ea: movabs $0x10cc2363b,%rdi
  0x0000000116b412f4: movabs $0x116b41294,%rsi
  0x0000000116b412fe: mov    %rsp,%rdx
  0x0000000116b41301: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41305: callq  0x000000010c7dd830
  0x0000000116b4130a: hlt    
  0x0000000116b4130b: push   %r10
  0x0000000116b4130d: cmp    -0x9cfaa64(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b41314: je     0x0000000116b41391
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4131a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4131f: sub    $0x80,%rsp
  0x0000000116b41326: mov    %rax,0x78(%rsp)
  0x0000000116b4132b: mov    %rcx,0x70(%rsp)
  0x0000000116b41330: mov    %rdx,0x68(%rsp)
  0x0000000116b41335: mov    %rbx,0x60(%rsp)
  0x0000000116b4133a: mov    %rbp,0x50(%rsp)
  0x0000000116b4133f: mov    %rsi,0x48(%rsp)
  0x0000000116b41344: mov    %rdi,0x40(%rsp)
  0x0000000116b41349: mov    %r8,0x38(%rsp)
  0x0000000116b4134e: mov    %r9,0x30(%rsp)
  0x0000000116b41353: mov    %r10,0x28(%rsp)
  0x0000000116b41358: mov    %r11,0x20(%rsp)
  0x0000000116b4135d: mov    %r12,0x18(%rsp)
  0x0000000116b41362: mov    %r13,0x10(%rsp)
  0x0000000116b41367: mov    %r14,0x8(%rsp)
  0x0000000116b4136c: mov    %r15,(%rsp)
  0x0000000116b41370: movabs $0x10cc63f17,%rdi
  0x0000000116b4137a: movabs $0x116b4131a,%rsi
  0x0000000116b41384: mov    %rsp,%rdx
  0x0000000116b41387: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4138b: callq  0x000000010c7dd830
  0x0000000116b41390: hlt    
  0x0000000116b41391: pop    %r10
  0x0000000116b41393: mov    %r15,%rdi
  0x0000000116b41396: mov    %rbp,0x290(%r15)
  0x0000000116b4139d: mov    %rax,0x280(%r15)
  0x0000000116b413a4: test   $0xf,%esp
  0x0000000116b413aa: je     0x0000000116b413c2
  0x0000000116b413b0: sub    $0x8,%rsp
  0x0000000116b413b4: callq  0x000000010c5881a0
  0x0000000116b413b9: add    $0x8,%rsp
  0x0000000116b413bd: jmpq   0x0000000116b413c7
  0x0000000116b413c2: callq  0x000000010c5881a0
  0x0000000116b413c7: push   %rax
  0x0000000116b413c8: push   %rdi
  0x0000000116b413c9: push   %rsi
  0x0000000116b413ca: push   %rdx
  0x0000000116b413cb: push   %rcx
  0x0000000116b413cc: push   %r8
  0x0000000116b413ce: push   %r9
  0x0000000116b413d0: push   %r10
  0x0000000116b413d2: mov    %rsp,%r10
  0x0000000116b413d5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b413d9: push   %r10
  0x0000000116b413db: push   %r11
  0x0000000116b413dd: mov    $0x109,%edi
  0x0000000116b413e2: movabs $0x7ff815049fd5,%r10
  0x0000000116b413ec: callq  *%r10
  0x0000000116b413ef: pop    %r11
  0x0000000116b413f1: pop    %rsp
  0x0000000116b413f2: pop    %r10
  0x0000000116b413f4: pop    %r9
  0x0000000116b413f6: pop    %r8
  0x0000000116b413f8: pop    %rcx
  0x0000000116b413f9: pop    %rdx
  0x0000000116b413fa: pop    %rsi
  0x0000000116b413fb: pop    %rdi
  0x0000000116b413fc: cmp    %rax,%r15
  0x0000000116b413ff: je     0x0000000116b4147c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b41405: mov    %rsp,-0x28(%rsp)
  0x0000000116b4140a: sub    $0x80,%rsp
  0x0000000116b41411: mov    %rax,0x78(%rsp)
  0x0000000116b41416: mov    %rcx,0x70(%rsp)
  0x0000000116b4141b: mov    %rdx,0x68(%rsp)
  0x0000000116b41420: mov    %rbx,0x60(%rsp)
  0x0000000116b41425: mov    %rbp,0x50(%rsp)
  0x0000000116b4142a: mov    %rsi,0x48(%rsp)
  0x0000000116b4142f: mov    %rdi,0x40(%rsp)
  0x0000000116b41434: mov    %r8,0x38(%rsp)
  0x0000000116b41439: mov    %r9,0x30(%rsp)
  0x0000000116b4143e: mov    %r10,0x28(%rsp)
  0x0000000116b41443: mov    %r11,0x20(%rsp)
  0x0000000116b41448: mov    %r12,0x18(%rsp)
  0x0000000116b4144d: mov    %r13,0x10(%rsp)
  0x0000000116b41452: mov    %r14,0x8(%rsp)
  0x0000000116b41457: mov    %r15,(%rsp)
  0x0000000116b4145b: movabs $0x10cc6405e,%rdi
  0x0000000116b41465: movabs $0x116b41405,%rsi
  0x0000000116b4146f: mov    %rsp,%rdx
  0x0000000116b41472: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41476: callq  0x000000010c7dd830
  0x0000000116b4147b: hlt    
  0x0000000116b4147c: pop    %rax
  0x0000000116b4147d: movabs $0x0,%r10
  0x0000000116b41487: mov    %r10,0x280(%r15)
  0x0000000116b4148e: movabs $0x0,%r10
  0x0000000116b41498: mov    %r10,0x290(%r15)
  0x0000000116b4149f: movabs $0x0,%r10
  0x0000000116b414a9: mov    %r10,0x288(%r15)
  0x0000000116b414b0: cmpq   $0x0,0x8(%r15)
  0x0000000116b414b8: je     0x0000000116b414c3
  0x0000000116b414be: jmpq   0x0000000116b30420
  0x0000000116b414c3: mov    -0x38(%rbp),%r13
  0x0000000116b414c7: mov    -0x30(%rbp),%r14
  0x0000000116b414cb: retq   
  0x0000000116b414cc: mov    %rsp,-0x28(%rsp)
  0x0000000116b414d1: sub    $0x80,%rsp
  0x0000000116b414d8: mov    %rax,0x78(%rsp)
  0x0000000116b414dd: mov    %rcx,0x70(%rsp)
  0x0000000116b414e2: mov    %rdx,0x68(%rsp)
  0x0000000116b414e7: mov    %rbx,0x60(%rsp)
  0x0000000116b414ec: mov    %rbp,0x50(%rsp)
  0x0000000116b414f1: mov    %rsi,0x48(%rsp)
  0x0000000116b414f6: mov    %rdi,0x40(%rsp)
  0x0000000116b414fb: mov    %r8,0x38(%rsp)
  0x0000000116b41500: mov    %r9,0x30(%rsp)
  0x0000000116b41505: mov    %r10,0x28(%rsp)
  0x0000000116b4150a: mov    %r11,0x20(%rsp)
  0x0000000116b4150f: mov    %r12,0x18(%rsp)
  0x0000000116b41514: mov    %r13,0x10(%rsp)
  0x0000000116b41519: mov    %r14,0x8(%rsp)
  0x0000000116b4151e: mov    %r15,(%rsp)
  0x0000000116b41522: movabs $0x10cb763be,%rdi
  0x0000000116b4152c: movabs $0x116b414cc,%rsi
  0x0000000116b41536: mov    %rsp,%rdx
  0x0000000116b41539: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4153d: callq  0x000000010c7dd830
  0x0000000116b41542: hlt    
  0x0000000116b41543: movzbl 0x2(%r13),%ebx
  0x0000000116b41548: add    $0x2,%r13
  0x0000000116b4154c: movabs $0x10ce39e80,%r10
  0x0000000116b41556: jmpq   *(%r10,%rbx,8)
  0x0000000116b4155a: movq   $0x0,-0x10(%rbp)
  0x0000000116b41562: mov    -0x38(%rbp),%r13
  0x0000000116b41566: mov    -0x30(%rbp),%r14
  0x0000000116b4156a: cmpq   $0x0,0x8(%r15)
  0x0000000116b41572: je     0x0000000116b41848
  0x0000000116b41578: callq  0x0000000116b41582
  0x0000000116b4157d: jmpq   0x0000000116b417d1
  0x0000000116b41582: lea    0x8(%rsp),%rax
  0x0000000116b41587: mov    %r13,-0x38(%rbp)
  0x0000000116b4158b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b41593: je     0x0000000116b41610
  0x0000000116b41599: mov    %rsp,-0x28(%rsp)
  0x0000000116b4159e: sub    $0x80,%rsp
  0x0000000116b415a5: mov    %rax,0x78(%rsp)
  0x0000000116b415aa: mov    %rcx,0x70(%rsp)
  0x0000000116b415af: mov    %rdx,0x68(%rsp)
  0x0000000116b415b4: mov    %rbx,0x60(%rsp)
  0x0000000116b415b9: mov    %rbp,0x50(%rsp)
  0x0000000116b415be: mov    %rsi,0x48(%rsp)
  0x0000000116b415c3: mov    %rdi,0x40(%rsp)
  0x0000000116b415c8: mov    %r8,0x38(%rsp)
  0x0000000116b415cd: mov    %r9,0x30(%rsp)
  0x0000000116b415d2: mov    %r10,0x28(%rsp)
  0x0000000116b415d7: mov    %r11,0x20(%rsp)
  0x0000000116b415dc: mov    %r12,0x18(%rsp)
  0x0000000116b415e1: mov    %r13,0x10(%rsp)
  0x0000000116b415e6: mov    %r14,0x8(%rsp)
  0x0000000116b415eb: mov    %r15,(%rsp)
  0x0000000116b415ef: movabs $0x10cc2363b,%rdi
  0x0000000116b415f9: movabs $0x116b41599,%rsi
  0x0000000116b41603: mov    %rsp,%rdx
  0x0000000116b41606: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4160a: callq  0x000000010c7dd830
  0x0000000116b4160f: hlt    
  0x0000000116b41610: push   %r10
  0x0000000116b41612: cmp    -0x9cfad69(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b41619: je     0x0000000116b41696
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4161f: mov    %rsp,-0x28(%rsp)
  0x0000000116b41624: sub    $0x80,%rsp
  0x0000000116b4162b: mov    %rax,0x78(%rsp)
  0x0000000116b41630: mov    %rcx,0x70(%rsp)
  0x0000000116b41635: mov    %rdx,0x68(%rsp)
  0x0000000116b4163a: mov    %rbx,0x60(%rsp)
  0x0000000116b4163f: mov    %rbp,0x50(%rsp)
  0x0000000116b41644: mov    %rsi,0x48(%rsp)
  0x0000000116b41649: mov    %rdi,0x40(%rsp)
  0x0000000116b4164e: mov    %r8,0x38(%rsp)
  0x0000000116b41653: mov    %r9,0x30(%rsp)
  0x0000000116b41658: mov    %r10,0x28(%rsp)
  0x0000000116b4165d: mov    %r11,0x20(%rsp)
  0x0000000116b41662: mov    %r12,0x18(%rsp)
  0x0000000116b41667: mov    %r13,0x10(%rsp)
  0x0000000116b4166c: mov    %r14,0x8(%rsp)
  0x0000000116b41671: mov    %r15,(%rsp)
  0x0000000116b41675: movabs $0x10cc63f17,%rdi
  0x0000000116b4167f: movabs $0x116b4161f,%rsi
  0x0000000116b41689: mov    %rsp,%rdx
  0x0000000116b4168c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41690: callq  0x000000010c7dd830
  0x0000000116b41695: hlt    
  0x0000000116b41696: pop    %r10
  0x0000000116b41698: mov    %r15,%rdi
  0x0000000116b4169b: mov    %rbp,0x290(%r15)
  0x0000000116b416a2: mov    %rax,0x280(%r15)
  0x0000000116b416a9: test   $0xf,%esp
  0x0000000116b416af: je     0x0000000116b416c7
  0x0000000116b416b5: sub    $0x8,%rsp
  0x0000000116b416b9: callq  0x000000010c5881a0
  0x0000000116b416be: add    $0x8,%rsp
  0x0000000116b416c2: jmpq   0x0000000116b416cc
  0x0000000116b416c7: callq  0x000000010c5881a0
  0x0000000116b416cc: push   %rax
  0x0000000116b416cd: push   %rdi
  0x0000000116b416ce: push   %rsi
  0x0000000116b416cf: push   %rdx
  0x0000000116b416d0: push   %rcx
  0x0000000116b416d1: push   %r8
  0x0000000116b416d3: push   %r9
  0x0000000116b416d5: push   %r10
  0x0000000116b416d7: mov    %rsp,%r10
  0x0000000116b416da: and    $0xfffffffffffffff0,%rsp
  0x0000000116b416de: push   %r10
  0x0000000116b416e0: push   %r11
  0x0000000116b416e2: mov    $0x109,%edi
  0x0000000116b416e7: movabs $0x7ff815049fd5,%r10
  0x0000000116b416f1: callq  *%r10
  0x0000000116b416f4: pop    %r11
  0x0000000116b416f6: pop    %rsp
  0x0000000116b416f7: pop    %r10
  0x0000000116b416f9: pop    %r9
  0x0000000116b416fb: pop    %r8
  0x0000000116b416fd: pop    %rcx
  0x0000000116b416fe: pop    %rdx
  0x0000000116b416ff: pop    %rsi
  0x0000000116b41700: pop    %rdi
  0x0000000116b41701: cmp    %rax,%r15
  0x0000000116b41704: je     0x0000000116b41781
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4170a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4170f: sub    $0x80,%rsp
  0x0000000116b41716: mov    %rax,0x78(%rsp)
  0x0000000116b4171b: mov    %rcx,0x70(%rsp)
  0x0000000116b41720: mov    %rdx,0x68(%rsp)
  0x0000000116b41725: mov    %rbx,0x60(%rsp)
  0x0000000116b4172a: mov    %rbp,0x50(%rsp)
  0x0000000116b4172f: mov    %rsi,0x48(%rsp)
  0x0000000116b41734: mov    %rdi,0x40(%rsp)
  0x0000000116b41739: mov    %r8,0x38(%rsp)
  0x0000000116b4173e: mov    %r9,0x30(%rsp)
  0x0000000116b41743: mov    %r10,0x28(%rsp)
  0x0000000116b41748: mov    %r11,0x20(%rsp)
  0x0000000116b4174d: mov    %r12,0x18(%rsp)
  0x0000000116b41752: mov    %r13,0x10(%rsp)
  0x0000000116b41757: mov    %r14,0x8(%rsp)
  0x0000000116b4175c: mov    %r15,(%rsp)
  0x0000000116b41760: movabs $0x10cc6405e,%rdi
  0x0000000116b4176a: movabs $0x116b4170a,%rsi
  0x0000000116b41774: mov    %rsp,%rdx
  0x0000000116b41777: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4177b: callq  0x000000010c7dd830
  0x0000000116b41780: hlt    
  0x0000000116b41781: pop    %rax
  0x0000000116b41782: movabs $0x0,%r10
  0x0000000116b4178c: mov    %r10,0x280(%r15)
  0x0000000116b41793: movabs $0x0,%r10
  0x0000000116b4179d: mov    %r10,0x290(%r15)
  0x0000000116b417a4: movabs $0x0,%r10
  0x0000000116b417ae: mov    %r10,0x288(%r15)
  0x0000000116b417b5: cmpq   $0x0,0x8(%r15)
  0x0000000116b417bd: je     0x0000000116b417c8
  0x0000000116b417c3: jmpq   0x0000000116b30420
  0x0000000116b417c8: mov    -0x38(%rbp),%r13
  0x0000000116b417cc: mov    -0x30(%rbp),%r14
  0x0000000116b417d0: retq   
  0x0000000116b417d1: mov    %rsp,-0x28(%rsp)
  0x0000000116b417d6: sub    $0x80,%rsp
  0x0000000116b417dd: mov    %rax,0x78(%rsp)
  0x0000000116b417e2: mov    %rcx,0x70(%rsp)
  0x0000000116b417e7: mov    %rdx,0x68(%rsp)
  0x0000000116b417ec: mov    %rbx,0x60(%rsp)
  0x0000000116b417f1: mov    %rbp,0x50(%rsp)
  0x0000000116b417f6: mov    %rsi,0x48(%rsp)
  0x0000000116b417fb: mov    %rdi,0x40(%rsp)
  0x0000000116b41800: mov    %r8,0x38(%rsp)
  0x0000000116b41805: mov    %r9,0x30(%rsp)
  0x0000000116b4180a: mov    %r10,0x28(%rsp)
  0x0000000116b4180f: mov    %r11,0x20(%rsp)
  0x0000000116b41814: mov    %r12,0x18(%rsp)
  0x0000000116b41819: mov    %r13,0x10(%rsp)
  0x0000000116b4181e: mov    %r14,0x8(%rsp)
  0x0000000116b41823: mov    %r15,(%rsp)
  0x0000000116b41827: movabs $0x10cb763be,%rdi
  0x0000000116b41831: movabs $0x116b417d1,%rsi
  0x0000000116b4183b: mov    %rsp,%rdx
  0x0000000116b4183e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41842: callq  0x000000010c7dd830
  0x0000000116b41847: hlt    
  0x0000000116b41848: movzbl 0x2(%r13),%ebx
  0x0000000116b4184d: add    $0x2,%r13
  0x0000000116b41851: movabs $0x10ce3a680,%r10
  0x0000000116b4185b: jmpq   *(%r10,%rbx,8)
  0x0000000116b4185f: movq   $0x0,-0x10(%rbp)
  0x0000000116b41867: mov    -0x38(%rbp),%r13
  0x0000000116b4186b: mov    -0x30(%rbp),%r14
  0x0000000116b4186f: cmpq   $0x0,0x8(%r15)
  0x0000000116b41877: je     0x0000000116b41b4d
  0x0000000116b4187d: callq  0x0000000116b41887
  0x0000000116b41882: jmpq   0x0000000116b41ad6
  0x0000000116b41887: lea    0x8(%rsp),%rax
  0x0000000116b4188c: mov    %r13,-0x38(%rbp)
  0x0000000116b41890: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b41898: je     0x0000000116b41915
  0x0000000116b4189e: mov    %rsp,-0x28(%rsp)
  0x0000000116b418a3: sub    $0x80,%rsp
  0x0000000116b418aa: mov    %rax,0x78(%rsp)
  0x0000000116b418af: mov    %rcx,0x70(%rsp)
  0x0000000116b418b4: mov    %rdx,0x68(%rsp)
  0x0000000116b418b9: mov    %rbx,0x60(%rsp)
  0x0000000116b418be: mov    %rbp,0x50(%rsp)
  0x0000000116b418c3: mov    %rsi,0x48(%rsp)
  0x0000000116b418c8: mov    %rdi,0x40(%rsp)
  0x0000000116b418cd: mov    %r8,0x38(%rsp)
  0x0000000116b418d2: mov    %r9,0x30(%rsp)
  0x0000000116b418d7: mov    %r10,0x28(%rsp)
  0x0000000116b418dc: mov    %r11,0x20(%rsp)
  0x0000000116b418e1: mov    %r12,0x18(%rsp)
  0x0000000116b418e6: mov    %r13,0x10(%rsp)
  0x0000000116b418eb: mov    %r14,0x8(%rsp)
  0x0000000116b418f0: mov    %r15,(%rsp)
  0x0000000116b418f4: movabs $0x10cc2363b,%rdi
  0x0000000116b418fe: movabs $0x116b4189e,%rsi
  0x0000000116b41908: mov    %rsp,%rdx
  0x0000000116b4190b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4190f: callq  0x000000010c7dd830
  0x0000000116b41914: hlt    
  0x0000000116b41915: push   %r10
  0x0000000116b41917: cmp    -0x9cfb06e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4191e: je     0x0000000116b4199b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b41924: mov    %rsp,-0x28(%rsp)
  0x0000000116b41929: sub    $0x80,%rsp
  0x0000000116b41930: mov    %rax,0x78(%rsp)
  0x0000000116b41935: mov    %rcx,0x70(%rsp)
  0x0000000116b4193a: mov    %rdx,0x68(%rsp)
  0x0000000116b4193f: mov    %rbx,0x60(%rsp)
  0x0000000116b41944: mov    %rbp,0x50(%rsp)
  0x0000000116b41949: mov    %rsi,0x48(%rsp)
  0x0000000116b4194e: mov    %rdi,0x40(%rsp)
  0x0000000116b41953: mov    %r8,0x38(%rsp)
  0x0000000116b41958: mov    %r9,0x30(%rsp)
  0x0000000116b4195d: mov    %r10,0x28(%rsp)
  0x0000000116b41962: mov    %r11,0x20(%rsp)
  0x0000000116b41967: mov    %r12,0x18(%rsp)
  0x0000000116b4196c: mov    %r13,0x10(%rsp)
  0x0000000116b41971: mov    %r14,0x8(%rsp)
  0x0000000116b41976: mov    %r15,(%rsp)
  0x0000000116b4197a: movabs $0x10cc63f17,%rdi
  0x0000000116b41984: movabs $0x116b41924,%rsi
  0x0000000116b4198e: mov    %rsp,%rdx
  0x0000000116b41991: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41995: callq  0x000000010c7dd830
  0x0000000116b4199a: hlt    
  0x0000000116b4199b: pop    %r10
  0x0000000116b4199d: mov    %r15,%rdi
  0x0000000116b419a0: mov    %rbp,0x290(%r15)
  0x0000000116b419a7: mov    %rax,0x280(%r15)
  0x0000000116b419ae: test   $0xf,%esp
  0x0000000116b419b4: je     0x0000000116b419cc
  0x0000000116b419ba: sub    $0x8,%rsp
  0x0000000116b419be: callq  0x000000010c5881a0
  0x0000000116b419c3: add    $0x8,%rsp
  0x0000000116b419c7: jmpq   0x0000000116b419d1
  0x0000000116b419cc: callq  0x000000010c5881a0
  0x0000000116b419d1: push   %rax
  0x0000000116b419d2: push   %rdi
  0x0000000116b419d3: push   %rsi
  0x0000000116b419d4: push   %rdx
  0x0000000116b419d5: push   %rcx
  0x0000000116b419d6: push   %r8
  0x0000000116b419d8: push   %r9
  0x0000000116b419da: push   %r10
  0x0000000116b419dc: mov    %rsp,%r10
  0x0000000116b419df: and    $0xfffffffffffffff0,%rsp
  0x0000000116b419e3: push   %r10
  0x0000000116b419e5: push   %r11
  0x0000000116b419e7: mov    $0x109,%edi
  0x0000000116b419ec: movabs $0x7ff815049fd5,%r10
  0x0000000116b419f6: callq  *%r10
  0x0000000116b419f9: pop    %r11
  0x0000000116b419fb: pop    %rsp
  0x0000000116b419fc: pop    %r10
  0x0000000116b419fe: pop    %r9
  0x0000000116b41a00: pop    %r8
  0x0000000116b41a02: pop    %rcx
  0x0000000116b41a03: pop    %rdx
  0x0000000116b41a04: pop    %rsi
  0x0000000116b41a05: pop    %rdi
  0x0000000116b41a06: cmp    %rax,%r15
  0x0000000116b41a09: je     0x0000000116b41a86
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b41a0f: mov    %rsp,-0x28(%rsp)
  0x0000000116b41a14: sub    $0x80,%rsp
  0x0000000116b41a1b: mov    %rax,0x78(%rsp)
  0x0000000116b41a20: mov    %rcx,0x70(%rsp)
  0x0000000116b41a25: mov    %rdx,0x68(%rsp)
  0x0000000116b41a2a: mov    %rbx,0x60(%rsp)
  0x0000000116b41a2f: mov    %rbp,0x50(%rsp)
  0x0000000116b41a34: mov    %rsi,0x48(%rsp)
  0x0000000116b41a39: mov    %rdi,0x40(%rsp)
  0x0000000116b41a3e: mov    %r8,0x38(%rsp)
  0x0000000116b41a43: mov    %r9,0x30(%rsp)
  0x0000000116b41a48: mov    %r10,0x28(%rsp)
  0x0000000116b41a4d: mov    %r11,0x20(%rsp)
  0x0000000116b41a52: mov    %r12,0x18(%rsp)
  0x0000000116b41a57: mov    %r13,0x10(%rsp)
  0x0000000116b41a5c: mov    %r14,0x8(%rsp)
  0x0000000116b41a61: mov    %r15,(%rsp)
  0x0000000116b41a65: movabs $0x10cc6405e,%rdi
  0x0000000116b41a6f: movabs $0x116b41a0f,%rsi
  0x0000000116b41a79: mov    %rsp,%rdx
  0x0000000116b41a7c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41a80: callq  0x000000010c7dd830
  0x0000000116b41a85: hlt    
  0x0000000116b41a86: pop    %rax
  0x0000000116b41a87: movabs $0x0,%r10
  0x0000000116b41a91: mov    %r10,0x280(%r15)
  0x0000000116b41a98: movabs $0x0,%r10
  0x0000000116b41aa2: mov    %r10,0x290(%r15)
  0x0000000116b41aa9: movabs $0x0,%r10
  0x0000000116b41ab3: mov    %r10,0x288(%r15)
  0x0000000116b41aba: cmpq   $0x0,0x8(%r15)
  0x0000000116b41ac2: je     0x0000000116b41acd
  0x0000000116b41ac8: jmpq   0x0000000116b30420
  0x0000000116b41acd: mov    -0x38(%rbp),%r13
  0x0000000116b41ad1: mov    -0x30(%rbp),%r14
  0x0000000116b41ad5: retq   
  0x0000000116b41ad6: mov    %rsp,-0x28(%rsp)
  0x0000000116b41adb: sub    $0x80,%rsp
  0x0000000116b41ae2: mov    %rax,0x78(%rsp)
  0x0000000116b41ae7: mov    %rcx,0x70(%rsp)
  0x0000000116b41aec: mov    %rdx,0x68(%rsp)
  0x0000000116b41af1: mov    %rbx,0x60(%rsp)
  0x0000000116b41af6: mov    %rbp,0x50(%rsp)
  0x0000000116b41afb: mov    %rsi,0x48(%rsp)
  0x0000000116b41b00: mov    %rdi,0x40(%rsp)
  0x0000000116b41b05: mov    %r8,0x38(%rsp)
  0x0000000116b41b0a: mov    %r9,0x30(%rsp)
  0x0000000116b41b0f: mov    %r10,0x28(%rsp)
  0x0000000116b41b14: mov    %r11,0x20(%rsp)
  0x0000000116b41b19: mov    %r12,0x18(%rsp)
  0x0000000116b41b1e: mov    %r13,0x10(%rsp)
  0x0000000116b41b23: mov    %r14,0x8(%rsp)
  0x0000000116b41b28: mov    %r15,(%rsp)
  0x0000000116b41b2c: movabs $0x10cb763be,%rdi
  0x0000000116b41b36: movabs $0x116b41ad6,%rsi
  0x0000000116b41b40: mov    %rsp,%rdx
  0x0000000116b41b43: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41b47: callq  0x000000010c7dd830
  0x0000000116b41b4c: hlt    
  0x0000000116b41b4d: movzbl 0x2(%r13),%ebx
  0x0000000116b41b52: add    $0x2,%r13
  0x0000000116b41b56: movabs $0x10ce3b680,%r10
  0x0000000116b41b60: jmpq   *(%r10,%rbx,8)
  0x0000000116b41b64: movq   $0x0,-0x10(%rbp)
  0x0000000116b41b6c: mov    -0x38(%rbp),%r13
  0x0000000116b41b70: mov    -0x30(%rbp),%r14
  0x0000000116b41b74: cmpq   $0x0,0x8(%r15)
  0x0000000116b41b7c: je     0x0000000116b41e52
  0x0000000116b41b82: callq  0x0000000116b41b8c
  0x0000000116b41b87: jmpq   0x0000000116b41ddb
  0x0000000116b41b8c: lea    0x8(%rsp),%rax
  0x0000000116b41b91: mov    %r13,-0x38(%rbp)
  0x0000000116b41b95: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b41b9d: je     0x0000000116b41c1a
  0x0000000116b41ba3: mov    %rsp,-0x28(%rsp)
  0x0000000116b41ba8: sub    $0x80,%rsp
  0x0000000116b41baf: mov    %rax,0x78(%rsp)
  0x0000000116b41bb4: mov    %rcx,0x70(%rsp)
  0x0000000116b41bb9: mov    %rdx,0x68(%rsp)
  0x0000000116b41bbe: mov    %rbx,0x60(%rsp)
  0x0000000116b41bc3: mov    %rbp,0x50(%rsp)
  0x0000000116b41bc8: mov    %rsi,0x48(%rsp)
  0x0000000116b41bcd: mov    %rdi,0x40(%rsp)
  0x0000000116b41bd2: mov    %r8,0x38(%rsp)
  0x0000000116b41bd7: mov    %r9,0x30(%rsp)
  0x0000000116b41bdc: mov    %r10,0x28(%rsp)
  0x0000000116b41be1: mov    %r11,0x20(%rsp)
  0x0000000116b41be6: mov    %r12,0x18(%rsp)
  0x0000000116b41beb: mov    %r13,0x10(%rsp)
  0x0000000116b41bf0: mov    %r14,0x8(%rsp)
  0x0000000116b41bf5: mov    %r15,(%rsp)
  0x0000000116b41bf9: movabs $0x10cc2363b,%rdi
  0x0000000116b41c03: movabs $0x116b41ba3,%rsi
  0x0000000116b41c0d: mov    %rsp,%rdx
  0x0000000116b41c10: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41c14: callq  0x000000010c7dd830
  0x0000000116b41c19: hlt    
  0x0000000116b41c1a: push   %r10
  0x0000000116b41c1c: cmp    -0x9cfb373(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b41c23: je     0x0000000116b41ca0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b41c29: mov    %rsp,-0x28(%rsp)
  0x0000000116b41c2e: sub    $0x80,%rsp
  0x0000000116b41c35: mov    %rax,0x78(%rsp)
  0x0000000116b41c3a: mov    %rcx,0x70(%rsp)
  0x0000000116b41c3f: mov    %rdx,0x68(%rsp)
  0x0000000116b41c44: mov    %rbx,0x60(%rsp)
  0x0000000116b41c49: mov    %rbp,0x50(%rsp)
  0x0000000116b41c4e: mov    %rsi,0x48(%rsp)
  0x0000000116b41c53: mov    %rdi,0x40(%rsp)
  0x0000000116b41c58: mov    %r8,0x38(%rsp)
  0x0000000116b41c5d: mov    %r9,0x30(%rsp)
  0x0000000116b41c62: mov    %r10,0x28(%rsp)
  0x0000000116b41c67: mov    %r11,0x20(%rsp)
  0x0000000116b41c6c: mov    %r12,0x18(%rsp)
  0x0000000116b41c71: mov    %r13,0x10(%rsp)
  0x0000000116b41c76: mov    %r14,0x8(%rsp)
  0x0000000116b41c7b: mov    %r15,(%rsp)
  0x0000000116b41c7f: movabs $0x10cc63f17,%rdi
  0x0000000116b41c89: movabs $0x116b41c29,%rsi
  0x0000000116b41c93: mov    %rsp,%rdx
  0x0000000116b41c96: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41c9a: callq  0x000000010c7dd830
  0x0000000116b41c9f: hlt    
  0x0000000116b41ca0: pop    %r10
  0x0000000116b41ca2: mov    %r15,%rdi
  0x0000000116b41ca5: mov    %rbp,0x290(%r15)
  0x0000000116b41cac: mov    %rax,0x280(%r15)
  0x0000000116b41cb3: test   $0xf,%esp
  0x0000000116b41cb9: je     0x0000000116b41cd1
  0x0000000116b41cbf: sub    $0x8,%rsp
  0x0000000116b41cc3: callq  0x000000010c5881a0
  0x0000000116b41cc8: add    $0x8,%rsp
  0x0000000116b41ccc: jmpq   0x0000000116b41cd6
  0x0000000116b41cd1: callq  0x000000010c5881a0
  0x0000000116b41cd6: push   %rax
  0x0000000116b41cd7: push   %rdi
  0x0000000116b41cd8: push   %rsi
  0x0000000116b41cd9: push   %rdx
  0x0000000116b41cda: push   %rcx
  0x0000000116b41cdb: push   %r8
  0x0000000116b41cdd: push   %r9
  0x0000000116b41cdf: push   %r10
  0x0000000116b41ce1: mov    %rsp,%r10
  0x0000000116b41ce4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41ce8: push   %r10
  0x0000000116b41cea: push   %r11
  0x0000000116b41cec: mov    $0x109,%edi
  0x0000000116b41cf1: movabs $0x7ff815049fd5,%r10
  0x0000000116b41cfb: callq  *%r10
  0x0000000116b41cfe: pop    %r11
  0x0000000116b41d00: pop    %rsp
  0x0000000116b41d01: pop    %r10
  0x0000000116b41d03: pop    %r9
  0x0000000116b41d05: pop    %r8
  0x0000000116b41d07: pop    %rcx
  0x0000000116b41d08: pop    %rdx
  0x0000000116b41d09: pop    %rsi
  0x0000000116b41d0a: pop    %rdi
  0x0000000116b41d0b: cmp    %rax,%r15
  0x0000000116b41d0e: je     0x0000000116b41d8b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b41d14: mov    %rsp,-0x28(%rsp)
  0x0000000116b41d19: sub    $0x80,%rsp
  0x0000000116b41d20: mov    %rax,0x78(%rsp)
  0x0000000116b41d25: mov    %rcx,0x70(%rsp)
  0x0000000116b41d2a: mov    %rdx,0x68(%rsp)
  0x0000000116b41d2f: mov    %rbx,0x60(%rsp)
  0x0000000116b41d34: mov    %rbp,0x50(%rsp)
  0x0000000116b41d39: mov    %rsi,0x48(%rsp)
  0x0000000116b41d3e: mov    %rdi,0x40(%rsp)
  0x0000000116b41d43: mov    %r8,0x38(%rsp)
  0x0000000116b41d48: mov    %r9,0x30(%rsp)
  0x0000000116b41d4d: mov    %r10,0x28(%rsp)
  0x0000000116b41d52: mov    %r11,0x20(%rsp)
  0x0000000116b41d57: mov    %r12,0x18(%rsp)
  0x0000000116b41d5c: mov    %r13,0x10(%rsp)
  0x0000000116b41d61: mov    %r14,0x8(%rsp)
  0x0000000116b41d66: mov    %r15,(%rsp)
  0x0000000116b41d6a: movabs $0x10cc6405e,%rdi
  0x0000000116b41d74: movabs $0x116b41d14,%rsi
  0x0000000116b41d7e: mov    %rsp,%rdx
  0x0000000116b41d81: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41d85: callq  0x000000010c7dd830
  0x0000000116b41d8a: hlt    
  0x0000000116b41d8b: pop    %rax
  0x0000000116b41d8c: movabs $0x0,%r10
  0x0000000116b41d96: mov    %r10,0x280(%r15)
  0x0000000116b41d9d: movabs $0x0,%r10
  0x0000000116b41da7: mov    %r10,0x290(%r15)
  0x0000000116b41dae: movabs $0x0,%r10
  0x0000000116b41db8: mov    %r10,0x288(%r15)
  0x0000000116b41dbf: cmpq   $0x0,0x8(%r15)
  0x0000000116b41dc7: je     0x0000000116b41dd2
  0x0000000116b41dcd: jmpq   0x0000000116b30420
  0x0000000116b41dd2: mov    -0x38(%rbp),%r13
  0x0000000116b41dd6: mov    -0x30(%rbp),%r14
  0x0000000116b41dda: retq   
  0x0000000116b41ddb: mov    %rsp,-0x28(%rsp)
  0x0000000116b41de0: sub    $0x80,%rsp
  0x0000000116b41de7: mov    %rax,0x78(%rsp)
  0x0000000116b41dec: mov    %rcx,0x70(%rsp)
  0x0000000116b41df1: mov    %rdx,0x68(%rsp)
  0x0000000116b41df6: mov    %rbx,0x60(%rsp)
  0x0000000116b41dfb: mov    %rbp,0x50(%rsp)
  0x0000000116b41e00: mov    %rsi,0x48(%rsp)
  0x0000000116b41e05: mov    %rdi,0x40(%rsp)
  0x0000000116b41e0a: mov    %r8,0x38(%rsp)
  0x0000000116b41e0f: mov    %r9,0x30(%rsp)
  0x0000000116b41e14: mov    %r10,0x28(%rsp)
  0x0000000116b41e19: mov    %r11,0x20(%rsp)
  0x0000000116b41e1e: mov    %r12,0x18(%rsp)
  0x0000000116b41e23: mov    %r13,0x10(%rsp)
  0x0000000116b41e28: mov    %r14,0x8(%rsp)
  0x0000000116b41e2d: mov    %r15,(%rsp)
  0x0000000116b41e31: movabs $0x10cb763be,%rdi
  0x0000000116b41e3b: movabs $0x116b41ddb,%rsi
  0x0000000116b41e45: mov    %rsp,%rdx
  0x0000000116b41e48: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41e4c: callq  0x000000010c7dd830
  0x0000000116b41e51: hlt    
  0x0000000116b41e52: movzbl 0x3(%r13),%ebx
  0x0000000116b41e57: add    $0x3,%r13
  0x0000000116b41e5b: movabs $0x10ce38e80,%r10
  0x0000000116b41e65: jmpq   *(%r10,%rbx,8)
  0x0000000116b41e69: movq   $0x0,-0x10(%rbp)
  0x0000000116b41e71: mov    -0x38(%rbp),%r13
  0x0000000116b41e75: mov    -0x30(%rbp),%r14
  0x0000000116b41e79: cmpq   $0x0,0x8(%r15)
  0x0000000116b41e81: je     0x0000000116b42157
  0x0000000116b41e87: callq  0x0000000116b41e91
  0x0000000116b41e8c: jmpq   0x0000000116b420e0
  0x0000000116b41e91: lea    0x8(%rsp),%rax
  0x0000000116b41e96: mov    %r13,-0x38(%rbp)
  0x0000000116b41e9a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b41ea2: je     0x0000000116b41f1f
  0x0000000116b41ea8: mov    %rsp,-0x28(%rsp)
  0x0000000116b41ead: sub    $0x80,%rsp
  0x0000000116b41eb4: mov    %rax,0x78(%rsp)
  0x0000000116b41eb9: mov    %rcx,0x70(%rsp)
  0x0000000116b41ebe: mov    %rdx,0x68(%rsp)
  0x0000000116b41ec3: mov    %rbx,0x60(%rsp)
  0x0000000116b41ec8: mov    %rbp,0x50(%rsp)
  0x0000000116b41ecd: mov    %rsi,0x48(%rsp)
  0x0000000116b41ed2: mov    %rdi,0x40(%rsp)
  0x0000000116b41ed7: mov    %r8,0x38(%rsp)
  0x0000000116b41edc: mov    %r9,0x30(%rsp)
  0x0000000116b41ee1: mov    %r10,0x28(%rsp)
  0x0000000116b41ee6: mov    %r11,0x20(%rsp)
  0x0000000116b41eeb: mov    %r12,0x18(%rsp)
  0x0000000116b41ef0: mov    %r13,0x10(%rsp)
  0x0000000116b41ef5: mov    %r14,0x8(%rsp)
  0x0000000116b41efa: mov    %r15,(%rsp)
  0x0000000116b41efe: movabs $0x10cc2363b,%rdi
  0x0000000116b41f08: movabs $0x116b41ea8,%rsi
  0x0000000116b41f12: mov    %rsp,%rdx
  0x0000000116b41f15: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41f19: callq  0x000000010c7dd830
  0x0000000116b41f1e: hlt    
  0x0000000116b41f1f: push   %r10
  0x0000000116b41f21: cmp    -0x9cfb678(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b41f28: je     0x0000000116b41fa5
  ;; call_VM_base: heap base corrupted?
  0x0000000116b41f2e: mov    %rsp,-0x28(%rsp)
  0x0000000116b41f33: sub    $0x80,%rsp
  0x0000000116b41f3a: mov    %rax,0x78(%rsp)
  0x0000000116b41f3f: mov    %rcx,0x70(%rsp)
  0x0000000116b41f44: mov    %rdx,0x68(%rsp)
  0x0000000116b41f49: mov    %rbx,0x60(%rsp)
  0x0000000116b41f4e: mov    %rbp,0x50(%rsp)
  0x0000000116b41f53: mov    %rsi,0x48(%rsp)
  0x0000000116b41f58: mov    %rdi,0x40(%rsp)
  0x0000000116b41f5d: mov    %r8,0x38(%rsp)
  0x0000000116b41f62: mov    %r9,0x30(%rsp)
  0x0000000116b41f67: mov    %r10,0x28(%rsp)
  0x0000000116b41f6c: mov    %r11,0x20(%rsp)
  0x0000000116b41f71: mov    %r12,0x18(%rsp)
  0x0000000116b41f76: mov    %r13,0x10(%rsp)
  0x0000000116b41f7b: mov    %r14,0x8(%rsp)
  0x0000000116b41f80: mov    %r15,(%rsp)
  0x0000000116b41f84: movabs $0x10cc63f17,%rdi
  0x0000000116b41f8e: movabs $0x116b41f2e,%rsi
  0x0000000116b41f98: mov    %rsp,%rdx
  0x0000000116b41f9b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41f9f: callq  0x000000010c7dd830
  0x0000000116b41fa4: hlt    
  0x0000000116b41fa5: pop    %r10
  0x0000000116b41fa7: mov    %r15,%rdi
  0x0000000116b41faa: mov    %rbp,0x290(%r15)
  0x0000000116b41fb1: mov    %rax,0x280(%r15)
  0x0000000116b41fb8: test   $0xf,%esp
  0x0000000116b41fbe: je     0x0000000116b41fd6
  0x0000000116b41fc4: sub    $0x8,%rsp
  0x0000000116b41fc8: callq  0x000000010c5881a0
  0x0000000116b41fcd: add    $0x8,%rsp
  0x0000000116b41fd1: jmpq   0x0000000116b41fdb
  0x0000000116b41fd6: callq  0x000000010c5881a0
  0x0000000116b41fdb: push   %rax
  0x0000000116b41fdc: push   %rdi
  0x0000000116b41fdd: push   %rsi
  0x0000000116b41fde: push   %rdx
  0x0000000116b41fdf: push   %rcx
  0x0000000116b41fe0: push   %r8
  0x0000000116b41fe2: push   %r9
  0x0000000116b41fe4: push   %r10
  0x0000000116b41fe6: mov    %rsp,%r10
  0x0000000116b41fe9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b41fed: push   %r10
  0x0000000116b41fef: push   %r11
  0x0000000116b41ff1: mov    $0x109,%edi
  0x0000000116b41ff6: movabs $0x7ff815049fd5,%r10
  0x0000000116b42000: callq  *%r10
  0x0000000116b42003: pop    %r11
  0x0000000116b42005: pop    %rsp
  0x0000000116b42006: pop    %r10
  0x0000000116b42008: pop    %r9
  0x0000000116b4200a: pop    %r8
  0x0000000116b4200c: pop    %rcx
  0x0000000116b4200d: pop    %rdx
  0x0000000116b4200e: pop    %rsi
  0x0000000116b4200f: pop    %rdi
  0x0000000116b42010: cmp    %rax,%r15
  0x0000000116b42013: je     0x0000000116b42090
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b42019: mov    %rsp,-0x28(%rsp)
  0x0000000116b4201e: sub    $0x80,%rsp
  0x0000000116b42025: mov    %rax,0x78(%rsp)
  0x0000000116b4202a: mov    %rcx,0x70(%rsp)
  0x0000000116b4202f: mov    %rdx,0x68(%rsp)
  0x0000000116b42034: mov    %rbx,0x60(%rsp)
  0x0000000116b42039: mov    %rbp,0x50(%rsp)
  0x0000000116b4203e: mov    %rsi,0x48(%rsp)
  0x0000000116b42043: mov    %rdi,0x40(%rsp)
  0x0000000116b42048: mov    %r8,0x38(%rsp)
  0x0000000116b4204d: mov    %r9,0x30(%rsp)
  0x0000000116b42052: mov    %r10,0x28(%rsp)
  0x0000000116b42057: mov    %r11,0x20(%rsp)
  0x0000000116b4205c: mov    %r12,0x18(%rsp)
  0x0000000116b42061: mov    %r13,0x10(%rsp)
  0x0000000116b42066: mov    %r14,0x8(%rsp)
  0x0000000116b4206b: mov    %r15,(%rsp)
  0x0000000116b4206f: movabs $0x10cc6405e,%rdi
  0x0000000116b42079: movabs $0x116b42019,%rsi
  0x0000000116b42083: mov    %rsp,%rdx
  0x0000000116b42086: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4208a: callq  0x000000010c7dd830
  0x0000000116b4208f: hlt    
  0x0000000116b42090: pop    %rax
  0x0000000116b42091: movabs $0x0,%r10
  0x0000000116b4209b: mov    %r10,0x280(%r15)
  0x0000000116b420a2: movabs $0x0,%r10
  0x0000000116b420ac: mov    %r10,0x290(%r15)
  0x0000000116b420b3: movabs $0x0,%r10
  0x0000000116b420bd: mov    %r10,0x288(%r15)
  0x0000000116b420c4: cmpq   $0x0,0x8(%r15)
  0x0000000116b420cc: je     0x0000000116b420d7
  0x0000000116b420d2: jmpq   0x0000000116b30420
  0x0000000116b420d7: mov    -0x38(%rbp),%r13
  0x0000000116b420db: mov    -0x30(%rbp),%r14
  0x0000000116b420df: retq   
  0x0000000116b420e0: mov    %rsp,-0x28(%rsp)
  0x0000000116b420e5: sub    $0x80,%rsp
  0x0000000116b420ec: mov    %rax,0x78(%rsp)
  0x0000000116b420f1: mov    %rcx,0x70(%rsp)
  0x0000000116b420f6: mov    %rdx,0x68(%rsp)
  0x0000000116b420fb: mov    %rbx,0x60(%rsp)
  0x0000000116b42100: mov    %rbp,0x50(%rsp)
  0x0000000116b42105: mov    %rsi,0x48(%rsp)
  0x0000000116b4210a: mov    %rdi,0x40(%rsp)
  0x0000000116b4210f: mov    %r8,0x38(%rsp)
  0x0000000116b42114: mov    %r9,0x30(%rsp)
  0x0000000116b42119: mov    %r10,0x28(%rsp)
  0x0000000116b4211e: mov    %r11,0x20(%rsp)
  0x0000000116b42123: mov    %r12,0x18(%rsp)
  0x0000000116b42128: mov    %r13,0x10(%rsp)
  0x0000000116b4212d: mov    %r14,0x8(%rsp)
  0x0000000116b42132: mov    %r15,(%rsp)
  0x0000000116b42136: movabs $0x10cb763be,%rdi
  0x0000000116b42140: movabs $0x116b420e0,%rsi
  0x0000000116b4214a: mov    %rsp,%rdx
  0x0000000116b4214d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42151: callq  0x000000010c7dd830
  0x0000000116b42156: hlt    
  0x0000000116b42157: movzbl 0x3(%r13),%ebx
  0x0000000116b4215c: add    $0x3,%r13
  0x0000000116b42160: movabs $0x10ce38e80,%r10
  0x0000000116b4216a: jmpq   *(%r10,%rbx,8)
  0x0000000116b4216e: movq   $0x0,-0x10(%rbp)
  0x0000000116b42176: mov    -0x38(%rbp),%r13
  0x0000000116b4217a: mov    -0x30(%rbp),%r14
  0x0000000116b4217e: cmpq   $0x0,0x8(%r15)
  0x0000000116b42186: je     0x0000000116b4245c
  0x0000000116b4218c: callq  0x0000000116b42196
  0x0000000116b42191: jmpq   0x0000000116b423e5
  0x0000000116b42196: lea    0x8(%rsp),%rax
  0x0000000116b4219b: mov    %r13,-0x38(%rbp)
  0x0000000116b4219f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b421a7: je     0x0000000116b42224
  0x0000000116b421ad: mov    %rsp,-0x28(%rsp)
  0x0000000116b421b2: sub    $0x80,%rsp
  0x0000000116b421b9: mov    %rax,0x78(%rsp)
  0x0000000116b421be: mov    %rcx,0x70(%rsp)
  0x0000000116b421c3: mov    %rdx,0x68(%rsp)
  0x0000000116b421c8: mov    %rbx,0x60(%rsp)
  0x0000000116b421cd: mov    %rbp,0x50(%rsp)
  0x0000000116b421d2: mov    %rsi,0x48(%rsp)
  0x0000000116b421d7: mov    %rdi,0x40(%rsp)
  0x0000000116b421dc: mov    %r8,0x38(%rsp)
  0x0000000116b421e1: mov    %r9,0x30(%rsp)
  0x0000000116b421e6: mov    %r10,0x28(%rsp)
  0x0000000116b421eb: mov    %r11,0x20(%rsp)
  0x0000000116b421f0: mov    %r12,0x18(%rsp)
  0x0000000116b421f5: mov    %r13,0x10(%rsp)
  0x0000000116b421fa: mov    %r14,0x8(%rsp)
  0x0000000116b421ff: mov    %r15,(%rsp)
  0x0000000116b42203: movabs $0x10cc2363b,%rdi
  0x0000000116b4220d: movabs $0x116b421ad,%rsi
  0x0000000116b42217: mov    %rsp,%rdx
  0x0000000116b4221a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4221e: callq  0x000000010c7dd830
  0x0000000116b42223: hlt    
  0x0000000116b42224: push   %r10
  0x0000000116b42226: cmp    -0x9cfb97d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4222d: je     0x0000000116b422aa
  ;; call_VM_base: heap base corrupted?
  0x0000000116b42233: mov    %rsp,-0x28(%rsp)
  0x0000000116b42238: sub    $0x80,%rsp
  0x0000000116b4223f: mov    %rax,0x78(%rsp)
  0x0000000116b42244: mov    %rcx,0x70(%rsp)
  0x0000000116b42249: mov    %rdx,0x68(%rsp)
  0x0000000116b4224e: mov    %rbx,0x60(%rsp)
  0x0000000116b42253: mov    %rbp,0x50(%rsp)
  0x0000000116b42258: mov    %rsi,0x48(%rsp)
  0x0000000116b4225d: mov    %rdi,0x40(%rsp)
  0x0000000116b42262: mov    %r8,0x38(%rsp)
  0x0000000116b42267: mov    %r9,0x30(%rsp)
  0x0000000116b4226c: mov    %r10,0x28(%rsp)
  0x0000000116b42271: mov    %r11,0x20(%rsp)
  0x0000000116b42276: mov    %r12,0x18(%rsp)
  0x0000000116b4227b: mov    %r13,0x10(%rsp)
  0x0000000116b42280: mov    %r14,0x8(%rsp)
  0x0000000116b42285: mov    %r15,(%rsp)
  0x0000000116b42289: movabs $0x10cc63f17,%rdi
  0x0000000116b42293: movabs $0x116b42233,%rsi
  0x0000000116b4229d: mov    %rsp,%rdx
  0x0000000116b422a0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b422a4: callq  0x000000010c7dd830
  0x0000000116b422a9: hlt    
  0x0000000116b422aa: pop    %r10
  0x0000000116b422ac: mov    %r15,%rdi
  0x0000000116b422af: mov    %rbp,0x290(%r15)
  0x0000000116b422b6: mov    %rax,0x280(%r15)
  0x0000000116b422bd: test   $0xf,%esp
  0x0000000116b422c3: je     0x0000000116b422db
  0x0000000116b422c9: sub    $0x8,%rsp
  0x0000000116b422cd: callq  0x000000010c5881a0
  0x0000000116b422d2: add    $0x8,%rsp
  0x0000000116b422d6: jmpq   0x0000000116b422e0
  0x0000000116b422db: callq  0x000000010c5881a0
  0x0000000116b422e0: push   %rax
  0x0000000116b422e1: push   %rdi
  0x0000000116b422e2: push   %rsi
  0x0000000116b422e3: push   %rdx
  0x0000000116b422e4: push   %rcx
  0x0000000116b422e5: push   %r8
  0x0000000116b422e7: push   %r9
  0x0000000116b422e9: push   %r10
  0x0000000116b422eb: mov    %rsp,%r10
  0x0000000116b422ee: and    $0xfffffffffffffff0,%rsp
  0x0000000116b422f2: push   %r10
  0x0000000116b422f4: push   %r11
  0x0000000116b422f6: mov    $0x109,%edi
  0x0000000116b422fb: movabs $0x7ff815049fd5,%r10
  0x0000000116b42305: callq  *%r10
  0x0000000116b42308: pop    %r11
  0x0000000116b4230a: pop    %rsp
  0x0000000116b4230b: pop    %r10
  0x0000000116b4230d: pop    %r9
  0x0000000116b4230f: pop    %r8
  0x0000000116b42311: pop    %rcx
  0x0000000116b42312: pop    %rdx
  0x0000000116b42313: pop    %rsi
  0x0000000116b42314: pop    %rdi
  0x0000000116b42315: cmp    %rax,%r15
  0x0000000116b42318: je     0x0000000116b42395
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4231e: mov    %rsp,-0x28(%rsp)
  0x0000000116b42323: sub    $0x80,%rsp
  0x0000000116b4232a: mov    %rax,0x78(%rsp)
  0x0000000116b4232f: mov    %rcx,0x70(%rsp)
  0x0000000116b42334: mov    %rdx,0x68(%rsp)
  0x0000000116b42339: mov    %rbx,0x60(%rsp)
  0x0000000116b4233e: mov    %rbp,0x50(%rsp)
  0x0000000116b42343: mov    %rsi,0x48(%rsp)
  0x0000000116b42348: mov    %rdi,0x40(%rsp)
  0x0000000116b4234d: mov    %r8,0x38(%rsp)
  0x0000000116b42352: mov    %r9,0x30(%rsp)
  0x0000000116b42357: mov    %r10,0x28(%rsp)
  0x0000000116b4235c: mov    %r11,0x20(%rsp)
  0x0000000116b42361: mov    %r12,0x18(%rsp)
  0x0000000116b42366: mov    %r13,0x10(%rsp)
  0x0000000116b4236b: mov    %r14,0x8(%rsp)
  0x0000000116b42370: mov    %r15,(%rsp)
  0x0000000116b42374: movabs $0x10cc6405e,%rdi
  0x0000000116b4237e: movabs $0x116b4231e,%rsi
  0x0000000116b42388: mov    %rsp,%rdx
  0x0000000116b4238b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4238f: callq  0x000000010c7dd830
  0x0000000116b42394: hlt    
  0x0000000116b42395: pop    %rax
  0x0000000116b42396: movabs $0x0,%r10
  0x0000000116b423a0: mov    %r10,0x280(%r15)
  0x0000000116b423a7: movabs $0x0,%r10
  0x0000000116b423b1: mov    %r10,0x290(%r15)
  0x0000000116b423b8: movabs $0x0,%r10
  0x0000000116b423c2: mov    %r10,0x288(%r15)
  0x0000000116b423c9: cmpq   $0x0,0x8(%r15)
  0x0000000116b423d1: je     0x0000000116b423dc
  0x0000000116b423d7: jmpq   0x0000000116b30420
  0x0000000116b423dc: mov    -0x38(%rbp),%r13
  0x0000000116b423e0: mov    -0x30(%rbp),%r14
  0x0000000116b423e4: retq   
  0x0000000116b423e5: mov    %rsp,-0x28(%rsp)
  0x0000000116b423ea: sub    $0x80,%rsp
  0x0000000116b423f1: mov    %rax,0x78(%rsp)
  0x0000000116b423f6: mov    %rcx,0x70(%rsp)
  0x0000000116b423fb: mov    %rdx,0x68(%rsp)
  0x0000000116b42400: mov    %rbx,0x60(%rsp)
  0x0000000116b42405: mov    %rbp,0x50(%rsp)
  0x0000000116b4240a: mov    %rsi,0x48(%rsp)
  0x0000000116b4240f: mov    %rdi,0x40(%rsp)
  0x0000000116b42414: mov    %r8,0x38(%rsp)
  0x0000000116b42419: mov    %r9,0x30(%rsp)
  0x0000000116b4241e: mov    %r10,0x28(%rsp)
  0x0000000116b42423: mov    %r11,0x20(%rsp)
  0x0000000116b42428: mov    %r12,0x18(%rsp)
  0x0000000116b4242d: mov    %r13,0x10(%rsp)
  0x0000000116b42432: mov    %r14,0x8(%rsp)
  0x0000000116b42437: mov    %r15,(%rsp)
  0x0000000116b4243b: movabs $0x10cb763be,%rdi
  0x0000000116b42445: movabs $0x116b423e5,%rsi
  0x0000000116b4244f: mov    %rsp,%rdx
  0x0000000116b42452: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42456: callq  0x000000010c7dd830
  0x0000000116b4245b: hlt    
  0x0000000116b4245c: movzbl 0x3(%r13),%ebx
  0x0000000116b42461: add    $0x3,%r13
  0x0000000116b42465: movabs $0x10ce38e80,%r10
  0x0000000116b4246f: jmpq   *(%r10,%rbx,8)
  0x0000000116b42473: movq   $0x0,-0x10(%rbp)
  0x0000000116b4247b: mov    -0x38(%rbp),%r13
  0x0000000116b4247f: mov    -0x30(%rbp),%r14
  0x0000000116b42483: cmpq   $0x0,0x8(%r15)
  0x0000000116b4248b: je     0x0000000116b42761
  0x0000000116b42491: callq  0x0000000116b4249b
  0x0000000116b42496: jmpq   0x0000000116b426ea
  0x0000000116b4249b: lea    0x8(%rsp),%rax
  0x0000000116b424a0: mov    %r13,-0x38(%rbp)
  0x0000000116b424a4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b424ac: je     0x0000000116b42529
  0x0000000116b424b2: mov    %rsp,-0x28(%rsp)
  0x0000000116b424b7: sub    $0x80,%rsp
  0x0000000116b424be: mov    %rax,0x78(%rsp)
  0x0000000116b424c3: mov    %rcx,0x70(%rsp)
  0x0000000116b424c8: mov    %rdx,0x68(%rsp)
  0x0000000116b424cd: mov    %rbx,0x60(%rsp)
  0x0000000116b424d2: mov    %rbp,0x50(%rsp)
  0x0000000116b424d7: mov    %rsi,0x48(%rsp)
  0x0000000116b424dc: mov    %rdi,0x40(%rsp)
  0x0000000116b424e1: mov    %r8,0x38(%rsp)
  0x0000000116b424e6: mov    %r9,0x30(%rsp)
  0x0000000116b424eb: mov    %r10,0x28(%rsp)
  0x0000000116b424f0: mov    %r11,0x20(%rsp)
  0x0000000116b424f5: mov    %r12,0x18(%rsp)
  0x0000000116b424fa: mov    %r13,0x10(%rsp)
  0x0000000116b424ff: mov    %r14,0x8(%rsp)
  0x0000000116b42504: mov    %r15,(%rsp)
  0x0000000116b42508: movabs $0x10cc2363b,%rdi
  0x0000000116b42512: movabs $0x116b424b2,%rsi
  0x0000000116b4251c: mov    %rsp,%rdx
  0x0000000116b4251f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42523: callq  0x000000010c7dd830
  0x0000000116b42528: hlt    
  0x0000000116b42529: push   %r10
  0x0000000116b4252b: cmp    -0x9cfbc82(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b42532: je     0x0000000116b425af
  ;; call_VM_base: heap base corrupted?
  0x0000000116b42538: mov    %rsp,-0x28(%rsp)
  0x0000000116b4253d: sub    $0x80,%rsp
  0x0000000116b42544: mov    %rax,0x78(%rsp)
  0x0000000116b42549: mov    %rcx,0x70(%rsp)
  0x0000000116b4254e: mov    %rdx,0x68(%rsp)
  0x0000000116b42553: mov    %rbx,0x60(%rsp)
  0x0000000116b42558: mov    %rbp,0x50(%rsp)
  0x0000000116b4255d: mov    %rsi,0x48(%rsp)
  0x0000000116b42562: mov    %rdi,0x40(%rsp)
  0x0000000116b42567: mov    %r8,0x38(%rsp)
  0x0000000116b4256c: mov    %r9,0x30(%rsp)
  0x0000000116b42571: mov    %r10,0x28(%rsp)
  0x0000000116b42576: mov    %r11,0x20(%rsp)
  0x0000000116b4257b: mov    %r12,0x18(%rsp)
  0x0000000116b42580: mov    %r13,0x10(%rsp)
  0x0000000116b42585: mov    %r14,0x8(%rsp)
  0x0000000116b4258a: mov    %r15,(%rsp)
  0x0000000116b4258e: movabs $0x10cc63f17,%rdi
  0x0000000116b42598: movabs $0x116b42538,%rsi
  0x0000000116b425a2: mov    %rsp,%rdx
  0x0000000116b425a5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b425a9: callq  0x000000010c7dd830
  0x0000000116b425ae: hlt    
  0x0000000116b425af: pop    %r10
  0x0000000116b425b1: mov    %r15,%rdi
  0x0000000116b425b4: mov    %rbp,0x290(%r15)
  0x0000000116b425bb: mov    %rax,0x280(%r15)
  0x0000000116b425c2: test   $0xf,%esp
  0x0000000116b425c8: je     0x0000000116b425e0
  0x0000000116b425ce: sub    $0x8,%rsp
  0x0000000116b425d2: callq  0x000000010c5881a0
  0x0000000116b425d7: add    $0x8,%rsp
  0x0000000116b425db: jmpq   0x0000000116b425e5
  0x0000000116b425e0: callq  0x000000010c5881a0
  0x0000000116b425e5: push   %rax
  0x0000000116b425e6: push   %rdi
  0x0000000116b425e7: push   %rsi
  0x0000000116b425e8: push   %rdx
  0x0000000116b425e9: push   %rcx
  0x0000000116b425ea: push   %r8
  0x0000000116b425ec: push   %r9
  0x0000000116b425ee: push   %r10
  0x0000000116b425f0: mov    %rsp,%r10
  0x0000000116b425f3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b425f7: push   %r10
  0x0000000116b425f9: push   %r11
  0x0000000116b425fb: mov    $0x109,%edi
  0x0000000116b42600: movabs $0x7ff815049fd5,%r10
  0x0000000116b4260a: callq  *%r10
  0x0000000116b4260d: pop    %r11
  0x0000000116b4260f: pop    %rsp
  0x0000000116b42610: pop    %r10
  0x0000000116b42612: pop    %r9
  0x0000000116b42614: pop    %r8
  0x0000000116b42616: pop    %rcx
  0x0000000116b42617: pop    %rdx
  0x0000000116b42618: pop    %rsi
  0x0000000116b42619: pop    %rdi
  0x0000000116b4261a: cmp    %rax,%r15
  0x0000000116b4261d: je     0x0000000116b4269a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b42623: mov    %rsp,-0x28(%rsp)
  0x0000000116b42628: sub    $0x80,%rsp
  0x0000000116b4262f: mov    %rax,0x78(%rsp)
  0x0000000116b42634: mov    %rcx,0x70(%rsp)
  0x0000000116b42639: mov    %rdx,0x68(%rsp)
  0x0000000116b4263e: mov    %rbx,0x60(%rsp)
  0x0000000116b42643: mov    %rbp,0x50(%rsp)
  0x0000000116b42648: mov    %rsi,0x48(%rsp)
  0x0000000116b4264d: mov    %rdi,0x40(%rsp)
  0x0000000116b42652: mov    %r8,0x38(%rsp)
  0x0000000116b42657: mov    %r9,0x30(%rsp)
  0x0000000116b4265c: mov    %r10,0x28(%rsp)
  0x0000000116b42661: mov    %r11,0x20(%rsp)
  0x0000000116b42666: mov    %r12,0x18(%rsp)
  0x0000000116b4266b: mov    %r13,0x10(%rsp)
  0x0000000116b42670: mov    %r14,0x8(%rsp)
  0x0000000116b42675: mov    %r15,(%rsp)
  0x0000000116b42679: movabs $0x10cc6405e,%rdi
  0x0000000116b42683: movabs $0x116b42623,%rsi
  0x0000000116b4268d: mov    %rsp,%rdx
  0x0000000116b42690: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42694: callq  0x000000010c7dd830
  0x0000000116b42699: hlt    
  0x0000000116b4269a: pop    %rax
  0x0000000116b4269b: movabs $0x0,%r10
  0x0000000116b426a5: mov    %r10,0x280(%r15)
  0x0000000116b426ac: movabs $0x0,%r10
  0x0000000116b426b6: mov    %r10,0x290(%r15)
  0x0000000116b426bd: movabs $0x0,%r10
  0x0000000116b426c7: mov    %r10,0x288(%r15)
  0x0000000116b426ce: cmpq   $0x0,0x8(%r15)
  0x0000000116b426d6: je     0x0000000116b426e1
  0x0000000116b426dc: jmpq   0x0000000116b30420
  0x0000000116b426e1: mov    -0x38(%rbp),%r13
  0x0000000116b426e5: mov    -0x30(%rbp),%r14
  0x0000000116b426e9: retq   
  0x0000000116b426ea: mov    %rsp,-0x28(%rsp)
  0x0000000116b426ef: sub    $0x80,%rsp
  0x0000000116b426f6: mov    %rax,0x78(%rsp)
  0x0000000116b426fb: mov    %rcx,0x70(%rsp)
  0x0000000116b42700: mov    %rdx,0x68(%rsp)
  0x0000000116b42705: mov    %rbx,0x60(%rsp)
  0x0000000116b4270a: mov    %rbp,0x50(%rsp)
  0x0000000116b4270f: mov    %rsi,0x48(%rsp)
  0x0000000116b42714: mov    %rdi,0x40(%rsp)
  0x0000000116b42719: mov    %r8,0x38(%rsp)
  0x0000000116b4271e: mov    %r9,0x30(%rsp)
  0x0000000116b42723: mov    %r10,0x28(%rsp)
  0x0000000116b42728: mov    %r11,0x20(%rsp)
  0x0000000116b4272d: mov    %r12,0x18(%rsp)
  0x0000000116b42732: mov    %r13,0x10(%rsp)
  0x0000000116b42737: mov    %r14,0x8(%rsp)
  0x0000000116b4273c: mov    %r15,(%rsp)
  0x0000000116b42740: movabs $0x10cb763be,%rdi
  0x0000000116b4274a: movabs $0x116b426ea,%rsi
  0x0000000116b42754: mov    %rsp,%rdx
  0x0000000116b42757: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4275b: callq  0x000000010c7dd830
  0x0000000116b42760: hlt    
  0x0000000116b42761: movzbl 0x3(%r13),%ebx
  0x0000000116b42766: add    $0x3,%r13
  0x0000000116b4276a: movabs $0x10ce38e80,%r10
  0x0000000116b42774: jmpq   *(%r10,%rbx,8)
  0x0000000116b42778: movq   $0x0,-0x10(%rbp)
  0x0000000116b42780: mov    -0x38(%rbp),%r13
  0x0000000116b42784: mov    -0x30(%rbp),%r14
  0x0000000116b42788: cmpq   $0x0,0x8(%r15)
  0x0000000116b42790: je     0x0000000116b42a66
  0x0000000116b42796: callq  0x0000000116b427a0
  0x0000000116b4279b: jmpq   0x0000000116b429ef
  0x0000000116b427a0: lea    0x8(%rsp),%rax
  0x0000000116b427a5: mov    %r13,-0x38(%rbp)
  0x0000000116b427a9: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b427b1: je     0x0000000116b4282e
  0x0000000116b427b7: mov    %rsp,-0x28(%rsp)
  0x0000000116b427bc: sub    $0x80,%rsp
  0x0000000116b427c3: mov    %rax,0x78(%rsp)
  0x0000000116b427c8: mov    %rcx,0x70(%rsp)
  0x0000000116b427cd: mov    %rdx,0x68(%rsp)
  0x0000000116b427d2: mov    %rbx,0x60(%rsp)
  0x0000000116b427d7: mov    %rbp,0x50(%rsp)
  0x0000000116b427dc: mov    %rsi,0x48(%rsp)
  0x0000000116b427e1: mov    %rdi,0x40(%rsp)
  0x0000000116b427e6: mov    %r8,0x38(%rsp)
  0x0000000116b427eb: mov    %r9,0x30(%rsp)
  0x0000000116b427f0: mov    %r10,0x28(%rsp)
  0x0000000116b427f5: mov    %r11,0x20(%rsp)
  0x0000000116b427fa: mov    %r12,0x18(%rsp)
  0x0000000116b427ff: mov    %r13,0x10(%rsp)
  0x0000000116b42804: mov    %r14,0x8(%rsp)
  0x0000000116b42809: mov    %r15,(%rsp)
  0x0000000116b4280d: movabs $0x10cc2363b,%rdi
  0x0000000116b42817: movabs $0x116b427b7,%rsi
  0x0000000116b42821: mov    %rsp,%rdx
  0x0000000116b42824: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42828: callq  0x000000010c7dd830
  0x0000000116b4282d: hlt    
  0x0000000116b4282e: push   %r10
  0x0000000116b42830: cmp    -0x9cfbf87(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b42837: je     0x0000000116b428b4
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4283d: mov    %rsp,-0x28(%rsp)
  0x0000000116b42842: sub    $0x80,%rsp
  0x0000000116b42849: mov    %rax,0x78(%rsp)
  0x0000000116b4284e: mov    %rcx,0x70(%rsp)
  0x0000000116b42853: mov    %rdx,0x68(%rsp)
  0x0000000116b42858: mov    %rbx,0x60(%rsp)
  0x0000000116b4285d: mov    %rbp,0x50(%rsp)
  0x0000000116b42862: mov    %rsi,0x48(%rsp)
  0x0000000116b42867: mov    %rdi,0x40(%rsp)
  0x0000000116b4286c: mov    %r8,0x38(%rsp)
  0x0000000116b42871: mov    %r9,0x30(%rsp)
  0x0000000116b42876: mov    %r10,0x28(%rsp)
  0x0000000116b4287b: mov    %r11,0x20(%rsp)
  0x0000000116b42880: mov    %r12,0x18(%rsp)
  0x0000000116b42885: mov    %r13,0x10(%rsp)
  0x0000000116b4288a: mov    %r14,0x8(%rsp)
  0x0000000116b4288f: mov    %r15,(%rsp)
  0x0000000116b42893: movabs $0x10cc63f17,%rdi
  0x0000000116b4289d: movabs $0x116b4283d,%rsi
  0x0000000116b428a7: mov    %rsp,%rdx
  0x0000000116b428aa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b428ae: callq  0x000000010c7dd830
  0x0000000116b428b3: hlt    
  0x0000000116b428b4: pop    %r10
  0x0000000116b428b6: mov    %r15,%rdi
  0x0000000116b428b9: mov    %rbp,0x290(%r15)
  0x0000000116b428c0: mov    %rax,0x280(%r15)
  0x0000000116b428c7: test   $0xf,%esp
  0x0000000116b428cd: je     0x0000000116b428e5
  0x0000000116b428d3: sub    $0x8,%rsp
  0x0000000116b428d7: callq  0x000000010c5881a0
  0x0000000116b428dc: add    $0x8,%rsp
  0x0000000116b428e0: jmpq   0x0000000116b428ea
  0x0000000116b428e5: callq  0x000000010c5881a0
  0x0000000116b428ea: push   %rax
  0x0000000116b428eb: push   %rdi
  0x0000000116b428ec: push   %rsi
  0x0000000116b428ed: push   %rdx
  0x0000000116b428ee: push   %rcx
  0x0000000116b428ef: push   %r8
  0x0000000116b428f1: push   %r9
  0x0000000116b428f3: push   %r10
  0x0000000116b428f5: mov    %rsp,%r10
  0x0000000116b428f8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b428fc: push   %r10
  0x0000000116b428fe: push   %r11
  0x0000000116b42900: mov    $0x109,%edi
  0x0000000116b42905: movabs $0x7ff815049fd5,%r10
  0x0000000116b4290f: callq  *%r10
  0x0000000116b42912: pop    %r11
  0x0000000116b42914: pop    %rsp
  0x0000000116b42915: pop    %r10
  0x0000000116b42917: pop    %r9
  0x0000000116b42919: pop    %r8
  0x0000000116b4291b: pop    %rcx
  0x0000000116b4291c: pop    %rdx
  0x0000000116b4291d: pop    %rsi
  0x0000000116b4291e: pop    %rdi
  0x0000000116b4291f: cmp    %rax,%r15
  0x0000000116b42922: je     0x0000000116b4299f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b42928: mov    %rsp,-0x28(%rsp)
  0x0000000116b4292d: sub    $0x80,%rsp
  0x0000000116b42934: mov    %rax,0x78(%rsp)
  0x0000000116b42939: mov    %rcx,0x70(%rsp)
  0x0000000116b4293e: mov    %rdx,0x68(%rsp)
  0x0000000116b42943: mov    %rbx,0x60(%rsp)
  0x0000000116b42948: mov    %rbp,0x50(%rsp)
  0x0000000116b4294d: mov    %rsi,0x48(%rsp)
  0x0000000116b42952: mov    %rdi,0x40(%rsp)
  0x0000000116b42957: mov    %r8,0x38(%rsp)
  0x0000000116b4295c: mov    %r9,0x30(%rsp)
  0x0000000116b42961: mov    %r10,0x28(%rsp)
  0x0000000116b42966: mov    %r11,0x20(%rsp)
  0x0000000116b4296b: mov    %r12,0x18(%rsp)
  0x0000000116b42970: mov    %r13,0x10(%rsp)
  0x0000000116b42975: mov    %r14,0x8(%rsp)
  0x0000000116b4297a: mov    %r15,(%rsp)
  0x0000000116b4297e: movabs $0x10cc6405e,%rdi
  0x0000000116b42988: movabs $0x116b42928,%rsi
  0x0000000116b42992: mov    %rsp,%rdx
  0x0000000116b42995: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42999: callq  0x000000010c7dd830
  0x0000000116b4299e: hlt    
  0x0000000116b4299f: pop    %rax
  0x0000000116b429a0: movabs $0x0,%r10
  0x0000000116b429aa: mov    %r10,0x280(%r15)
  0x0000000116b429b1: movabs $0x0,%r10
  0x0000000116b429bb: mov    %r10,0x290(%r15)
  0x0000000116b429c2: movabs $0x0,%r10
  0x0000000116b429cc: mov    %r10,0x288(%r15)
  0x0000000116b429d3: cmpq   $0x0,0x8(%r15)
  0x0000000116b429db: je     0x0000000116b429e6
  0x0000000116b429e1: jmpq   0x0000000116b30420
  0x0000000116b429e6: mov    -0x38(%rbp),%r13
  0x0000000116b429ea: mov    -0x30(%rbp),%r14
  0x0000000116b429ee: retq   
  0x0000000116b429ef: mov    %rsp,-0x28(%rsp)
  0x0000000116b429f4: sub    $0x80,%rsp
  0x0000000116b429fb: mov    %rax,0x78(%rsp)
  0x0000000116b42a00: mov    %rcx,0x70(%rsp)
  0x0000000116b42a05: mov    %rdx,0x68(%rsp)
  0x0000000116b42a0a: mov    %rbx,0x60(%rsp)
  0x0000000116b42a0f: mov    %rbp,0x50(%rsp)
  0x0000000116b42a14: mov    %rsi,0x48(%rsp)
  0x0000000116b42a19: mov    %rdi,0x40(%rsp)
  0x0000000116b42a1e: mov    %r8,0x38(%rsp)
  0x0000000116b42a23: mov    %r9,0x30(%rsp)
  0x0000000116b42a28: mov    %r10,0x28(%rsp)
  0x0000000116b42a2d: mov    %r11,0x20(%rsp)
  0x0000000116b42a32: mov    %r12,0x18(%rsp)
  0x0000000116b42a37: mov    %r13,0x10(%rsp)
  0x0000000116b42a3c: mov    %r14,0x8(%rsp)
  0x0000000116b42a41: mov    %r15,(%rsp)
  0x0000000116b42a45: movabs $0x10cb763be,%rdi
  0x0000000116b42a4f: movabs $0x116b429ef,%rsi
  0x0000000116b42a59: mov    %rsp,%rdx
  0x0000000116b42a5c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42a60: callq  0x000000010c7dd830
  0x0000000116b42a65: hlt    
  0x0000000116b42a66: movzbl 0x3(%r13),%ebx
  0x0000000116b42a6b: add    $0x3,%r13
  0x0000000116b42a6f: movabs $0x10ce3ae80,%r10
  0x0000000116b42a79: jmpq   *(%r10,%rbx,8)
  0x0000000116b42a7d: movq   $0x0,-0x10(%rbp)
  0x0000000116b42a85: mov    -0x38(%rbp),%r13
  0x0000000116b42a89: mov    -0x30(%rbp),%r14
  0x0000000116b42a8d: cmpq   $0x0,0x8(%r15)
  0x0000000116b42a95: je     0x0000000116b42d6b
  0x0000000116b42a9b: callq  0x0000000116b42aa5
  0x0000000116b42aa0: jmpq   0x0000000116b42cf4
  0x0000000116b42aa5: lea    0x8(%rsp),%rax
  0x0000000116b42aaa: mov    %r13,-0x38(%rbp)
  0x0000000116b42aae: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b42ab6: je     0x0000000116b42b33
  0x0000000116b42abc: mov    %rsp,-0x28(%rsp)
  0x0000000116b42ac1: sub    $0x80,%rsp
  0x0000000116b42ac8: mov    %rax,0x78(%rsp)
  0x0000000116b42acd: mov    %rcx,0x70(%rsp)
  0x0000000116b42ad2: mov    %rdx,0x68(%rsp)
  0x0000000116b42ad7: mov    %rbx,0x60(%rsp)
  0x0000000116b42adc: mov    %rbp,0x50(%rsp)
  0x0000000116b42ae1: mov    %rsi,0x48(%rsp)
  0x0000000116b42ae6: mov    %rdi,0x40(%rsp)
  0x0000000116b42aeb: mov    %r8,0x38(%rsp)
  0x0000000116b42af0: mov    %r9,0x30(%rsp)
  0x0000000116b42af5: mov    %r10,0x28(%rsp)
  0x0000000116b42afa: mov    %r11,0x20(%rsp)
  0x0000000116b42aff: mov    %r12,0x18(%rsp)
  0x0000000116b42b04: mov    %r13,0x10(%rsp)
  0x0000000116b42b09: mov    %r14,0x8(%rsp)
  0x0000000116b42b0e: mov    %r15,(%rsp)
  0x0000000116b42b12: movabs $0x10cc2363b,%rdi
  0x0000000116b42b1c: movabs $0x116b42abc,%rsi
  0x0000000116b42b26: mov    %rsp,%rdx
  0x0000000116b42b29: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42b2d: callq  0x000000010c7dd830
  0x0000000116b42b32: hlt    
  0x0000000116b42b33: push   %r10
  0x0000000116b42b35: cmp    -0x9cfc28c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b42b3c: je     0x0000000116b42bb9
  ;; call_VM_base: heap base corrupted?
  0x0000000116b42b42: mov    %rsp,-0x28(%rsp)
  0x0000000116b42b47: sub    $0x80,%rsp
  0x0000000116b42b4e: mov    %rax,0x78(%rsp)
  0x0000000116b42b53: mov    %rcx,0x70(%rsp)
  0x0000000116b42b58: mov    %rdx,0x68(%rsp)
  0x0000000116b42b5d: mov    %rbx,0x60(%rsp)
  0x0000000116b42b62: mov    %rbp,0x50(%rsp)
  0x0000000116b42b67: mov    %rsi,0x48(%rsp)
  0x0000000116b42b6c: mov    %rdi,0x40(%rsp)
  0x0000000116b42b71: mov    %r8,0x38(%rsp)
  0x0000000116b42b76: mov    %r9,0x30(%rsp)
  0x0000000116b42b7b: mov    %r10,0x28(%rsp)
  0x0000000116b42b80: mov    %r11,0x20(%rsp)
  0x0000000116b42b85: mov    %r12,0x18(%rsp)
  0x0000000116b42b8a: mov    %r13,0x10(%rsp)
  0x0000000116b42b8f: mov    %r14,0x8(%rsp)
  0x0000000116b42b94: mov    %r15,(%rsp)
  0x0000000116b42b98: movabs $0x10cc63f17,%rdi
  0x0000000116b42ba2: movabs $0x116b42b42,%rsi
  0x0000000116b42bac: mov    %rsp,%rdx
  0x0000000116b42baf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42bb3: callq  0x000000010c7dd830
  0x0000000116b42bb8: hlt    
  0x0000000116b42bb9: pop    %r10
  0x0000000116b42bbb: mov    %r15,%rdi
  0x0000000116b42bbe: mov    %rbp,0x290(%r15)
  0x0000000116b42bc5: mov    %rax,0x280(%r15)
  0x0000000116b42bcc: test   $0xf,%esp
  0x0000000116b42bd2: je     0x0000000116b42bea
  0x0000000116b42bd8: sub    $0x8,%rsp
  0x0000000116b42bdc: callq  0x000000010c5881a0
  0x0000000116b42be1: add    $0x8,%rsp
  0x0000000116b42be5: jmpq   0x0000000116b42bef
  0x0000000116b42bea: callq  0x000000010c5881a0
  0x0000000116b42bef: push   %rax
  0x0000000116b42bf0: push   %rdi
  0x0000000116b42bf1: push   %rsi
  0x0000000116b42bf2: push   %rdx
  0x0000000116b42bf3: push   %rcx
  0x0000000116b42bf4: push   %r8
  0x0000000116b42bf6: push   %r9
  0x0000000116b42bf8: push   %r10
  0x0000000116b42bfa: mov    %rsp,%r10
  0x0000000116b42bfd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42c01: push   %r10
  0x0000000116b42c03: push   %r11
  0x0000000116b42c05: mov    $0x109,%edi
  0x0000000116b42c0a: movabs $0x7ff815049fd5,%r10
  0x0000000116b42c14: callq  *%r10
  0x0000000116b42c17: pop    %r11
  0x0000000116b42c19: pop    %rsp
  0x0000000116b42c1a: pop    %r10
  0x0000000116b42c1c: pop    %r9
  0x0000000116b42c1e: pop    %r8
  0x0000000116b42c20: pop    %rcx
  0x0000000116b42c21: pop    %rdx
  0x0000000116b42c22: pop    %rsi
  0x0000000116b42c23: pop    %rdi
  0x0000000116b42c24: cmp    %rax,%r15
  0x0000000116b42c27: je     0x0000000116b42ca4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b42c2d: mov    %rsp,-0x28(%rsp)
  0x0000000116b42c32: sub    $0x80,%rsp
  0x0000000116b42c39: mov    %rax,0x78(%rsp)
  0x0000000116b42c3e: mov    %rcx,0x70(%rsp)
  0x0000000116b42c43: mov    %rdx,0x68(%rsp)
  0x0000000116b42c48: mov    %rbx,0x60(%rsp)
  0x0000000116b42c4d: mov    %rbp,0x50(%rsp)
  0x0000000116b42c52: mov    %rsi,0x48(%rsp)
  0x0000000116b42c57: mov    %rdi,0x40(%rsp)
  0x0000000116b42c5c: mov    %r8,0x38(%rsp)
  0x0000000116b42c61: mov    %r9,0x30(%rsp)
  0x0000000116b42c66: mov    %r10,0x28(%rsp)
  0x0000000116b42c6b: mov    %r11,0x20(%rsp)
  0x0000000116b42c70: mov    %r12,0x18(%rsp)
  0x0000000116b42c75: mov    %r13,0x10(%rsp)
  0x0000000116b42c7a: mov    %r14,0x8(%rsp)
  0x0000000116b42c7f: mov    %r15,(%rsp)
  0x0000000116b42c83: movabs $0x10cc6405e,%rdi
  0x0000000116b42c8d: movabs $0x116b42c2d,%rsi
  0x0000000116b42c97: mov    %rsp,%rdx
  0x0000000116b42c9a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42c9e: callq  0x000000010c7dd830
  0x0000000116b42ca3: hlt    
  0x0000000116b42ca4: pop    %rax
  0x0000000116b42ca5: movabs $0x0,%r10
  0x0000000116b42caf: mov    %r10,0x280(%r15)
  0x0000000116b42cb6: movabs $0x0,%r10
  0x0000000116b42cc0: mov    %r10,0x290(%r15)
  0x0000000116b42cc7: movabs $0x0,%r10
  0x0000000116b42cd1: mov    %r10,0x288(%r15)
  0x0000000116b42cd8: cmpq   $0x0,0x8(%r15)
  0x0000000116b42ce0: je     0x0000000116b42ceb
  0x0000000116b42ce6: jmpq   0x0000000116b30420
  0x0000000116b42ceb: mov    -0x38(%rbp),%r13
  0x0000000116b42cef: mov    -0x30(%rbp),%r14
  0x0000000116b42cf3: retq   
  0x0000000116b42cf4: mov    %rsp,-0x28(%rsp)
  0x0000000116b42cf9: sub    $0x80,%rsp
  0x0000000116b42d00: mov    %rax,0x78(%rsp)
  0x0000000116b42d05: mov    %rcx,0x70(%rsp)
  0x0000000116b42d0a: mov    %rdx,0x68(%rsp)
  0x0000000116b42d0f: mov    %rbx,0x60(%rsp)
  0x0000000116b42d14: mov    %rbp,0x50(%rsp)
  0x0000000116b42d19: mov    %rsi,0x48(%rsp)
  0x0000000116b42d1e: mov    %rdi,0x40(%rsp)
  0x0000000116b42d23: mov    %r8,0x38(%rsp)
  0x0000000116b42d28: mov    %r9,0x30(%rsp)
  0x0000000116b42d2d: mov    %r10,0x28(%rsp)
  0x0000000116b42d32: mov    %r11,0x20(%rsp)
  0x0000000116b42d37: mov    %r12,0x18(%rsp)
  0x0000000116b42d3c: mov    %r13,0x10(%rsp)
  0x0000000116b42d41: mov    %r14,0x8(%rsp)
  0x0000000116b42d46: mov    %r15,(%rsp)
  0x0000000116b42d4a: movabs $0x10cb763be,%rdi
  0x0000000116b42d54: movabs $0x116b42cf4,%rsi
  0x0000000116b42d5e: mov    %rsp,%rdx
  0x0000000116b42d61: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42d65: callq  0x000000010c7dd830
  0x0000000116b42d6a: hlt    
  0x0000000116b42d6b: movzbl 0x3(%r13),%ebx
  0x0000000116b42d70: add    $0x3,%r13
  0x0000000116b42d74: movabs $0x10ce38e80,%r10
  0x0000000116b42d7e: jmpq   *(%r10,%rbx,8)
  0x0000000116b42d82: movq   $0x0,-0x10(%rbp)
  0x0000000116b42d8a: mov    -0x38(%rbp),%r13
  0x0000000116b42d8e: mov    -0x30(%rbp),%r14
  0x0000000116b42d92: cmpq   $0x0,0x8(%r15)
  0x0000000116b42d9a: je     0x0000000116b43070
  0x0000000116b42da0: callq  0x0000000116b42daa
  0x0000000116b42da5: jmpq   0x0000000116b42ff9
  0x0000000116b42daa: lea    0x8(%rsp),%rax
  0x0000000116b42daf: mov    %r13,-0x38(%rbp)
  0x0000000116b42db3: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b42dbb: je     0x0000000116b42e38
  0x0000000116b42dc1: mov    %rsp,-0x28(%rsp)
  0x0000000116b42dc6: sub    $0x80,%rsp
  0x0000000116b42dcd: mov    %rax,0x78(%rsp)
  0x0000000116b42dd2: mov    %rcx,0x70(%rsp)
  0x0000000116b42dd7: mov    %rdx,0x68(%rsp)
  0x0000000116b42ddc: mov    %rbx,0x60(%rsp)
  0x0000000116b42de1: mov    %rbp,0x50(%rsp)
  0x0000000116b42de6: mov    %rsi,0x48(%rsp)
  0x0000000116b42deb: mov    %rdi,0x40(%rsp)
  0x0000000116b42df0: mov    %r8,0x38(%rsp)
  0x0000000116b42df5: mov    %r9,0x30(%rsp)
  0x0000000116b42dfa: mov    %r10,0x28(%rsp)
  0x0000000116b42dff: mov    %r11,0x20(%rsp)
  0x0000000116b42e04: mov    %r12,0x18(%rsp)
  0x0000000116b42e09: mov    %r13,0x10(%rsp)
  0x0000000116b42e0e: mov    %r14,0x8(%rsp)
  0x0000000116b42e13: mov    %r15,(%rsp)
  0x0000000116b42e17: movabs $0x10cc2363b,%rdi
  0x0000000116b42e21: movabs $0x116b42dc1,%rsi
  0x0000000116b42e2b: mov    %rsp,%rdx
  0x0000000116b42e2e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42e32: callq  0x000000010c7dd830
  0x0000000116b42e37: hlt    
  0x0000000116b42e38: push   %r10
  0x0000000116b42e3a: cmp    -0x9cfc591(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b42e41: je     0x0000000116b42ebe
  ;; call_VM_base: heap base corrupted?
  0x0000000116b42e47: mov    %rsp,-0x28(%rsp)
  0x0000000116b42e4c: sub    $0x80,%rsp
  0x0000000116b42e53: mov    %rax,0x78(%rsp)
  0x0000000116b42e58: mov    %rcx,0x70(%rsp)
  0x0000000116b42e5d: mov    %rdx,0x68(%rsp)
  0x0000000116b42e62: mov    %rbx,0x60(%rsp)
  0x0000000116b42e67: mov    %rbp,0x50(%rsp)
  0x0000000116b42e6c: mov    %rsi,0x48(%rsp)
  0x0000000116b42e71: mov    %rdi,0x40(%rsp)
  0x0000000116b42e76: mov    %r8,0x38(%rsp)
  0x0000000116b42e7b: mov    %r9,0x30(%rsp)
  0x0000000116b42e80: mov    %r10,0x28(%rsp)
  0x0000000116b42e85: mov    %r11,0x20(%rsp)
  0x0000000116b42e8a: mov    %r12,0x18(%rsp)
  0x0000000116b42e8f: mov    %r13,0x10(%rsp)
  0x0000000116b42e94: mov    %r14,0x8(%rsp)
  0x0000000116b42e99: mov    %r15,(%rsp)
  0x0000000116b42e9d: movabs $0x10cc63f17,%rdi
  0x0000000116b42ea7: movabs $0x116b42e47,%rsi
  0x0000000116b42eb1: mov    %rsp,%rdx
  0x0000000116b42eb4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42eb8: callq  0x000000010c7dd830
  0x0000000116b42ebd: hlt    
  0x0000000116b42ebe: pop    %r10
  0x0000000116b42ec0: mov    %r15,%rdi
  0x0000000116b42ec3: mov    %rbp,0x290(%r15)
  0x0000000116b42eca: mov    %rax,0x280(%r15)
  0x0000000116b42ed1: test   $0xf,%esp
  0x0000000116b42ed7: je     0x0000000116b42eef
  0x0000000116b42edd: sub    $0x8,%rsp
  0x0000000116b42ee1: callq  0x000000010c5881a0
  0x0000000116b42ee6: add    $0x8,%rsp
  0x0000000116b42eea: jmpq   0x0000000116b42ef4
  0x0000000116b42eef: callq  0x000000010c5881a0
  0x0000000116b42ef4: push   %rax
  0x0000000116b42ef5: push   %rdi
  0x0000000116b42ef6: push   %rsi
  0x0000000116b42ef7: push   %rdx
  0x0000000116b42ef8: push   %rcx
  0x0000000116b42ef9: push   %r8
  0x0000000116b42efb: push   %r9
  0x0000000116b42efd: push   %r10
  0x0000000116b42eff: mov    %rsp,%r10
  0x0000000116b42f02: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42f06: push   %r10
  0x0000000116b42f08: push   %r11
  0x0000000116b42f0a: mov    $0x109,%edi
  0x0000000116b42f0f: movabs $0x7ff815049fd5,%r10
  0x0000000116b42f19: callq  *%r10
  0x0000000116b42f1c: pop    %r11
  0x0000000116b42f1e: pop    %rsp
  0x0000000116b42f1f: pop    %r10
  0x0000000116b42f21: pop    %r9
  0x0000000116b42f23: pop    %r8
  0x0000000116b42f25: pop    %rcx
  0x0000000116b42f26: pop    %rdx
  0x0000000116b42f27: pop    %rsi
  0x0000000116b42f28: pop    %rdi
  0x0000000116b42f29: cmp    %rax,%r15
  0x0000000116b42f2c: je     0x0000000116b42fa9
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b42f32: mov    %rsp,-0x28(%rsp)
  0x0000000116b42f37: sub    $0x80,%rsp
  0x0000000116b42f3e: mov    %rax,0x78(%rsp)
  0x0000000116b42f43: mov    %rcx,0x70(%rsp)
  0x0000000116b42f48: mov    %rdx,0x68(%rsp)
  0x0000000116b42f4d: mov    %rbx,0x60(%rsp)
  0x0000000116b42f52: mov    %rbp,0x50(%rsp)
  0x0000000116b42f57: mov    %rsi,0x48(%rsp)
  0x0000000116b42f5c: mov    %rdi,0x40(%rsp)
  0x0000000116b42f61: mov    %r8,0x38(%rsp)
  0x0000000116b42f66: mov    %r9,0x30(%rsp)
  0x0000000116b42f6b: mov    %r10,0x28(%rsp)
  0x0000000116b42f70: mov    %r11,0x20(%rsp)
  0x0000000116b42f75: mov    %r12,0x18(%rsp)
  0x0000000116b42f7a: mov    %r13,0x10(%rsp)
  0x0000000116b42f7f: mov    %r14,0x8(%rsp)
  0x0000000116b42f84: mov    %r15,(%rsp)
  0x0000000116b42f88: movabs $0x10cc6405e,%rdi
  0x0000000116b42f92: movabs $0x116b42f32,%rsi
  0x0000000116b42f9c: mov    %rsp,%rdx
  0x0000000116b42f9f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b42fa3: callq  0x000000010c7dd830
  0x0000000116b42fa8: hlt    
  0x0000000116b42fa9: pop    %rax
  0x0000000116b42faa: movabs $0x0,%r10
  0x0000000116b42fb4: mov    %r10,0x280(%r15)
  0x0000000116b42fbb: movabs $0x0,%r10
  0x0000000116b42fc5: mov    %r10,0x290(%r15)
  0x0000000116b42fcc: movabs $0x0,%r10
  0x0000000116b42fd6: mov    %r10,0x288(%r15)
  0x0000000116b42fdd: cmpq   $0x0,0x8(%r15)
  0x0000000116b42fe5: je     0x0000000116b42ff0
  0x0000000116b42feb: jmpq   0x0000000116b30420
  0x0000000116b42ff0: mov    -0x38(%rbp),%r13
  0x0000000116b42ff4: mov    -0x30(%rbp),%r14
  0x0000000116b42ff8: retq   
  0x0000000116b42ff9: mov    %rsp,-0x28(%rsp)
  0x0000000116b42ffe: sub    $0x80,%rsp
  0x0000000116b43005: mov    %rax,0x78(%rsp)
  0x0000000116b4300a: mov    %rcx,0x70(%rsp)
  0x0000000116b4300f: mov    %rdx,0x68(%rsp)
  0x0000000116b43014: mov    %rbx,0x60(%rsp)
  0x0000000116b43019: mov    %rbp,0x50(%rsp)
  0x0000000116b4301e: mov    %rsi,0x48(%rsp)
  0x0000000116b43023: mov    %rdi,0x40(%rsp)
  0x0000000116b43028: mov    %r8,0x38(%rsp)
  0x0000000116b4302d: mov    %r9,0x30(%rsp)
  0x0000000116b43032: mov    %r10,0x28(%rsp)
  0x0000000116b43037: mov    %r11,0x20(%rsp)
  0x0000000116b4303c: mov    %r12,0x18(%rsp)
  0x0000000116b43041: mov    %r13,0x10(%rsp)
  0x0000000116b43046: mov    %r14,0x8(%rsp)
  0x0000000116b4304b: mov    %r15,(%rsp)
  0x0000000116b4304f: movabs $0x10cb763be,%rdi
  0x0000000116b43059: movabs $0x116b42ff9,%rsi
  0x0000000116b43063: mov    %rsp,%rdx
  0x0000000116b43066: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4306a: callq  0x000000010c7dd830
  0x0000000116b4306f: hlt    
  0x0000000116b43070: movzbl 0x3(%r13),%ebx
  0x0000000116b43075: add    $0x3,%r13
  0x0000000116b43079: movabs $0x10ce39680,%r10
  0x0000000116b43083: jmpq   *(%r10,%rbx,8)
  0x0000000116b43087: movq   $0x0,-0x10(%rbp)
  0x0000000116b4308f: mov    -0x38(%rbp),%r13
  0x0000000116b43093: mov    -0x30(%rbp),%r14
  0x0000000116b43097: cmpq   $0x0,0x8(%r15)
  0x0000000116b4309f: je     0x0000000116b43375
  0x0000000116b430a5: callq  0x0000000116b430af
  0x0000000116b430aa: jmpq   0x0000000116b432fe
  0x0000000116b430af: lea    0x8(%rsp),%rax
  0x0000000116b430b4: mov    %r13,-0x38(%rbp)
  0x0000000116b430b8: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b430c0: je     0x0000000116b4313d
  0x0000000116b430c6: mov    %rsp,-0x28(%rsp)
  0x0000000116b430cb: sub    $0x80,%rsp
  0x0000000116b430d2: mov    %rax,0x78(%rsp)
  0x0000000116b430d7: mov    %rcx,0x70(%rsp)
  0x0000000116b430dc: mov    %rdx,0x68(%rsp)
  0x0000000116b430e1: mov    %rbx,0x60(%rsp)
  0x0000000116b430e6: mov    %rbp,0x50(%rsp)
  0x0000000116b430eb: mov    %rsi,0x48(%rsp)
  0x0000000116b430f0: mov    %rdi,0x40(%rsp)
  0x0000000116b430f5: mov    %r8,0x38(%rsp)
  0x0000000116b430fa: mov    %r9,0x30(%rsp)
  0x0000000116b430ff: mov    %r10,0x28(%rsp)
  0x0000000116b43104: mov    %r11,0x20(%rsp)
  0x0000000116b43109: mov    %r12,0x18(%rsp)
  0x0000000116b4310e: mov    %r13,0x10(%rsp)
  0x0000000116b43113: mov    %r14,0x8(%rsp)
  0x0000000116b43118: mov    %r15,(%rsp)
  0x0000000116b4311c: movabs $0x10cc2363b,%rdi
  0x0000000116b43126: movabs $0x116b430c6,%rsi
  0x0000000116b43130: mov    %rsp,%rdx
  0x0000000116b43133: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43137: callq  0x000000010c7dd830
  0x0000000116b4313c: hlt    
  0x0000000116b4313d: push   %r10
  0x0000000116b4313f: cmp    -0x9cfc896(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b43146: je     0x0000000116b431c3
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4314c: mov    %rsp,-0x28(%rsp)
  0x0000000116b43151: sub    $0x80,%rsp
  0x0000000116b43158: mov    %rax,0x78(%rsp)
  0x0000000116b4315d: mov    %rcx,0x70(%rsp)
  0x0000000116b43162: mov    %rdx,0x68(%rsp)
  0x0000000116b43167: mov    %rbx,0x60(%rsp)
  0x0000000116b4316c: mov    %rbp,0x50(%rsp)
  0x0000000116b43171: mov    %rsi,0x48(%rsp)
  0x0000000116b43176: mov    %rdi,0x40(%rsp)
  0x0000000116b4317b: mov    %r8,0x38(%rsp)
  0x0000000116b43180: mov    %r9,0x30(%rsp)
  0x0000000116b43185: mov    %r10,0x28(%rsp)
  0x0000000116b4318a: mov    %r11,0x20(%rsp)
  0x0000000116b4318f: mov    %r12,0x18(%rsp)
  0x0000000116b43194: mov    %r13,0x10(%rsp)
  0x0000000116b43199: mov    %r14,0x8(%rsp)
  0x0000000116b4319e: mov    %r15,(%rsp)
  0x0000000116b431a2: movabs $0x10cc63f17,%rdi
  0x0000000116b431ac: movabs $0x116b4314c,%rsi
  0x0000000116b431b6: mov    %rsp,%rdx
  0x0000000116b431b9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b431bd: callq  0x000000010c7dd830
  0x0000000116b431c2: hlt    
  0x0000000116b431c3: pop    %r10
  0x0000000116b431c5: mov    %r15,%rdi
  0x0000000116b431c8: mov    %rbp,0x290(%r15)
  0x0000000116b431cf: mov    %rax,0x280(%r15)
  0x0000000116b431d6: test   $0xf,%esp
  0x0000000116b431dc: je     0x0000000116b431f4
  0x0000000116b431e2: sub    $0x8,%rsp
  0x0000000116b431e6: callq  0x000000010c5881a0
  0x0000000116b431eb: add    $0x8,%rsp
  0x0000000116b431ef: jmpq   0x0000000116b431f9
  0x0000000116b431f4: callq  0x000000010c5881a0
  0x0000000116b431f9: push   %rax
  0x0000000116b431fa: push   %rdi
  0x0000000116b431fb: push   %rsi
  0x0000000116b431fc: push   %rdx
  0x0000000116b431fd: push   %rcx
  0x0000000116b431fe: push   %r8
  0x0000000116b43200: push   %r9
  0x0000000116b43202: push   %r10
  0x0000000116b43204: mov    %rsp,%r10
  0x0000000116b43207: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4320b: push   %r10
  0x0000000116b4320d: push   %r11
  0x0000000116b4320f: mov    $0x109,%edi
  0x0000000116b43214: movabs $0x7ff815049fd5,%r10
  0x0000000116b4321e: callq  *%r10
  0x0000000116b43221: pop    %r11
  0x0000000116b43223: pop    %rsp
  0x0000000116b43224: pop    %r10
  0x0000000116b43226: pop    %r9
  0x0000000116b43228: pop    %r8
  0x0000000116b4322a: pop    %rcx
  0x0000000116b4322b: pop    %rdx
  0x0000000116b4322c: pop    %rsi
  0x0000000116b4322d: pop    %rdi
  0x0000000116b4322e: cmp    %rax,%r15
  0x0000000116b43231: je     0x0000000116b432ae
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b43237: mov    %rsp,-0x28(%rsp)
  0x0000000116b4323c: sub    $0x80,%rsp
  0x0000000116b43243: mov    %rax,0x78(%rsp)
  0x0000000116b43248: mov    %rcx,0x70(%rsp)
  0x0000000116b4324d: mov    %rdx,0x68(%rsp)
  0x0000000116b43252: mov    %rbx,0x60(%rsp)
  0x0000000116b43257: mov    %rbp,0x50(%rsp)
  0x0000000116b4325c: mov    %rsi,0x48(%rsp)
  0x0000000116b43261: mov    %rdi,0x40(%rsp)
  0x0000000116b43266: mov    %r8,0x38(%rsp)
  0x0000000116b4326b: mov    %r9,0x30(%rsp)
  0x0000000116b43270: mov    %r10,0x28(%rsp)
  0x0000000116b43275: mov    %r11,0x20(%rsp)
  0x0000000116b4327a: mov    %r12,0x18(%rsp)
  0x0000000116b4327f: mov    %r13,0x10(%rsp)
  0x0000000116b43284: mov    %r14,0x8(%rsp)
  0x0000000116b43289: mov    %r15,(%rsp)
  0x0000000116b4328d: movabs $0x10cc6405e,%rdi
  0x0000000116b43297: movabs $0x116b43237,%rsi
  0x0000000116b432a1: mov    %rsp,%rdx
  0x0000000116b432a4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b432a8: callq  0x000000010c7dd830
  0x0000000116b432ad: hlt    
  0x0000000116b432ae: pop    %rax
  0x0000000116b432af: movabs $0x0,%r10
  0x0000000116b432b9: mov    %r10,0x280(%r15)
  0x0000000116b432c0: movabs $0x0,%r10
  0x0000000116b432ca: mov    %r10,0x290(%r15)
  0x0000000116b432d1: movabs $0x0,%r10
  0x0000000116b432db: mov    %r10,0x288(%r15)
  0x0000000116b432e2: cmpq   $0x0,0x8(%r15)
  0x0000000116b432ea: je     0x0000000116b432f5
  0x0000000116b432f0: jmpq   0x0000000116b30420
  0x0000000116b432f5: mov    -0x38(%rbp),%r13
  0x0000000116b432f9: mov    -0x30(%rbp),%r14
  0x0000000116b432fd: retq   
  0x0000000116b432fe: mov    %rsp,-0x28(%rsp)
  0x0000000116b43303: sub    $0x80,%rsp
  0x0000000116b4330a: mov    %rax,0x78(%rsp)
  0x0000000116b4330f: mov    %rcx,0x70(%rsp)
  0x0000000116b43314: mov    %rdx,0x68(%rsp)
  0x0000000116b43319: mov    %rbx,0x60(%rsp)
  0x0000000116b4331e: mov    %rbp,0x50(%rsp)
  0x0000000116b43323: mov    %rsi,0x48(%rsp)
  0x0000000116b43328: mov    %rdi,0x40(%rsp)
  0x0000000116b4332d: mov    %r8,0x38(%rsp)
  0x0000000116b43332: mov    %r9,0x30(%rsp)
  0x0000000116b43337: mov    %r10,0x28(%rsp)
  0x0000000116b4333c: mov    %r11,0x20(%rsp)
  0x0000000116b43341: mov    %r12,0x18(%rsp)
  0x0000000116b43346: mov    %r13,0x10(%rsp)
  0x0000000116b4334b: mov    %r14,0x8(%rsp)
  0x0000000116b43350: mov    %r15,(%rsp)
  0x0000000116b43354: movabs $0x10cb763be,%rdi
  0x0000000116b4335e: movabs $0x116b432fe,%rsi
  0x0000000116b43368: mov    %rsp,%rdx
  0x0000000116b4336b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4336f: callq  0x000000010c7dd830
  0x0000000116b43374: hlt    
  0x0000000116b43375: movzbl 0x3(%r13),%ebx
  0x0000000116b4337a: add    $0x3,%r13
  0x0000000116b4337e: movabs $0x10ce39e80,%r10
  0x0000000116b43388: jmpq   *(%r10,%rbx,8)
  0x0000000116b4338c: movq   $0x0,-0x10(%rbp)
  0x0000000116b43394: mov    -0x38(%rbp),%r13
  0x0000000116b43398: mov    -0x30(%rbp),%r14
  0x0000000116b4339c: cmpq   $0x0,0x8(%r15)
  0x0000000116b433a4: je     0x0000000116b4367a
  0x0000000116b433aa: callq  0x0000000116b433b4
  0x0000000116b433af: jmpq   0x0000000116b43603
  0x0000000116b433b4: lea    0x8(%rsp),%rax
  0x0000000116b433b9: mov    %r13,-0x38(%rbp)
  0x0000000116b433bd: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b433c5: je     0x0000000116b43442
  0x0000000116b433cb: mov    %rsp,-0x28(%rsp)
  0x0000000116b433d0: sub    $0x80,%rsp
  0x0000000116b433d7: mov    %rax,0x78(%rsp)
  0x0000000116b433dc: mov    %rcx,0x70(%rsp)
  0x0000000116b433e1: mov    %rdx,0x68(%rsp)
  0x0000000116b433e6: mov    %rbx,0x60(%rsp)
  0x0000000116b433eb: mov    %rbp,0x50(%rsp)
  0x0000000116b433f0: mov    %rsi,0x48(%rsp)
  0x0000000116b433f5: mov    %rdi,0x40(%rsp)
  0x0000000116b433fa: mov    %r8,0x38(%rsp)
  0x0000000116b433ff: mov    %r9,0x30(%rsp)
  0x0000000116b43404: mov    %r10,0x28(%rsp)
  0x0000000116b43409: mov    %r11,0x20(%rsp)
  0x0000000116b4340e: mov    %r12,0x18(%rsp)
  0x0000000116b43413: mov    %r13,0x10(%rsp)
  0x0000000116b43418: mov    %r14,0x8(%rsp)
  0x0000000116b4341d: mov    %r15,(%rsp)
  0x0000000116b43421: movabs $0x10cc2363b,%rdi
  0x0000000116b4342b: movabs $0x116b433cb,%rsi
  0x0000000116b43435: mov    %rsp,%rdx
  0x0000000116b43438: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4343c: callq  0x000000010c7dd830
  0x0000000116b43441: hlt    
  0x0000000116b43442: push   %r10
  0x0000000116b43444: cmp    -0x9cfcb9b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4344b: je     0x0000000116b434c8
  ;; call_VM_base: heap base corrupted?
  0x0000000116b43451: mov    %rsp,-0x28(%rsp)
  0x0000000116b43456: sub    $0x80,%rsp
  0x0000000116b4345d: mov    %rax,0x78(%rsp)
  0x0000000116b43462: mov    %rcx,0x70(%rsp)
  0x0000000116b43467: mov    %rdx,0x68(%rsp)
  0x0000000116b4346c: mov    %rbx,0x60(%rsp)
  0x0000000116b43471: mov    %rbp,0x50(%rsp)
  0x0000000116b43476: mov    %rsi,0x48(%rsp)
  0x0000000116b4347b: mov    %rdi,0x40(%rsp)
  0x0000000116b43480: mov    %r8,0x38(%rsp)
  0x0000000116b43485: mov    %r9,0x30(%rsp)
  0x0000000116b4348a: mov    %r10,0x28(%rsp)
  0x0000000116b4348f: mov    %r11,0x20(%rsp)
  0x0000000116b43494: mov    %r12,0x18(%rsp)
  0x0000000116b43499: mov    %r13,0x10(%rsp)
  0x0000000116b4349e: mov    %r14,0x8(%rsp)
  0x0000000116b434a3: mov    %r15,(%rsp)
  0x0000000116b434a7: movabs $0x10cc63f17,%rdi
  0x0000000116b434b1: movabs $0x116b43451,%rsi
  0x0000000116b434bb: mov    %rsp,%rdx
  0x0000000116b434be: and    $0xfffffffffffffff0,%rsp
  0x0000000116b434c2: callq  0x000000010c7dd830
  0x0000000116b434c7: hlt    
  0x0000000116b434c8: pop    %r10
  0x0000000116b434ca: mov    %r15,%rdi
  0x0000000116b434cd: mov    %rbp,0x290(%r15)
  0x0000000116b434d4: mov    %rax,0x280(%r15)
  0x0000000116b434db: test   $0xf,%esp
  0x0000000116b434e1: je     0x0000000116b434f9
  0x0000000116b434e7: sub    $0x8,%rsp
  0x0000000116b434eb: callq  0x000000010c5881a0
  0x0000000116b434f0: add    $0x8,%rsp
  0x0000000116b434f4: jmpq   0x0000000116b434fe
  0x0000000116b434f9: callq  0x000000010c5881a0
  0x0000000116b434fe: push   %rax
  0x0000000116b434ff: push   %rdi
  0x0000000116b43500: push   %rsi
  0x0000000116b43501: push   %rdx
  0x0000000116b43502: push   %rcx
  0x0000000116b43503: push   %r8
  0x0000000116b43505: push   %r9
  0x0000000116b43507: push   %r10
  0x0000000116b43509: mov    %rsp,%r10
  0x0000000116b4350c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43510: push   %r10
  0x0000000116b43512: push   %r11
  0x0000000116b43514: mov    $0x109,%edi
  0x0000000116b43519: movabs $0x7ff815049fd5,%r10
  0x0000000116b43523: callq  *%r10
  0x0000000116b43526: pop    %r11
  0x0000000116b43528: pop    %rsp
  0x0000000116b43529: pop    %r10
  0x0000000116b4352b: pop    %r9
  0x0000000116b4352d: pop    %r8
  0x0000000116b4352f: pop    %rcx
  0x0000000116b43530: pop    %rdx
  0x0000000116b43531: pop    %rsi
  0x0000000116b43532: pop    %rdi
  0x0000000116b43533: cmp    %rax,%r15
  0x0000000116b43536: je     0x0000000116b435b3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4353c: mov    %rsp,-0x28(%rsp)
  0x0000000116b43541: sub    $0x80,%rsp
  0x0000000116b43548: mov    %rax,0x78(%rsp)
  0x0000000116b4354d: mov    %rcx,0x70(%rsp)
  0x0000000116b43552: mov    %rdx,0x68(%rsp)
  0x0000000116b43557: mov    %rbx,0x60(%rsp)
  0x0000000116b4355c: mov    %rbp,0x50(%rsp)
  0x0000000116b43561: mov    %rsi,0x48(%rsp)
  0x0000000116b43566: mov    %rdi,0x40(%rsp)
  0x0000000116b4356b: mov    %r8,0x38(%rsp)
  0x0000000116b43570: mov    %r9,0x30(%rsp)
  0x0000000116b43575: mov    %r10,0x28(%rsp)
  0x0000000116b4357a: mov    %r11,0x20(%rsp)
  0x0000000116b4357f: mov    %r12,0x18(%rsp)
  0x0000000116b43584: mov    %r13,0x10(%rsp)
  0x0000000116b43589: mov    %r14,0x8(%rsp)
  0x0000000116b4358e: mov    %r15,(%rsp)
  0x0000000116b43592: movabs $0x10cc6405e,%rdi
  0x0000000116b4359c: movabs $0x116b4353c,%rsi
  0x0000000116b435a6: mov    %rsp,%rdx
  0x0000000116b435a9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b435ad: callq  0x000000010c7dd830
  0x0000000116b435b2: hlt    
  0x0000000116b435b3: pop    %rax
  0x0000000116b435b4: movabs $0x0,%r10
  0x0000000116b435be: mov    %r10,0x280(%r15)
  0x0000000116b435c5: movabs $0x0,%r10
  0x0000000116b435cf: mov    %r10,0x290(%r15)
  0x0000000116b435d6: movabs $0x0,%r10
  0x0000000116b435e0: mov    %r10,0x288(%r15)
  0x0000000116b435e7: cmpq   $0x0,0x8(%r15)
  0x0000000116b435ef: je     0x0000000116b435fa
  0x0000000116b435f5: jmpq   0x0000000116b30420
  0x0000000116b435fa: mov    -0x38(%rbp),%r13
  0x0000000116b435fe: mov    -0x30(%rbp),%r14
  0x0000000116b43602: retq   
  0x0000000116b43603: mov    %rsp,-0x28(%rsp)
  0x0000000116b43608: sub    $0x80,%rsp
  0x0000000116b4360f: mov    %rax,0x78(%rsp)
  0x0000000116b43614: mov    %rcx,0x70(%rsp)
  0x0000000116b43619: mov    %rdx,0x68(%rsp)
  0x0000000116b4361e: mov    %rbx,0x60(%rsp)
  0x0000000116b43623: mov    %rbp,0x50(%rsp)
  0x0000000116b43628: mov    %rsi,0x48(%rsp)
  0x0000000116b4362d: mov    %rdi,0x40(%rsp)
  0x0000000116b43632: mov    %r8,0x38(%rsp)
  0x0000000116b43637: mov    %r9,0x30(%rsp)
  0x0000000116b4363c: mov    %r10,0x28(%rsp)
  0x0000000116b43641: mov    %r11,0x20(%rsp)
  0x0000000116b43646: mov    %r12,0x18(%rsp)
  0x0000000116b4364b: mov    %r13,0x10(%rsp)
  0x0000000116b43650: mov    %r14,0x8(%rsp)
  0x0000000116b43655: mov    %r15,(%rsp)
  0x0000000116b43659: movabs $0x10cb763be,%rdi
  0x0000000116b43663: movabs $0x116b43603,%rsi
  0x0000000116b4366d: mov    %rsp,%rdx
  0x0000000116b43670: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43674: callq  0x000000010c7dd830
  0x0000000116b43679: hlt    
  0x0000000116b4367a: movzbl 0x3(%r13),%ebx
  0x0000000116b4367f: add    $0x3,%r13
  0x0000000116b43683: movabs $0x10ce3a680,%r10
  0x0000000116b4368d: jmpq   *(%r10,%rbx,8)
  0x0000000116b43691: movq   $0x0,-0x10(%rbp)
  0x0000000116b43699: mov    -0x38(%rbp),%r13
  0x0000000116b4369d: mov    -0x30(%rbp),%r14
  0x0000000116b436a1: cmpq   $0x0,0x8(%r15)
  0x0000000116b436a9: je     0x0000000116b4397f
  0x0000000116b436af: callq  0x0000000116b436b9
  0x0000000116b436b4: jmpq   0x0000000116b43908
  0x0000000116b436b9: lea    0x8(%rsp),%rax
  0x0000000116b436be: mov    %r13,-0x38(%rbp)
  0x0000000116b436c2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b436ca: je     0x0000000116b43747
  0x0000000116b436d0: mov    %rsp,-0x28(%rsp)
  0x0000000116b436d5: sub    $0x80,%rsp
  0x0000000116b436dc: mov    %rax,0x78(%rsp)
  0x0000000116b436e1: mov    %rcx,0x70(%rsp)
  0x0000000116b436e6: mov    %rdx,0x68(%rsp)
  0x0000000116b436eb: mov    %rbx,0x60(%rsp)
  0x0000000116b436f0: mov    %rbp,0x50(%rsp)
  0x0000000116b436f5: mov    %rsi,0x48(%rsp)
  0x0000000116b436fa: mov    %rdi,0x40(%rsp)
  0x0000000116b436ff: mov    %r8,0x38(%rsp)
  0x0000000116b43704: mov    %r9,0x30(%rsp)
  0x0000000116b43709: mov    %r10,0x28(%rsp)
  0x0000000116b4370e: mov    %r11,0x20(%rsp)
  0x0000000116b43713: mov    %r12,0x18(%rsp)
  0x0000000116b43718: mov    %r13,0x10(%rsp)
  0x0000000116b4371d: mov    %r14,0x8(%rsp)
  0x0000000116b43722: mov    %r15,(%rsp)
  0x0000000116b43726: movabs $0x10cc2363b,%rdi
  0x0000000116b43730: movabs $0x116b436d0,%rsi
  0x0000000116b4373a: mov    %rsp,%rdx
  0x0000000116b4373d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43741: callq  0x000000010c7dd830
  0x0000000116b43746: hlt    
  0x0000000116b43747: push   %r10
  0x0000000116b43749: cmp    -0x9cfcea0(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b43750: je     0x0000000116b437cd
  ;; call_VM_base: heap base corrupted?
  0x0000000116b43756: mov    %rsp,-0x28(%rsp)
  0x0000000116b4375b: sub    $0x80,%rsp
  0x0000000116b43762: mov    %rax,0x78(%rsp)
  0x0000000116b43767: mov    %rcx,0x70(%rsp)
  0x0000000116b4376c: mov    %rdx,0x68(%rsp)
  0x0000000116b43771: mov    %rbx,0x60(%rsp)
  0x0000000116b43776: mov    %rbp,0x50(%rsp)
  0x0000000116b4377b: mov    %rsi,0x48(%rsp)
  0x0000000116b43780: mov    %rdi,0x40(%rsp)
  0x0000000116b43785: mov    %r8,0x38(%rsp)
  0x0000000116b4378a: mov    %r9,0x30(%rsp)
  0x0000000116b4378f: mov    %r10,0x28(%rsp)
  0x0000000116b43794: mov    %r11,0x20(%rsp)
  0x0000000116b43799: mov    %r12,0x18(%rsp)
  0x0000000116b4379e: mov    %r13,0x10(%rsp)
  0x0000000116b437a3: mov    %r14,0x8(%rsp)
  0x0000000116b437a8: mov    %r15,(%rsp)
  0x0000000116b437ac: movabs $0x10cc63f17,%rdi
  0x0000000116b437b6: movabs $0x116b43756,%rsi
  0x0000000116b437c0: mov    %rsp,%rdx
  0x0000000116b437c3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b437c7: callq  0x000000010c7dd830
  0x0000000116b437cc: hlt    
  0x0000000116b437cd: pop    %r10
  0x0000000116b437cf: mov    %r15,%rdi
  0x0000000116b437d2: mov    %rbp,0x290(%r15)
  0x0000000116b437d9: mov    %rax,0x280(%r15)
  0x0000000116b437e0: test   $0xf,%esp
  0x0000000116b437e6: je     0x0000000116b437fe
  0x0000000116b437ec: sub    $0x8,%rsp
  0x0000000116b437f0: callq  0x000000010c5881a0
  0x0000000116b437f5: add    $0x8,%rsp
  0x0000000116b437f9: jmpq   0x0000000116b43803
  0x0000000116b437fe: callq  0x000000010c5881a0
  0x0000000116b43803: push   %rax
  0x0000000116b43804: push   %rdi
  0x0000000116b43805: push   %rsi
  0x0000000116b43806: push   %rdx
  0x0000000116b43807: push   %rcx
  0x0000000116b43808: push   %r8
  0x0000000116b4380a: push   %r9
  0x0000000116b4380c: push   %r10
  0x0000000116b4380e: mov    %rsp,%r10
  0x0000000116b43811: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43815: push   %r10
  0x0000000116b43817: push   %r11
  0x0000000116b43819: mov    $0x109,%edi
  0x0000000116b4381e: movabs $0x7ff815049fd5,%r10
  0x0000000116b43828: callq  *%r10
  0x0000000116b4382b: pop    %r11
  0x0000000116b4382d: pop    %rsp
  0x0000000116b4382e: pop    %r10
  0x0000000116b43830: pop    %r9
  0x0000000116b43832: pop    %r8
  0x0000000116b43834: pop    %rcx
  0x0000000116b43835: pop    %rdx
  0x0000000116b43836: pop    %rsi
  0x0000000116b43837: pop    %rdi
  0x0000000116b43838: cmp    %rax,%r15
  0x0000000116b4383b: je     0x0000000116b438b8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b43841: mov    %rsp,-0x28(%rsp)
  0x0000000116b43846: sub    $0x80,%rsp
  0x0000000116b4384d: mov    %rax,0x78(%rsp)
  0x0000000116b43852: mov    %rcx,0x70(%rsp)
  0x0000000116b43857: mov    %rdx,0x68(%rsp)
  0x0000000116b4385c: mov    %rbx,0x60(%rsp)
  0x0000000116b43861: mov    %rbp,0x50(%rsp)
  0x0000000116b43866: mov    %rsi,0x48(%rsp)
  0x0000000116b4386b: mov    %rdi,0x40(%rsp)
  0x0000000116b43870: mov    %r8,0x38(%rsp)
  0x0000000116b43875: mov    %r9,0x30(%rsp)
  0x0000000116b4387a: mov    %r10,0x28(%rsp)
  0x0000000116b4387f: mov    %r11,0x20(%rsp)
  0x0000000116b43884: mov    %r12,0x18(%rsp)
  0x0000000116b43889: mov    %r13,0x10(%rsp)
  0x0000000116b4388e: mov    %r14,0x8(%rsp)
  0x0000000116b43893: mov    %r15,(%rsp)
  0x0000000116b43897: movabs $0x10cc6405e,%rdi
  0x0000000116b438a1: movabs $0x116b43841,%rsi
  0x0000000116b438ab: mov    %rsp,%rdx
  0x0000000116b438ae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b438b2: callq  0x000000010c7dd830
  0x0000000116b438b7: hlt    
  0x0000000116b438b8: pop    %rax
  0x0000000116b438b9: movabs $0x0,%r10
  0x0000000116b438c3: mov    %r10,0x280(%r15)
  0x0000000116b438ca: movabs $0x0,%r10
  0x0000000116b438d4: mov    %r10,0x290(%r15)
  0x0000000116b438db: movabs $0x0,%r10
  0x0000000116b438e5: mov    %r10,0x288(%r15)
  0x0000000116b438ec: cmpq   $0x0,0x8(%r15)
  0x0000000116b438f4: je     0x0000000116b438ff
  0x0000000116b438fa: jmpq   0x0000000116b30420
  0x0000000116b438ff: mov    -0x38(%rbp),%r13
  0x0000000116b43903: mov    -0x30(%rbp),%r14
  0x0000000116b43907: retq   
  0x0000000116b43908: mov    %rsp,-0x28(%rsp)
  0x0000000116b4390d: sub    $0x80,%rsp
  0x0000000116b43914: mov    %rax,0x78(%rsp)
  0x0000000116b43919: mov    %rcx,0x70(%rsp)
  0x0000000116b4391e: mov    %rdx,0x68(%rsp)
  0x0000000116b43923: mov    %rbx,0x60(%rsp)
  0x0000000116b43928: mov    %rbp,0x50(%rsp)
  0x0000000116b4392d: mov    %rsi,0x48(%rsp)
  0x0000000116b43932: mov    %rdi,0x40(%rsp)
  0x0000000116b43937: mov    %r8,0x38(%rsp)
  0x0000000116b4393c: mov    %r9,0x30(%rsp)
  0x0000000116b43941: mov    %r10,0x28(%rsp)
  0x0000000116b43946: mov    %r11,0x20(%rsp)
  0x0000000116b4394b: mov    %r12,0x18(%rsp)
  0x0000000116b43950: mov    %r13,0x10(%rsp)
  0x0000000116b43955: mov    %r14,0x8(%rsp)
  0x0000000116b4395a: mov    %r15,(%rsp)
  0x0000000116b4395e: movabs $0x10cb763be,%rdi
  0x0000000116b43968: movabs $0x116b43908,%rsi
  0x0000000116b43972: mov    %rsp,%rdx
  0x0000000116b43975: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43979: callq  0x000000010c7dd830
  0x0000000116b4397e: hlt    
  0x0000000116b4397f: movzbl 0x3(%r13),%ebx
  0x0000000116b43984: add    $0x3,%r13
  0x0000000116b43988: movabs $0x10ce3b680,%r10
  0x0000000116b43992: jmpq   *(%r10,%rbx,8)
  0x0000000116b43996: movq   $0x0,-0x10(%rbp)
  0x0000000116b4399e: mov    -0x38(%rbp),%r13
  0x0000000116b439a2: mov    -0x30(%rbp),%r14
  0x0000000116b439a6: cmpq   $0x0,0x8(%r15)
  0x0000000116b439ae: je     0x0000000116b43c84
  0x0000000116b439b4: callq  0x0000000116b439be
  0x0000000116b439b9: jmpq   0x0000000116b43c0d
  0x0000000116b439be: lea    0x8(%rsp),%rax
  0x0000000116b439c3: mov    %r13,-0x38(%rbp)
  0x0000000116b439c7: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b439cf: je     0x0000000116b43a4c
  0x0000000116b439d5: mov    %rsp,-0x28(%rsp)
  0x0000000116b439da: sub    $0x80,%rsp
  0x0000000116b439e1: mov    %rax,0x78(%rsp)
  0x0000000116b439e6: mov    %rcx,0x70(%rsp)
  0x0000000116b439eb: mov    %rdx,0x68(%rsp)
  0x0000000116b439f0: mov    %rbx,0x60(%rsp)
  0x0000000116b439f5: mov    %rbp,0x50(%rsp)
  0x0000000116b439fa: mov    %rsi,0x48(%rsp)
  0x0000000116b439ff: mov    %rdi,0x40(%rsp)
  0x0000000116b43a04: mov    %r8,0x38(%rsp)
  0x0000000116b43a09: mov    %r9,0x30(%rsp)
  0x0000000116b43a0e: mov    %r10,0x28(%rsp)
  0x0000000116b43a13: mov    %r11,0x20(%rsp)
  0x0000000116b43a18: mov    %r12,0x18(%rsp)
  0x0000000116b43a1d: mov    %r13,0x10(%rsp)
  0x0000000116b43a22: mov    %r14,0x8(%rsp)
  0x0000000116b43a27: mov    %r15,(%rsp)
  0x0000000116b43a2b: movabs $0x10cc2363b,%rdi
  0x0000000116b43a35: movabs $0x116b439d5,%rsi
  0x0000000116b43a3f: mov    %rsp,%rdx
  0x0000000116b43a42: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43a46: callq  0x000000010c7dd830
  0x0000000116b43a4b: hlt    
  0x0000000116b43a4c: push   %r10
  0x0000000116b43a4e: cmp    -0x9cfd1a5(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b43a55: je     0x0000000116b43ad2
  ;; call_VM_base: heap base corrupted?
  0x0000000116b43a5b: mov    %rsp,-0x28(%rsp)
  0x0000000116b43a60: sub    $0x80,%rsp
  0x0000000116b43a67: mov    %rax,0x78(%rsp)
  0x0000000116b43a6c: mov    %rcx,0x70(%rsp)
  0x0000000116b43a71: mov    %rdx,0x68(%rsp)
  0x0000000116b43a76: mov    %rbx,0x60(%rsp)
  0x0000000116b43a7b: mov    %rbp,0x50(%rsp)
  0x0000000116b43a80: mov    %rsi,0x48(%rsp)
  0x0000000116b43a85: mov    %rdi,0x40(%rsp)
  0x0000000116b43a8a: mov    %r8,0x38(%rsp)
  0x0000000116b43a8f: mov    %r9,0x30(%rsp)
  0x0000000116b43a94: mov    %r10,0x28(%rsp)
  0x0000000116b43a99: mov    %r11,0x20(%rsp)
  0x0000000116b43a9e: mov    %r12,0x18(%rsp)
  0x0000000116b43aa3: mov    %r13,0x10(%rsp)
  0x0000000116b43aa8: mov    %r14,0x8(%rsp)
  0x0000000116b43aad: mov    %r15,(%rsp)
  0x0000000116b43ab1: movabs $0x10cc63f17,%rdi
  0x0000000116b43abb: movabs $0x116b43a5b,%rsi
  0x0000000116b43ac5: mov    %rsp,%rdx
  0x0000000116b43ac8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43acc: callq  0x000000010c7dd830
  0x0000000116b43ad1: hlt    
  0x0000000116b43ad2: pop    %r10
  0x0000000116b43ad4: mov    %r15,%rdi
  0x0000000116b43ad7: mov    %rbp,0x290(%r15)
  0x0000000116b43ade: mov    %rax,0x280(%r15)
  0x0000000116b43ae5: test   $0xf,%esp
  0x0000000116b43aeb: je     0x0000000116b43b03
  0x0000000116b43af1: sub    $0x8,%rsp
  0x0000000116b43af5: callq  0x000000010c5881a0
  0x0000000116b43afa: add    $0x8,%rsp
  0x0000000116b43afe: jmpq   0x0000000116b43b08
  0x0000000116b43b03: callq  0x000000010c5881a0
  0x0000000116b43b08: push   %rax
  0x0000000116b43b09: push   %rdi
  0x0000000116b43b0a: push   %rsi
  0x0000000116b43b0b: push   %rdx
  0x0000000116b43b0c: push   %rcx
  0x0000000116b43b0d: push   %r8
  0x0000000116b43b0f: push   %r9
  0x0000000116b43b11: push   %r10
  0x0000000116b43b13: mov    %rsp,%r10
  0x0000000116b43b16: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43b1a: push   %r10
  0x0000000116b43b1c: push   %r11
  0x0000000116b43b1e: mov    $0x109,%edi
  0x0000000116b43b23: movabs $0x7ff815049fd5,%r10
  0x0000000116b43b2d: callq  *%r10
  0x0000000116b43b30: pop    %r11
  0x0000000116b43b32: pop    %rsp
  0x0000000116b43b33: pop    %r10
  0x0000000116b43b35: pop    %r9
  0x0000000116b43b37: pop    %r8
  0x0000000116b43b39: pop    %rcx
  0x0000000116b43b3a: pop    %rdx
  0x0000000116b43b3b: pop    %rsi
  0x0000000116b43b3c: pop    %rdi
  0x0000000116b43b3d: cmp    %rax,%r15
  0x0000000116b43b40: je     0x0000000116b43bbd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b43b46: mov    %rsp,-0x28(%rsp)
  0x0000000116b43b4b: sub    $0x80,%rsp
  0x0000000116b43b52: mov    %rax,0x78(%rsp)
  0x0000000116b43b57: mov    %rcx,0x70(%rsp)
  0x0000000116b43b5c: mov    %rdx,0x68(%rsp)
  0x0000000116b43b61: mov    %rbx,0x60(%rsp)
  0x0000000116b43b66: mov    %rbp,0x50(%rsp)
  0x0000000116b43b6b: mov    %rsi,0x48(%rsp)
  0x0000000116b43b70: mov    %rdi,0x40(%rsp)
  0x0000000116b43b75: mov    %r8,0x38(%rsp)
  0x0000000116b43b7a: mov    %r9,0x30(%rsp)
  0x0000000116b43b7f: mov    %r10,0x28(%rsp)
  0x0000000116b43b84: mov    %r11,0x20(%rsp)
  0x0000000116b43b89: mov    %r12,0x18(%rsp)
  0x0000000116b43b8e: mov    %r13,0x10(%rsp)
  0x0000000116b43b93: mov    %r14,0x8(%rsp)
  0x0000000116b43b98: mov    %r15,(%rsp)
  0x0000000116b43b9c: movabs $0x10cc6405e,%rdi
  0x0000000116b43ba6: movabs $0x116b43b46,%rsi
  0x0000000116b43bb0: mov    %rsp,%rdx
  0x0000000116b43bb3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43bb7: callq  0x000000010c7dd830
  0x0000000116b43bbc: hlt    
  0x0000000116b43bbd: pop    %rax
  0x0000000116b43bbe: movabs $0x0,%r10
  0x0000000116b43bc8: mov    %r10,0x280(%r15)
  0x0000000116b43bcf: movabs $0x0,%r10
  0x0000000116b43bd9: mov    %r10,0x290(%r15)
  0x0000000116b43be0: movabs $0x0,%r10
  0x0000000116b43bea: mov    %r10,0x288(%r15)
  0x0000000116b43bf1: cmpq   $0x0,0x8(%r15)
  0x0000000116b43bf9: je     0x0000000116b43c04
  0x0000000116b43bff: jmpq   0x0000000116b30420
  0x0000000116b43c04: mov    -0x38(%rbp),%r13
  0x0000000116b43c08: mov    -0x30(%rbp),%r14
  0x0000000116b43c0c: retq   
  0x0000000116b43c0d: mov    %rsp,-0x28(%rsp)
  0x0000000116b43c12: sub    $0x80,%rsp
  0x0000000116b43c19: mov    %rax,0x78(%rsp)
  0x0000000116b43c1e: mov    %rcx,0x70(%rsp)
  0x0000000116b43c23: mov    %rdx,0x68(%rsp)
  0x0000000116b43c28: mov    %rbx,0x60(%rsp)
  0x0000000116b43c2d: mov    %rbp,0x50(%rsp)
  0x0000000116b43c32: mov    %rsi,0x48(%rsp)
  0x0000000116b43c37: mov    %rdi,0x40(%rsp)
  0x0000000116b43c3c: mov    %r8,0x38(%rsp)
  0x0000000116b43c41: mov    %r9,0x30(%rsp)
  0x0000000116b43c46: mov    %r10,0x28(%rsp)
  0x0000000116b43c4b: mov    %r11,0x20(%rsp)
  0x0000000116b43c50: mov    %r12,0x18(%rsp)
  0x0000000116b43c55: mov    %r13,0x10(%rsp)
  0x0000000116b43c5a: mov    %r14,0x8(%rsp)
  0x0000000116b43c5f: mov    %r15,(%rsp)
  0x0000000116b43c63: movabs $0x10cb763be,%rdi
  0x0000000116b43c6d: movabs $0x116b43c0d,%rsi
  0x0000000116b43c77: mov    %rsp,%rdx
  0x0000000116b43c7a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43c7e: callq  0x000000010c7dd830
  0x0000000116b43c83: hlt    
  0x0000000116b43c84: movzbl 0x4(%r13),%ebx
  0x0000000116b43c89: add    $0x4,%r13
  0x0000000116b43c8d: movabs $0x10ce38e80,%r10
  0x0000000116b43c97: jmpq   *(%r10,%rbx,8)
  0x0000000116b43c9b: movq   $0x0,-0x10(%rbp)
  0x0000000116b43ca3: mov    -0x38(%rbp),%r13
  0x0000000116b43ca7: mov    -0x30(%rbp),%r14
  0x0000000116b43cab: cmpq   $0x0,0x8(%r15)
  0x0000000116b43cb3: je     0x0000000116b43f89
  0x0000000116b43cb9: callq  0x0000000116b43cc3
  0x0000000116b43cbe: jmpq   0x0000000116b43f12
  0x0000000116b43cc3: lea    0x8(%rsp),%rax
  0x0000000116b43cc8: mov    %r13,-0x38(%rbp)
  0x0000000116b43ccc: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b43cd4: je     0x0000000116b43d51
  0x0000000116b43cda: mov    %rsp,-0x28(%rsp)
  0x0000000116b43cdf: sub    $0x80,%rsp
  0x0000000116b43ce6: mov    %rax,0x78(%rsp)
  0x0000000116b43ceb: mov    %rcx,0x70(%rsp)
  0x0000000116b43cf0: mov    %rdx,0x68(%rsp)
  0x0000000116b43cf5: mov    %rbx,0x60(%rsp)
  0x0000000116b43cfa: mov    %rbp,0x50(%rsp)
  0x0000000116b43cff: mov    %rsi,0x48(%rsp)
  0x0000000116b43d04: mov    %rdi,0x40(%rsp)
  0x0000000116b43d09: mov    %r8,0x38(%rsp)
  0x0000000116b43d0e: mov    %r9,0x30(%rsp)
  0x0000000116b43d13: mov    %r10,0x28(%rsp)
  0x0000000116b43d18: mov    %r11,0x20(%rsp)
  0x0000000116b43d1d: mov    %r12,0x18(%rsp)
  0x0000000116b43d22: mov    %r13,0x10(%rsp)
  0x0000000116b43d27: mov    %r14,0x8(%rsp)
  0x0000000116b43d2c: mov    %r15,(%rsp)
  0x0000000116b43d30: movabs $0x10cc2363b,%rdi
  0x0000000116b43d3a: movabs $0x116b43cda,%rsi
  0x0000000116b43d44: mov    %rsp,%rdx
  0x0000000116b43d47: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43d4b: callq  0x000000010c7dd830
  0x0000000116b43d50: hlt    
  0x0000000116b43d51: push   %r10
  0x0000000116b43d53: cmp    -0x9cfd4aa(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b43d5a: je     0x0000000116b43dd7
  ;; call_VM_base: heap base corrupted?
  0x0000000116b43d60: mov    %rsp,-0x28(%rsp)
  0x0000000116b43d65: sub    $0x80,%rsp
  0x0000000116b43d6c: mov    %rax,0x78(%rsp)
  0x0000000116b43d71: mov    %rcx,0x70(%rsp)
  0x0000000116b43d76: mov    %rdx,0x68(%rsp)
  0x0000000116b43d7b: mov    %rbx,0x60(%rsp)
  0x0000000116b43d80: mov    %rbp,0x50(%rsp)
  0x0000000116b43d85: mov    %rsi,0x48(%rsp)
  0x0000000116b43d8a: mov    %rdi,0x40(%rsp)
  0x0000000116b43d8f: mov    %r8,0x38(%rsp)
  0x0000000116b43d94: mov    %r9,0x30(%rsp)
  0x0000000116b43d99: mov    %r10,0x28(%rsp)
  0x0000000116b43d9e: mov    %r11,0x20(%rsp)
  0x0000000116b43da3: mov    %r12,0x18(%rsp)
  0x0000000116b43da8: mov    %r13,0x10(%rsp)
  0x0000000116b43dad: mov    %r14,0x8(%rsp)
  0x0000000116b43db2: mov    %r15,(%rsp)
  0x0000000116b43db6: movabs $0x10cc63f17,%rdi
  0x0000000116b43dc0: movabs $0x116b43d60,%rsi
  0x0000000116b43dca: mov    %rsp,%rdx
  0x0000000116b43dcd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43dd1: callq  0x000000010c7dd830
  0x0000000116b43dd6: hlt    
  0x0000000116b43dd7: pop    %r10
  0x0000000116b43dd9: mov    %r15,%rdi
  0x0000000116b43ddc: mov    %rbp,0x290(%r15)
  0x0000000116b43de3: mov    %rax,0x280(%r15)
  0x0000000116b43dea: test   $0xf,%esp
  0x0000000116b43df0: je     0x0000000116b43e08
  0x0000000116b43df6: sub    $0x8,%rsp
  0x0000000116b43dfa: callq  0x000000010c5881a0
  0x0000000116b43dff: add    $0x8,%rsp
  0x0000000116b43e03: jmpq   0x0000000116b43e0d
  0x0000000116b43e08: callq  0x000000010c5881a0
  0x0000000116b43e0d: push   %rax
  0x0000000116b43e0e: push   %rdi
  0x0000000116b43e0f: push   %rsi
  0x0000000116b43e10: push   %rdx
  0x0000000116b43e11: push   %rcx
  0x0000000116b43e12: push   %r8
  0x0000000116b43e14: push   %r9
  0x0000000116b43e16: push   %r10
  0x0000000116b43e18: mov    %rsp,%r10
  0x0000000116b43e1b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43e1f: push   %r10
  0x0000000116b43e21: push   %r11
  0x0000000116b43e23: mov    $0x109,%edi
  0x0000000116b43e28: movabs $0x7ff815049fd5,%r10
  0x0000000116b43e32: callq  *%r10
  0x0000000116b43e35: pop    %r11
  0x0000000116b43e37: pop    %rsp
  0x0000000116b43e38: pop    %r10
  0x0000000116b43e3a: pop    %r9
  0x0000000116b43e3c: pop    %r8
  0x0000000116b43e3e: pop    %rcx
  0x0000000116b43e3f: pop    %rdx
  0x0000000116b43e40: pop    %rsi
  0x0000000116b43e41: pop    %rdi
  0x0000000116b43e42: cmp    %rax,%r15
  0x0000000116b43e45: je     0x0000000116b43ec2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b43e4b: mov    %rsp,-0x28(%rsp)
  0x0000000116b43e50: sub    $0x80,%rsp
  0x0000000116b43e57: mov    %rax,0x78(%rsp)
  0x0000000116b43e5c: mov    %rcx,0x70(%rsp)
  0x0000000116b43e61: mov    %rdx,0x68(%rsp)
  0x0000000116b43e66: mov    %rbx,0x60(%rsp)
  0x0000000116b43e6b: mov    %rbp,0x50(%rsp)
  0x0000000116b43e70: mov    %rsi,0x48(%rsp)
  0x0000000116b43e75: mov    %rdi,0x40(%rsp)
  0x0000000116b43e7a: mov    %r8,0x38(%rsp)
  0x0000000116b43e7f: mov    %r9,0x30(%rsp)
  0x0000000116b43e84: mov    %r10,0x28(%rsp)
  0x0000000116b43e89: mov    %r11,0x20(%rsp)
  0x0000000116b43e8e: mov    %r12,0x18(%rsp)
  0x0000000116b43e93: mov    %r13,0x10(%rsp)
  0x0000000116b43e98: mov    %r14,0x8(%rsp)
  0x0000000116b43e9d: mov    %r15,(%rsp)
  0x0000000116b43ea1: movabs $0x10cc6405e,%rdi
  0x0000000116b43eab: movabs $0x116b43e4b,%rsi
  0x0000000116b43eb5: mov    %rsp,%rdx
  0x0000000116b43eb8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43ebc: callq  0x000000010c7dd830
  0x0000000116b43ec1: hlt    
  0x0000000116b43ec2: pop    %rax
  0x0000000116b43ec3: movabs $0x0,%r10
  0x0000000116b43ecd: mov    %r10,0x280(%r15)
  0x0000000116b43ed4: movabs $0x0,%r10
  0x0000000116b43ede: mov    %r10,0x290(%r15)
  0x0000000116b43ee5: movabs $0x0,%r10
  0x0000000116b43eef: mov    %r10,0x288(%r15)
  0x0000000116b43ef6: cmpq   $0x0,0x8(%r15)
  0x0000000116b43efe: je     0x0000000116b43f09
  0x0000000116b43f04: jmpq   0x0000000116b30420
  0x0000000116b43f09: mov    -0x38(%rbp),%r13
  0x0000000116b43f0d: mov    -0x30(%rbp),%r14
  0x0000000116b43f11: retq   
  0x0000000116b43f12: mov    %rsp,-0x28(%rsp)
  0x0000000116b43f17: sub    $0x80,%rsp
  0x0000000116b43f1e: mov    %rax,0x78(%rsp)
  0x0000000116b43f23: mov    %rcx,0x70(%rsp)
  0x0000000116b43f28: mov    %rdx,0x68(%rsp)
  0x0000000116b43f2d: mov    %rbx,0x60(%rsp)
  0x0000000116b43f32: mov    %rbp,0x50(%rsp)
  0x0000000116b43f37: mov    %rsi,0x48(%rsp)
  0x0000000116b43f3c: mov    %rdi,0x40(%rsp)
  0x0000000116b43f41: mov    %r8,0x38(%rsp)
  0x0000000116b43f46: mov    %r9,0x30(%rsp)
  0x0000000116b43f4b: mov    %r10,0x28(%rsp)
  0x0000000116b43f50: mov    %r11,0x20(%rsp)
  0x0000000116b43f55: mov    %r12,0x18(%rsp)
  0x0000000116b43f5a: mov    %r13,0x10(%rsp)
  0x0000000116b43f5f: mov    %r14,0x8(%rsp)
  0x0000000116b43f64: mov    %r15,(%rsp)
  0x0000000116b43f68: movabs $0x10cb763be,%rdi
  0x0000000116b43f72: movabs $0x116b43f12,%rsi
  0x0000000116b43f7c: mov    %rsp,%rdx
  0x0000000116b43f7f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b43f83: callq  0x000000010c7dd830
  0x0000000116b43f88: hlt    
  0x0000000116b43f89: movzbl 0x4(%r13),%ebx
  0x0000000116b43f8e: add    $0x4,%r13
  0x0000000116b43f92: movabs $0x10ce38e80,%r10
  0x0000000116b43f9c: jmpq   *(%r10,%rbx,8)
  0x0000000116b43fa0: movq   $0x0,-0x10(%rbp)
  0x0000000116b43fa8: mov    -0x38(%rbp),%r13
  0x0000000116b43fac: mov    -0x30(%rbp),%r14
  0x0000000116b43fb0: cmpq   $0x0,0x8(%r15)
  0x0000000116b43fb8: je     0x0000000116b4428e
  0x0000000116b43fbe: callq  0x0000000116b43fc8
  0x0000000116b43fc3: jmpq   0x0000000116b44217
  0x0000000116b43fc8: lea    0x8(%rsp),%rax
  0x0000000116b43fcd: mov    %r13,-0x38(%rbp)
  0x0000000116b43fd1: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b43fd9: je     0x0000000116b44056
  0x0000000116b43fdf: mov    %rsp,-0x28(%rsp)
  0x0000000116b43fe4: sub    $0x80,%rsp
  0x0000000116b43feb: mov    %rax,0x78(%rsp)
  0x0000000116b43ff0: mov    %rcx,0x70(%rsp)
  0x0000000116b43ff5: mov    %rdx,0x68(%rsp)
  0x0000000116b43ffa: mov    %rbx,0x60(%rsp)
  0x0000000116b43fff: mov    %rbp,0x50(%rsp)
  0x0000000116b44004: mov    %rsi,0x48(%rsp)
  0x0000000116b44009: mov    %rdi,0x40(%rsp)
  0x0000000116b4400e: mov    %r8,0x38(%rsp)
  0x0000000116b44013: mov    %r9,0x30(%rsp)
  0x0000000116b44018: mov    %r10,0x28(%rsp)
  0x0000000116b4401d: mov    %r11,0x20(%rsp)
  0x0000000116b44022: mov    %r12,0x18(%rsp)
  0x0000000116b44027: mov    %r13,0x10(%rsp)
  0x0000000116b4402c: mov    %r14,0x8(%rsp)
  0x0000000116b44031: mov    %r15,(%rsp)
  0x0000000116b44035: movabs $0x10cc2363b,%rdi
  0x0000000116b4403f: movabs $0x116b43fdf,%rsi
  0x0000000116b44049: mov    %rsp,%rdx
  0x0000000116b4404c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44050: callq  0x000000010c7dd830
  0x0000000116b44055: hlt    
  0x0000000116b44056: push   %r10
  0x0000000116b44058: cmp    -0x9cfd7af(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4405f: je     0x0000000116b440dc
  ;; call_VM_base: heap base corrupted?
  0x0000000116b44065: mov    %rsp,-0x28(%rsp)
  0x0000000116b4406a: sub    $0x80,%rsp
  0x0000000116b44071: mov    %rax,0x78(%rsp)
  0x0000000116b44076: mov    %rcx,0x70(%rsp)
  0x0000000116b4407b: mov    %rdx,0x68(%rsp)
  0x0000000116b44080: mov    %rbx,0x60(%rsp)
  0x0000000116b44085: mov    %rbp,0x50(%rsp)
  0x0000000116b4408a: mov    %rsi,0x48(%rsp)
  0x0000000116b4408f: mov    %rdi,0x40(%rsp)
  0x0000000116b44094: mov    %r8,0x38(%rsp)
  0x0000000116b44099: mov    %r9,0x30(%rsp)
  0x0000000116b4409e: mov    %r10,0x28(%rsp)
  0x0000000116b440a3: mov    %r11,0x20(%rsp)
  0x0000000116b440a8: mov    %r12,0x18(%rsp)
  0x0000000116b440ad: mov    %r13,0x10(%rsp)
  0x0000000116b440b2: mov    %r14,0x8(%rsp)
  0x0000000116b440b7: mov    %r15,(%rsp)
  0x0000000116b440bb: movabs $0x10cc63f17,%rdi
  0x0000000116b440c5: movabs $0x116b44065,%rsi
  0x0000000116b440cf: mov    %rsp,%rdx
  0x0000000116b440d2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b440d6: callq  0x000000010c7dd830
  0x0000000116b440db: hlt    
  0x0000000116b440dc: pop    %r10
  0x0000000116b440de: mov    %r15,%rdi
  0x0000000116b440e1: mov    %rbp,0x290(%r15)
  0x0000000116b440e8: mov    %rax,0x280(%r15)
  0x0000000116b440ef: test   $0xf,%esp
  0x0000000116b440f5: je     0x0000000116b4410d
  0x0000000116b440fb: sub    $0x8,%rsp
  0x0000000116b440ff: callq  0x000000010c5881a0
  0x0000000116b44104: add    $0x8,%rsp
  0x0000000116b44108: jmpq   0x0000000116b44112
  0x0000000116b4410d: callq  0x000000010c5881a0
  0x0000000116b44112: push   %rax
  0x0000000116b44113: push   %rdi
  0x0000000116b44114: push   %rsi
  0x0000000116b44115: push   %rdx
  0x0000000116b44116: push   %rcx
  0x0000000116b44117: push   %r8
  0x0000000116b44119: push   %r9
  0x0000000116b4411b: push   %r10
  0x0000000116b4411d: mov    %rsp,%r10
  0x0000000116b44120: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44124: push   %r10
  0x0000000116b44126: push   %r11
  0x0000000116b44128: mov    $0x109,%edi
  0x0000000116b4412d: movabs $0x7ff815049fd5,%r10
  0x0000000116b44137: callq  *%r10
  0x0000000116b4413a: pop    %r11
  0x0000000116b4413c: pop    %rsp
  0x0000000116b4413d: pop    %r10
  0x0000000116b4413f: pop    %r9
  0x0000000116b44141: pop    %r8
  0x0000000116b44143: pop    %rcx
  0x0000000116b44144: pop    %rdx
  0x0000000116b44145: pop    %rsi
  0x0000000116b44146: pop    %rdi
  0x0000000116b44147: cmp    %rax,%r15
  0x0000000116b4414a: je     0x0000000116b441c7
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b44150: mov    %rsp,-0x28(%rsp)
  0x0000000116b44155: sub    $0x80,%rsp
  0x0000000116b4415c: mov    %rax,0x78(%rsp)
  0x0000000116b44161: mov    %rcx,0x70(%rsp)
  0x0000000116b44166: mov    %rdx,0x68(%rsp)
  0x0000000116b4416b: mov    %rbx,0x60(%rsp)
  0x0000000116b44170: mov    %rbp,0x50(%rsp)
  0x0000000116b44175: mov    %rsi,0x48(%rsp)
  0x0000000116b4417a: mov    %rdi,0x40(%rsp)
  0x0000000116b4417f: mov    %r8,0x38(%rsp)
  0x0000000116b44184: mov    %r9,0x30(%rsp)
  0x0000000116b44189: mov    %r10,0x28(%rsp)
  0x0000000116b4418e: mov    %r11,0x20(%rsp)
  0x0000000116b44193: mov    %r12,0x18(%rsp)
  0x0000000116b44198: mov    %r13,0x10(%rsp)
  0x0000000116b4419d: mov    %r14,0x8(%rsp)
  0x0000000116b441a2: mov    %r15,(%rsp)
  0x0000000116b441a6: movabs $0x10cc6405e,%rdi
  0x0000000116b441b0: movabs $0x116b44150,%rsi
  0x0000000116b441ba: mov    %rsp,%rdx
  0x0000000116b441bd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b441c1: callq  0x000000010c7dd830
  0x0000000116b441c6: hlt    
  0x0000000116b441c7: pop    %rax
  0x0000000116b441c8: movabs $0x0,%r10
  0x0000000116b441d2: mov    %r10,0x280(%r15)
  0x0000000116b441d9: movabs $0x0,%r10
  0x0000000116b441e3: mov    %r10,0x290(%r15)
  0x0000000116b441ea: movabs $0x0,%r10
  0x0000000116b441f4: mov    %r10,0x288(%r15)
  0x0000000116b441fb: cmpq   $0x0,0x8(%r15)
  0x0000000116b44203: je     0x0000000116b4420e
  0x0000000116b44209: jmpq   0x0000000116b30420
  0x0000000116b4420e: mov    -0x38(%rbp),%r13
  0x0000000116b44212: mov    -0x30(%rbp),%r14
  0x0000000116b44216: retq   
  0x0000000116b44217: mov    %rsp,-0x28(%rsp)
  0x0000000116b4421c: sub    $0x80,%rsp
  0x0000000116b44223: mov    %rax,0x78(%rsp)
  0x0000000116b44228: mov    %rcx,0x70(%rsp)
  0x0000000116b4422d: mov    %rdx,0x68(%rsp)
  0x0000000116b44232: mov    %rbx,0x60(%rsp)
  0x0000000116b44237: mov    %rbp,0x50(%rsp)
  0x0000000116b4423c: mov    %rsi,0x48(%rsp)
  0x0000000116b44241: mov    %rdi,0x40(%rsp)
  0x0000000116b44246: mov    %r8,0x38(%rsp)
  0x0000000116b4424b: mov    %r9,0x30(%rsp)
  0x0000000116b44250: mov    %r10,0x28(%rsp)
  0x0000000116b44255: mov    %r11,0x20(%rsp)
  0x0000000116b4425a: mov    %r12,0x18(%rsp)
  0x0000000116b4425f: mov    %r13,0x10(%rsp)
  0x0000000116b44264: mov    %r14,0x8(%rsp)
  0x0000000116b44269: mov    %r15,(%rsp)
  0x0000000116b4426d: movabs $0x10cb763be,%rdi
  0x0000000116b44277: movabs $0x116b44217,%rsi
  0x0000000116b44281: mov    %rsp,%rdx
  0x0000000116b44284: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44288: callq  0x000000010c7dd830
  0x0000000116b4428d: hlt    
  0x0000000116b4428e: movzbl 0x4(%r13),%ebx
  0x0000000116b44293: add    $0x4,%r13
  0x0000000116b44297: movabs $0x10ce38e80,%r10
  0x0000000116b442a1: jmpq   *(%r10,%rbx,8)
  0x0000000116b442a5: movq   $0x0,-0x10(%rbp)
  0x0000000116b442ad: mov    -0x38(%rbp),%r13
  0x0000000116b442b1: mov    -0x30(%rbp),%r14
  0x0000000116b442b5: cmpq   $0x0,0x8(%r15)
  0x0000000116b442bd: je     0x0000000116b44593
  0x0000000116b442c3: callq  0x0000000116b442cd
  0x0000000116b442c8: jmpq   0x0000000116b4451c
  0x0000000116b442cd: lea    0x8(%rsp),%rax
  0x0000000116b442d2: mov    %r13,-0x38(%rbp)
  0x0000000116b442d6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b442de: je     0x0000000116b4435b
  0x0000000116b442e4: mov    %rsp,-0x28(%rsp)
  0x0000000116b442e9: sub    $0x80,%rsp
  0x0000000116b442f0: mov    %rax,0x78(%rsp)
  0x0000000116b442f5: mov    %rcx,0x70(%rsp)
  0x0000000116b442fa: mov    %rdx,0x68(%rsp)
  0x0000000116b442ff: mov    %rbx,0x60(%rsp)
  0x0000000116b44304: mov    %rbp,0x50(%rsp)
  0x0000000116b44309: mov    %rsi,0x48(%rsp)
  0x0000000116b4430e: mov    %rdi,0x40(%rsp)
  0x0000000116b44313: mov    %r8,0x38(%rsp)
  0x0000000116b44318: mov    %r9,0x30(%rsp)
  0x0000000116b4431d: mov    %r10,0x28(%rsp)
  0x0000000116b44322: mov    %r11,0x20(%rsp)
  0x0000000116b44327: mov    %r12,0x18(%rsp)
  0x0000000116b4432c: mov    %r13,0x10(%rsp)
  0x0000000116b44331: mov    %r14,0x8(%rsp)
  0x0000000116b44336: mov    %r15,(%rsp)
  0x0000000116b4433a: movabs $0x10cc2363b,%rdi
  0x0000000116b44344: movabs $0x116b442e4,%rsi
  0x0000000116b4434e: mov    %rsp,%rdx
  0x0000000116b44351: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44355: callq  0x000000010c7dd830
  0x0000000116b4435a: hlt    
  0x0000000116b4435b: push   %r10
  0x0000000116b4435d: cmp    -0x9cfdab4(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b44364: je     0x0000000116b443e1
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4436a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4436f: sub    $0x80,%rsp
  0x0000000116b44376: mov    %rax,0x78(%rsp)
  0x0000000116b4437b: mov    %rcx,0x70(%rsp)
  0x0000000116b44380: mov    %rdx,0x68(%rsp)
  0x0000000116b44385: mov    %rbx,0x60(%rsp)
  0x0000000116b4438a: mov    %rbp,0x50(%rsp)
  0x0000000116b4438f: mov    %rsi,0x48(%rsp)
  0x0000000116b44394: mov    %rdi,0x40(%rsp)
  0x0000000116b44399: mov    %r8,0x38(%rsp)
  0x0000000116b4439e: mov    %r9,0x30(%rsp)
  0x0000000116b443a3: mov    %r10,0x28(%rsp)
  0x0000000116b443a8: mov    %r11,0x20(%rsp)
  0x0000000116b443ad: mov    %r12,0x18(%rsp)
  0x0000000116b443b2: mov    %r13,0x10(%rsp)
  0x0000000116b443b7: mov    %r14,0x8(%rsp)
  0x0000000116b443bc: mov    %r15,(%rsp)
  0x0000000116b443c0: movabs $0x10cc63f17,%rdi
  0x0000000116b443ca: movabs $0x116b4436a,%rsi
  0x0000000116b443d4: mov    %rsp,%rdx
  0x0000000116b443d7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b443db: callq  0x000000010c7dd830
  0x0000000116b443e0: hlt    
  0x0000000116b443e1: pop    %r10
  0x0000000116b443e3: mov    %r15,%rdi
  0x0000000116b443e6: mov    %rbp,0x290(%r15)
  0x0000000116b443ed: mov    %rax,0x280(%r15)
  0x0000000116b443f4: test   $0xf,%esp
  0x0000000116b443fa: je     0x0000000116b44412
  0x0000000116b44400: sub    $0x8,%rsp
  0x0000000116b44404: callq  0x000000010c5881a0
  0x0000000116b44409: add    $0x8,%rsp
  0x0000000116b4440d: jmpq   0x0000000116b44417
  0x0000000116b44412: callq  0x000000010c5881a0
  0x0000000116b44417: push   %rax
  0x0000000116b44418: push   %rdi
  0x0000000116b44419: push   %rsi
  0x0000000116b4441a: push   %rdx
  0x0000000116b4441b: push   %rcx
  0x0000000116b4441c: push   %r8
  0x0000000116b4441e: push   %r9
  0x0000000116b44420: push   %r10
  0x0000000116b44422: mov    %rsp,%r10
  0x0000000116b44425: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44429: push   %r10
  0x0000000116b4442b: push   %r11
  0x0000000116b4442d: mov    $0x109,%edi
  0x0000000116b44432: movabs $0x7ff815049fd5,%r10
  0x0000000116b4443c: callq  *%r10
  0x0000000116b4443f: pop    %r11
  0x0000000116b44441: pop    %rsp
  0x0000000116b44442: pop    %r10
  0x0000000116b44444: pop    %r9
  0x0000000116b44446: pop    %r8
  0x0000000116b44448: pop    %rcx
  0x0000000116b44449: pop    %rdx
  0x0000000116b4444a: pop    %rsi
  0x0000000116b4444b: pop    %rdi
  0x0000000116b4444c: cmp    %rax,%r15
  0x0000000116b4444f: je     0x0000000116b444cc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b44455: mov    %rsp,-0x28(%rsp)
  0x0000000116b4445a: sub    $0x80,%rsp
  0x0000000116b44461: mov    %rax,0x78(%rsp)
  0x0000000116b44466: mov    %rcx,0x70(%rsp)
  0x0000000116b4446b: mov    %rdx,0x68(%rsp)
  0x0000000116b44470: mov    %rbx,0x60(%rsp)
  0x0000000116b44475: mov    %rbp,0x50(%rsp)
  0x0000000116b4447a: mov    %rsi,0x48(%rsp)
  0x0000000116b4447f: mov    %rdi,0x40(%rsp)
  0x0000000116b44484: mov    %r8,0x38(%rsp)
  0x0000000116b44489: mov    %r9,0x30(%rsp)
  0x0000000116b4448e: mov    %r10,0x28(%rsp)
  0x0000000116b44493: mov    %r11,0x20(%rsp)
  0x0000000116b44498: mov    %r12,0x18(%rsp)
  0x0000000116b4449d: mov    %r13,0x10(%rsp)
  0x0000000116b444a2: mov    %r14,0x8(%rsp)
  0x0000000116b444a7: mov    %r15,(%rsp)
  0x0000000116b444ab: movabs $0x10cc6405e,%rdi
  0x0000000116b444b5: movabs $0x116b44455,%rsi
  0x0000000116b444bf: mov    %rsp,%rdx
  0x0000000116b444c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b444c6: callq  0x000000010c7dd830
  0x0000000116b444cb: hlt    
  0x0000000116b444cc: pop    %rax
  0x0000000116b444cd: movabs $0x0,%r10
  0x0000000116b444d7: mov    %r10,0x280(%r15)
  0x0000000116b444de: movabs $0x0,%r10
  0x0000000116b444e8: mov    %r10,0x290(%r15)
  0x0000000116b444ef: movabs $0x0,%r10
  0x0000000116b444f9: mov    %r10,0x288(%r15)
  0x0000000116b44500: cmpq   $0x0,0x8(%r15)
  0x0000000116b44508: je     0x0000000116b44513
  0x0000000116b4450e: jmpq   0x0000000116b30420
  0x0000000116b44513: mov    -0x38(%rbp),%r13
  0x0000000116b44517: mov    -0x30(%rbp),%r14
  0x0000000116b4451b: retq   
  0x0000000116b4451c: mov    %rsp,-0x28(%rsp)
  0x0000000116b44521: sub    $0x80,%rsp
  0x0000000116b44528: mov    %rax,0x78(%rsp)
  0x0000000116b4452d: mov    %rcx,0x70(%rsp)
  0x0000000116b44532: mov    %rdx,0x68(%rsp)
  0x0000000116b44537: mov    %rbx,0x60(%rsp)
  0x0000000116b4453c: mov    %rbp,0x50(%rsp)
  0x0000000116b44541: mov    %rsi,0x48(%rsp)
  0x0000000116b44546: mov    %rdi,0x40(%rsp)
  0x0000000116b4454b: mov    %r8,0x38(%rsp)
  0x0000000116b44550: mov    %r9,0x30(%rsp)
  0x0000000116b44555: mov    %r10,0x28(%rsp)
  0x0000000116b4455a: mov    %r11,0x20(%rsp)
  0x0000000116b4455f: mov    %r12,0x18(%rsp)
  0x0000000116b44564: mov    %r13,0x10(%rsp)
  0x0000000116b44569: mov    %r14,0x8(%rsp)
  0x0000000116b4456e: mov    %r15,(%rsp)
  0x0000000116b44572: movabs $0x10cb763be,%rdi
  0x0000000116b4457c: movabs $0x116b4451c,%rsi
  0x0000000116b44586: mov    %rsp,%rdx
  0x0000000116b44589: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4458d: callq  0x000000010c7dd830
  0x0000000116b44592: hlt    
  0x0000000116b44593: movzbl 0x4(%r13),%ebx
  0x0000000116b44598: add    $0x4,%r13
  0x0000000116b4459c: movabs $0x10ce38e80,%r10
  0x0000000116b445a6: jmpq   *(%r10,%rbx,8)
  0x0000000116b445aa: movq   $0x0,-0x10(%rbp)
  0x0000000116b445b2: mov    -0x38(%rbp),%r13
  0x0000000116b445b6: mov    -0x30(%rbp),%r14
  0x0000000116b445ba: cmpq   $0x0,0x8(%r15)
  0x0000000116b445c2: je     0x0000000116b44898
  0x0000000116b445c8: callq  0x0000000116b445d2
  0x0000000116b445cd: jmpq   0x0000000116b44821
  0x0000000116b445d2: lea    0x8(%rsp),%rax
  0x0000000116b445d7: mov    %r13,-0x38(%rbp)
  0x0000000116b445db: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b445e3: je     0x0000000116b44660
  0x0000000116b445e9: mov    %rsp,-0x28(%rsp)
  0x0000000116b445ee: sub    $0x80,%rsp
  0x0000000116b445f5: mov    %rax,0x78(%rsp)
  0x0000000116b445fa: mov    %rcx,0x70(%rsp)
  0x0000000116b445ff: mov    %rdx,0x68(%rsp)
  0x0000000116b44604: mov    %rbx,0x60(%rsp)
  0x0000000116b44609: mov    %rbp,0x50(%rsp)
  0x0000000116b4460e: mov    %rsi,0x48(%rsp)
  0x0000000116b44613: mov    %rdi,0x40(%rsp)
  0x0000000116b44618: mov    %r8,0x38(%rsp)
  0x0000000116b4461d: mov    %r9,0x30(%rsp)
  0x0000000116b44622: mov    %r10,0x28(%rsp)
  0x0000000116b44627: mov    %r11,0x20(%rsp)
  0x0000000116b4462c: mov    %r12,0x18(%rsp)
  0x0000000116b44631: mov    %r13,0x10(%rsp)
  0x0000000116b44636: mov    %r14,0x8(%rsp)
  0x0000000116b4463b: mov    %r15,(%rsp)
  0x0000000116b4463f: movabs $0x10cc2363b,%rdi
  0x0000000116b44649: movabs $0x116b445e9,%rsi
  0x0000000116b44653: mov    %rsp,%rdx
  0x0000000116b44656: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4465a: callq  0x000000010c7dd830
  0x0000000116b4465f: hlt    
  0x0000000116b44660: push   %r10
  0x0000000116b44662: cmp    -0x9cfddb9(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b44669: je     0x0000000116b446e6
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4466f: mov    %rsp,-0x28(%rsp)
  0x0000000116b44674: sub    $0x80,%rsp
  0x0000000116b4467b: mov    %rax,0x78(%rsp)
  0x0000000116b44680: mov    %rcx,0x70(%rsp)
  0x0000000116b44685: mov    %rdx,0x68(%rsp)
  0x0000000116b4468a: mov    %rbx,0x60(%rsp)
  0x0000000116b4468f: mov    %rbp,0x50(%rsp)
  0x0000000116b44694: mov    %rsi,0x48(%rsp)
  0x0000000116b44699: mov    %rdi,0x40(%rsp)
  0x0000000116b4469e: mov    %r8,0x38(%rsp)
  0x0000000116b446a3: mov    %r9,0x30(%rsp)
  0x0000000116b446a8: mov    %r10,0x28(%rsp)
  0x0000000116b446ad: mov    %r11,0x20(%rsp)
  0x0000000116b446b2: mov    %r12,0x18(%rsp)
  0x0000000116b446b7: mov    %r13,0x10(%rsp)
  0x0000000116b446bc: mov    %r14,0x8(%rsp)
  0x0000000116b446c1: mov    %r15,(%rsp)
  0x0000000116b446c5: movabs $0x10cc63f17,%rdi
  0x0000000116b446cf: movabs $0x116b4466f,%rsi
  0x0000000116b446d9: mov    %rsp,%rdx
  0x0000000116b446dc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b446e0: callq  0x000000010c7dd830
  0x0000000116b446e5: hlt    
  0x0000000116b446e6: pop    %r10
  0x0000000116b446e8: mov    %r15,%rdi
  0x0000000116b446eb: mov    %rbp,0x290(%r15)
  0x0000000116b446f2: mov    %rax,0x280(%r15)
  0x0000000116b446f9: test   $0xf,%esp
  0x0000000116b446ff: je     0x0000000116b44717
  0x0000000116b44705: sub    $0x8,%rsp
  0x0000000116b44709: callq  0x000000010c5881a0
  0x0000000116b4470e: add    $0x8,%rsp
  0x0000000116b44712: jmpq   0x0000000116b4471c
  0x0000000116b44717: callq  0x000000010c5881a0
  0x0000000116b4471c: push   %rax
  0x0000000116b4471d: push   %rdi
  0x0000000116b4471e: push   %rsi
  0x0000000116b4471f: push   %rdx
  0x0000000116b44720: push   %rcx
  0x0000000116b44721: push   %r8
  0x0000000116b44723: push   %r9
  0x0000000116b44725: push   %r10
  0x0000000116b44727: mov    %rsp,%r10
  0x0000000116b4472a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4472e: push   %r10
  0x0000000116b44730: push   %r11
  0x0000000116b44732: mov    $0x109,%edi
  0x0000000116b44737: movabs $0x7ff815049fd5,%r10
  0x0000000116b44741: callq  *%r10
  0x0000000116b44744: pop    %r11
  0x0000000116b44746: pop    %rsp
  0x0000000116b44747: pop    %r10
  0x0000000116b44749: pop    %r9
  0x0000000116b4474b: pop    %r8
  0x0000000116b4474d: pop    %rcx
  0x0000000116b4474e: pop    %rdx
  0x0000000116b4474f: pop    %rsi
  0x0000000116b44750: pop    %rdi
  0x0000000116b44751: cmp    %rax,%r15
  0x0000000116b44754: je     0x0000000116b447d1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4475a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4475f: sub    $0x80,%rsp
  0x0000000116b44766: mov    %rax,0x78(%rsp)
  0x0000000116b4476b: mov    %rcx,0x70(%rsp)
  0x0000000116b44770: mov    %rdx,0x68(%rsp)
  0x0000000116b44775: mov    %rbx,0x60(%rsp)
  0x0000000116b4477a: mov    %rbp,0x50(%rsp)
  0x0000000116b4477f: mov    %rsi,0x48(%rsp)
  0x0000000116b44784: mov    %rdi,0x40(%rsp)
  0x0000000116b44789: mov    %r8,0x38(%rsp)
  0x0000000116b4478e: mov    %r9,0x30(%rsp)
  0x0000000116b44793: mov    %r10,0x28(%rsp)
  0x0000000116b44798: mov    %r11,0x20(%rsp)
  0x0000000116b4479d: mov    %r12,0x18(%rsp)
  0x0000000116b447a2: mov    %r13,0x10(%rsp)
  0x0000000116b447a7: mov    %r14,0x8(%rsp)
  0x0000000116b447ac: mov    %r15,(%rsp)
  0x0000000116b447b0: movabs $0x10cc6405e,%rdi
  0x0000000116b447ba: movabs $0x116b4475a,%rsi
  0x0000000116b447c4: mov    %rsp,%rdx
  0x0000000116b447c7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b447cb: callq  0x000000010c7dd830
  0x0000000116b447d0: hlt    
  0x0000000116b447d1: pop    %rax
  0x0000000116b447d2: movabs $0x0,%r10
  0x0000000116b447dc: mov    %r10,0x280(%r15)
  0x0000000116b447e3: movabs $0x0,%r10
  0x0000000116b447ed: mov    %r10,0x290(%r15)
  0x0000000116b447f4: movabs $0x0,%r10
  0x0000000116b447fe: mov    %r10,0x288(%r15)
  0x0000000116b44805: cmpq   $0x0,0x8(%r15)
  0x0000000116b4480d: je     0x0000000116b44818
  0x0000000116b44813: jmpq   0x0000000116b30420
  0x0000000116b44818: mov    -0x38(%rbp),%r13
  0x0000000116b4481c: mov    -0x30(%rbp),%r14
  0x0000000116b44820: retq   
  0x0000000116b44821: mov    %rsp,-0x28(%rsp)
  0x0000000116b44826: sub    $0x80,%rsp
  0x0000000116b4482d: mov    %rax,0x78(%rsp)
  0x0000000116b44832: mov    %rcx,0x70(%rsp)
  0x0000000116b44837: mov    %rdx,0x68(%rsp)
  0x0000000116b4483c: mov    %rbx,0x60(%rsp)
  0x0000000116b44841: mov    %rbp,0x50(%rsp)
  0x0000000116b44846: mov    %rsi,0x48(%rsp)
  0x0000000116b4484b: mov    %rdi,0x40(%rsp)
  0x0000000116b44850: mov    %r8,0x38(%rsp)
  0x0000000116b44855: mov    %r9,0x30(%rsp)
  0x0000000116b4485a: mov    %r10,0x28(%rsp)
  0x0000000116b4485f: mov    %r11,0x20(%rsp)
  0x0000000116b44864: mov    %r12,0x18(%rsp)
  0x0000000116b44869: mov    %r13,0x10(%rsp)
  0x0000000116b4486e: mov    %r14,0x8(%rsp)
  0x0000000116b44873: mov    %r15,(%rsp)
  0x0000000116b44877: movabs $0x10cb763be,%rdi
  0x0000000116b44881: movabs $0x116b44821,%rsi
  0x0000000116b4488b: mov    %rsp,%rdx
  0x0000000116b4488e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44892: callq  0x000000010c7dd830
  0x0000000116b44897: hlt    
  0x0000000116b44898: movzbl 0x4(%r13),%ebx
  0x0000000116b4489d: add    $0x4,%r13
  0x0000000116b448a1: movabs $0x10ce3ae80,%r10
  0x0000000116b448ab: jmpq   *(%r10,%rbx,8)
  0x0000000116b448af: movq   $0x0,-0x10(%rbp)
  0x0000000116b448b7: mov    -0x38(%rbp),%r13
  0x0000000116b448bb: mov    -0x30(%rbp),%r14
  0x0000000116b448bf: cmpq   $0x0,0x8(%r15)
  0x0000000116b448c7: je     0x0000000116b44b9d
  0x0000000116b448cd: callq  0x0000000116b448d7
  0x0000000116b448d2: jmpq   0x0000000116b44b26
  0x0000000116b448d7: lea    0x8(%rsp),%rax
  0x0000000116b448dc: mov    %r13,-0x38(%rbp)
  0x0000000116b448e0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b448e8: je     0x0000000116b44965
  0x0000000116b448ee: mov    %rsp,-0x28(%rsp)
  0x0000000116b448f3: sub    $0x80,%rsp
  0x0000000116b448fa: mov    %rax,0x78(%rsp)
  0x0000000116b448ff: mov    %rcx,0x70(%rsp)
  0x0000000116b44904: mov    %rdx,0x68(%rsp)
  0x0000000116b44909: mov    %rbx,0x60(%rsp)
  0x0000000116b4490e: mov    %rbp,0x50(%rsp)
  0x0000000116b44913: mov    %rsi,0x48(%rsp)
  0x0000000116b44918: mov    %rdi,0x40(%rsp)
  0x0000000116b4491d: mov    %r8,0x38(%rsp)
  0x0000000116b44922: mov    %r9,0x30(%rsp)
  0x0000000116b44927: mov    %r10,0x28(%rsp)
  0x0000000116b4492c: mov    %r11,0x20(%rsp)
  0x0000000116b44931: mov    %r12,0x18(%rsp)
  0x0000000116b44936: mov    %r13,0x10(%rsp)
  0x0000000116b4493b: mov    %r14,0x8(%rsp)
  0x0000000116b44940: mov    %r15,(%rsp)
  0x0000000116b44944: movabs $0x10cc2363b,%rdi
  0x0000000116b4494e: movabs $0x116b448ee,%rsi
  0x0000000116b44958: mov    %rsp,%rdx
  0x0000000116b4495b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4495f: callq  0x000000010c7dd830
  0x0000000116b44964: hlt    
  0x0000000116b44965: push   %r10
  0x0000000116b44967: cmp    -0x9cfe0be(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4496e: je     0x0000000116b449eb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b44974: mov    %rsp,-0x28(%rsp)
  0x0000000116b44979: sub    $0x80,%rsp
  0x0000000116b44980: mov    %rax,0x78(%rsp)
  0x0000000116b44985: mov    %rcx,0x70(%rsp)
  0x0000000116b4498a: mov    %rdx,0x68(%rsp)
  0x0000000116b4498f: mov    %rbx,0x60(%rsp)
  0x0000000116b44994: mov    %rbp,0x50(%rsp)
  0x0000000116b44999: mov    %rsi,0x48(%rsp)
  0x0000000116b4499e: mov    %rdi,0x40(%rsp)
  0x0000000116b449a3: mov    %r8,0x38(%rsp)
  0x0000000116b449a8: mov    %r9,0x30(%rsp)
  0x0000000116b449ad: mov    %r10,0x28(%rsp)
  0x0000000116b449b2: mov    %r11,0x20(%rsp)
  0x0000000116b449b7: mov    %r12,0x18(%rsp)
  0x0000000116b449bc: mov    %r13,0x10(%rsp)
  0x0000000116b449c1: mov    %r14,0x8(%rsp)
  0x0000000116b449c6: mov    %r15,(%rsp)
  0x0000000116b449ca: movabs $0x10cc63f17,%rdi
  0x0000000116b449d4: movabs $0x116b44974,%rsi
  0x0000000116b449de: mov    %rsp,%rdx
  0x0000000116b449e1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b449e5: callq  0x000000010c7dd830
  0x0000000116b449ea: hlt    
  0x0000000116b449eb: pop    %r10
  0x0000000116b449ed: mov    %r15,%rdi
  0x0000000116b449f0: mov    %rbp,0x290(%r15)
  0x0000000116b449f7: mov    %rax,0x280(%r15)
  0x0000000116b449fe: test   $0xf,%esp
  0x0000000116b44a04: je     0x0000000116b44a1c
  0x0000000116b44a0a: sub    $0x8,%rsp
  0x0000000116b44a0e: callq  0x000000010c5881a0
  0x0000000116b44a13: add    $0x8,%rsp
  0x0000000116b44a17: jmpq   0x0000000116b44a21
  0x0000000116b44a1c: callq  0x000000010c5881a0
  0x0000000116b44a21: push   %rax
  0x0000000116b44a22: push   %rdi
  0x0000000116b44a23: push   %rsi
  0x0000000116b44a24: push   %rdx
  0x0000000116b44a25: push   %rcx
  0x0000000116b44a26: push   %r8
  0x0000000116b44a28: push   %r9
  0x0000000116b44a2a: push   %r10
  0x0000000116b44a2c: mov    %rsp,%r10
  0x0000000116b44a2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44a33: push   %r10
  0x0000000116b44a35: push   %r11
  0x0000000116b44a37: mov    $0x109,%edi
  0x0000000116b44a3c: movabs $0x7ff815049fd5,%r10
  0x0000000116b44a46: callq  *%r10
  0x0000000116b44a49: pop    %r11
  0x0000000116b44a4b: pop    %rsp
  0x0000000116b44a4c: pop    %r10
  0x0000000116b44a4e: pop    %r9
  0x0000000116b44a50: pop    %r8
  0x0000000116b44a52: pop    %rcx
  0x0000000116b44a53: pop    %rdx
  0x0000000116b44a54: pop    %rsi
  0x0000000116b44a55: pop    %rdi
  0x0000000116b44a56: cmp    %rax,%r15
  0x0000000116b44a59: je     0x0000000116b44ad6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b44a5f: mov    %rsp,-0x28(%rsp)
  0x0000000116b44a64: sub    $0x80,%rsp
  0x0000000116b44a6b: mov    %rax,0x78(%rsp)
  0x0000000116b44a70: mov    %rcx,0x70(%rsp)
  0x0000000116b44a75: mov    %rdx,0x68(%rsp)
  0x0000000116b44a7a: mov    %rbx,0x60(%rsp)
  0x0000000116b44a7f: mov    %rbp,0x50(%rsp)
  0x0000000116b44a84: mov    %rsi,0x48(%rsp)
  0x0000000116b44a89: mov    %rdi,0x40(%rsp)
  0x0000000116b44a8e: mov    %r8,0x38(%rsp)
  0x0000000116b44a93: mov    %r9,0x30(%rsp)
  0x0000000116b44a98: mov    %r10,0x28(%rsp)
  0x0000000116b44a9d: mov    %r11,0x20(%rsp)
  0x0000000116b44aa2: mov    %r12,0x18(%rsp)
  0x0000000116b44aa7: mov    %r13,0x10(%rsp)
  0x0000000116b44aac: mov    %r14,0x8(%rsp)
  0x0000000116b44ab1: mov    %r15,(%rsp)
  0x0000000116b44ab5: movabs $0x10cc6405e,%rdi
  0x0000000116b44abf: movabs $0x116b44a5f,%rsi
  0x0000000116b44ac9: mov    %rsp,%rdx
  0x0000000116b44acc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44ad0: callq  0x000000010c7dd830
  0x0000000116b44ad5: hlt    
  0x0000000116b44ad6: pop    %rax
  0x0000000116b44ad7: movabs $0x0,%r10
  0x0000000116b44ae1: mov    %r10,0x280(%r15)
  0x0000000116b44ae8: movabs $0x0,%r10
  0x0000000116b44af2: mov    %r10,0x290(%r15)
  0x0000000116b44af9: movabs $0x0,%r10
  0x0000000116b44b03: mov    %r10,0x288(%r15)
  0x0000000116b44b0a: cmpq   $0x0,0x8(%r15)
  0x0000000116b44b12: je     0x0000000116b44b1d
  0x0000000116b44b18: jmpq   0x0000000116b30420
  0x0000000116b44b1d: mov    -0x38(%rbp),%r13
  0x0000000116b44b21: mov    -0x30(%rbp),%r14
  0x0000000116b44b25: retq   
  0x0000000116b44b26: mov    %rsp,-0x28(%rsp)
  0x0000000116b44b2b: sub    $0x80,%rsp
  0x0000000116b44b32: mov    %rax,0x78(%rsp)
  0x0000000116b44b37: mov    %rcx,0x70(%rsp)
  0x0000000116b44b3c: mov    %rdx,0x68(%rsp)
  0x0000000116b44b41: mov    %rbx,0x60(%rsp)
  0x0000000116b44b46: mov    %rbp,0x50(%rsp)
  0x0000000116b44b4b: mov    %rsi,0x48(%rsp)
  0x0000000116b44b50: mov    %rdi,0x40(%rsp)
  0x0000000116b44b55: mov    %r8,0x38(%rsp)
  0x0000000116b44b5a: mov    %r9,0x30(%rsp)
  0x0000000116b44b5f: mov    %r10,0x28(%rsp)
  0x0000000116b44b64: mov    %r11,0x20(%rsp)
  0x0000000116b44b69: mov    %r12,0x18(%rsp)
  0x0000000116b44b6e: mov    %r13,0x10(%rsp)
  0x0000000116b44b73: mov    %r14,0x8(%rsp)
  0x0000000116b44b78: mov    %r15,(%rsp)
  0x0000000116b44b7c: movabs $0x10cb763be,%rdi
  0x0000000116b44b86: movabs $0x116b44b26,%rsi
  0x0000000116b44b90: mov    %rsp,%rdx
  0x0000000116b44b93: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44b97: callq  0x000000010c7dd830
  0x0000000116b44b9c: hlt    
  0x0000000116b44b9d: movzbl 0x4(%r13),%ebx
  0x0000000116b44ba2: add    $0x4,%r13
  0x0000000116b44ba6: movabs $0x10ce38e80,%r10
  0x0000000116b44bb0: jmpq   *(%r10,%rbx,8)
  0x0000000116b44bb4: movq   $0x0,-0x10(%rbp)
  0x0000000116b44bbc: mov    -0x38(%rbp),%r13
  0x0000000116b44bc0: mov    -0x30(%rbp),%r14
  0x0000000116b44bc4: cmpq   $0x0,0x8(%r15)
  0x0000000116b44bcc: je     0x0000000116b44ea2
  0x0000000116b44bd2: callq  0x0000000116b44bdc
  0x0000000116b44bd7: jmpq   0x0000000116b44e2b
  0x0000000116b44bdc: lea    0x8(%rsp),%rax
  0x0000000116b44be1: mov    %r13,-0x38(%rbp)
  0x0000000116b44be5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b44bed: je     0x0000000116b44c6a
  0x0000000116b44bf3: mov    %rsp,-0x28(%rsp)
  0x0000000116b44bf8: sub    $0x80,%rsp
  0x0000000116b44bff: mov    %rax,0x78(%rsp)
  0x0000000116b44c04: mov    %rcx,0x70(%rsp)
  0x0000000116b44c09: mov    %rdx,0x68(%rsp)
  0x0000000116b44c0e: mov    %rbx,0x60(%rsp)
  0x0000000116b44c13: mov    %rbp,0x50(%rsp)
  0x0000000116b44c18: mov    %rsi,0x48(%rsp)
  0x0000000116b44c1d: mov    %rdi,0x40(%rsp)
  0x0000000116b44c22: mov    %r8,0x38(%rsp)
  0x0000000116b44c27: mov    %r9,0x30(%rsp)
  0x0000000116b44c2c: mov    %r10,0x28(%rsp)
  0x0000000116b44c31: mov    %r11,0x20(%rsp)
  0x0000000116b44c36: mov    %r12,0x18(%rsp)
  0x0000000116b44c3b: mov    %r13,0x10(%rsp)
  0x0000000116b44c40: mov    %r14,0x8(%rsp)
  0x0000000116b44c45: mov    %r15,(%rsp)
  0x0000000116b44c49: movabs $0x10cc2363b,%rdi
  0x0000000116b44c53: movabs $0x116b44bf3,%rsi
  0x0000000116b44c5d: mov    %rsp,%rdx
  0x0000000116b44c60: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44c64: callq  0x000000010c7dd830
  0x0000000116b44c69: hlt    
  0x0000000116b44c6a: push   %r10
  0x0000000116b44c6c: cmp    -0x9cfe3c3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b44c73: je     0x0000000116b44cf0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b44c79: mov    %rsp,-0x28(%rsp)
  0x0000000116b44c7e: sub    $0x80,%rsp
  0x0000000116b44c85: mov    %rax,0x78(%rsp)
  0x0000000116b44c8a: mov    %rcx,0x70(%rsp)
  0x0000000116b44c8f: mov    %rdx,0x68(%rsp)
  0x0000000116b44c94: mov    %rbx,0x60(%rsp)
  0x0000000116b44c99: mov    %rbp,0x50(%rsp)
  0x0000000116b44c9e: mov    %rsi,0x48(%rsp)
  0x0000000116b44ca3: mov    %rdi,0x40(%rsp)
  0x0000000116b44ca8: mov    %r8,0x38(%rsp)
  0x0000000116b44cad: mov    %r9,0x30(%rsp)
  0x0000000116b44cb2: mov    %r10,0x28(%rsp)
  0x0000000116b44cb7: mov    %r11,0x20(%rsp)
  0x0000000116b44cbc: mov    %r12,0x18(%rsp)
  0x0000000116b44cc1: mov    %r13,0x10(%rsp)
  0x0000000116b44cc6: mov    %r14,0x8(%rsp)
  0x0000000116b44ccb: mov    %r15,(%rsp)
  0x0000000116b44ccf: movabs $0x10cc63f17,%rdi
  0x0000000116b44cd9: movabs $0x116b44c79,%rsi
  0x0000000116b44ce3: mov    %rsp,%rdx
  0x0000000116b44ce6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44cea: callq  0x000000010c7dd830
  0x0000000116b44cef: hlt    
  0x0000000116b44cf0: pop    %r10
  0x0000000116b44cf2: mov    %r15,%rdi
  0x0000000116b44cf5: mov    %rbp,0x290(%r15)
  0x0000000116b44cfc: mov    %rax,0x280(%r15)
  0x0000000116b44d03: test   $0xf,%esp
  0x0000000116b44d09: je     0x0000000116b44d21
  0x0000000116b44d0f: sub    $0x8,%rsp
  0x0000000116b44d13: callq  0x000000010c5881a0
  0x0000000116b44d18: add    $0x8,%rsp
  0x0000000116b44d1c: jmpq   0x0000000116b44d26
  0x0000000116b44d21: callq  0x000000010c5881a0
  0x0000000116b44d26: push   %rax
  0x0000000116b44d27: push   %rdi
  0x0000000116b44d28: push   %rsi
  0x0000000116b44d29: push   %rdx
  0x0000000116b44d2a: push   %rcx
  0x0000000116b44d2b: push   %r8
  0x0000000116b44d2d: push   %r9
  0x0000000116b44d2f: push   %r10
  0x0000000116b44d31: mov    %rsp,%r10
  0x0000000116b44d34: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44d38: push   %r10
  0x0000000116b44d3a: push   %r11
  0x0000000116b44d3c: mov    $0x109,%edi
  0x0000000116b44d41: movabs $0x7ff815049fd5,%r10
  0x0000000116b44d4b: callq  *%r10
  0x0000000116b44d4e: pop    %r11
  0x0000000116b44d50: pop    %rsp
  0x0000000116b44d51: pop    %r10
  0x0000000116b44d53: pop    %r9
  0x0000000116b44d55: pop    %r8
  0x0000000116b44d57: pop    %rcx
  0x0000000116b44d58: pop    %rdx
  0x0000000116b44d59: pop    %rsi
  0x0000000116b44d5a: pop    %rdi
  0x0000000116b44d5b: cmp    %rax,%r15
  0x0000000116b44d5e: je     0x0000000116b44ddb
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b44d64: mov    %rsp,-0x28(%rsp)
  0x0000000116b44d69: sub    $0x80,%rsp
  0x0000000116b44d70: mov    %rax,0x78(%rsp)
  0x0000000116b44d75: mov    %rcx,0x70(%rsp)
  0x0000000116b44d7a: mov    %rdx,0x68(%rsp)
  0x0000000116b44d7f: mov    %rbx,0x60(%rsp)
  0x0000000116b44d84: mov    %rbp,0x50(%rsp)
  0x0000000116b44d89: mov    %rsi,0x48(%rsp)
  0x0000000116b44d8e: mov    %rdi,0x40(%rsp)
  0x0000000116b44d93: mov    %r8,0x38(%rsp)
  0x0000000116b44d98: mov    %r9,0x30(%rsp)
  0x0000000116b44d9d: mov    %r10,0x28(%rsp)
  0x0000000116b44da2: mov    %r11,0x20(%rsp)
  0x0000000116b44da7: mov    %r12,0x18(%rsp)
  0x0000000116b44dac: mov    %r13,0x10(%rsp)
  0x0000000116b44db1: mov    %r14,0x8(%rsp)
  0x0000000116b44db6: mov    %r15,(%rsp)
  0x0000000116b44dba: movabs $0x10cc6405e,%rdi
  0x0000000116b44dc4: movabs $0x116b44d64,%rsi
  0x0000000116b44dce: mov    %rsp,%rdx
  0x0000000116b44dd1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44dd5: callq  0x000000010c7dd830
  0x0000000116b44dda: hlt    
  0x0000000116b44ddb: pop    %rax
  0x0000000116b44ddc: movabs $0x0,%r10
  0x0000000116b44de6: mov    %r10,0x280(%r15)
  0x0000000116b44ded: movabs $0x0,%r10
  0x0000000116b44df7: mov    %r10,0x290(%r15)
  0x0000000116b44dfe: movabs $0x0,%r10
  0x0000000116b44e08: mov    %r10,0x288(%r15)
  0x0000000116b44e0f: cmpq   $0x0,0x8(%r15)
  0x0000000116b44e17: je     0x0000000116b44e22
  0x0000000116b44e1d: jmpq   0x0000000116b30420
  0x0000000116b44e22: mov    -0x38(%rbp),%r13
  0x0000000116b44e26: mov    -0x30(%rbp),%r14
  0x0000000116b44e2a: retq   
  0x0000000116b44e2b: mov    %rsp,-0x28(%rsp)
  0x0000000116b44e30: sub    $0x80,%rsp
  0x0000000116b44e37: mov    %rax,0x78(%rsp)
  0x0000000116b44e3c: mov    %rcx,0x70(%rsp)
  0x0000000116b44e41: mov    %rdx,0x68(%rsp)
  0x0000000116b44e46: mov    %rbx,0x60(%rsp)
  0x0000000116b44e4b: mov    %rbp,0x50(%rsp)
  0x0000000116b44e50: mov    %rsi,0x48(%rsp)
  0x0000000116b44e55: mov    %rdi,0x40(%rsp)
  0x0000000116b44e5a: mov    %r8,0x38(%rsp)
  0x0000000116b44e5f: mov    %r9,0x30(%rsp)
  0x0000000116b44e64: mov    %r10,0x28(%rsp)
  0x0000000116b44e69: mov    %r11,0x20(%rsp)
  0x0000000116b44e6e: mov    %r12,0x18(%rsp)
  0x0000000116b44e73: mov    %r13,0x10(%rsp)
  0x0000000116b44e78: mov    %r14,0x8(%rsp)
  0x0000000116b44e7d: mov    %r15,(%rsp)
  0x0000000116b44e81: movabs $0x10cb763be,%rdi
  0x0000000116b44e8b: movabs $0x116b44e2b,%rsi
  0x0000000116b44e95: mov    %rsp,%rdx
  0x0000000116b44e98: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44e9c: callq  0x000000010c7dd830
  0x0000000116b44ea1: hlt    
  0x0000000116b44ea2: movzbl 0x4(%r13),%ebx
  0x0000000116b44ea7: add    $0x4,%r13
  0x0000000116b44eab: movabs $0x10ce39680,%r10
  0x0000000116b44eb5: jmpq   *(%r10,%rbx,8)
  0x0000000116b44eb9: movq   $0x0,-0x10(%rbp)
  0x0000000116b44ec1: mov    -0x38(%rbp),%r13
  0x0000000116b44ec5: mov    -0x30(%rbp),%r14
  0x0000000116b44ec9: cmpq   $0x0,0x8(%r15)
  0x0000000116b44ed1: je     0x0000000116b451a7
  0x0000000116b44ed7: callq  0x0000000116b44ee1
  0x0000000116b44edc: jmpq   0x0000000116b45130
  0x0000000116b44ee1: lea    0x8(%rsp),%rax
  0x0000000116b44ee6: mov    %r13,-0x38(%rbp)
  0x0000000116b44eea: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b44ef2: je     0x0000000116b44f6f
  0x0000000116b44ef8: mov    %rsp,-0x28(%rsp)
  0x0000000116b44efd: sub    $0x80,%rsp
  0x0000000116b44f04: mov    %rax,0x78(%rsp)
  0x0000000116b44f09: mov    %rcx,0x70(%rsp)
  0x0000000116b44f0e: mov    %rdx,0x68(%rsp)
  0x0000000116b44f13: mov    %rbx,0x60(%rsp)
  0x0000000116b44f18: mov    %rbp,0x50(%rsp)
  0x0000000116b44f1d: mov    %rsi,0x48(%rsp)
  0x0000000116b44f22: mov    %rdi,0x40(%rsp)
  0x0000000116b44f27: mov    %r8,0x38(%rsp)
  0x0000000116b44f2c: mov    %r9,0x30(%rsp)
  0x0000000116b44f31: mov    %r10,0x28(%rsp)
  0x0000000116b44f36: mov    %r11,0x20(%rsp)
  0x0000000116b44f3b: mov    %r12,0x18(%rsp)
  0x0000000116b44f40: mov    %r13,0x10(%rsp)
  0x0000000116b44f45: mov    %r14,0x8(%rsp)
  0x0000000116b44f4a: mov    %r15,(%rsp)
  0x0000000116b44f4e: movabs $0x10cc2363b,%rdi
  0x0000000116b44f58: movabs $0x116b44ef8,%rsi
  0x0000000116b44f62: mov    %rsp,%rdx
  0x0000000116b44f65: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44f69: callq  0x000000010c7dd830
  0x0000000116b44f6e: hlt    
  0x0000000116b44f6f: push   %r10
  0x0000000116b44f71: cmp    -0x9cfe6c8(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b44f78: je     0x0000000116b44ff5
  ;; call_VM_base: heap base corrupted?
  0x0000000116b44f7e: mov    %rsp,-0x28(%rsp)
  0x0000000116b44f83: sub    $0x80,%rsp
  0x0000000116b44f8a: mov    %rax,0x78(%rsp)
  0x0000000116b44f8f: mov    %rcx,0x70(%rsp)
  0x0000000116b44f94: mov    %rdx,0x68(%rsp)
  0x0000000116b44f99: mov    %rbx,0x60(%rsp)
  0x0000000116b44f9e: mov    %rbp,0x50(%rsp)
  0x0000000116b44fa3: mov    %rsi,0x48(%rsp)
  0x0000000116b44fa8: mov    %rdi,0x40(%rsp)
  0x0000000116b44fad: mov    %r8,0x38(%rsp)
  0x0000000116b44fb2: mov    %r9,0x30(%rsp)
  0x0000000116b44fb7: mov    %r10,0x28(%rsp)
  0x0000000116b44fbc: mov    %r11,0x20(%rsp)
  0x0000000116b44fc1: mov    %r12,0x18(%rsp)
  0x0000000116b44fc6: mov    %r13,0x10(%rsp)
  0x0000000116b44fcb: mov    %r14,0x8(%rsp)
  0x0000000116b44fd0: mov    %r15,(%rsp)
  0x0000000116b44fd4: movabs $0x10cc63f17,%rdi
  0x0000000116b44fde: movabs $0x116b44f7e,%rsi
  0x0000000116b44fe8: mov    %rsp,%rdx
  0x0000000116b44feb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b44fef: callq  0x000000010c7dd830
  0x0000000116b44ff4: hlt    
  0x0000000116b44ff5: pop    %r10
  0x0000000116b44ff7: mov    %r15,%rdi
  0x0000000116b44ffa: mov    %rbp,0x290(%r15)
  0x0000000116b45001: mov    %rax,0x280(%r15)
  0x0000000116b45008: test   $0xf,%esp
  0x0000000116b4500e: je     0x0000000116b45026
  0x0000000116b45014: sub    $0x8,%rsp
  0x0000000116b45018: callq  0x000000010c5881a0
  0x0000000116b4501d: add    $0x8,%rsp
  0x0000000116b45021: jmpq   0x0000000116b4502b
  0x0000000116b45026: callq  0x000000010c5881a0
  0x0000000116b4502b: push   %rax
  0x0000000116b4502c: push   %rdi
  0x0000000116b4502d: push   %rsi
  0x0000000116b4502e: push   %rdx
  0x0000000116b4502f: push   %rcx
  0x0000000116b45030: push   %r8
  0x0000000116b45032: push   %r9
  0x0000000116b45034: push   %r10
  0x0000000116b45036: mov    %rsp,%r10
  0x0000000116b45039: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4503d: push   %r10
  0x0000000116b4503f: push   %r11
  0x0000000116b45041: mov    $0x109,%edi
  0x0000000116b45046: movabs $0x7ff815049fd5,%r10
  0x0000000116b45050: callq  *%r10
  0x0000000116b45053: pop    %r11
  0x0000000116b45055: pop    %rsp
  0x0000000116b45056: pop    %r10
  0x0000000116b45058: pop    %r9
  0x0000000116b4505a: pop    %r8
  0x0000000116b4505c: pop    %rcx
  0x0000000116b4505d: pop    %rdx
  0x0000000116b4505e: pop    %rsi
  0x0000000116b4505f: pop    %rdi
  0x0000000116b45060: cmp    %rax,%r15
  0x0000000116b45063: je     0x0000000116b450e0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b45069: mov    %rsp,-0x28(%rsp)
  0x0000000116b4506e: sub    $0x80,%rsp
  0x0000000116b45075: mov    %rax,0x78(%rsp)
  0x0000000116b4507a: mov    %rcx,0x70(%rsp)
  0x0000000116b4507f: mov    %rdx,0x68(%rsp)
  0x0000000116b45084: mov    %rbx,0x60(%rsp)
  0x0000000116b45089: mov    %rbp,0x50(%rsp)
  0x0000000116b4508e: mov    %rsi,0x48(%rsp)
  0x0000000116b45093: mov    %rdi,0x40(%rsp)
  0x0000000116b45098: mov    %r8,0x38(%rsp)
  0x0000000116b4509d: mov    %r9,0x30(%rsp)
  0x0000000116b450a2: mov    %r10,0x28(%rsp)
  0x0000000116b450a7: mov    %r11,0x20(%rsp)
  0x0000000116b450ac: mov    %r12,0x18(%rsp)
  0x0000000116b450b1: mov    %r13,0x10(%rsp)
  0x0000000116b450b6: mov    %r14,0x8(%rsp)
  0x0000000116b450bb: mov    %r15,(%rsp)
  0x0000000116b450bf: movabs $0x10cc6405e,%rdi
  0x0000000116b450c9: movabs $0x116b45069,%rsi
  0x0000000116b450d3: mov    %rsp,%rdx
  0x0000000116b450d6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b450da: callq  0x000000010c7dd830
  0x0000000116b450df: hlt    
  0x0000000116b450e0: pop    %rax
  0x0000000116b450e1: movabs $0x0,%r10
  0x0000000116b450eb: mov    %r10,0x280(%r15)
  0x0000000116b450f2: movabs $0x0,%r10
  0x0000000116b450fc: mov    %r10,0x290(%r15)
  0x0000000116b45103: movabs $0x0,%r10
  0x0000000116b4510d: mov    %r10,0x288(%r15)
  0x0000000116b45114: cmpq   $0x0,0x8(%r15)
  0x0000000116b4511c: je     0x0000000116b45127
  0x0000000116b45122: jmpq   0x0000000116b30420
  0x0000000116b45127: mov    -0x38(%rbp),%r13
  0x0000000116b4512b: mov    -0x30(%rbp),%r14
  0x0000000116b4512f: retq   
  0x0000000116b45130: mov    %rsp,-0x28(%rsp)
  0x0000000116b45135: sub    $0x80,%rsp
  0x0000000116b4513c: mov    %rax,0x78(%rsp)
  0x0000000116b45141: mov    %rcx,0x70(%rsp)
  0x0000000116b45146: mov    %rdx,0x68(%rsp)
  0x0000000116b4514b: mov    %rbx,0x60(%rsp)
  0x0000000116b45150: mov    %rbp,0x50(%rsp)
  0x0000000116b45155: mov    %rsi,0x48(%rsp)
  0x0000000116b4515a: mov    %rdi,0x40(%rsp)
  0x0000000116b4515f: mov    %r8,0x38(%rsp)
  0x0000000116b45164: mov    %r9,0x30(%rsp)
  0x0000000116b45169: mov    %r10,0x28(%rsp)
  0x0000000116b4516e: mov    %r11,0x20(%rsp)
  0x0000000116b45173: mov    %r12,0x18(%rsp)
  0x0000000116b45178: mov    %r13,0x10(%rsp)
  0x0000000116b4517d: mov    %r14,0x8(%rsp)
  0x0000000116b45182: mov    %r15,(%rsp)
  0x0000000116b45186: movabs $0x10cb763be,%rdi
  0x0000000116b45190: movabs $0x116b45130,%rsi
  0x0000000116b4519a: mov    %rsp,%rdx
  0x0000000116b4519d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b451a1: callq  0x000000010c7dd830
  0x0000000116b451a6: hlt    
  0x0000000116b451a7: movzbl 0x4(%r13),%ebx
  0x0000000116b451ac: add    $0x4,%r13
  0x0000000116b451b0: movabs $0x10ce39e80,%r10
  0x0000000116b451ba: jmpq   *(%r10,%rbx,8)
  0x0000000116b451be: movq   $0x0,-0x10(%rbp)
  0x0000000116b451c6: mov    -0x38(%rbp),%r13
  0x0000000116b451ca: mov    -0x30(%rbp),%r14
  0x0000000116b451ce: cmpq   $0x0,0x8(%r15)
  0x0000000116b451d6: je     0x0000000116b454ac
  0x0000000116b451dc: callq  0x0000000116b451e6
  0x0000000116b451e1: jmpq   0x0000000116b45435
  0x0000000116b451e6: lea    0x8(%rsp),%rax
  0x0000000116b451eb: mov    %r13,-0x38(%rbp)
  0x0000000116b451ef: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b451f7: je     0x0000000116b45274
  0x0000000116b451fd: mov    %rsp,-0x28(%rsp)
  0x0000000116b45202: sub    $0x80,%rsp
  0x0000000116b45209: mov    %rax,0x78(%rsp)
  0x0000000116b4520e: mov    %rcx,0x70(%rsp)
  0x0000000116b45213: mov    %rdx,0x68(%rsp)
  0x0000000116b45218: mov    %rbx,0x60(%rsp)
  0x0000000116b4521d: mov    %rbp,0x50(%rsp)
  0x0000000116b45222: mov    %rsi,0x48(%rsp)
  0x0000000116b45227: mov    %rdi,0x40(%rsp)
  0x0000000116b4522c: mov    %r8,0x38(%rsp)
  0x0000000116b45231: mov    %r9,0x30(%rsp)
  0x0000000116b45236: mov    %r10,0x28(%rsp)
  0x0000000116b4523b: mov    %r11,0x20(%rsp)
  0x0000000116b45240: mov    %r12,0x18(%rsp)
  0x0000000116b45245: mov    %r13,0x10(%rsp)
  0x0000000116b4524a: mov    %r14,0x8(%rsp)
  0x0000000116b4524f: mov    %r15,(%rsp)
  0x0000000116b45253: movabs $0x10cc2363b,%rdi
  0x0000000116b4525d: movabs $0x116b451fd,%rsi
  0x0000000116b45267: mov    %rsp,%rdx
  0x0000000116b4526a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4526e: callq  0x000000010c7dd830
  0x0000000116b45273: hlt    
  0x0000000116b45274: push   %r10
  0x0000000116b45276: cmp    -0x9cfe9cd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4527d: je     0x0000000116b452fa
  ;; call_VM_base: heap base corrupted?
  0x0000000116b45283: mov    %rsp,-0x28(%rsp)
  0x0000000116b45288: sub    $0x80,%rsp
  0x0000000116b4528f: mov    %rax,0x78(%rsp)
  0x0000000116b45294: mov    %rcx,0x70(%rsp)
  0x0000000116b45299: mov    %rdx,0x68(%rsp)
  0x0000000116b4529e: mov    %rbx,0x60(%rsp)
  0x0000000116b452a3: mov    %rbp,0x50(%rsp)
  0x0000000116b452a8: mov    %rsi,0x48(%rsp)
  0x0000000116b452ad: mov    %rdi,0x40(%rsp)
  0x0000000116b452b2: mov    %r8,0x38(%rsp)
  0x0000000116b452b7: mov    %r9,0x30(%rsp)
  0x0000000116b452bc: mov    %r10,0x28(%rsp)
  0x0000000116b452c1: mov    %r11,0x20(%rsp)
  0x0000000116b452c6: mov    %r12,0x18(%rsp)
  0x0000000116b452cb: mov    %r13,0x10(%rsp)
  0x0000000116b452d0: mov    %r14,0x8(%rsp)
  0x0000000116b452d5: mov    %r15,(%rsp)
  0x0000000116b452d9: movabs $0x10cc63f17,%rdi
  0x0000000116b452e3: movabs $0x116b45283,%rsi
  0x0000000116b452ed: mov    %rsp,%rdx
  0x0000000116b452f0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b452f4: callq  0x000000010c7dd830
  0x0000000116b452f9: hlt    
  0x0000000116b452fa: pop    %r10
  0x0000000116b452fc: mov    %r15,%rdi
  0x0000000116b452ff: mov    %rbp,0x290(%r15)
  0x0000000116b45306: mov    %rax,0x280(%r15)
  0x0000000116b4530d: test   $0xf,%esp
  0x0000000116b45313: je     0x0000000116b4532b
  0x0000000116b45319: sub    $0x8,%rsp
  0x0000000116b4531d: callq  0x000000010c5881a0
  0x0000000116b45322: add    $0x8,%rsp
  0x0000000116b45326: jmpq   0x0000000116b45330
  0x0000000116b4532b: callq  0x000000010c5881a0
  0x0000000116b45330: push   %rax
  0x0000000116b45331: push   %rdi
  0x0000000116b45332: push   %rsi
  0x0000000116b45333: push   %rdx
  0x0000000116b45334: push   %rcx
  0x0000000116b45335: push   %r8
  0x0000000116b45337: push   %r9
  0x0000000116b45339: push   %r10
  0x0000000116b4533b: mov    %rsp,%r10
  0x0000000116b4533e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45342: push   %r10
  0x0000000116b45344: push   %r11
  0x0000000116b45346: mov    $0x109,%edi
  0x0000000116b4534b: movabs $0x7ff815049fd5,%r10
  0x0000000116b45355: callq  *%r10
  0x0000000116b45358: pop    %r11
  0x0000000116b4535a: pop    %rsp
  0x0000000116b4535b: pop    %r10
  0x0000000116b4535d: pop    %r9
  0x0000000116b4535f: pop    %r8
  0x0000000116b45361: pop    %rcx
  0x0000000116b45362: pop    %rdx
  0x0000000116b45363: pop    %rsi
  0x0000000116b45364: pop    %rdi
  0x0000000116b45365: cmp    %rax,%r15
  0x0000000116b45368: je     0x0000000116b453e5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4536e: mov    %rsp,-0x28(%rsp)
  0x0000000116b45373: sub    $0x80,%rsp
  0x0000000116b4537a: mov    %rax,0x78(%rsp)
  0x0000000116b4537f: mov    %rcx,0x70(%rsp)
  0x0000000116b45384: mov    %rdx,0x68(%rsp)
  0x0000000116b45389: mov    %rbx,0x60(%rsp)
  0x0000000116b4538e: mov    %rbp,0x50(%rsp)
  0x0000000116b45393: mov    %rsi,0x48(%rsp)
  0x0000000116b45398: mov    %rdi,0x40(%rsp)
  0x0000000116b4539d: mov    %r8,0x38(%rsp)
  0x0000000116b453a2: mov    %r9,0x30(%rsp)
  0x0000000116b453a7: mov    %r10,0x28(%rsp)
  0x0000000116b453ac: mov    %r11,0x20(%rsp)
  0x0000000116b453b1: mov    %r12,0x18(%rsp)
  0x0000000116b453b6: mov    %r13,0x10(%rsp)
  0x0000000116b453bb: mov    %r14,0x8(%rsp)
  0x0000000116b453c0: mov    %r15,(%rsp)
  0x0000000116b453c4: movabs $0x10cc6405e,%rdi
  0x0000000116b453ce: movabs $0x116b4536e,%rsi
  0x0000000116b453d8: mov    %rsp,%rdx
  0x0000000116b453db: and    $0xfffffffffffffff0,%rsp
  0x0000000116b453df: callq  0x000000010c7dd830
  0x0000000116b453e4: hlt    
  0x0000000116b453e5: pop    %rax
  0x0000000116b453e6: movabs $0x0,%r10
  0x0000000116b453f0: mov    %r10,0x280(%r15)
  0x0000000116b453f7: movabs $0x0,%r10
  0x0000000116b45401: mov    %r10,0x290(%r15)
  0x0000000116b45408: movabs $0x0,%r10
  0x0000000116b45412: mov    %r10,0x288(%r15)
  0x0000000116b45419: cmpq   $0x0,0x8(%r15)
  0x0000000116b45421: je     0x0000000116b4542c
  0x0000000116b45427: jmpq   0x0000000116b30420
  0x0000000116b4542c: mov    -0x38(%rbp),%r13
  0x0000000116b45430: mov    -0x30(%rbp),%r14
  0x0000000116b45434: retq   
  0x0000000116b45435: mov    %rsp,-0x28(%rsp)
  0x0000000116b4543a: sub    $0x80,%rsp
  0x0000000116b45441: mov    %rax,0x78(%rsp)
  0x0000000116b45446: mov    %rcx,0x70(%rsp)
  0x0000000116b4544b: mov    %rdx,0x68(%rsp)
  0x0000000116b45450: mov    %rbx,0x60(%rsp)
  0x0000000116b45455: mov    %rbp,0x50(%rsp)
  0x0000000116b4545a: mov    %rsi,0x48(%rsp)
  0x0000000116b4545f: mov    %rdi,0x40(%rsp)
  0x0000000116b45464: mov    %r8,0x38(%rsp)
  0x0000000116b45469: mov    %r9,0x30(%rsp)
  0x0000000116b4546e: mov    %r10,0x28(%rsp)
  0x0000000116b45473: mov    %r11,0x20(%rsp)
  0x0000000116b45478: mov    %r12,0x18(%rsp)
  0x0000000116b4547d: mov    %r13,0x10(%rsp)
  0x0000000116b45482: mov    %r14,0x8(%rsp)
  0x0000000116b45487: mov    %r15,(%rsp)
  0x0000000116b4548b: movabs $0x10cb763be,%rdi
  0x0000000116b45495: movabs $0x116b45435,%rsi
  0x0000000116b4549f: mov    %rsp,%rdx
  0x0000000116b454a2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b454a6: callq  0x000000010c7dd830
  0x0000000116b454ab: hlt    
  0x0000000116b454ac: movzbl 0x4(%r13),%ebx
  0x0000000116b454b1: add    $0x4,%r13
  0x0000000116b454b5: movabs $0x10ce3a680,%r10
  0x0000000116b454bf: jmpq   *(%r10,%rbx,8)
  0x0000000116b454c3: movq   $0x0,-0x10(%rbp)
  0x0000000116b454cb: mov    -0x38(%rbp),%r13
  0x0000000116b454cf: mov    -0x30(%rbp),%r14
  0x0000000116b454d3: cmpq   $0x0,0x8(%r15)
  0x0000000116b454db: je     0x0000000116b457b1
  0x0000000116b454e1: callq  0x0000000116b454eb
  0x0000000116b454e6: jmpq   0x0000000116b4573a
  0x0000000116b454eb: lea    0x8(%rsp),%rax
  0x0000000116b454f0: mov    %r13,-0x38(%rbp)
  0x0000000116b454f4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b454fc: je     0x0000000116b45579
  0x0000000116b45502: mov    %rsp,-0x28(%rsp)
  0x0000000116b45507: sub    $0x80,%rsp
  0x0000000116b4550e: mov    %rax,0x78(%rsp)
  0x0000000116b45513: mov    %rcx,0x70(%rsp)
  0x0000000116b45518: mov    %rdx,0x68(%rsp)
  0x0000000116b4551d: mov    %rbx,0x60(%rsp)
  0x0000000116b45522: mov    %rbp,0x50(%rsp)
  0x0000000116b45527: mov    %rsi,0x48(%rsp)
  0x0000000116b4552c: mov    %rdi,0x40(%rsp)
  0x0000000116b45531: mov    %r8,0x38(%rsp)
  0x0000000116b45536: mov    %r9,0x30(%rsp)
  0x0000000116b4553b: mov    %r10,0x28(%rsp)
  0x0000000116b45540: mov    %r11,0x20(%rsp)
  0x0000000116b45545: mov    %r12,0x18(%rsp)
  0x0000000116b4554a: mov    %r13,0x10(%rsp)
  0x0000000116b4554f: mov    %r14,0x8(%rsp)
  0x0000000116b45554: mov    %r15,(%rsp)
  0x0000000116b45558: movabs $0x10cc2363b,%rdi
  0x0000000116b45562: movabs $0x116b45502,%rsi
  0x0000000116b4556c: mov    %rsp,%rdx
  0x0000000116b4556f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45573: callq  0x000000010c7dd830
  0x0000000116b45578: hlt    
  0x0000000116b45579: push   %r10
  0x0000000116b4557b: cmp    -0x9cfecd2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b45582: je     0x0000000116b455ff
  ;; call_VM_base: heap base corrupted?
  0x0000000116b45588: mov    %rsp,-0x28(%rsp)
  0x0000000116b4558d: sub    $0x80,%rsp
  0x0000000116b45594: mov    %rax,0x78(%rsp)
  0x0000000116b45599: mov    %rcx,0x70(%rsp)
  0x0000000116b4559e: mov    %rdx,0x68(%rsp)
  0x0000000116b455a3: mov    %rbx,0x60(%rsp)
  0x0000000116b455a8: mov    %rbp,0x50(%rsp)
  0x0000000116b455ad: mov    %rsi,0x48(%rsp)
  0x0000000116b455b2: mov    %rdi,0x40(%rsp)
  0x0000000116b455b7: mov    %r8,0x38(%rsp)
  0x0000000116b455bc: mov    %r9,0x30(%rsp)
  0x0000000116b455c1: mov    %r10,0x28(%rsp)
  0x0000000116b455c6: mov    %r11,0x20(%rsp)
  0x0000000116b455cb: mov    %r12,0x18(%rsp)
  0x0000000116b455d0: mov    %r13,0x10(%rsp)
  0x0000000116b455d5: mov    %r14,0x8(%rsp)
  0x0000000116b455da: mov    %r15,(%rsp)
  0x0000000116b455de: movabs $0x10cc63f17,%rdi
  0x0000000116b455e8: movabs $0x116b45588,%rsi
  0x0000000116b455f2: mov    %rsp,%rdx
  0x0000000116b455f5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b455f9: callq  0x000000010c7dd830
  0x0000000116b455fe: hlt    
  0x0000000116b455ff: pop    %r10
  0x0000000116b45601: mov    %r15,%rdi
  0x0000000116b45604: mov    %rbp,0x290(%r15)
  0x0000000116b4560b: mov    %rax,0x280(%r15)
  0x0000000116b45612: test   $0xf,%esp
  0x0000000116b45618: je     0x0000000116b45630
  0x0000000116b4561e: sub    $0x8,%rsp
  0x0000000116b45622: callq  0x000000010c5881a0
  0x0000000116b45627: add    $0x8,%rsp
  0x0000000116b4562b: jmpq   0x0000000116b45635
  0x0000000116b45630: callq  0x000000010c5881a0
  0x0000000116b45635: push   %rax
  0x0000000116b45636: push   %rdi
  0x0000000116b45637: push   %rsi
  0x0000000116b45638: push   %rdx
  0x0000000116b45639: push   %rcx
  0x0000000116b4563a: push   %r8
  0x0000000116b4563c: push   %r9
  0x0000000116b4563e: push   %r10
  0x0000000116b45640: mov    %rsp,%r10
  0x0000000116b45643: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45647: push   %r10
  0x0000000116b45649: push   %r11
  0x0000000116b4564b: mov    $0x109,%edi
  0x0000000116b45650: movabs $0x7ff815049fd5,%r10
  0x0000000116b4565a: callq  *%r10
  0x0000000116b4565d: pop    %r11
  0x0000000116b4565f: pop    %rsp
  0x0000000116b45660: pop    %r10
  0x0000000116b45662: pop    %r9
  0x0000000116b45664: pop    %r8
  0x0000000116b45666: pop    %rcx
  0x0000000116b45667: pop    %rdx
  0x0000000116b45668: pop    %rsi
  0x0000000116b45669: pop    %rdi
  0x0000000116b4566a: cmp    %rax,%r15
  0x0000000116b4566d: je     0x0000000116b456ea
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b45673: mov    %rsp,-0x28(%rsp)
  0x0000000116b45678: sub    $0x80,%rsp
  0x0000000116b4567f: mov    %rax,0x78(%rsp)
  0x0000000116b45684: mov    %rcx,0x70(%rsp)
  0x0000000116b45689: mov    %rdx,0x68(%rsp)
  0x0000000116b4568e: mov    %rbx,0x60(%rsp)
  0x0000000116b45693: mov    %rbp,0x50(%rsp)
  0x0000000116b45698: mov    %rsi,0x48(%rsp)
  0x0000000116b4569d: mov    %rdi,0x40(%rsp)
  0x0000000116b456a2: mov    %r8,0x38(%rsp)
  0x0000000116b456a7: mov    %r9,0x30(%rsp)
  0x0000000116b456ac: mov    %r10,0x28(%rsp)
  0x0000000116b456b1: mov    %r11,0x20(%rsp)
  0x0000000116b456b6: mov    %r12,0x18(%rsp)
  0x0000000116b456bb: mov    %r13,0x10(%rsp)
  0x0000000116b456c0: mov    %r14,0x8(%rsp)
  0x0000000116b456c5: mov    %r15,(%rsp)
  0x0000000116b456c9: movabs $0x10cc6405e,%rdi
  0x0000000116b456d3: movabs $0x116b45673,%rsi
  0x0000000116b456dd: mov    %rsp,%rdx
  0x0000000116b456e0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b456e4: callq  0x000000010c7dd830
  0x0000000116b456e9: hlt    
  0x0000000116b456ea: pop    %rax
  0x0000000116b456eb: movabs $0x0,%r10
  0x0000000116b456f5: mov    %r10,0x280(%r15)
  0x0000000116b456fc: movabs $0x0,%r10
  0x0000000116b45706: mov    %r10,0x290(%r15)
  0x0000000116b4570d: movabs $0x0,%r10
  0x0000000116b45717: mov    %r10,0x288(%r15)
  0x0000000116b4571e: cmpq   $0x0,0x8(%r15)
  0x0000000116b45726: je     0x0000000116b45731
  0x0000000116b4572c: jmpq   0x0000000116b30420
  0x0000000116b45731: mov    -0x38(%rbp),%r13
  0x0000000116b45735: mov    -0x30(%rbp),%r14
  0x0000000116b45739: retq   
  0x0000000116b4573a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4573f: sub    $0x80,%rsp
  0x0000000116b45746: mov    %rax,0x78(%rsp)
  0x0000000116b4574b: mov    %rcx,0x70(%rsp)
  0x0000000116b45750: mov    %rdx,0x68(%rsp)
  0x0000000116b45755: mov    %rbx,0x60(%rsp)
  0x0000000116b4575a: mov    %rbp,0x50(%rsp)
  0x0000000116b4575f: mov    %rsi,0x48(%rsp)
  0x0000000116b45764: mov    %rdi,0x40(%rsp)
  0x0000000116b45769: mov    %r8,0x38(%rsp)
  0x0000000116b4576e: mov    %r9,0x30(%rsp)
  0x0000000116b45773: mov    %r10,0x28(%rsp)
  0x0000000116b45778: mov    %r11,0x20(%rsp)
  0x0000000116b4577d: mov    %r12,0x18(%rsp)
  0x0000000116b45782: mov    %r13,0x10(%rsp)
  0x0000000116b45787: mov    %r14,0x8(%rsp)
  0x0000000116b4578c: mov    %r15,(%rsp)
  0x0000000116b45790: movabs $0x10cb763be,%rdi
  0x0000000116b4579a: movabs $0x116b4573a,%rsi
  0x0000000116b457a4: mov    %rsp,%rdx
  0x0000000116b457a7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b457ab: callq  0x000000010c7dd830
  0x0000000116b457b0: hlt    
  0x0000000116b457b1: movzbl 0x4(%r13),%ebx
  0x0000000116b457b6: add    $0x4,%r13
  0x0000000116b457ba: movabs $0x10ce3b680,%r10
  0x0000000116b457c4: jmpq   *(%r10,%rbx,8)
  0x0000000116b457c8: movq   $0x0,-0x10(%rbp)
  0x0000000116b457d0: mov    -0x38(%rbp),%r13
  0x0000000116b457d4: mov    -0x30(%rbp),%r14
  0x0000000116b457d8: cmpq   $0x0,0x8(%r15)
  0x0000000116b457e0: je     0x0000000116b45ab6
  0x0000000116b457e6: callq  0x0000000116b457f0
  0x0000000116b457eb: jmpq   0x0000000116b45a3f
  0x0000000116b457f0: lea    0x8(%rsp),%rax
  0x0000000116b457f5: mov    %r13,-0x38(%rbp)
  0x0000000116b457f9: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b45801: je     0x0000000116b4587e
  0x0000000116b45807: mov    %rsp,-0x28(%rsp)
  0x0000000116b4580c: sub    $0x80,%rsp
  0x0000000116b45813: mov    %rax,0x78(%rsp)
  0x0000000116b45818: mov    %rcx,0x70(%rsp)
  0x0000000116b4581d: mov    %rdx,0x68(%rsp)
  0x0000000116b45822: mov    %rbx,0x60(%rsp)
  0x0000000116b45827: mov    %rbp,0x50(%rsp)
  0x0000000116b4582c: mov    %rsi,0x48(%rsp)
  0x0000000116b45831: mov    %rdi,0x40(%rsp)
  0x0000000116b45836: mov    %r8,0x38(%rsp)
  0x0000000116b4583b: mov    %r9,0x30(%rsp)
  0x0000000116b45840: mov    %r10,0x28(%rsp)
  0x0000000116b45845: mov    %r11,0x20(%rsp)
  0x0000000116b4584a: mov    %r12,0x18(%rsp)
  0x0000000116b4584f: mov    %r13,0x10(%rsp)
  0x0000000116b45854: mov    %r14,0x8(%rsp)
  0x0000000116b45859: mov    %r15,(%rsp)
  0x0000000116b4585d: movabs $0x10cc2363b,%rdi
  0x0000000116b45867: movabs $0x116b45807,%rsi
  0x0000000116b45871: mov    %rsp,%rdx
  0x0000000116b45874: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45878: callq  0x000000010c7dd830
  0x0000000116b4587d: hlt    
  0x0000000116b4587e: push   %r10
  0x0000000116b45880: cmp    -0x9cfefd7(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b45887: je     0x0000000116b45904
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4588d: mov    %rsp,-0x28(%rsp)
  0x0000000116b45892: sub    $0x80,%rsp
  0x0000000116b45899: mov    %rax,0x78(%rsp)
  0x0000000116b4589e: mov    %rcx,0x70(%rsp)
  0x0000000116b458a3: mov    %rdx,0x68(%rsp)
  0x0000000116b458a8: mov    %rbx,0x60(%rsp)
  0x0000000116b458ad: mov    %rbp,0x50(%rsp)
  0x0000000116b458b2: mov    %rsi,0x48(%rsp)
  0x0000000116b458b7: mov    %rdi,0x40(%rsp)
  0x0000000116b458bc: mov    %r8,0x38(%rsp)
  0x0000000116b458c1: mov    %r9,0x30(%rsp)
  0x0000000116b458c6: mov    %r10,0x28(%rsp)
  0x0000000116b458cb: mov    %r11,0x20(%rsp)
  0x0000000116b458d0: mov    %r12,0x18(%rsp)
  0x0000000116b458d5: mov    %r13,0x10(%rsp)
  0x0000000116b458da: mov    %r14,0x8(%rsp)
  0x0000000116b458df: mov    %r15,(%rsp)
  0x0000000116b458e3: movabs $0x10cc63f17,%rdi
  0x0000000116b458ed: movabs $0x116b4588d,%rsi
  0x0000000116b458f7: mov    %rsp,%rdx
  0x0000000116b458fa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b458fe: callq  0x000000010c7dd830
  0x0000000116b45903: hlt    
  0x0000000116b45904: pop    %r10
  0x0000000116b45906: mov    %r15,%rdi
  0x0000000116b45909: mov    %rbp,0x290(%r15)
  0x0000000116b45910: mov    %rax,0x280(%r15)
  0x0000000116b45917: test   $0xf,%esp
  0x0000000116b4591d: je     0x0000000116b45935
  0x0000000116b45923: sub    $0x8,%rsp
  0x0000000116b45927: callq  0x000000010c5881a0
  0x0000000116b4592c: add    $0x8,%rsp
  0x0000000116b45930: jmpq   0x0000000116b4593a
  0x0000000116b45935: callq  0x000000010c5881a0
  0x0000000116b4593a: push   %rax
  0x0000000116b4593b: push   %rdi
  0x0000000116b4593c: push   %rsi
  0x0000000116b4593d: push   %rdx
  0x0000000116b4593e: push   %rcx
  0x0000000116b4593f: push   %r8
  0x0000000116b45941: push   %r9
  0x0000000116b45943: push   %r10
  0x0000000116b45945: mov    %rsp,%r10
  0x0000000116b45948: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4594c: push   %r10
  0x0000000116b4594e: push   %r11
  0x0000000116b45950: mov    $0x109,%edi
  0x0000000116b45955: movabs $0x7ff815049fd5,%r10
  0x0000000116b4595f: callq  *%r10
  0x0000000116b45962: pop    %r11
  0x0000000116b45964: pop    %rsp
  0x0000000116b45965: pop    %r10
  0x0000000116b45967: pop    %r9
  0x0000000116b45969: pop    %r8
  0x0000000116b4596b: pop    %rcx
  0x0000000116b4596c: pop    %rdx
  0x0000000116b4596d: pop    %rsi
  0x0000000116b4596e: pop    %rdi
  0x0000000116b4596f: cmp    %rax,%r15
  0x0000000116b45972: je     0x0000000116b459ef
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b45978: mov    %rsp,-0x28(%rsp)
  0x0000000116b4597d: sub    $0x80,%rsp
  0x0000000116b45984: mov    %rax,0x78(%rsp)
  0x0000000116b45989: mov    %rcx,0x70(%rsp)
  0x0000000116b4598e: mov    %rdx,0x68(%rsp)
  0x0000000116b45993: mov    %rbx,0x60(%rsp)
  0x0000000116b45998: mov    %rbp,0x50(%rsp)
  0x0000000116b4599d: mov    %rsi,0x48(%rsp)
  0x0000000116b459a2: mov    %rdi,0x40(%rsp)
  0x0000000116b459a7: mov    %r8,0x38(%rsp)
  0x0000000116b459ac: mov    %r9,0x30(%rsp)
  0x0000000116b459b1: mov    %r10,0x28(%rsp)
  0x0000000116b459b6: mov    %r11,0x20(%rsp)
  0x0000000116b459bb: mov    %r12,0x18(%rsp)
  0x0000000116b459c0: mov    %r13,0x10(%rsp)
  0x0000000116b459c5: mov    %r14,0x8(%rsp)
  0x0000000116b459ca: mov    %r15,(%rsp)
  0x0000000116b459ce: movabs $0x10cc6405e,%rdi
  0x0000000116b459d8: movabs $0x116b45978,%rsi
  0x0000000116b459e2: mov    %rsp,%rdx
  0x0000000116b459e5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b459e9: callq  0x000000010c7dd830
  0x0000000116b459ee: hlt    
  0x0000000116b459ef: pop    %rax
  0x0000000116b459f0: movabs $0x0,%r10
  0x0000000116b459fa: mov    %r10,0x280(%r15)
  0x0000000116b45a01: movabs $0x0,%r10
  0x0000000116b45a0b: mov    %r10,0x290(%r15)
  0x0000000116b45a12: movabs $0x0,%r10
  0x0000000116b45a1c: mov    %r10,0x288(%r15)
  0x0000000116b45a23: cmpq   $0x0,0x8(%r15)
  0x0000000116b45a2b: je     0x0000000116b45a36
  0x0000000116b45a31: jmpq   0x0000000116b30420
  0x0000000116b45a36: mov    -0x38(%rbp),%r13
  0x0000000116b45a3a: mov    -0x30(%rbp),%r14
  0x0000000116b45a3e: retq   
  0x0000000116b45a3f: mov    %rsp,-0x28(%rsp)
  0x0000000116b45a44: sub    $0x80,%rsp
  0x0000000116b45a4b: mov    %rax,0x78(%rsp)
  0x0000000116b45a50: mov    %rcx,0x70(%rsp)
  0x0000000116b45a55: mov    %rdx,0x68(%rsp)
  0x0000000116b45a5a: mov    %rbx,0x60(%rsp)
  0x0000000116b45a5f: mov    %rbp,0x50(%rsp)
  0x0000000116b45a64: mov    %rsi,0x48(%rsp)
  0x0000000116b45a69: mov    %rdi,0x40(%rsp)
  0x0000000116b45a6e: mov    %r8,0x38(%rsp)
  0x0000000116b45a73: mov    %r9,0x30(%rsp)
  0x0000000116b45a78: mov    %r10,0x28(%rsp)
  0x0000000116b45a7d: mov    %r11,0x20(%rsp)
  0x0000000116b45a82: mov    %r12,0x18(%rsp)
  0x0000000116b45a87: mov    %r13,0x10(%rsp)
  0x0000000116b45a8c: mov    %r14,0x8(%rsp)
  0x0000000116b45a91: mov    %r15,(%rsp)
  0x0000000116b45a95: movabs $0x10cb763be,%rdi
  0x0000000116b45a9f: movabs $0x116b45a3f,%rsi
  0x0000000116b45aa9: mov    %rsp,%rdx
  0x0000000116b45aac: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45ab0: callq  0x000000010c7dd830
  0x0000000116b45ab5: hlt    
  0x0000000116b45ab6: movzbl 0x5(%r13),%ebx
  0x0000000116b45abb: add    $0x5,%r13
  0x0000000116b45abf: movabs $0x10ce38e80,%r10
  0x0000000116b45ac9: jmpq   *(%r10,%rbx,8)
  0x0000000116b45acd: movq   $0x0,-0x10(%rbp)
  0x0000000116b45ad5: mov    -0x38(%rbp),%r13
  0x0000000116b45ad9: mov    -0x30(%rbp),%r14
  0x0000000116b45add: cmpq   $0x0,0x8(%r15)
  0x0000000116b45ae5: je     0x0000000116b45dbb
  0x0000000116b45aeb: callq  0x0000000116b45af5
  0x0000000116b45af0: jmpq   0x0000000116b45d44
  0x0000000116b45af5: lea    0x8(%rsp),%rax
  0x0000000116b45afa: mov    %r13,-0x38(%rbp)
  0x0000000116b45afe: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b45b06: je     0x0000000116b45b83
  0x0000000116b45b0c: mov    %rsp,-0x28(%rsp)
  0x0000000116b45b11: sub    $0x80,%rsp
  0x0000000116b45b18: mov    %rax,0x78(%rsp)
  0x0000000116b45b1d: mov    %rcx,0x70(%rsp)
  0x0000000116b45b22: mov    %rdx,0x68(%rsp)
  0x0000000116b45b27: mov    %rbx,0x60(%rsp)
  0x0000000116b45b2c: mov    %rbp,0x50(%rsp)
  0x0000000116b45b31: mov    %rsi,0x48(%rsp)
  0x0000000116b45b36: mov    %rdi,0x40(%rsp)
  0x0000000116b45b3b: mov    %r8,0x38(%rsp)
  0x0000000116b45b40: mov    %r9,0x30(%rsp)
  0x0000000116b45b45: mov    %r10,0x28(%rsp)
  0x0000000116b45b4a: mov    %r11,0x20(%rsp)
  0x0000000116b45b4f: mov    %r12,0x18(%rsp)
  0x0000000116b45b54: mov    %r13,0x10(%rsp)
  0x0000000116b45b59: mov    %r14,0x8(%rsp)
  0x0000000116b45b5e: mov    %r15,(%rsp)
  0x0000000116b45b62: movabs $0x10cc2363b,%rdi
  0x0000000116b45b6c: movabs $0x116b45b0c,%rsi
  0x0000000116b45b76: mov    %rsp,%rdx
  0x0000000116b45b79: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45b7d: callq  0x000000010c7dd830
  0x0000000116b45b82: hlt    
  0x0000000116b45b83: push   %r10
  0x0000000116b45b85: cmp    -0x9cff2dc(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b45b8c: je     0x0000000116b45c09
  ;; call_VM_base: heap base corrupted?
  0x0000000116b45b92: mov    %rsp,-0x28(%rsp)
  0x0000000116b45b97: sub    $0x80,%rsp
  0x0000000116b45b9e: mov    %rax,0x78(%rsp)
  0x0000000116b45ba3: mov    %rcx,0x70(%rsp)
  0x0000000116b45ba8: mov    %rdx,0x68(%rsp)
  0x0000000116b45bad: mov    %rbx,0x60(%rsp)
  0x0000000116b45bb2: mov    %rbp,0x50(%rsp)
  0x0000000116b45bb7: mov    %rsi,0x48(%rsp)
  0x0000000116b45bbc: mov    %rdi,0x40(%rsp)
  0x0000000116b45bc1: mov    %r8,0x38(%rsp)
  0x0000000116b45bc6: mov    %r9,0x30(%rsp)
  0x0000000116b45bcb: mov    %r10,0x28(%rsp)
  0x0000000116b45bd0: mov    %r11,0x20(%rsp)
  0x0000000116b45bd5: mov    %r12,0x18(%rsp)
  0x0000000116b45bda: mov    %r13,0x10(%rsp)
  0x0000000116b45bdf: mov    %r14,0x8(%rsp)
  0x0000000116b45be4: mov    %r15,(%rsp)
  0x0000000116b45be8: movabs $0x10cc63f17,%rdi
  0x0000000116b45bf2: movabs $0x116b45b92,%rsi
  0x0000000116b45bfc: mov    %rsp,%rdx
  0x0000000116b45bff: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45c03: callq  0x000000010c7dd830
  0x0000000116b45c08: hlt    
  0x0000000116b45c09: pop    %r10
  0x0000000116b45c0b: mov    %r15,%rdi
  0x0000000116b45c0e: mov    %rbp,0x290(%r15)
  0x0000000116b45c15: mov    %rax,0x280(%r15)
  0x0000000116b45c1c: test   $0xf,%esp
  0x0000000116b45c22: je     0x0000000116b45c3a
  0x0000000116b45c28: sub    $0x8,%rsp
  0x0000000116b45c2c: callq  0x000000010c5881a0
  0x0000000116b45c31: add    $0x8,%rsp
  0x0000000116b45c35: jmpq   0x0000000116b45c3f
  0x0000000116b45c3a: callq  0x000000010c5881a0
  0x0000000116b45c3f: push   %rax
  0x0000000116b45c40: push   %rdi
  0x0000000116b45c41: push   %rsi
  0x0000000116b45c42: push   %rdx
  0x0000000116b45c43: push   %rcx
  0x0000000116b45c44: push   %r8
  0x0000000116b45c46: push   %r9
  0x0000000116b45c48: push   %r10
  0x0000000116b45c4a: mov    %rsp,%r10
  0x0000000116b45c4d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45c51: push   %r10
  0x0000000116b45c53: push   %r11
  0x0000000116b45c55: mov    $0x109,%edi
  0x0000000116b45c5a: movabs $0x7ff815049fd5,%r10
  0x0000000116b45c64: callq  *%r10
  0x0000000116b45c67: pop    %r11
  0x0000000116b45c69: pop    %rsp
  0x0000000116b45c6a: pop    %r10
  0x0000000116b45c6c: pop    %r9
  0x0000000116b45c6e: pop    %r8
  0x0000000116b45c70: pop    %rcx
  0x0000000116b45c71: pop    %rdx
  0x0000000116b45c72: pop    %rsi
  0x0000000116b45c73: pop    %rdi
  0x0000000116b45c74: cmp    %rax,%r15
  0x0000000116b45c77: je     0x0000000116b45cf4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b45c7d: mov    %rsp,-0x28(%rsp)
  0x0000000116b45c82: sub    $0x80,%rsp
  0x0000000116b45c89: mov    %rax,0x78(%rsp)
  0x0000000116b45c8e: mov    %rcx,0x70(%rsp)
  0x0000000116b45c93: mov    %rdx,0x68(%rsp)
  0x0000000116b45c98: mov    %rbx,0x60(%rsp)
  0x0000000116b45c9d: mov    %rbp,0x50(%rsp)
  0x0000000116b45ca2: mov    %rsi,0x48(%rsp)
  0x0000000116b45ca7: mov    %rdi,0x40(%rsp)
  0x0000000116b45cac: mov    %r8,0x38(%rsp)
  0x0000000116b45cb1: mov    %r9,0x30(%rsp)
  0x0000000116b45cb6: mov    %r10,0x28(%rsp)
  0x0000000116b45cbb: mov    %r11,0x20(%rsp)
  0x0000000116b45cc0: mov    %r12,0x18(%rsp)
  0x0000000116b45cc5: mov    %r13,0x10(%rsp)
  0x0000000116b45cca: mov    %r14,0x8(%rsp)
  0x0000000116b45ccf: mov    %r15,(%rsp)
  0x0000000116b45cd3: movabs $0x10cc6405e,%rdi
  0x0000000116b45cdd: movabs $0x116b45c7d,%rsi
  0x0000000116b45ce7: mov    %rsp,%rdx
  0x0000000116b45cea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45cee: callq  0x000000010c7dd830
  0x0000000116b45cf3: hlt    
  0x0000000116b45cf4: pop    %rax
  0x0000000116b45cf5: movabs $0x0,%r10
  0x0000000116b45cff: mov    %r10,0x280(%r15)
  0x0000000116b45d06: movabs $0x0,%r10
  0x0000000116b45d10: mov    %r10,0x290(%r15)
  0x0000000116b45d17: movabs $0x0,%r10
  0x0000000116b45d21: mov    %r10,0x288(%r15)
  0x0000000116b45d28: cmpq   $0x0,0x8(%r15)
  0x0000000116b45d30: je     0x0000000116b45d3b
  0x0000000116b45d36: jmpq   0x0000000116b30420
  0x0000000116b45d3b: mov    -0x38(%rbp),%r13
  0x0000000116b45d3f: mov    -0x30(%rbp),%r14
  0x0000000116b45d43: retq   
  0x0000000116b45d44: mov    %rsp,-0x28(%rsp)
  0x0000000116b45d49: sub    $0x80,%rsp
  0x0000000116b45d50: mov    %rax,0x78(%rsp)
  0x0000000116b45d55: mov    %rcx,0x70(%rsp)
  0x0000000116b45d5a: mov    %rdx,0x68(%rsp)
  0x0000000116b45d5f: mov    %rbx,0x60(%rsp)
  0x0000000116b45d64: mov    %rbp,0x50(%rsp)
  0x0000000116b45d69: mov    %rsi,0x48(%rsp)
  0x0000000116b45d6e: mov    %rdi,0x40(%rsp)
  0x0000000116b45d73: mov    %r8,0x38(%rsp)
  0x0000000116b45d78: mov    %r9,0x30(%rsp)
  0x0000000116b45d7d: mov    %r10,0x28(%rsp)
  0x0000000116b45d82: mov    %r11,0x20(%rsp)
  0x0000000116b45d87: mov    %r12,0x18(%rsp)
  0x0000000116b45d8c: mov    %r13,0x10(%rsp)
  0x0000000116b45d91: mov    %r14,0x8(%rsp)
  0x0000000116b45d96: mov    %r15,(%rsp)
  0x0000000116b45d9a: movabs $0x10cb763be,%rdi
  0x0000000116b45da4: movabs $0x116b45d44,%rsi
  0x0000000116b45dae: mov    %rsp,%rdx
  0x0000000116b45db1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45db5: callq  0x000000010c7dd830
  0x0000000116b45dba: hlt    
  0x0000000116b45dbb: movzbl 0x5(%r13),%ebx
  0x0000000116b45dc0: add    $0x5,%r13
  0x0000000116b45dc4: movabs $0x10ce38e80,%r10
  0x0000000116b45dce: jmpq   *(%r10,%rbx,8)
  0x0000000116b45dd2: movq   $0x0,-0x10(%rbp)
  0x0000000116b45dda: mov    -0x38(%rbp),%r13
  0x0000000116b45dde: mov    -0x30(%rbp),%r14
  0x0000000116b45de2: cmpq   $0x0,0x8(%r15)
  0x0000000116b45dea: je     0x0000000116b460c0
  0x0000000116b45df0: callq  0x0000000116b45dfa
  0x0000000116b45df5: jmpq   0x0000000116b46049
  0x0000000116b45dfa: lea    0x8(%rsp),%rax
  0x0000000116b45dff: mov    %r13,-0x38(%rbp)
  0x0000000116b45e03: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b45e0b: je     0x0000000116b45e88
  0x0000000116b45e11: mov    %rsp,-0x28(%rsp)
  0x0000000116b45e16: sub    $0x80,%rsp
  0x0000000116b45e1d: mov    %rax,0x78(%rsp)
  0x0000000116b45e22: mov    %rcx,0x70(%rsp)
  0x0000000116b45e27: mov    %rdx,0x68(%rsp)
  0x0000000116b45e2c: mov    %rbx,0x60(%rsp)
  0x0000000116b45e31: mov    %rbp,0x50(%rsp)
  0x0000000116b45e36: mov    %rsi,0x48(%rsp)
  0x0000000116b45e3b: mov    %rdi,0x40(%rsp)
  0x0000000116b45e40: mov    %r8,0x38(%rsp)
  0x0000000116b45e45: mov    %r9,0x30(%rsp)
  0x0000000116b45e4a: mov    %r10,0x28(%rsp)
  0x0000000116b45e4f: mov    %r11,0x20(%rsp)
  0x0000000116b45e54: mov    %r12,0x18(%rsp)
  0x0000000116b45e59: mov    %r13,0x10(%rsp)
  0x0000000116b45e5e: mov    %r14,0x8(%rsp)
  0x0000000116b45e63: mov    %r15,(%rsp)
  0x0000000116b45e67: movabs $0x10cc2363b,%rdi
  0x0000000116b45e71: movabs $0x116b45e11,%rsi
  0x0000000116b45e7b: mov    %rsp,%rdx
  0x0000000116b45e7e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45e82: callq  0x000000010c7dd830
  0x0000000116b45e87: hlt    
  0x0000000116b45e88: push   %r10
  0x0000000116b45e8a: cmp    -0x9cff5e1(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b45e91: je     0x0000000116b45f0e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b45e97: mov    %rsp,-0x28(%rsp)
  0x0000000116b45e9c: sub    $0x80,%rsp
  0x0000000116b45ea3: mov    %rax,0x78(%rsp)
  0x0000000116b45ea8: mov    %rcx,0x70(%rsp)
  0x0000000116b45ead: mov    %rdx,0x68(%rsp)
  0x0000000116b45eb2: mov    %rbx,0x60(%rsp)
  0x0000000116b45eb7: mov    %rbp,0x50(%rsp)
  0x0000000116b45ebc: mov    %rsi,0x48(%rsp)
  0x0000000116b45ec1: mov    %rdi,0x40(%rsp)
  0x0000000116b45ec6: mov    %r8,0x38(%rsp)
  0x0000000116b45ecb: mov    %r9,0x30(%rsp)
  0x0000000116b45ed0: mov    %r10,0x28(%rsp)
  0x0000000116b45ed5: mov    %r11,0x20(%rsp)
  0x0000000116b45eda: mov    %r12,0x18(%rsp)
  0x0000000116b45edf: mov    %r13,0x10(%rsp)
  0x0000000116b45ee4: mov    %r14,0x8(%rsp)
  0x0000000116b45ee9: mov    %r15,(%rsp)
  0x0000000116b45eed: movabs $0x10cc63f17,%rdi
  0x0000000116b45ef7: movabs $0x116b45e97,%rsi
  0x0000000116b45f01: mov    %rsp,%rdx
  0x0000000116b45f04: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45f08: callq  0x000000010c7dd830
  0x0000000116b45f0d: hlt    
  0x0000000116b45f0e: pop    %r10
  0x0000000116b45f10: mov    %r15,%rdi
  0x0000000116b45f13: mov    %rbp,0x290(%r15)
  0x0000000116b45f1a: mov    %rax,0x280(%r15)
  0x0000000116b45f21: test   $0xf,%esp
  0x0000000116b45f27: je     0x0000000116b45f3f
  0x0000000116b45f2d: sub    $0x8,%rsp
  0x0000000116b45f31: callq  0x000000010c5881a0
  0x0000000116b45f36: add    $0x8,%rsp
  0x0000000116b45f3a: jmpq   0x0000000116b45f44
  0x0000000116b45f3f: callq  0x000000010c5881a0
  0x0000000116b45f44: push   %rax
  0x0000000116b45f45: push   %rdi
  0x0000000116b45f46: push   %rsi
  0x0000000116b45f47: push   %rdx
  0x0000000116b45f48: push   %rcx
  0x0000000116b45f49: push   %r8
  0x0000000116b45f4b: push   %r9
  0x0000000116b45f4d: push   %r10
  0x0000000116b45f4f: mov    %rsp,%r10
  0x0000000116b45f52: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45f56: push   %r10
  0x0000000116b45f58: push   %r11
  0x0000000116b45f5a: mov    $0x109,%edi
  0x0000000116b45f5f: movabs $0x7ff815049fd5,%r10
  0x0000000116b45f69: callq  *%r10
  0x0000000116b45f6c: pop    %r11
  0x0000000116b45f6e: pop    %rsp
  0x0000000116b45f6f: pop    %r10
  0x0000000116b45f71: pop    %r9
  0x0000000116b45f73: pop    %r8
  0x0000000116b45f75: pop    %rcx
  0x0000000116b45f76: pop    %rdx
  0x0000000116b45f77: pop    %rsi
  0x0000000116b45f78: pop    %rdi
  0x0000000116b45f79: cmp    %rax,%r15
  0x0000000116b45f7c: je     0x0000000116b45ff9
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b45f82: mov    %rsp,-0x28(%rsp)
  0x0000000116b45f87: sub    $0x80,%rsp
  0x0000000116b45f8e: mov    %rax,0x78(%rsp)
  0x0000000116b45f93: mov    %rcx,0x70(%rsp)
  0x0000000116b45f98: mov    %rdx,0x68(%rsp)
  0x0000000116b45f9d: mov    %rbx,0x60(%rsp)
  0x0000000116b45fa2: mov    %rbp,0x50(%rsp)
  0x0000000116b45fa7: mov    %rsi,0x48(%rsp)
  0x0000000116b45fac: mov    %rdi,0x40(%rsp)
  0x0000000116b45fb1: mov    %r8,0x38(%rsp)
  0x0000000116b45fb6: mov    %r9,0x30(%rsp)
  0x0000000116b45fbb: mov    %r10,0x28(%rsp)
  0x0000000116b45fc0: mov    %r11,0x20(%rsp)
  0x0000000116b45fc5: mov    %r12,0x18(%rsp)
  0x0000000116b45fca: mov    %r13,0x10(%rsp)
  0x0000000116b45fcf: mov    %r14,0x8(%rsp)
  0x0000000116b45fd4: mov    %r15,(%rsp)
  0x0000000116b45fd8: movabs $0x10cc6405e,%rdi
  0x0000000116b45fe2: movabs $0x116b45f82,%rsi
  0x0000000116b45fec: mov    %rsp,%rdx
  0x0000000116b45fef: and    $0xfffffffffffffff0,%rsp
  0x0000000116b45ff3: callq  0x000000010c7dd830
  0x0000000116b45ff8: hlt    
  0x0000000116b45ff9: pop    %rax
  0x0000000116b45ffa: movabs $0x0,%r10
  0x0000000116b46004: mov    %r10,0x280(%r15)
  0x0000000116b4600b: movabs $0x0,%r10
  0x0000000116b46015: mov    %r10,0x290(%r15)
  0x0000000116b4601c: movabs $0x0,%r10
  0x0000000116b46026: mov    %r10,0x288(%r15)
  0x0000000116b4602d: cmpq   $0x0,0x8(%r15)
  0x0000000116b46035: je     0x0000000116b46040
  0x0000000116b4603b: jmpq   0x0000000116b30420
  0x0000000116b46040: mov    -0x38(%rbp),%r13
  0x0000000116b46044: mov    -0x30(%rbp),%r14
  0x0000000116b46048: retq   
  0x0000000116b46049: mov    %rsp,-0x28(%rsp)
  0x0000000116b4604e: sub    $0x80,%rsp
  0x0000000116b46055: mov    %rax,0x78(%rsp)
  0x0000000116b4605a: mov    %rcx,0x70(%rsp)
  0x0000000116b4605f: mov    %rdx,0x68(%rsp)
  0x0000000116b46064: mov    %rbx,0x60(%rsp)
  0x0000000116b46069: mov    %rbp,0x50(%rsp)
  0x0000000116b4606e: mov    %rsi,0x48(%rsp)
  0x0000000116b46073: mov    %rdi,0x40(%rsp)
  0x0000000116b46078: mov    %r8,0x38(%rsp)
  0x0000000116b4607d: mov    %r9,0x30(%rsp)
  0x0000000116b46082: mov    %r10,0x28(%rsp)
  0x0000000116b46087: mov    %r11,0x20(%rsp)
  0x0000000116b4608c: mov    %r12,0x18(%rsp)
  0x0000000116b46091: mov    %r13,0x10(%rsp)
  0x0000000116b46096: mov    %r14,0x8(%rsp)
  0x0000000116b4609b: mov    %r15,(%rsp)
  0x0000000116b4609f: movabs $0x10cb763be,%rdi
  0x0000000116b460a9: movabs $0x116b46049,%rsi
  0x0000000116b460b3: mov    %rsp,%rdx
  0x0000000116b460b6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b460ba: callq  0x000000010c7dd830
  0x0000000116b460bf: hlt    
  0x0000000116b460c0: movzbl 0x5(%r13),%ebx
  0x0000000116b460c5: add    $0x5,%r13
  0x0000000116b460c9: movabs $0x10ce38e80,%r10
  0x0000000116b460d3: jmpq   *(%r10,%rbx,8)
  0x0000000116b460d7: movq   $0x0,-0x10(%rbp)
  0x0000000116b460df: mov    -0x38(%rbp),%r13
  0x0000000116b460e3: mov    -0x30(%rbp),%r14
  0x0000000116b460e7: cmpq   $0x0,0x8(%r15)
  0x0000000116b460ef: je     0x0000000116b463c5
  0x0000000116b460f5: callq  0x0000000116b460ff
  0x0000000116b460fa: jmpq   0x0000000116b4634e
  0x0000000116b460ff: lea    0x8(%rsp),%rax
  0x0000000116b46104: mov    %r13,-0x38(%rbp)
  0x0000000116b46108: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b46110: je     0x0000000116b4618d
  0x0000000116b46116: mov    %rsp,-0x28(%rsp)
  0x0000000116b4611b: sub    $0x80,%rsp
  0x0000000116b46122: mov    %rax,0x78(%rsp)
  0x0000000116b46127: mov    %rcx,0x70(%rsp)
  0x0000000116b4612c: mov    %rdx,0x68(%rsp)
  0x0000000116b46131: mov    %rbx,0x60(%rsp)
  0x0000000116b46136: mov    %rbp,0x50(%rsp)
  0x0000000116b4613b: mov    %rsi,0x48(%rsp)
  0x0000000116b46140: mov    %rdi,0x40(%rsp)
  0x0000000116b46145: mov    %r8,0x38(%rsp)
  0x0000000116b4614a: mov    %r9,0x30(%rsp)
  0x0000000116b4614f: mov    %r10,0x28(%rsp)
  0x0000000116b46154: mov    %r11,0x20(%rsp)
  0x0000000116b46159: mov    %r12,0x18(%rsp)
  0x0000000116b4615e: mov    %r13,0x10(%rsp)
  0x0000000116b46163: mov    %r14,0x8(%rsp)
  0x0000000116b46168: mov    %r15,(%rsp)
  0x0000000116b4616c: movabs $0x10cc2363b,%rdi
  0x0000000116b46176: movabs $0x116b46116,%rsi
  0x0000000116b46180: mov    %rsp,%rdx
  0x0000000116b46183: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46187: callq  0x000000010c7dd830
  0x0000000116b4618c: hlt    
  0x0000000116b4618d: push   %r10
  0x0000000116b4618f: cmp    -0x9cff8e6(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b46196: je     0x0000000116b46213
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4619c: mov    %rsp,-0x28(%rsp)
  0x0000000116b461a1: sub    $0x80,%rsp
  0x0000000116b461a8: mov    %rax,0x78(%rsp)
  0x0000000116b461ad: mov    %rcx,0x70(%rsp)
  0x0000000116b461b2: mov    %rdx,0x68(%rsp)
  0x0000000116b461b7: mov    %rbx,0x60(%rsp)
  0x0000000116b461bc: mov    %rbp,0x50(%rsp)
  0x0000000116b461c1: mov    %rsi,0x48(%rsp)
  0x0000000116b461c6: mov    %rdi,0x40(%rsp)
  0x0000000116b461cb: mov    %r8,0x38(%rsp)
  0x0000000116b461d0: mov    %r9,0x30(%rsp)
  0x0000000116b461d5: mov    %r10,0x28(%rsp)
  0x0000000116b461da: mov    %r11,0x20(%rsp)
  0x0000000116b461df: mov    %r12,0x18(%rsp)
  0x0000000116b461e4: mov    %r13,0x10(%rsp)
  0x0000000116b461e9: mov    %r14,0x8(%rsp)
  0x0000000116b461ee: mov    %r15,(%rsp)
  0x0000000116b461f2: movabs $0x10cc63f17,%rdi
  0x0000000116b461fc: movabs $0x116b4619c,%rsi
  0x0000000116b46206: mov    %rsp,%rdx
  0x0000000116b46209: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4620d: callq  0x000000010c7dd830
  0x0000000116b46212: hlt    
  0x0000000116b46213: pop    %r10
  0x0000000116b46215: mov    %r15,%rdi
  0x0000000116b46218: mov    %rbp,0x290(%r15)
  0x0000000116b4621f: mov    %rax,0x280(%r15)
  0x0000000116b46226: test   $0xf,%esp
  0x0000000116b4622c: je     0x0000000116b46244
  0x0000000116b46232: sub    $0x8,%rsp
  0x0000000116b46236: callq  0x000000010c5881a0
  0x0000000116b4623b: add    $0x8,%rsp
  0x0000000116b4623f: jmpq   0x0000000116b46249
  0x0000000116b46244: callq  0x000000010c5881a0
  0x0000000116b46249: push   %rax
  0x0000000116b4624a: push   %rdi
  0x0000000116b4624b: push   %rsi
  0x0000000116b4624c: push   %rdx
  0x0000000116b4624d: push   %rcx
  0x0000000116b4624e: push   %r8
  0x0000000116b46250: push   %r9
  0x0000000116b46252: push   %r10
  0x0000000116b46254: mov    %rsp,%r10
  0x0000000116b46257: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4625b: push   %r10
  0x0000000116b4625d: push   %r11
  0x0000000116b4625f: mov    $0x109,%edi
  0x0000000116b46264: movabs $0x7ff815049fd5,%r10
  0x0000000116b4626e: callq  *%r10
  0x0000000116b46271: pop    %r11
  0x0000000116b46273: pop    %rsp
  0x0000000116b46274: pop    %r10
  0x0000000116b46276: pop    %r9
  0x0000000116b46278: pop    %r8
  0x0000000116b4627a: pop    %rcx
  0x0000000116b4627b: pop    %rdx
  0x0000000116b4627c: pop    %rsi
  0x0000000116b4627d: pop    %rdi
  0x0000000116b4627e: cmp    %rax,%r15
  0x0000000116b46281: je     0x0000000116b462fe
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b46287: mov    %rsp,-0x28(%rsp)
  0x0000000116b4628c: sub    $0x80,%rsp
  0x0000000116b46293: mov    %rax,0x78(%rsp)
  0x0000000116b46298: mov    %rcx,0x70(%rsp)
  0x0000000116b4629d: mov    %rdx,0x68(%rsp)
  0x0000000116b462a2: mov    %rbx,0x60(%rsp)
  0x0000000116b462a7: mov    %rbp,0x50(%rsp)
  0x0000000116b462ac: mov    %rsi,0x48(%rsp)
  0x0000000116b462b1: mov    %rdi,0x40(%rsp)
  0x0000000116b462b6: mov    %r8,0x38(%rsp)
  0x0000000116b462bb: mov    %r9,0x30(%rsp)
  0x0000000116b462c0: mov    %r10,0x28(%rsp)
  0x0000000116b462c5: mov    %r11,0x20(%rsp)
  0x0000000116b462ca: mov    %r12,0x18(%rsp)
  0x0000000116b462cf: mov    %r13,0x10(%rsp)
  0x0000000116b462d4: mov    %r14,0x8(%rsp)
  0x0000000116b462d9: mov    %r15,(%rsp)
  0x0000000116b462dd: movabs $0x10cc6405e,%rdi
  0x0000000116b462e7: movabs $0x116b46287,%rsi
  0x0000000116b462f1: mov    %rsp,%rdx
  0x0000000116b462f4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b462f8: callq  0x000000010c7dd830
  0x0000000116b462fd: hlt    
  0x0000000116b462fe: pop    %rax
  0x0000000116b462ff: movabs $0x0,%r10
  0x0000000116b46309: mov    %r10,0x280(%r15)
  0x0000000116b46310: movabs $0x0,%r10
  0x0000000116b4631a: mov    %r10,0x290(%r15)
  0x0000000116b46321: movabs $0x0,%r10
  0x0000000116b4632b: mov    %r10,0x288(%r15)
  0x0000000116b46332: cmpq   $0x0,0x8(%r15)
  0x0000000116b4633a: je     0x0000000116b46345
  0x0000000116b46340: jmpq   0x0000000116b30420
  0x0000000116b46345: mov    -0x38(%rbp),%r13
  0x0000000116b46349: mov    -0x30(%rbp),%r14
  0x0000000116b4634d: retq   
  0x0000000116b4634e: mov    %rsp,-0x28(%rsp)
  0x0000000116b46353: sub    $0x80,%rsp
  0x0000000116b4635a: mov    %rax,0x78(%rsp)
  0x0000000116b4635f: mov    %rcx,0x70(%rsp)
  0x0000000116b46364: mov    %rdx,0x68(%rsp)
  0x0000000116b46369: mov    %rbx,0x60(%rsp)
  0x0000000116b4636e: mov    %rbp,0x50(%rsp)
  0x0000000116b46373: mov    %rsi,0x48(%rsp)
  0x0000000116b46378: mov    %rdi,0x40(%rsp)
  0x0000000116b4637d: mov    %r8,0x38(%rsp)
  0x0000000116b46382: mov    %r9,0x30(%rsp)
  0x0000000116b46387: mov    %r10,0x28(%rsp)
  0x0000000116b4638c: mov    %r11,0x20(%rsp)
  0x0000000116b46391: mov    %r12,0x18(%rsp)
  0x0000000116b46396: mov    %r13,0x10(%rsp)
  0x0000000116b4639b: mov    %r14,0x8(%rsp)
  0x0000000116b463a0: mov    %r15,(%rsp)
  0x0000000116b463a4: movabs $0x10cb763be,%rdi
  0x0000000116b463ae: movabs $0x116b4634e,%rsi
  0x0000000116b463b8: mov    %rsp,%rdx
  0x0000000116b463bb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b463bf: callq  0x000000010c7dd830
  0x0000000116b463c4: hlt    
  0x0000000116b463c5: movzbl 0x5(%r13),%ebx
  0x0000000116b463ca: add    $0x5,%r13
  0x0000000116b463ce: movabs $0x10ce38e80,%r10
  0x0000000116b463d8: jmpq   *(%r10,%rbx,8)
  0x0000000116b463dc: movq   $0x0,-0x10(%rbp)
  0x0000000116b463e4: mov    -0x38(%rbp),%r13
  0x0000000116b463e8: mov    -0x30(%rbp),%r14
  0x0000000116b463ec: cmpq   $0x0,0x8(%r15)
  0x0000000116b463f4: je     0x0000000116b466ca
  0x0000000116b463fa: callq  0x0000000116b46404
  0x0000000116b463ff: jmpq   0x0000000116b46653
  0x0000000116b46404: lea    0x8(%rsp),%rax
  0x0000000116b46409: mov    %r13,-0x38(%rbp)
  0x0000000116b4640d: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b46415: je     0x0000000116b46492
  0x0000000116b4641b: mov    %rsp,-0x28(%rsp)
  0x0000000116b46420: sub    $0x80,%rsp
  0x0000000116b46427: mov    %rax,0x78(%rsp)
  0x0000000116b4642c: mov    %rcx,0x70(%rsp)
  0x0000000116b46431: mov    %rdx,0x68(%rsp)
  0x0000000116b46436: mov    %rbx,0x60(%rsp)
  0x0000000116b4643b: mov    %rbp,0x50(%rsp)
  0x0000000116b46440: mov    %rsi,0x48(%rsp)
  0x0000000116b46445: mov    %rdi,0x40(%rsp)
  0x0000000116b4644a: mov    %r8,0x38(%rsp)
  0x0000000116b4644f: mov    %r9,0x30(%rsp)
  0x0000000116b46454: mov    %r10,0x28(%rsp)
  0x0000000116b46459: mov    %r11,0x20(%rsp)
  0x0000000116b4645e: mov    %r12,0x18(%rsp)
  0x0000000116b46463: mov    %r13,0x10(%rsp)
  0x0000000116b46468: mov    %r14,0x8(%rsp)
  0x0000000116b4646d: mov    %r15,(%rsp)
  0x0000000116b46471: movabs $0x10cc2363b,%rdi
  0x0000000116b4647b: movabs $0x116b4641b,%rsi
  0x0000000116b46485: mov    %rsp,%rdx
  0x0000000116b46488: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4648c: callq  0x000000010c7dd830
  0x0000000116b46491: hlt    
  0x0000000116b46492: push   %r10
  0x0000000116b46494: cmp    -0x9cffbeb(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4649b: je     0x0000000116b46518
  ;; call_VM_base: heap base corrupted?
  0x0000000116b464a1: mov    %rsp,-0x28(%rsp)
  0x0000000116b464a6: sub    $0x80,%rsp
  0x0000000116b464ad: mov    %rax,0x78(%rsp)
  0x0000000116b464b2: mov    %rcx,0x70(%rsp)
  0x0000000116b464b7: mov    %rdx,0x68(%rsp)
  0x0000000116b464bc: mov    %rbx,0x60(%rsp)
  0x0000000116b464c1: mov    %rbp,0x50(%rsp)
  0x0000000116b464c6: mov    %rsi,0x48(%rsp)
  0x0000000116b464cb: mov    %rdi,0x40(%rsp)
  0x0000000116b464d0: mov    %r8,0x38(%rsp)
  0x0000000116b464d5: mov    %r9,0x30(%rsp)
  0x0000000116b464da: mov    %r10,0x28(%rsp)
  0x0000000116b464df: mov    %r11,0x20(%rsp)
  0x0000000116b464e4: mov    %r12,0x18(%rsp)
  0x0000000116b464e9: mov    %r13,0x10(%rsp)
  0x0000000116b464ee: mov    %r14,0x8(%rsp)
  0x0000000116b464f3: mov    %r15,(%rsp)
  0x0000000116b464f7: movabs $0x10cc63f17,%rdi
  0x0000000116b46501: movabs $0x116b464a1,%rsi
  0x0000000116b4650b: mov    %rsp,%rdx
  0x0000000116b4650e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46512: callq  0x000000010c7dd830
  0x0000000116b46517: hlt    
  0x0000000116b46518: pop    %r10
  0x0000000116b4651a: mov    %r15,%rdi
  0x0000000116b4651d: mov    %rbp,0x290(%r15)
  0x0000000116b46524: mov    %rax,0x280(%r15)
  0x0000000116b4652b: test   $0xf,%esp
  0x0000000116b46531: je     0x0000000116b46549
  0x0000000116b46537: sub    $0x8,%rsp
  0x0000000116b4653b: callq  0x000000010c5881a0
  0x0000000116b46540: add    $0x8,%rsp
  0x0000000116b46544: jmpq   0x0000000116b4654e
  0x0000000116b46549: callq  0x000000010c5881a0
  0x0000000116b4654e: push   %rax
  0x0000000116b4654f: push   %rdi
  0x0000000116b46550: push   %rsi
  0x0000000116b46551: push   %rdx
  0x0000000116b46552: push   %rcx
  0x0000000116b46553: push   %r8
  0x0000000116b46555: push   %r9
  0x0000000116b46557: push   %r10
  0x0000000116b46559: mov    %rsp,%r10
  0x0000000116b4655c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46560: push   %r10
  0x0000000116b46562: push   %r11
  0x0000000116b46564: mov    $0x109,%edi
  0x0000000116b46569: movabs $0x7ff815049fd5,%r10
  0x0000000116b46573: callq  *%r10
  0x0000000116b46576: pop    %r11
  0x0000000116b46578: pop    %rsp
  0x0000000116b46579: pop    %r10
  0x0000000116b4657b: pop    %r9
  0x0000000116b4657d: pop    %r8
  0x0000000116b4657f: pop    %rcx
  0x0000000116b46580: pop    %rdx
  0x0000000116b46581: pop    %rsi
  0x0000000116b46582: pop    %rdi
  0x0000000116b46583: cmp    %rax,%r15
  0x0000000116b46586: je     0x0000000116b46603
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4658c: mov    %rsp,-0x28(%rsp)
  0x0000000116b46591: sub    $0x80,%rsp
  0x0000000116b46598: mov    %rax,0x78(%rsp)
  0x0000000116b4659d: mov    %rcx,0x70(%rsp)
  0x0000000116b465a2: mov    %rdx,0x68(%rsp)
  0x0000000116b465a7: mov    %rbx,0x60(%rsp)
  0x0000000116b465ac: mov    %rbp,0x50(%rsp)
  0x0000000116b465b1: mov    %rsi,0x48(%rsp)
  0x0000000116b465b6: mov    %rdi,0x40(%rsp)
  0x0000000116b465bb: mov    %r8,0x38(%rsp)
  0x0000000116b465c0: mov    %r9,0x30(%rsp)
  0x0000000116b465c5: mov    %r10,0x28(%rsp)
  0x0000000116b465ca: mov    %r11,0x20(%rsp)
  0x0000000116b465cf: mov    %r12,0x18(%rsp)
  0x0000000116b465d4: mov    %r13,0x10(%rsp)
  0x0000000116b465d9: mov    %r14,0x8(%rsp)
  0x0000000116b465de: mov    %r15,(%rsp)
  0x0000000116b465e2: movabs $0x10cc6405e,%rdi
  0x0000000116b465ec: movabs $0x116b4658c,%rsi
  0x0000000116b465f6: mov    %rsp,%rdx
  0x0000000116b465f9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b465fd: callq  0x000000010c7dd830
  0x0000000116b46602: hlt    
  0x0000000116b46603: pop    %rax
  0x0000000116b46604: movabs $0x0,%r10
  0x0000000116b4660e: mov    %r10,0x280(%r15)
  0x0000000116b46615: movabs $0x0,%r10
  0x0000000116b4661f: mov    %r10,0x290(%r15)
  0x0000000116b46626: movabs $0x0,%r10
  0x0000000116b46630: mov    %r10,0x288(%r15)
  0x0000000116b46637: cmpq   $0x0,0x8(%r15)
  0x0000000116b4663f: je     0x0000000116b4664a
  0x0000000116b46645: jmpq   0x0000000116b30420
  0x0000000116b4664a: mov    -0x38(%rbp),%r13
  0x0000000116b4664e: mov    -0x30(%rbp),%r14
  0x0000000116b46652: retq   
  0x0000000116b46653: mov    %rsp,-0x28(%rsp)
  0x0000000116b46658: sub    $0x80,%rsp
  0x0000000116b4665f: mov    %rax,0x78(%rsp)
  0x0000000116b46664: mov    %rcx,0x70(%rsp)
  0x0000000116b46669: mov    %rdx,0x68(%rsp)
  0x0000000116b4666e: mov    %rbx,0x60(%rsp)
  0x0000000116b46673: mov    %rbp,0x50(%rsp)
  0x0000000116b46678: mov    %rsi,0x48(%rsp)
  0x0000000116b4667d: mov    %rdi,0x40(%rsp)
  0x0000000116b46682: mov    %r8,0x38(%rsp)
  0x0000000116b46687: mov    %r9,0x30(%rsp)
  0x0000000116b4668c: mov    %r10,0x28(%rsp)
  0x0000000116b46691: mov    %r11,0x20(%rsp)
  0x0000000116b46696: mov    %r12,0x18(%rsp)
  0x0000000116b4669b: mov    %r13,0x10(%rsp)
  0x0000000116b466a0: mov    %r14,0x8(%rsp)
  0x0000000116b466a5: mov    %r15,(%rsp)
  0x0000000116b466a9: movabs $0x10cb763be,%rdi
  0x0000000116b466b3: movabs $0x116b46653,%rsi
  0x0000000116b466bd: mov    %rsp,%rdx
  0x0000000116b466c0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b466c4: callq  0x000000010c7dd830
  0x0000000116b466c9: hlt    
  0x0000000116b466ca: movzbl 0x5(%r13),%ebx
  0x0000000116b466cf: add    $0x5,%r13
  0x0000000116b466d3: movabs $0x10ce3ae80,%r10
  0x0000000116b466dd: jmpq   *(%r10,%rbx,8)
  0x0000000116b466e1: movq   $0x0,-0x10(%rbp)
  0x0000000116b466e9: mov    -0x38(%rbp),%r13
  0x0000000116b466ed: mov    -0x30(%rbp),%r14
  0x0000000116b466f1: cmpq   $0x0,0x8(%r15)
  0x0000000116b466f9: je     0x0000000116b469cf
  0x0000000116b466ff: callq  0x0000000116b46709
  0x0000000116b46704: jmpq   0x0000000116b46958
  0x0000000116b46709: lea    0x8(%rsp),%rax
  0x0000000116b4670e: mov    %r13,-0x38(%rbp)
  0x0000000116b46712: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4671a: je     0x0000000116b46797
  0x0000000116b46720: mov    %rsp,-0x28(%rsp)
  0x0000000116b46725: sub    $0x80,%rsp
  0x0000000116b4672c: mov    %rax,0x78(%rsp)
  0x0000000116b46731: mov    %rcx,0x70(%rsp)
  0x0000000116b46736: mov    %rdx,0x68(%rsp)
  0x0000000116b4673b: mov    %rbx,0x60(%rsp)
  0x0000000116b46740: mov    %rbp,0x50(%rsp)
  0x0000000116b46745: mov    %rsi,0x48(%rsp)
  0x0000000116b4674a: mov    %rdi,0x40(%rsp)
  0x0000000116b4674f: mov    %r8,0x38(%rsp)
  0x0000000116b46754: mov    %r9,0x30(%rsp)
  0x0000000116b46759: mov    %r10,0x28(%rsp)
  0x0000000116b4675e: mov    %r11,0x20(%rsp)
  0x0000000116b46763: mov    %r12,0x18(%rsp)
  0x0000000116b46768: mov    %r13,0x10(%rsp)
  0x0000000116b4676d: mov    %r14,0x8(%rsp)
  0x0000000116b46772: mov    %r15,(%rsp)
  0x0000000116b46776: movabs $0x10cc2363b,%rdi
  0x0000000116b46780: movabs $0x116b46720,%rsi
  0x0000000116b4678a: mov    %rsp,%rdx
  0x0000000116b4678d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46791: callq  0x000000010c7dd830
  0x0000000116b46796: hlt    
  0x0000000116b46797: push   %r10
  0x0000000116b46799: cmp    -0x9cffef0(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b467a0: je     0x0000000116b4681d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b467a6: mov    %rsp,-0x28(%rsp)
  0x0000000116b467ab: sub    $0x80,%rsp
  0x0000000116b467b2: mov    %rax,0x78(%rsp)
  0x0000000116b467b7: mov    %rcx,0x70(%rsp)
  0x0000000116b467bc: mov    %rdx,0x68(%rsp)
  0x0000000116b467c1: mov    %rbx,0x60(%rsp)
  0x0000000116b467c6: mov    %rbp,0x50(%rsp)
  0x0000000116b467cb: mov    %rsi,0x48(%rsp)
  0x0000000116b467d0: mov    %rdi,0x40(%rsp)
  0x0000000116b467d5: mov    %r8,0x38(%rsp)
  0x0000000116b467da: mov    %r9,0x30(%rsp)
  0x0000000116b467df: mov    %r10,0x28(%rsp)
  0x0000000116b467e4: mov    %r11,0x20(%rsp)
  0x0000000116b467e9: mov    %r12,0x18(%rsp)
  0x0000000116b467ee: mov    %r13,0x10(%rsp)
  0x0000000116b467f3: mov    %r14,0x8(%rsp)
  0x0000000116b467f8: mov    %r15,(%rsp)
  0x0000000116b467fc: movabs $0x10cc63f17,%rdi
  0x0000000116b46806: movabs $0x116b467a6,%rsi
  0x0000000116b46810: mov    %rsp,%rdx
  0x0000000116b46813: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46817: callq  0x000000010c7dd830
  0x0000000116b4681c: hlt    
  0x0000000116b4681d: pop    %r10
  0x0000000116b4681f: mov    %r15,%rdi
  0x0000000116b46822: mov    %rbp,0x290(%r15)
  0x0000000116b46829: mov    %rax,0x280(%r15)
  0x0000000116b46830: test   $0xf,%esp
  0x0000000116b46836: je     0x0000000116b4684e
  0x0000000116b4683c: sub    $0x8,%rsp
  0x0000000116b46840: callq  0x000000010c5881a0
  0x0000000116b46845: add    $0x8,%rsp
  0x0000000116b46849: jmpq   0x0000000116b46853
  0x0000000116b4684e: callq  0x000000010c5881a0
  0x0000000116b46853: push   %rax
  0x0000000116b46854: push   %rdi
  0x0000000116b46855: push   %rsi
  0x0000000116b46856: push   %rdx
  0x0000000116b46857: push   %rcx
  0x0000000116b46858: push   %r8
  0x0000000116b4685a: push   %r9
  0x0000000116b4685c: push   %r10
  0x0000000116b4685e: mov    %rsp,%r10
  0x0000000116b46861: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46865: push   %r10
  0x0000000116b46867: push   %r11
  0x0000000116b46869: mov    $0x109,%edi
  0x0000000116b4686e: movabs $0x7ff815049fd5,%r10
  0x0000000116b46878: callq  *%r10
  0x0000000116b4687b: pop    %r11
  0x0000000116b4687d: pop    %rsp
  0x0000000116b4687e: pop    %r10
  0x0000000116b46880: pop    %r9
  0x0000000116b46882: pop    %r8
  0x0000000116b46884: pop    %rcx
  0x0000000116b46885: pop    %rdx
  0x0000000116b46886: pop    %rsi
  0x0000000116b46887: pop    %rdi
  0x0000000116b46888: cmp    %rax,%r15
  0x0000000116b4688b: je     0x0000000116b46908
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b46891: mov    %rsp,-0x28(%rsp)
  0x0000000116b46896: sub    $0x80,%rsp
  0x0000000116b4689d: mov    %rax,0x78(%rsp)
  0x0000000116b468a2: mov    %rcx,0x70(%rsp)
  0x0000000116b468a7: mov    %rdx,0x68(%rsp)
  0x0000000116b468ac: mov    %rbx,0x60(%rsp)
  0x0000000116b468b1: mov    %rbp,0x50(%rsp)
  0x0000000116b468b6: mov    %rsi,0x48(%rsp)
  0x0000000116b468bb: mov    %rdi,0x40(%rsp)
  0x0000000116b468c0: mov    %r8,0x38(%rsp)
  0x0000000116b468c5: mov    %r9,0x30(%rsp)
  0x0000000116b468ca: mov    %r10,0x28(%rsp)
  0x0000000116b468cf: mov    %r11,0x20(%rsp)
  0x0000000116b468d4: mov    %r12,0x18(%rsp)
  0x0000000116b468d9: mov    %r13,0x10(%rsp)
  0x0000000116b468de: mov    %r14,0x8(%rsp)
  0x0000000116b468e3: mov    %r15,(%rsp)
  0x0000000116b468e7: movabs $0x10cc6405e,%rdi
  0x0000000116b468f1: movabs $0x116b46891,%rsi
  0x0000000116b468fb: mov    %rsp,%rdx
  0x0000000116b468fe: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46902: callq  0x000000010c7dd830
  0x0000000116b46907: hlt    
  0x0000000116b46908: pop    %rax
  0x0000000116b46909: movabs $0x0,%r10
  0x0000000116b46913: mov    %r10,0x280(%r15)
  0x0000000116b4691a: movabs $0x0,%r10
  0x0000000116b46924: mov    %r10,0x290(%r15)
  0x0000000116b4692b: movabs $0x0,%r10
  0x0000000116b46935: mov    %r10,0x288(%r15)
  0x0000000116b4693c: cmpq   $0x0,0x8(%r15)
  0x0000000116b46944: je     0x0000000116b4694f
  0x0000000116b4694a: jmpq   0x0000000116b30420
  0x0000000116b4694f: mov    -0x38(%rbp),%r13
  0x0000000116b46953: mov    -0x30(%rbp),%r14
  0x0000000116b46957: retq   
  0x0000000116b46958: mov    %rsp,-0x28(%rsp)
  0x0000000116b4695d: sub    $0x80,%rsp
  0x0000000116b46964: mov    %rax,0x78(%rsp)
  0x0000000116b46969: mov    %rcx,0x70(%rsp)
  0x0000000116b4696e: mov    %rdx,0x68(%rsp)
  0x0000000116b46973: mov    %rbx,0x60(%rsp)
  0x0000000116b46978: mov    %rbp,0x50(%rsp)
  0x0000000116b4697d: mov    %rsi,0x48(%rsp)
  0x0000000116b46982: mov    %rdi,0x40(%rsp)
  0x0000000116b46987: mov    %r8,0x38(%rsp)
  0x0000000116b4698c: mov    %r9,0x30(%rsp)
  0x0000000116b46991: mov    %r10,0x28(%rsp)
  0x0000000116b46996: mov    %r11,0x20(%rsp)
  0x0000000116b4699b: mov    %r12,0x18(%rsp)
  0x0000000116b469a0: mov    %r13,0x10(%rsp)
  0x0000000116b469a5: mov    %r14,0x8(%rsp)
  0x0000000116b469aa: mov    %r15,(%rsp)
  0x0000000116b469ae: movabs $0x10cb763be,%rdi
  0x0000000116b469b8: movabs $0x116b46958,%rsi
  0x0000000116b469c2: mov    %rsp,%rdx
  0x0000000116b469c5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b469c9: callq  0x000000010c7dd830
  0x0000000116b469ce: hlt    
  0x0000000116b469cf: movzbl 0x5(%r13),%ebx
  0x0000000116b469d4: add    $0x5,%r13
  0x0000000116b469d8: movabs $0x10ce38e80,%r10
  0x0000000116b469e2: jmpq   *(%r10,%rbx,8)
  0x0000000116b469e6: movq   $0x0,-0x10(%rbp)
  0x0000000116b469ee: mov    -0x38(%rbp),%r13
  0x0000000116b469f2: mov    -0x30(%rbp),%r14
  0x0000000116b469f6: cmpq   $0x0,0x8(%r15)
  0x0000000116b469fe: je     0x0000000116b46cd4
  0x0000000116b46a04: callq  0x0000000116b46a0e
  0x0000000116b46a09: jmpq   0x0000000116b46c5d
  0x0000000116b46a0e: lea    0x8(%rsp),%rax
  0x0000000116b46a13: mov    %r13,-0x38(%rbp)
  0x0000000116b46a17: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b46a1f: je     0x0000000116b46a9c
  0x0000000116b46a25: mov    %rsp,-0x28(%rsp)
  0x0000000116b46a2a: sub    $0x80,%rsp
  0x0000000116b46a31: mov    %rax,0x78(%rsp)
  0x0000000116b46a36: mov    %rcx,0x70(%rsp)
  0x0000000116b46a3b: mov    %rdx,0x68(%rsp)
  0x0000000116b46a40: mov    %rbx,0x60(%rsp)
  0x0000000116b46a45: mov    %rbp,0x50(%rsp)
  0x0000000116b46a4a: mov    %rsi,0x48(%rsp)
  0x0000000116b46a4f: mov    %rdi,0x40(%rsp)
  0x0000000116b46a54: mov    %r8,0x38(%rsp)
  0x0000000116b46a59: mov    %r9,0x30(%rsp)
  0x0000000116b46a5e: mov    %r10,0x28(%rsp)
  0x0000000116b46a63: mov    %r11,0x20(%rsp)
  0x0000000116b46a68: mov    %r12,0x18(%rsp)
  0x0000000116b46a6d: mov    %r13,0x10(%rsp)
  0x0000000116b46a72: mov    %r14,0x8(%rsp)
  0x0000000116b46a77: mov    %r15,(%rsp)
  0x0000000116b46a7b: movabs $0x10cc2363b,%rdi
  0x0000000116b46a85: movabs $0x116b46a25,%rsi
  0x0000000116b46a8f: mov    %rsp,%rdx
  0x0000000116b46a92: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46a96: callq  0x000000010c7dd830
  0x0000000116b46a9b: hlt    
  0x0000000116b46a9c: push   %r10
  0x0000000116b46a9e: cmp    -0x9d001f5(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b46aa5: je     0x0000000116b46b22
  ;; call_VM_base: heap base corrupted?
  0x0000000116b46aab: mov    %rsp,-0x28(%rsp)
  0x0000000116b46ab0: sub    $0x80,%rsp
  0x0000000116b46ab7: mov    %rax,0x78(%rsp)
  0x0000000116b46abc: mov    %rcx,0x70(%rsp)
  0x0000000116b46ac1: mov    %rdx,0x68(%rsp)
  0x0000000116b46ac6: mov    %rbx,0x60(%rsp)
  0x0000000116b46acb: mov    %rbp,0x50(%rsp)
  0x0000000116b46ad0: mov    %rsi,0x48(%rsp)
  0x0000000116b46ad5: mov    %rdi,0x40(%rsp)
  0x0000000116b46ada: mov    %r8,0x38(%rsp)
  0x0000000116b46adf: mov    %r9,0x30(%rsp)
  0x0000000116b46ae4: mov    %r10,0x28(%rsp)
  0x0000000116b46ae9: mov    %r11,0x20(%rsp)
  0x0000000116b46aee: mov    %r12,0x18(%rsp)
  0x0000000116b46af3: mov    %r13,0x10(%rsp)
  0x0000000116b46af8: mov    %r14,0x8(%rsp)
  0x0000000116b46afd: mov    %r15,(%rsp)
  0x0000000116b46b01: movabs $0x10cc63f17,%rdi
  0x0000000116b46b0b: movabs $0x116b46aab,%rsi
  0x0000000116b46b15: mov    %rsp,%rdx
  0x0000000116b46b18: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46b1c: callq  0x000000010c7dd830
  0x0000000116b46b21: hlt    
  0x0000000116b46b22: pop    %r10
  0x0000000116b46b24: mov    %r15,%rdi
  0x0000000116b46b27: mov    %rbp,0x290(%r15)
  0x0000000116b46b2e: mov    %rax,0x280(%r15)
  0x0000000116b46b35: test   $0xf,%esp
  0x0000000116b46b3b: je     0x0000000116b46b53
  0x0000000116b46b41: sub    $0x8,%rsp
  0x0000000116b46b45: callq  0x000000010c5881a0
  0x0000000116b46b4a: add    $0x8,%rsp
  0x0000000116b46b4e: jmpq   0x0000000116b46b58
  0x0000000116b46b53: callq  0x000000010c5881a0
  0x0000000116b46b58: push   %rax
  0x0000000116b46b59: push   %rdi
  0x0000000116b46b5a: push   %rsi
  0x0000000116b46b5b: push   %rdx
  0x0000000116b46b5c: push   %rcx
  0x0000000116b46b5d: push   %r8
  0x0000000116b46b5f: push   %r9
  0x0000000116b46b61: push   %r10
  0x0000000116b46b63: mov    %rsp,%r10
  0x0000000116b46b66: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46b6a: push   %r10
  0x0000000116b46b6c: push   %r11
  0x0000000116b46b6e: mov    $0x109,%edi
  0x0000000116b46b73: movabs $0x7ff815049fd5,%r10
  0x0000000116b46b7d: callq  *%r10
  0x0000000116b46b80: pop    %r11
  0x0000000116b46b82: pop    %rsp
  0x0000000116b46b83: pop    %r10
  0x0000000116b46b85: pop    %r9
  0x0000000116b46b87: pop    %r8
  0x0000000116b46b89: pop    %rcx
  0x0000000116b46b8a: pop    %rdx
  0x0000000116b46b8b: pop    %rsi
  0x0000000116b46b8c: pop    %rdi
  0x0000000116b46b8d: cmp    %rax,%r15
  0x0000000116b46b90: je     0x0000000116b46c0d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b46b96: mov    %rsp,-0x28(%rsp)
  0x0000000116b46b9b: sub    $0x80,%rsp
  0x0000000116b46ba2: mov    %rax,0x78(%rsp)
  0x0000000116b46ba7: mov    %rcx,0x70(%rsp)
  0x0000000116b46bac: mov    %rdx,0x68(%rsp)
  0x0000000116b46bb1: mov    %rbx,0x60(%rsp)
  0x0000000116b46bb6: mov    %rbp,0x50(%rsp)
  0x0000000116b46bbb: mov    %rsi,0x48(%rsp)
  0x0000000116b46bc0: mov    %rdi,0x40(%rsp)
  0x0000000116b46bc5: mov    %r8,0x38(%rsp)
  0x0000000116b46bca: mov    %r9,0x30(%rsp)
  0x0000000116b46bcf: mov    %r10,0x28(%rsp)
  0x0000000116b46bd4: mov    %r11,0x20(%rsp)
  0x0000000116b46bd9: mov    %r12,0x18(%rsp)
  0x0000000116b46bde: mov    %r13,0x10(%rsp)
  0x0000000116b46be3: mov    %r14,0x8(%rsp)
  0x0000000116b46be8: mov    %r15,(%rsp)
  0x0000000116b46bec: movabs $0x10cc6405e,%rdi
  0x0000000116b46bf6: movabs $0x116b46b96,%rsi
  0x0000000116b46c00: mov    %rsp,%rdx
  0x0000000116b46c03: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46c07: callq  0x000000010c7dd830
  0x0000000116b46c0c: hlt    
  0x0000000116b46c0d: pop    %rax
  0x0000000116b46c0e: movabs $0x0,%r10
  0x0000000116b46c18: mov    %r10,0x280(%r15)
  0x0000000116b46c1f: movabs $0x0,%r10
  0x0000000116b46c29: mov    %r10,0x290(%r15)
  0x0000000116b46c30: movabs $0x0,%r10
  0x0000000116b46c3a: mov    %r10,0x288(%r15)
  0x0000000116b46c41: cmpq   $0x0,0x8(%r15)
  0x0000000116b46c49: je     0x0000000116b46c54
  0x0000000116b46c4f: jmpq   0x0000000116b30420
  0x0000000116b46c54: mov    -0x38(%rbp),%r13
  0x0000000116b46c58: mov    -0x30(%rbp),%r14
  0x0000000116b46c5c: retq   
  0x0000000116b46c5d: mov    %rsp,-0x28(%rsp)
  0x0000000116b46c62: sub    $0x80,%rsp
  0x0000000116b46c69: mov    %rax,0x78(%rsp)
  0x0000000116b46c6e: mov    %rcx,0x70(%rsp)
  0x0000000116b46c73: mov    %rdx,0x68(%rsp)
  0x0000000116b46c78: mov    %rbx,0x60(%rsp)
  0x0000000116b46c7d: mov    %rbp,0x50(%rsp)
  0x0000000116b46c82: mov    %rsi,0x48(%rsp)
  0x0000000116b46c87: mov    %rdi,0x40(%rsp)
  0x0000000116b46c8c: mov    %r8,0x38(%rsp)
  0x0000000116b46c91: mov    %r9,0x30(%rsp)
  0x0000000116b46c96: mov    %r10,0x28(%rsp)
  0x0000000116b46c9b: mov    %r11,0x20(%rsp)
  0x0000000116b46ca0: mov    %r12,0x18(%rsp)
  0x0000000116b46ca5: mov    %r13,0x10(%rsp)
  0x0000000116b46caa: mov    %r14,0x8(%rsp)
  0x0000000116b46caf: mov    %r15,(%rsp)
  0x0000000116b46cb3: movabs $0x10cb763be,%rdi
  0x0000000116b46cbd: movabs $0x116b46c5d,%rsi
  0x0000000116b46cc7: mov    %rsp,%rdx
  0x0000000116b46cca: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46cce: callq  0x000000010c7dd830
  0x0000000116b46cd3: hlt    
  0x0000000116b46cd4: movzbl 0x5(%r13),%ebx
  0x0000000116b46cd9: add    $0x5,%r13
  0x0000000116b46cdd: movabs $0x10ce39680,%r10
  0x0000000116b46ce7: jmpq   *(%r10,%rbx,8)
  0x0000000116b46ceb: movq   $0x0,-0x10(%rbp)
  0x0000000116b46cf3: mov    -0x38(%rbp),%r13
  0x0000000116b46cf7: mov    -0x30(%rbp),%r14
  0x0000000116b46cfb: cmpq   $0x0,0x8(%r15)
  0x0000000116b46d03: je     0x0000000116b46fd9
  0x0000000116b46d09: callq  0x0000000116b46d13
  0x0000000116b46d0e: jmpq   0x0000000116b46f62
  0x0000000116b46d13: lea    0x8(%rsp),%rax
  0x0000000116b46d18: mov    %r13,-0x38(%rbp)
  0x0000000116b46d1c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b46d24: je     0x0000000116b46da1
  0x0000000116b46d2a: mov    %rsp,-0x28(%rsp)
  0x0000000116b46d2f: sub    $0x80,%rsp
  0x0000000116b46d36: mov    %rax,0x78(%rsp)
  0x0000000116b46d3b: mov    %rcx,0x70(%rsp)
  0x0000000116b46d40: mov    %rdx,0x68(%rsp)
  0x0000000116b46d45: mov    %rbx,0x60(%rsp)
  0x0000000116b46d4a: mov    %rbp,0x50(%rsp)
  0x0000000116b46d4f: mov    %rsi,0x48(%rsp)
  0x0000000116b46d54: mov    %rdi,0x40(%rsp)
  0x0000000116b46d59: mov    %r8,0x38(%rsp)
  0x0000000116b46d5e: mov    %r9,0x30(%rsp)
  0x0000000116b46d63: mov    %r10,0x28(%rsp)
  0x0000000116b46d68: mov    %r11,0x20(%rsp)
  0x0000000116b46d6d: mov    %r12,0x18(%rsp)
  0x0000000116b46d72: mov    %r13,0x10(%rsp)
  0x0000000116b46d77: mov    %r14,0x8(%rsp)
  0x0000000116b46d7c: mov    %r15,(%rsp)
  0x0000000116b46d80: movabs $0x10cc2363b,%rdi
  0x0000000116b46d8a: movabs $0x116b46d2a,%rsi
  0x0000000116b46d94: mov    %rsp,%rdx
  0x0000000116b46d97: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46d9b: callq  0x000000010c7dd830
  0x0000000116b46da0: hlt    
  0x0000000116b46da1: push   %r10
  0x0000000116b46da3: cmp    -0x9d004fa(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b46daa: je     0x0000000116b46e27
  ;; call_VM_base: heap base corrupted?
  0x0000000116b46db0: mov    %rsp,-0x28(%rsp)
  0x0000000116b46db5: sub    $0x80,%rsp
  0x0000000116b46dbc: mov    %rax,0x78(%rsp)
  0x0000000116b46dc1: mov    %rcx,0x70(%rsp)
  0x0000000116b46dc6: mov    %rdx,0x68(%rsp)
  0x0000000116b46dcb: mov    %rbx,0x60(%rsp)
  0x0000000116b46dd0: mov    %rbp,0x50(%rsp)
  0x0000000116b46dd5: mov    %rsi,0x48(%rsp)
  0x0000000116b46dda: mov    %rdi,0x40(%rsp)
  0x0000000116b46ddf: mov    %r8,0x38(%rsp)
  0x0000000116b46de4: mov    %r9,0x30(%rsp)
  0x0000000116b46de9: mov    %r10,0x28(%rsp)
  0x0000000116b46dee: mov    %r11,0x20(%rsp)
  0x0000000116b46df3: mov    %r12,0x18(%rsp)
  0x0000000116b46df8: mov    %r13,0x10(%rsp)
  0x0000000116b46dfd: mov    %r14,0x8(%rsp)
  0x0000000116b46e02: mov    %r15,(%rsp)
  0x0000000116b46e06: movabs $0x10cc63f17,%rdi
  0x0000000116b46e10: movabs $0x116b46db0,%rsi
  0x0000000116b46e1a: mov    %rsp,%rdx
  0x0000000116b46e1d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46e21: callq  0x000000010c7dd830
  0x0000000116b46e26: hlt    
  0x0000000116b46e27: pop    %r10
  0x0000000116b46e29: mov    %r15,%rdi
  0x0000000116b46e2c: mov    %rbp,0x290(%r15)
  0x0000000116b46e33: mov    %rax,0x280(%r15)
  0x0000000116b46e3a: test   $0xf,%esp
  0x0000000116b46e40: je     0x0000000116b46e58
  0x0000000116b46e46: sub    $0x8,%rsp
  0x0000000116b46e4a: callq  0x000000010c5881a0
  0x0000000116b46e4f: add    $0x8,%rsp
  0x0000000116b46e53: jmpq   0x0000000116b46e5d
  0x0000000116b46e58: callq  0x000000010c5881a0
  0x0000000116b46e5d: push   %rax
  0x0000000116b46e5e: push   %rdi
  0x0000000116b46e5f: push   %rsi
  0x0000000116b46e60: push   %rdx
  0x0000000116b46e61: push   %rcx
  0x0000000116b46e62: push   %r8
  0x0000000116b46e64: push   %r9
  0x0000000116b46e66: push   %r10
  0x0000000116b46e68: mov    %rsp,%r10
  0x0000000116b46e6b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46e6f: push   %r10
  0x0000000116b46e71: push   %r11
  0x0000000116b46e73: mov    $0x109,%edi
  0x0000000116b46e78: movabs $0x7ff815049fd5,%r10
  0x0000000116b46e82: callq  *%r10
  0x0000000116b46e85: pop    %r11
  0x0000000116b46e87: pop    %rsp
  0x0000000116b46e88: pop    %r10
  0x0000000116b46e8a: pop    %r9
  0x0000000116b46e8c: pop    %r8
  0x0000000116b46e8e: pop    %rcx
  0x0000000116b46e8f: pop    %rdx
  0x0000000116b46e90: pop    %rsi
  0x0000000116b46e91: pop    %rdi
  0x0000000116b46e92: cmp    %rax,%r15
  0x0000000116b46e95: je     0x0000000116b46f12
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b46e9b: mov    %rsp,-0x28(%rsp)
  0x0000000116b46ea0: sub    $0x80,%rsp
  0x0000000116b46ea7: mov    %rax,0x78(%rsp)
  0x0000000116b46eac: mov    %rcx,0x70(%rsp)
  0x0000000116b46eb1: mov    %rdx,0x68(%rsp)
  0x0000000116b46eb6: mov    %rbx,0x60(%rsp)
  0x0000000116b46ebb: mov    %rbp,0x50(%rsp)
  0x0000000116b46ec0: mov    %rsi,0x48(%rsp)
  0x0000000116b46ec5: mov    %rdi,0x40(%rsp)
  0x0000000116b46eca: mov    %r8,0x38(%rsp)
  0x0000000116b46ecf: mov    %r9,0x30(%rsp)
  0x0000000116b46ed4: mov    %r10,0x28(%rsp)
  0x0000000116b46ed9: mov    %r11,0x20(%rsp)
  0x0000000116b46ede: mov    %r12,0x18(%rsp)
  0x0000000116b46ee3: mov    %r13,0x10(%rsp)
  0x0000000116b46ee8: mov    %r14,0x8(%rsp)
  0x0000000116b46eed: mov    %r15,(%rsp)
  0x0000000116b46ef1: movabs $0x10cc6405e,%rdi
  0x0000000116b46efb: movabs $0x116b46e9b,%rsi
  0x0000000116b46f05: mov    %rsp,%rdx
  0x0000000116b46f08: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46f0c: callq  0x000000010c7dd830
  0x0000000116b46f11: hlt    
  0x0000000116b46f12: pop    %rax
  0x0000000116b46f13: movabs $0x0,%r10
  0x0000000116b46f1d: mov    %r10,0x280(%r15)
  0x0000000116b46f24: movabs $0x0,%r10
  0x0000000116b46f2e: mov    %r10,0x290(%r15)
  0x0000000116b46f35: movabs $0x0,%r10
  0x0000000116b46f3f: mov    %r10,0x288(%r15)
  0x0000000116b46f46: cmpq   $0x0,0x8(%r15)
  0x0000000116b46f4e: je     0x0000000116b46f59
  0x0000000116b46f54: jmpq   0x0000000116b30420
  0x0000000116b46f59: mov    -0x38(%rbp),%r13
  0x0000000116b46f5d: mov    -0x30(%rbp),%r14
  0x0000000116b46f61: retq   
  0x0000000116b46f62: mov    %rsp,-0x28(%rsp)
  0x0000000116b46f67: sub    $0x80,%rsp
  0x0000000116b46f6e: mov    %rax,0x78(%rsp)
  0x0000000116b46f73: mov    %rcx,0x70(%rsp)
  0x0000000116b46f78: mov    %rdx,0x68(%rsp)
  0x0000000116b46f7d: mov    %rbx,0x60(%rsp)
  0x0000000116b46f82: mov    %rbp,0x50(%rsp)
  0x0000000116b46f87: mov    %rsi,0x48(%rsp)
  0x0000000116b46f8c: mov    %rdi,0x40(%rsp)
  0x0000000116b46f91: mov    %r8,0x38(%rsp)
  0x0000000116b46f96: mov    %r9,0x30(%rsp)
  0x0000000116b46f9b: mov    %r10,0x28(%rsp)
  0x0000000116b46fa0: mov    %r11,0x20(%rsp)
  0x0000000116b46fa5: mov    %r12,0x18(%rsp)
  0x0000000116b46faa: mov    %r13,0x10(%rsp)
  0x0000000116b46faf: mov    %r14,0x8(%rsp)
  0x0000000116b46fb4: mov    %r15,(%rsp)
  0x0000000116b46fb8: movabs $0x10cb763be,%rdi
  0x0000000116b46fc2: movabs $0x116b46f62,%rsi
  0x0000000116b46fcc: mov    %rsp,%rdx
  0x0000000116b46fcf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b46fd3: callq  0x000000010c7dd830
  0x0000000116b46fd8: hlt    
  0x0000000116b46fd9: movzbl 0x5(%r13),%ebx
  0x0000000116b46fde: add    $0x5,%r13
  0x0000000116b46fe2: movabs $0x10ce39e80,%r10
  0x0000000116b46fec: jmpq   *(%r10,%rbx,8)
  0x0000000116b46ff0: movq   $0x0,-0x10(%rbp)
  0x0000000116b46ff8: mov    -0x38(%rbp),%r13
  0x0000000116b46ffc: mov    -0x30(%rbp),%r14
  0x0000000116b47000: cmpq   $0x0,0x8(%r15)
  0x0000000116b47008: je     0x0000000116b472de
  0x0000000116b4700e: callq  0x0000000116b47018
  0x0000000116b47013: jmpq   0x0000000116b47267
  0x0000000116b47018: lea    0x8(%rsp),%rax
  0x0000000116b4701d: mov    %r13,-0x38(%rbp)
  0x0000000116b47021: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b47029: je     0x0000000116b470a6
  0x0000000116b4702f: mov    %rsp,-0x28(%rsp)
  0x0000000116b47034: sub    $0x80,%rsp
  0x0000000116b4703b: mov    %rax,0x78(%rsp)
  0x0000000116b47040: mov    %rcx,0x70(%rsp)
  0x0000000116b47045: mov    %rdx,0x68(%rsp)
  0x0000000116b4704a: mov    %rbx,0x60(%rsp)
  0x0000000116b4704f: mov    %rbp,0x50(%rsp)
  0x0000000116b47054: mov    %rsi,0x48(%rsp)
  0x0000000116b47059: mov    %rdi,0x40(%rsp)
  0x0000000116b4705e: mov    %r8,0x38(%rsp)
  0x0000000116b47063: mov    %r9,0x30(%rsp)
  0x0000000116b47068: mov    %r10,0x28(%rsp)
  0x0000000116b4706d: mov    %r11,0x20(%rsp)
  0x0000000116b47072: mov    %r12,0x18(%rsp)
  0x0000000116b47077: mov    %r13,0x10(%rsp)
  0x0000000116b4707c: mov    %r14,0x8(%rsp)
  0x0000000116b47081: mov    %r15,(%rsp)
  0x0000000116b47085: movabs $0x10cc2363b,%rdi
  0x0000000116b4708f: movabs $0x116b4702f,%rsi
  0x0000000116b47099: mov    %rsp,%rdx
  0x0000000116b4709c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b470a0: callq  0x000000010c7dd830
  0x0000000116b470a5: hlt    
  0x0000000116b470a6: push   %r10
  0x0000000116b470a8: cmp    -0x9d007ff(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b470af: je     0x0000000116b4712c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b470b5: mov    %rsp,-0x28(%rsp)
  0x0000000116b470ba: sub    $0x80,%rsp
  0x0000000116b470c1: mov    %rax,0x78(%rsp)
  0x0000000116b470c6: mov    %rcx,0x70(%rsp)
  0x0000000116b470cb: mov    %rdx,0x68(%rsp)
  0x0000000116b470d0: mov    %rbx,0x60(%rsp)
  0x0000000116b470d5: mov    %rbp,0x50(%rsp)
  0x0000000116b470da: mov    %rsi,0x48(%rsp)
  0x0000000116b470df: mov    %rdi,0x40(%rsp)
  0x0000000116b470e4: mov    %r8,0x38(%rsp)
  0x0000000116b470e9: mov    %r9,0x30(%rsp)
  0x0000000116b470ee: mov    %r10,0x28(%rsp)
  0x0000000116b470f3: mov    %r11,0x20(%rsp)
  0x0000000116b470f8: mov    %r12,0x18(%rsp)
  0x0000000116b470fd: mov    %r13,0x10(%rsp)
  0x0000000116b47102: mov    %r14,0x8(%rsp)
  0x0000000116b47107: mov    %r15,(%rsp)
  0x0000000116b4710b: movabs $0x10cc63f17,%rdi
  0x0000000116b47115: movabs $0x116b470b5,%rsi
  0x0000000116b4711f: mov    %rsp,%rdx
  0x0000000116b47122: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47126: callq  0x000000010c7dd830
  0x0000000116b4712b: hlt    
  0x0000000116b4712c: pop    %r10
  0x0000000116b4712e: mov    %r15,%rdi
  0x0000000116b47131: mov    %rbp,0x290(%r15)
  0x0000000116b47138: mov    %rax,0x280(%r15)
  0x0000000116b4713f: test   $0xf,%esp
  0x0000000116b47145: je     0x0000000116b4715d
  0x0000000116b4714b: sub    $0x8,%rsp
  0x0000000116b4714f: callq  0x000000010c5881a0
  0x0000000116b47154: add    $0x8,%rsp
  0x0000000116b47158: jmpq   0x0000000116b47162
  0x0000000116b4715d: callq  0x000000010c5881a0
  0x0000000116b47162: push   %rax
  0x0000000116b47163: push   %rdi
  0x0000000116b47164: push   %rsi
  0x0000000116b47165: push   %rdx
  0x0000000116b47166: push   %rcx
  0x0000000116b47167: push   %r8
  0x0000000116b47169: push   %r9
  0x0000000116b4716b: push   %r10
  0x0000000116b4716d: mov    %rsp,%r10
  0x0000000116b47170: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47174: push   %r10
  0x0000000116b47176: push   %r11
  0x0000000116b47178: mov    $0x109,%edi
  0x0000000116b4717d: movabs $0x7ff815049fd5,%r10
  0x0000000116b47187: callq  *%r10
  0x0000000116b4718a: pop    %r11
  0x0000000116b4718c: pop    %rsp
  0x0000000116b4718d: pop    %r10
  0x0000000116b4718f: pop    %r9
  0x0000000116b47191: pop    %r8
  0x0000000116b47193: pop    %rcx
  0x0000000116b47194: pop    %rdx
  0x0000000116b47195: pop    %rsi
  0x0000000116b47196: pop    %rdi
  0x0000000116b47197: cmp    %rax,%r15
  0x0000000116b4719a: je     0x0000000116b47217
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b471a0: mov    %rsp,-0x28(%rsp)
  0x0000000116b471a5: sub    $0x80,%rsp
  0x0000000116b471ac: mov    %rax,0x78(%rsp)
  0x0000000116b471b1: mov    %rcx,0x70(%rsp)
  0x0000000116b471b6: mov    %rdx,0x68(%rsp)
  0x0000000116b471bb: mov    %rbx,0x60(%rsp)
  0x0000000116b471c0: mov    %rbp,0x50(%rsp)
  0x0000000116b471c5: mov    %rsi,0x48(%rsp)
  0x0000000116b471ca: mov    %rdi,0x40(%rsp)
  0x0000000116b471cf: mov    %r8,0x38(%rsp)
  0x0000000116b471d4: mov    %r9,0x30(%rsp)
  0x0000000116b471d9: mov    %r10,0x28(%rsp)
  0x0000000116b471de: mov    %r11,0x20(%rsp)
  0x0000000116b471e3: mov    %r12,0x18(%rsp)
  0x0000000116b471e8: mov    %r13,0x10(%rsp)
  0x0000000116b471ed: mov    %r14,0x8(%rsp)
  0x0000000116b471f2: mov    %r15,(%rsp)
  0x0000000116b471f6: movabs $0x10cc6405e,%rdi
  0x0000000116b47200: movabs $0x116b471a0,%rsi
  0x0000000116b4720a: mov    %rsp,%rdx
  0x0000000116b4720d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47211: callq  0x000000010c7dd830
  0x0000000116b47216: hlt    
  0x0000000116b47217: pop    %rax
  0x0000000116b47218: movabs $0x0,%r10
  0x0000000116b47222: mov    %r10,0x280(%r15)
  0x0000000116b47229: movabs $0x0,%r10
  0x0000000116b47233: mov    %r10,0x290(%r15)
  0x0000000116b4723a: movabs $0x0,%r10
  0x0000000116b47244: mov    %r10,0x288(%r15)
  0x0000000116b4724b: cmpq   $0x0,0x8(%r15)
  0x0000000116b47253: je     0x0000000116b4725e
  0x0000000116b47259: jmpq   0x0000000116b30420
  0x0000000116b4725e: mov    -0x38(%rbp),%r13
  0x0000000116b47262: mov    -0x30(%rbp),%r14
  0x0000000116b47266: retq   
  0x0000000116b47267: mov    %rsp,-0x28(%rsp)
  0x0000000116b4726c: sub    $0x80,%rsp
  0x0000000116b47273: mov    %rax,0x78(%rsp)
  0x0000000116b47278: mov    %rcx,0x70(%rsp)
  0x0000000116b4727d: mov    %rdx,0x68(%rsp)
  0x0000000116b47282: mov    %rbx,0x60(%rsp)
  0x0000000116b47287: mov    %rbp,0x50(%rsp)
  0x0000000116b4728c: mov    %rsi,0x48(%rsp)
  0x0000000116b47291: mov    %rdi,0x40(%rsp)
  0x0000000116b47296: mov    %r8,0x38(%rsp)
  0x0000000116b4729b: mov    %r9,0x30(%rsp)
  0x0000000116b472a0: mov    %r10,0x28(%rsp)
  0x0000000116b472a5: mov    %r11,0x20(%rsp)
  0x0000000116b472aa: mov    %r12,0x18(%rsp)
  0x0000000116b472af: mov    %r13,0x10(%rsp)
  0x0000000116b472b4: mov    %r14,0x8(%rsp)
  0x0000000116b472b9: mov    %r15,(%rsp)
  0x0000000116b472bd: movabs $0x10cb763be,%rdi
  0x0000000116b472c7: movabs $0x116b47267,%rsi
  0x0000000116b472d1: mov    %rsp,%rdx
  0x0000000116b472d4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b472d8: callq  0x000000010c7dd830
  0x0000000116b472dd: hlt    
  0x0000000116b472de: movzbl 0x5(%r13),%ebx
  0x0000000116b472e3: add    $0x5,%r13
  0x0000000116b472e7: movabs $0x10ce3a680,%r10
  0x0000000116b472f1: jmpq   *(%r10,%rbx,8)
  0x0000000116b472f5: movq   $0x0,-0x10(%rbp)
  0x0000000116b472fd: mov    -0x38(%rbp),%r13
  0x0000000116b47301: mov    -0x30(%rbp),%r14
  0x0000000116b47305: cmpq   $0x0,0x8(%r15)
  0x0000000116b4730d: je     0x0000000116b475e3
  0x0000000116b47313: callq  0x0000000116b4731d
  0x0000000116b47318: jmpq   0x0000000116b4756c
  0x0000000116b4731d: lea    0x8(%rsp),%rax
  0x0000000116b47322: mov    %r13,-0x38(%rbp)
  0x0000000116b47326: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4732e: je     0x0000000116b473ab
  0x0000000116b47334: mov    %rsp,-0x28(%rsp)
  0x0000000116b47339: sub    $0x80,%rsp
  0x0000000116b47340: mov    %rax,0x78(%rsp)
  0x0000000116b47345: mov    %rcx,0x70(%rsp)
  0x0000000116b4734a: mov    %rdx,0x68(%rsp)
  0x0000000116b4734f: mov    %rbx,0x60(%rsp)
  0x0000000116b47354: mov    %rbp,0x50(%rsp)
  0x0000000116b47359: mov    %rsi,0x48(%rsp)
  0x0000000116b4735e: mov    %rdi,0x40(%rsp)
  0x0000000116b47363: mov    %r8,0x38(%rsp)
  0x0000000116b47368: mov    %r9,0x30(%rsp)
  0x0000000116b4736d: mov    %r10,0x28(%rsp)
  0x0000000116b47372: mov    %r11,0x20(%rsp)
  0x0000000116b47377: mov    %r12,0x18(%rsp)
  0x0000000116b4737c: mov    %r13,0x10(%rsp)
  0x0000000116b47381: mov    %r14,0x8(%rsp)
  0x0000000116b47386: mov    %r15,(%rsp)
  0x0000000116b4738a: movabs $0x10cc2363b,%rdi
  0x0000000116b47394: movabs $0x116b47334,%rsi
  0x0000000116b4739e: mov    %rsp,%rdx
  0x0000000116b473a1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b473a5: callq  0x000000010c7dd830
  0x0000000116b473aa: hlt    
  0x0000000116b473ab: push   %r10
  0x0000000116b473ad: cmp    -0x9d00b04(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b473b4: je     0x0000000116b47431
  ;; call_VM_base: heap base corrupted?
  0x0000000116b473ba: mov    %rsp,-0x28(%rsp)
  0x0000000116b473bf: sub    $0x80,%rsp
  0x0000000116b473c6: mov    %rax,0x78(%rsp)
  0x0000000116b473cb: mov    %rcx,0x70(%rsp)
  0x0000000116b473d0: mov    %rdx,0x68(%rsp)
  0x0000000116b473d5: mov    %rbx,0x60(%rsp)
  0x0000000116b473da: mov    %rbp,0x50(%rsp)
  0x0000000116b473df: mov    %rsi,0x48(%rsp)
  0x0000000116b473e4: mov    %rdi,0x40(%rsp)
  0x0000000116b473e9: mov    %r8,0x38(%rsp)
  0x0000000116b473ee: mov    %r9,0x30(%rsp)
  0x0000000116b473f3: mov    %r10,0x28(%rsp)
  0x0000000116b473f8: mov    %r11,0x20(%rsp)
  0x0000000116b473fd: mov    %r12,0x18(%rsp)
  0x0000000116b47402: mov    %r13,0x10(%rsp)
  0x0000000116b47407: mov    %r14,0x8(%rsp)
  0x0000000116b4740c: mov    %r15,(%rsp)
  0x0000000116b47410: movabs $0x10cc63f17,%rdi
  0x0000000116b4741a: movabs $0x116b473ba,%rsi
  0x0000000116b47424: mov    %rsp,%rdx
  0x0000000116b47427: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4742b: callq  0x000000010c7dd830
  0x0000000116b47430: hlt    
  0x0000000116b47431: pop    %r10
  0x0000000116b47433: mov    %r15,%rdi
  0x0000000116b47436: mov    %rbp,0x290(%r15)
  0x0000000116b4743d: mov    %rax,0x280(%r15)
  0x0000000116b47444: test   $0xf,%esp
  0x0000000116b4744a: je     0x0000000116b47462
  0x0000000116b47450: sub    $0x8,%rsp
  0x0000000116b47454: callq  0x000000010c5881a0
  0x0000000116b47459: add    $0x8,%rsp
  0x0000000116b4745d: jmpq   0x0000000116b47467
  0x0000000116b47462: callq  0x000000010c5881a0
  0x0000000116b47467: push   %rax
  0x0000000116b47468: push   %rdi
  0x0000000116b47469: push   %rsi
  0x0000000116b4746a: push   %rdx
  0x0000000116b4746b: push   %rcx
  0x0000000116b4746c: push   %r8
  0x0000000116b4746e: push   %r9
  0x0000000116b47470: push   %r10
  0x0000000116b47472: mov    %rsp,%r10
  0x0000000116b47475: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47479: push   %r10
  0x0000000116b4747b: push   %r11
  0x0000000116b4747d: mov    $0x109,%edi
  0x0000000116b47482: movabs $0x7ff815049fd5,%r10
  0x0000000116b4748c: callq  *%r10
  0x0000000116b4748f: pop    %r11
  0x0000000116b47491: pop    %rsp
  0x0000000116b47492: pop    %r10
  0x0000000116b47494: pop    %r9
  0x0000000116b47496: pop    %r8
  0x0000000116b47498: pop    %rcx
  0x0000000116b47499: pop    %rdx
  0x0000000116b4749a: pop    %rsi
  0x0000000116b4749b: pop    %rdi
  0x0000000116b4749c: cmp    %rax,%r15
  0x0000000116b4749f: je     0x0000000116b4751c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b474a5: mov    %rsp,-0x28(%rsp)
  0x0000000116b474aa: sub    $0x80,%rsp
  0x0000000116b474b1: mov    %rax,0x78(%rsp)
  0x0000000116b474b6: mov    %rcx,0x70(%rsp)
  0x0000000116b474bb: mov    %rdx,0x68(%rsp)
  0x0000000116b474c0: mov    %rbx,0x60(%rsp)
  0x0000000116b474c5: mov    %rbp,0x50(%rsp)
  0x0000000116b474ca: mov    %rsi,0x48(%rsp)
  0x0000000116b474cf: mov    %rdi,0x40(%rsp)
  0x0000000116b474d4: mov    %r8,0x38(%rsp)
  0x0000000116b474d9: mov    %r9,0x30(%rsp)
  0x0000000116b474de: mov    %r10,0x28(%rsp)
  0x0000000116b474e3: mov    %r11,0x20(%rsp)
  0x0000000116b474e8: mov    %r12,0x18(%rsp)
  0x0000000116b474ed: mov    %r13,0x10(%rsp)
  0x0000000116b474f2: mov    %r14,0x8(%rsp)
  0x0000000116b474f7: mov    %r15,(%rsp)
  0x0000000116b474fb: movabs $0x10cc6405e,%rdi
  0x0000000116b47505: movabs $0x116b474a5,%rsi
  0x0000000116b4750f: mov    %rsp,%rdx
  0x0000000116b47512: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47516: callq  0x000000010c7dd830
  0x0000000116b4751b: hlt    
  0x0000000116b4751c: pop    %rax
  0x0000000116b4751d: movabs $0x0,%r10
  0x0000000116b47527: mov    %r10,0x280(%r15)
  0x0000000116b4752e: movabs $0x0,%r10
  0x0000000116b47538: mov    %r10,0x290(%r15)
  0x0000000116b4753f: movabs $0x0,%r10
  0x0000000116b47549: mov    %r10,0x288(%r15)
  0x0000000116b47550: cmpq   $0x0,0x8(%r15)
  0x0000000116b47558: je     0x0000000116b47563
  0x0000000116b4755e: jmpq   0x0000000116b30420
  0x0000000116b47563: mov    -0x38(%rbp),%r13
  0x0000000116b47567: mov    -0x30(%rbp),%r14
  0x0000000116b4756b: retq   
  0x0000000116b4756c: mov    %rsp,-0x28(%rsp)
  0x0000000116b47571: sub    $0x80,%rsp
  0x0000000116b47578: mov    %rax,0x78(%rsp)
  0x0000000116b4757d: mov    %rcx,0x70(%rsp)
  0x0000000116b47582: mov    %rdx,0x68(%rsp)
  0x0000000116b47587: mov    %rbx,0x60(%rsp)
  0x0000000116b4758c: mov    %rbp,0x50(%rsp)
  0x0000000116b47591: mov    %rsi,0x48(%rsp)
  0x0000000116b47596: mov    %rdi,0x40(%rsp)
  0x0000000116b4759b: mov    %r8,0x38(%rsp)
  0x0000000116b475a0: mov    %r9,0x30(%rsp)
  0x0000000116b475a5: mov    %r10,0x28(%rsp)
  0x0000000116b475aa: mov    %r11,0x20(%rsp)
  0x0000000116b475af: mov    %r12,0x18(%rsp)
  0x0000000116b475b4: mov    %r13,0x10(%rsp)
  0x0000000116b475b9: mov    %r14,0x8(%rsp)
  0x0000000116b475be: mov    %r15,(%rsp)
  0x0000000116b475c2: movabs $0x10cb763be,%rdi
  0x0000000116b475cc: movabs $0x116b4756c,%rsi
  0x0000000116b475d6: mov    %rsp,%rdx
  0x0000000116b475d9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b475dd: callq  0x000000010c7dd830
  0x0000000116b475e2: hlt    
  0x0000000116b475e3: movzbl 0x5(%r13),%ebx
  0x0000000116b475e8: add    $0x5,%r13
  0x0000000116b475ec: movabs $0x10ce3b680,%r10
  0x0000000116b475f6: jmpq   *(%r10,%rbx,8)
  0x0000000116b475fa: movq   $0x0,-0x10(%rbp)
  0x0000000116b47602: mov    -0x38(%rbp),%r13
  0x0000000116b47606: mov    -0x30(%rbp),%r14
  0x0000000116b4760a: cmpq   $0x0,0x8(%r15)
  0x0000000116b47612: je     0x0000000116b478e8
  0x0000000116b47618: callq  0x0000000116b47622
  0x0000000116b4761d: jmpq   0x0000000116b47871
  0x0000000116b47622: lea    0x8(%rsp),%rax
  0x0000000116b47627: mov    %r13,-0x38(%rbp)
  0x0000000116b4762b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b47633: je     0x0000000116b476b0
  0x0000000116b47639: mov    %rsp,-0x28(%rsp)
  0x0000000116b4763e: sub    $0x80,%rsp
  0x0000000116b47645: mov    %rax,0x78(%rsp)
  0x0000000116b4764a: mov    %rcx,0x70(%rsp)
  0x0000000116b4764f: mov    %rdx,0x68(%rsp)
  0x0000000116b47654: mov    %rbx,0x60(%rsp)
  0x0000000116b47659: mov    %rbp,0x50(%rsp)
  0x0000000116b4765e: mov    %rsi,0x48(%rsp)
  0x0000000116b47663: mov    %rdi,0x40(%rsp)
  0x0000000116b47668: mov    %r8,0x38(%rsp)
  0x0000000116b4766d: mov    %r9,0x30(%rsp)
  0x0000000116b47672: mov    %r10,0x28(%rsp)
  0x0000000116b47677: mov    %r11,0x20(%rsp)
  0x0000000116b4767c: mov    %r12,0x18(%rsp)
  0x0000000116b47681: mov    %r13,0x10(%rsp)
  0x0000000116b47686: mov    %r14,0x8(%rsp)
  0x0000000116b4768b: mov    %r15,(%rsp)
  0x0000000116b4768f: movabs $0x10cc2363b,%rdi
  0x0000000116b47699: movabs $0x116b47639,%rsi
  0x0000000116b476a3: mov    %rsp,%rdx
  0x0000000116b476a6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b476aa: callq  0x000000010c7dd830
  0x0000000116b476af: hlt    
  0x0000000116b476b0: push   %r10
  0x0000000116b476b2: cmp    -0x9d00e09(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b476b9: je     0x0000000116b47736
  ;; call_VM_base: heap base corrupted?
  0x0000000116b476bf: mov    %rsp,-0x28(%rsp)
  0x0000000116b476c4: sub    $0x80,%rsp
  0x0000000116b476cb: mov    %rax,0x78(%rsp)
  0x0000000116b476d0: mov    %rcx,0x70(%rsp)
  0x0000000116b476d5: mov    %rdx,0x68(%rsp)
  0x0000000116b476da: mov    %rbx,0x60(%rsp)
  0x0000000116b476df: mov    %rbp,0x50(%rsp)
  0x0000000116b476e4: mov    %rsi,0x48(%rsp)
  0x0000000116b476e9: mov    %rdi,0x40(%rsp)
  0x0000000116b476ee: mov    %r8,0x38(%rsp)
  0x0000000116b476f3: mov    %r9,0x30(%rsp)
  0x0000000116b476f8: mov    %r10,0x28(%rsp)
  0x0000000116b476fd: mov    %r11,0x20(%rsp)
  0x0000000116b47702: mov    %r12,0x18(%rsp)
  0x0000000116b47707: mov    %r13,0x10(%rsp)
  0x0000000116b4770c: mov    %r14,0x8(%rsp)
  0x0000000116b47711: mov    %r15,(%rsp)
  0x0000000116b47715: movabs $0x10cc63f17,%rdi
  0x0000000116b4771f: movabs $0x116b476bf,%rsi
  0x0000000116b47729: mov    %rsp,%rdx
  0x0000000116b4772c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47730: callq  0x000000010c7dd830
  0x0000000116b47735: hlt    
  0x0000000116b47736: pop    %r10
  0x0000000116b47738: mov    %r15,%rdi
  0x0000000116b4773b: mov    %rbp,0x290(%r15)
  0x0000000116b47742: mov    %rax,0x280(%r15)
  0x0000000116b47749: test   $0xf,%esp
  0x0000000116b4774f: je     0x0000000116b47767
  0x0000000116b47755: sub    $0x8,%rsp
  0x0000000116b47759: callq  0x000000010c5881a0
  0x0000000116b4775e: add    $0x8,%rsp
  0x0000000116b47762: jmpq   0x0000000116b4776c
  0x0000000116b47767: callq  0x000000010c5881a0
  0x0000000116b4776c: push   %rax
  0x0000000116b4776d: push   %rdi
  0x0000000116b4776e: push   %rsi
  0x0000000116b4776f: push   %rdx
  0x0000000116b47770: push   %rcx
  0x0000000116b47771: push   %r8
  0x0000000116b47773: push   %r9
  0x0000000116b47775: push   %r10
  0x0000000116b47777: mov    %rsp,%r10
  0x0000000116b4777a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4777e: push   %r10
  0x0000000116b47780: push   %r11
  0x0000000116b47782: mov    $0x109,%edi
  0x0000000116b47787: movabs $0x7ff815049fd5,%r10
  0x0000000116b47791: callq  *%r10
  0x0000000116b47794: pop    %r11
  0x0000000116b47796: pop    %rsp
  0x0000000116b47797: pop    %r10
  0x0000000116b47799: pop    %r9
  0x0000000116b4779b: pop    %r8
  0x0000000116b4779d: pop    %rcx
  0x0000000116b4779e: pop    %rdx
  0x0000000116b4779f: pop    %rsi
  0x0000000116b477a0: pop    %rdi
  0x0000000116b477a1: cmp    %rax,%r15
  0x0000000116b477a4: je     0x0000000116b47821
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b477aa: mov    %rsp,-0x28(%rsp)
  0x0000000116b477af: sub    $0x80,%rsp
  0x0000000116b477b6: mov    %rax,0x78(%rsp)
  0x0000000116b477bb: mov    %rcx,0x70(%rsp)
  0x0000000116b477c0: mov    %rdx,0x68(%rsp)
  0x0000000116b477c5: mov    %rbx,0x60(%rsp)
  0x0000000116b477ca: mov    %rbp,0x50(%rsp)
  0x0000000116b477cf: mov    %rsi,0x48(%rsp)
  0x0000000116b477d4: mov    %rdi,0x40(%rsp)
  0x0000000116b477d9: mov    %r8,0x38(%rsp)
  0x0000000116b477de: mov    %r9,0x30(%rsp)
  0x0000000116b477e3: mov    %r10,0x28(%rsp)
  0x0000000116b477e8: mov    %r11,0x20(%rsp)
  0x0000000116b477ed: mov    %r12,0x18(%rsp)
  0x0000000116b477f2: mov    %r13,0x10(%rsp)
  0x0000000116b477f7: mov    %r14,0x8(%rsp)
  0x0000000116b477fc: mov    %r15,(%rsp)
  0x0000000116b47800: movabs $0x10cc6405e,%rdi
  0x0000000116b4780a: movabs $0x116b477aa,%rsi
  0x0000000116b47814: mov    %rsp,%rdx
  0x0000000116b47817: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4781b: callq  0x000000010c7dd830
  0x0000000116b47820: hlt    
  0x0000000116b47821: pop    %rax
  0x0000000116b47822: movabs $0x0,%r10
  0x0000000116b4782c: mov    %r10,0x280(%r15)
  0x0000000116b47833: movabs $0x0,%r10
  0x0000000116b4783d: mov    %r10,0x290(%r15)
  0x0000000116b47844: movabs $0x0,%r10
  0x0000000116b4784e: mov    %r10,0x288(%r15)
  0x0000000116b47855: cmpq   $0x0,0x8(%r15)
  0x0000000116b4785d: je     0x0000000116b47868
  0x0000000116b47863: jmpq   0x0000000116b30420
  0x0000000116b47868: mov    -0x38(%rbp),%r13
  0x0000000116b4786c: mov    -0x30(%rbp),%r14
  0x0000000116b47870: retq   
  0x0000000116b47871: mov    %rsp,-0x28(%rsp)
  0x0000000116b47876: sub    $0x80,%rsp
  0x0000000116b4787d: mov    %rax,0x78(%rsp)
  0x0000000116b47882: mov    %rcx,0x70(%rsp)
  0x0000000116b47887: mov    %rdx,0x68(%rsp)
  0x0000000116b4788c: mov    %rbx,0x60(%rsp)
  0x0000000116b47891: mov    %rbp,0x50(%rsp)
  0x0000000116b47896: mov    %rsi,0x48(%rsp)
  0x0000000116b4789b: mov    %rdi,0x40(%rsp)
  0x0000000116b478a0: mov    %r8,0x38(%rsp)
  0x0000000116b478a5: mov    %r9,0x30(%rsp)
  0x0000000116b478aa: mov    %r10,0x28(%rsp)
  0x0000000116b478af: mov    %r11,0x20(%rsp)
  0x0000000116b478b4: mov    %r12,0x18(%rsp)
  0x0000000116b478b9: mov    %r13,0x10(%rsp)
  0x0000000116b478be: mov    %r14,0x8(%rsp)
  0x0000000116b478c3: mov    %r15,(%rsp)
  0x0000000116b478c7: movabs $0x10cb763be,%rdi
  0x0000000116b478d1: movabs $0x116b47871,%rsi
  0x0000000116b478db: mov    %rsp,%rdx
  0x0000000116b478de: and    $0xfffffffffffffff0,%rsp
  0x0000000116b478e2: callq  0x000000010c7dd830
  0x0000000116b478e7: hlt    
  0x0000000116b478e8: movzbl 0x6(%r13),%ebx
  0x0000000116b478ed: add    $0x6,%r13
  0x0000000116b478f1: movabs $0x10ce38e80,%r10
  0x0000000116b478fb: jmpq   *(%r10,%rbx,8)
  0x0000000116b478ff: movq   $0x0,-0x10(%rbp)
  0x0000000116b47907: mov    -0x38(%rbp),%r13
  0x0000000116b4790b: mov    -0x30(%rbp),%r14
  0x0000000116b4790f: cmpq   $0x0,0x8(%r15)
  0x0000000116b47917: je     0x0000000116b47bed
  0x0000000116b4791d: callq  0x0000000116b47927
  0x0000000116b47922: jmpq   0x0000000116b47b76
  0x0000000116b47927: lea    0x8(%rsp),%rax
  0x0000000116b4792c: mov    %r13,-0x38(%rbp)
  0x0000000116b47930: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b47938: je     0x0000000116b479b5
  0x0000000116b4793e: mov    %rsp,-0x28(%rsp)
  0x0000000116b47943: sub    $0x80,%rsp
  0x0000000116b4794a: mov    %rax,0x78(%rsp)
  0x0000000116b4794f: mov    %rcx,0x70(%rsp)
  0x0000000116b47954: mov    %rdx,0x68(%rsp)
  0x0000000116b47959: mov    %rbx,0x60(%rsp)
  0x0000000116b4795e: mov    %rbp,0x50(%rsp)
  0x0000000116b47963: mov    %rsi,0x48(%rsp)
  0x0000000116b47968: mov    %rdi,0x40(%rsp)
  0x0000000116b4796d: mov    %r8,0x38(%rsp)
  0x0000000116b47972: mov    %r9,0x30(%rsp)
  0x0000000116b47977: mov    %r10,0x28(%rsp)
  0x0000000116b4797c: mov    %r11,0x20(%rsp)
  0x0000000116b47981: mov    %r12,0x18(%rsp)
  0x0000000116b47986: mov    %r13,0x10(%rsp)
  0x0000000116b4798b: mov    %r14,0x8(%rsp)
  0x0000000116b47990: mov    %r15,(%rsp)
  0x0000000116b47994: movabs $0x10cc2363b,%rdi
  0x0000000116b4799e: movabs $0x116b4793e,%rsi
  0x0000000116b479a8: mov    %rsp,%rdx
  0x0000000116b479ab: and    $0xfffffffffffffff0,%rsp
  0x0000000116b479af: callq  0x000000010c7dd830
  0x0000000116b479b4: hlt    
  0x0000000116b479b5: push   %r10
  0x0000000116b479b7: cmp    -0x9d0110e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b479be: je     0x0000000116b47a3b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b479c4: mov    %rsp,-0x28(%rsp)
  0x0000000116b479c9: sub    $0x80,%rsp
  0x0000000116b479d0: mov    %rax,0x78(%rsp)
  0x0000000116b479d5: mov    %rcx,0x70(%rsp)
  0x0000000116b479da: mov    %rdx,0x68(%rsp)
  0x0000000116b479df: mov    %rbx,0x60(%rsp)
  0x0000000116b479e4: mov    %rbp,0x50(%rsp)
  0x0000000116b479e9: mov    %rsi,0x48(%rsp)
  0x0000000116b479ee: mov    %rdi,0x40(%rsp)
  0x0000000116b479f3: mov    %r8,0x38(%rsp)
  0x0000000116b479f8: mov    %r9,0x30(%rsp)
  0x0000000116b479fd: mov    %r10,0x28(%rsp)
  0x0000000116b47a02: mov    %r11,0x20(%rsp)
  0x0000000116b47a07: mov    %r12,0x18(%rsp)
  0x0000000116b47a0c: mov    %r13,0x10(%rsp)
  0x0000000116b47a11: mov    %r14,0x8(%rsp)
  0x0000000116b47a16: mov    %r15,(%rsp)
  0x0000000116b47a1a: movabs $0x10cc63f17,%rdi
  0x0000000116b47a24: movabs $0x116b479c4,%rsi
  0x0000000116b47a2e: mov    %rsp,%rdx
  0x0000000116b47a31: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47a35: callq  0x000000010c7dd830
  0x0000000116b47a3a: hlt    
  0x0000000116b47a3b: pop    %r10
  0x0000000116b47a3d: mov    %r15,%rdi
  0x0000000116b47a40: mov    %rbp,0x290(%r15)
  0x0000000116b47a47: mov    %rax,0x280(%r15)
  0x0000000116b47a4e: test   $0xf,%esp
  0x0000000116b47a54: je     0x0000000116b47a6c
  0x0000000116b47a5a: sub    $0x8,%rsp
  0x0000000116b47a5e: callq  0x000000010c5881a0
  0x0000000116b47a63: add    $0x8,%rsp
  0x0000000116b47a67: jmpq   0x0000000116b47a71
  0x0000000116b47a6c: callq  0x000000010c5881a0
  0x0000000116b47a71: push   %rax
  0x0000000116b47a72: push   %rdi
  0x0000000116b47a73: push   %rsi
  0x0000000116b47a74: push   %rdx
  0x0000000116b47a75: push   %rcx
  0x0000000116b47a76: push   %r8
  0x0000000116b47a78: push   %r9
  0x0000000116b47a7a: push   %r10
  0x0000000116b47a7c: mov    %rsp,%r10
  0x0000000116b47a7f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47a83: push   %r10
  0x0000000116b47a85: push   %r11
  0x0000000116b47a87: mov    $0x109,%edi
  0x0000000116b47a8c: movabs $0x7ff815049fd5,%r10
  0x0000000116b47a96: callq  *%r10
  0x0000000116b47a99: pop    %r11
  0x0000000116b47a9b: pop    %rsp
  0x0000000116b47a9c: pop    %r10
  0x0000000116b47a9e: pop    %r9
  0x0000000116b47aa0: pop    %r8
  0x0000000116b47aa2: pop    %rcx
  0x0000000116b47aa3: pop    %rdx
  0x0000000116b47aa4: pop    %rsi
  0x0000000116b47aa5: pop    %rdi
  0x0000000116b47aa6: cmp    %rax,%r15
  0x0000000116b47aa9: je     0x0000000116b47b26
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b47aaf: mov    %rsp,-0x28(%rsp)
  0x0000000116b47ab4: sub    $0x80,%rsp
  0x0000000116b47abb: mov    %rax,0x78(%rsp)
  0x0000000116b47ac0: mov    %rcx,0x70(%rsp)
  0x0000000116b47ac5: mov    %rdx,0x68(%rsp)
  0x0000000116b47aca: mov    %rbx,0x60(%rsp)
  0x0000000116b47acf: mov    %rbp,0x50(%rsp)
  0x0000000116b47ad4: mov    %rsi,0x48(%rsp)
  0x0000000116b47ad9: mov    %rdi,0x40(%rsp)
  0x0000000116b47ade: mov    %r8,0x38(%rsp)
  0x0000000116b47ae3: mov    %r9,0x30(%rsp)
  0x0000000116b47ae8: mov    %r10,0x28(%rsp)
  0x0000000116b47aed: mov    %r11,0x20(%rsp)
  0x0000000116b47af2: mov    %r12,0x18(%rsp)
  0x0000000116b47af7: mov    %r13,0x10(%rsp)
  0x0000000116b47afc: mov    %r14,0x8(%rsp)
  0x0000000116b47b01: mov    %r15,(%rsp)
  0x0000000116b47b05: movabs $0x10cc6405e,%rdi
  0x0000000116b47b0f: movabs $0x116b47aaf,%rsi
  0x0000000116b47b19: mov    %rsp,%rdx
  0x0000000116b47b1c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47b20: callq  0x000000010c7dd830
  0x0000000116b47b25: hlt    
  0x0000000116b47b26: pop    %rax
  0x0000000116b47b27: movabs $0x0,%r10
  0x0000000116b47b31: mov    %r10,0x280(%r15)
  0x0000000116b47b38: movabs $0x0,%r10
  0x0000000116b47b42: mov    %r10,0x290(%r15)
  0x0000000116b47b49: movabs $0x0,%r10
  0x0000000116b47b53: mov    %r10,0x288(%r15)
  0x0000000116b47b5a: cmpq   $0x0,0x8(%r15)
  0x0000000116b47b62: je     0x0000000116b47b6d
  0x0000000116b47b68: jmpq   0x0000000116b30420
  0x0000000116b47b6d: mov    -0x38(%rbp),%r13
  0x0000000116b47b71: mov    -0x30(%rbp),%r14
  0x0000000116b47b75: retq   
  0x0000000116b47b76: mov    %rsp,-0x28(%rsp)
  0x0000000116b47b7b: sub    $0x80,%rsp
  0x0000000116b47b82: mov    %rax,0x78(%rsp)
  0x0000000116b47b87: mov    %rcx,0x70(%rsp)
  0x0000000116b47b8c: mov    %rdx,0x68(%rsp)
  0x0000000116b47b91: mov    %rbx,0x60(%rsp)
  0x0000000116b47b96: mov    %rbp,0x50(%rsp)
  0x0000000116b47b9b: mov    %rsi,0x48(%rsp)
  0x0000000116b47ba0: mov    %rdi,0x40(%rsp)
  0x0000000116b47ba5: mov    %r8,0x38(%rsp)
  0x0000000116b47baa: mov    %r9,0x30(%rsp)
  0x0000000116b47baf: mov    %r10,0x28(%rsp)
  0x0000000116b47bb4: mov    %r11,0x20(%rsp)
  0x0000000116b47bb9: mov    %r12,0x18(%rsp)
  0x0000000116b47bbe: mov    %r13,0x10(%rsp)
  0x0000000116b47bc3: mov    %r14,0x8(%rsp)
  0x0000000116b47bc8: mov    %r15,(%rsp)
  0x0000000116b47bcc: movabs $0x10cb763be,%rdi
  0x0000000116b47bd6: movabs $0x116b47b76,%rsi
  0x0000000116b47be0: mov    %rsp,%rdx
  0x0000000116b47be3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47be7: callq  0x000000010c7dd830
  0x0000000116b47bec: hlt    
  0x0000000116b47bed: movzbl 0x6(%r13),%ebx
  0x0000000116b47bf2: add    $0x6,%r13
  0x0000000116b47bf6: movabs $0x10ce38e80,%r10
  0x0000000116b47c00: jmpq   *(%r10,%rbx,8)
  0x0000000116b47c04: movq   $0x0,-0x10(%rbp)
  0x0000000116b47c0c: mov    -0x38(%rbp),%r13
  0x0000000116b47c10: mov    -0x30(%rbp),%r14
  0x0000000116b47c14: cmpq   $0x0,0x8(%r15)
  0x0000000116b47c1c: je     0x0000000116b47ef2
  0x0000000116b47c22: callq  0x0000000116b47c2c
  0x0000000116b47c27: jmpq   0x0000000116b47e7b
  0x0000000116b47c2c: lea    0x8(%rsp),%rax
  0x0000000116b47c31: mov    %r13,-0x38(%rbp)
  0x0000000116b47c35: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b47c3d: je     0x0000000116b47cba
  0x0000000116b47c43: mov    %rsp,-0x28(%rsp)
  0x0000000116b47c48: sub    $0x80,%rsp
  0x0000000116b47c4f: mov    %rax,0x78(%rsp)
  0x0000000116b47c54: mov    %rcx,0x70(%rsp)
  0x0000000116b47c59: mov    %rdx,0x68(%rsp)
  0x0000000116b47c5e: mov    %rbx,0x60(%rsp)
  0x0000000116b47c63: mov    %rbp,0x50(%rsp)
  0x0000000116b47c68: mov    %rsi,0x48(%rsp)
  0x0000000116b47c6d: mov    %rdi,0x40(%rsp)
  0x0000000116b47c72: mov    %r8,0x38(%rsp)
  0x0000000116b47c77: mov    %r9,0x30(%rsp)
  0x0000000116b47c7c: mov    %r10,0x28(%rsp)
  0x0000000116b47c81: mov    %r11,0x20(%rsp)
  0x0000000116b47c86: mov    %r12,0x18(%rsp)
  0x0000000116b47c8b: mov    %r13,0x10(%rsp)
  0x0000000116b47c90: mov    %r14,0x8(%rsp)
  0x0000000116b47c95: mov    %r15,(%rsp)
  0x0000000116b47c99: movabs $0x10cc2363b,%rdi
  0x0000000116b47ca3: movabs $0x116b47c43,%rsi
  0x0000000116b47cad: mov    %rsp,%rdx
  0x0000000116b47cb0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47cb4: callq  0x000000010c7dd830
  0x0000000116b47cb9: hlt    
  0x0000000116b47cba: push   %r10
  0x0000000116b47cbc: cmp    -0x9d01413(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b47cc3: je     0x0000000116b47d40
  ;; call_VM_base: heap base corrupted?
  0x0000000116b47cc9: mov    %rsp,-0x28(%rsp)
  0x0000000116b47cce: sub    $0x80,%rsp
  0x0000000116b47cd5: mov    %rax,0x78(%rsp)
  0x0000000116b47cda: mov    %rcx,0x70(%rsp)
  0x0000000116b47cdf: mov    %rdx,0x68(%rsp)
  0x0000000116b47ce4: mov    %rbx,0x60(%rsp)
  0x0000000116b47ce9: mov    %rbp,0x50(%rsp)
  0x0000000116b47cee: mov    %rsi,0x48(%rsp)
  0x0000000116b47cf3: mov    %rdi,0x40(%rsp)
  0x0000000116b47cf8: mov    %r8,0x38(%rsp)
  0x0000000116b47cfd: mov    %r9,0x30(%rsp)
  0x0000000116b47d02: mov    %r10,0x28(%rsp)
  0x0000000116b47d07: mov    %r11,0x20(%rsp)
  0x0000000116b47d0c: mov    %r12,0x18(%rsp)
  0x0000000116b47d11: mov    %r13,0x10(%rsp)
  0x0000000116b47d16: mov    %r14,0x8(%rsp)
  0x0000000116b47d1b: mov    %r15,(%rsp)
  0x0000000116b47d1f: movabs $0x10cc63f17,%rdi
  0x0000000116b47d29: movabs $0x116b47cc9,%rsi
  0x0000000116b47d33: mov    %rsp,%rdx
  0x0000000116b47d36: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47d3a: callq  0x000000010c7dd830
  0x0000000116b47d3f: hlt    
  0x0000000116b47d40: pop    %r10
  0x0000000116b47d42: mov    %r15,%rdi
  0x0000000116b47d45: mov    %rbp,0x290(%r15)
  0x0000000116b47d4c: mov    %rax,0x280(%r15)
  0x0000000116b47d53: test   $0xf,%esp
  0x0000000116b47d59: je     0x0000000116b47d71
  0x0000000116b47d5f: sub    $0x8,%rsp
  0x0000000116b47d63: callq  0x000000010c5881a0
  0x0000000116b47d68: add    $0x8,%rsp
  0x0000000116b47d6c: jmpq   0x0000000116b47d76
  0x0000000116b47d71: callq  0x000000010c5881a0
  0x0000000116b47d76: push   %rax
  0x0000000116b47d77: push   %rdi
  0x0000000116b47d78: push   %rsi
  0x0000000116b47d79: push   %rdx
  0x0000000116b47d7a: push   %rcx
  0x0000000116b47d7b: push   %r8
  0x0000000116b47d7d: push   %r9
  0x0000000116b47d7f: push   %r10
  0x0000000116b47d81: mov    %rsp,%r10
  0x0000000116b47d84: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47d88: push   %r10
  0x0000000116b47d8a: push   %r11
  0x0000000116b47d8c: mov    $0x109,%edi
  0x0000000116b47d91: movabs $0x7ff815049fd5,%r10
  0x0000000116b47d9b: callq  *%r10
  0x0000000116b47d9e: pop    %r11
  0x0000000116b47da0: pop    %rsp
  0x0000000116b47da1: pop    %r10
  0x0000000116b47da3: pop    %r9
  0x0000000116b47da5: pop    %r8
  0x0000000116b47da7: pop    %rcx
  0x0000000116b47da8: pop    %rdx
  0x0000000116b47da9: pop    %rsi
  0x0000000116b47daa: pop    %rdi
  0x0000000116b47dab: cmp    %rax,%r15
  0x0000000116b47dae: je     0x0000000116b47e2b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b47db4: mov    %rsp,-0x28(%rsp)
  0x0000000116b47db9: sub    $0x80,%rsp
  0x0000000116b47dc0: mov    %rax,0x78(%rsp)
  0x0000000116b47dc5: mov    %rcx,0x70(%rsp)
  0x0000000116b47dca: mov    %rdx,0x68(%rsp)
  0x0000000116b47dcf: mov    %rbx,0x60(%rsp)
  0x0000000116b47dd4: mov    %rbp,0x50(%rsp)
  0x0000000116b47dd9: mov    %rsi,0x48(%rsp)
  0x0000000116b47dde: mov    %rdi,0x40(%rsp)
  0x0000000116b47de3: mov    %r8,0x38(%rsp)
  0x0000000116b47de8: mov    %r9,0x30(%rsp)
  0x0000000116b47ded: mov    %r10,0x28(%rsp)
  0x0000000116b47df2: mov    %r11,0x20(%rsp)
  0x0000000116b47df7: mov    %r12,0x18(%rsp)
  0x0000000116b47dfc: mov    %r13,0x10(%rsp)
  0x0000000116b47e01: mov    %r14,0x8(%rsp)
  0x0000000116b47e06: mov    %r15,(%rsp)
  0x0000000116b47e0a: movabs $0x10cc6405e,%rdi
  0x0000000116b47e14: movabs $0x116b47db4,%rsi
  0x0000000116b47e1e: mov    %rsp,%rdx
  0x0000000116b47e21: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47e25: callq  0x000000010c7dd830
  0x0000000116b47e2a: hlt    
  0x0000000116b47e2b: pop    %rax
  0x0000000116b47e2c: movabs $0x0,%r10
  0x0000000116b47e36: mov    %r10,0x280(%r15)
  0x0000000116b47e3d: movabs $0x0,%r10
  0x0000000116b47e47: mov    %r10,0x290(%r15)
  0x0000000116b47e4e: movabs $0x0,%r10
  0x0000000116b47e58: mov    %r10,0x288(%r15)
  0x0000000116b47e5f: cmpq   $0x0,0x8(%r15)
  0x0000000116b47e67: je     0x0000000116b47e72
  0x0000000116b47e6d: jmpq   0x0000000116b30420
  0x0000000116b47e72: mov    -0x38(%rbp),%r13
  0x0000000116b47e76: mov    -0x30(%rbp),%r14
  0x0000000116b47e7a: retq   
  0x0000000116b47e7b: mov    %rsp,-0x28(%rsp)
  0x0000000116b47e80: sub    $0x80,%rsp
  0x0000000116b47e87: mov    %rax,0x78(%rsp)
  0x0000000116b47e8c: mov    %rcx,0x70(%rsp)
  0x0000000116b47e91: mov    %rdx,0x68(%rsp)
  0x0000000116b47e96: mov    %rbx,0x60(%rsp)
  0x0000000116b47e9b: mov    %rbp,0x50(%rsp)
  0x0000000116b47ea0: mov    %rsi,0x48(%rsp)
  0x0000000116b47ea5: mov    %rdi,0x40(%rsp)
  0x0000000116b47eaa: mov    %r8,0x38(%rsp)
  0x0000000116b47eaf: mov    %r9,0x30(%rsp)
  0x0000000116b47eb4: mov    %r10,0x28(%rsp)
  0x0000000116b47eb9: mov    %r11,0x20(%rsp)
  0x0000000116b47ebe: mov    %r12,0x18(%rsp)
  0x0000000116b47ec3: mov    %r13,0x10(%rsp)
  0x0000000116b47ec8: mov    %r14,0x8(%rsp)
  0x0000000116b47ecd: mov    %r15,(%rsp)
  0x0000000116b47ed1: movabs $0x10cb763be,%rdi
  0x0000000116b47edb: movabs $0x116b47e7b,%rsi
  0x0000000116b47ee5: mov    %rsp,%rdx
  0x0000000116b47ee8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47eec: callq  0x000000010c7dd830
  0x0000000116b47ef1: hlt    
  0x0000000116b47ef2: movzbl 0x6(%r13),%ebx
  0x0000000116b47ef7: add    $0x6,%r13
  0x0000000116b47efb: movabs $0x10ce38e80,%r10
  0x0000000116b47f05: jmpq   *(%r10,%rbx,8)
  0x0000000116b47f09: movq   $0x0,-0x10(%rbp)
  0x0000000116b47f11: mov    -0x38(%rbp),%r13
  0x0000000116b47f15: mov    -0x30(%rbp),%r14
  0x0000000116b47f19: cmpq   $0x0,0x8(%r15)
  0x0000000116b47f21: je     0x0000000116b481f7
  0x0000000116b47f27: callq  0x0000000116b47f31
  0x0000000116b47f2c: jmpq   0x0000000116b48180
  0x0000000116b47f31: lea    0x8(%rsp),%rax
  0x0000000116b47f36: mov    %r13,-0x38(%rbp)
  0x0000000116b47f3a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b47f42: je     0x0000000116b47fbf
  0x0000000116b47f48: mov    %rsp,-0x28(%rsp)
  0x0000000116b47f4d: sub    $0x80,%rsp
  0x0000000116b47f54: mov    %rax,0x78(%rsp)
  0x0000000116b47f59: mov    %rcx,0x70(%rsp)
  0x0000000116b47f5e: mov    %rdx,0x68(%rsp)
  0x0000000116b47f63: mov    %rbx,0x60(%rsp)
  0x0000000116b47f68: mov    %rbp,0x50(%rsp)
  0x0000000116b47f6d: mov    %rsi,0x48(%rsp)
  0x0000000116b47f72: mov    %rdi,0x40(%rsp)
  0x0000000116b47f77: mov    %r8,0x38(%rsp)
  0x0000000116b47f7c: mov    %r9,0x30(%rsp)
  0x0000000116b47f81: mov    %r10,0x28(%rsp)
  0x0000000116b47f86: mov    %r11,0x20(%rsp)
  0x0000000116b47f8b: mov    %r12,0x18(%rsp)
  0x0000000116b47f90: mov    %r13,0x10(%rsp)
  0x0000000116b47f95: mov    %r14,0x8(%rsp)
  0x0000000116b47f9a: mov    %r15,(%rsp)
  0x0000000116b47f9e: movabs $0x10cc2363b,%rdi
  0x0000000116b47fa8: movabs $0x116b47f48,%rsi
  0x0000000116b47fb2: mov    %rsp,%rdx
  0x0000000116b47fb5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b47fb9: callq  0x000000010c7dd830
  0x0000000116b47fbe: hlt    
  0x0000000116b47fbf: push   %r10
  0x0000000116b47fc1: cmp    -0x9d01718(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b47fc8: je     0x0000000116b48045
  ;; call_VM_base: heap base corrupted?
  0x0000000116b47fce: mov    %rsp,-0x28(%rsp)
  0x0000000116b47fd3: sub    $0x80,%rsp
  0x0000000116b47fda: mov    %rax,0x78(%rsp)
  0x0000000116b47fdf: mov    %rcx,0x70(%rsp)
  0x0000000116b47fe4: mov    %rdx,0x68(%rsp)
  0x0000000116b47fe9: mov    %rbx,0x60(%rsp)
  0x0000000116b47fee: mov    %rbp,0x50(%rsp)
  0x0000000116b47ff3: mov    %rsi,0x48(%rsp)
  0x0000000116b47ff8: mov    %rdi,0x40(%rsp)
  0x0000000116b47ffd: mov    %r8,0x38(%rsp)
  0x0000000116b48002: mov    %r9,0x30(%rsp)
  0x0000000116b48007: mov    %r10,0x28(%rsp)
  0x0000000116b4800c: mov    %r11,0x20(%rsp)
  0x0000000116b48011: mov    %r12,0x18(%rsp)
  0x0000000116b48016: mov    %r13,0x10(%rsp)
  0x0000000116b4801b: mov    %r14,0x8(%rsp)
  0x0000000116b48020: mov    %r15,(%rsp)
  0x0000000116b48024: movabs $0x10cc63f17,%rdi
  0x0000000116b4802e: movabs $0x116b47fce,%rsi
  0x0000000116b48038: mov    %rsp,%rdx
  0x0000000116b4803b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4803f: callq  0x000000010c7dd830
  0x0000000116b48044: hlt    
  0x0000000116b48045: pop    %r10
  0x0000000116b48047: mov    %r15,%rdi
  0x0000000116b4804a: mov    %rbp,0x290(%r15)
  0x0000000116b48051: mov    %rax,0x280(%r15)
  0x0000000116b48058: test   $0xf,%esp
  0x0000000116b4805e: je     0x0000000116b48076
  0x0000000116b48064: sub    $0x8,%rsp
  0x0000000116b48068: callq  0x000000010c5881a0
  0x0000000116b4806d: add    $0x8,%rsp
  0x0000000116b48071: jmpq   0x0000000116b4807b
  0x0000000116b48076: callq  0x000000010c5881a0
  0x0000000116b4807b: push   %rax
  0x0000000116b4807c: push   %rdi
  0x0000000116b4807d: push   %rsi
  0x0000000116b4807e: push   %rdx
  0x0000000116b4807f: push   %rcx
  0x0000000116b48080: push   %r8
  0x0000000116b48082: push   %r9
  0x0000000116b48084: push   %r10
  0x0000000116b48086: mov    %rsp,%r10
  0x0000000116b48089: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4808d: push   %r10
  0x0000000116b4808f: push   %r11
  0x0000000116b48091: mov    $0x109,%edi
  0x0000000116b48096: movabs $0x7ff815049fd5,%r10
  0x0000000116b480a0: callq  *%r10
  0x0000000116b480a3: pop    %r11
  0x0000000116b480a5: pop    %rsp
  0x0000000116b480a6: pop    %r10
  0x0000000116b480a8: pop    %r9
  0x0000000116b480aa: pop    %r8
  0x0000000116b480ac: pop    %rcx
  0x0000000116b480ad: pop    %rdx
  0x0000000116b480ae: pop    %rsi
  0x0000000116b480af: pop    %rdi
  0x0000000116b480b0: cmp    %rax,%r15
  0x0000000116b480b3: je     0x0000000116b48130
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b480b9: mov    %rsp,-0x28(%rsp)
  0x0000000116b480be: sub    $0x80,%rsp
  0x0000000116b480c5: mov    %rax,0x78(%rsp)
  0x0000000116b480ca: mov    %rcx,0x70(%rsp)
  0x0000000116b480cf: mov    %rdx,0x68(%rsp)
  0x0000000116b480d4: mov    %rbx,0x60(%rsp)
  0x0000000116b480d9: mov    %rbp,0x50(%rsp)
  0x0000000116b480de: mov    %rsi,0x48(%rsp)
  0x0000000116b480e3: mov    %rdi,0x40(%rsp)
  0x0000000116b480e8: mov    %r8,0x38(%rsp)
  0x0000000116b480ed: mov    %r9,0x30(%rsp)
  0x0000000116b480f2: mov    %r10,0x28(%rsp)
  0x0000000116b480f7: mov    %r11,0x20(%rsp)
  0x0000000116b480fc: mov    %r12,0x18(%rsp)
  0x0000000116b48101: mov    %r13,0x10(%rsp)
  0x0000000116b48106: mov    %r14,0x8(%rsp)
  0x0000000116b4810b: mov    %r15,(%rsp)
  0x0000000116b4810f: movabs $0x10cc6405e,%rdi
  0x0000000116b48119: movabs $0x116b480b9,%rsi
  0x0000000116b48123: mov    %rsp,%rdx
  0x0000000116b48126: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4812a: callq  0x000000010c7dd830
  0x0000000116b4812f: hlt    
  0x0000000116b48130: pop    %rax
  0x0000000116b48131: movabs $0x0,%r10
  0x0000000116b4813b: mov    %r10,0x280(%r15)
  0x0000000116b48142: movabs $0x0,%r10
  0x0000000116b4814c: mov    %r10,0x290(%r15)
  0x0000000116b48153: movabs $0x0,%r10
  0x0000000116b4815d: mov    %r10,0x288(%r15)
  0x0000000116b48164: cmpq   $0x0,0x8(%r15)
  0x0000000116b4816c: je     0x0000000116b48177
  0x0000000116b48172: jmpq   0x0000000116b30420
  0x0000000116b48177: mov    -0x38(%rbp),%r13
  0x0000000116b4817b: mov    -0x30(%rbp),%r14
  0x0000000116b4817f: retq   
  0x0000000116b48180: mov    %rsp,-0x28(%rsp)
  0x0000000116b48185: sub    $0x80,%rsp
  0x0000000116b4818c: mov    %rax,0x78(%rsp)
  0x0000000116b48191: mov    %rcx,0x70(%rsp)
  0x0000000116b48196: mov    %rdx,0x68(%rsp)
  0x0000000116b4819b: mov    %rbx,0x60(%rsp)
  0x0000000116b481a0: mov    %rbp,0x50(%rsp)
  0x0000000116b481a5: mov    %rsi,0x48(%rsp)
  0x0000000116b481aa: mov    %rdi,0x40(%rsp)
  0x0000000116b481af: mov    %r8,0x38(%rsp)
  0x0000000116b481b4: mov    %r9,0x30(%rsp)
  0x0000000116b481b9: mov    %r10,0x28(%rsp)
  0x0000000116b481be: mov    %r11,0x20(%rsp)
  0x0000000116b481c3: mov    %r12,0x18(%rsp)
  0x0000000116b481c8: mov    %r13,0x10(%rsp)
  0x0000000116b481cd: mov    %r14,0x8(%rsp)
  0x0000000116b481d2: mov    %r15,(%rsp)
  0x0000000116b481d6: movabs $0x10cb763be,%rdi
  0x0000000116b481e0: movabs $0x116b48180,%rsi
  0x0000000116b481ea: mov    %rsp,%rdx
  0x0000000116b481ed: and    $0xfffffffffffffff0,%rsp
  0x0000000116b481f1: callq  0x000000010c7dd830
  0x0000000116b481f6: hlt    
  0x0000000116b481f7: movzbl 0x6(%r13),%ebx
  0x0000000116b481fc: add    $0x6,%r13
  0x0000000116b48200: movabs $0x10ce38e80,%r10
  0x0000000116b4820a: jmpq   *(%r10,%rbx,8)
  0x0000000116b4820e: movq   $0x0,-0x10(%rbp)
  0x0000000116b48216: mov    -0x38(%rbp),%r13
  0x0000000116b4821a: mov    -0x30(%rbp),%r14
  0x0000000116b4821e: cmpq   $0x0,0x8(%r15)
  0x0000000116b48226: je     0x0000000116b484fc
  0x0000000116b4822c: callq  0x0000000116b48236
  0x0000000116b48231: jmpq   0x0000000116b48485
  0x0000000116b48236: lea    0x8(%rsp),%rax
  0x0000000116b4823b: mov    %r13,-0x38(%rbp)
  0x0000000116b4823f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b48247: je     0x0000000116b482c4
  0x0000000116b4824d: mov    %rsp,-0x28(%rsp)
  0x0000000116b48252: sub    $0x80,%rsp
  0x0000000116b48259: mov    %rax,0x78(%rsp)
  0x0000000116b4825e: mov    %rcx,0x70(%rsp)
  0x0000000116b48263: mov    %rdx,0x68(%rsp)
  0x0000000116b48268: mov    %rbx,0x60(%rsp)
  0x0000000116b4826d: mov    %rbp,0x50(%rsp)
  0x0000000116b48272: mov    %rsi,0x48(%rsp)
  0x0000000116b48277: mov    %rdi,0x40(%rsp)
  0x0000000116b4827c: mov    %r8,0x38(%rsp)
  0x0000000116b48281: mov    %r9,0x30(%rsp)
  0x0000000116b48286: mov    %r10,0x28(%rsp)
  0x0000000116b4828b: mov    %r11,0x20(%rsp)
  0x0000000116b48290: mov    %r12,0x18(%rsp)
  0x0000000116b48295: mov    %r13,0x10(%rsp)
  0x0000000116b4829a: mov    %r14,0x8(%rsp)
  0x0000000116b4829f: mov    %r15,(%rsp)
  0x0000000116b482a3: movabs $0x10cc2363b,%rdi
  0x0000000116b482ad: movabs $0x116b4824d,%rsi
  0x0000000116b482b7: mov    %rsp,%rdx
  0x0000000116b482ba: and    $0xfffffffffffffff0,%rsp
  0x0000000116b482be: callq  0x000000010c7dd830
  0x0000000116b482c3: hlt    
  0x0000000116b482c4: push   %r10
  0x0000000116b482c6: cmp    -0x9d01a1d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b482cd: je     0x0000000116b4834a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b482d3: mov    %rsp,-0x28(%rsp)
  0x0000000116b482d8: sub    $0x80,%rsp
  0x0000000116b482df: mov    %rax,0x78(%rsp)
  0x0000000116b482e4: mov    %rcx,0x70(%rsp)
  0x0000000116b482e9: mov    %rdx,0x68(%rsp)
  0x0000000116b482ee: mov    %rbx,0x60(%rsp)
  0x0000000116b482f3: mov    %rbp,0x50(%rsp)
  0x0000000116b482f8: mov    %rsi,0x48(%rsp)
  0x0000000116b482fd: mov    %rdi,0x40(%rsp)
  0x0000000116b48302: mov    %r8,0x38(%rsp)
  0x0000000116b48307: mov    %r9,0x30(%rsp)
  0x0000000116b4830c: mov    %r10,0x28(%rsp)
  0x0000000116b48311: mov    %r11,0x20(%rsp)
  0x0000000116b48316: mov    %r12,0x18(%rsp)
  0x0000000116b4831b: mov    %r13,0x10(%rsp)
  0x0000000116b48320: mov    %r14,0x8(%rsp)
  0x0000000116b48325: mov    %r15,(%rsp)
  0x0000000116b48329: movabs $0x10cc63f17,%rdi
  0x0000000116b48333: movabs $0x116b482d3,%rsi
  0x0000000116b4833d: mov    %rsp,%rdx
  0x0000000116b48340: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48344: callq  0x000000010c7dd830
  0x0000000116b48349: hlt    
  0x0000000116b4834a: pop    %r10
  0x0000000116b4834c: mov    %r15,%rdi
  0x0000000116b4834f: mov    %rbp,0x290(%r15)
  0x0000000116b48356: mov    %rax,0x280(%r15)
  0x0000000116b4835d: test   $0xf,%esp
  0x0000000116b48363: je     0x0000000116b4837b
  0x0000000116b48369: sub    $0x8,%rsp
  0x0000000116b4836d: callq  0x000000010c5881a0
  0x0000000116b48372: add    $0x8,%rsp
  0x0000000116b48376: jmpq   0x0000000116b48380
  0x0000000116b4837b: callq  0x000000010c5881a0
  0x0000000116b48380: push   %rax
  0x0000000116b48381: push   %rdi
  0x0000000116b48382: push   %rsi
  0x0000000116b48383: push   %rdx
  0x0000000116b48384: push   %rcx
  0x0000000116b48385: push   %r8
  0x0000000116b48387: push   %r9
  0x0000000116b48389: push   %r10
  0x0000000116b4838b: mov    %rsp,%r10
  0x0000000116b4838e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48392: push   %r10
  0x0000000116b48394: push   %r11
  0x0000000116b48396: mov    $0x109,%edi
  0x0000000116b4839b: movabs $0x7ff815049fd5,%r10
  0x0000000116b483a5: callq  *%r10
  0x0000000116b483a8: pop    %r11
  0x0000000116b483aa: pop    %rsp
  0x0000000116b483ab: pop    %r10
  0x0000000116b483ad: pop    %r9
  0x0000000116b483af: pop    %r8
  0x0000000116b483b1: pop    %rcx
  0x0000000116b483b2: pop    %rdx
  0x0000000116b483b3: pop    %rsi
  0x0000000116b483b4: pop    %rdi
  0x0000000116b483b5: cmp    %rax,%r15
  0x0000000116b483b8: je     0x0000000116b48435
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b483be: mov    %rsp,-0x28(%rsp)
  0x0000000116b483c3: sub    $0x80,%rsp
  0x0000000116b483ca: mov    %rax,0x78(%rsp)
  0x0000000116b483cf: mov    %rcx,0x70(%rsp)
  0x0000000116b483d4: mov    %rdx,0x68(%rsp)
  0x0000000116b483d9: mov    %rbx,0x60(%rsp)
  0x0000000116b483de: mov    %rbp,0x50(%rsp)
  0x0000000116b483e3: mov    %rsi,0x48(%rsp)
  0x0000000116b483e8: mov    %rdi,0x40(%rsp)
  0x0000000116b483ed: mov    %r8,0x38(%rsp)
  0x0000000116b483f2: mov    %r9,0x30(%rsp)
  0x0000000116b483f7: mov    %r10,0x28(%rsp)
  0x0000000116b483fc: mov    %r11,0x20(%rsp)
  0x0000000116b48401: mov    %r12,0x18(%rsp)
  0x0000000116b48406: mov    %r13,0x10(%rsp)
  0x0000000116b4840b: mov    %r14,0x8(%rsp)
  0x0000000116b48410: mov    %r15,(%rsp)
  0x0000000116b48414: movabs $0x10cc6405e,%rdi
  0x0000000116b4841e: movabs $0x116b483be,%rsi
  0x0000000116b48428: mov    %rsp,%rdx
  0x0000000116b4842b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4842f: callq  0x000000010c7dd830
  0x0000000116b48434: hlt    
  0x0000000116b48435: pop    %rax
  0x0000000116b48436: movabs $0x0,%r10
  0x0000000116b48440: mov    %r10,0x280(%r15)
  0x0000000116b48447: movabs $0x0,%r10
  0x0000000116b48451: mov    %r10,0x290(%r15)
  0x0000000116b48458: movabs $0x0,%r10
  0x0000000116b48462: mov    %r10,0x288(%r15)
  0x0000000116b48469: cmpq   $0x0,0x8(%r15)
  0x0000000116b48471: je     0x0000000116b4847c
  0x0000000116b48477: jmpq   0x0000000116b30420
  0x0000000116b4847c: mov    -0x38(%rbp),%r13
  0x0000000116b48480: mov    -0x30(%rbp),%r14
  0x0000000116b48484: retq   
  0x0000000116b48485: mov    %rsp,-0x28(%rsp)
  0x0000000116b4848a: sub    $0x80,%rsp
  0x0000000116b48491: mov    %rax,0x78(%rsp)
  0x0000000116b48496: mov    %rcx,0x70(%rsp)
  0x0000000116b4849b: mov    %rdx,0x68(%rsp)
  0x0000000116b484a0: mov    %rbx,0x60(%rsp)
  0x0000000116b484a5: mov    %rbp,0x50(%rsp)
  0x0000000116b484aa: mov    %rsi,0x48(%rsp)
  0x0000000116b484af: mov    %rdi,0x40(%rsp)
  0x0000000116b484b4: mov    %r8,0x38(%rsp)
  0x0000000116b484b9: mov    %r9,0x30(%rsp)
  0x0000000116b484be: mov    %r10,0x28(%rsp)
  0x0000000116b484c3: mov    %r11,0x20(%rsp)
  0x0000000116b484c8: mov    %r12,0x18(%rsp)
  0x0000000116b484cd: mov    %r13,0x10(%rsp)
  0x0000000116b484d2: mov    %r14,0x8(%rsp)
  0x0000000116b484d7: mov    %r15,(%rsp)
  0x0000000116b484db: movabs $0x10cb763be,%rdi
  0x0000000116b484e5: movabs $0x116b48485,%rsi
  0x0000000116b484ef: mov    %rsp,%rdx
  0x0000000116b484f2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b484f6: callq  0x000000010c7dd830
  0x0000000116b484fb: hlt    
  0x0000000116b484fc: movzbl 0x6(%r13),%ebx
  0x0000000116b48501: add    $0x6,%r13
  0x0000000116b48505: movabs $0x10ce3ae80,%r10
  0x0000000116b4850f: jmpq   *(%r10,%rbx,8)
  0x0000000116b48513: movq   $0x0,-0x10(%rbp)
  0x0000000116b4851b: mov    -0x38(%rbp),%r13
  0x0000000116b4851f: mov    -0x30(%rbp),%r14
  0x0000000116b48523: cmpq   $0x0,0x8(%r15)
  0x0000000116b4852b: je     0x0000000116b48801
  0x0000000116b48531: callq  0x0000000116b4853b
  0x0000000116b48536: jmpq   0x0000000116b4878a
  0x0000000116b4853b: lea    0x8(%rsp),%rax
  0x0000000116b48540: mov    %r13,-0x38(%rbp)
  0x0000000116b48544: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4854c: je     0x0000000116b485c9
  0x0000000116b48552: mov    %rsp,-0x28(%rsp)
  0x0000000116b48557: sub    $0x80,%rsp
  0x0000000116b4855e: mov    %rax,0x78(%rsp)
  0x0000000116b48563: mov    %rcx,0x70(%rsp)
  0x0000000116b48568: mov    %rdx,0x68(%rsp)
  0x0000000116b4856d: mov    %rbx,0x60(%rsp)
  0x0000000116b48572: mov    %rbp,0x50(%rsp)
  0x0000000116b48577: mov    %rsi,0x48(%rsp)
  0x0000000116b4857c: mov    %rdi,0x40(%rsp)
  0x0000000116b48581: mov    %r8,0x38(%rsp)
  0x0000000116b48586: mov    %r9,0x30(%rsp)
  0x0000000116b4858b: mov    %r10,0x28(%rsp)
  0x0000000116b48590: mov    %r11,0x20(%rsp)
  0x0000000116b48595: mov    %r12,0x18(%rsp)
  0x0000000116b4859a: mov    %r13,0x10(%rsp)
  0x0000000116b4859f: mov    %r14,0x8(%rsp)
  0x0000000116b485a4: mov    %r15,(%rsp)
  0x0000000116b485a8: movabs $0x10cc2363b,%rdi
  0x0000000116b485b2: movabs $0x116b48552,%rsi
  0x0000000116b485bc: mov    %rsp,%rdx
  0x0000000116b485bf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b485c3: callq  0x000000010c7dd830
  0x0000000116b485c8: hlt    
  0x0000000116b485c9: push   %r10
  0x0000000116b485cb: cmp    -0x9d01d22(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b485d2: je     0x0000000116b4864f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b485d8: mov    %rsp,-0x28(%rsp)
  0x0000000116b485dd: sub    $0x80,%rsp
  0x0000000116b485e4: mov    %rax,0x78(%rsp)
  0x0000000116b485e9: mov    %rcx,0x70(%rsp)
  0x0000000116b485ee: mov    %rdx,0x68(%rsp)
  0x0000000116b485f3: mov    %rbx,0x60(%rsp)
  0x0000000116b485f8: mov    %rbp,0x50(%rsp)
  0x0000000116b485fd: mov    %rsi,0x48(%rsp)
  0x0000000116b48602: mov    %rdi,0x40(%rsp)
  0x0000000116b48607: mov    %r8,0x38(%rsp)
  0x0000000116b4860c: mov    %r9,0x30(%rsp)
  0x0000000116b48611: mov    %r10,0x28(%rsp)
  0x0000000116b48616: mov    %r11,0x20(%rsp)
  0x0000000116b4861b: mov    %r12,0x18(%rsp)
  0x0000000116b48620: mov    %r13,0x10(%rsp)
  0x0000000116b48625: mov    %r14,0x8(%rsp)
  0x0000000116b4862a: mov    %r15,(%rsp)
  0x0000000116b4862e: movabs $0x10cc63f17,%rdi
  0x0000000116b48638: movabs $0x116b485d8,%rsi
  0x0000000116b48642: mov    %rsp,%rdx
  0x0000000116b48645: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48649: callq  0x000000010c7dd830
  0x0000000116b4864e: hlt    
  0x0000000116b4864f: pop    %r10
  0x0000000116b48651: mov    %r15,%rdi
  0x0000000116b48654: mov    %rbp,0x290(%r15)
  0x0000000116b4865b: mov    %rax,0x280(%r15)
  0x0000000116b48662: test   $0xf,%esp
  0x0000000116b48668: je     0x0000000116b48680
  0x0000000116b4866e: sub    $0x8,%rsp
  0x0000000116b48672: callq  0x000000010c5881a0
  0x0000000116b48677: add    $0x8,%rsp
  0x0000000116b4867b: jmpq   0x0000000116b48685
  0x0000000116b48680: callq  0x000000010c5881a0
  0x0000000116b48685: push   %rax
  0x0000000116b48686: push   %rdi
  0x0000000116b48687: push   %rsi
  0x0000000116b48688: push   %rdx
  0x0000000116b48689: push   %rcx
  0x0000000116b4868a: push   %r8
  0x0000000116b4868c: push   %r9
  0x0000000116b4868e: push   %r10
  0x0000000116b48690: mov    %rsp,%r10
  0x0000000116b48693: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48697: push   %r10
  0x0000000116b48699: push   %r11
  0x0000000116b4869b: mov    $0x109,%edi
  0x0000000116b486a0: movabs $0x7ff815049fd5,%r10
  0x0000000116b486aa: callq  *%r10
  0x0000000116b486ad: pop    %r11
  0x0000000116b486af: pop    %rsp
  0x0000000116b486b0: pop    %r10
  0x0000000116b486b2: pop    %r9
  0x0000000116b486b4: pop    %r8
  0x0000000116b486b6: pop    %rcx
  0x0000000116b486b7: pop    %rdx
  0x0000000116b486b8: pop    %rsi
  0x0000000116b486b9: pop    %rdi
  0x0000000116b486ba: cmp    %rax,%r15
  0x0000000116b486bd: je     0x0000000116b4873a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b486c3: mov    %rsp,-0x28(%rsp)
  0x0000000116b486c8: sub    $0x80,%rsp
  0x0000000116b486cf: mov    %rax,0x78(%rsp)
  0x0000000116b486d4: mov    %rcx,0x70(%rsp)
  0x0000000116b486d9: mov    %rdx,0x68(%rsp)
  0x0000000116b486de: mov    %rbx,0x60(%rsp)
  0x0000000116b486e3: mov    %rbp,0x50(%rsp)
  0x0000000116b486e8: mov    %rsi,0x48(%rsp)
  0x0000000116b486ed: mov    %rdi,0x40(%rsp)
  0x0000000116b486f2: mov    %r8,0x38(%rsp)
  0x0000000116b486f7: mov    %r9,0x30(%rsp)
  0x0000000116b486fc: mov    %r10,0x28(%rsp)
  0x0000000116b48701: mov    %r11,0x20(%rsp)
  0x0000000116b48706: mov    %r12,0x18(%rsp)
  0x0000000116b4870b: mov    %r13,0x10(%rsp)
  0x0000000116b48710: mov    %r14,0x8(%rsp)
  0x0000000116b48715: mov    %r15,(%rsp)
  0x0000000116b48719: movabs $0x10cc6405e,%rdi
  0x0000000116b48723: movabs $0x116b486c3,%rsi
  0x0000000116b4872d: mov    %rsp,%rdx
  0x0000000116b48730: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48734: callq  0x000000010c7dd830
  0x0000000116b48739: hlt    
  0x0000000116b4873a: pop    %rax
  0x0000000116b4873b: movabs $0x0,%r10
  0x0000000116b48745: mov    %r10,0x280(%r15)
  0x0000000116b4874c: movabs $0x0,%r10
  0x0000000116b48756: mov    %r10,0x290(%r15)
  0x0000000116b4875d: movabs $0x0,%r10
  0x0000000116b48767: mov    %r10,0x288(%r15)
  0x0000000116b4876e: cmpq   $0x0,0x8(%r15)
  0x0000000116b48776: je     0x0000000116b48781
  0x0000000116b4877c: jmpq   0x0000000116b30420
  0x0000000116b48781: mov    -0x38(%rbp),%r13
  0x0000000116b48785: mov    -0x30(%rbp),%r14
  0x0000000116b48789: retq   
  0x0000000116b4878a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4878f: sub    $0x80,%rsp
  0x0000000116b48796: mov    %rax,0x78(%rsp)
  0x0000000116b4879b: mov    %rcx,0x70(%rsp)
  0x0000000116b487a0: mov    %rdx,0x68(%rsp)
  0x0000000116b487a5: mov    %rbx,0x60(%rsp)
  0x0000000116b487aa: mov    %rbp,0x50(%rsp)
  0x0000000116b487af: mov    %rsi,0x48(%rsp)
  0x0000000116b487b4: mov    %rdi,0x40(%rsp)
  0x0000000116b487b9: mov    %r8,0x38(%rsp)
  0x0000000116b487be: mov    %r9,0x30(%rsp)
  0x0000000116b487c3: mov    %r10,0x28(%rsp)
  0x0000000116b487c8: mov    %r11,0x20(%rsp)
  0x0000000116b487cd: mov    %r12,0x18(%rsp)
  0x0000000116b487d2: mov    %r13,0x10(%rsp)
  0x0000000116b487d7: mov    %r14,0x8(%rsp)
  0x0000000116b487dc: mov    %r15,(%rsp)
  0x0000000116b487e0: movabs $0x10cb763be,%rdi
  0x0000000116b487ea: movabs $0x116b4878a,%rsi
  0x0000000116b487f4: mov    %rsp,%rdx
  0x0000000116b487f7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b487fb: callq  0x000000010c7dd830
  0x0000000116b48800: hlt    
  0x0000000116b48801: movzbl 0x6(%r13),%ebx
  0x0000000116b48806: add    $0x6,%r13
  0x0000000116b4880a: movabs $0x10ce38e80,%r10
  0x0000000116b48814: jmpq   *(%r10,%rbx,8)
  0x0000000116b48818: movq   $0x0,-0x10(%rbp)
  0x0000000116b48820: mov    -0x38(%rbp),%r13
  0x0000000116b48824: mov    -0x30(%rbp),%r14
  0x0000000116b48828: cmpq   $0x0,0x8(%r15)
  0x0000000116b48830: je     0x0000000116b48b06
  0x0000000116b48836: callq  0x0000000116b48840
  0x0000000116b4883b: jmpq   0x0000000116b48a8f
  0x0000000116b48840: lea    0x8(%rsp),%rax
  0x0000000116b48845: mov    %r13,-0x38(%rbp)
  0x0000000116b48849: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b48851: je     0x0000000116b488ce
  0x0000000116b48857: mov    %rsp,-0x28(%rsp)
  0x0000000116b4885c: sub    $0x80,%rsp
  0x0000000116b48863: mov    %rax,0x78(%rsp)
  0x0000000116b48868: mov    %rcx,0x70(%rsp)
  0x0000000116b4886d: mov    %rdx,0x68(%rsp)
  0x0000000116b48872: mov    %rbx,0x60(%rsp)
  0x0000000116b48877: mov    %rbp,0x50(%rsp)
  0x0000000116b4887c: mov    %rsi,0x48(%rsp)
  0x0000000116b48881: mov    %rdi,0x40(%rsp)
  0x0000000116b48886: mov    %r8,0x38(%rsp)
  0x0000000116b4888b: mov    %r9,0x30(%rsp)
  0x0000000116b48890: mov    %r10,0x28(%rsp)
  0x0000000116b48895: mov    %r11,0x20(%rsp)
  0x0000000116b4889a: mov    %r12,0x18(%rsp)
  0x0000000116b4889f: mov    %r13,0x10(%rsp)
  0x0000000116b488a4: mov    %r14,0x8(%rsp)
  0x0000000116b488a9: mov    %r15,(%rsp)
  0x0000000116b488ad: movabs $0x10cc2363b,%rdi
  0x0000000116b488b7: movabs $0x116b48857,%rsi
  0x0000000116b488c1: mov    %rsp,%rdx
  0x0000000116b488c4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b488c8: callq  0x000000010c7dd830
  0x0000000116b488cd: hlt    
  0x0000000116b488ce: push   %r10
  0x0000000116b488d0: cmp    -0x9d02027(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b488d7: je     0x0000000116b48954
  ;; call_VM_base: heap base corrupted?
  0x0000000116b488dd: mov    %rsp,-0x28(%rsp)
  0x0000000116b488e2: sub    $0x80,%rsp
  0x0000000116b488e9: mov    %rax,0x78(%rsp)
  0x0000000116b488ee: mov    %rcx,0x70(%rsp)
  0x0000000116b488f3: mov    %rdx,0x68(%rsp)
  0x0000000116b488f8: mov    %rbx,0x60(%rsp)
  0x0000000116b488fd: mov    %rbp,0x50(%rsp)
  0x0000000116b48902: mov    %rsi,0x48(%rsp)
  0x0000000116b48907: mov    %rdi,0x40(%rsp)
  0x0000000116b4890c: mov    %r8,0x38(%rsp)
  0x0000000116b48911: mov    %r9,0x30(%rsp)
  0x0000000116b48916: mov    %r10,0x28(%rsp)
  0x0000000116b4891b: mov    %r11,0x20(%rsp)
  0x0000000116b48920: mov    %r12,0x18(%rsp)
  0x0000000116b48925: mov    %r13,0x10(%rsp)
  0x0000000116b4892a: mov    %r14,0x8(%rsp)
  0x0000000116b4892f: mov    %r15,(%rsp)
  0x0000000116b48933: movabs $0x10cc63f17,%rdi
  0x0000000116b4893d: movabs $0x116b488dd,%rsi
  0x0000000116b48947: mov    %rsp,%rdx
  0x0000000116b4894a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4894e: callq  0x000000010c7dd830
  0x0000000116b48953: hlt    
  0x0000000116b48954: pop    %r10
  0x0000000116b48956: mov    %r15,%rdi
  0x0000000116b48959: mov    %rbp,0x290(%r15)
  0x0000000116b48960: mov    %rax,0x280(%r15)
  0x0000000116b48967: test   $0xf,%esp
  0x0000000116b4896d: je     0x0000000116b48985
  0x0000000116b48973: sub    $0x8,%rsp
  0x0000000116b48977: callq  0x000000010c5881a0
  0x0000000116b4897c: add    $0x8,%rsp
  0x0000000116b48980: jmpq   0x0000000116b4898a
  0x0000000116b48985: callq  0x000000010c5881a0
  0x0000000116b4898a: push   %rax
  0x0000000116b4898b: push   %rdi
  0x0000000116b4898c: push   %rsi
  0x0000000116b4898d: push   %rdx
  0x0000000116b4898e: push   %rcx
  0x0000000116b4898f: push   %r8
  0x0000000116b48991: push   %r9
  0x0000000116b48993: push   %r10
  0x0000000116b48995: mov    %rsp,%r10
  0x0000000116b48998: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4899c: push   %r10
  0x0000000116b4899e: push   %r11
  0x0000000116b489a0: mov    $0x109,%edi
  0x0000000116b489a5: movabs $0x7ff815049fd5,%r10
  0x0000000116b489af: callq  *%r10
  0x0000000116b489b2: pop    %r11
  0x0000000116b489b4: pop    %rsp
  0x0000000116b489b5: pop    %r10
  0x0000000116b489b7: pop    %r9
  0x0000000116b489b9: pop    %r8
  0x0000000116b489bb: pop    %rcx
  0x0000000116b489bc: pop    %rdx
  0x0000000116b489bd: pop    %rsi
  0x0000000116b489be: pop    %rdi
  0x0000000116b489bf: cmp    %rax,%r15
  0x0000000116b489c2: je     0x0000000116b48a3f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b489c8: mov    %rsp,-0x28(%rsp)
  0x0000000116b489cd: sub    $0x80,%rsp
  0x0000000116b489d4: mov    %rax,0x78(%rsp)
  0x0000000116b489d9: mov    %rcx,0x70(%rsp)
  0x0000000116b489de: mov    %rdx,0x68(%rsp)
  0x0000000116b489e3: mov    %rbx,0x60(%rsp)
  0x0000000116b489e8: mov    %rbp,0x50(%rsp)
  0x0000000116b489ed: mov    %rsi,0x48(%rsp)
  0x0000000116b489f2: mov    %rdi,0x40(%rsp)
  0x0000000116b489f7: mov    %r8,0x38(%rsp)
  0x0000000116b489fc: mov    %r9,0x30(%rsp)
  0x0000000116b48a01: mov    %r10,0x28(%rsp)
  0x0000000116b48a06: mov    %r11,0x20(%rsp)
  0x0000000116b48a0b: mov    %r12,0x18(%rsp)
  0x0000000116b48a10: mov    %r13,0x10(%rsp)
  0x0000000116b48a15: mov    %r14,0x8(%rsp)
  0x0000000116b48a1a: mov    %r15,(%rsp)
  0x0000000116b48a1e: movabs $0x10cc6405e,%rdi
  0x0000000116b48a28: movabs $0x116b489c8,%rsi
  0x0000000116b48a32: mov    %rsp,%rdx
  0x0000000116b48a35: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48a39: callq  0x000000010c7dd830
  0x0000000116b48a3e: hlt    
  0x0000000116b48a3f: pop    %rax
  0x0000000116b48a40: movabs $0x0,%r10
  0x0000000116b48a4a: mov    %r10,0x280(%r15)
  0x0000000116b48a51: movabs $0x0,%r10
  0x0000000116b48a5b: mov    %r10,0x290(%r15)
  0x0000000116b48a62: movabs $0x0,%r10
  0x0000000116b48a6c: mov    %r10,0x288(%r15)
  0x0000000116b48a73: cmpq   $0x0,0x8(%r15)
  0x0000000116b48a7b: je     0x0000000116b48a86
  0x0000000116b48a81: jmpq   0x0000000116b30420
  0x0000000116b48a86: mov    -0x38(%rbp),%r13
  0x0000000116b48a8a: mov    -0x30(%rbp),%r14
  0x0000000116b48a8e: retq   
  0x0000000116b48a8f: mov    %rsp,-0x28(%rsp)
  0x0000000116b48a94: sub    $0x80,%rsp
  0x0000000116b48a9b: mov    %rax,0x78(%rsp)
  0x0000000116b48aa0: mov    %rcx,0x70(%rsp)
  0x0000000116b48aa5: mov    %rdx,0x68(%rsp)
  0x0000000116b48aaa: mov    %rbx,0x60(%rsp)
  0x0000000116b48aaf: mov    %rbp,0x50(%rsp)
  0x0000000116b48ab4: mov    %rsi,0x48(%rsp)
  0x0000000116b48ab9: mov    %rdi,0x40(%rsp)
  0x0000000116b48abe: mov    %r8,0x38(%rsp)
  0x0000000116b48ac3: mov    %r9,0x30(%rsp)
  0x0000000116b48ac8: mov    %r10,0x28(%rsp)
  0x0000000116b48acd: mov    %r11,0x20(%rsp)
  0x0000000116b48ad2: mov    %r12,0x18(%rsp)
  0x0000000116b48ad7: mov    %r13,0x10(%rsp)
  0x0000000116b48adc: mov    %r14,0x8(%rsp)
  0x0000000116b48ae1: mov    %r15,(%rsp)
  0x0000000116b48ae5: movabs $0x10cb763be,%rdi
  0x0000000116b48aef: movabs $0x116b48a8f,%rsi
  0x0000000116b48af9: mov    %rsp,%rdx
  0x0000000116b48afc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48b00: callq  0x000000010c7dd830
  0x0000000116b48b05: hlt    
  0x0000000116b48b06: movzbl 0x6(%r13),%ebx
  0x0000000116b48b0b: add    $0x6,%r13
  0x0000000116b48b0f: movabs $0x10ce39680,%r10
  0x0000000116b48b19: jmpq   *(%r10,%rbx,8)
  0x0000000116b48b1d: movq   $0x0,-0x10(%rbp)
  0x0000000116b48b25: mov    -0x38(%rbp),%r13
  0x0000000116b48b29: mov    -0x30(%rbp),%r14
  0x0000000116b48b2d: cmpq   $0x0,0x8(%r15)
  0x0000000116b48b35: je     0x0000000116b48e0b
  0x0000000116b48b3b: callq  0x0000000116b48b45
  0x0000000116b48b40: jmpq   0x0000000116b48d94
  0x0000000116b48b45: lea    0x8(%rsp),%rax
  0x0000000116b48b4a: mov    %r13,-0x38(%rbp)
  0x0000000116b48b4e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b48b56: je     0x0000000116b48bd3
  0x0000000116b48b5c: mov    %rsp,-0x28(%rsp)
  0x0000000116b48b61: sub    $0x80,%rsp
  0x0000000116b48b68: mov    %rax,0x78(%rsp)
  0x0000000116b48b6d: mov    %rcx,0x70(%rsp)
  0x0000000116b48b72: mov    %rdx,0x68(%rsp)
  0x0000000116b48b77: mov    %rbx,0x60(%rsp)
  0x0000000116b48b7c: mov    %rbp,0x50(%rsp)
  0x0000000116b48b81: mov    %rsi,0x48(%rsp)
  0x0000000116b48b86: mov    %rdi,0x40(%rsp)
  0x0000000116b48b8b: mov    %r8,0x38(%rsp)
  0x0000000116b48b90: mov    %r9,0x30(%rsp)
  0x0000000116b48b95: mov    %r10,0x28(%rsp)
  0x0000000116b48b9a: mov    %r11,0x20(%rsp)
  0x0000000116b48b9f: mov    %r12,0x18(%rsp)
  0x0000000116b48ba4: mov    %r13,0x10(%rsp)
  0x0000000116b48ba9: mov    %r14,0x8(%rsp)
  0x0000000116b48bae: mov    %r15,(%rsp)
  0x0000000116b48bb2: movabs $0x10cc2363b,%rdi
  0x0000000116b48bbc: movabs $0x116b48b5c,%rsi
  0x0000000116b48bc6: mov    %rsp,%rdx
  0x0000000116b48bc9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48bcd: callq  0x000000010c7dd830
  0x0000000116b48bd2: hlt    
  0x0000000116b48bd3: push   %r10
  0x0000000116b48bd5: cmp    -0x9d0232c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b48bdc: je     0x0000000116b48c59
  ;; call_VM_base: heap base corrupted?
  0x0000000116b48be2: mov    %rsp,-0x28(%rsp)
  0x0000000116b48be7: sub    $0x80,%rsp
  0x0000000116b48bee: mov    %rax,0x78(%rsp)
  0x0000000116b48bf3: mov    %rcx,0x70(%rsp)
  0x0000000116b48bf8: mov    %rdx,0x68(%rsp)
  0x0000000116b48bfd: mov    %rbx,0x60(%rsp)
  0x0000000116b48c02: mov    %rbp,0x50(%rsp)
  0x0000000116b48c07: mov    %rsi,0x48(%rsp)
  0x0000000116b48c0c: mov    %rdi,0x40(%rsp)
  0x0000000116b48c11: mov    %r8,0x38(%rsp)
  0x0000000116b48c16: mov    %r9,0x30(%rsp)
  0x0000000116b48c1b: mov    %r10,0x28(%rsp)
  0x0000000116b48c20: mov    %r11,0x20(%rsp)
  0x0000000116b48c25: mov    %r12,0x18(%rsp)
  0x0000000116b48c2a: mov    %r13,0x10(%rsp)
  0x0000000116b48c2f: mov    %r14,0x8(%rsp)
  0x0000000116b48c34: mov    %r15,(%rsp)
  0x0000000116b48c38: movabs $0x10cc63f17,%rdi
  0x0000000116b48c42: movabs $0x116b48be2,%rsi
  0x0000000116b48c4c: mov    %rsp,%rdx
  0x0000000116b48c4f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48c53: callq  0x000000010c7dd830
  0x0000000116b48c58: hlt    
  0x0000000116b48c59: pop    %r10
  0x0000000116b48c5b: mov    %r15,%rdi
  0x0000000116b48c5e: mov    %rbp,0x290(%r15)
  0x0000000116b48c65: mov    %rax,0x280(%r15)
  0x0000000116b48c6c: test   $0xf,%esp
  0x0000000116b48c72: je     0x0000000116b48c8a
  0x0000000116b48c78: sub    $0x8,%rsp
  0x0000000116b48c7c: callq  0x000000010c5881a0
  0x0000000116b48c81: add    $0x8,%rsp
  0x0000000116b48c85: jmpq   0x0000000116b48c8f
  0x0000000116b48c8a: callq  0x000000010c5881a0
  0x0000000116b48c8f: push   %rax
  0x0000000116b48c90: push   %rdi
  0x0000000116b48c91: push   %rsi
  0x0000000116b48c92: push   %rdx
  0x0000000116b48c93: push   %rcx
  0x0000000116b48c94: push   %r8
  0x0000000116b48c96: push   %r9
  0x0000000116b48c98: push   %r10
  0x0000000116b48c9a: mov    %rsp,%r10
  0x0000000116b48c9d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48ca1: push   %r10
  0x0000000116b48ca3: push   %r11
  0x0000000116b48ca5: mov    $0x109,%edi
  0x0000000116b48caa: movabs $0x7ff815049fd5,%r10
  0x0000000116b48cb4: callq  *%r10
  0x0000000116b48cb7: pop    %r11
  0x0000000116b48cb9: pop    %rsp
  0x0000000116b48cba: pop    %r10
  0x0000000116b48cbc: pop    %r9
  0x0000000116b48cbe: pop    %r8
  0x0000000116b48cc0: pop    %rcx
  0x0000000116b48cc1: pop    %rdx
  0x0000000116b48cc2: pop    %rsi
  0x0000000116b48cc3: pop    %rdi
  0x0000000116b48cc4: cmp    %rax,%r15
  0x0000000116b48cc7: je     0x0000000116b48d44
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b48ccd: mov    %rsp,-0x28(%rsp)
  0x0000000116b48cd2: sub    $0x80,%rsp
  0x0000000116b48cd9: mov    %rax,0x78(%rsp)
  0x0000000116b48cde: mov    %rcx,0x70(%rsp)
  0x0000000116b48ce3: mov    %rdx,0x68(%rsp)
  0x0000000116b48ce8: mov    %rbx,0x60(%rsp)
  0x0000000116b48ced: mov    %rbp,0x50(%rsp)
  0x0000000116b48cf2: mov    %rsi,0x48(%rsp)
  0x0000000116b48cf7: mov    %rdi,0x40(%rsp)
  0x0000000116b48cfc: mov    %r8,0x38(%rsp)
  0x0000000116b48d01: mov    %r9,0x30(%rsp)
  0x0000000116b48d06: mov    %r10,0x28(%rsp)
  0x0000000116b48d0b: mov    %r11,0x20(%rsp)
  0x0000000116b48d10: mov    %r12,0x18(%rsp)
  0x0000000116b48d15: mov    %r13,0x10(%rsp)
  0x0000000116b48d1a: mov    %r14,0x8(%rsp)
  0x0000000116b48d1f: mov    %r15,(%rsp)
  0x0000000116b48d23: movabs $0x10cc6405e,%rdi
  0x0000000116b48d2d: movabs $0x116b48ccd,%rsi
  0x0000000116b48d37: mov    %rsp,%rdx
  0x0000000116b48d3a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48d3e: callq  0x000000010c7dd830
  0x0000000116b48d43: hlt    
  0x0000000116b48d44: pop    %rax
  0x0000000116b48d45: movabs $0x0,%r10
  0x0000000116b48d4f: mov    %r10,0x280(%r15)
  0x0000000116b48d56: movabs $0x0,%r10
  0x0000000116b48d60: mov    %r10,0x290(%r15)
  0x0000000116b48d67: movabs $0x0,%r10
  0x0000000116b48d71: mov    %r10,0x288(%r15)
  0x0000000116b48d78: cmpq   $0x0,0x8(%r15)
  0x0000000116b48d80: je     0x0000000116b48d8b
  0x0000000116b48d86: jmpq   0x0000000116b30420
  0x0000000116b48d8b: mov    -0x38(%rbp),%r13
  0x0000000116b48d8f: mov    -0x30(%rbp),%r14
  0x0000000116b48d93: retq   
  0x0000000116b48d94: mov    %rsp,-0x28(%rsp)
  0x0000000116b48d99: sub    $0x80,%rsp
  0x0000000116b48da0: mov    %rax,0x78(%rsp)
  0x0000000116b48da5: mov    %rcx,0x70(%rsp)
  0x0000000116b48daa: mov    %rdx,0x68(%rsp)
  0x0000000116b48daf: mov    %rbx,0x60(%rsp)
  0x0000000116b48db4: mov    %rbp,0x50(%rsp)
  0x0000000116b48db9: mov    %rsi,0x48(%rsp)
  0x0000000116b48dbe: mov    %rdi,0x40(%rsp)
  0x0000000116b48dc3: mov    %r8,0x38(%rsp)
  0x0000000116b48dc8: mov    %r9,0x30(%rsp)
  0x0000000116b48dcd: mov    %r10,0x28(%rsp)
  0x0000000116b48dd2: mov    %r11,0x20(%rsp)
  0x0000000116b48dd7: mov    %r12,0x18(%rsp)
  0x0000000116b48ddc: mov    %r13,0x10(%rsp)
  0x0000000116b48de1: mov    %r14,0x8(%rsp)
  0x0000000116b48de6: mov    %r15,(%rsp)
  0x0000000116b48dea: movabs $0x10cb763be,%rdi
  0x0000000116b48df4: movabs $0x116b48d94,%rsi
  0x0000000116b48dfe: mov    %rsp,%rdx
  0x0000000116b48e01: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48e05: callq  0x000000010c7dd830
  0x0000000116b48e0a: hlt    
  0x0000000116b48e0b: movzbl 0x6(%r13),%ebx
  0x0000000116b48e10: add    $0x6,%r13
  0x0000000116b48e14: movabs $0x10ce39e80,%r10
  0x0000000116b48e1e: jmpq   *(%r10,%rbx,8)
  0x0000000116b48e22: movq   $0x0,-0x10(%rbp)
  0x0000000116b48e2a: mov    -0x38(%rbp),%r13
  0x0000000116b48e2e: mov    -0x30(%rbp),%r14
  0x0000000116b48e32: cmpq   $0x0,0x8(%r15)
  0x0000000116b48e3a: je     0x0000000116b49110
  0x0000000116b48e40: callq  0x0000000116b48e4a
  0x0000000116b48e45: jmpq   0x0000000116b49099
  0x0000000116b48e4a: lea    0x8(%rsp),%rax
  0x0000000116b48e4f: mov    %r13,-0x38(%rbp)
  0x0000000116b48e53: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b48e5b: je     0x0000000116b48ed8
  0x0000000116b48e61: mov    %rsp,-0x28(%rsp)
  0x0000000116b48e66: sub    $0x80,%rsp
  0x0000000116b48e6d: mov    %rax,0x78(%rsp)
  0x0000000116b48e72: mov    %rcx,0x70(%rsp)
  0x0000000116b48e77: mov    %rdx,0x68(%rsp)
  0x0000000116b48e7c: mov    %rbx,0x60(%rsp)
  0x0000000116b48e81: mov    %rbp,0x50(%rsp)
  0x0000000116b48e86: mov    %rsi,0x48(%rsp)
  0x0000000116b48e8b: mov    %rdi,0x40(%rsp)
  0x0000000116b48e90: mov    %r8,0x38(%rsp)
  0x0000000116b48e95: mov    %r9,0x30(%rsp)
  0x0000000116b48e9a: mov    %r10,0x28(%rsp)
  0x0000000116b48e9f: mov    %r11,0x20(%rsp)
  0x0000000116b48ea4: mov    %r12,0x18(%rsp)
  0x0000000116b48ea9: mov    %r13,0x10(%rsp)
  0x0000000116b48eae: mov    %r14,0x8(%rsp)
  0x0000000116b48eb3: mov    %r15,(%rsp)
  0x0000000116b48eb7: movabs $0x10cc2363b,%rdi
  0x0000000116b48ec1: movabs $0x116b48e61,%rsi
  0x0000000116b48ecb: mov    %rsp,%rdx
  0x0000000116b48ece: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48ed2: callq  0x000000010c7dd830
  0x0000000116b48ed7: hlt    
  0x0000000116b48ed8: push   %r10
  0x0000000116b48eda: cmp    -0x9d02631(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b48ee1: je     0x0000000116b48f5e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b48ee7: mov    %rsp,-0x28(%rsp)
  0x0000000116b48eec: sub    $0x80,%rsp
  0x0000000116b48ef3: mov    %rax,0x78(%rsp)
  0x0000000116b48ef8: mov    %rcx,0x70(%rsp)
  0x0000000116b48efd: mov    %rdx,0x68(%rsp)
  0x0000000116b48f02: mov    %rbx,0x60(%rsp)
  0x0000000116b48f07: mov    %rbp,0x50(%rsp)
  0x0000000116b48f0c: mov    %rsi,0x48(%rsp)
  0x0000000116b48f11: mov    %rdi,0x40(%rsp)
  0x0000000116b48f16: mov    %r8,0x38(%rsp)
  0x0000000116b48f1b: mov    %r9,0x30(%rsp)
  0x0000000116b48f20: mov    %r10,0x28(%rsp)
  0x0000000116b48f25: mov    %r11,0x20(%rsp)
  0x0000000116b48f2a: mov    %r12,0x18(%rsp)
  0x0000000116b48f2f: mov    %r13,0x10(%rsp)
  0x0000000116b48f34: mov    %r14,0x8(%rsp)
  0x0000000116b48f39: mov    %r15,(%rsp)
  0x0000000116b48f3d: movabs $0x10cc63f17,%rdi
  0x0000000116b48f47: movabs $0x116b48ee7,%rsi
  0x0000000116b48f51: mov    %rsp,%rdx
  0x0000000116b48f54: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48f58: callq  0x000000010c7dd830
  0x0000000116b48f5d: hlt    
  0x0000000116b48f5e: pop    %r10
  0x0000000116b48f60: mov    %r15,%rdi
  0x0000000116b48f63: mov    %rbp,0x290(%r15)
  0x0000000116b48f6a: mov    %rax,0x280(%r15)
  0x0000000116b48f71: test   $0xf,%esp
  0x0000000116b48f77: je     0x0000000116b48f8f
  0x0000000116b48f7d: sub    $0x8,%rsp
  0x0000000116b48f81: callq  0x000000010c5881a0
  0x0000000116b48f86: add    $0x8,%rsp
  0x0000000116b48f8a: jmpq   0x0000000116b48f94
  0x0000000116b48f8f: callq  0x000000010c5881a0
  0x0000000116b48f94: push   %rax
  0x0000000116b48f95: push   %rdi
  0x0000000116b48f96: push   %rsi
  0x0000000116b48f97: push   %rdx
  0x0000000116b48f98: push   %rcx
  0x0000000116b48f99: push   %r8
  0x0000000116b48f9b: push   %r9
  0x0000000116b48f9d: push   %r10
  0x0000000116b48f9f: mov    %rsp,%r10
  0x0000000116b48fa2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b48fa6: push   %r10
  0x0000000116b48fa8: push   %r11
  0x0000000116b48faa: mov    $0x109,%edi
  0x0000000116b48faf: movabs $0x7ff815049fd5,%r10
  0x0000000116b48fb9: callq  *%r10
  0x0000000116b48fbc: pop    %r11
  0x0000000116b48fbe: pop    %rsp
  0x0000000116b48fbf: pop    %r10
  0x0000000116b48fc1: pop    %r9
  0x0000000116b48fc3: pop    %r8
  0x0000000116b48fc5: pop    %rcx
  0x0000000116b48fc6: pop    %rdx
  0x0000000116b48fc7: pop    %rsi
  0x0000000116b48fc8: pop    %rdi
  0x0000000116b48fc9: cmp    %rax,%r15
  0x0000000116b48fcc: je     0x0000000116b49049
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b48fd2: mov    %rsp,-0x28(%rsp)
  0x0000000116b48fd7: sub    $0x80,%rsp
  0x0000000116b48fde: mov    %rax,0x78(%rsp)
  0x0000000116b48fe3: mov    %rcx,0x70(%rsp)
  0x0000000116b48fe8: mov    %rdx,0x68(%rsp)
  0x0000000116b48fed: mov    %rbx,0x60(%rsp)
  0x0000000116b48ff2: mov    %rbp,0x50(%rsp)
  0x0000000116b48ff7: mov    %rsi,0x48(%rsp)
  0x0000000116b48ffc: mov    %rdi,0x40(%rsp)
  0x0000000116b49001: mov    %r8,0x38(%rsp)
  0x0000000116b49006: mov    %r9,0x30(%rsp)
  0x0000000116b4900b: mov    %r10,0x28(%rsp)
  0x0000000116b49010: mov    %r11,0x20(%rsp)
  0x0000000116b49015: mov    %r12,0x18(%rsp)
  0x0000000116b4901a: mov    %r13,0x10(%rsp)
  0x0000000116b4901f: mov    %r14,0x8(%rsp)
  0x0000000116b49024: mov    %r15,(%rsp)
  0x0000000116b49028: movabs $0x10cc6405e,%rdi
  0x0000000116b49032: movabs $0x116b48fd2,%rsi
  0x0000000116b4903c: mov    %rsp,%rdx
  0x0000000116b4903f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49043: callq  0x000000010c7dd830
  0x0000000116b49048: hlt    
  0x0000000116b49049: pop    %rax
  0x0000000116b4904a: movabs $0x0,%r10
  0x0000000116b49054: mov    %r10,0x280(%r15)
  0x0000000116b4905b: movabs $0x0,%r10
  0x0000000116b49065: mov    %r10,0x290(%r15)
  0x0000000116b4906c: movabs $0x0,%r10
  0x0000000116b49076: mov    %r10,0x288(%r15)
  0x0000000116b4907d: cmpq   $0x0,0x8(%r15)
  0x0000000116b49085: je     0x0000000116b49090
  0x0000000116b4908b: jmpq   0x0000000116b30420
  0x0000000116b49090: mov    -0x38(%rbp),%r13
  0x0000000116b49094: mov    -0x30(%rbp),%r14
  0x0000000116b49098: retq   
  0x0000000116b49099: mov    %rsp,-0x28(%rsp)
  0x0000000116b4909e: sub    $0x80,%rsp
  0x0000000116b490a5: mov    %rax,0x78(%rsp)
  0x0000000116b490aa: mov    %rcx,0x70(%rsp)
  0x0000000116b490af: mov    %rdx,0x68(%rsp)
  0x0000000116b490b4: mov    %rbx,0x60(%rsp)
  0x0000000116b490b9: mov    %rbp,0x50(%rsp)
  0x0000000116b490be: mov    %rsi,0x48(%rsp)
  0x0000000116b490c3: mov    %rdi,0x40(%rsp)
  0x0000000116b490c8: mov    %r8,0x38(%rsp)
  0x0000000116b490cd: mov    %r9,0x30(%rsp)
  0x0000000116b490d2: mov    %r10,0x28(%rsp)
  0x0000000116b490d7: mov    %r11,0x20(%rsp)
  0x0000000116b490dc: mov    %r12,0x18(%rsp)
  0x0000000116b490e1: mov    %r13,0x10(%rsp)
  0x0000000116b490e6: mov    %r14,0x8(%rsp)
  0x0000000116b490eb: mov    %r15,(%rsp)
  0x0000000116b490ef: movabs $0x10cb763be,%rdi
  0x0000000116b490f9: movabs $0x116b49099,%rsi
  0x0000000116b49103: mov    %rsp,%rdx
  0x0000000116b49106: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4910a: callq  0x000000010c7dd830
  0x0000000116b4910f: hlt    
  0x0000000116b49110: movzbl 0x6(%r13),%ebx
  0x0000000116b49115: add    $0x6,%r13
  0x0000000116b49119: movabs $0x10ce3a680,%r10
  0x0000000116b49123: jmpq   *(%r10,%rbx,8)
  0x0000000116b49127: movq   $0x0,-0x10(%rbp)
  0x0000000116b4912f: mov    -0x38(%rbp),%r13
  0x0000000116b49133: mov    -0x30(%rbp),%r14
  0x0000000116b49137: cmpq   $0x0,0x8(%r15)
  0x0000000116b4913f: je     0x0000000116b49415
  0x0000000116b49145: callq  0x0000000116b4914f
  0x0000000116b4914a: jmpq   0x0000000116b4939e
  0x0000000116b4914f: lea    0x8(%rsp),%rax
  0x0000000116b49154: mov    %r13,-0x38(%rbp)
  0x0000000116b49158: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b49160: je     0x0000000116b491dd
  0x0000000116b49166: mov    %rsp,-0x28(%rsp)
  0x0000000116b4916b: sub    $0x80,%rsp
  0x0000000116b49172: mov    %rax,0x78(%rsp)
  0x0000000116b49177: mov    %rcx,0x70(%rsp)
  0x0000000116b4917c: mov    %rdx,0x68(%rsp)
  0x0000000116b49181: mov    %rbx,0x60(%rsp)
  0x0000000116b49186: mov    %rbp,0x50(%rsp)
  0x0000000116b4918b: mov    %rsi,0x48(%rsp)
  0x0000000116b49190: mov    %rdi,0x40(%rsp)
  0x0000000116b49195: mov    %r8,0x38(%rsp)
  0x0000000116b4919a: mov    %r9,0x30(%rsp)
  0x0000000116b4919f: mov    %r10,0x28(%rsp)
  0x0000000116b491a4: mov    %r11,0x20(%rsp)
  0x0000000116b491a9: mov    %r12,0x18(%rsp)
  0x0000000116b491ae: mov    %r13,0x10(%rsp)
  0x0000000116b491b3: mov    %r14,0x8(%rsp)
  0x0000000116b491b8: mov    %r15,(%rsp)
  0x0000000116b491bc: movabs $0x10cc2363b,%rdi
  0x0000000116b491c6: movabs $0x116b49166,%rsi
  0x0000000116b491d0: mov    %rsp,%rdx
  0x0000000116b491d3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b491d7: callq  0x000000010c7dd830
  0x0000000116b491dc: hlt    
  0x0000000116b491dd: push   %r10
  0x0000000116b491df: cmp    -0x9d02936(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b491e6: je     0x0000000116b49263
  ;; call_VM_base: heap base corrupted?
  0x0000000116b491ec: mov    %rsp,-0x28(%rsp)
  0x0000000116b491f1: sub    $0x80,%rsp
  0x0000000116b491f8: mov    %rax,0x78(%rsp)
  0x0000000116b491fd: mov    %rcx,0x70(%rsp)
  0x0000000116b49202: mov    %rdx,0x68(%rsp)
  0x0000000116b49207: mov    %rbx,0x60(%rsp)
  0x0000000116b4920c: mov    %rbp,0x50(%rsp)
  0x0000000116b49211: mov    %rsi,0x48(%rsp)
  0x0000000116b49216: mov    %rdi,0x40(%rsp)
  0x0000000116b4921b: mov    %r8,0x38(%rsp)
  0x0000000116b49220: mov    %r9,0x30(%rsp)
  0x0000000116b49225: mov    %r10,0x28(%rsp)
  0x0000000116b4922a: mov    %r11,0x20(%rsp)
  0x0000000116b4922f: mov    %r12,0x18(%rsp)
  0x0000000116b49234: mov    %r13,0x10(%rsp)
  0x0000000116b49239: mov    %r14,0x8(%rsp)
  0x0000000116b4923e: mov    %r15,(%rsp)
  0x0000000116b49242: movabs $0x10cc63f17,%rdi
  0x0000000116b4924c: movabs $0x116b491ec,%rsi
  0x0000000116b49256: mov    %rsp,%rdx
  0x0000000116b49259: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4925d: callq  0x000000010c7dd830
  0x0000000116b49262: hlt    
  0x0000000116b49263: pop    %r10
  0x0000000116b49265: mov    %r15,%rdi
  0x0000000116b49268: mov    %rbp,0x290(%r15)
  0x0000000116b4926f: mov    %rax,0x280(%r15)
  0x0000000116b49276: test   $0xf,%esp
  0x0000000116b4927c: je     0x0000000116b49294
  0x0000000116b49282: sub    $0x8,%rsp
  0x0000000116b49286: callq  0x000000010c5881a0
  0x0000000116b4928b: add    $0x8,%rsp
  0x0000000116b4928f: jmpq   0x0000000116b49299
  0x0000000116b49294: callq  0x000000010c5881a0
  0x0000000116b49299: push   %rax
  0x0000000116b4929a: push   %rdi
  0x0000000116b4929b: push   %rsi
  0x0000000116b4929c: push   %rdx
  0x0000000116b4929d: push   %rcx
  0x0000000116b4929e: push   %r8
  0x0000000116b492a0: push   %r9
  0x0000000116b492a2: push   %r10
  0x0000000116b492a4: mov    %rsp,%r10
  0x0000000116b492a7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b492ab: push   %r10
  0x0000000116b492ad: push   %r11
  0x0000000116b492af: mov    $0x109,%edi
  0x0000000116b492b4: movabs $0x7ff815049fd5,%r10
  0x0000000116b492be: callq  *%r10
  0x0000000116b492c1: pop    %r11
  0x0000000116b492c3: pop    %rsp
  0x0000000116b492c4: pop    %r10
  0x0000000116b492c6: pop    %r9
  0x0000000116b492c8: pop    %r8
  0x0000000116b492ca: pop    %rcx
  0x0000000116b492cb: pop    %rdx
  0x0000000116b492cc: pop    %rsi
  0x0000000116b492cd: pop    %rdi
  0x0000000116b492ce: cmp    %rax,%r15
  0x0000000116b492d1: je     0x0000000116b4934e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b492d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b492dc: sub    $0x80,%rsp
  0x0000000116b492e3: mov    %rax,0x78(%rsp)
  0x0000000116b492e8: mov    %rcx,0x70(%rsp)
  0x0000000116b492ed: mov    %rdx,0x68(%rsp)
  0x0000000116b492f2: mov    %rbx,0x60(%rsp)
  0x0000000116b492f7: mov    %rbp,0x50(%rsp)
  0x0000000116b492fc: mov    %rsi,0x48(%rsp)
  0x0000000116b49301: mov    %rdi,0x40(%rsp)
  0x0000000116b49306: mov    %r8,0x38(%rsp)
  0x0000000116b4930b: mov    %r9,0x30(%rsp)
  0x0000000116b49310: mov    %r10,0x28(%rsp)
  0x0000000116b49315: mov    %r11,0x20(%rsp)
  0x0000000116b4931a: mov    %r12,0x18(%rsp)
  0x0000000116b4931f: mov    %r13,0x10(%rsp)
  0x0000000116b49324: mov    %r14,0x8(%rsp)
  0x0000000116b49329: mov    %r15,(%rsp)
  0x0000000116b4932d: movabs $0x10cc6405e,%rdi
  0x0000000116b49337: movabs $0x116b492d7,%rsi
  0x0000000116b49341: mov    %rsp,%rdx
  0x0000000116b49344: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49348: callq  0x000000010c7dd830
  0x0000000116b4934d: hlt    
  0x0000000116b4934e: pop    %rax
  0x0000000116b4934f: movabs $0x0,%r10
  0x0000000116b49359: mov    %r10,0x280(%r15)
  0x0000000116b49360: movabs $0x0,%r10
  0x0000000116b4936a: mov    %r10,0x290(%r15)
  0x0000000116b49371: movabs $0x0,%r10
  0x0000000116b4937b: mov    %r10,0x288(%r15)
  0x0000000116b49382: cmpq   $0x0,0x8(%r15)
  0x0000000116b4938a: je     0x0000000116b49395
  0x0000000116b49390: jmpq   0x0000000116b30420
  0x0000000116b49395: mov    -0x38(%rbp),%r13
  0x0000000116b49399: mov    -0x30(%rbp),%r14
  0x0000000116b4939d: retq   
  0x0000000116b4939e: mov    %rsp,-0x28(%rsp)
  0x0000000116b493a3: sub    $0x80,%rsp
  0x0000000116b493aa: mov    %rax,0x78(%rsp)
  0x0000000116b493af: mov    %rcx,0x70(%rsp)
  0x0000000116b493b4: mov    %rdx,0x68(%rsp)
  0x0000000116b493b9: mov    %rbx,0x60(%rsp)
  0x0000000116b493be: mov    %rbp,0x50(%rsp)
  0x0000000116b493c3: mov    %rsi,0x48(%rsp)
  0x0000000116b493c8: mov    %rdi,0x40(%rsp)
  0x0000000116b493cd: mov    %r8,0x38(%rsp)
  0x0000000116b493d2: mov    %r9,0x30(%rsp)
  0x0000000116b493d7: mov    %r10,0x28(%rsp)
  0x0000000116b493dc: mov    %r11,0x20(%rsp)
  0x0000000116b493e1: mov    %r12,0x18(%rsp)
  0x0000000116b493e6: mov    %r13,0x10(%rsp)
  0x0000000116b493eb: mov    %r14,0x8(%rsp)
  0x0000000116b493f0: mov    %r15,(%rsp)
  0x0000000116b493f4: movabs $0x10cb763be,%rdi
  0x0000000116b493fe: movabs $0x116b4939e,%rsi
  0x0000000116b49408: mov    %rsp,%rdx
  0x0000000116b4940b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4940f: callq  0x000000010c7dd830
  0x0000000116b49414: hlt    
  0x0000000116b49415: movzbl 0x6(%r13),%ebx
  0x0000000116b4941a: add    $0x6,%r13
  0x0000000116b4941e: movabs $0x10ce3b680,%r10
  0x0000000116b49428: jmpq   *(%r10,%rbx,8)
  0x0000000116b4942c: movq   $0x0,-0x10(%rbp)
  0x0000000116b49434: mov    -0x38(%rbp),%r13
  0x0000000116b49438: mov    -0x30(%rbp),%r14
  0x0000000116b4943c: cmpq   $0x0,0x8(%r15)
  0x0000000116b49444: je     0x0000000116b4971a
  0x0000000116b4944a: callq  0x0000000116b49454
  0x0000000116b4944f: jmpq   0x0000000116b496a3
  0x0000000116b49454: lea    0x8(%rsp),%rax
  0x0000000116b49459: mov    %r13,-0x38(%rbp)
  0x0000000116b4945d: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b49465: je     0x0000000116b494e2
  0x0000000116b4946b: mov    %rsp,-0x28(%rsp)
  0x0000000116b49470: sub    $0x80,%rsp
  0x0000000116b49477: mov    %rax,0x78(%rsp)
  0x0000000116b4947c: mov    %rcx,0x70(%rsp)
  0x0000000116b49481: mov    %rdx,0x68(%rsp)
  0x0000000116b49486: mov    %rbx,0x60(%rsp)
  0x0000000116b4948b: mov    %rbp,0x50(%rsp)
  0x0000000116b49490: mov    %rsi,0x48(%rsp)
  0x0000000116b49495: mov    %rdi,0x40(%rsp)
  0x0000000116b4949a: mov    %r8,0x38(%rsp)
  0x0000000116b4949f: mov    %r9,0x30(%rsp)
  0x0000000116b494a4: mov    %r10,0x28(%rsp)
  0x0000000116b494a9: mov    %r11,0x20(%rsp)
  0x0000000116b494ae: mov    %r12,0x18(%rsp)
  0x0000000116b494b3: mov    %r13,0x10(%rsp)
  0x0000000116b494b8: mov    %r14,0x8(%rsp)
  0x0000000116b494bd: mov    %r15,(%rsp)
  0x0000000116b494c1: movabs $0x10cc2363b,%rdi
  0x0000000116b494cb: movabs $0x116b4946b,%rsi
  0x0000000116b494d5: mov    %rsp,%rdx
  0x0000000116b494d8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b494dc: callq  0x000000010c7dd830
  0x0000000116b494e1: hlt    
  0x0000000116b494e2: push   %r10
  0x0000000116b494e4: cmp    -0x9d02c3b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b494eb: je     0x0000000116b49568
  ;; call_VM_base: heap base corrupted?
  0x0000000116b494f1: mov    %rsp,-0x28(%rsp)
  0x0000000116b494f6: sub    $0x80,%rsp
  0x0000000116b494fd: mov    %rax,0x78(%rsp)
  0x0000000116b49502: mov    %rcx,0x70(%rsp)
  0x0000000116b49507: mov    %rdx,0x68(%rsp)
  0x0000000116b4950c: mov    %rbx,0x60(%rsp)
  0x0000000116b49511: mov    %rbp,0x50(%rsp)
  0x0000000116b49516: mov    %rsi,0x48(%rsp)
  0x0000000116b4951b: mov    %rdi,0x40(%rsp)
  0x0000000116b49520: mov    %r8,0x38(%rsp)
  0x0000000116b49525: mov    %r9,0x30(%rsp)
  0x0000000116b4952a: mov    %r10,0x28(%rsp)
  0x0000000116b4952f: mov    %r11,0x20(%rsp)
  0x0000000116b49534: mov    %r12,0x18(%rsp)
  0x0000000116b49539: mov    %r13,0x10(%rsp)
  0x0000000116b4953e: mov    %r14,0x8(%rsp)
  0x0000000116b49543: mov    %r15,(%rsp)
  0x0000000116b49547: movabs $0x10cc63f17,%rdi
  0x0000000116b49551: movabs $0x116b494f1,%rsi
  0x0000000116b4955b: mov    %rsp,%rdx
  0x0000000116b4955e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49562: callq  0x000000010c7dd830
  0x0000000116b49567: hlt    
  0x0000000116b49568: pop    %r10
  0x0000000116b4956a: mov    %r15,%rdi
  0x0000000116b4956d: mov    %rbp,0x290(%r15)
  0x0000000116b49574: mov    %rax,0x280(%r15)
  0x0000000116b4957b: test   $0xf,%esp
  0x0000000116b49581: je     0x0000000116b49599
  0x0000000116b49587: sub    $0x8,%rsp
  0x0000000116b4958b: callq  0x000000010c5881a0
  0x0000000116b49590: add    $0x8,%rsp
  0x0000000116b49594: jmpq   0x0000000116b4959e
  0x0000000116b49599: callq  0x000000010c5881a0
  0x0000000116b4959e: push   %rax
  0x0000000116b4959f: push   %rdi
  0x0000000116b495a0: push   %rsi
  0x0000000116b495a1: push   %rdx
  0x0000000116b495a2: push   %rcx
  0x0000000116b495a3: push   %r8
  0x0000000116b495a5: push   %r9
  0x0000000116b495a7: push   %r10
  0x0000000116b495a9: mov    %rsp,%r10
  0x0000000116b495ac: and    $0xfffffffffffffff0,%rsp
  0x0000000116b495b0: push   %r10
  0x0000000116b495b2: push   %r11
  0x0000000116b495b4: mov    $0x109,%edi
  0x0000000116b495b9: movabs $0x7ff815049fd5,%r10
  0x0000000116b495c3: callq  *%r10
  0x0000000116b495c6: pop    %r11
  0x0000000116b495c8: pop    %rsp
  0x0000000116b495c9: pop    %r10
  0x0000000116b495cb: pop    %r9
  0x0000000116b495cd: pop    %r8
  0x0000000116b495cf: pop    %rcx
  0x0000000116b495d0: pop    %rdx
  0x0000000116b495d1: pop    %rsi
  0x0000000116b495d2: pop    %rdi
  0x0000000116b495d3: cmp    %rax,%r15
  0x0000000116b495d6: je     0x0000000116b49653
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b495dc: mov    %rsp,-0x28(%rsp)
  0x0000000116b495e1: sub    $0x80,%rsp
  0x0000000116b495e8: mov    %rax,0x78(%rsp)
  0x0000000116b495ed: mov    %rcx,0x70(%rsp)
  0x0000000116b495f2: mov    %rdx,0x68(%rsp)
  0x0000000116b495f7: mov    %rbx,0x60(%rsp)
  0x0000000116b495fc: mov    %rbp,0x50(%rsp)
  0x0000000116b49601: mov    %rsi,0x48(%rsp)
  0x0000000116b49606: mov    %rdi,0x40(%rsp)
  0x0000000116b4960b: mov    %r8,0x38(%rsp)
  0x0000000116b49610: mov    %r9,0x30(%rsp)
  0x0000000116b49615: mov    %r10,0x28(%rsp)
  0x0000000116b4961a: mov    %r11,0x20(%rsp)
  0x0000000116b4961f: mov    %r12,0x18(%rsp)
  0x0000000116b49624: mov    %r13,0x10(%rsp)
  0x0000000116b49629: mov    %r14,0x8(%rsp)
  0x0000000116b4962e: mov    %r15,(%rsp)
  0x0000000116b49632: movabs $0x10cc6405e,%rdi
  0x0000000116b4963c: movabs $0x116b495dc,%rsi
  0x0000000116b49646: mov    %rsp,%rdx
  0x0000000116b49649: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4964d: callq  0x000000010c7dd830
  0x0000000116b49652: hlt    
  0x0000000116b49653: pop    %rax
  0x0000000116b49654: movabs $0x0,%r10
  0x0000000116b4965e: mov    %r10,0x280(%r15)
  0x0000000116b49665: movabs $0x0,%r10
  0x0000000116b4966f: mov    %r10,0x290(%r15)
  0x0000000116b49676: movabs $0x0,%r10
  0x0000000116b49680: mov    %r10,0x288(%r15)
  0x0000000116b49687: cmpq   $0x0,0x8(%r15)
  0x0000000116b4968f: je     0x0000000116b4969a
  0x0000000116b49695: jmpq   0x0000000116b30420
  0x0000000116b4969a: mov    -0x38(%rbp),%r13
  0x0000000116b4969e: mov    -0x30(%rbp),%r14
  0x0000000116b496a2: retq   
  0x0000000116b496a3: mov    %rsp,-0x28(%rsp)
  0x0000000116b496a8: sub    $0x80,%rsp
  0x0000000116b496af: mov    %rax,0x78(%rsp)
  0x0000000116b496b4: mov    %rcx,0x70(%rsp)
  0x0000000116b496b9: mov    %rdx,0x68(%rsp)
  0x0000000116b496be: mov    %rbx,0x60(%rsp)
  0x0000000116b496c3: mov    %rbp,0x50(%rsp)
  0x0000000116b496c8: mov    %rsi,0x48(%rsp)
  0x0000000116b496cd: mov    %rdi,0x40(%rsp)
  0x0000000116b496d2: mov    %r8,0x38(%rsp)
  0x0000000116b496d7: mov    %r9,0x30(%rsp)
  0x0000000116b496dc: mov    %r10,0x28(%rsp)
  0x0000000116b496e1: mov    %r11,0x20(%rsp)
  0x0000000116b496e6: mov    %r12,0x18(%rsp)
  0x0000000116b496eb: mov    %r13,0x10(%rsp)
  0x0000000116b496f0: mov    %r14,0x8(%rsp)
  0x0000000116b496f5: mov    %r15,(%rsp)
  0x0000000116b496f9: movabs $0x10cb763be,%rdi
  0x0000000116b49703: movabs $0x116b496a3,%rsi
  0x0000000116b4970d: mov    %rsp,%rdx
  0x0000000116b49710: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49714: callq  0x000000010c7dd830
  0x0000000116b49719: hlt    
  0x0000000116b4971a: movzbl 0x7(%r13),%ebx
  0x0000000116b4971f: add    $0x7,%r13
  0x0000000116b49723: movabs $0x10ce38e80,%r10
  0x0000000116b4972d: jmpq   *(%r10,%rbx,8)
  0x0000000116b49731: movq   $0x0,-0x10(%rbp)
  0x0000000116b49739: mov    -0x38(%rbp),%r13
  0x0000000116b4973d: mov    -0x30(%rbp),%r14
  0x0000000116b49741: cmpq   $0x0,0x8(%r15)
  0x0000000116b49749: je     0x0000000116b49a1f
  0x0000000116b4974f: callq  0x0000000116b49759
  0x0000000116b49754: jmpq   0x0000000116b499a8
  0x0000000116b49759: lea    0x8(%rsp),%rax
  0x0000000116b4975e: mov    %r13,-0x38(%rbp)
  0x0000000116b49762: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4976a: je     0x0000000116b497e7
  0x0000000116b49770: mov    %rsp,-0x28(%rsp)
  0x0000000116b49775: sub    $0x80,%rsp
  0x0000000116b4977c: mov    %rax,0x78(%rsp)
  0x0000000116b49781: mov    %rcx,0x70(%rsp)
  0x0000000116b49786: mov    %rdx,0x68(%rsp)
  0x0000000116b4978b: mov    %rbx,0x60(%rsp)
  0x0000000116b49790: mov    %rbp,0x50(%rsp)
  0x0000000116b49795: mov    %rsi,0x48(%rsp)
  0x0000000116b4979a: mov    %rdi,0x40(%rsp)
  0x0000000116b4979f: mov    %r8,0x38(%rsp)
  0x0000000116b497a4: mov    %r9,0x30(%rsp)
  0x0000000116b497a9: mov    %r10,0x28(%rsp)
  0x0000000116b497ae: mov    %r11,0x20(%rsp)
  0x0000000116b497b3: mov    %r12,0x18(%rsp)
  0x0000000116b497b8: mov    %r13,0x10(%rsp)
  0x0000000116b497bd: mov    %r14,0x8(%rsp)
  0x0000000116b497c2: mov    %r15,(%rsp)
  0x0000000116b497c6: movabs $0x10cc2363b,%rdi
  0x0000000116b497d0: movabs $0x116b49770,%rsi
  0x0000000116b497da: mov    %rsp,%rdx
  0x0000000116b497dd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b497e1: callq  0x000000010c7dd830
  0x0000000116b497e6: hlt    
  0x0000000116b497e7: push   %r10
  0x0000000116b497e9: cmp    -0x9d02f40(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b497f0: je     0x0000000116b4986d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b497f6: mov    %rsp,-0x28(%rsp)
  0x0000000116b497fb: sub    $0x80,%rsp
  0x0000000116b49802: mov    %rax,0x78(%rsp)
  0x0000000116b49807: mov    %rcx,0x70(%rsp)
  0x0000000116b4980c: mov    %rdx,0x68(%rsp)
  0x0000000116b49811: mov    %rbx,0x60(%rsp)
  0x0000000116b49816: mov    %rbp,0x50(%rsp)
  0x0000000116b4981b: mov    %rsi,0x48(%rsp)
  0x0000000116b49820: mov    %rdi,0x40(%rsp)
  0x0000000116b49825: mov    %r8,0x38(%rsp)
  0x0000000116b4982a: mov    %r9,0x30(%rsp)
  0x0000000116b4982f: mov    %r10,0x28(%rsp)
  0x0000000116b49834: mov    %r11,0x20(%rsp)
  0x0000000116b49839: mov    %r12,0x18(%rsp)
  0x0000000116b4983e: mov    %r13,0x10(%rsp)
  0x0000000116b49843: mov    %r14,0x8(%rsp)
  0x0000000116b49848: mov    %r15,(%rsp)
  0x0000000116b4984c: movabs $0x10cc63f17,%rdi
  0x0000000116b49856: movabs $0x116b497f6,%rsi
  0x0000000116b49860: mov    %rsp,%rdx
  0x0000000116b49863: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49867: callq  0x000000010c7dd830
  0x0000000116b4986c: hlt    
  0x0000000116b4986d: pop    %r10
  0x0000000116b4986f: mov    %r15,%rdi
  0x0000000116b49872: mov    %rbp,0x290(%r15)
  0x0000000116b49879: mov    %rax,0x280(%r15)
  0x0000000116b49880: test   $0xf,%esp
  0x0000000116b49886: je     0x0000000116b4989e
  0x0000000116b4988c: sub    $0x8,%rsp
  0x0000000116b49890: callq  0x000000010c5881a0
  0x0000000116b49895: add    $0x8,%rsp
  0x0000000116b49899: jmpq   0x0000000116b498a3
  0x0000000116b4989e: callq  0x000000010c5881a0
  0x0000000116b498a3: push   %rax
  0x0000000116b498a4: push   %rdi
  0x0000000116b498a5: push   %rsi
  0x0000000116b498a6: push   %rdx
  0x0000000116b498a7: push   %rcx
  0x0000000116b498a8: push   %r8
  0x0000000116b498aa: push   %r9
  0x0000000116b498ac: push   %r10
  0x0000000116b498ae: mov    %rsp,%r10
  0x0000000116b498b1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b498b5: push   %r10
  0x0000000116b498b7: push   %r11
  0x0000000116b498b9: mov    $0x109,%edi
  0x0000000116b498be: movabs $0x7ff815049fd5,%r10
  0x0000000116b498c8: callq  *%r10
  0x0000000116b498cb: pop    %r11
  0x0000000116b498cd: pop    %rsp
  0x0000000116b498ce: pop    %r10
  0x0000000116b498d0: pop    %r9
  0x0000000116b498d2: pop    %r8
  0x0000000116b498d4: pop    %rcx
  0x0000000116b498d5: pop    %rdx
  0x0000000116b498d6: pop    %rsi
  0x0000000116b498d7: pop    %rdi
  0x0000000116b498d8: cmp    %rax,%r15
  0x0000000116b498db: je     0x0000000116b49958
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b498e1: mov    %rsp,-0x28(%rsp)
  0x0000000116b498e6: sub    $0x80,%rsp
  0x0000000116b498ed: mov    %rax,0x78(%rsp)
  0x0000000116b498f2: mov    %rcx,0x70(%rsp)
  0x0000000116b498f7: mov    %rdx,0x68(%rsp)
  0x0000000116b498fc: mov    %rbx,0x60(%rsp)
  0x0000000116b49901: mov    %rbp,0x50(%rsp)
  0x0000000116b49906: mov    %rsi,0x48(%rsp)
  0x0000000116b4990b: mov    %rdi,0x40(%rsp)
  0x0000000116b49910: mov    %r8,0x38(%rsp)
  0x0000000116b49915: mov    %r9,0x30(%rsp)
  0x0000000116b4991a: mov    %r10,0x28(%rsp)
  0x0000000116b4991f: mov    %r11,0x20(%rsp)
  0x0000000116b49924: mov    %r12,0x18(%rsp)
  0x0000000116b49929: mov    %r13,0x10(%rsp)
  0x0000000116b4992e: mov    %r14,0x8(%rsp)
  0x0000000116b49933: mov    %r15,(%rsp)
  0x0000000116b49937: movabs $0x10cc6405e,%rdi
  0x0000000116b49941: movabs $0x116b498e1,%rsi
  0x0000000116b4994b: mov    %rsp,%rdx
  0x0000000116b4994e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49952: callq  0x000000010c7dd830
  0x0000000116b49957: hlt    
  0x0000000116b49958: pop    %rax
  0x0000000116b49959: movabs $0x0,%r10
  0x0000000116b49963: mov    %r10,0x280(%r15)
  0x0000000116b4996a: movabs $0x0,%r10
  0x0000000116b49974: mov    %r10,0x290(%r15)
  0x0000000116b4997b: movabs $0x0,%r10
  0x0000000116b49985: mov    %r10,0x288(%r15)
  0x0000000116b4998c: cmpq   $0x0,0x8(%r15)
  0x0000000116b49994: je     0x0000000116b4999f
  0x0000000116b4999a: jmpq   0x0000000116b30420
  0x0000000116b4999f: mov    -0x38(%rbp),%r13
  0x0000000116b499a3: mov    -0x30(%rbp),%r14
  0x0000000116b499a7: retq   
  0x0000000116b499a8: mov    %rsp,-0x28(%rsp)
  0x0000000116b499ad: sub    $0x80,%rsp
  0x0000000116b499b4: mov    %rax,0x78(%rsp)
  0x0000000116b499b9: mov    %rcx,0x70(%rsp)
  0x0000000116b499be: mov    %rdx,0x68(%rsp)
  0x0000000116b499c3: mov    %rbx,0x60(%rsp)
  0x0000000116b499c8: mov    %rbp,0x50(%rsp)
  0x0000000116b499cd: mov    %rsi,0x48(%rsp)
  0x0000000116b499d2: mov    %rdi,0x40(%rsp)
  0x0000000116b499d7: mov    %r8,0x38(%rsp)
  0x0000000116b499dc: mov    %r9,0x30(%rsp)
  0x0000000116b499e1: mov    %r10,0x28(%rsp)
  0x0000000116b499e6: mov    %r11,0x20(%rsp)
  0x0000000116b499eb: mov    %r12,0x18(%rsp)
  0x0000000116b499f0: mov    %r13,0x10(%rsp)
  0x0000000116b499f5: mov    %r14,0x8(%rsp)
  0x0000000116b499fa: mov    %r15,(%rsp)
  0x0000000116b499fe: movabs $0x10cb763be,%rdi
  0x0000000116b49a08: movabs $0x116b499a8,%rsi
  0x0000000116b49a12: mov    %rsp,%rdx
  0x0000000116b49a15: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49a19: callq  0x000000010c7dd830
  0x0000000116b49a1e: hlt    
  0x0000000116b49a1f: movzbl 0x7(%r13),%ebx
  0x0000000116b49a24: add    $0x7,%r13
  0x0000000116b49a28: movabs $0x10ce38e80,%r10
  0x0000000116b49a32: jmpq   *(%r10,%rbx,8)
  0x0000000116b49a36: movq   $0x0,-0x10(%rbp)
  0x0000000116b49a3e: mov    -0x38(%rbp),%r13
  0x0000000116b49a42: mov    -0x30(%rbp),%r14
  0x0000000116b49a46: cmpq   $0x0,0x8(%r15)
  0x0000000116b49a4e: je     0x0000000116b49d24
  0x0000000116b49a54: callq  0x0000000116b49a5e
  0x0000000116b49a59: jmpq   0x0000000116b49cad
  0x0000000116b49a5e: lea    0x8(%rsp),%rax
  0x0000000116b49a63: mov    %r13,-0x38(%rbp)
  0x0000000116b49a67: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b49a6f: je     0x0000000116b49aec
  0x0000000116b49a75: mov    %rsp,-0x28(%rsp)
  0x0000000116b49a7a: sub    $0x80,%rsp
  0x0000000116b49a81: mov    %rax,0x78(%rsp)
  0x0000000116b49a86: mov    %rcx,0x70(%rsp)
  0x0000000116b49a8b: mov    %rdx,0x68(%rsp)
  0x0000000116b49a90: mov    %rbx,0x60(%rsp)
  0x0000000116b49a95: mov    %rbp,0x50(%rsp)
  0x0000000116b49a9a: mov    %rsi,0x48(%rsp)
  0x0000000116b49a9f: mov    %rdi,0x40(%rsp)
  0x0000000116b49aa4: mov    %r8,0x38(%rsp)
  0x0000000116b49aa9: mov    %r9,0x30(%rsp)
  0x0000000116b49aae: mov    %r10,0x28(%rsp)
  0x0000000116b49ab3: mov    %r11,0x20(%rsp)
  0x0000000116b49ab8: mov    %r12,0x18(%rsp)
  0x0000000116b49abd: mov    %r13,0x10(%rsp)
  0x0000000116b49ac2: mov    %r14,0x8(%rsp)
  0x0000000116b49ac7: mov    %r15,(%rsp)
  0x0000000116b49acb: movabs $0x10cc2363b,%rdi
  0x0000000116b49ad5: movabs $0x116b49a75,%rsi
  0x0000000116b49adf: mov    %rsp,%rdx
  0x0000000116b49ae2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49ae6: callq  0x000000010c7dd830
  0x0000000116b49aeb: hlt    
  0x0000000116b49aec: push   %r10
  0x0000000116b49aee: cmp    -0x9d03245(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b49af5: je     0x0000000116b49b72
  ;; call_VM_base: heap base corrupted?
  0x0000000116b49afb: mov    %rsp,-0x28(%rsp)
  0x0000000116b49b00: sub    $0x80,%rsp
  0x0000000116b49b07: mov    %rax,0x78(%rsp)
  0x0000000116b49b0c: mov    %rcx,0x70(%rsp)
  0x0000000116b49b11: mov    %rdx,0x68(%rsp)
  0x0000000116b49b16: mov    %rbx,0x60(%rsp)
  0x0000000116b49b1b: mov    %rbp,0x50(%rsp)
  0x0000000116b49b20: mov    %rsi,0x48(%rsp)
  0x0000000116b49b25: mov    %rdi,0x40(%rsp)
  0x0000000116b49b2a: mov    %r8,0x38(%rsp)
  0x0000000116b49b2f: mov    %r9,0x30(%rsp)
  0x0000000116b49b34: mov    %r10,0x28(%rsp)
  0x0000000116b49b39: mov    %r11,0x20(%rsp)
  0x0000000116b49b3e: mov    %r12,0x18(%rsp)
  0x0000000116b49b43: mov    %r13,0x10(%rsp)
  0x0000000116b49b48: mov    %r14,0x8(%rsp)
  0x0000000116b49b4d: mov    %r15,(%rsp)
  0x0000000116b49b51: movabs $0x10cc63f17,%rdi
  0x0000000116b49b5b: movabs $0x116b49afb,%rsi
  0x0000000116b49b65: mov    %rsp,%rdx
  0x0000000116b49b68: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49b6c: callq  0x000000010c7dd830
  0x0000000116b49b71: hlt    
  0x0000000116b49b72: pop    %r10
  0x0000000116b49b74: mov    %r15,%rdi
  0x0000000116b49b77: mov    %rbp,0x290(%r15)
  0x0000000116b49b7e: mov    %rax,0x280(%r15)
  0x0000000116b49b85: test   $0xf,%esp
  0x0000000116b49b8b: je     0x0000000116b49ba3
  0x0000000116b49b91: sub    $0x8,%rsp
  0x0000000116b49b95: callq  0x000000010c5881a0
  0x0000000116b49b9a: add    $0x8,%rsp
  0x0000000116b49b9e: jmpq   0x0000000116b49ba8
  0x0000000116b49ba3: callq  0x000000010c5881a0
  0x0000000116b49ba8: push   %rax
  0x0000000116b49ba9: push   %rdi
  0x0000000116b49baa: push   %rsi
  0x0000000116b49bab: push   %rdx
  0x0000000116b49bac: push   %rcx
  0x0000000116b49bad: push   %r8
  0x0000000116b49baf: push   %r9
  0x0000000116b49bb1: push   %r10
  0x0000000116b49bb3: mov    %rsp,%r10
  0x0000000116b49bb6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49bba: push   %r10
  0x0000000116b49bbc: push   %r11
  0x0000000116b49bbe: mov    $0x109,%edi
  0x0000000116b49bc3: movabs $0x7ff815049fd5,%r10
  0x0000000116b49bcd: callq  *%r10
  0x0000000116b49bd0: pop    %r11
  0x0000000116b49bd2: pop    %rsp
  0x0000000116b49bd3: pop    %r10
  0x0000000116b49bd5: pop    %r9
  0x0000000116b49bd7: pop    %r8
  0x0000000116b49bd9: pop    %rcx
  0x0000000116b49bda: pop    %rdx
  0x0000000116b49bdb: pop    %rsi
  0x0000000116b49bdc: pop    %rdi
  0x0000000116b49bdd: cmp    %rax,%r15
  0x0000000116b49be0: je     0x0000000116b49c5d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b49be6: mov    %rsp,-0x28(%rsp)
  0x0000000116b49beb: sub    $0x80,%rsp
  0x0000000116b49bf2: mov    %rax,0x78(%rsp)
  0x0000000116b49bf7: mov    %rcx,0x70(%rsp)
  0x0000000116b49bfc: mov    %rdx,0x68(%rsp)
  0x0000000116b49c01: mov    %rbx,0x60(%rsp)
  0x0000000116b49c06: mov    %rbp,0x50(%rsp)
  0x0000000116b49c0b: mov    %rsi,0x48(%rsp)
  0x0000000116b49c10: mov    %rdi,0x40(%rsp)
  0x0000000116b49c15: mov    %r8,0x38(%rsp)
  0x0000000116b49c1a: mov    %r9,0x30(%rsp)
  0x0000000116b49c1f: mov    %r10,0x28(%rsp)
  0x0000000116b49c24: mov    %r11,0x20(%rsp)
  0x0000000116b49c29: mov    %r12,0x18(%rsp)
  0x0000000116b49c2e: mov    %r13,0x10(%rsp)
  0x0000000116b49c33: mov    %r14,0x8(%rsp)
  0x0000000116b49c38: mov    %r15,(%rsp)
  0x0000000116b49c3c: movabs $0x10cc6405e,%rdi
  0x0000000116b49c46: movabs $0x116b49be6,%rsi
  0x0000000116b49c50: mov    %rsp,%rdx
  0x0000000116b49c53: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49c57: callq  0x000000010c7dd830
  0x0000000116b49c5c: hlt    
  0x0000000116b49c5d: pop    %rax
  0x0000000116b49c5e: movabs $0x0,%r10
  0x0000000116b49c68: mov    %r10,0x280(%r15)
  0x0000000116b49c6f: movabs $0x0,%r10
  0x0000000116b49c79: mov    %r10,0x290(%r15)
  0x0000000116b49c80: movabs $0x0,%r10
  0x0000000116b49c8a: mov    %r10,0x288(%r15)
  0x0000000116b49c91: cmpq   $0x0,0x8(%r15)
  0x0000000116b49c99: je     0x0000000116b49ca4
  0x0000000116b49c9f: jmpq   0x0000000116b30420
  0x0000000116b49ca4: mov    -0x38(%rbp),%r13
  0x0000000116b49ca8: mov    -0x30(%rbp),%r14
  0x0000000116b49cac: retq   
  0x0000000116b49cad: mov    %rsp,-0x28(%rsp)
  0x0000000116b49cb2: sub    $0x80,%rsp
  0x0000000116b49cb9: mov    %rax,0x78(%rsp)
  0x0000000116b49cbe: mov    %rcx,0x70(%rsp)
  0x0000000116b49cc3: mov    %rdx,0x68(%rsp)
  0x0000000116b49cc8: mov    %rbx,0x60(%rsp)
  0x0000000116b49ccd: mov    %rbp,0x50(%rsp)
  0x0000000116b49cd2: mov    %rsi,0x48(%rsp)
  0x0000000116b49cd7: mov    %rdi,0x40(%rsp)
  0x0000000116b49cdc: mov    %r8,0x38(%rsp)
  0x0000000116b49ce1: mov    %r9,0x30(%rsp)
  0x0000000116b49ce6: mov    %r10,0x28(%rsp)
  0x0000000116b49ceb: mov    %r11,0x20(%rsp)
  0x0000000116b49cf0: mov    %r12,0x18(%rsp)
  0x0000000116b49cf5: mov    %r13,0x10(%rsp)
  0x0000000116b49cfa: mov    %r14,0x8(%rsp)
  0x0000000116b49cff: mov    %r15,(%rsp)
  0x0000000116b49d03: movabs $0x10cb763be,%rdi
  0x0000000116b49d0d: movabs $0x116b49cad,%rsi
  0x0000000116b49d17: mov    %rsp,%rdx
  0x0000000116b49d1a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49d1e: callq  0x000000010c7dd830
  0x0000000116b49d23: hlt    
  0x0000000116b49d24: movzbl 0x7(%r13),%ebx
  0x0000000116b49d29: add    $0x7,%r13
  0x0000000116b49d2d: movabs $0x10ce38e80,%r10
  0x0000000116b49d37: jmpq   *(%r10,%rbx,8)
  0x0000000116b49d3b: movq   $0x0,-0x10(%rbp)
  0x0000000116b49d43: mov    -0x38(%rbp),%r13
  0x0000000116b49d47: mov    -0x30(%rbp),%r14
  0x0000000116b49d4b: cmpq   $0x0,0x8(%r15)
  0x0000000116b49d53: je     0x0000000116b4a029
  0x0000000116b49d59: callq  0x0000000116b49d63
  0x0000000116b49d5e: jmpq   0x0000000116b49fb2
  0x0000000116b49d63: lea    0x8(%rsp),%rax
  0x0000000116b49d68: mov    %r13,-0x38(%rbp)
  0x0000000116b49d6c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b49d74: je     0x0000000116b49df1
  0x0000000116b49d7a: mov    %rsp,-0x28(%rsp)
  0x0000000116b49d7f: sub    $0x80,%rsp
  0x0000000116b49d86: mov    %rax,0x78(%rsp)
  0x0000000116b49d8b: mov    %rcx,0x70(%rsp)
  0x0000000116b49d90: mov    %rdx,0x68(%rsp)
  0x0000000116b49d95: mov    %rbx,0x60(%rsp)
  0x0000000116b49d9a: mov    %rbp,0x50(%rsp)
  0x0000000116b49d9f: mov    %rsi,0x48(%rsp)
  0x0000000116b49da4: mov    %rdi,0x40(%rsp)
  0x0000000116b49da9: mov    %r8,0x38(%rsp)
  0x0000000116b49dae: mov    %r9,0x30(%rsp)
  0x0000000116b49db3: mov    %r10,0x28(%rsp)
  0x0000000116b49db8: mov    %r11,0x20(%rsp)
  0x0000000116b49dbd: mov    %r12,0x18(%rsp)
  0x0000000116b49dc2: mov    %r13,0x10(%rsp)
  0x0000000116b49dc7: mov    %r14,0x8(%rsp)
  0x0000000116b49dcc: mov    %r15,(%rsp)
  0x0000000116b49dd0: movabs $0x10cc2363b,%rdi
  0x0000000116b49dda: movabs $0x116b49d7a,%rsi
  0x0000000116b49de4: mov    %rsp,%rdx
  0x0000000116b49de7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49deb: callq  0x000000010c7dd830
  0x0000000116b49df0: hlt    
  0x0000000116b49df1: push   %r10
  0x0000000116b49df3: cmp    -0x9d0354a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b49dfa: je     0x0000000116b49e77
  ;; call_VM_base: heap base corrupted?
  0x0000000116b49e00: mov    %rsp,-0x28(%rsp)
  0x0000000116b49e05: sub    $0x80,%rsp
  0x0000000116b49e0c: mov    %rax,0x78(%rsp)
  0x0000000116b49e11: mov    %rcx,0x70(%rsp)
  0x0000000116b49e16: mov    %rdx,0x68(%rsp)
  0x0000000116b49e1b: mov    %rbx,0x60(%rsp)
  0x0000000116b49e20: mov    %rbp,0x50(%rsp)
  0x0000000116b49e25: mov    %rsi,0x48(%rsp)
  0x0000000116b49e2a: mov    %rdi,0x40(%rsp)
  0x0000000116b49e2f: mov    %r8,0x38(%rsp)
  0x0000000116b49e34: mov    %r9,0x30(%rsp)
  0x0000000116b49e39: mov    %r10,0x28(%rsp)
  0x0000000116b49e3e: mov    %r11,0x20(%rsp)
  0x0000000116b49e43: mov    %r12,0x18(%rsp)
  0x0000000116b49e48: mov    %r13,0x10(%rsp)
  0x0000000116b49e4d: mov    %r14,0x8(%rsp)
  0x0000000116b49e52: mov    %r15,(%rsp)
  0x0000000116b49e56: movabs $0x10cc63f17,%rdi
  0x0000000116b49e60: movabs $0x116b49e00,%rsi
  0x0000000116b49e6a: mov    %rsp,%rdx
  0x0000000116b49e6d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49e71: callq  0x000000010c7dd830
  0x0000000116b49e76: hlt    
  0x0000000116b49e77: pop    %r10
  0x0000000116b49e79: mov    %r15,%rdi
  0x0000000116b49e7c: mov    %rbp,0x290(%r15)
  0x0000000116b49e83: mov    %rax,0x280(%r15)
  0x0000000116b49e8a: test   $0xf,%esp
  0x0000000116b49e90: je     0x0000000116b49ea8
  0x0000000116b49e96: sub    $0x8,%rsp
  0x0000000116b49e9a: callq  0x000000010c5881a0
  0x0000000116b49e9f: add    $0x8,%rsp
  0x0000000116b49ea3: jmpq   0x0000000116b49ead
  0x0000000116b49ea8: callq  0x000000010c5881a0
  0x0000000116b49ead: push   %rax
  0x0000000116b49eae: push   %rdi
  0x0000000116b49eaf: push   %rsi
  0x0000000116b49eb0: push   %rdx
  0x0000000116b49eb1: push   %rcx
  0x0000000116b49eb2: push   %r8
  0x0000000116b49eb4: push   %r9
  0x0000000116b49eb6: push   %r10
  0x0000000116b49eb8: mov    %rsp,%r10
  0x0000000116b49ebb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49ebf: push   %r10
  0x0000000116b49ec1: push   %r11
  0x0000000116b49ec3: mov    $0x109,%edi
  0x0000000116b49ec8: movabs $0x7ff815049fd5,%r10
  0x0000000116b49ed2: callq  *%r10
  0x0000000116b49ed5: pop    %r11
  0x0000000116b49ed7: pop    %rsp
  0x0000000116b49ed8: pop    %r10
  0x0000000116b49eda: pop    %r9
  0x0000000116b49edc: pop    %r8
  0x0000000116b49ede: pop    %rcx
  0x0000000116b49edf: pop    %rdx
  0x0000000116b49ee0: pop    %rsi
  0x0000000116b49ee1: pop    %rdi
  0x0000000116b49ee2: cmp    %rax,%r15
  0x0000000116b49ee5: je     0x0000000116b49f62
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b49eeb: mov    %rsp,-0x28(%rsp)
  0x0000000116b49ef0: sub    $0x80,%rsp
  0x0000000116b49ef7: mov    %rax,0x78(%rsp)
  0x0000000116b49efc: mov    %rcx,0x70(%rsp)
  0x0000000116b49f01: mov    %rdx,0x68(%rsp)
  0x0000000116b49f06: mov    %rbx,0x60(%rsp)
  0x0000000116b49f0b: mov    %rbp,0x50(%rsp)
  0x0000000116b49f10: mov    %rsi,0x48(%rsp)
  0x0000000116b49f15: mov    %rdi,0x40(%rsp)
  0x0000000116b49f1a: mov    %r8,0x38(%rsp)
  0x0000000116b49f1f: mov    %r9,0x30(%rsp)
  0x0000000116b49f24: mov    %r10,0x28(%rsp)
  0x0000000116b49f29: mov    %r11,0x20(%rsp)
  0x0000000116b49f2e: mov    %r12,0x18(%rsp)
  0x0000000116b49f33: mov    %r13,0x10(%rsp)
  0x0000000116b49f38: mov    %r14,0x8(%rsp)
  0x0000000116b49f3d: mov    %r15,(%rsp)
  0x0000000116b49f41: movabs $0x10cc6405e,%rdi
  0x0000000116b49f4b: movabs $0x116b49eeb,%rsi
  0x0000000116b49f55: mov    %rsp,%rdx
  0x0000000116b49f58: and    $0xfffffffffffffff0,%rsp
  0x0000000116b49f5c: callq  0x000000010c7dd830
  0x0000000116b49f61: hlt    
  0x0000000116b49f62: pop    %rax
  0x0000000116b49f63: movabs $0x0,%r10
  0x0000000116b49f6d: mov    %r10,0x280(%r15)
  0x0000000116b49f74: movabs $0x0,%r10
  0x0000000116b49f7e: mov    %r10,0x290(%r15)
  0x0000000116b49f85: movabs $0x0,%r10
  0x0000000116b49f8f: mov    %r10,0x288(%r15)
  0x0000000116b49f96: cmpq   $0x0,0x8(%r15)
  0x0000000116b49f9e: je     0x0000000116b49fa9
  0x0000000116b49fa4: jmpq   0x0000000116b30420
  0x0000000116b49fa9: mov    -0x38(%rbp),%r13
  0x0000000116b49fad: mov    -0x30(%rbp),%r14
  0x0000000116b49fb1: retq   
  0x0000000116b49fb2: mov    %rsp,-0x28(%rsp)
  0x0000000116b49fb7: sub    $0x80,%rsp
  0x0000000116b49fbe: mov    %rax,0x78(%rsp)
  0x0000000116b49fc3: mov    %rcx,0x70(%rsp)
  0x0000000116b49fc8: mov    %rdx,0x68(%rsp)
  0x0000000116b49fcd: mov    %rbx,0x60(%rsp)
  0x0000000116b49fd2: mov    %rbp,0x50(%rsp)
  0x0000000116b49fd7: mov    %rsi,0x48(%rsp)
  0x0000000116b49fdc: mov    %rdi,0x40(%rsp)
  0x0000000116b49fe1: mov    %r8,0x38(%rsp)
  0x0000000116b49fe6: mov    %r9,0x30(%rsp)
  0x0000000116b49feb: mov    %r10,0x28(%rsp)
  0x0000000116b49ff0: mov    %r11,0x20(%rsp)
  0x0000000116b49ff5: mov    %r12,0x18(%rsp)
  0x0000000116b49ffa: mov    %r13,0x10(%rsp)
  0x0000000116b49fff: mov    %r14,0x8(%rsp)
  0x0000000116b4a004: mov    %r15,(%rsp)
  0x0000000116b4a008: movabs $0x10cb763be,%rdi
  0x0000000116b4a012: movabs $0x116b49fb2,%rsi
  0x0000000116b4a01c: mov    %rsp,%rdx
  0x0000000116b4a01f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a023: callq  0x000000010c7dd830
  0x0000000116b4a028: hlt    
  0x0000000116b4a029: movzbl 0x7(%r13),%ebx
  0x0000000116b4a02e: add    $0x7,%r13
  0x0000000116b4a032: movabs $0x10ce38e80,%r10
  0x0000000116b4a03c: jmpq   *(%r10,%rbx,8)
  0x0000000116b4a040: movq   $0x0,-0x10(%rbp)
  0x0000000116b4a048: mov    -0x38(%rbp),%r13
  0x0000000116b4a04c: mov    -0x30(%rbp),%r14
  0x0000000116b4a050: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a058: je     0x0000000116b4a32e
  0x0000000116b4a05e: callq  0x0000000116b4a068
  0x0000000116b4a063: jmpq   0x0000000116b4a2b7
  0x0000000116b4a068: lea    0x8(%rsp),%rax
  0x0000000116b4a06d: mov    %r13,-0x38(%rbp)
  0x0000000116b4a071: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4a079: je     0x0000000116b4a0f6
  0x0000000116b4a07f: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a084: sub    $0x80,%rsp
  0x0000000116b4a08b: mov    %rax,0x78(%rsp)
  0x0000000116b4a090: mov    %rcx,0x70(%rsp)
  0x0000000116b4a095: mov    %rdx,0x68(%rsp)
  0x0000000116b4a09a: mov    %rbx,0x60(%rsp)
  0x0000000116b4a09f: mov    %rbp,0x50(%rsp)
  0x0000000116b4a0a4: mov    %rsi,0x48(%rsp)
  0x0000000116b4a0a9: mov    %rdi,0x40(%rsp)
  0x0000000116b4a0ae: mov    %r8,0x38(%rsp)
  0x0000000116b4a0b3: mov    %r9,0x30(%rsp)
  0x0000000116b4a0b8: mov    %r10,0x28(%rsp)
  0x0000000116b4a0bd: mov    %r11,0x20(%rsp)
  0x0000000116b4a0c2: mov    %r12,0x18(%rsp)
  0x0000000116b4a0c7: mov    %r13,0x10(%rsp)
  0x0000000116b4a0cc: mov    %r14,0x8(%rsp)
  0x0000000116b4a0d1: mov    %r15,(%rsp)
  0x0000000116b4a0d5: movabs $0x10cc2363b,%rdi
  0x0000000116b4a0df: movabs $0x116b4a07f,%rsi
  0x0000000116b4a0e9: mov    %rsp,%rdx
  0x0000000116b4a0ec: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a0f0: callq  0x000000010c7dd830
  0x0000000116b4a0f5: hlt    
  0x0000000116b4a0f6: push   %r10
  0x0000000116b4a0f8: cmp    -0x9d0384f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4a0ff: je     0x0000000116b4a17c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4a105: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a10a: sub    $0x80,%rsp
  0x0000000116b4a111: mov    %rax,0x78(%rsp)
  0x0000000116b4a116: mov    %rcx,0x70(%rsp)
  0x0000000116b4a11b: mov    %rdx,0x68(%rsp)
  0x0000000116b4a120: mov    %rbx,0x60(%rsp)
  0x0000000116b4a125: mov    %rbp,0x50(%rsp)
  0x0000000116b4a12a: mov    %rsi,0x48(%rsp)
  0x0000000116b4a12f: mov    %rdi,0x40(%rsp)
  0x0000000116b4a134: mov    %r8,0x38(%rsp)
  0x0000000116b4a139: mov    %r9,0x30(%rsp)
  0x0000000116b4a13e: mov    %r10,0x28(%rsp)
  0x0000000116b4a143: mov    %r11,0x20(%rsp)
  0x0000000116b4a148: mov    %r12,0x18(%rsp)
  0x0000000116b4a14d: mov    %r13,0x10(%rsp)
  0x0000000116b4a152: mov    %r14,0x8(%rsp)
  0x0000000116b4a157: mov    %r15,(%rsp)
  0x0000000116b4a15b: movabs $0x10cc63f17,%rdi
  0x0000000116b4a165: movabs $0x116b4a105,%rsi
  0x0000000116b4a16f: mov    %rsp,%rdx
  0x0000000116b4a172: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a176: callq  0x000000010c7dd830
  0x0000000116b4a17b: hlt    
  0x0000000116b4a17c: pop    %r10
  0x0000000116b4a17e: mov    %r15,%rdi
  0x0000000116b4a181: mov    %rbp,0x290(%r15)
  0x0000000116b4a188: mov    %rax,0x280(%r15)
  0x0000000116b4a18f: test   $0xf,%esp
  0x0000000116b4a195: je     0x0000000116b4a1ad
  0x0000000116b4a19b: sub    $0x8,%rsp
  0x0000000116b4a19f: callq  0x000000010c5881a0
  0x0000000116b4a1a4: add    $0x8,%rsp
  0x0000000116b4a1a8: jmpq   0x0000000116b4a1b2
  0x0000000116b4a1ad: callq  0x000000010c5881a0
  0x0000000116b4a1b2: push   %rax
  0x0000000116b4a1b3: push   %rdi
  0x0000000116b4a1b4: push   %rsi
  0x0000000116b4a1b5: push   %rdx
  0x0000000116b4a1b6: push   %rcx
  0x0000000116b4a1b7: push   %r8
  0x0000000116b4a1b9: push   %r9
  0x0000000116b4a1bb: push   %r10
  0x0000000116b4a1bd: mov    %rsp,%r10
  0x0000000116b4a1c0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a1c4: push   %r10
  0x0000000116b4a1c6: push   %r11
  0x0000000116b4a1c8: mov    $0x109,%edi
  0x0000000116b4a1cd: movabs $0x7ff815049fd5,%r10
  0x0000000116b4a1d7: callq  *%r10
  0x0000000116b4a1da: pop    %r11
  0x0000000116b4a1dc: pop    %rsp
  0x0000000116b4a1dd: pop    %r10
  0x0000000116b4a1df: pop    %r9
  0x0000000116b4a1e1: pop    %r8
  0x0000000116b4a1e3: pop    %rcx
  0x0000000116b4a1e4: pop    %rdx
  0x0000000116b4a1e5: pop    %rsi
  0x0000000116b4a1e6: pop    %rdi
  0x0000000116b4a1e7: cmp    %rax,%r15
  0x0000000116b4a1ea: je     0x0000000116b4a267
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4a1f0: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a1f5: sub    $0x80,%rsp
  0x0000000116b4a1fc: mov    %rax,0x78(%rsp)
  0x0000000116b4a201: mov    %rcx,0x70(%rsp)
  0x0000000116b4a206: mov    %rdx,0x68(%rsp)
  0x0000000116b4a20b: mov    %rbx,0x60(%rsp)
  0x0000000116b4a210: mov    %rbp,0x50(%rsp)
  0x0000000116b4a215: mov    %rsi,0x48(%rsp)
  0x0000000116b4a21a: mov    %rdi,0x40(%rsp)
  0x0000000116b4a21f: mov    %r8,0x38(%rsp)
  0x0000000116b4a224: mov    %r9,0x30(%rsp)
  0x0000000116b4a229: mov    %r10,0x28(%rsp)
  0x0000000116b4a22e: mov    %r11,0x20(%rsp)
  0x0000000116b4a233: mov    %r12,0x18(%rsp)
  0x0000000116b4a238: mov    %r13,0x10(%rsp)
  0x0000000116b4a23d: mov    %r14,0x8(%rsp)
  0x0000000116b4a242: mov    %r15,(%rsp)
  0x0000000116b4a246: movabs $0x10cc6405e,%rdi
  0x0000000116b4a250: movabs $0x116b4a1f0,%rsi
  0x0000000116b4a25a: mov    %rsp,%rdx
  0x0000000116b4a25d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a261: callq  0x000000010c7dd830
  0x0000000116b4a266: hlt    
  0x0000000116b4a267: pop    %rax
  0x0000000116b4a268: movabs $0x0,%r10
  0x0000000116b4a272: mov    %r10,0x280(%r15)
  0x0000000116b4a279: movabs $0x0,%r10
  0x0000000116b4a283: mov    %r10,0x290(%r15)
  0x0000000116b4a28a: movabs $0x0,%r10
  0x0000000116b4a294: mov    %r10,0x288(%r15)
  0x0000000116b4a29b: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a2a3: je     0x0000000116b4a2ae
  0x0000000116b4a2a9: jmpq   0x0000000116b30420
  0x0000000116b4a2ae: mov    -0x38(%rbp),%r13
  0x0000000116b4a2b2: mov    -0x30(%rbp),%r14
  0x0000000116b4a2b6: retq   
  0x0000000116b4a2b7: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a2bc: sub    $0x80,%rsp
  0x0000000116b4a2c3: mov    %rax,0x78(%rsp)
  0x0000000116b4a2c8: mov    %rcx,0x70(%rsp)
  0x0000000116b4a2cd: mov    %rdx,0x68(%rsp)
  0x0000000116b4a2d2: mov    %rbx,0x60(%rsp)
  0x0000000116b4a2d7: mov    %rbp,0x50(%rsp)
  0x0000000116b4a2dc: mov    %rsi,0x48(%rsp)
  0x0000000116b4a2e1: mov    %rdi,0x40(%rsp)
  0x0000000116b4a2e6: mov    %r8,0x38(%rsp)
  0x0000000116b4a2eb: mov    %r9,0x30(%rsp)
  0x0000000116b4a2f0: mov    %r10,0x28(%rsp)
  0x0000000116b4a2f5: mov    %r11,0x20(%rsp)
  0x0000000116b4a2fa: mov    %r12,0x18(%rsp)
  0x0000000116b4a2ff: mov    %r13,0x10(%rsp)
  0x0000000116b4a304: mov    %r14,0x8(%rsp)
  0x0000000116b4a309: mov    %r15,(%rsp)
  0x0000000116b4a30d: movabs $0x10cb763be,%rdi
  0x0000000116b4a317: movabs $0x116b4a2b7,%rsi
  0x0000000116b4a321: mov    %rsp,%rdx
  0x0000000116b4a324: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a328: callq  0x000000010c7dd830
  0x0000000116b4a32d: hlt    
  0x0000000116b4a32e: movzbl 0x7(%r13),%ebx
  0x0000000116b4a333: add    $0x7,%r13
  0x0000000116b4a337: movabs $0x10ce3ae80,%r10
  0x0000000116b4a341: jmpq   *(%r10,%rbx,8)
  0x0000000116b4a345: movq   $0x0,-0x10(%rbp)
  0x0000000116b4a34d: mov    -0x38(%rbp),%r13
  0x0000000116b4a351: mov    -0x30(%rbp),%r14
  0x0000000116b4a355: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a35d: je     0x0000000116b4a633
  0x0000000116b4a363: callq  0x0000000116b4a36d
  0x0000000116b4a368: jmpq   0x0000000116b4a5bc
  0x0000000116b4a36d: lea    0x8(%rsp),%rax
  0x0000000116b4a372: mov    %r13,-0x38(%rbp)
  0x0000000116b4a376: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4a37e: je     0x0000000116b4a3fb
  0x0000000116b4a384: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a389: sub    $0x80,%rsp
  0x0000000116b4a390: mov    %rax,0x78(%rsp)
  0x0000000116b4a395: mov    %rcx,0x70(%rsp)
  0x0000000116b4a39a: mov    %rdx,0x68(%rsp)
  0x0000000116b4a39f: mov    %rbx,0x60(%rsp)
  0x0000000116b4a3a4: mov    %rbp,0x50(%rsp)
  0x0000000116b4a3a9: mov    %rsi,0x48(%rsp)
  0x0000000116b4a3ae: mov    %rdi,0x40(%rsp)
  0x0000000116b4a3b3: mov    %r8,0x38(%rsp)
  0x0000000116b4a3b8: mov    %r9,0x30(%rsp)
  0x0000000116b4a3bd: mov    %r10,0x28(%rsp)
  0x0000000116b4a3c2: mov    %r11,0x20(%rsp)
  0x0000000116b4a3c7: mov    %r12,0x18(%rsp)
  0x0000000116b4a3cc: mov    %r13,0x10(%rsp)
  0x0000000116b4a3d1: mov    %r14,0x8(%rsp)
  0x0000000116b4a3d6: mov    %r15,(%rsp)
  0x0000000116b4a3da: movabs $0x10cc2363b,%rdi
  0x0000000116b4a3e4: movabs $0x116b4a384,%rsi
  0x0000000116b4a3ee: mov    %rsp,%rdx
  0x0000000116b4a3f1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a3f5: callq  0x000000010c7dd830
  0x0000000116b4a3fa: hlt    
  0x0000000116b4a3fb: push   %r10
  0x0000000116b4a3fd: cmp    -0x9d03b54(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4a404: je     0x0000000116b4a481
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4a40a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a40f: sub    $0x80,%rsp
  0x0000000116b4a416: mov    %rax,0x78(%rsp)
  0x0000000116b4a41b: mov    %rcx,0x70(%rsp)
  0x0000000116b4a420: mov    %rdx,0x68(%rsp)
  0x0000000116b4a425: mov    %rbx,0x60(%rsp)
  0x0000000116b4a42a: mov    %rbp,0x50(%rsp)
  0x0000000116b4a42f: mov    %rsi,0x48(%rsp)
  0x0000000116b4a434: mov    %rdi,0x40(%rsp)
  0x0000000116b4a439: mov    %r8,0x38(%rsp)
  0x0000000116b4a43e: mov    %r9,0x30(%rsp)
  0x0000000116b4a443: mov    %r10,0x28(%rsp)
  0x0000000116b4a448: mov    %r11,0x20(%rsp)
  0x0000000116b4a44d: mov    %r12,0x18(%rsp)
  0x0000000116b4a452: mov    %r13,0x10(%rsp)
  0x0000000116b4a457: mov    %r14,0x8(%rsp)
  0x0000000116b4a45c: mov    %r15,(%rsp)
  0x0000000116b4a460: movabs $0x10cc63f17,%rdi
  0x0000000116b4a46a: movabs $0x116b4a40a,%rsi
  0x0000000116b4a474: mov    %rsp,%rdx
  0x0000000116b4a477: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a47b: callq  0x000000010c7dd830
  0x0000000116b4a480: hlt    
  0x0000000116b4a481: pop    %r10
  0x0000000116b4a483: mov    %r15,%rdi
  0x0000000116b4a486: mov    %rbp,0x290(%r15)
  0x0000000116b4a48d: mov    %rax,0x280(%r15)
  0x0000000116b4a494: test   $0xf,%esp
  0x0000000116b4a49a: je     0x0000000116b4a4b2
  0x0000000116b4a4a0: sub    $0x8,%rsp
  0x0000000116b4a4a4: callq  0x000000010c5881a0
  0x0000000116b4a4a9: add    $0x8,%rsp
  0x0000000116b4a4ad: jmpq   0x0000000116b4a4b7
  0x0000000116b4a4b2: callq  0x000000010c5881a0
  0x0000000116b4a4b7: push   %rax
  0x0000000116b4a4b8: push   %rdi
  0x0000000116b4a4b9: push   %rsi
  0x0000000116b4a4ba: push   %rdx
  0x0000000116b4a4bb: push   %rcx
  0x0000000116b4a4bc: push   %r8
  0x0000000116b4a4be: push   %r9
  0x0000000116b4a4c0: push   %r10
  0x0000000116b4a4c2: mov    %rsp,%r10
  0x0000000116b4a4c5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a4c9: push   %r10
  0x0000000116b4a4cb: push   %r11
  0x0000000116b4a4cd: mov    $0x109,%edi
  0x0000000116b4a4d2: movabs $0x7ff815049fd5,%r10
  0x0000000116b4a4dc: callq  *%r10
  0x0000000116b4a4df: pop    %r11
  0x0000000116b4a4e1: pop    %rsp
  0x0000000116b4a4e2: pop    %r10
  0x0000000116b4a4e4: pop    %r9
  0x0000000116b4a4e6: pop    %r8
  0x0000000116b4a4e8: pop    %rcx
  0x0000000116b4a4e9: pop    %rdx
  0x0000000116b4a4ea: pop    %rsi
  0x0000000116b4a4eb: pop    %rdi
  0x0000000116b4a4ec: cmp    %rax,%r15
  0x0000000116b4a4ef: je     0x0000000116b4a56c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4a4f5: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a4fa: sub    $0x80,%rsp
  0x0000000116b4a501: mov    %rax,0x78(%rsp)
  0x0000000116b4a506: mov    %rcx,0x70(%rsp)
  0x0000000116b4a50b: mov    %rdx,0x68(%rsp)
  0x0000000116b4a510: mov    %rbx,0x60(%rsp)
  0x0000000116b4a515: mov    %rbp,0x50(%rsp)
  0x0000000116b4a51a: mov    %rsi,0x48(%rsp)
  0x0000000116b4a51f: mov    %rdi,0x40(%rsp)
  0x0000000116b4a524: mov    %r8,0x38(%rsp)
  0x0000000116b4a529: mov    %r9,0x30(%rsp)
  0x0000000116b4a52e: mov    %r10,0x28(%rsp)
  0x0000000116b4a533: mov    %r11,0x20(%rsp)
  0x0000000116b4a538: mov    %r12,0x18(%rsp)
  0x0000000116b4a53d: mov    %r13,0x10(%rsp)
  0x0000000116b4a542: mov    %r14,0x8(%rsp)
  0x0000000116b4a547: mov    %r15,(%rsp)
  0x0000000116b4a54b: movabs $0x10cc6405e,%rdi
  0x0000000116b4a555: movabs $0x116b4a4f5,%rsi
  0x0000000116b4a55f: mov    %rsp,%rdx
  0x0000000116b4a562: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a566: callq  0x000000010c7dd830
  0x0000000116b4a56b: hlt    
  0x0000000116b4a56c: pop    %rax
  0x0000000116b4a56d: movabs $0x0,%r10
  0x0000000116b4a577: mov    %r10,0x280(%r15)
  0x0000000116b4a57e: movabs $0x0,%r10
  0x0000000116b4a588: mov    %r10,0x290(%r15)
  0x0000000116b4a58f: movabs $0x0,%r10
  0x0000000116b4a599: mov    %r10,0x288(%r15)
  0x0000000116b4a5a0: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a5a8: je     0x0000000116b4a5b3
  0x0000000116b4a5ae: jmpq   0x0000000116b30420
  0x0000000116b4a5b3: mov    -0x38(%rbp),%r13
  0x0000000116b4a5b7: mov    -0x30(%rbp),%r14
  0x0000000116b4a5bb: retq   
  0x0000000116b4a5bc: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a5c1: sub    $0x80,%rsp
  0x0000000116b4a5c8: mov    %rax,0x78(%rsp)
  0x0000000116b4a5cd: mov    %rcx,0x70(%rsp)
  0x0000000116b4a5d2: mov    %rdx,0x68(%rsp)
  0x0000000116b4a5d7: mov    %rbx,0x60(%rsp)
  0x0000000116b4a5dc: mov    %rbp,0x50(%rsp)
  0x0000000116b4a5e1: mov    %rsi,0x48(%rsp)
  0x0000000116b4a5e6: mov    %rdi,0x40(%rsp)
  0x0000000116b4a5eb: mov    %r8,0x38(%rsp)
  0x0000000116b4a5f0: mov    %r9,0x30(%rsp)
  0x0000000116b4a5f5: mov    %r10,0x28(%rsp)
  0x0000000116b4a5fa: mov    %r11,0x20(%rsp)
  0x0000000116b4a5ff: mov    %r12,0x18(%rsp)
  0x0000000116b4a604: mov    %r13,0x10(%rsp)
  0x0000000116b4a609: mov    %r14,0x8(%rsp)
  0x0000000116b4a60e: mov    %r15,(%rsp)
  0x0000000116b4a612: movabs $0x10cb763be,%rdi
  0x0000000116b4a61c: movabs $0x116b4a5bc,%rsi
  0x0000000116b4a626: mov    %rsp,%rdx
  0x0000000116b4a629: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a62d: callq  0x000000010c7dd830
  0x0000000116b4a632: hlt    
  0x0000000116b4a633: movzbl 0x7(%r13),%ebx
  0x0000000116b4a638: add    $0x7,%r13
  0x0000000116b4a63c: movabs $0x10ce38e80,%r10
  0x0000000116b4a646: jmpq   *(%r10,%rbx,8)
  0x0000000116b4a64a: movq   $0x0,-0x10(%rbp)
  0x0000000116b4a652: mov    -0x38(%rbp),%r13
  0x0000000116b4a656: mov    -0x30(%rbp),%r14
  0x0000000116b4a65a: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a662: je     0x0000000116b4a938
  0x0000000116b4a668: callq  0x0000000116b4a672
  0x0000000116b4a66d: jmpq   0x0000000116b4a8c1
  0x0000000116b4a672: lea    0x8(%rsp),%rax
  0x0000000116b4a677: mov    %r13,-0x38(%rbp)
  0x0000000116b4a67b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4a683: je     0x0000000116b4a700
  0x0000000116b4a689: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a68e: sub    $0x80,%rsp
  0x0000000116b4a695: mov    %rax,0x78(%rsp)
  0x0000000116b4a69a: mov    %rcx,0x70(%rsp)
  0x0000000116b4a69f: mov    %rdx,0x68(%rsp)
  0x0000000116b4a6a4: mov    %rbx,0x60(%rsp)
  0x0000000116b4a6a9: mov    %rbp,0x50(%rsp)
  0x0000000116b4a6ae: mov    %rsi,0x48(%rsp)
  0x0000000116b4a6b3: mov    %rdi,0x40(%rsp)
  0x0000000116b4a6b8: mov    %r8,0x38(%rsp)
  0x0000000116b4a6bd: mov    %r9,0x30(%rsp)
  0x0000000116b4a6c2: mov    %r10,0x28(%rsp)
  0x0000000116b4a6c7: mov    %r11,0x20(%rsp)
  0x0000000116b4a6cc: mov    %r12,0x18(%rsp)
  0x0000000116b4a6d1: mov    %r13,0x10(%rsp)
  0x0000000116b4a6d6: mov    %r14,0x8(%rsp)
  0x0000000116b4a6db: mov    %r15,(%rsp)
  0x0000000116b4a6df: movabs $0x10cc2363b,%rdi
  0x0000000116b4a6e9: movabs $0x116b4a689,%rsi
  0x0000000116b4a6f3: mov    %rsp,%rdx
  0x0000000116b4a6f6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a6fa: callq  0x000000010c7dd830
  0x0000000116b4a6ff: hlt    
  0x0000000116b4a700: push   %r10
  0x0000000116b4a702: cmp    -0x9d03e59(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4a709: je     0x0000000116b4a786
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4a70f: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a714: sub    $0x80,%rsp
  0x0000000116b4a71b: mov    %rax,0x78(%rsp)
  0x0000000116b4a720: mov    %rcx,0x70(%rsp)
  0x0000000116b4a725: mov    %rdx,0x68(%rsp)
  0x0000000116b4a72a: mov    %rbx,0x60(%rsp)
  0x0000000116b4a72f: mov    %rbp,0x50(%rsp)
  0x0000000116b4a734: mov    %rsi,0x48(%rsp)
  0x0000000116b4a739: mov    %rdi,0x40(%rsp)
  0x0000000116b4a73e: mov    %r8,0x38(%rsp)
  0x0000000116b4a743: mov    %r9,0x30(%rsp)
  0x0000000116b4a748: mov    %r10,0x28(%rsp)
  0x0000000116b4a74d: mov    %r11,0x20(%rsp)
  0x0000000116b4a752: mov    %r12,0x18(%rsp)
  0x0000000116b4a757: mov    %r13,0x10(%rsp)
  0x0000000116b4a75c: mov    %r14,0x8(%rsp)
  0x0000000116b4a761: mov    %r15,(%rsp)
  0x0000000116b4a765: movabs $0x10cc63f17,%rdi
  0x0000000116b4a76f: movabs $0x116b4a70f,%rsi
  0x0000000116b4a779: mov    %rsp,%rdx
  0x0000000116b4a77c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a780: callq  0x000000010c7dd830
  0x0000000116b4a785: hlt    
  0x0000000116b4a786: pop    %r10
  0x0000000116b4a788: mov    %r15,%rdi
  0x0000000116b4a78b: mov    %rbp,0x290(%r15)
  0x0000000116b4a792: mov    %rax,0x280(%r15)
  0x0000000116b4a799: test   $0xf,%esp
  0x0000000116b4a79f: je     0x0000000116b4a7b7
  0x0000000116b4a7a5: sub    $0x8,%rsp
  0x0000000116b4a7a9: callq  0x000000010c5881a0
  0x0000000116b4a7ae: add    $0x8,%rsp
  0x0000000116b4a7b2: jmpq   0x0000000116b4a7bc
  0x0000000116b4a7b7: callq  0x000000010c5881a0
  0x0000000116b4a7bc: push   %rax
  0x0000000116b4a7bd: push   %rdi
  0x0000000116b4a7be: push   %rsi
  0x0000000116b4a7bf: push   %rdx
  0x0000000116b4a7c0: push   %rcx
  0x0000000116b4a7c1: push   %r8
  0x0000000116b4a7c3: push   %r9
  0x0000000116b4a7c5: push   %r10
  0x0000000116b4a7c7: mov    %rsp,%r10
  0x0000000116b4a7ca: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a7ce: push   %r10
  0x0000000116b4a7d0: push   %r11
  0x0000000116b4a7d2: mov    $0x109,%edi
  0x0000000116b4a7d7: movabs $0x7ff815049fd5,%r10
  0x0000000116b4a7e1: callq  *%r10
  0x0000000116b4a7e4: pop    %r11
  0x0000000116b4a7e6: pop    %rsp
  0x0000000116b4a7e7: pop    %r10
  0x0000000116b4a7e9: pop    %r9
  0x0000000116b4a7eb: pop    %r8
  0x0000000116b4a7ed: pop    %rcx
  0x0000000116b4a7ee: pop    %rdx
  0x0000000116b4a7ef: pop    %rsi
  0x0000000116b4a7f0: pop    %rdi
  0x0000000116b4a7f1: cmp    %rax,%r15
  0x0000000116b4a7f4: je     0x0000000116b4a871
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4a7fa: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a7ff: sub    $0x80,%rsp
  0x0000000116b4a806: mov    %rax,0x78(%rsp)
  0x0000000116b4a80b: mov    %rcx,0x70(%rsp)
  0x0000000116b4a810: mov    %rdx,0x68(%rsp)
  0x0000000116b4a815: mov    %rbx,0x60(%rsp)
  0x0000000116b4a81a: mov    %rbp,0x50(%rsp)
  0x0000000116b4a81f: mov    %rsi,0x48(%rsp)
  0x0000000116b4a824: mov    %rdi,0x40(%rsp)
  0x0000000116b4a829: mov    %r8,0x38(%rsp)
  0x0000000116b4a82e: mov    %r9,0x30(%rsp)
  0x0000000116b4a833: mov    %r10,0x28(%rsp)
  0x0000000116b4a838: mov    %r11,0x20(%rsp)
  0x0000000116b4a83d: mov    %r12,0x18(%rsp)
  0x0000000116b4a842: mov    %r13,0x10(%rsp)
  0x0000000116b4a847: mov    %r14,0x8(%rsp)
  0x0000000116b4a84c: mov    %r15,(%rsp)
  0x0000000116b4a850: movabs $0x10cc6405e,%rdi
  0x0000000116b4a85a: movabs $0x116b4a7fa,%rsi
  0x0000000116b4a864: mov    %rsp,%rdx
  0x0000000116b4a867: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a86b: callq  0x000000010c7dd830
  0x0000000116b4a870: hlt    
  0x0000000116b4a871: pop    %rax
  0x0000000116b4a872: movabs $0x0,%r10
  0x0000000116b4a87c: mov    %r10,0x280(%r15)
  0x0000000116b4a883: movabs $0x0,%r10
  0x0000000116b4a88d: mov    %r10,0x290(%r15)
  0x0000000116b4a894: movabs $0x0,%r10
  0x0000000116b4a89e: mov    %r10,0x288(%r15)
  0x0000000116b4a8a5: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a8ad: je     0x0000000116b4a8b8
  0x0000000116b4a8b3: jmpq   0x0000000116b30420
  0x0000000116b4a8b8: mov    -0x38(%rbp),%r13
  0x0000000116b4a8bc: mov    -0x30(%rbp),%r14
  0x0000000116b4a8c0: retq   
  0x0000000116b4a8c1: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a8c6: sub    $0x80,%rsp
  0x0000000116b4a8cd: mov    %rax,0x78(%rsp)
  0x0000000116b4a8d2: mov    %rcx,0x70(%rsp)
  0x0000000116b4a8d7: mov    %rdx,0x68(%rsp)
  0x0000000116b4a8dc: mov    %rbx,0x60(%rsp)
  0x0000000116b4a8e1: mov    %rbp,0x50(%rsp)
  0x0000000116b4a8e6: mov    %rsi,0x48(%rsp)
  0x0000000116b4a8eb: mov    %rdi,0x40(%rsp)
  0x0000000116b4a8f0: mov    %r8,0x38(%rsp)
  0x0000000116b4a8f5: mov    %r9,0x30(%rsp)
  0x0000000116b4a8fa: mov    %r10,0x28(%rsp)
  0x0000000116b4a8ff: mov    %r11,0x20(%rsp)
  0x0000000116b4a904: mov    %r12,0x18(%rsp)
  0x0000000116b4a909: mov    %r13,0x10(%rsp)
  0x0000000116b4a90e: mov    %r14,0x8(%rsp)
  0x0000000116b4a913: mov    %r15,(%rsp)
  0x0000000116b4a917: movabs $0x10cb763be,%rdi
  0x0000000116b4a921: movabs $0x116b4a8c1,%rsi
  0x0000000116b4a92b: mov    %rsp,%rdx
  0x0000000116b4a92e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a932: callq  0x000000010c7dd830
  0x0000000116b4a937: hlt    
  0x0000000116b4a938: movzbl 0x7(%r13),%ebx
  0x0000000116b4a93d: add    $0x7,%r13
  0x0000000116b4a941: movabs $0x10ce39680,%r10
  0x0000000116b4a94b: jmpq   *(%r10,%rbx,8)
  0x0000000116b4a94f: movq   $0x0,-0x10(%rbp)
  0x0000000116b4a957: mov    -0x38(%rbp),%r13
  0x0000000116b4a95b: mov    -0x30(%rbp),%r14
  0x0000000116b4a95f: cmpq   $0x0,0x8(%r15)
  0x0000000116b4a967: je     0x0000000116b4ac3d
  0x0000000116b4a96d: callq  0x0000000116b4a977
  0x0000000116b4a972: jmpq   0x0000000116b4abc6
  0x0000000116b4a977: lea    0x8(%rsp),%rax
  0x0000000116b4a97c: mov    %r13,-0x38(%rbp)
  0x0000000116b4a980: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4a988: je     0x0000000116b4aa05
  0x0000000116b4a98e: mov    %rsp,-0x28(%rsp)
  0x0000000116b4a993: sub    $0x80,%rsp
  0x0000000116b4a99a: mov    %rax,0x78(%rsp)
  0x0000000116b4a99f: mov    %rcx,0x70(%rsp)
  0x0000000116b4a9a4: mov    %rdx,0x68(%rsp)
  0x0000000116b4a9a9: mov    %rbx,0x60(%rsp)
  0x0000000116b4a9ae: mov    %rbp,0x50(%rsp)
  0x0000000116b4a9b3: mov    %rsi,0x48(%rsp)
  0x0000000116b4a9b8: mov    %rdi,0x40(%rsp)
  0x0000000116b4a9bd: mov    %r8,0x38(%rsp)
  0x0000000116b4a9c2: mov    %r9,0x30(%rsp)
  0x0000000116b4a9c7: mov    %r10,0x28(%rsp)
  0x0000000116b4a9cc: mov    %r11,0x20(%rsp)
  0x0000000116b4a9d1: mov    %r12,0x18(%rsp)
  0x0000000116b4a9d6: mov    %r13,0x10(%rsp)
  0x0000000116b4a9db: mov    %r14,0x8(%rsp)
  0x0000000116b4a9e0: mov    %r15,(%rsp)
  0x0000000116b4a9e4: movabs $0x10cc2363b,%rdi
  0x0000000116b4a9ee: movabs $0x116b4a98e,%rsi
  0x0000000116b4a9f8: mov    %rsp,%rdx
  0x0000000116b4a9fb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4a9ff: callq  0x000000010c7dd830
  0x0000000116b4aa04: hlt    
  0x0000000116b4aa05: push   %r10
  0x0000000116b4aa07: cmp    -0x9d0415e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4aa0e: je     0x0000000116b4aa8b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4aa14: mov    %rsp,-0x28(%rsp)
  0x0000000116b4aa19: sub    $0x80,%rsp
  0x0000000116b4aa20: mov    %rax,0x78(%rsp)
  0x0000000116b4aa25: mov    %rcx,0x70(%rsp)
  0x0000000116b4aa2a: mov    %rdx,0x68(%rsp)
  0x0000000116b4aa2f: mov    %rbx,0x60(%rsp)
  0x0000000116b4aa34: mov    %rbp,0x50(%rsp)
  0x0000000116b4aa39: mov    %rsi,0x48(%rsp)
  0x0000000116b4aa3e: mov    %rdi,0x40(%rsp)
  0x0000000116b4aa43: mov    %r8,0x38(%rsp)
  0x0000000116b4aa48: mov    %r9,0x30(%rsp)
  0x0000000116b4aa4d: mov    %r10,0x28(%rsp)
  0x0000000116b4aa52: mov    %r11,0x20(%rsp)
  0x0000000116b4aa57: mov    %r12,0x18(%rsp)
  0x0000000116b4aa5c: mov    %r13,0x10(%rsp)
  0x0000000116b4aa61: mov    %r14,0x8(%rsp)
  0x0000000116b4aa66: mov    %r15,(%rsp)
  0x0000000116b4aa6a: movabs $0x10cc63f17,%rdi
  0x0000000116b4aa74: movabs $0x116b4aa14,%rsi
  0x0000000116b4aa7e: mov    %rsp,%rdx
  0x0000000116b4aa81: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4aa85: callq  0x000000010c7dd830
  0x0000000116b4aa8a: hlt    
  0x0000000116b4aa8b: pop    %r10
  0x0000000116b4aa8d: mov    %r15,%rdi
  0x0000000116b4aa90: mov    %rbp,0x290(%r15)
  0x0000000116b4aa97: mov    %rax,0x280(%r15)
  0x0000000116b4aa9e: test   $0xf,%esp
  0x0000000116b4aaa4: je     0x0000000116b4aabc
  0x0000000116b4aaaa: sub    $0x8,%rsp
  0x0000000116b4aaae: callq  0x000000010c5881a0
  0x0000000116b4aab3: add    $0x8,%rsp
  0x0000000116b4aab7: jmpq   0x0000000116b4aac1
  0x0000000116b4aabc: callq  0x000000010c5881a0
  0x0000000116b4aac1: push   %rax
  0x0000000116b4aac2: push   %rdi
  0x0000000116b4aac3: push   %rsi
  0x0000000116b4aac4: push   %rdx
  0x0000000116b4aac5: push   %rcx
  0x0000000116b4aac6: push   %r8
  0x0000000116b4aac8: push   %r9
  0x0000000116b4aaca: push   %r10
  0x0000000116b4aacc: mov    %rsp,%r10
  0x0000000116b4aacf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4aad3: push   %r10
  0x0000000116b4aad5: push   %r11
  0x0000000116b4aad7: mov    $0x109,%edi
  0x0000000116b4aadc: movabs $0x7ff815049fd5,%r10
  0x0000000116b4aae6: callq  *%r10
  0x0000000116b4aae9: pop    %r11
  0x0000000116b4aaeb: pop    %rsp
  0x0000000116b4aaec: pop    %r10
  0x0000000116b4aaee: pop    %r9
  0x0000000116b4aaf0: pop    %r8
  0x0000000116b4aaf2: pop    %rcx
  0x0000000116b4aaf3: pop    %rdx
  0x0000000116b4aaf4: pop    %rsi
  0x0000000116b4aaf5: pop    %rdi
  0x0000000116b4aaf6: cmp    %rax,%r15
  0x0000000116b4aaf9: je     0x0000000116b4ab76
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4aaff: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ab04: sub    $0x80,%rsp
  0x0000000116b4ab0b: mov    %rax,0x78(%rsp)
  0x0000000116b4ab10: mov    %rcx,0x70(%rsp)
  0x0000000116b4ab15: mov    %rdx,0x68(%rsp)
  0x0000000116b4ab1a: mov    %rbx,0x60(%rsp)
  0x0000000116b4ab1f: mov    %rbp,0x50(%rsp)
  0x0000000116b4ab24: mov    %rsi,0x48(%rsp)
  0x0000000116b4ab29: mov    %rdi,0x40(%rsp)
  0x0000000116b4ab2e: mov    %r8,0x38(%rsp)
  0x0000000116b4ab33: mov    %r9,0x30(%rsp)
  0x0000000116b4ab38: mov    %r10,0x28(%rsp)
  0x0000000116b4ab3d: mov    %r11,0x20(%rsp)
  0x0000000116b4ab42: mov    %r12,0x18(%rsp)
  0x0000000116b4ab47: mov    %r13,0x10(%rsp)
  0x0000000116b4ab4c: mov    %r14,0x8(%rsp)
  0x0000000116b4ab51: mov    %r15,(%rsp)
  0x0000000116b4ab55: movabs $0x10cc6405e,%rdi
  0x0000000116b4ab5f: movabs $0x116b4aaff,%rsi
  0x0000000116b4ab69: mov    %rsp,%rdx
  0x0000000116b4ab6c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ab70: callq  0x000000010c7dd830
  0x0000000116b4ab75: hlt    
  0x0000000116b4ab76: pop    %rax
  0x0000000116b4ab77: movabs $0x0,%r10
  0x0000000116b4ab81: mov    %r10,0x280(%r15)
  0x0000000116b4ab88: movabs $0x0,%r10
  0x0000000116b4ab92: mov    %r10,0x290(%r15)
  0x0000000116b4ab99: movabs $0x0,%r10
  0x0000000116b4aba3: mov    %r10,0x288(%r15)
  0x0000000116b4abaa: cmpq   $0x0,0x8(%r15)
  0x0000000116b4abb2: je     0x0000000116b4abbd
  0x0000000116b4abb8: jmpq   0x0000000116b30420
  0x0000000116b4abbd: mov    -0x38(%rbp),%r13
  0x0000000116b4abc1: mov    -0x30(%rbp),%r14
  0x0000000116b4abc5: retq   
  0x0000000116b4abc6: mov    %rsp,-0x28(%rsp)
  0x0000000116b4abcb: sub    $0x80,%rsp
  0x0000000116b4abd2: mov    %rax,0x78(%rsp)
  0x0000000116b4abd7: mov    %rcx,0x70(%rsp)
  0x0000000116b4abdc: mov    %rdx,0x68(%rsp)
  0x0000000116b4abe1: mov    %rbx,0x60(%rsp)
  0x0000000116b4abe6: mov    %rbp,0x50(%rsp)
  0x0000000116b4abeb: mov    %rsi,0x48(%rsp)
  0x0000000116b4abf0: mov    %rdi,0x40(%rsp)
  0x0000000116b4abf5: mov    %r8,0x38(%rsp)
  0x0000000116b4abfa: mov    %r9,0x30(%rsp)
  0x0000000116b4abff: mov    %r10,0x28(%rsp)
  0x0000000116b4ac04: mov    %r11,0x20(%rsp)
  0x0000000116b4ac09: mov    %r12,0x18(%rsp)
  0x0000000116b4ac0e: mov    %r13,0x10(%rsp)
  0x0000000116b4ac13: mov    %r14,0x8(%rsp)
  0x0000000116b4ac18: mov    %r15,(%rsp)
  0x0000000116b4ac1c: movabs $0x10cb763be,%rdi
  0x0000000116b4ac26: movabs $0x116b4abc6,%rsi
  0x0000000116b4ac30: mov    %rsp,%rdx
  0x0000000116b4ac33: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ac37: callq  0x000000010c7dd830
  0x0000000116b4ac3c: hlt    
  0x0000000116b4ac3d: movzbl 0x7(%r13),%ebx
  0x0000000116b4ac42: add    $0x7,%r13
  0x0000000116b4ac46: movabs $0x10ce39e80,%r10
  0x0000000116b4ac50: jmpq   *(%r10,%rbx,8)
  0x0000000116b4ac54: movq   $0x0,-0x10(%rbp)
  0x0000000116b4ac5c: mov    -0x38(%rbp),%r13
  0x0000000116b4ac60: mov    -0x30(%rbp),%r14
  0x0000000116b4ac64: cmpq   $0x0,0x8(%r15)
  0x0000000116b4ac6c: je     0x0000000116b4af42
  0x0000000116b4ac72: callq  0x0000000116b4ac7c
  0x0000000116b4ac77: jmpq   0x0000000116b4aecb
  0x0000000116b4ac7c: lea    0x8(%rsp),%rax
  0x0000000116b4ac81: mov    %r13,-0x38(%rbp)
  0x0000000116b4ac85: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4ac8d: je     0x0000000116b4ad0a
  0x0000000116b4ac93: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ac98: sub    $0x80,%rsp
  0x0000000116b4ac9f: mov    %rax,0x78(%rsp)
  0x0000000116b4aca4: mov    %rcx,0x70(%rsp)
  0x0000000116b4aca9: mov    %rdx,0x68(%rsp)
  0x0000000116b4acae: mov    %rbx,0x60(%rsp)
  0x0000000116b4acb3: mov    %rbp,0x50(%rsp)
  0x0000000116b4acb8: mov    %rsi,0x48(%rsp)
  0x0000000116b4acbd: mov    %rdi,0x40(%rsp)
  0x0000000116b4acc2: mov    %r8,0x38(%rsp)
  0x0000000116b4acc7: mov    %r9,0x30(%rsp)
  0x0000000116b4accc: mov    %r10,0x28(%rsp)
  0x0000000116b4acd1: mov    %r11,0x20(%rsp)
  0x0000000116b4acd6: mov    %r12,0x18(%rsp)
  0x0000000116b4acdb: mov    %r13,0x10(%rsp)
  0x0000000116b4ace0: mov    %r14,0x8(%rsp)
  0x0000000116b4ace5: mov    %r15,(%rsp)
  0x0000000116b4ace9: movabs $0x10cc2363b,%rdi
  0x0000000116b4acf3: movabs $0x116b4ac93,%rsi
  0x0000000116b4acfd: mov    %rsp,%rdx
  0x0000000116b4ad00: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ad04: callq  0x000000010c7dd830
  0x0000000116b4ad09: hlt    
  0x0000000116b4ad0a: push   %r10
  0x0000000116b4ad0c: cmp    -0x9d04463(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4ad13: je     0x0000000116b4ad90
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4ad19: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ad1e: sub    $0x80,%rsp
  0x0000000116b4ad25: mov    %rax,0x78(%rsp)
  0x0000000116b4ad2a: mov    %rcx,0x70(%rsp)
  0x0000000116b4ad2f: mov    %rdx,0x68(%rsp)
  0x0000000116b4ad34: mov    %rbx,0x60(%rsp)
  0x0000000116b4ad39: mov    %rbp,0x50(%rsp)
  0x0000000116b4ad3e: mov    %rsi,0x48(%rsp)
  0x0000000116b4ad43: mov    %rdi,0x40(%rsp)
  0x0000000116b4ad48: mov    %r8,0x38(%rsp)
  0x0000000116b4ad4d: mov    %r9,0x30(%rsp)
  0x0000000116b4ad52: mov    %r10,0x28(%rsp)
  0x0000000116b4ad57: mov    %r11,0x20(%rsp)
  0x0000000116b4ad5c: mov    %r12,0x18(%rsp)
  0x0000000116b4ad61: mov    %r13,0x10(%rsp)
  0x0000000116b4ad66: mov    %r14,0x8(%rsp)
  0x0000000116b4ad6b: mov    %r15,(%rsp)
  0x0000000116b4ad6f: movabs $0x10cc63f17,%rdi
  0x0000000116b4ad79: movabs $0x116b4ad19,%rsi
  0x0000000116b4ad83: mov    %rsp,%rdx
  0x0000000116b4ad86: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ad8a: callq  0x000000010c7dd830
  0x0000000116b4ad8f: hlt    
  0x0000000116b4ad90: pop    %r10
  0x0000000116b4ad92: mov    %r15,%rdi
  0x0000000116b4ad95: mov    %rbp,0x290(%r15)
  0x0000000116b4ad9c: mov    %rax,0x280(%r15)
  0x0000000116b4ada3: test   $0xf,%esp
  0x0000000116b4ada9: je     0x0000000116b4adc1
  0x0000000116b4adaf: sub    $0x8,%rsp
  0x0000000116b4adb3: callq  0x000000010c5881a0
  0x0000000116b4adb8: add    $0x8,%rsp
  0x0000000116b4adbc: jmpq   0x0000000116b4adc6
  0x0000000116b4adc1: callq  0x000000010c5881a0
  0x0000000116b4adc6: push   %rax
  0x0000000116b4adc7: push   %rdi
  0x0000000116b4adc8: push   %rsi
  0x0000000116b4adc9: push   %rdx
  0x0000000116b4adca: push   %rcx
  0x0000000116b4adcb: push   %r8
  0x0000000116b4adcd: push   %r9
  0x0000000116b4adcf: push   %r10
  0x0000000116b4add1: mov    %rsp,%r10
  0x0000000116b4add4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4add8: push   %r10
  0x0000000116b4adda: push   %r11
  0x0000000116b4addc: mov    $0x109,%edi
  0x0000000116b4ade1: movabs $0x7ff815049fd5,%r10
  0x0000000116b4adeb: callq  *%r10
  0x0000000116b4adee: pop    %r11
  0x0000000116b4adf0: pop    %rsp
  0x0000000116b4adf1: pop    %r10
  0x0000000116b4adf3: pop    %r9
  0x0000000116b4adf5: pop    %r8
  0x0000000116b4adf7: pop    %rcx
  0x0000000116b4adf8: pop    %rdx
  0x0000000116b4adf9: pop    %rsi
  0x0000000116b4adfa: pop    %rdi
  0x0000000116b4adfb: cmp    %rax,%r15
  0x0000000116b4adfe: je     0x0000000116b4ae7b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4ae04: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ae09: sub    $0x80,%rsp
  0x0000000116b4ae10: mov    %rax,0x78(%rsp)
  0x0000000116b4ae15: mov    %rcx,0x70(%rsp)
  0x0000000116b4ae1a: mov    %rdx,0x68(%rsp)
  0x0000000116b4ae1f: mov    %rbx,0x60(%rsp)
  0x0000000116b4ae24: mov    %rbp,0x50(%rsp)
  0x0000000116b4ae29: mov    %rsi,0x48(%rsp)
  0x0000000116b4ae2e: mov    %rdi,0x40(%rsp)
  0x0000000116b4ae33: mov    %r8,0x38(%rsp)
  0x0000000116b4ae38: mov    %r9,0x30(%rsp)
  0x0000000116b4ae3d: mov    %r10,0x28(%rsp)
  0x0000000116b4ae42: mov    %r11,0x20(%rsp)
  0x0000000116b4ae47: mov    %r12,0x18(%rsp)
  0x0000000116b4ae4c: mov    %r13,0x10(%rsp)
  0x0000000116b4ae51: mov    %r14,0x8(%rsp)
  0x0000000116b4ae56: mov    %r15,(%rsp)
  0x0000000116b4ae5a: movabs $0x10cc6405e,%rdi
  0x0000000116b4ae64: movabs $0x116b4ae04,%rsi
  0x0000000116b4ae6e: mov    %rsp,%rdx
  0x0000000116b4ae71: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ae75: callq  0x000000010c7dd830
  0x0000000116b4ae7a: hlt    
  0x0000000116b4ae7b: pop    %rax
  0x0000000116b4ae7c: movabs $0x0,%r10
  0x0000000116b4ae86: mov    %r10,0x280(%r15)
  0x0000000116b4ae8d: movabs $0x0,%r10
  0x0000000116b4ae97: mov    %r10,0x290(%r15)
  0x0000000116b4ae9e: movabs $0x0,%r10
  0x0000000116b4aea8: mov    %r10,0x288(%r15)
  0x0000000116b4aeaf: cmpq   $0x0,0x8(%r15)
  0x0000000116b4aeb7: je     0x0000000116b4aec2
  0x0000000116b4aebd: jmpq   0x0000000116b30420
  0x0000000116b4aec2: mov    -0x38(%rbp),%r13
  0x0000000116b4aec6: mov    -0x30(%rbp),%r14
  0x0000000116b4aeca: retq   
  0x0000000116b4aecb: mov    %rsp,-0x28(%rsp)
  0x0000000116b4aed0: sub    $0x80,%rsp
  0x0000000116b4aed7: mov    %rax,0x78(%rsp)
  0x0000000116b4aedc: mov    %rcx,0x70(%rsp)
  0x0000000116b4aee1: mov    %rdx,0x68(%rsp)
  0x0000000116b4aee6: mov    %rbx,0x60(%rsp)
  0x0000000116b4aeeb: mov    %rbp,0x50(%rsp)
  0x0000000116b4aef0: mov    %rsi,0x48(%rsp)
  0x0000000116b4aef5: mov    %rdi,0x40(%rsp)
  0x0000000116b4aefa: mov    %r8,0x38(%rsp)
  0x0000000116b4aeff: mov    %r9,0x30(%rsp)
  0x0000000116b4af04: mov    %r10,0x28(%rsp)
  0x0000000116b4af09: mov    %r11,0x20(%rsp)
  0x0000000116b4af0e: mov    %r12,0x18(%rsp)
  0x0000000116b4af13: mov    %r13,0x10(%rsp)
  0x0000000116b4af18: mov    %r14,0x8(%rsp)
  0x0000000116b4af1d: mov    %r15,(%rsp)
  0x0000000116b4af21: movabs $0x10cb763be,%rdi
  0x0000000116b4af2b: movabs $0x116b4aecb,%rsi
  0x0000000116b4af35: mov    %rsp,%rdx
  0x0000000116b4af38: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4af3c: callq  0x000000010c7dd830
  0x0000000116b4af41: hlt    
  0x0000000116b4af42: movzbl 0x7(%r13),%ebx
  0x0000000116b4af47: add    $0x7,%r13
  0x0000000116b4af4b: movabs $0x10ce3a680,%r10
  0x0000000116b4af55: jmpq   *(%r10,%rbx,8)
  0x0000000116b4af59: movq   $0x0,-0x10(%rbp)
  0x0000000116b4af61: mov    -0x38(%rbp),%r13
  0x0000000116b4af65: mov    -0x30(%rbp),%r14
  0x0000000116b4af69: cmpq   $0x0,0x8(%r15)
  0x0000000116b4af71: je     0x0000000116b4b247
  0x0000000116b4af77: callq  0x0000000116b4af81
  0x0000000116b4af7c: jmpq   0x0000000116b4b1d0
  0x0000000116b4af81: lea    0x8(%rsp),%rax
  0x0000000116b4af86: mov    %r13,-0x38(%rbp)
  0x0000000116b4af8a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4af92: je     0x0000000116b4b00f
  0x0000000116b4af98: mov    %rsp,-0x28(%rsp)
  0x0000000116b4af9d: sub    $0x80,%rsp
  0x0000000116b4afa4: mov    %rax,0x78(%rsp)
  0x0000000116b4afa9: mov    %rcx,0x70(%rsp)
  0x0000000116b4afae: mov    %rdx,0x68(%rsp)
  0x0000000116b4afb3: mov    %rbx,0x60(%rsp)
  0x0000000116b4afb8: mov    %rbp,0x50(%rsp)
  0x0000000116b4afbd: mov    %rsi,0x48(%rsp)
  0x0000000116b4afc2: mov    %rdi,0x40(%rsp)
  0x0000000116b4afc7: mov    %r8,0x38(%rsp)
  0x0000000116b4afcc: mov    %r9,0x30(%rsp)
  0x0000000116b4afd1: mov    %r10,0x28(%rsp)
  0x0000000116b4afd6: mov    %r11,0x20(%rsp)
  0x0000000116b4afdb: mov    %r12,0x18(%rsp)
  0x0000000116b4afe0: mov    %r13,0x10(%rsp)
  0x0000000116b4afe5: mov    %r14,0x8(%rsp)
  0x0000000116b4afea: mov    %r15,(%rsp)
  0x0000000116b4afee: movabs $0x10cc2363b,%rdi
  0x0000000116b4aff8: movabs $0x116b4af98,%rsi
  0x0000000116b4b002: mov    %rsp,%rdx
  0x0000000116b4b005: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b009: callq  0x000000010c7dd830
  0x0000000116b4b00e: hlt    
  0x0000000116b4b00f: push   %r10
  0x0000000116b4b011: cmp    -0x9d04768(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4b018: je     0x0000000116b4b095
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4b01e: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b023: sub    $0x80,%rsp
  0x0000000116b4b02a: mov    %rax,0x78(%rsp)
  0x0000000116b4b02f: mov    %rcx,0x70(%rsp)
  0x0000000116b4b034: mov    %rdx,0x68(%rsp)
  0x0000000116b4b039: mov    %rbx,0x60(%rsp)
  0x0000000116b4b03e: mov    %rbp,0x50(%rsp)
  0x0000000116b4b043: mov    %rsi,0x48(%rsp)
  0x0000000116b4b048: mov    %rdi,0x40(%rsp)
  0x0000000116b4b04d: mov    %r8,0x38(%rsp)
  0x0000000116b4b052: mov    %r9,0x30(%rsp)
  0x0000000116b4b057: mov    %r10,0x28(%rsp)
  0x0000000116b4b05c: mov    %r11,0x20(%rsp)
  0x0000000116b4b061: mov    %r12,0x18(%rsp)
  0x0000000116b4b066: mov    %r13,0x10(%rsp)
  0x0000000116b4b06b: mov    %r14,0x8(%rsp)
  0x0000000116b4b070: mov    %r15,(%rsp)
  0x0000000116b4b074: movabs $0x10cc63f17,%rdi
  0x0000000116b4b07e: movabs $0x116b4b01e,%rsi
  0x0000000116b4b088: mov    %rsp,%rdx
  0x0000000116b4b08b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b08f: callq  0x000000010c7dd830
  0x0000000116b4b094: hlt    
  0x0000000116b4b095: pop    %r10
  0x0000000116b4b097: mov    %r15,%rdi
  0x0000000116b4b09a: mov    %rbp,0x290(%r15)
  0x0000000116b4b0a1: mov    %rax,0x280(%r15)
  0x0000000116b4b0a8: test   $0xf,%esp
  0x0000000116b4b0ae: je     0x0000000116b4b0c6
  0x0000000116b4b0b4: sub    $0x8,%rsp
  0x0000000116b4b0b8: callq  0x000000010c5881a0
  0x0000000116b4b0bd: add    $0x8,%rsp
  0x0000000116b4b0c1: jmpq   0x0000000116b4b0cb
  0x0000000116b4b0c6: callq  0x000000010c5881a0
  0x0000000116b4b0cb: push   %rax
  0x0000000116b4b0cc: push   %rdi
  0x0000000116b4b0cd: push   %rsi
  0x0000000116b4b0ce: push   %rdx
  0x0000000116b4b0cf: push   %rcx
  0x0000000116b4b0d0: push   %r8
  0x0000000116b4b0d2: push   %r9
  0x0000000116b4b0d4: push   %r10
  0x0000000116b4b0d6: mov    %rsp,%r10
  0x0000000116b4b0d9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b0dd: push   %r10
  0x0000000116b4b0df: push   %r11
  0x0000000116b4b0e1: mov    $0x109,%edi
  0x0000000116b4b0e6: movabs $0x7ff815049fd5,%r10
  0x0000000116b4b0f0: callq  *%r10
  0x0000000116b4b0f3: pop    %r11
  0x0000000116b4b0f5: pop    %rsp
  0x0000000116b4b0f6: pop    %r10
  0x0000000116b4b0f8: pop    %r9
  0x0000000116b4b0fa: pop    %r8
  0x0000000116b4b0fc: pop    %rcx
  0x0000000116b4b0fd: pop    %rdx
  0x0000000116b4b0fe: pop    %rsi
  0x0000000116b4b0ff: pop    %rdi
  0x0000000116b4b100: cmp    %rax,%r15
  0x0000000116b4b103: je     0x0000000116b4b180
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4b109: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b10e: sub    $0x80,%rsp
  0x0000000116b4b115: mov    %rax,0x78(%rsp)
  0x0000000116b4b11a: mov    %rcx,0x70(%rsp)
  0x0000000116b4b11f: mov    %rdx,0x68(%rsp)
  0x0000000116b4b124: mov    %rbx,0x60(%rsp)
  0x0000000116b4b129: mov    %rbp,0x50(%rsp)
  0x0000000116b4b12e: mov    %rsi,0x48(%rsp)
  0x0000000116b4b133: mov    %rdi,0x40(%rsp)
  0x0000000116b4b138: mov    %r8,0x38(%rsp)
  0x0000000116b4b13d: mov    %r9,0x30(%rsp)
  0x0000000116b4b142: mov    %r10,0x28(%rsp)
  0x0000000116b4b147: mov    %r11,0x20(%rsp)
  0x0000000116b4b14c: mov    %r12,0x18(%rsp)
  0x0000000116b4b151: mov    %r13,0x10(%rsp)
  0x0000000116b4b156: mov    %r14,0x8(%rsp)
  0x0000000116b4b15b: mov    %r15,(%rsp)
  0x0000000116b4b15f: movabs $0x10cc6405e,%rdi
  0x0000000116b4b169: movabs $0x116b4b109,%rsi
  0x0000000116b4b173: mov    %rsp,%rdx
  0x0000000116b4b176: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b17a: callq  0x000000010c7dd830
  0x0000000116b4b17f: hlt    
  0x0000000116b4b180: pop    %rax
  0x0000000116b4b181: movabs $0x0,%r10
  0x0000000116b4b18b: mov    %r10,0x280(%r15)
  0x0000000116b4b192: movabs $0x0,%r10
  0x0000000116b4b19c: mov    %r10,0x290(%r15)
  0x0000000116b4b1a3: movabs $0x0,%r10
  0x0000000116b4b1ad: mov    %r10,0x288(%r15)
  0x0000000116b4b1b4: cmpq   $0x0,0x8(%r15)
  0x0000000116b4b1bc: je     0x0000000116b4b1c7
  0x0000000116b4b1c2: jmpq   0x0000000116b30420
  0x0000000116b4b1c7: mov    -0x38(%rbp),%r13
  0x0000000116b4b1cb: mov    -0x30(%rbp),%r14
  0x0000000116b4b1cf: retq   
  0x0000000116b4b1d0: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b1d5: sub    $0x80,%rsp
  0x0000000116b4b1dc: mov    %rax,0x78(%rsp)
  0x0000000116b4b1e1: mov    %rcx,0x70(%rsp)
  0x0000000116b4b1e6: mov    %rdx,0x68(%rsp)
  0x0000000116b4b1eb: mov    %rbx,0x60(%rsp)
  0x0000000116b4b1f0: mov    %rbp,0x50(%rsp)
  0x0000000116b4b1f5: mov    %rsi,0x48(%rsp)
  0x0000000116b4b1fa: mov    %rdi,0x40(%rsp)
  0x0000000116b4b1ff: mov    %r8,0x38(%rsp)
  0x0000000116b4b204: mov    %r9,0x30(%rsp)
  0x0000000116b4b209: mov    %r10,0x28(%rsp)
  0x0000000116b4b20e: mov    %r11,0x20(%rsp)
  0x0000000116b4b213: mov    %r12,0x18(%rsp)
  0x0000000116b4b218: mov    %r13,0x10(%rsp)
  0x0000000116b4b21d: mov    %r14,0x8(%rsp)
  0x0000000116b4b222: mov    %r15,(%rsp)
  0x0000000116b4b226: movabs $0x10cb763be,%rdi
  0x0000000116b4b230: movabs $0x116b4b1d0,%rsi
  0x0000000116b4b23a: mov    %rsp,%rdx
  0x0000000116b4b23d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b241: callq  0x000000010c7dd830
  0x0000000116b4b246: hlt    
  0x0000000116b4b247: movzbl 0x7(%r13),%ebx
  0x0000000116b4b24c: add    $0x7,%r13
  0x0000000116b4b250: movabs $0x10ce3b680,%r10
  0x0000000116b4b25a: jmpq   *(%r10,%rbx,8)
  0x0000000116b4b25e: movq   $0x0,-0x10(%rbp)
  0x0000000116b4b266: mov    -0x38(%rbp),%r13
  0x0000000116b4b26a: mov    -0x30(%rbp),%r14
  0x0000000116b4b26e: cmpq   $0x0,0x8(%r15)
  0x0000000116b4b276: je     0x0000000116b4b54c
  0x0000000116b4b27c: callq  0x0000000116b4b286
  0x0000000116b4b281: jmpq   0x0000000116b4b4d5
  0x0000000116b4b286: lea    0x8(%rsp),%rax
  0x0000000116b4b28b: mov    %r13,-0x38(%rbp)
  0x0000000116b4b28f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4b297: je     0x0000000116b4b314
  0x0000000116b4b29d: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b2a2: sub    $0x80,%rsp
  0x0000000116b4b2a9: mov    %rax,0x78(%rsp)
  0x0000000116b4b2ae: mov    %rcx,0x70(%rsp)
  0x0000000116b4b2b3: mov    %rdx,0x68(%rsp)
  0x0000000116b4b2b8: mov    %rbx,0x60(%rsp)
  0x0000000116b4b2bd: mov    %rbp,0x50(%rsp)
  0x0000000116b4b2c2: mov    %rsi,0x48(%rsp)
  0x0000000116b4b2c7: mov    %rdi,0x40(%rsp)
  0x0000000116b4b2cc: mov    %r8,0x38(%rsp)
  0x0000000116b4b2d1: mov    %r9,0x30(%rsp)
  0x0000000116b4b2d6: mov    %r10,0x28(%rsp)
  0x0000000116b4b2db: mov    %r11,0x20(%rsp)
  0x0000000116b4b2e0: mov    %r12,0x18(%rsp)
  0x0000000116b4b2e5: mov    %r13,0x10(%rsp)
  0x0000000116b4b2ea: mov    %r14,0x8(%rsp)
  0x0000000116b4b2ef: mov    %r15,(%rsp)
  0x0000000116b4b2f3: movabs $0x10cc2363b,%rdi
  0x0000000116b4b2fd: movabs $0x116b4b29d,%rsi
  0x0000000116b4b307: mov    %rsp,%rdx
  0x0000000116b4b30a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b30e: callq  0x000000010c7dd830
  0x0000000116b4b313: hlt    
  0x0000000116b4b314: push   %r10
  0x0000000116b4b316: cmp    -0x9d04a6d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4b31d: je     0x0000000116b4b39a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4b323: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b328: sub    $0x80,%rsp
  0x0000000116b4b32f: mov    %rax,0x78(%rsp)
  0x0000000116b4b334: mov    %rcx,0x70(%rsp)
  0x0000000116b4b339: mov    %rdx,0x68(%rsp)
  0x0000000116b4b33e: mov    %rbx,0x60(%rsp)
  0x0000000116b4b343: mov    %rbp,0x50(%rsp)
  0x0000000116b4b348: mov    %rsi,0x48(%rsp)
  0x0000000116b4b34d: mov    %rdi,0x40(%rsp)
  0x0000000116b4b352: mov    %r8,0x38(%rsp)
  0x0000000116b4b357: mov    %r9,0x30(%rsp)
  0x0000000116b4b35c: mov    %r10,0x28(%rsp)
  0x0000000116b4b361: mov    %r11,0x20(%rsp)
  0x0000000116b4b366: mov    %r12,0x18(%rsp)
  0x0000000116b4b36b: mov    %r13,0x10(%rsp)
  0x0000000116b4b370: mov    %r14,0x8(%rsp)
  0x0000000116b4b375: mov    %r15,(%rsp)
  0x0000000116b4b379: movabs $0x10cc63f17,%rdi
  0x0000000116b4b383: movabs $0x116b4b323,%rsi
  0x0000000116b4b38d: mov    %rsp,%rdx
  0x0000000116b4b390: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b394: callq  0x000000010c7dd830
  0x0000000116b4b399: hlt    
  0x0000000116b4b39a: pop    %r10
  0x0000000116b4b39c: mov    %r15,%rdi
  0x0000000116b4b39f: mov    %rbp,0x290(%r15)
  0x0000000116b4b3a6: mov    %rax,0x280(%r15)
  0x0000000116b4b3ad: test   $0xf,%esp
  0x0000000116b4b3b3: je     0x0000000116b4b3cb
  0x0000000116b4b3b9: sub    $0x8,%rsp
  0x0000000116b4b3bd: callq  0x000000010c5881a0
  0x0000000116b4b3c2: add    $0x8,%rsp
  0x0000000116b4b3c6: jmpq   0x0000000116b4b3d0
  0x0000000116b4b3cb: callq  0x000000010c5881a0
  0x0000000116b4b3d0: push   %rax
  0x0000000116b4b3d1: push   %rdi
  0x0000000116b4b3d2: push   %rsi
  0x0000000116b4b3d3: push   %rdx
  0x0000000116b4b3d4: push   %rcx
  0x0000000116b4b3d5: push   %r8
  0x0000000116b4b3d7: push   %r9
  0x0000000116b4b3d9: push   %r10
  0x0000000116b4b3db: mov    %rsp,%r10
  0x0000000116b4b3de: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b3e2: push   %r10
  0x0000000116b4b3e4: push   %r11
  0x0000000116b4b3e6: mov    $0x109,%edi
  0x0000000116b4b3eb: movabs $0x7ff815049fd5,%r10
  0x0000000116b4b3f5: callq  *%r10
  0x0000000116b4b3f8: pop    %r11
  0x0000000116b4b3fa: pop    %rsp
  0x0000000116b4b3fb: pop    %r10
  0x0000000116b4b3fd: pop    %r9
  0x0000000116b4b3ff: pop    %r8
  0x0000000116b4b401: pop    %rcx
  0x0000000116b4b402: pop    %rdx
  0x0000000116b4b403: pop    %rsi
  0x0000000116b4b404: pop    %rdi
  0x0000000116b4b405: cmp    %rax,%r15
  0x0000000116b4b408: je     0x0000000116b4b485
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4b40e: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b413: sub    $0x80,%rsp
  0x0000000116b4b41a: mov    %rax,0x78(%rsp)
  0x0000000116b4b41f: mov    %rcx,0x70(%rsp)
  0x0000000116b4b424: mov    %rdx,0x68(%rsp)
  0x0000000116b4b429: mov    %rbx,0x60(%rsp)
  0x0000000116b4b42e: mov    %rbp,0x50(%rsp)
  0x0000000116b4b433: mov    %rsi,0x48(%rsp)
  0x0000000116b4b438: mov    %rdi,0x40(%rsp)
  0x0000000116b4b43d: mov    %r8,0x38(%rsp)
  0x0000000116b4b442: mov    %r9,0x30(%rsp)
  0x0000000116b4b447: mov    %r10,0x28(%rsp)
  0x0000000116b4b44c: mov    %r11,0x20(%rsp)
  0x0000000116b4b451: mov    %r12,0x18(%rsp)
  0x0000000116b4b456: mov    %r13,0x10(%rsp)
  0x0000000116b4b45b: mov    %r14,0x8(%rsp)
  0x0000000116b4b460: mov    %r15,(%rsp)
  0x0000000116b4b464: movabs $0x10cc6405e,%rdi
  0x0000000116b4b46e: movabs $0x116b4b40e,%rsi
  0x0000000116b4b478: mov    %rsp,%rdx
  0x0000000116b4b47b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b47f: callq  0x000000010c7dd830
  0x0000000116b4b484: hlt    
  0x0000000116b4b485: pop    %rax
  0x0000000116b4b486: movabs $0x0,%r10
  0x0000000116b4b490: mov    %r10,0x280(%r15)
  0x0000000116b4b497: movabs $0x0,%r10
  0x0000000116b4b4a1: mov    %r10,0x290(%r15)
  0x0000000116b4b4a8: movabs $0x0,%r10
  0x0000000116b4b4b2: mov    %r10,0x288(%r15)
  0x0000000116b4b4b9: cmpq   $0x0,0x8(%r15)
  0x0000000116b4b4c1: je     0x0000000116b4b4cc
  0x0000000116b4b4c7: jmpq   0x0000000116b30420
  0x0000000116b4b4cc: mov    -0x38(%rbp),%r13
  0x0000000116b4b4d0: mov    -0x30(%rbp),%r14
  0x0000000116b4b4d4: retq   
  0x0000000116b4b4d5: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b4da: sub    $0x80,%rsp
  0x0000000116b4b4e1: mov    %rax,0x78(%rsp)
  0x0000000116b4b4e6: mov    %rcx,0x70(%rsp)
  0x0000000116b4b4eb: mov    %rdx,0x68(%rsp)
  0x0000000116b4b4f0: mov    %rbx,0x60(%rsp)
  0x0000000116b4b4f5: mov    %rbp,0x50(%rsp)
  0x0000000116b4b4fa: mov    %rsi,0x48(%rsp)
  0x0000000116b4b4ff: mov    %rdi,0x40(%rsp)
  0x0000000116b4b504: mov    %r8,0x38(%rsp)
  0x0000000116b4b509: mov    %r9,0x30(%rsp)
  0x0000000116b4b50e: mov    %r10,0x28(%rsp)
  0x0000000116b4b513: mov    %r11,0x20(%rsp)
  0x0000000116b4b518: mov    %r12,0x18(%rsp)
  0x0000000116b4b51d: mov    %r13,0x10(%rsp)
  0x0000000116b4b522: mov    %r14,0x8(%rsp)
  0x0000000116b4b527: mov    %r15,(%rsp)
  0x0000000116b4b52b: movabs $0x10cb763be,%rdi
  0x0000000116b4b535: movabs $0x116b4b4d5,%rsi
  0x0000000116b4b53f: mov    %rsp,%rdx
  0x0000000116b4b542: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b546: callq  0x000000010c7dd830
  0x0000000116b4b54b: hlt    
  0x0000000116b4b54c: movzbl 0x8(%r13),%ebx
  0x0000000116b4b551: add    $0x8,%r13
  0x0000000116b4b555: movabs $0x10ce38e80,%r10
  0x0000000116b4b55f: jmpq   *(%r10,%rbx,8)
  0x0000000116b4b563: movq   $0x0,-0x10(%rbp)
  0x0000000116b4b56b: mov    -0x38(%rbp),%r13
  0x0000000116b4b56f: mov    -0x30(%rbp),%r14
  0x0000000116b4b573: cmpq   $0x0,0x8(%r15)
  0x0000000116b4b57b: je     0x0000000116b4b851
  0x0000000116b4b581: callq  0x0000000116b4b58b
  0x0000000116b4b586: jmpq   0x0000000116b4b7da
  0x0000000116b4b58b: lea    0x8(%rsp),%rax
  0x0000000116b4b590: mov    %r13,-0x38(%rbp)
  0x0000000116b4b594: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4b59c: je     0x0000000116b4b619
  0x0000000116b4b5a2: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b5a7: sub    $0x80,%rsp
  0x0000000116b4b5ae: mov    %rax,0x78(%rsp)
  0x0000000116b4b5b3: mov    %rcx,0x70(%rsp)
  0x0000000116b4b5b8: mov    %rdx,0x68(%rsp)
  0x0000000116b4b5bd: mov    %rbx,0x60(%rsp)
  0x0000000116b4b5c2: mov    %rbp,0x50(%rsp)
  0x0000000116b4b5c7: mov    %rsi,0x48(%rsp)
  0x0000000116b4b5cc: mov    %rdi,0x40(%rsp)
  0x0000000116b4b5d1: mov    %r8,0x38(%rsp)
  0x0000000116b4b5d6: mov    %r9,0x30(%rsp)
  0x0000000116b4b5db: mov    %r10,0x28(%rsp)
  0x0000000116b4b5e0: mov    %r11,0x20(%rsp)
  0x0000000116b4b5e5: mov    %r12,0x18(%rsp)
  0x0000000116b4b5ea: mov    %r13,0x10(%rsp)
  0x0000000116b4b5ef: mov    %r14,0x8(%rsp)
  0x0000000116b4b5f4: mov    %r15,(%rsp)
  0x0000000116b4b5f8: movabs $0x10cc2363b,%rdi
  0x0000000116b4b602: movabs $0x116b4b5a2,%rsi
  0x0000000116b4b60c: mov    %rsp,%rdx
  0x0000000116b4b60f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b613: callq  0x000000010c7dd830
  0x0000000116b4b618: hlt    
  0x0000000116b4b619: push   %r10
  0x0000000116b4b61b: cmp    -0x9d04d72(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4b622: je     0x0000000116b4b69f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4b628: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b62d: sub    $0x80,%rsp
  0x0000000116b4b634: mov    %rax,0x78(%rsp)
  0x0000000116b4b639: mov    %rcx,0x70(%rsp)
  0x0000000116b4b63e: mov    %rdx,0x68(%rsp)
  0x0000000116b4b643: mov    %rbx,0x60(%rsp)
  0x0000000116b4b648: mov    %rbp,0x50(%rsp)
  0x0000000116b4b64d: mov    %rsi,0x48(%rsp)
  0x0000000116b4b652: mov    %rdi,0x40(%rsp)
  0x0000000116b4b657: mov    %r8,0x38(%rsp)
  0x0000000116b4b65c: mov    %r9,0x30(%rsp)
  0x0000000116b4b661: mov    %r10,0x28(%rsp)
  0x0000000116b4b666: mov    %r11,0x20(%rsp)
  0x0000000116b4b66b: mov    %r12,0x18(%rsp)
  0x0000000116b4b670: mov    %r13,0x10(%rsp)
  0x0000000116b4b675: mov    %r14,0x8(%rsp)
  0x0000000116b4b67a: mov    %r15,(%rsp)
  0x0000000116b4b67e: movabs $0x10cc63f17,%rdi
  0x0000000116b4b688: movabs $0x116b4b628,%rsi
  0x0000000116b4b692: mov    %rsp,%rdx
  0x0000000116b4b695: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b699: callq  0x000000010c7dd830
  0x0000000116b4b69e: hlt    
  0x0000000116b4b69f: pop    %r10
  0x0000000116b4b6a1: mov    %r15,%rdi
  0x0000000116b4b6a4: mov    %rbp,0x290(%r15)
  0x0000000116b4b6ab: mov    %rax,0x280(%r15)
  0x0000000116b4b6b2: test   $0xf,%esp
  0x0000000116b4b6b8: je     0x0000000116b4b6d0
  0x0000000116b4b6be: sub    $0x8,%rsp
  0x0000000116b4b6c2: callq  0x000000010c5881a0
  0x0000000116b4b6c7: add    $0x8,%rsp
  0x0000000116b4b6cb: jmpq   0x0000000116b4b6d5
  0x0000000116b4b6d0: callq  0x000000010c5881a0
  0x0000000116b4b6d5: push   %rax
  0x0000000116b4b6d6: push   %rdi
  0x0000000116b4b6d7: push   %rsi
  0x0000000116b4b6d8: push   %rdx
  0x0000000116b4b6d9: push   %rcx
  0x0000000116b4b6da: push   %r8
  0x0000000116b4b6dc: push   %r9
  0x0000000116b4b6de: push   %r10
  0x0000000116b4b6e0: mov    %rsp,%r10
  0x0000000116b4b6e3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b6e7: push   %r10
  0x0000000116b4b6e9: push   %r11
  0x0000000116b4b6eb: mov    $0x109,%edi
  0x0000000116b4b6f0: movabs $0x7ff815049fd5,%r10
  0x0000000116b4b6fa: callq  *%r10
  0x0000000116b4b6fd: pop    %r11
  0x0000000116b4b6ff: pop    %rsp
  0x0000000116b4b700: pop    %r10
  0x0000000116b4b702: pop    %r9
  0x0000000116b4b704: pop    %r8
  0x0000000116b4b706: pop    %rcx
  0x0000000116b4b707: pop    %rdx
  0x0000000116b4b708: pop    %rsi
  0x0000000116b4b709: pop    %rdi
  0x0000000116b4b70a: cmp    %rax,%r15
  0x0000000116b4b70d: je     0x0000000116b4b78a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4b713: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b718: sub    $0x80,%rsp
  0x0000000116b4b71f: mov    %rax,0x78(%rsp)
  0x0000000116b4b724: mov    %rcx,0x70(%rsp)
  0x0000000116b4b729: mov    %rdx,0x68(%rsp)
  0x0000000116b4b72e: mov    %rbx,0x60(%rsp)
  0x0000000116b4b733: mov    %rbp,0x50(%rsp)
  0x0000000116b4b738: mov    %rsi,0x48(%rsp)
  0x0000000116b4b73d: mov    %rdi,0x40(%rsp)
  0x0000000116b4b742: mov    %r8,0x38(%rsp)
  0x0000000116b4b747: mov    %r9,0x30(%rsp)
  0x0000000116b4b74c: mov    %r10,0x28(%rsp)
  0x0000000116b4b751: mov    %r11,0x20(%rsp)
  0x0000000116b4b756: mov    %r12,0x18(%rsp)
  0x0000000116b4b75b: mov    %r13,0x10(%rsp)
  0x0000000116b4b760: mov    %r14,0x8(%rsp)
  0x0000000116b4b765: mov    %r15,(%rsp)
  0x0000000116b4b769: movabs $0x10cc6405e,%rdi
  0x0000000116b4b773: movabs $0x116b4b713,%rsi
  0x0000000116b4b77d: mov    %rsp,%rdx
  0x0000000116b4b780: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b784: callq  0x000000010c7dd830
  0x0000000116b4b789: hlt    
  0x0000000116b4b78a: pop    %rax
  0x0000000116b4b78b: movabs $0x0,%r10
  0x0000000116b4b795: mov    %r10,0x280(%r15)
  0x0000000116b4b79c: movabs $0x0,%r10
  0x0000000116b4b7a6: mov    %r10,0x290(%r15)
  0x0000000116b4b7ad: movabs $0x0,%r10
  0x0000000116b4b7b7: mov    %r10,0x288(%r15)
  0x0000000116b4b7be: cmpq   $0x0,0x8(%r15)
  0x0000000116b4b7c6: je     0x0000000116b4b7d1
  0x0000000116b4b7cc: jmpq   0x0000000116b30420
  0x0000000116b4b7d1: mov    -0x38(%rbp),%r13
  0x0000000116b4b7d5: mov    -0x30(%rbp),%r14
  0x0000000116b4b7d9: retq   
  0x0000000116b4b7da: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b7df: sub    $0x80,%rsp
  0x0000000116b4b7e6: mov    %rax,0x78(%rsp)
  0x0000000116b4b7eb: mov    %rcx,0x70(%rsp)
  0x0000000116b4b7f0: mov    %rdx,0x68(%rsp)
  0x0000000116b4b7f5: mov    %rbx,0x60(%rsp)
  0x0000000116b4b7fa: mov    %rbp,0x50(%rsp)
  0x0000000116b4b7ff: mov    %rsi,0x48(%rsp)
  0x0000000116b4b804: mov    %rdi,0x40(%rsp)
  0x0000000116b4b809: mov    %r8,0x38(%rsp)
  0x0000000116b4b80e: mov    %r9,0x30(%rsp)
  0x0000000116b4b813: mov    %r10,0x28(%rsp)
  0x0000000116b4b818: mov    %r11,0x20(%rsp)
  0x0000000116b4b81d: mov    %r12,0x18(%rsp)
  0x0000000116b4b822: mov    %r13,0x10(%rsp)
  0x0000000116b4b827: mov    %r14,0x8(%rsp)
  0x0000000116b4b82c: mov    %r15,(%rsp)
  0x0000000116b4b830: movabs $0x10cb763be,%rdi
  0x0000000116b4b83a: movabs $0x116b4b7da,%rsi
  0x0000000116b4b844: mov    %rsp,%rdx
  0x0000000116b4b847: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b84b: callq  0x000000010c7dd830
  0x0000000116b4b850: hlt    
  0x0000000116b4b851: movzbl 0x8(%r13),%ebx
  0x0000000116b4b856: add    $0x8,%r13
  0x0000000116b4b85a: movabs $0x10ce38e80,%r10
  0x0000000116b4b864: jmpq   *(%r10,%rbx,8)
  0x0000000116b4b868: movq   $0x0,-0x10(%rbp)
  0x0000000116b4b870: mov    -0x38(%rbp),%r13
  0x0000000116b4b874: mov    -0x30(%rbp),%r14
  0x0000000116b4b878: cmpq   $0x0,0x8(%r15)
  0x0000000116b4b880: je     0x0000000116b4bb56
  0x0000000116b4b886: callq  0x0000000116b4b890
  0x0000000116b4b88b: jmpq   0x0000000116b4badf
  0x0000000116b4b890: lea    0x8(%rsp),%rax
  0x0000000116b4b895: mov    %r13,-0x38(%rbp)
  0x0000000116b4b899: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4b8a1: je     0x0000000116b4b91e
  0x0000000116b4b8a7: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b8ac: sub    $0x80,%rsp
  0x0000000116b4b8b3: mov    %rax,0x78(%rsp)
  0x0000000116b4b8b8: mov    %rcx,0x70(%rsp)
  0x0000000116b4b8bd: mov    %rdx,0x68(%rsp)
  0x0000000116b4b8c2: mov    %rbx,0x60(%rsp)
  0x0000000116b4b8c7: mov    %rbp,0x50(%rsp)
  0x0000000116b4b8cc: mov    %rsi,0x48(%rsp)
  0x0000000116b4b8d1: mov    %rdi,0x40(%rsp)
  0x0000000116b4b8d6: mov    %r8,0x38(%rsp)
  0x0000000116b4b8db: mov    %r9,0x30(%rsp)
  0x0000000116b4b8e0: mov    %r10,0x28(%rsp)
  0x0000000116b4b8e5: mov    %r11,0x20(%rsp)
  0x0000000116b4b8ea: mov    %r12,0x18(%rsp)
  0x0000000116b4b8ef: mov    %r13,0x10(%rsp)
  0x0000000116b4b8f4: mov    %r14,0x8(%rsp)
  0x0000000116b4b8f9: mov    %r15,(%rsp)
  0x0000000116b4b8fd: movabs $0x10cc2363b,%rdi
  0x0000000116b4b907: movabs $0x116b4b8a7,%rsi
  0x0000000116b4b911: mov    %rsp,%rdx
  0x0000000116b4b914: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b918: callq  0x000000010c7dd830
  0x0000000116b4b91d: hlt    
  0x0000000116b4b91e: push   %r10
  0x0000000116b4b920: cmp    -0x9d05077(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4b927: je     0x0000000116b4b9a4
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4b92d: mov    %rsp,-0x28(%rsp)
  0x0000000116b4b932: sub    $0x80,%rsp
  0x0000000116b4b939: mov    %rax,0x78(%rsp)
  0x0000000116b4b93e: mov    %rcx,0x70(%rsp)
  0x0000000116b4b943: mov    %rdx,0x68(%rsp)
  0x0000000116b4b948: mov    %rbx,0x60(%rsp)
  0x0000000116b4b94d: mov    %rbp,0x50(%rsp)
  0x0000000116b4b952: mov    %rsi,0x48(%rsp)
  0x0000000116b4b957: mov    %rdi,0x40(%rsp)
  0x0000000116b4b95c: mov    %r8,0x38(%rsp)
  0x0000000116b4b961: mov    %r9,0x30(%rsp)
  0x0000000116b4b966: mov    %r10,0x28(%rsp)
  0x0000000116b4b96b: mov    %r11,0x20(%rsp)
  0x0000000116b4b970: mov    %r12,0x18(%rsp)
  0x0000000116b4b975: mov    %r13,0x10(%rsp)
  0x0000000116b4b97a: mov    %r14,0x8(%rsp)
  0x0000000116b4b97f: mov    %r15,(%rsp)
  0x0000000116b4b983: movabs $0x10cc63f17,%rdi
  0x0000000116b4b98d: movabs $0x116b4b92d,%rsi
  0x0000000116b4b997: mov    %rsp,%rdx
  0x0000000116b4b99a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b99e: callq  0x000000010c7dd830
  0x0000000116b4b9a3: hlt    
  0x0000000116b4b9a4: pop    %r10
  0x0000000116b4b9a6: mov    %r15,%rdi
  0x0000000116b4b9a9: mov    %rbp,0x290(%r15)
  0x0000000116b4b9b0: mov    %rax,0x280(%r15)
  0x0000000116b4b9b7: test   $0xf,%esp
  0x0000000116b4b9bd: je     0x0000000116b4b9d5
  0x0000000116b4b9c3: sub    $0x8,%rsp
  0x0000000116b4b9c7: callq  0x000000010c5881a0
  0x0000000116b4b9cc: add    $0x8,%rsp
  0x0000000116b4b9d0: jmpq   0x0000000116b4b9da
  0x0000000116b4b9d5: callq  0x000000010c5881a0
  0x0000000116b4b9da: push   %rax
  0x0000000116b4b9db: push   %rdi
  0x0000000116b4b9dc: push   %rsi
  0x0000000116b4b9dd: push   %rdx
  0x0000000116b4b9de: push   %rcx
  0x0000000116b4b9df: push   %r8
  0x0000000116b4b9e1: push   %r9
  0x0000000116b4b9e3: push   %r10
  0x0000000116b4b9e5: mov    %rsp,%r10
  0x0000000116b4b9e8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4b9ec: push   %r10
  0x0000000116b4b9ee: push   %r11
  0x0000000116b4b9f0: mov    $0x109,%edi
  0x0000000116b4b9f5: movabs $0x7ff815049fd5,%r10
  0x0000000116b4b9ff: callq  *%r10
  0x0000000116b4ba02: pop    %r11
  0x0000000116b4ba04: pop    %rsp
  0x0000000116b4ba05: pop    %r10
  0x0000000116b4ba07: pop    %r9
  0x0000000116b4ba09: pop    %r8
  0x0000000116b4ba0b: pop    %rcx
  0x0000000116b4ba0c: pop    %rdx
  0x0000000116b4ba0d: pop    %rsi
  0x0000000116b4ba0e: pop    %rdi
  0x0000000116b4ba0f: cmp    %rax,%r15
  0x0000000116b4ba12: je     0x0000000116b4ba8f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4ba18: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ba1d: sub    $0x80,%rsp
  0x0000000116b4ba24: mov    %rax,0x78(%rsp)
  0x0000000116b4ba29: mov    %rcx,0x70(%rsp)
  0x0000000116b4ba2e: mov    %rdx,0x68(%rsp)
  0x0000000116b4ba33: mov    %rbx,0x60(%rsp)
  0x0000000116b4ba38: mov    %rbp,0x50(%rsp)
  0x0000000116b4ba3d: mov    %rsi,0x48(%rsp)
  0x0000000116b4ba42: mov    %rdi,0x40(%rsp)
  0x0000000116b4ba47: mov    %r8,0x38(%rsp)
  0x0000000116b4ba4c: mov    %r9,0x30(%rsp)
  0x0000000116b4ba51: mov    %r10,0x28(%rsp)
  0x0000000116b4ba56: mov    %r11,0x20(%rsp)
  0x0000000116b4ba5b: mov    %r12,0x18(%rsp)
  0x0000000116b4ba60: mov    %r13,0x10(%rsp)
  0x0000000116b4ba65: mov    %r14,0x8(%rsp)
  0x0000000116b4ba6a: mov    %r15,(%rsp)
  0x0000000116b4ba6e: movabs $0x10cc6405e,%rdi
  0x0000000116b4ba78: movabs $0x116b4ba18,%rsi
  0x0000000116b4ba82: mov    %rsp,%rdx
  0x0000000116b4ba85: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ba89: callq  0x000000010c7dd830
  0x0000000116b4ba8e: hlt    
  0x0000000116b4ba8f: pop    %rax
  0x0000000116b4ba90: movabs $0x0,%r10
  0x0000000116b4ba9a: mov    %r10,0x280(%r15)
  0x0000000116b4baa1: movabs $0x0,%r10
  0x0000000116b4baab: mov    %r10,0x290(%r15)
  0x0000000116b4bab2: movabs $0x0,%r10
  0x0000000116b4babc: mov    %r10,0x288(%r15)
  0x0000000116b4bac3: cmpq   $0x0,0x8(%r15)
  0x0000000116b4bacb: je     0x0000000116b4bad6
  0x0000000116b4bad1: jmpq   0x0000000116b30420
  0x0000000116b4bad6: mov    -0x38(%rbp),%r13
  0x0000000116b4bada: mov    -0x30(%rbp),%r14
  0x0000000116b4bade: retq   
  0x0000000116b4badf: mov    %rsp,-0x28(%rsp)
  0x0000000116b4bae4: sub    $0x80,%rsp
  0x0000000116b4baeb: mov    %rax,0x78(%rsp)
  0x0000000116b4baf0: mov    %rcx,0x70(%rsp)
  0x0000000116b4baf5: mov    %rdx,0x68(%rsp)
  0x0000000116b4bafa: mov    %rbx,0x60(%rsp)
  0x0000000116b4baff: mov    %rbp,0x50(%rsp)
  0x0000000116b4bb04: mov    %rsi,0x48(%rsp)
  0x0000000116b4bb09: mov    %rdi,0x40(%rsp)
  0x0000000116b4bb0e: mov    %r8,0x38(%rsp)
  0x0000000116b4bb13: mov    %r9,0x30(%rsp)
  0x0000000116b4bb18: mov    %r10,0x28(%rsp)
  0x0000000116b4bb1d: mov    %r11,0x20(%rsp)
  0x0000000116b4bb22: mov    %r12,0x18(%rsp)
  0x0000000116b4bb27: mov    %r13,0x10(%rsp)
  0x0000000116b4bb2c: mov    %r14,0x8(%rsp)
  0x0000000116b4bb31: mov    %r15,(%rsp)
  0x0000000116b4bb35: movabs $0x10cb763be,%rdi
  0x0000000116b4bb3f: movabs $0x116b4badf,%rsi
  0x0000000116b4bb49: mov    %rsp,%rdx
  0x0000000116b4bb4c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bb50: callq  0x000000010c7dd830
  0x0000000116b4bb55: hlt    
  0x0000000116b4bb56: movzbl 0x8(%r13),%ebx
  0x0000000116b4bb5b: add    $0x8,%r13
  0x0000000116b4bb5f: movabs $0x10ce38e80,%r10
  0x0000000116b4bb69: jmpq   *(%r10,%rbx,8)
  0x0000000116b4bb6d: movq   $0x0,-0x10(%rbp)
  0x0000000116b4bb75: mov    -0x38(%rbp),%r13
  0x0000000116b4bb79: mov    -0x30(%rbp),%r14
  0x0000000116b4bb7d: cmpq   $0x0,0x8(%r15)
  0x0000000116b4bb85: je     0x0000000116b4be5b
  0x0000000116b4bb8b: callq  0x0000000116b4bb95
  0x0000000116b4bb90: jmpq   0x0000000116b4bde4
  0x0000000116b4bb95: lea    0x8(%rsp),%rax
  0x0000000116b4bb9a: mov    %r13,-0x38(%rbp)
  0x0000000116b4bb9e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4bba6: je     0x0000000116b4bc23
  0x0000000116b4bbac: mov    %rsp,-0x28(%rsp)
  0x0000000116b4bbb1: sub    $0x80,%rsp
  0x0000000116b4bbb8: mov    %rax,0x78(%rsp)
  0x0000000116b4bbbd: mov    %rcx,0x70(%rsp)
  0x0000000116b4bbc2: mov    %rdx,0x68(%rsp)
  0x0000000116b4bbc7: mov    %rbx,0x60(%rsp)
  0x0000000116b4bbcc: mov    %rbp,0x50(%rsp)
  0x0000000116b4bbd1: mov    %rsi,0x48(%rsp)
  0x0000000116b4bbd6: mov    %rdi,0x40(%rsp)
  0x0000000116b4bbdb: mov    %r8,0x38(%rsp)
  0x0000000116b4bbe0: mov    %r9,0x30(%rsp)
  0x0000000116b4bbe5: mov    %r10,0x28(%rsp)
  0x0000000116b4bbea: mov    %r11,0x20(%rsp)
  0x0000000116b4bbef: mov    %r12,0x18(%rsp)
  0x0000000116b4bbf4: mov    %r13,0x10(%rsp)
  0x0000000116b4bbf9: mov    %r14,0x8(%rsp)
  0x0000000116b4bbfe: mov    %r15,(%rsp)
  0x0000000116b4bc02: movabs $0x10cc2363b,%rdi
  0x0000000116b4bc0c: movabs $0x116b4bbac,%rsi
  0x0000000116b4bc16: mov    %rsp,%rdx
  0x0000000116b4bc19: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bc1d: callq  0x000000010c7dd830
  0x0000000116b4bc22: hlt    
  0x0000000116b4bc23: push   %r10
  0x0000000116b4bc25: cmp    -0x9d0537c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4bc2c: je     0x0000000116b4bca9
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4bc32: mov    %rsp,-0x28(%rsp)
  0x0000000116b4bc37: sub    $0x80,%rsp
  0x0000000116b4bc3e: mov    %rax,0x78(%rsp)
  0x0000000116b4bc43: mov    %rcx,0x70(%rsp)
  0x0000000116b4bc48: mov    %rdx,0x68(%rsp)
  0x0000000116b4bc4d: mov    %rbx,0x60(%rsp)
  0x0000000116b4bc52: mov    %rbp,0x50(%rsp)
  0x0000000116b4bc57: mov    %rsi,0x48(%rsp)
  0x0000000116b4bc5c: mov    %rdi,0x40(%rsp)
  0x0000000116b4bc61: mov    %r8,0x38(%rsp)
  0x0000000116b4bc66: mov    %r9,0x30(%rsp)
  0x0000000116b4bc6b: mov    %r10,0x28(%rsp)
  0x0000000116b4bc70: mov    %r11,0x20(%rsp)
  0x0000000116b4bc75: mov    %r12,0x18(%rsp)
  0x0000000116b4bc7a: mov    %r13,0x10(%rsp)
  0x0000000116b4bc7f: mov    %r14,0x8(%rsp)
  0x0000000116b4bc84: mov    %r15,(%rsp)
  0x0000000116b4bc88: movabs $0x10cc63f17,%rdi
  0x0000000116b4bc92: movabs $0x116b4bc32,%rsi
  0x0000000116b4bc9c: mov    %rsp,%rdx
  0x0000000116b4bc9f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bca3: callq  0x000000010c7dd830
  0x0000000116b4bca8: hlt    
  0x0000000116b4bca9: pop    %r10
  0x0000000116b4bcab: mov    %r15,%rdi
  0x0000000116b4bcae: mov    %rbp,0x290(%r15)
  0x0000000116b4bcb5: mov    %rax,0x280(%r15)
  0x0000000116b4bcbc: test   $0xf,%esp
  0x0000000116b4bcc2: je     0x0000000116b4bcda
  0x0000000116b4bcc8: sub    $0x8,%rsp
  0x0000000116b4bccc: callq  0x000000010c5881a0
  0x0000000116b4bcd1: add    $0x8,%rsp
  0x0000000116b4bcd5: jmpq   0x0000000116b4bcdf
  0x0000000116b4bcda: callq  0x000000010c5881a0
  0x0000000116b4bcdf: push   %rax
  0x0000000116b4bce0: push   %rdi
  0x0000000116b4bce1: push   %rsi
  0x0000000116b4bce2: push   %rdx
  0x0000000116b4bce3: push   %rcx
  0x0000000116b4bce4: push   %r8
  0x0000000116b4bce6: push   %r9
  0x0000000116b4bce8: push   %r10
  0x0000000116b4bcea: mov    %rsp,%r10
  0x0000000116b4bced: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bcf1: push   %r10
  0x0000000116b4bcf3: push   %r11
  0x0000000116b4bcf5: mov    $0x109,%edi
  0x0000000116b4bcfa: movabs $0x7ff815049fd5,%r10
  0x0000000116b4bd04: callq  *%r10
  0x0000000116b4bd07: pop    %r11
  0x0000000116b4bd09: pop    %rsp
  0x0000000116b4bd0a: pop    %r10
  0x0000000116b4bd0c: pop    %r9
  0x0000000116b4bd0e: pop    %r8
  0x0000000116b4bd10: pop    %rcx
  0x0000000116b4bd11: pop    %rdx
  0x0000000116b4bd12: pop    %rsi
  0x0000000116b4bd13: pop    %rdi
  0x0000000116b4bd14: cmp    %rax,%r15
  0x0000000116b4bd17: je     0x0000000116b4bd94
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4bd1d: mov    %rsp,-0x28(%rsp)
  0x0000000116b4bd22: sub    $0x80,%rsp
  0x0000000116b4bd29: mov    %rax,0x78(%rsp)
  0x0000000116b4bd2e: mov    %rcx,0x70(%rsp)
  0x0000000116b4bd33: mov    %rdx,0x68(%rsp)
  0x0000000116b4bd38: mov    %rbx,0x60(%rsp)
  0x0000000116b4bd3d: mov    %rbp,0x50(%rsp)
  0x0000000116b4bd42: mov    %rsi,0x48(%rsp)
  0x0000000116b4bd47: mov    %rdi,0x40(%rsp)
  0x0000000116b4bd4c: mov    %r8,0x38(%rsp)
  0x0000000116b4bd51: mov    %r9,0x30(%rsp)
  0x0000000116b4bd56: mov    %r10,0x28(%rsp)
  0x0000000116b4bd5b: mov    %r11,0x20(%rsp)
  0x0000000116b4bd60: mov    %r12,0x18(%rsp)
  0x0000000116b4bd65: mov    %r13,0x10(%rsp)
  0x0000000116b4bd6a: mov    %r14,0x8(%rsp)
  0x0000000116b4bd6f: mov    %r15,(%rsp)
  0x0000000116b4bd73: movabs $0x10cc6405e,%rdi
  0x0000000116b4bd7d: movabs $0x116b4bd1d,%rsi
  0x0000000116b4bd87: mov    %rsp,%rdx
  0x0000000116b4bd8a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bd8e: callq  0x000000010c7dd830
  0x0000000116b4bd93: hlt    
  0x0000000116b4bd94: pop    %rax
  0x0000000116b4bd95: movabs $0x0,%r10
  0x0000000116b4bd9f: mov    %r10,0x280(%r15)
  0x0000000116b4bda6: movabs $0x0,%r10
  0x0000000116b4bdb0: mov    %r10,0x290(%r15)
  0x0000000116b4bdb7: movabs $0x0,%r10
  0x0000000116b4bdc1: mov    %r10,0x288(%r15)
  0x0000000116b4bdc8: cmpq   $0x0,0x8(%r15)
  0x0000000116b4bdd0: je     0x0000000116b4bddb
  0x0000000116b4bdd6: jmpq   0x0000000116b30420
  0x0000000116b4bddb: mov    -0x38(%rbp),%r13
  0x0000000116b4bddf: mov    -0x30(%rbp),%r14
  0x0000000116b4bde3: retq   
  0x0000000116b4bde4: mov    %rsp,-0x28(%rsp)
  0x0000000116b4bde9: sub    $0x80,%rsp
  0x0000000116b4bdf0: mov    %rax,0x78(%rsp)
  0x0000000116b4bdf5: mov    %rcx,0x70(%rsp)
  0x0000000116b4bdfa: mov    %rdx,0x68(%rsp)
  0x0000000116b4bdff: mov    %rbx,0x60(%rsp)
  0x0000000116b4be04: mov    %rbp,0x50(%rsp)
  0x0000000116b4be09: mov    %rsi,0x48(%rsp)
  0x0000000116b4be0e: mov    %rdi,0x40(%rsp)
  0x0000000116b4be13: mov    %r8,0x38(%rsp)
  0x0000000116b4be18: mov    %r9,0x30(%rsp)
  0x0000000116b4be1d: mov    %r10,0x28(%rsp)
  0x0000000116b4be22: mov    %r11,0x20(%rsp)
  0x0000000116b4be27: mov    %r12,0x18(%rsp)
  0x0000000116b4be2c: mov    %r13,0x10(%rsp)
  0x0000000116b4be31: mov    %r14,0x8(%rsp)
  0x0000000116b4be36: mov    %r15,(%rsp)
  0x0000000116b4be3a: movabs $0x10cb763be,%rdi
  0x0000000116b4be44: movabs $0x116b4bde4,%rsi
  0x0000000116b4be4e: mov    %rsp,%rdx
  0x0000000116b4be51: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4be55: callq  0x000000010c7dd830
  0x0000000116b4be5a: hlt    
  0x0000000116b4be5b: movzbl 0x8(%r13),%ebx
  0x0000000116b4be60: add    $0x8,%r13
  0x0000000116b4be64: movabs $0x10ce38e80,%r10
  0x0000000116b4be6e: jmpq   *(%r10,%rbx,8)
  0x0000000116b4be72: movq   $0x0,-0x10(%rbp)
  0x0000000116b4be7a: mov    -0x38(%rbp),%r13
  0x0000000116b4be7e: mov    -0x30(%rbp),%r14
  0x0000000116b4be82: cmpq   $0x0,0x8(%r15)
  0x0000000116b4be8a: je     0x0000000116b4c160
  0x0000000116b4be90: callq  0x0000000116b4be9a
  0x0000000116b4be95: jmpq   0x0000000116b4c0e9
  0x0000000116b4be9a: lea    0x8(%rsp),%rax
  0x0000000116b4be9f: mov    %r13,-0x38(%rbp)
  0x0000000116b4bea3: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4beab: je     0x0000000116b4bf28
  0x0000000116b4beb1: mov    %rsp,-0x28(%rsp)
  0x0000000116b4beb6: sub    $0x80,%rsp
  0x0000000116b4bebd: mov    %rax,0x78(%rsp)
  0x0000000116b4bec2: mov    %rcx,0x70(%rsp)
  0x0000000116b4bec7: mov    %rdx,0x68(%rsp)
  0x0000000116b4becc: mov    %rbx,0x60(%rsp)
  0x0000000116b4bed1: mov    %rbp,0x50(%rsp)
  0x0000000116b4bed6: mov    %rsi,0x48(%rsp)
  0x0000000116b4bedb: mov    %rdi,0x40(%rsp)
  0x0000000116b4bee0: mov    %r8,0x38(%rsp)
  0x0000000116b4bee5: mov    %r9,0x30(%rsp)
  0x0000000116b4beea: mov    %r10,0x28(%rsp)
  0x0000000116b4beef: mov    %r11,0x20(%rsp)
  0x0000000116b4bef4: mov    %r12,0x18(%rsp)
  0x0000000116b4bef9: mov    %r13,0x10(%rsp)
  0x0000000116b4befe: mov    %r14,0x8(%rsp)
  0x0000000116b4bf03: mov    %r15,(%rsp)
  0x0000000116b4bf07: movabs $0x10cc2363b,%rdi
  0x0000000116b4bf11: movabs $0x116b4beb1,%rsi
  0x0000000116b4bf1b: mov    %rsp,%rdx
  0x0000000116b4bf1e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bf22: callq  0x000000010c7dd830
  0x0000000116b4bf27: hlt    
  0x0000000116b4bf28: push   %r10
  0x0000000116b4bf2a: cmp    -0x9d05681(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4bf31: je     0x0000000116b4bfae
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4bf37: mov    %rsp,-0x28(%rsp)
  0x0000000116b4bf3c: sub    $0x80,%rsp
  0x0000000116b4bf43: mov    %rax,0x78(%rsp)
  0x0000000116b4bf48: mov    %rcx,0x70(%rsp)
  0x0000000116b4bf4d: mov    %rdx,0x68(%rsp)
  0x0000000116b4bf52: mov    %rbx,0x60(%rsp)
  0x0000000116b4bf57: mov    %rbp,0x50(%rsp)
  0x0000000116b4bf5c: mov    %rsi,0x48(%rsp)
  0x0000000116b4bf61: mov    %rdi,0x40(%rsp)
  0x0000000116b4bf66: mov    %r8,0x38(%rsp)
  0x0000000116b4bf6b: mov    %r9,0x30(%rsp)
  0x0000000116b4bf70: mov    %r10,0x28(%rsp)
  0x0000000116b4bf75: mov    %r11,0x20(%rsp)
  0x0000000116b4bf7a: mov    %r12,0x18(%rsp)
  0x0000000116b4bf7f: mov    %r13,0x10(%rsp)
  0x0000000116b4bf84: mov    %r14,0x8(%rsp)
  0x0000000116b4bf89: mov    %r15,(%rsp)
  0x0000000116b4bf8d: movabs $0x10cc63f17,%rdi
  0x0000000116b4bf97: movabs $0x116b4bf37,%rsi
  0x0000000116b4bfa1: mov    %rsp,%rdx
  0x0000000116b4bfa4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bfa8: callq  0x000000010c7dd830
  0x0000000116b4bfad: hlt    
  0x0000000116b4bfae: pop    %r10
  0x0000000116b4bfb0: mov    %r15,%rdi
  0x0000000116b4bfb3: mov    %rbp,0x290(%r15)
  0x0000000116b4bfba: mov    %rax,0x280(%r15)
  0x0000000116b4bfc1: test   $0xf,%esp
  0x0000000116b4bfc7: je     0x0000000116b4bfdf
  0x0000000116b4bfcd: sub    $0x8,%rsp
  0x0000000116b4bfd1: callq  0x000000010c5881a0
  0x0000000116b4bfd6: add    $0x8,%rsp
  0x0000000116b4bfda: jmpq   0x0000000116b4bfe4
  0x0000000116b4bfdf: callq  0x000000010c5881a0
  0x0000000116b4bfe4: push   %rax
  0x0000000116b4bfe5: push   %rdi
  0x0000000116b4bfe6: push   %rsi
  0x0000000116b4bfe7: push   %rdx
  0x0000000116b4bfe8: push   %rcx
  0x0000000116b4bfe9: push   %r8
  0x0000000116b4bfeb: push   %r9
  0x0000000116b4bfed: push   %r10
  0x0000000116b4bfef: mov    %rsp,%r10
  0x0000000116b4bff2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4bff6: push   %r10
  0x0000000116b4bff8: push   %r11
  0x0000000116b4bffa: mov    $0x109,%edi
  0x0000000116b4bfff: movabs $0x7ff815049fd5,%r10
  0x0000000116b4c009: callq  *%r10
  0x0000000116b4c00c: pop    %r11
  0x0000000116b4c00e: pop    %rsp
  0x0000000116b4c00f: pop    %r10
  0x0000000116b4c011: pop    %r9
  0x0000000116b4c013: pop    %r8
  0x0000000116b4c015: pop    %rcx
  0x0000000116b4c016: pop    %rdx
  0x0000000116b4c017: pop    %rsi
  0x0000000116b4c018: pop    %rdi
  0x0000000116b4c019: cmp    %rax,%r15
  0x0000000116b4c01c: je     0x0000000116b4c099
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4c022: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c027: sub    $0x80,%rsp
  0x0000000116b4c02e: mov    %rax,0x78(%rsp)
  0x0000000116b4c033: mov    %rcx,0x70(%rsp)
  0x0000000116b4c038: mov    %rdx,0x68(%rsp)
  0x0000000116b4c03d: mov    %rbx,0x60(%rsp)
  0x0000000116b4c042: mov    %rbp,0x50(%rsp)
  0x0000000116b4c047: mov    %rsi,0x48(%rsp)
  0x0000000116b4c04c: mov    %rdi,0x40(%rsp)
  0x0000000116b4c051: mov    %r8,0x38(%rsp)
  0x0000000116b4c056: mov    %r9,0x30(%rsp)
  0x0000000116b4c05b: mov    %r10,0x28(%rsp)
  0x0000000116b4c060: mov    %r11,0x20(%rsp)
  0x0000000116b4c065: mov    %r12,0x18(%rsp)
  0x0000000116b4c06a: mov    %r13,0x10(%rsp)
  0x0000000116b4c06f: mov    %r14,0x8(%rsp)
  0x0000000116b4c074: mov    %r15,(%rsp)
  0x0000000116b4c078: movabs $0x10cc6405e,%rdi
  0x0000000116b4c082: movabs $0x116b4c022,%rsi
  0x0000000116b4c08c: mov    %rsp,%rdx
  0x0000000116b4c08f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c093: callq  0x000000010c7dd830
  0x0000000116b4c098: hlt    
  0x0000000116b4c099: pop    %rax
  0x0000000116b4c09a: movabs $0x0,%r10
  0x0000000116b4c0a4: mov    %r10,0x280(%r15)
  0x0000000116b4c0ab: movabs $0x0,%r10
  0x0000000116b4c0b5: mov    %r10,0x290(%r15)
  0x0000000116b4c0bc: movabs $0x0,%r10
  0x0000000116b4c0c6: mov    %r10,0x288(%r15)
  0x0000000116b4c0cd: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c0d5: je     0x0000000116b4c0e0
  0x0000000116b4c0db: jmpq   0x0000000116b30420
  0x0000000116b4c0e0: mov    -0x38(%rbp),%r13
  0x0000000116b4c0e4: mov    -0x30(%rbp),%r14
  0x0000000116b4c0e8: retq   
  0x0000000116b4c0e9: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c0ee: sub    $0x80,%rsp
  0x0000000116b4c0f5: mov    %rax,0x78(%rsp)
  0x0000000116b4c0fa: mov    %rcx,0x70(%rsp)
  0x0000000116b4c0ff: mov    %rdx,0x68(%rsp)
  0x0000000116b4c104: mov    %rbx,0x60(%rsp)
  0x0000000116b4c109: mov    %rbp,0x50(%rsp)
  0x0000000116b4c10e: mov    %rsi,0x48(%rsp)
  0x0000000116b4c113: mov    %rdi,0x40(%rsp)
  0x0000000116b4c118: mov    %r8,0x38(%rsp)
  0x0000000116b4c11d: mov    %r9,0x30(%rsp)
  0x0000000116b4c122: mov    %r10,0x28(%rsp)
  0x0000000116b4c127: mov    %r11,0x20(%rsp)
  0x0000000116b4c12c: mov    %r12,0x18(%rsp)
  0x0000000116b4c131: mov    %r13,0x10(%rsp)
  0x0000000116b4c136: mov    %r14,0x8(%rsp)
  0x0000000116b4c13b: mov    %r15,(%rsp)
  0x0000000116b4c13f: movabs $0x10cb763be,%rdi
  0x0000000116b4c149: movabs $0x116b4c0e9,%rsi
  0x0000000116b4c153: mov    %rsp,%rdx
  0x0000000116b4c156: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c15a: callq  0x000000010c7dd830
  0x0000000116b4c15f: hlt    
  0x0000000116b4c160: movzbl 0x8(%r13),%ebx
  0x0000000116b4c165: add    $0x8,%r13
  0x0000000116b4c169: movabs $0x10ce3ae80,%r10
  0x0000000116b4c173: jmpq   *(%r10,%rbx,8)
  0x0000000116b4c177: movq   $0x0,-0x10(%rbp)
  0x0000000116b4c17f: mov    -0x38(%rbp),%r13
  0x0000000116b4c183: mov    -0x30(%rbp),%r14
  0x0000000116b4c187: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c18f: je     0x0000000116b4c465
  0x0000000116b4c195: callq  0x0000000116b4c19f
  0x0000000116b4c19a: jmpq   0x0000000116b4c3ee
  0x0000000116b4c19f: lea    0x8(%rsp),%rax
  0x0000000116b4c1a4: mov    %r13,-0x38(%rbp)
  0x0000000116b4c1a8: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4c1b0: je     0x0000000116b4c22d
  0x0000000116b4c1b6: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c1bb: sub    $0x80,%rsp
  0x0000000116b4c1c2: mov    %rax,0x78(%rsp)
  0x0000000116b4c1c7: mov    %rcx,0x70(%rsp)
  0x0000000116b4c1cc: mov    %rdx,0x68(%rsp)
  0x0000000116b4c1d1: mov    %rbx,0x60(%rsp)
  0x0000000116b4c1d6: mov    %rbp,0x50(%rsp)
  0x0000000116b4c1db: mov    %rsi,0x48(%rsp)
  0x0000000116b4c1e0: mov    %rdi,0x40(%rsp)
  0x0000000116b4c1e5: mov    %r8,0x38(%rsp)
  0x0000000116b4c1ea: mov    %r9,0x30(%rsp)
  0x0000000116b4c1ef: mov    %r10,0x28(%rsp)
  0x0000000116b4c1f4: mov    %r11,0x20(%rsp)
  0x0000000116b4c1f9: mov    %r12,0x18(%rsp)
  0x0000000116b4c1fe: mov    %r13,0x10(%rsp)
  0x0000000116b4c203: mov    %r14,0x8(%rsp)
  0x0000000116b4c208: mov    %r15,(%rsp)
  0x0000000116b4c20c: movabs $0x10cc2363b,%rdi
  0x0000000116b4c216: movabs $0x116b4c1b6,%rsi
  0x0000000116b4c220: mov    %rsp,%rdx
  0x0000000116b4c223: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c227: callq  0x000000010c7dd830
  0x0000000116b4c22c: hlt    
  0x0000000116b4c22d: push   %r10
  0x0000000116b4c22f: cmp    -0x9d05986(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4c236: je     0x0000000116b4c2b3
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4c23c: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c241: sub    $0x80,%rsp
  0x0000000116b4c248: mov    %rax,0x78(%rsp)
  0x0000000116b4c24d: mov    %rcx,0x70(%rsp)
  0x0000000116b4c252: mov    %rdx,0x68(%rsp)
  0x0000000116b4c257: mov    %rbx,0x60(%rsp)
  0x0000000116b4c25c: mov    %rbp,0x50(%rsp)
  0x0000000116b4c261: mov    %rsi,0x48(%rsp)
  0x0000000116b4c266: mov    %rdi,0x40(%rsp)
  0x0000000116b4c26b: mov    %r8,0x38(%rsp)
  0x0000000116b4c270: mov    %r9,0x30(%rsp)
  0x0000000116b4c275: mov    %r10,0x28(%rsp)
  0x0000000116b4c27a: mov    %r11,0x20(%rsp)
  0x0000000116b4c27f: mov    %r12,0x18(%rsp)
  0x0000000116b4c284: mov    %r13,0x10(%rsp)
  0x0000000116b4c289: mov    %r14,0x8(%rsp)
  0x0000000116b4c28e: mov    %r15,(%rsp)
  0x0000000116b4c292: movabs $0x10cc63f17,%rdi
  0x0000000116b4c29c: movabs $0x116b4c23c,%rsi
  0x0000000116b4c2a6: mov    %rsp,%rdx
  0x0000000116b4c2a9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c2ad: callq  0x000000010c7dd830
  0x0000000116b4c2b2: hlt    
  0x0000000116b4c2b3: pop    %r10
  0x0000000116b4c2b5: mov    %r15,%rdi
  0x0000000116b4c2b8: mov    %rbp,0x290(%r15)
  0x0000000116b4c2bf: mov    %rax,0x280(%r15)
  0x0000000116b4c2c6: test   $0xf,%esp
  0x0000000116b4c2cc: je     0x0000000116b4c2e4
  0x0000000116b4c2d2: sub    $0x8,%rsp
  0x0000000116b4c2d6: callq  0x000000010c5881a0
  0x0000000116b4c2db: add    $0x8,%rsp
  0x0000000116b4c2df: jmpq   0x0000000116b4c2e9
  0x0000000116b4c2e4: callq  0x000000010c5881a0
  0x0000000116b4c2e9: push   %rax
  0x0000000116b4c2ea: push   %rdi
  0x0000000116b4c2eb: push   %rsi
  0x0000000116b4c2ec: push   %rdx
  0x0000000116b4c2ed: push   %rcx
  0x0000000116b4c2ee: push   %r8
  0x0000000116b4c2f0: push   %r9
  0x0000000116b4c2f2: push   %r10
  0x0000000116b4c2f4: mov    %rsp,%r10
  0x0000000116b4c2f7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c2fb: push   %r10
  0x0000000116b4c2fd: push   %r11
  0x0000000116b4c2ff: mov    $0x109,%edi
  0x0000000116b4c304: movabs $0x7ff815049fd5,%r10
  0x0000000116b4c30e: callq  *%r10
  0x0000000116b4c311: pop    %r11
  0x0000000116b4c313: pop    %rsp
  0x0000000116b4c314: pop    %r10
  0x0000000116b4c316: pop    %r9
  0x0000000116b4c318: pop    %r8
  0x0000000116b4c31a: pop    %rcx
  0x0000000116b4c31b: pop    %rdx
  0x0000000116b4c31c: pop    %rsi
  0x0000000116b4c31d: pop    %rdi
  0x0000000116b4c31e: cmp    %rax,%r15
  0x0000000116b4c321: je     0x0000000116b4c39e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4c327: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c32c: sub    $0x80,%rsp
  0x0000000116b4c333: mov    %rax,0x78(%rsp)
  0x0000000116b4c338: mov    %rcx,0x70(%rsp)
  0x0000000116b4c33d: mov    %rdx,0x68(%rsp)
  0x0000000116b4c342: mov    %rbx,0x60(%rsp)
  0x0000000116b4c347: mov    %rbp,0x50(%rsp)
  0x0000000116b4c34c: mov    %rsi,0x48(%rsp)
  0x0000000116b4c351: mov    %rdi,0x40(%rsp)
  0x0000000116b4c356: mov    %r8,0x38(%rsp)
  0x0000000116b4c35b: mov    %r9,0x30(%rsp)
  0x0000000116b4c360: mov    %r10,0x28(%rsp)
  0x0000000116b4c365: mov    %r11,0x20(%rsp)
  0x0000000116b4c36a: mov    %r12,0x18(%rsp)
  0x0000000116b4c36f: mov    %r13,0x10(%rsp)
  0x0000000116b4c374: mov    %r14,0x8(%rsp)
  0x0000000116b4c379: mov    %r15,(%rsp)
  0x0000000116b4c37d: movabs $0x10cc6405e,%rdi
  0x0000000116b4c387: movabs $0x116b4c327,%rsi
  0x0000000116b4c391: mov    %rsp,%rdx
  0x0000000116b4c394: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c398: callq  0x000000010c7dd830
  0x0000000116b4c39d: hlt    
  0x0000000116b4c39e: pop    %rax
  0x0000000116b4c39f: movabs $0x0,%r10
  0x0000000116b4c3a9: mov    %r10,0x280(%r15)
  0x0000000116b4c3b0: movabs $0x0,%r10
  0x0000000116b4c3ba: mov    %r10,0x290(%r15)
  0x0000000116b4c3c1: movabs $0x0,%r10
  0x0000000116b4c3cb: mov    %r10,0x288(%r15)
  0x0000000116b4c3d2: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c3da: je     0x0000000116b4c3e5
  0x0000000116b4c3e0: jmpq   0x0000000116b30420
  0x0000000116b4c3e5: mov    -0x38(%rbp),%r13
  0x0000000116b4c3e9: mov    -0x30(%rbp),%r14
  0x0000000116b4c3ed: retq   
  0x0000000116b4c3ee: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c3f3: sub    $0x80,%rsp
  0x0000000116b4c3fa: mov    %rax,0x78(%rsp)
  0x0000000116b4c3ff: mov    %rcx,0x70(%rsp)
  0x0000000116b4c404: mov    %rdx,0x68(%rsp)
  0x0000000116b4c409: mov    %rbx,0x60(%rsp)
  0x0000000116b4c40e: mov    %rbp,0x50(%rsp)
  0x0000000116b4c413: mov    %rsi,0x48(%rsp)
  0x0000000116b4c418: mov    %rdi,0x40(%rsp)
  0x0000000116b4c41d: mov    %r8,0x38(%rsp)
  0x0000000116b4c422: mov    %r9,0x30(%rsp)
  0x0000000116b4c427: mov    %r10,0x28(%rsp)
  0x0000000116b4c42c: mov    %r11,0x20(%rsp)
  0x0000000116b4c431: mov    %r12,0x18(%rsp)
  0x0000000116b4c436: mov    %r13,0x10(%rsp)
  0x0000000116b4c43b: mov    %r14,0x8(%rsp)
  0x0000000116b4c440: mov    %r15,(%rsp)
  0x0000000116b4c444: movabs $0x10cb763be,%rdi
  0x0000000116b4c44e: movabs $0x116b4c3ee,%rsi
  0x0000000116b4c458: mov    %rsp,%rdx
  0x0000000116b4c45b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c45f: callq  0x000000010c7dd830
  0x0000000116b4c464: hlt    
  0x0000000116b4c465: movzbl 0x8(%r13),%ebx
  0x0000000116b4c46a: add    $0x8,%r13
  0x0000000116b4c46e: movabs $0x10ce38e80,%r10
  0x0000000116b4c478: jmpq   *(%r10,%rbx,8)
  0x0000000116b4c47c: movq   $0x0,-0x10(%rbp)
  0x0000000116b4c484: mov    -0x38(%rbp),%r13
  0x0000000116b4c488: mov    -0x30(%rbp),%r14
  0x0000000116b4c48c: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c494: je     0x0000000116b4c76a
  0x0000000116b4c49a: callq  0x0000000116b4c4a4
  0x0000000116b4c49f: jmpq   0x0000000116b4c6f3
  0x0000000116b4c4a4: lea    0x8(%rsp),%rax
  0x0000000116b4c4a9: mov    %r13,-0x38(%rbp)
  0x0000000116b4c4ad: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4c4b5: je     0x0000000116b4c532
  0x0000000116b4c4bb: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c4c0: sub    $0x80,%rsp
  0x0000000116b4c4c7: mov    %rax,0x78(%rsp)
  0x0000000116b4c4cc: mov    %rcx,0x70(%rsp)
  0x0000000116b4c4d1: mov    %rdx,0x68(%rsp)
  0x0000000116b4c4d6: mov    %rbx,0x60(%rsp)
  0x0000000116b4c4db: mov    %rbp,0x50(%rsp)
  0x0000000116b4c4e0: mov    %rsi,0x48(%rsp)
  0x0000000116b4c4e5: mov    %rdi,0x40(%rsp)
  0x0000000116b4c4ea: mov    %r8,0x38(%rsp)
  0x0000000116b4c4ef: mov    %r9,0x30(%rsp)
  0x0000000116b4c4f4: mov    %r10,0x28(%rsp)
  0x0000000116b4c4f9: mov    %r11,0x20(%rsp)
  0x0000000116b4c4fe: mov    %r12,0x18(%rsp)
  0x0000000116b4c503: mov    %r13,0x10(%rsp)
  0x0000000116b4c508: mov    %r14,0x8(%rsp)
  0x0000000116b4c50d: mov    %r15,(%rsp)
  0x0000000116b4c511: movabs $0x10cc2363b,%rdi
  0x0000000116b4c51b: movabs $0x116b4c4bb,%rsi
  0x0000000116b4c525: mov    %rsp,%rdx
  0x0000000116b4c528: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c52c: callq  0x000000010c7dd830
  0x0000000116b4c531: hlt    
  0x0000000116b4c532: push   %r10
  0x0000000116b4c534: cmp    -0x9d05c8b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4c53b: je     0x0000000116b4c5b8
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4c541: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c546: sub    $0x80,%rsp
  0x0000000116b4c54d: mov    %rax,0x78(%rsp)
  0x0000000116b4c552: mov    %rcx,0x70(%rsp)
  0x0000000116b4c557: mov    %rdx,0x68(%rsp)
  0x0000000116b4c55c: mov    %rbx,0x60(%rsp)
  0x0000000116b4c561: mov    %rbp,0x50(%rsp)
  0x0000000116b4c566: mov    %rsi,0x48(%rsp)
  0x0000000116b4c56b: mov    %rdi,0x40(%rsp)
  0x0000000116b4c570: mov    %r8,0x38(%rsp)
  0x0000000116b4c575: mov    %r9,0x30(%rsp)
  0x0000000116b4c57a: mov    %r10,0x28(%rsp)
  0x0000000116b4c57f: mov    %r11,0x20(%rsp)
  0x0000000116b4c584: mov    %r12,0x18(%rsp)
  0x0000000116b4c589: mov    %r13,0x10(%rsp)
  0x0000000116b4c58e: mov    %r14,0x8(%rsp)
  0x0000000116b4c593: mov    %r15,(%rsp)
  0x0000000116b4c597: movabs $0x10cc63f17,%rdi
  0x0000000116b4c5a1: movabs $0x116b4c541,%rsi
  0x0000000116b4c5ab: mov    %rsp,%rdx
  0x0000000116b4c5ae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c5b2: callq  0x000000010c7dd830
  0x0000000116b4c5b7: hlt    
  0x0000000116b4c5b8: pop    %r10
  0x0000000116b4c5ba: mov    %r15,%rdi
  0x0000000116b4c5bd: mov    %rbp,0x290(%r15)
  0x0000000116b4c5c4: mov    %rax,0x280(%r15)
  0x0000000116b4c5cb: test   $0xf,%esp
  0x0000000116b4c5d1: je     0x0000000116b4c5e9
  0x0000000116b4c5d7: sub    $0x8,%rsp
  0x0000000116b4c5db: callq  0x000000010c5881a0
  0x0000000116b4c5e0: add    $0x8,%rsp
  0x0000000116b4c5e4: jmpq   0x0000000116b4c5ee
  0x0000000116b4c5e9: callq  0x000000010c5881a0
  0x0000000116b4c5ee: push   %rax
  0x0000000116b4c5ef: push   %rdi
  0x0000000116b4c5f0: push   %rsi
  0x0000000116b4c5f1: push   %rdx
  0x0000000116b4c5f2: push   %rcx
  0x0000000116b4c5f3: push   %r8
  0x0000000116b4c5f5: push   %r9
  0x0000000116b4c5f7: push   %r10
  0x0000000116b4c5f9: mov    %rsp,%r10
  0x0000000116b4c5fc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c600: push   %r10
  0x0000000116b4c602: push   %r11
  0x0000000116b4c604: mov    $0x109,%edi
  0x0000000116b4c609: movabs $0x7ff815049fd5,%r10
  0x0000000116b4c613: callq  *%r10
  0x0000000116b4c616: pop    %r11
  0x0000000116b4c618: pop    %rsp
  0x0000000116b4c619: pop    %r10
  0x0000000116b4c61b: pop    %r9
  0x0000000116b4c61d: pop    %r8
  0x0000000116b4c61f: pop    %rcx
  0x0000000116b4c620: pop    %rdx
  0x0000000116b4c621: pop    %rsi
  0x0000000116b4c622: pop    %rdi
  0x0000000116b4c623: cmp    %rax,%r15
  0x0000000116b4c626: je     0x0000000116b4c6a3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4c62c: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c631: sub    $0x80,%rsp
  0x0000000116b4c638: mov    %rax,0x78(%rsp)
  0x0000000116b4c63d: mov    %rcx,0x70(%rsp)
  0x0000000116b4c642: mov    %rdx,0x68(%rsp)
  0x0000000116b4c647: mov    %rbx,0x60(%rsp)
  0x0000000116b4c64c: mov    %rbp,0x50(%rsp)
  0x0000000116b4c651: mov    %rsi,0x48(%rsp)
  0x0000000116b4c656: mov    %rdi,0x40(%rsp)
  0x0000000116b4c65b: mov    %r8,0x38(%rsp)
  0x0000000116b4c660: mov    %r9,0x30(%rsp)
  0x0000000116b4c665: mov    %r10,0x28(%rsp)
  0x0000000116b4c66a: mov    %r11,0x20(%rsp)
  0x0000000116b4c66f: mov    %r12,0x18(%rsp)
  0x0000000116b4c674: mov    %r13,0x10(%rsp)
  0x0000000116b4c679: mov    %r14,0x8(%rsp)
  0x0000000116b4c67e: mov    %r15,(%rsp)
  0x0000000116b4c682: movabs $0x10cc6405e,%rdi
  0x0000000116b4c68c: movabs $0x116b4c62c,%rsi
  0x0000000116b4c696: mov    %rsp,%rdx
  0x0000000116b4c699: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c69d: callq  0x000000010c7dd830
  0x0000000116b4c6a2: hlt    
  0x0000000116b4c6a3: pop    %rax
  0x0000000116b4c6a4: movabs $0x0,%r10
  0x0000000116b4c6ae: mov    %r10,0x280(%r15)
  0x0000000116b4c6b5: movabs $0x0,%r10
  0x0000000116b4c6bf: mov    %r10,0x290(%r15)
  0x0000000116b4c6c6: movabs $0x0,%r10
  0x0000000116b4c6d0: mov    %r10,0x288(%r15)
  0x0000000116b4c6d7: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c6df: je     0x0000000116b4c6ea
  0x0000000116b4c6e5: jmpq   0x0000000116b30420
  0x0000000116b4c6ea: mov    -0x38(%rbp),%r13
  0x0000000116b4c6ee: mov    -0x30(%rbp),%r14
  0x0000000116b4c6f2: retq   
  0x0000000116b4c6f3: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c6f8: sub    $0x80,%rsp
  0x0000000116b4c6ff: mov    %rax,0x78(%rsp)
  0x0000000116b4c704: mov    %rcx,0x70(%rsp)
  0x0000000116b4c709: mov    %rdx,0x68(%rsp)
  0x0000000116b4c70e: mov    %rbx,0x60(%rsp)
  0x0000000116b4c713: mov    %rbp,0x50(%rsp)
  0x0000000116b4c718: mov    %rsi,0x48(%rsp)
  0x0000000116b4c71d: mov    %rdi,0x40(%rsp)
  0x0000000116b4c722: mov    %r8,0x38(%rsp)
  0x0000000116b4c727: mov    %r9,0x30(%rsp)
  0x0000000116b4c72c: mov    %r10,0x28(%rsp)
  0x0000000116b4c731: mov    %r11,0x20(%rsp)
  0x0000000116b4c736: mov    %r12,0x18(%rsp)
  0x0000000116b4c73b: mov    %r13,0x10(%rsp)
  0x0000000116b4c740: mov    %r14,0x8(%rsp)
  0x0000000116b4c745: mov    %r15,(%rsp)
  0x0000000116b4c749: movabs $0x10cb763be,%rdi
  0x0000000116b4c753: movabs $0x116b4c6f3,%rsi
  0x0000000116b4c75d: mov    %rsp,%rdx
  0x0000000116b4c760: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c764: callq  0x000000010c7dd830
  0x0000000116b4c769: hlt    
  0x0000000116b4c76a: movzbl 0x8(%r13),%ebx
  0x0000000116b4c76f: add    $0x8,%r13
  0x0000000116b4c773: movabs $0x10ce39680,%r10
  0x0000000116b4c77d: jmpq   *(%r10,%rbx,8)
  0x0000000116b4c781: movq   $0x0,-0x10(%rbp)
  0x0000000116b4c789: mov    -0x38(%rbp),%r13
  0x0000000116b4c78d: mov    -0x30(%rbp),%r14
  0x0000000116b4c791: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c799: je     0x0000000116b4ca6f
  0x0000000116b4c79f: callq  0x0000000116b4c7a9
  0x0000000116b4c7a4: jmpq   0x0000000116b4c9f8
  0x0000000116b4c7a9: lea    0x8(%rsp),%rax
  0x0000000116b4c7ae: mov    %r13,-0x38(%rbp)
  0x0000000116b4c7b2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4c7ba: je     0x0000000116b4c837
  0x0000000116b4c7c0: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c7c5: sub    $0x80,%rsp
  0x0000000116b4c7cc: mov    %rax,0x78(%rsp)
  0x0000000116b4c7d1: mov    %rcx,0x70(%rsp)
  0x0000000116b4c7d6: mov    %rdx,0x68(%rsp)
  0x0000000116b4c7db: mov    %rbx,0x60(%rsp)
  0x0000000116b4c7e0: mov    %rbp,0x50(%rsp)
  0x0000000116b4c7e5: mov    %rsi,0x48(%rsp)
  0x0000000116b4c7ea: mov    %rdi,0x40(%rsp)
  0x0000000116b4c7ef: mov    %r8,0x38(%rsp)
  0x0000000116b4c7f4: mov    %r9,0x30(%rsp)
  0x0000000116b4c7f9: mov    %r10,0x28(%rsp)
  0x0000000116b4c7fe: mov    %r11,0x20(%rsp)
  0x0000000116b4c803: mov    %r12,0x18(%rsp)
  0x0000000116b4c808: mov    %r13,0x10(%rsp)
  0x0000000116b4c80d: mov    %r14,0x8(%rsp)
  0x0000000116b4c812: mov    %r15,(%rsp)
  0x0000000116b4c816: movabs $0x10cc2363b,%rdi
  0x0000000116b4c820: movabs $0x116b4c7c0,%rsi
  0x0000000116b4c82a: mov    %rsp,%rdx
  0x0000000116b4c82d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c831: callq  0x000000010c7dd830
  0x0000000116b4c836: hlt    
  0x0000000116b4c837: push   %r10
  0x0000000116b4c839: cmp    -0x9d05f90(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4c840: je     0x0000000116b4c8bd
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4c846: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c84b: sub    $0x80,%rsp
  0x0000000116b4c852: mov    %rax,0x78(%rsp)
  0x0000000116b4c857: mov    %rcx,0x70(%rsp)
  0x0000000116b4c85c: mov    %rdx,0x68(%rsp)
  0x0000000116b4c861: mov    %rbx,0x60(%rsp)
  0x0000000116b4c866: mov    %rbp,0x50(%rsp)
  0x0000000116b4c86b: mov    %rsi,0x48(%rsp)
  0x0000000116b4c870: mov    %rdi,0x40(%rsp)
  0x0000000116b4c875: mov    %r8,0x38(%rsp)
  0x0000000116b4c87a: mov    %r9,0x30(%rsp)
  0x0000000116b4c87f: mov    %r10,0x28(%rsp)
  0x0000000116b4c884: mov    %r11,0x20(%rsp)
  0x0000000116b4c889: mov    %r12,0x18(%rsp)
  0x0000000116b4c88e: mov    %r13,0x10(%rsp)
  0x0000000116b4c893: mov    %r14,0x8(%rsp)
  0x0000000116b4c898: mov    %r15,(%rsp)
  0x0000000116b4c89c: movabs $0x10cc63f17,%rdi
  0x0000000116b4c8a6: movabs $0x116b4c846,%rsi
  0x0000000116b4c8b0: mov    %rsp,%rdx
  0x0000000116b4c8b3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c8b7: callq  0x000000010c7dd830
  0x0000000116b4c8bc: hlt    
  0x0000000116b4c8bd: pop    %r10
  0x0000000116b4c8bf: mov    %r15,%rdi
  0x0000000116b4c8c2: mov    %rbp,0x290(%r15)
  0x0000000116b4c8c9: mov    %rax,0x280(%r15)
  0x0000000116b4c8d0: test   $0xf,%esp
  0x0000000116b4c8d6: je     0x0000000116b4c8ee
  0x0000000116b4c8dc: sub    $0x8,%rsp
  0x0000000116b4c8e0: callq  0x000000010c5881a0
  0x0000000116b4c8e5: add    $0x8,%rsp
  0x0000000116b4c8e9: jmpq   0x0000000116b4c8f3
  0x0000000116b4c8ee: callq  0x000000010c5881a0
  0x0000000116b4c8f3: push   %rax
  0x0000000116b4c8f4: push   %rdi
  0x0000000116b4c8f5: push   %rsi
  0x0000000116b4c8f6: push   %rdx
  0x0000000116b4c8f7: push   %rcx
  0x0000000116b4c8f8: push   %r8
  0x0000000116b4c8fa: push   %r9
  0x0000000116b4c8fc: push   %r10
  0x0000000116b4c8fe: mov    %rsp,%r10
  0x0000000116b4c901: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c905: push   %r10
  0x0000000116b4c907: push   %r11
  0x0000000116b4c909: mov    $0x109,%edi
  0x0000000116b4c90e: movabs $0x7ff815049fd5,%r10
  0x0000000116b4c918: callq  *%r10
  0x0000000116b4c91b: pop    %r11
  0x0000000116b4c91d: pop    %rsp
  0x0000000116b4c91e: pop    %r10
  0x0000000116b4c920: pop    %r9
  0x0000000116b4c922: pop    %r8
  0x0000000116b4c924: pop    %rcx
  0x0000000116b4c925: pop    %rdx
  0x0000000116b4c926: pop    %rsi
  0x0000000116b4c927: pop    %rdi
  0x0000000116b4c928: cmp    %rax,%r15
  0x0000000116b4c92b: je     0x0000000116b4c9a8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4c931: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c936: sub    $0x80,%rsp
  0x0000000116b4c93d: mov    %rax,0x78(%rsp)
  0x0000000116b4c942: mov    %rcx,0x70(%rsp)
  0x0000000116b4c947: mov    %rdx,0x68(%rsp)
  0x0000000116b4c94c: mov    %rbx,0x60(%rsp)
  0x0000000116b4c951: mov    %rbp,0x50(%rsp)
  0x0000000116b4c956: mov    %rsi,0x48(%rsp)
  0x0000000116b4c95b: mov    %rdi,0x40(%rsp)
  0x0000000116b4c960: mov    %r8,0x38(%rsp)
  0x0000000116b4c965: mov    %r9,0x30(%rsp)
  0x0000000116b4c96a: mov    %r10,0x28(%rsp)
  0x0000000116b4c96f: mov    %r11,0x20(%rsp)
  0x0000000116b4c974: mov    %r12,0x18(%rsp)
  0x0000000116b4c979: mov    %r13,0x10(%rsp)
  0x0000000116b4c97e: mov    %r14,0x8(%rsp)
  0x0000000116b4c983: mov    %r15,(%rsp)
  0x0000000116b4c987: movabs $0x10cc6405e,%rdi
  0x0000000116b4c991: movabs $0x116b4c931,%rsi
  0x0000000116b4c99b: mov    %rsp,%rdx
  0x0000000116b4c99e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4c9a2: callq  0x000000010c7dd830
  0x0000000116b4c9a7: hlt    
  0x0000000116b4c9a8: pop    %rax
  0x0000000116b4c9a9: movabs $0x0,%r10
  0x0000000116b4c9b3: mov    %r10,0x280(%r15)
  0x0000000116b4c9ba: movabs $0x0,%r10
  0x0000000116b4c9c4: mov    %r10,0x290(%r15)
  0x0000000116b4c9cb: movabs $0x0,%r10
  0x0000000116b4c9d5: mov    %r10,0x288(%r15)
  0x0000000116b4c9dc: cmpq   $0x0,0x8(%r15)
  0x0000000116b4c9e4: je     0x0000000116b4c9ef
  0x0000000116b4c9ea: jmpq   0x0000000116b30420
  0x0000000116b4c9ef: mov    -0x38(%rbp),%r13
  0x0000000116b4c9f3: mov    -0x30(%rbp),%r14
  0x0000000116b4c9f7: retq   
  0x0000000116b4c9f8: mov    %rsp,-0x28(%rsp)
  0x0000000116b4c9fd: sub    $0x80,%rsp
  0x0000000116b4ca04: mov    %rax,0x78(%rsp)
  0x0000000116b4ca09: mov    %rcx,0x70(%rsp)
  0x0000000116b4ca0e: mov    %rdx,0x68(%rsp)
  0x0000000116b4ca13: mov    %rbx,0x60(%rsp)
  0x0000000116b4ca18: mov    %rbp,0x50(%rsp)
  0x0000000116b4ca1d: mov    %rsi,0x48(%rsp)
  0x0000000116b4ca22: mov    %rdi,0x40(%rsp)
  0x0000000116b4ca27: mov    %r8,0x38(%rsp)
  0x0000000116b4ca2c: mov    %r9,0x30(%rsp)
  0x0000000116b4ca31: mov    %r10,0x28(%rsp)
  0x0000000116b4ca36: mov    %r11,0x20(%rsp)
  0x0000000116b4ca3b: mov    %r12,0x18(%rsp)
  0x0000000116b4ca40: mov    %r13,0x10(%rsp)
  0x0000000116b4ca45: mov    %r14,0x8(%rsp)
  0x0000000116b4ca4a: mov    %r15,(%rsp)
  0x0000000116b4ca4e: movabs $0x10cb763be,%rdi
  0x0000000116b4ca58: movabs $0x116b4c9f8,%rsi
  0x0000000116b4ca62: mov    %rsp,%rdx
  0x0000000116b4ca65: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ca69: callq  0x000000010c7dd830
  0x0000000116b4ca6e: hlt    
  0x0000000116b4ca6f: movzbl 0x8(%r13),%ebx
  0x0000000116b4ca74: add    $0x8,%r13
  0x0000000116b4ca78: movabs $0x10ce39e80,%r10
  0x0000000116b4ca82: jmpq   *(%r10,%rbx,8)
  0x0000000116b4ca86: movq   $0x0,-0x10(%rbp)
  0x0000000116b4ca8e: mov    -0x38(%rbp),%r13
  0x0000000116b4ca92: mov    -0x30(%rbp),%r14
  0x0000000116b4ca96: cmpq   $0x0,0x8(%r15)
  0x0000000116b4ca9e: je     0x0000000116b4cd74
  0x0000000116b4caa4: callq  0x0000000116b4caae
  0x0000000116b4caa9: jmpq   0x0000000116b4ccfd
  0x0000000116b4caae: lea    0x8(%rsp),%rax
  0x0000000116b4cab3: mov    %r13,-0x38(%rbp)
  0x0000000116b4cab7: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4cabf: je     0x0000000116b4cb3c
  0x0000000116b4cac5: mov    %rsp,-0x28(%rsp)
  0x0000000116b4caca: sub    $0x80,%rsp
  0x0000000116b4cad1: mov    %rax,0x78(%rsp)
  0x0000000116b4cad6: mov    %rcx,0x70(%rsp)
  0x0000000116b4cadb: mov    %rdx,0x68(%rsp)
  0x0000000116b4cae0: mov    %rbx,0x60(%rsp)
  0x0000000116b4cae5: mov    %rbp,0x50(%rsp)
  0x0000000116b4caea: mov    %rsi,0x48(%rsp)
  0x0000000116b4caef: mov    %rdi,0x40(%rsp)
  0x0000000116b4caf4: mov    %r8,0x38(%rsp)
  0x0000000116b4caf9: mov    %r9,0x30(%rsp)
  0x0000000116b4cafe: mov    %r10,0x28(%rsp)
  0x0000000116b4cb03: mov    %r11,0x20(%rsp)
  0x0000000116b4cb08: mov    %r12,0x18(%rsp)
  0x0000000116b4cb0d: mov    %r13,0x10(%rsp)
  0x0000000116b4cb12: mov    %r14,0x8(%rsp)
  0x0000000116b4cb17: mov    %r15,(%rsp)
  0x0000000116b4cb1b: movabs $0x10cc2363b,%rdi
  0x0000000116b4cb25: movabs $0x116b4cac5,%rsi
  0x0000000116b4cb2f: mov    %rsp,%rdx
  0x0000000116b4cb32: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cb36: callq  0x000000010c7dd830
  0x0000000116b4cb3b: hlt    
  0x0000000116b4cb3c: push   %r10
  0x0000000116b4cb3e: cmp    -0x9d06295(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4cb45: je     0x0000000116b4cbc2
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4cb4b: mov    %rsp,-0x28(%rsp)
  0x0000000116b4cb50: sub    $0x80,%rsp
  0x0000000116b4cb57: mov    %rax,0x78(%rsp)
  0x0000000116b4cb5c: mov    %rcx,0x70(%rsp)
  0x0000000116b4cb61: mov    %rdx,0x68(%rsp)
  0x0000000116b4cb66: mov    %rbx,0x60(%rsp)
  0x0000000116b4cb6b: mov    %rbp,0x50(%rsp)
  0x0000000116b4cb70: mov    %rsi,0x48(%rsp)
  0x0000000116b4cb75: mov    %rdi,0x40(%rsp)
  0x0000000116b4cb7a: mov    %r8,0x38(%rsp)
  0x0000000116b4cb7f: mov    %r9,0x30(%rsp)
  0x0000000116b4cb84: mov    %r10,0x28(%rsp)
  0x0000000116b4cb89: mov    %r11,0x20(%rsp)
  0x0000000116b4cb8e: mov    %r12,0x18(%rsp)
  0x0000000116b4cb93: mov    %r13,0x10(%rsp)
  0x0000000116b4cb98: mov    %r14,0x8(%rsp)
  0x0000000116b4cb9d: mov    %r15,(%rsp)
  0x0000000116b4cba1: movabs $0x10cc63f17,%rdi
  0x0000000116b4cbab: movabs $0x116b4cb4b,%rsi
  0x0000000116b4cbb5: mov    %rsp,%rdx
  0x0000000116b4cbb8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cbbc: callq  0x000000010c7dd830
  0x0000000116b4cbc1: hlt    
  0x0000000116b4cbc2: pop    %r10
  0x0000000116b4cbc4: mov    %r15,%rdi
  0x0000000116b4cbc7: mov    %rbp,0x290(%r15)
  0x0000000116b4cbce: mov    %rax,0x280(%r15)
  0x0000000116b4cbd5: test   $0xf,%esp
  0x0000000116b4cbdb: je     0x0000000116b4cbf3
  0x0000000116b4cbe1: sub    $0x8,%rsp
  0x0000000116b4cbe5: callq  0x000000010c5881a0
  0x0000000116b4cbea: add    $0x8,%rsp
  0x0000000116b4cbee: jmpq   0x0000000116b4cbf8
  0x0000000116b4cbf3: callq  0x000000010c5881a0
  0x0000000116b4cbf8: push   %rax
  0x0000000116b4cbf9: push   %rdi
  0x0000000116b4cbfa: push   %rsi
  0x0000000116b4cbfb: push   %rdx
  0x0000000116b4cbfc: push   %rcx
  0x0000000116b4cbfd: push   %r8
  0x0000000116b4cbff: push   %r9
  0x0000000116b4cc01: push   %r10
  0x0000000116b4cc03: mov    %rsp,%r10
  0x0000000116b4cc06: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cc0a: push   %r10
  0x0000000116b4cc0c: push   %r11
  0x0000000116b4cc0e: mov    $0x109,%edi
  0x0000000116b4cc13: movabs $0x7ff815049fd5,%r10
  0x0000000116b4cc1d: callq  *%r10
  0x0000000116b4cc20: pop    %r11
  0x0000000116b4cc22: pop    %rsp
  0x0000000116b4cc23: pop    %r10
  0x0000000116b4cc25: pop    %r9
  0x0000000116b4cc27: pop    %r8
  0x0000000116b4cc29: pop    %rcx
  0x0000000116b4cc2a: pop    %rdx
  0x0000000116b4cc2b: pop    %rsi
  0x0000000116b4cc2c: pop    %rdi
  0x0000000116b4cc2d: cmp    %rax,%r15
  0x0000000116b4cc30: je     0x0000000116b4ccad
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4cc36: mov    %rsp,-0x28(%rsp)
  0x0000000116b4cc3b: sub    $0x80,%rsp
  0x0000000116b4cc42: mov    %rax,0x78(%rsp)
  0x0000000116b4cc47: mov    %rcx,0x70(%rsp)
  0x0000000116b4cc4c: mov    %rdx,0x68(%rsp)
  0x0000000116b4cc51: mov    %rbx,0x60(%rsp)
  0x0000000116b4cc56: mov    %rbp,0x50(%rsp)
  0x0000000116b4cc5b: mov    %rsi,0x48(%rsp)
  0x0000000116b4cc60: mov    %rdi,0x40(%rsp)
  0x0000000116b4cc65: mov    %r8,0x38(%rsp)
  0x0000000116b4cc6a: mov    %r9,0x30(%rsp)
  0x0000000116b4cc6f: mov    %r10,0x28(%rsp)
  0x0000000116b4cc74: mov    %r11,0x20(%rsp)
  0x0000000116b4cc79: mov    %r12,0x18(%rsp)
  0x0000000116b4cc7e: mov    %r13,0x10(%rsp)
  0x0000000116b4cc83: mov    %r14,0x8(%rsp)
  0x0000000116b4cc88: mov    %r15,(%rsp)
  0x0000000116b4cc8c: movabs $0x10cc6405e,%rdi
  0x0000000116b4cc96: movabs $0x116b4cc36,%rsi
  0x0000000116b4cca0: mov    %rsp,%rdx
  0x0000000116b4cca3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cca7: callq  0x000000010c7dd830
  0x0000000116b4ccac: hlt    
  0x0000000116b4ccad: pop    %rax
  0x0000000116b4ccae: movabs $0x0,%r10
  0x0000000116b4ccb8: mov    %r10,0x280(%r15)
  0x0000000116b4ccbf: movabs $0x0,%r10
  0x0000000116b4ccc9: mov    %r10,0x290(%r15)
  0x0000000116b4ccd0: movabs $0x0,%r10
  0x0000000116b4ccda: mov    %r10,0x288(%r15)
  0x0000000116b4cce1: cmpq   $0x0,0x8(%r15)
  0x0000000116b4cce9: je     0x0000000116b4ccf4
  0x0000000116b4ccef: jmpq   0x0000000116b30420
  0x0000000116b4ccf4: mov    -0x38(%rbp),%r13
  0x0000000116b4ccf8: mov    -0x30(%rbp),%r14
  0x0000000116b4ccfc: retq   
  0x0000000116b4ccfd: mov    %rsp,-0x28(%rsp)
  0x0000000116b4cd02: sub    $0x80,%rsp
  0x0000000116b4cd09: mov    %rax,0x78(%rsp)
  0x0000000116b4cd0e: mov    %rcx,0x70(%rsp)
  0x0000000116b4cd13: mov    %rdx,0x68(%rsp)
  0x0000000116b4cd18: mov    %rbx,0x60(%rsp)
  0x0000000116b4cd1d: mov    %rbp,0x50(%rsp)
  0x0000000116b4cd22: mov    %rsi,0x48(%rsp)
  0x0000000116b4cd27: mov    %rdi,0x40(%rsp)
  0x0000000116b4cd2c: mov    %r8,0x38(%rsp)
  0x0000000116b4cd31: mov    %r9,0x30(%rsp)
  0x0000000116b4cd36: mov    %r10,0x28(%rsp)
  0x0000000116b4cd3b: mov    %r11,0x20(%rsp)
  0x0000000116b4cd40: mov    %r12,0x18(%rsp)
  0x0000000116b4cd45: mov    %r13,0x10(%rsp)
  0x0000000116b4cd4a: mov    %r14,0x8(%rsp)
  0x0000000116b4cd4f: mov    %r15,(%rsp)
  0x0000000116b4cd53: movabs $0x10cb763be,%rdi
  0x0000000116b4cd5d: movabs $0x116b4ccfd,%rsi
  0x0000000116b4cd67: mov    %rsp,%rdx
  0x0000000116b4cd6a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cd6e: callq  0x000000010c7dd830
  0x0000000116b4cd73: hlt    
  0x0000000116b4cd74: movzbl 0x8(%r13),%ebx
  0x0000000116b4cd79: add    $0x8,%r13
  0x0000000116b4cd7d: movabs $0x10ce3a680,%r10
  0x0000000116b4cd87: jmpq   *(%r10,%rbx,8)
  0x0000000116b4cd8b: movq   $0x0,-0x10(%rbp)
  0x0000000116b4cd93: mov    -0x38(%rbp),%r13
  0x0000000116b4cd97: mov    -0x30(%rbp),%r14
  0x0000000116b4cd9b: cmpq   $0x0,0x8(%r15)
  0x0000000116b4cda3: je     0x0000000116b4d079
  0x0000000116b4cda9: callq  0x0000000116b4cdb3
  0x0000000116b4cdae: jmpq   0x0000000116b4d002
  0x0000000116b4cdb3: lea    0x8(%rsp),%rax
  0x0000000116b4cdb8: mov    %r13,-0x38(%rbp)
  0x0000000116b4cdbc: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4cdc4: je     0x0000000116b4ce41
  0x0000000116b4cdca: mov    %rsp,-0x28(%rsp)
  0x0000000116b4cdcf: sub    $0x80,%rsp
  0x0000000116b4cdd6: mov    %rax,0x78(%rsp)
  0x0000000116b4cddb: mov    %rcx,0x70(%rsp)
  0x0000000116b4cde0: mov    %rdx,0x68(%rsp)
  0x0000000116b4cde5: mov    %rbx,0x60(%rsp)
  0x0000000116b4cdea: mov    %rbp,0x50(%rsp)
  0x0000000116b4cdef: mov    %rsi,0x48(%rsp)
  0x0000000116b4cdf4: mov    %rdi,0x40(%rsp)
  0x0000000116b4cdf9: mov    %r8,0x38(%rsp)
  0x0000000116b4cdfe: mov    %r9,0x30(%rsp)
  0x0000000116b4ce03: mov    %r10,0x28(%rsp)
  0x0000000116b4ce08: mov    %r11,0x20(%rsp)
  0x0000000116b4ce0d: mov    %r12,0x18(%rsp)
  0x0000000116b4ce12: mov    %r13,0x10(%rsp)
  0x0000000116b4ce17: mov    %r14,0x8(%rsp)
  0x0000000116b4ce1c: mov    %r15,(%rsp)
  0x0000000116b4ce20: movabs $0x10cc2363b,%rdi
  0x0000000116b4ce2a: movabs $0x116b4cdca,%rsi
  0x0000000116b4ce34: mov    %rsp,%rdx
  0x0000000116b4ce37: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ce3b: callq  0x000000010c7dd830
  0x0000000116b4ce40: hlt    
  0x0000000116b4ce41: push   %r10
  0x0000000116b4ce43: cmp    -0x9d0659a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4ce4a: je     0x0000000116b4cec7
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4ce50: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ce55: sub    $0x80,%rsp
  0x0000000116b4ce5c: mov    %rax,0x78(%rsp)
  0x0000000116b4ce61: mov    %rcx,0x70(%rsp)
  0x0000000116b4ce66: mov    %rdx,0x68(%rsp)
  0x0000000116b4ce6b: mov    %rbx,0x60(%rsp)
  0x0000000116b4ce70: mov    %rbp,0x50(%rsp)
  0x0000000116b4ce75: mov    %rsi,0x48(%rsp)
  0x0000000116b4ce7a: mov    %rdi,0x40(%rsp)
  0x0000000116b4ce7f: mov    %r8,0x38(%rsp)
  0x0000000116b4ce84: mov    %r9,0x30(%rsp)
  0x0000000116b4ce89: mov    %r10,0x28(%rsp)
  0x0000000116b4ce8e: mov    %r11,0x20(%rsp)
  0x0000000116b4ce93: mov    %r12,0x18(%rsp)
  0x0000000116b4ce98: mov    %r13,0x10(%rsp)
  0x0000000116b4ce9d: mov    %r14,0x8(%rsp)
  0x0000000116b4cea2: mov    %r15,(%rsp)
  0x0000000116b4cea6: movabs $0x10cc63f17,%rdi
  0x0000000116b4ceb0: movabs $0x116b4ce50,%rsi
  0x0000000116b4ceba: mov    %rsp,%rdx
  0x0000000116b4cebd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cec1: callq  0x000000010c7dd830
  0x0000000116b4cec6: hlt    
  0x0000000116b4cec7: pop    %r10
  0x0000000116b4cec9: mov    %r15,%rdi
  0x0000000116b4cecc: mov    %rbp,0x290(%r15)
  0x0000000116b4ced3: mov    %rax,0x280(%r15)
  0x0000000116b4ceda: test   $0xf,%esp
  0x0000000116b4cee0: je     0x0000000116b4cef8
  0x0000000116b4cee6: sub    $0x8,%rsp
  0x0000000116b4ceea: callq  0x000000010c5881a0
  0x0000000116b4ceef: add    $0x8,%rsp
  0x0000000116b4cef3: jmpq   0x0000000116b4cefd
  0x0000000116b4cef8: callq  0x000000010c5881a0
  0x0000000116b4cefd: push   %rax
  0x0000000116b4cefe: push   %rdi
  0x0000000116b4ceff: push   %rsi
  0x0000000116b4cf00: push   %rdx
  0x0000000116b4cf01: push   %rcx
  0x0000000116b4cf02: push   %r8
  0x0000000116b4cf04: push   %r9
  0x0000000116b4cf06: push   %r10
  0x0000000116b4cf08: mov    %rsp,%r10
  0x0000000116b4cf0b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cf0f: push   %r10
  0x0000000116b4cf11: push   %r11
  0x0000000116b4cf13: mov    $0x109,%edi
  0x0000000116b4cf18: movabs $0x7ff815049fd5,%r10
  0x0000000116b4cf22: callq  *%r10
  0x0000000116b4cf25: pop    %r11
  0x0000000116b4cf27: pop    %rsp
  0x0000000116b4cf28: pop    %r10
  0x0000000116b4cf2a: pop    %r9
  0x0000000116b4cf2c: pop    %r8
  0x0000000116b4cf2e: pop    %rcx
  0x0000000116b4cf2f: pop    %rdx
  0x0000000116b4cf30: pop    %rsi
  0x0000000116b4cf31: pop    %rdi
  0x0000000116b4cf32: cmp    %rax,%r15
  0x0000000116b4cf35: je     0x0000000116b4cfb2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4cf3b: mov    %rsp,-0x28(%rsp)
  0x0000000116b4cf40: sub    $0x80,%rsp
  0x0000000116b4cf47: mov    %rax,0x78(%rsp)
  0x0000000116b4cf4c: mov    %rcx,0x70(%rsp)
  0x0000000116b4cf51: mov    %rdx,0x68(%rsp)
  0x0000000116b4cf56: mov    %rbx,0x60(%rsp)
  0x0000000116b4cf5b: mov    %rbp,0x50(%rsp)
  0x0000000116b4cf60: mov    %rsi,0x48(%rsp)
  0x0000000116b4cf65: mov    %rdi,0x40(%rsp)
  0x0000000116b4cf6a: mov    %r8,0x38(%rsp)
  0x0000000116b4cf6f: mov    %r9,0x30(%rsp)
  0x0000000116b4cf74: mov    %r10,0x28(%rsp)
  0x0000000116b4cf79: mov    %r11,0x20(%rsp)
  0x0000000116b4cf7e: mov    %r12,0x18(%rsp)
  0x0000000116b4cf83: mov    %r13,0x10(%rsp)
  0x0000000116b4cf88: mov    %r14,0x8(%rsp)
  0x0000000116b4cf8d: mov    %r15,(%rsp)
  0x0000000116b4cf91: movabs $0x10cc6405e,%rdi
  0x0000000116b4cf9b: movabs $0x116b4cf3b,%rsi
  0x0000000116b4cfa5: mov    %rsp,%rdx
  0x0000000116b4cfa8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4cfac: callq  0x000000010c7dd830
  0x0000000116b4cfb1: hlt    
  0x0000000116b4cfb2: pop    %rax
  0x0000000116b4cfb3: movabs $0x0,%r10
  0x0000000116b4cfbd: mov    %r10,0x280(%r15)
  0x0000000116b4cfc4: movabs $0x0,%r10
  0x0000000116b4cfce: mov    %r10,0x290(%r15)
  0x0000000116b4cfd5: movabs $0x0,%r10
  0x0000000116b4cfdf: mov    %r10,0x288(%r15)
  0x0000000116b4cfe6: cmpq   $0x0,0x8(%r15)
  0x0000000116b4cfee: je     0x0000000116b4cff9
  0x0000000116b4cff4: jmpq   0x0000000116b30420
  0x0000000116b4cff9: mov    -0x38(%rbp),%r13
  0x0000000116b4cffd: mov    -0x30(%rbp),%r14
  0x0000000116b4d001: retq   
  0x0000000116b4d002: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d007: sub    $0x80,%rsp
  0x0000000116b4d00e: mov    %rax,0x78(%rsp)
  0x0000000116b4d013: mov    %rcx,0x70(%rsp)
  0x0000000116b4d018: mov    %rdx,0x68(%rsp)
  0x0000000116b4d01d: mov    %rbx,0x60(%rsp)
  0x0000000116b4d022: mov    %rbp,0x50(%rsp)
  0x0000000116b4d027: mov    %rsi,0x48(%rsp)
  0x0000000116b4d02c: mov    %rdi,0x40(%rsp)
  0x0000000116b4d031: mov    %r8,0x38(%rsp)
  0x0000000116b4d036: mov    %r9,0x30(%rsp)
  0x0000000116b4d03b: mov    %r10,0x28(%rsp)
  0x0000000116b4d040: mov    %r11,0x20(%rsp)
  0x0000000116b4d045: mov    %r12,0x18(%rsp)
  0x0000000116b4d04a: mov    %r13,0x10(%rsp)
  0x0000000116b4d04f: mov    %r14,0x8(%rsp)
  0x0000000116b4d054: mov    %r15,(%rsp)
  0x0000000116b4d058: movabs $0x10cb763be,%rdi
  0x0000000116b4d062: movabs $0x116b4d002,%rsi
  0x0000000116b4d06c: mov    %rsp,%rdx
  0x0000000116b4d06f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d073: callq  0x000000010c7dd830
  0x0000000116b4d078: hlt    
  0x0000000116b4d079: movzbl 0x8(%r13),%ebx
  0x0000000116b4d07e: add    $0x8,%r13
  0x0000000116b4d082: movabs $0x10ce3b680,%r10
  0x0000000116b4d08c: jmpq   *(%r10,%rbx,8)
  0x0000000116b4d090: movq   $0x0,-0x10(%rbp)
  0x0000000116b4d098: mov    -0x38(%rbp),%r13
  0x0000000116b4d09c: mov    -0x30(%rbp),%r14
  0x0000000116b4d0a0: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d0a8: je     0x0000000116b4d37e
  0x0000000116b4d0ae: callq  0x0000000116b4d0b8
  0x0000000116b4d0b3: jmpq   0x0000000116b4d307
  0x0000000116b4d0b8: lea    0x8(%rsp),%rax
  0x0000000116b4d0bd: mov    %r13,-0x38(%rbp)
  0x0000000116b4d0c1: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4d0c9: je     0x0000000116b4d146
  0x0000000116b4d0cf: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d0d4: sub    $0x80,%rsp
  0x0000000116b4d0db: mov    %rax,0x78(%rsp)
  0x0000000116b4d0e0: mov    %rcx,0x70(%rsp)
  0x0000000116b4d0e5: mov    %rdx,0x68(%rsp)
  0x0000000116b4d0ea: mov    %rbx,0x60(%rsp)
  0x0000000116b4d0ef: mov    %rbp,0x50(%rsp)
  0x0000000116b4d0f4: mov    %rsi,0x48(%rsp)
  0x0000000116b4d0f9: mov    %rdi,0x40(%rsp)
  0x0000000116b4d0fe: mov    %r8,0x38(%rsp)
  0x0000000116b4d103: mov    %r9,0x30(%rsp)
  0x0000000116b4d108: mov    %r10,0x28(%rsp)
  0x0000000116b4d10d: mov    %r11,0x20(%rsp)
  0x0000000116b4d112: mov    %r12,0x18(%rsp)
  0x0000000116b4d117: mov    %r13,0x10(%rsp)
  0x0000000116b4d11c: mov    %r14,0x8(%rsp)
  0x0000000116b4d121: mov    %r15,(%rsp)
  0x0000000116b4d125: movabs $0x10cc2363b,%rdi
  0x0000000116b4d12f: movabs $0x116b4d0cf,%rsi
  0x0000000116b4d139: mov    %rsp,%rdx
  0x0000000116b4d13c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d140: callq  0x000000010c7dd830
  0x0000000116b4d145: hlt    
  0x0000000116b4d146: push   %r10
  0x0000000116b4d148: cmp    -0x9d0689f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4d14f: je     0x0000000116b4d1cc
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4d155: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d15a: sub    $0x80,%rsp
  0x0000000116b4d161: mov    %rax,0x78(%rsp)
  0x0000000116b4d166: mov    %rcx,0x70(%rsp)
  0x0000000116b4d16b: mov    %rdx,0x68(%rsp)
  0x0000000116b4d170: mov    %rbx,0x60(%rsp)
  0x0000000116b4d175: mov    %rbp,0x50(%rsp)
  0x0000000116b4d17a: mov    %rsi,0x48(%rsp)
  0x0000000116b4d17f: mov    %rdi,0x40(%rsp)
  0x0000000116b4d184: mov    %r8,0x38(%rsp)
  0x0000000116b4d189: mov    %r9,0x30(%rsp)
  0x0000000116b4d18e: mov    %r10,0x28(%rsp)
  0x0000000116b4d193: mov    %r11,0x20(%rsp)
  0x0000000116b4d198: mov    %r12,0x18(%rsp)
  0x0000000116b4d19d: mov    %r13,0x10(%rsp)
  0x0000000116b4d1a2: mov    %r14,0x8(%rsp)
  0x0000000116b4d1a7: mov    %r15,(%rsp)
  0x0000000116b4d1ab: movabs $0x10cc63f17,%rdi
  0x0000000116b4d1b5: movabs $0x116b4d155,%rsi
  0x0000000116b4d1bf: mov    %rsp,%rdx
  0x0000000116b4d1c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d1c6: callq  0x000000010c7dd830
  0x0000000116b4d1cb: hlt    
  0x0000000116b4d1cc: pop    %r10
  0x0000000116b4d1ce: mov    %r15,%rdi
  0x0000000116b4d1d1: mov    %rbp,0x290(%r15)
  0x0000000116b4d1d8: mov    %rax,0x280(%r15)
  0x0000000116b4d1df: test   $0xf,%esp
  0x0000000116b4d1e5: je     0x0000000116b4d1fd
  0x0000000116b4d1eb: sub    $0x8,%rsp
  0x0000000116b4d1ef: callq  0x000000010c5881a0
  0x0000000116b4d1f4: add    $0x8,%rsp
  0x0000000116b4d1f8: jmpq   0x0000000116b4d202
  0x0000000116b4d1fd: callq  0x000000010c5881a0
  0x0000000116b4d202: push   %rax
  0x0000000116b4d203: push   %rdi
  0x0000000116b4d204: push   %rsi
  0x0000000116b4d205: push   %rdx
  0x0000000116b4d206: push   %rcx
  0x0000000116b4d207: push   %r8
  0x0000000116b4d209: push   %r9
  0x0000000116b4d20b: push   %r10
  0x0000000116b4d20d: mov    %rsp,%r10
  0x0000000116b4d210: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d214: push   %r10
  0x0000000116b4d216: push   %r11
  0x0000000116b4d218: mov    $0x109,%edi
  0x0000000116b4d21d: movabs $0x7ff815049fd5,%r10
  0x0000000116b4d227: callq  *%r10
  0x0000000116b4d22a: pop    %r11
  0x0000000116b4d22c: pop    %rsp
  0x0000000116b4d22d: pop    %r10
  0x0000000116b4d22f: pop    %r9
  0x0000000116b4d231: pop    %r8
  0x0000000116b4d233: pop    %rcx
  0x0000000116b4d234: pop    %rdx
  0x0000000116b4d235: pop    %rsi
  0x0000000116b4d236: pop    %rdi
  0x0000000116b4d237: cmp    %rax,%r15
  0x0000000116b4d23a: je     0x0000000116b4d2b7
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4d240: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d245: sub    $0x80,%rsp
  0x0000000116b4d24c: mov    %rax,0x78(%rsp)
  0x0000000116b4d251: mov    %rcx,0x70(%rsp)
  0x0000000116b4d256: mov    %rdx,0x68(%rsp)
  0x0000000116b4d25b: mov    %rbx,0x60(%rsp)
  0x0000000116b4d260: mov    %rbp,0x50(%rsp)
  0x0000000116b4d265: mov    %rsi,0x48(%rsp)
  0x0000000116b4d26a: mov    %rdi,0x40(%rsp)
  0x0000000116b4d26f: mov    %r8,0x38(%rsp)
  0x0000000116b4d274: mov    %r9,0x30(%rsp)
  0x0000000116b4d279: mov    %r10,0x28(%rsp)
  0x0000000116b4d27e: mov    %r11,0x20(%rsp)
  0x0000000116b4d283: mov    %r12,0x18(%rsp)
  0x0000000116b4d288: mov    %r13,0x10(%rsp)
  0x0000000116b4d28d: mov    %r14,0x8(%rsp)
  0x0000000116b4d292: mov    %r15,(%rsp)
  0x0000000116b4d296: movabs $0x10cc6405e,%rdi
  0x0000000116b4d2a0: movabs $0x116b4d240,%rsi
  0x0000000116b4d2aa: mov    %rsp,%rdx
  0x0000000116b4d2ad: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d2b1: callq  0x000000010c7dd830
  0x0000000116b4d2b6: hlt    
  0x0000000116b4d2b7: pop    %rax
  0x0000000116b4d2b8: movabs $0x0,%r10
  0x0000000116b4d2c2: mov    %r10,0x280(%r15)
  0x0000000116b4d2c9: movabs $0x0,%r10
  0x0000000116b4d2d3: mov    %r10,0x290(%r15)
  0x0000000116b4d2da: movabs $0x0,%r10
  0x0000000116b4d2e4: mov    %r10,0x288(%r15)
  0x0000000116b4d2eb: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d2f3: je     0x0000000116b4d2fe
  0x0000000116b4d2f9: jmpq   0x0000000116b30420
  0x0000000116b4d2fe: mov    -0x38(%rbp),%r13
  0x0000000116b4d302: mov    -0x30(%rbp),%r14
  0x0000000116b4d306: retq   
  0x0000000116b4d307: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d30c: sub    $0x80,%rsp
  0x0000000116b4d313: mov    %rax,0x78(%rsp)
  0x0000000116b4d318: mov    %rcx,0x70(%rsp)
  0x0000000116b4d31d: mov    %rdx,0x68(%rsp)
  0x0000000116b4d322: mov    %rbx,0x60(%rsp)
  0x0000000116b4d327: mov    %rbp,0x50(%rsp)
  0x0000000116b4d32c: mov    %rsi,0x48(%rsp)
  0x0000000116b4d331: mov    %rdi,0x40(%rsp)
  0x0000000116b4d336: mov    %r8,0x38(%rsp)
  0x0000000116b4d33b: mov    %r9,0x30(%rsp)
  0x0000000116b4d340: mov    %r10,0x28(%rsp)
  0x0000000116b4d345: mov    %r11,0x20(%rsp)
  0x0000000116b4d34a: mov    %r12,0x18(%rsp)
  0x0000000116b4d34f: mov    %r13,0x10(%rsp)
  0x0000000116b4d354: mov    %r14,0x8(%rsp)
  0x0000000116b4d359: mov    %r15,(%rsp)
  0x0000000116b4d35d: movabs $0x10cb763be,%rdi
  0x0000000116b4d367: movabs $0x116b4d307,%rsi
  0x0000000116b4d371: mov    %rsp,%rdx
  0x0000000116b4d374: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d378: callq  0x000000010c7dd830
  0x0000000116b4d37d: hlt    
  0x0000000116b4d37e: movzbl 0x9(%r13),%ebx
  0x0000000116b4d383: add    $0x9,%r13
  0x0000000116b4d387: movabs $0x10ce38e80,%r10
  0x0000000116b4d391: jmpq   *(%r10,%rbx,8)
  0x0000000116b4d395: movq   $0x0,-0x10(%rbp)
  0x0000000116b4d39d: mov    -0x38(%rbp),%r13
  0x0000000116b4d3a1: mov    -0x30(%rbp),%r14
  0x0000000116b4d3a5: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d3ad: je     0x0000000116b4d683
  0x0000000116b4d3b3: callq  0x0000000116b4d3bd
  0x0000000116b4d3b8: jmpq   0x0000000116b4d60c
  0x0000000116b4d3bd: lea    0x8(%rsp),%rax
  0x0000000116b4d3c2: mov    %r13,-0x38(%rbp)
  0x0000000116b4d3c6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4d3ce: je     0x0000000116b4d44b
  0x0000000116b4d3d4: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d3d9: sub    $0x80,%rsp
  0x0000000116b4d3e0: mov    %rax,0x78(%rsp)
  0x0000000116b4d3e5: mov    %rcx,0x70(%rsp)
  0x0000000116b4d3ea: mov    %rdx,0x68(%rsp)
  0x0000000116b4d3ef: mov    %rbx,0x60(%rsp)
  0x0000000116b4d3f4: mov    %rbp,0x50(%rsp)
  0x0000000116b4d3f9: mov    %rsi,0x48(%rsp)
  0x0000000116b4d3fe: mov    %rdi,0x40(%rsp)
  0x0000000116b4d403: mov    %r8,0x38(%rsp)
  0x0000000116b4d408: mov    %r9,0x30(%rsp)
  0x0000000116b4d40d: mov    %r10,0x28(%rsp)
  0x0000000116b4d412: mov    %r11,0x20(%rsp)
  0x0000000116b4d417: mov    %r12,0x18(%rsp)
  0x0000000116b4d41c: mov    %r13,0x10(%rsp)
  0x0000000116b4d421: mov    %r14,0x8(%rsp)
  0x0000000116b4d426: mov    %r15,(%rsp)
  0x0000000116b4d42a: movabs $0x10cc2363b,%rdi
  0x0000000116b4d434: movabs $0x116b4d3d4,%rsi
  0x0000000116b4d43e: mov    %rsp,%rdx
  0x0000000116b4d441: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d445: callq  0x000000010c7dd830
  0x0000000116b4d44a: hlt    
  0x0000000116b4d44b: push   %r10
  0x0000000116b4d44d: cmp    -0x9d06ba4(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4d454: je     0x0000000116b4d4d1
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4d45a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d45f: sub    $0x80,%rsp
  0x0000000116b4d466: mov    %rax,0x78(%rsp)
  0x0000000116b4d46b: mov    %rcx,0x70(%rsp)
  0x0000000116b4d470: mov    %rdx,0x68(%rsp)
  0x0000000116b4d475: mov    %rbx,0x60(%rsp)
  0x0000000116b4d47a: mov    %rbp,0x50(%rsp)
  0x0000000116b4d47f: mov    %rsi,0x48(%rsp)
  0x0000000116b4d484: mov    %rdi,0x40(%rsp)
  0x0000000116b4d489: mov    %r8,0x38(%rsp)
  0x0000000116b4d48e: mov    %r9,0x30(%rsp)
  0x0000000116b4d493: mov    %r10,0x28(%rsp)
  0x0000000116b4d498: mov    %r11,0x20(%rsp)
  0x0000000116b4d49d: mov    %r12,0x18(%rsp)
  0x0000000116b4d4a2: mov    %r13,0x10(%rsp)
  0x0000000116b4d4a7: mov    %r14,0x8(%rsp)
  0x0000000116b4d4ac: mov    %r15,(%rsp)
  0x0000000116b4d4b0: movabs $0x10cc63f17,%rdi
  0x0000000116b4d4ba: movabs $0x116b4d45a,%rsi
  0x0000000116b4d4c4: mov    %rsp,%rdx
  0x0000000116b4d4c7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d4cb: callq  0x000000010c7dd830
  0x0000000116b4d4d0: hlt    
  0x0000000116b4d4d1: pop    %r10
  0x0000000116b4d4d3: mov    %r15,%rdi
  0x0000000116b4d4d6: mov    %rbp,0x290(%r15)
  0x0000000116b4d4dd: mov    %rax,0x280(%r15)
  0x0000000116b4d4e4: test   $0xf,%esp
  0x0000000116b4d4ea: je     0x0000000116b4d502
  0x0000000116b4d4f0: sub    $0x8,%rsp
  0x0000000116b4d4f4: callq  0x000000010c5881a0
  0x0000000116b4d4f9: add    $0x8,%rsp
  0x0000000116b4d4fd: jmpq   0x0000000116b4d507
  0x0000000116b4d502: callq  0x000000010c5881a0
  0x0000000116b4d507: push   %rax
  0x0000000116b4d508: push   %rdi
  0x0000000116b4d509: push   %rsi
  0x0000000116b4d50a: push   %rdx
  0x0000000116b4d50b: push   %rcx
  0x0000000116b4d50c: push   %r8
  0x0000000116b4d50e: push   %r9
  0x0000000116b4d510: push   %r10
  0x0000000116b4d512: mov    %rsp,%r10
  0x0000000116b4d515: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d519: push   %r10
  0x0000000116b4d51b: push   %r11
  0x0000000116b4d51d: mov    $0x109,%edi
  0x0000000116b4d522: movabs $0x7ff815049fd5,%r10
  0x0000000116b4d52c: callq  *%r10
  0x0000000116b4d52f: pop    %r11
  0x0000000116b4d531: pop    %rsp
  0x0000000116b4d532: pop    %r10
  0x0000000116b4d534: pop    %r9
  0x0000000116b4d536: pop    %r8
  0x0000000116b4d538: pop    %rcx
  0x0000000116b4d539: pop    %rdx
  0x0000000116b4d53a: pop    %rsi
  0x0000000116b4d53b: pop    %rdi
  0x0000000116b4d53c: cmp    %rax,%r15
  0x0000000116b4d53f: je     0x0000000116b4d5bc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4d545: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d54a: sub    $0x80,%rsp
  0x0000000116b4d551: mov    %rax,0x78(%rsp)
  0x0000000116b4d556: mov    %rcx,0x70(%rsp)
  0x0000000116b4d55b: mov    %rdx,0x68(%rsp)
  0x0000000116b4d560: mov    %rbx,0x60(%rsp)
  0x0000000116b4d565: mov    %rbp,0x50(%rsp)
  0x0000000116b4d56a: mov    %rsi,0x48(%rsp)
  0x0000000116b4d56f: mov    %rdi,0x40(%rsp)
  0x0000000116b4d574: mov    %r8,0x38(%rsp)
  0x0000000116b4d579: mov    %r9,0x30(%rsp)
  0x0000000116b4d57e: mov    %r10,0x28(%rsp)
  0x0000000116b4d583: mov    %r11,0x20(%rsp)
  0x0000000116b4d588: mov    %r12,0x18(%rsp)
  0x0000000116b4d58d: mov    %r13,0x10(%rsp)
  0x0000000116b4d592: mov    %r14,0x8(%rsp)
  0x0000000116b4d597: mov    %r15,(%rsp)
  0x0000000116b4d59b: movabs $0x10cc6405e,%rdi
  0x0000000116b4d5a5: movabs $0x116b4d545,%rsi
  0x0000000116b4d5af: mov    %rsp,%rdx
  0x0000000116b4d5b2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d5b6: callq  0x000000010c7dd830
  0x0000000116b4d5bb: hlt    
  0x0000000116b4d5bc: pop    %rax
  0x0000000116b4d5bd: movabs $0x0,%r10
  0x0000000116b4d5c7: mov    %r10,0x280(%r15)
  0x0000000116b4d5ce: movabs $0x0,%r10
  0x0000000116b4d5d8: mov    %r10,0x290(%r15)
  0x0000000116b4d5df: movabs $0x0,%r10
  0x0000000116b4d5e9: mov    %r10,0x288(%r15)
  0x0000000116b4d5f0: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d5f8: je     0x0000000116b4d603
  0x0000000116b4d5fe: jmpq   0x0000000116b30420
  0x0000000116b4d603: mov    -0x38(%rbp),%r13
  0x0000000116b4d607: mov    -0x30(%rbp),%r14
  0x0000000116b4d60b: retq   
  0x0000000116b4d60c: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d611: sub    $0x80,%rsp
  0x0000000116b4d618: mov    %rax,0x78(%rsp)
  0x0000000116b4d61d: mov    %rcx,0x70(%rsp)
  0x0000000116b4d622: mov    %rdx,0x68(%rsp)
  0x0000000116b4d627: mov    %rbx,0x60(%rsp)
  0x0000000116b4d62c: mov    %rbp,0x50(%rsp)
  0x0000000116b4d631: mov    %rsi,0x48(%rsp)
  0x0000000116b4d636: mov    %rdi,0x40(%rsp)
  0x0000000116b4d63b: mov    %r8,0x38(%rsp)
  0x0000000116b4d640: mov    %r9,0x30(%rsp)
  0x0000000116b4d645: mov    %r10,0x28(%rsp)
  0x0000000116b4d64a: mov    %r11,0x20(%rsp)
  0x0000000116b4d64f: mov    %r12,0x18(%rsp)
  0x0000000116b4d654: mov    %r13,0x10(%rsp)
  0x0000000116b4d659: mov    %r14,0x8(%rsp)
  0x0000000116b4d65e: mov    %r15,(%rsp)
  0x0000000116b4d662: movabs $0x10cb763be,%rdi
  0x0000000116b4d66c: movabs $0x116b4d60c,%rsi
  0x0000000116b4d676: mov    %rsp,%rdx
  0x0000000116b4d679: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d67d: callq  0x000000010c7dd830
  0x0000000116b4d682: hlt    
  0x0000000116b4d683: movzbl 0x9(%r13),%ebx
  0x0000000116b4d688: add    $0x9,%r13
  0x0000000116b4d68c: movabs $0x10ce38e80,%r10
  0x0000000116b4d696: jmpq   *(%r10,%rbx,8)
  0x0000000116b4d69a: movq   $0x0,-0x10(%rbp)
  0x0000000116b4d6a2: mov    -0x38(%rbp),%r13
  0x0000000116b4d6a6: mov    -0x30(%rbp),%r14
  0x0000000116b4d6aa: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d6b2: je     0x0000000116b4d988
  0x0000000116b4d6b8: callq  0x0000000116b4d6c2
  0x0000000116b4d6bd: jmpq   0x0000000116b4d911
  0x0000000116b4d6c2: lea    0x8(%rsp),%rax
  0x0000000116b4d6c7: mov    %r13,-0x38(%rbp)
  0x0000000116b4d6cb: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4d6d3: je     0x0000000116b4d750
  0x0000000116b4d6d9: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d6de: sub    $0x80,%rsp
  0x0000000116b4d6e5: mov    %rax,0x78(%rsp)
  0x0000000116b4d6ea: mov    %rcx,0x70(%rsp)
  0x0000000116b4d6ef: mov    %rdx,0x68(%rsp)
  0x0000000116b4d6f4: mov    %rbx,0x60(%rsp)
  0x0000000116b4d6f9: mov    %rbp,0x50(%rsp)
  0x0000000116b4d6fe: mov    %rsi,0x48(%rsp)
  0x0000000116b4d703: mov    %rdi,0x40(%rsp)
  0x0000000116b4d708: mov    %r8,0x38(%rsp)
  0x0000000116b4d70d: mov    %r9,0x30(%rsp)
  0x0000000116b4d712: mov    %r10,0x28(%rsp)
  0x0000000116b4d717: mov    %r11,0x20(%rsp)
  0x0000000116b4d71c: mov    %r12,0x18(%rsp)
  0x0000000116b4d721: mov    %r13,0x10(%rsp)
  0x0000000116b4d726: mov    %r14,0x8(%rsp)
  0x0000000116b4d72b: mov    %r15,(%rsp)
  0x0000000116b4d72f: movabs $0x10cc2363b,%rdi
  0x0000000116b4d739: movabs $0x116b4d6d9,%rsi
  0x0000000116b4d743: mov    %rsp,%rdx
  0x0000000116b4d746: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d74a: callq  0x000000010c7dd830
  0x0000000116b4d74f: hlt    
  0x0000000116b4d750: push   %r10
  0x0000000116b4d752: cmp    -0x9d06ea9(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4d759: je     0x0000000116b4d7d6
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4d75f: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d764: sub    $0x80,%rsp
  0x0000000116b4d76b: mov    %rax,0x78(%rsp)
  0x0000000116b4d770: mov    %rcx,0x70(%rsp)
  0x0000000116b4d775: mov    %rdx,0x68(%rsp)
  0x0000000116b4d77a: mov    %rbx,0x60(%rsp)
  0x0000000116b4d77f: mov    %rbp,0x50(%rsp)
  0x0000000116b4d784: mov    %rsi,0x48(%rsp)
  0x0000000116b4d789: mov    %rdi,0x40(%rsp)
  0x0000000116b4d78e: mov    %r8,0x38(%rsp)
  0x0000000116b4d793: mov    %r9,0x30(%rsp)
  0x0000000116b4d798: mov    %r10,0x28(%rsp)
  0x0000000116b4d79d: mov    %r11,0x20(%rsp)
  0x0000000116b4d7a2: mov    %r12,0x18(%rsp)
  0x0000000116b4d7a7: mov    %r13,0x10(%rsp)
  0x0000000116b4d7ac: mov    %r14,0x8(%rsp)
  0x0000000116b4d7b1: mov    %r15,(%rsp)
  0x0000000116b4d7b5: movabs $0x10cc63f17,%rdi
  0x0000000116b4d7bf: movabs $0x116b4d75f,%rsi
  0x0000000116b4d7c9: mov    %rsp,%rdx
  0x0000000116b4d7cc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d7d0: callq  0x000000010c7dd830
  0x0000000116b4d7d5: hlt    
  0x0000000116b4d7d6: pop    %r10
  0x0000000116b4d7d8: mov    %r15,%rdi
  0x0000000116b4d7db: mov    %rbp,0x290(%r15)
  0x0000000116b4d7e2: mov    %rax,0x280(%r15)
  0x0000000116b4d7e9: test   $0xf,%esp
  0x0000000116b4d7ef: je     0x0000000116b4d807
  0x0000000116b4d7f5: sub    $0x8,%rsp
  0x0000000116b4d7f9: callq  0x000000010c5881a0
  0x0000000116b4d7fe: add    $0x8,%rsp
  0x0000000116b4d802: jmpq   0x0000000116b4d80c
  0x0000000116b4d807: callq  0x000000010c5881a0
  0x0000000116b4d80c: push   %rax
  0x0000000116b4d80d: push   %rdi
  0x0000000116b4d80e: push   %rsi
  0x0000000116b4d80f: push   %rdx
  0x0000000116b4d810: push   %rcx
  0x0000000116b4d811: push   %r8
  0x0000000116b4d813: push   %r9
  0x0000000116b4d815: push   %r10
  0x0000000116b4d817: mov    %rsp,%r10
  0x0000000116b4d81a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d81e: push   %r10
  0x0000000116b4d820: push   %r11
  0x0000000116b4d822: mov    $0x109,%edi
  0x0000000116b4d827: movabs $0x7ff815049fd5,%r10
  0x0000000116b4d831: callq  *%r10
  0x0000000116b4d834: pop    %r11
  0x0000000116b4d836: pop    %rsp
  0x0000000116b4d837: pop    %r10
  0x0000000116b4d839: pop    %r9
  0x0000000116b4d83b: pop    %r8
  0x0000000116b4d83d: pop    %rcx
  0x0000000116b4d83e: pop    %rdx
  0x0000000116b4d83f: pop    %rsi
  0x0000000116b4d840: pop    %rdi
  0x0000000116b4d841: cmp    %rax,%r15
  0x0000000116b4d844: je     0x0000000116b4d8c1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4d84a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d84f: sub    $0x80,%rsp
  0x0000000116b4d856: mov    %rax,0x78(%rsp)
  0x0000000116b4d85b: mov    %rcx,0x70(%rsp)
  0x0000000116b4d860: mov    %rdx,0x68(%rsp)
  0x0000000116b4d865: mov    %rbx,0x60(%rsp)
  0x0000000116b4d86a: mov    %rbp,0x50(%rsp)
  0x0000000116b4d86f: mov    %rsi,0x48(%rsp)
  0x0000000116b4d874: mov    %rdi,0x40(%rsp)
  0x0000000116b4d879: mov    %r8,0x38(%rsp)
  0x0000000116b4d87e: mov    %r9,0x30(%rsp)
  0x0000000116b4d883: mov    %r10,0x28(%rsp)
  0x0000000116b4d888: mov    %r11,0x20(%rsp)
  0x0000000116b4d88d: mov    %r12,0x18(%rsp)
  0x0000000116b4d892: mov    %r13,0x10(%rsp)
  0x0000000116b4d897: mov    %r14,0x8(%rsp)
  0x0000000116b4d89c: mov    %r15,(%rsp)
  0x0000000116b4d8a0: movabs $0x10cc6405e,%rdi
  0x0000000116b4d8aa: movabs $0x116b4d84a,%rsi
  0x0000000116b4d8b4: mov    %rsp,%rdx
  0x0000000116b4d8b7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d8bb: callq  0x000000010c7dd830
  0x0000000116b4d8c0: hlt    
  0x0000000116b4d8c1: pop    %rax
  0x0000000116b4d8c2: movabs $0x0,%r10
  0x0000000116b4d8cc: mov    %r10,0x280(%r15)
  0x0000000116b4d8d3: movabs $0x0,%r10
  0x0000000116b4d8dd: mov    %r10,0x290(%r15)
  0x0000000116b4d8e4: movabs $0x0,%r10
  0x0000000116b4d8ee: mov    %r10,0x288(%r15)
  0x0000000116b4d8f5: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d8fd: je     0x0000000116b4d908
  0x0000000116b4d903: jmpq   0x0000000116b30420
  0x0000000116b4d908: mov    -0x38(%rbp),%r13
  0x0000000116b4d90c: mov    -0x30(%rbp),%r14
  0x0000000116b4d910: retq   
  0x0000000116b4d911: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d916: sub    $0x80,%rsp
  0x0000000116b4d91d: mov    %rax,0x78(%rsp)
  0x0000000116b4d922: mov    %rcx,0x70(%rsp)
  0x0000000116b4d927: mov    %rdx,0x68(%rsp)
  0x0000000116b4d92c: mov    %rbx,0x60(%rsp)
  0x0000000116b4d931: mov    %rbp,0x50(%rsp)
  0x0000000116b4d936: mov    %rsi,0x48(%rsp)
  0x0000000116b4d93b: mov    %rdi,0x40(%rsp)
  0x0000000116b4d940: mov    %r8,0x38(%rsp)
  0x0000000116b4d945: mov    %r9,0x30(%rsp)
  0x0000000116b4d94a: mov    %r10,0x28(%rsp)
  0x0000000116b4d94f: mov    %r11,0x20(%rsp)
  0x0000000116b4d954: mov    %r12,0x18(%rsp)
  0x0000000116b4d959: mov    %r13,0x10(%rsp)
  0x0000000116b4d95e: mov    %r14,0x8(%rsp)
  0x0000000116b4d963: mov    %r15,(%rsp)
  0x0000000116b4d967: movabs $0x10cb763be,%rdi
  0x0000000116b4d971: movabs $0x116b4d911,%rsi
  0x0000000116b4d97b: mov    %rsp,%rdx
  0x0000000116b4d97e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4d982: callq  0x000000010c7dd830
  0x0000000116b4d987: hlt    
  0x0000000116b4d988: movzbl 0x9(%r13),%ebx
  0x0000000116b4d98d: add    $0x9,%r13
  0x0000000116b4d991: movabs $0x10ce38e80,%r10
  0x0000000116b4d99b: jmpq   *(%r10,%rbx,8)
  0x0000000116b4d99f: movq   $0x0,-0x10(%rbp)
  0x0000000116b4d9a7: mov    -0x38(%rbp),%r13
  0x0000000116b4d9ab: mov    -0x30(%rbp),%r14
  0x0000000116b4d9af: cmpq   $0x0,0x8(%r15)
  0x0000000116b4d9b7: je     0x0000000116b4dc8d
  0x0000000116b4d9bd: callq  0x0000000116b4d9c7
  0x0000000116b4d9c2: jmpq   0x0000000116b4dc16
  0x0000000116b4d9c7: lea    0x8(%rsp),%rax
  0x0000000116b4d9cc: mov    %r13,-0x38(%rbp)
  0x0000000116b4d9d0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4d9d8: je     0x0000000116b4da55
  0x0000000116b4d9de: mov    %rsp,-0x28(%rsp)
  0x0000000116b4d9e3: sub    $0x80,%rsp
  0x0000000116b4d9ea: mov    %rax,0x78(%rsp)
  0x0000000116b4d9ef: mov    %rcx,0x70(%rsp)
  0x0000000116b4d9f4: mov    %rdx,0x68(%rsp)
  0x0000000116b4d9f9: mov    %rbx,0x60(%rsp)
  0x0000000116b4d9fe: mov    %rbp,0x50(%rsp)
  0x0000000116b4da03: mov    %rsi,0x48(%rsp)
  0x0000000116b4da08: mov    %rdi,0x40(%rsp)
  0x0000000116b4da0d: mov    %r8,0x38(%rsp)
  0x0000000116b4da12: mov    %r9,0x30(%rsp)
  0x0000000116b4da17: mov    %r10,0x28(%rsp)
  0x0000000116b4da1c: mov    %r11,0x20(%rsp)
  0x0000000116b4da21: mov    %r12,0x18(%rsp)
  0x0000000116b4da26: mov    %r13,0x10(%rsp)
  0x0000000116b4da2b: mov    %r14,0x8(%rsp)
  0x0000000116b4da30: mov    %r15,(%rsp)
  0x0000000116b4da34: movabs $0x10cc2363b,%rdi
  0x0000000116b4da3e: movabs $0x116b4d9de,%rsi
  0x0000000116b4da48: mov    %rsp,%rdx
  0x0000000116b4da4b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4da4f: callq  0x000000010c7dd830
  0x0000000116b4da54: hlt    
  0x0000000116b4da55: push   %r10
  0x0000000116b4da57: cmp    -0x9d071ae(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4da5e: je     0x0000000116b4dadb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4da64: mov    %rsp,-0x28(%rsp)
  0x0000000116b4da69: sub    $0x80,%rsp
  0x0000000116b4da70: mov    %rax,0x78(%rsp)
  0x0000000116b4da75: mov    %rcx,0x70(%rsp)
  0x0000000116b4da7a: mov    %rdx,0x68(%rsp)
  0x0000000116b4da7f: mov    %rbx,0x60(%rsp)
  0x0000000116b4da84: mov    %rbp,0x50(%rsp)
  0x0000000116b4da89: mov    %rsi,0x48(%rsp)
  0x0000000116b4da8e: mov    %rdi,0x40(%rsp)
  0x0000000116b4da93: mov    %r8,0x38(%rsp)
  0x0000000116b4da98: mov    %r9,0x30(%rsp)
  0x0000000116b4da9d: mov    %r10,0x28(%rsp)
  0x0000000116b4daa2: mov    %r11,0x20(%rsp)
  0x0000000116b4daa7: mov    %r12,0x18(%rsp)
  0x0000000116b4daac: mov    %r13,0x10(%rsp)
  0x0000000116b4dab1: mov    %r14,0x8(%rsp)
  0x0000000116b4dab6: mov    %r15,(%rsp)
  0x0000000116b4daba: movabs $0x10cc63f17,%rdi
  0x0000000116b4dac4: movabs $0x116b4da64,%rsi
  0x0000000116b4dace: mov    %rsp,%rdx
  0x0000000116b4dad1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4dad5: callq  0x000000010c7dd830
  0x0000000116b4dada: hlt    
  0x0000000116b4dadb: pop    %r10
  0x0000000116b4dadd: mov    %r15,%rdi
  0x0000000116b4dae0: mov    %rbp,0x290(%r15)
  0x0000000116b4dae7: mov    %rax,0x280(%r15)
  0x0000000116b4daee: test   $0xf,%esp
  0x0000000116b4daf4: je     0x0000000116b4db0c
  0x0000000116b4dafa: sub    $0x8,%rsp
  0x0000000116b4dafe: callq  0x000000010c5881a0
  0x0000000116b4db03: add    $0x8,%rsp
  0x0000000116b4db07: jmpq   0x0000000116b4db11
  0x0000000116b4db0c: callq  0x000000010c5881a0
  0x0000000116b4db11: push   %rax
  0x0000000116b4db12: push   %rdi
  0x0000000116b4db13: push   %rsi
  0x0000000116b4db14: push   %rdx
  0x0000000116b4db15: push   %rcx
  0x0000000116b4db16: push   %r8
  0x0000000116b4db18: push   %r9
  0x0000000116b4db1a: push   %r10
  0x0000000116b4db1c: mov    %rsp,%r10
  0x0000000116b4db1f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4db23: push   %r10
  0x0000000116b4db25: push   %r11
  0x0000000116b4db27: mov    $0x109,%edi
  0x0000000116b4db2c: movabs $0x7ff815049fd5,%r10
  0x0000000116b4db36: callq  *%r10
  0x0000000116b4db39: pop    %r11
  0x0000000116b4db3b: pop    %rsp
  0x0000000116b4db3c: pop    %r10
  0x0000000116b4db3e: pop    %r9
  0x0000000116b4db40: pop    %r8
  0x0000000116b4db42: pop    %rcx
  0x0000000116b4db43: pop    %rdx
  0x0000000116b4db44: pop    %rsi
  0x0000000116b4db45: pop    %rdi
  0x0000000116b4db46: cmp    %rax,%r15
  0x0000000116b4db49: je     0x0000000116b4dbc6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4db4f: mov    %rsp,-0x28(%rsp)
  0x0000000116b4db54: sub    $0x80,%rsp
  0x0000000116b4db5b: mov    %rax,0x78(%rsp)
  0x0000000116b4db60: mov    %rcx,0x70(%rsp)
  0x0000000116b4db65: mov    %rdx,0x68(%rsp)
  0x0000000116b4db6a: mov    %rbx,0x60(%rsp)
  0x0000000116b4db6f: mov    %rbp,0x50(%rsp)
  0x0000000116b4db74: mov    %rsi,0x48(%rsp)
  0x0000000116b4db79: mov    %rdi,0x40(%rsp)
  0x0000000116b4db7e: mov    %r8,0x38(%rsp)
  0x0000000116b4db83: mov    %r9,0x30(%rsp)
  0x0000000116b4db88: mov    %r10,0x28(%rsp)
  0x0000000116b4db8d: mov    %r11,0x20(%rsp)
  0x0000000116b4db92: mov    %r12,0x18(%rsp)
  0x0000000116b4db97: mov    %r13,0x10(%rsp)
  0x0000000116b4db9c: mov    %r14,0x8(%rsp)
  0x0000000116b4dba1: mov    %r15,(%rsp)
  0x0000000116b4dba5: movabs $0x10cc6405e,%rdi
  0x0000000116b4dbaf: movabs $0x116b4db4f,%rsi
  0x0000000116b4dbb9: mov    %rsp,%rdx
  0x0000000116b4dbbc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4dbc0: callq  0x000000010c7dd830
  0x0000000116b4dbc5: hlt    
  0x0000000116b4dbc6: pop    %rax
  0x0000000116b4dbc7: movabs $0x0,%r10
  0x0000000116b4dbd1: mov    %r10,0x280(%r15)
  0x0000000116b4dbd8: movabs $0x0,%r10
  0x0000000116b4dbe2: mov    %r10,0x290(%r15)
  0x0000000116b4dbe9: movabs $0x0,%r10
  0x0000000116b4dbf3: mov    %r10,0x288(%r15)
  0x0000000116b4dbfa: cmpq   $0x0,0x8(%r15)
  0x0000000116b4dc02: je     0x0000000116b4dc0d
  0x0000000116b4dc08: jmpq   0x0000000116b30420
  0x0000000116b4dc0d: mov    -0x38(%rbp),%r13
  0x0000000116b4dc11: mov    -0x30(%rbp),%r14
  0x0000000116b4dc15: retq   
  0x0000000116b4dc16: mov    %rsp,-0x28(%rsp)
  0x0000000116b4dc1b: sub    $0x80,%rsp
  0x0000000116b4dc22: mov    %rax,0x78(%rsp)
  0x0000000116b4dc27: mov    %rcx,0x70(%rsp)
  0x0000000116b4dc2c: mov    %rdx,0x68(%rsp)
  0x0000000116b4dc31: mov    %rbx,0x60(%rsp)
  0x0000000116b4dc36: mov    %rbp,0x50(%rsp)
  0x0000000116b4dc3b: mov    %rsi,0x48(%rsp)
  0x0000000116b4dc40: mov    %rdi,0x40(%rsp)
  0x0000000116b4dc45: mov    %r8,0x38(%rsp)
  0x0000000116b4dc4a: mov    %r9,0x30(%rsp)
  0x0000000116b4dc4f: mov    %r10,0x28(%rsp)
  0x0000000116b4dc54: mov    %r11,0x20(%rsp)
  0x0000000116b4dc59: mov    %r12,0x18(%rsp)
  0x0000000116b4dc5e: mov    %r13,0x10(%rsp)
  0x0000000116b4dc63: mov    %r14,0x8(%rsp)
  0x0000000116b4dc68: mov    %r15,(%rsp)
  0x0000000116b4dc6c: movabs $0x10cb763be,%rdi
  0x0000000116b4dc76: movabs $0x116b4dc16,%rsi
  0x0000000116b4dc80: mov    %rsp,%rdx
  0x0000000116b4dc83: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4dc87: callq  0x000000010c7dd830
  0x0000000116b4dc8c: hlt    
  0x0000000116b4dc8d: movzbl 0x9(%r13),%ebx
  0x0000000116b4dc92: add    $0x9,%r13
  0x0000000116b4dc96: movabs $0x10ce38e80,%r10
  0x0000000116b4dca0: jmpq   *(%r10,%rbx,8)
  0x0000000116b4dca4: movq   $0x0,-0x10(%rbp)
  0x0000000116b4dcac: mov    -0x38(%rbp),%r13
  0x0000000116b4dcb0: mov    -0x30(%rbp),%r14
  0x0000000116b4dcb4: cmpq   $0x0,0x8(%r15)
  0x0000000116b4dcbc: je     0x0000000116b4df92
  0x0000000116b4dcc2: callq  0x0000000116b4dccc
  0x0000000116b4dcc7: jmpq   0x0000000116b4df1b
  0x0000000116b4dccc: lea    0x8(%rsp),%rax
  0x0000000116b4dcd1: mov    %r13,-0x38(%rbp)
  0x0000000116b4dcd5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4dcdd: je     0x0000000116b4dd5a
  0x0000000116b4dce3: mov    %rsp,-0x28(%rsp)
  0x0000000116b4dce8: sub    $0x80,%rsp
  0x0000000116b4dcef: mov    %rax,0x78(%rsp)
  0x0000000116b4dcf4: mov    %rcx,0x70(%rsp)
  0x0000000116b4dcf9: mov    %rdx,0x68(%rsp)
  0x0000000116b4dcfe: mov    %rbx,0x60(%rsp)
  0x0000000116b4dd03: mov    %rbp,0x50(%rsp)
  0x0000000116b4dd08: mov    %rsi,0x48(%rsp)
  0x0000000116b4dd0d: mov    %rdi,0x40(%rsp)
  0x0000000116b4dd12: mov    %r8,0x38(%rsp)
  0x0000000116b4dd17: mov    %r9,0x30(%rsp)
  0x0000000116b4dd1c: mov    %r10,0x28(%rsp)
  0x0000000116b4dd21: mov    %r11,0x20(%rsp)
  0x0000000116b4dd26: mov    %r12,0x18(%rsp)
  0x0000000116b4dd2b: mov    %r13,0x10(%rsp)
  0x0000000116b4dd30: mov    %r14,0x8(%rsp)
  0x0000000116b4dd35: mov    %r15,(%rsp)
  0x0000000116b4dd39: movabs $0x10cc2363b,%rdi
  0x0000000116b4dd43: movabs $0x116b4dce3,%rsi
  0x0000000116b4dd4d: mov    %rsp,%rdx
  0x0000000116b4dd50: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4dd54: callq  0x000000010c7dd830
  0x0000000116b4dd59: hlt    
  0x0000000116b4dd5a: push   %r10
  0x0000000116b4dd5c: cmp    -0x9d074b3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4dd63: je     0x0000000116b4dde0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4dd69: mov    %rsp,-0x28(%rsp)
  0x0000000116b4dd6e: sub    $0x80,%rsp
  0x0000000116b4dd75: mov    %rax,0x78(%rsp)
  0x0000000116b4dd7a: mov    %rcx,0x70(%rsp)
  0x0000000116b4dd7f: mov    %rdx,0x68(%rsp)
  0x0000000116b4dd84: mov    %rbx,0x60(%rsp)
  0x0000000116b4dd89: mov    %rbp,0x50(%rsp)
  0x0000000116b4dd8e: mov    %rsi,0x48(%rsp)
  0x0000000116b4dd93: mov    %rdi,0x40(%rsp)
  0x0000000116b4dd98: mov    %r8,0x38(%rsp)
  0x0000000116b4dd9d: mov    %r9,0x30(%rsp)
  0x0000000116b4dda2: mov    %r10,0x28(%rsp)
  0x0000000116b4dda7: mov    %r11,0x20(%rsp)
  0x0000000116b4ddac: mov    %r12,0x18(%rsp)
  0x0000000116b4ddb1: mov    %r13,0x10(%rsp)
  0x0000000116b4ddb6: mov    %r14,0x8(%rsp)
  0x0000000116b4ddbb: mov    %r15,(%rsp)
  0x0000000116b4ddbf: movabs $0x10cc63f17,%rdi
  0x0000000116b4ddc9: movabs $0x116b4dd69,%rsi
  0x0000000116b4ddd3: mov    %rsp,%rdx
  0x0000000116b4ddd6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ddda: callq  0x000000010c7dd830
  0x0000000116b4dddf: hlt    
  0x0000000116b4dde0: pop    %r10
  0x0000000116b4dde2: mov    %r15,%rdi
  0x0000000116b4dde5: mov    %rbp,0x290(%r15)
  0x0000000116b4ddec: mov    %rax,0x280(%r15)
  0x0000000116b4ddf3: test   $0xf,%esp
  0x0000000116b4ddf9: je     0x0000000116b4de11
  0x0000000116b4ddff: sub    $0x8,%rsp
  0x0000000116b4de03: callq  0x000000010c5881a0
  0x0000000116b4de08: add    $0x8,%rsp
  0x0000000116b4de0c: jmpq   0x0000000116b4de16
  0x0000000116b4de11: callq  0x000000010c5881a0
  0x0000000116b4de16: push   %rax
  0x0000000116b4de17: push   %rdi
  0x0000000116b4de18: push   %rsi
  0x0000000116b4de19: push   %rdx
  0x0000000116b4de1a: push   %rcx
  0x0000000116b4de1b: push   %r8
  0x0000000116b4de1d: push   %r9
  0x0000000116b4de1f: push   %r10
  0x0000000116b4de21: mov    %rsp,%r10
  0x0000000116b4de24: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4de28: push   %r10
  0x0000000116b4de2a: push   %r11
  0x0000000116b4de2c: mov    $0x109,%edi
  0x0000000116b4de31: movabs $0x7ff815049fd5,%r10
  0x0000000116b4de3b: callq  *%r10
  0x0000000116b4de3e: pop    %r11
  0x0000000116b4de40: pop    %rsp
  0x0000000116b4de41: pop    %r10
  0x0000000116b4de43: pop    %r9
  0x0000000116b4de45: pop    %r8
  0x0000000116b4de47: pop    %rcx
  0x0000000116b4de48: pop    %rdx
  0x0000000116b4de49: pop    %rsi
  0x0000000116b4de4a: pop    %rdi
  0x0000000116b4de4b: cmp    %rax,%r15
  0x0000000116b4de4e: je     0x0000000116b4decb
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4de54: mov    %rsp,-0x28(%rsp)
  0x0000000116b4de59: sub    $0x80,%rsp
  0x0000000116b4de60: mov    %rax,0x78(%rsp)
  0x0000000116b4de65: mov    %rcx,0x70(%rsp)
  0x0000000116b4de6a: mov    %rdx,0x68(%rsp)
  0x0000000116b4de6f: mov    %rbx,0x60(%rsp)
  0x0000000116b4de74: mov    %rbp,0x50(%rsp)
  0x0000000116b4de79: mov    %rsi,0x48(%rsp)
  0x0000000116b4de7e: mov    %rdi,0x40(%rsp)
  0x0000000116b4de83: mov    %r8,0x38(%rsp)
  0x0000000116b4de88: mov    %r9,0x30(%rsp)
  0x0000000116b4de8d: mov    %r10,0x28(%rsp)
  0x0000000116b4de92: mov    %r11,0x20(%rsp)
  0x0000000116b4de97: mov    %r12,0x18(%rsp)
  0x0000000116b4de9c: mov    %r13,0x10(%rsp)
  0x0000000116b4dea1: mov    %r14,0x8(%rsp)
  0x0000000116b4dea6: mov    %r15,(%rsp)
  0x0000000116b4deaa: movabs $0x10cc6405e,%rdi
  0x0000000116b4deb4: movabs $0x116b4de54,%rsi
  0x0000000116b4debe: mov    %rsp,%rdx
  0x0000000116b4dec1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4dec5: callq  0x000000010c7dd830
  0x0000000116b4deca: hlt    
  0x0000000116b4decb: pop    %rax
  0x0000000116b4decc: movabs $0x0,%r10
  0x0000000116b4ded6: mov    %r10,0x280(%r15)
  0x0000000116b4dedd: movabs $0x0,%r10
  0x0000000116b4dee7: mov    %r10,0x290(%r15)
  0x0000000116b4deee: movabs $0x0,%r10
  0x0000000116b4def8: mov    %r10,0x288(%r15)
  0x0000000116b4deff: cmpq   $0x0,0x8(%r15)
  0x0000000116b4df07: je     0x0000000116b4df12
  0x0000000116b4df0d: jmpq   0x0000000116b30420
  0x0000000116b4df12: mov    -0x38(%rbp),%r13
  0x0000000116b4df16: mov    -0x30(%rbp),%r14
  0x0000000116b4df1a: retq   
  0x0000000116b4df1b: mov    %rsp,-0x28(%rsp)
  0x0000000116b4df20: sub    $0x80,%rsp
  0x0000000116b4df27: mov    %rax,0x78(%rsp)
  0x0000000116b4df2c: mov    %rcx,0x70(%rsp)
  0x0000000116b4df31: mov    %rdx,0x68(%rsp)
  0x0000000116b4df36: mov    %rbx,0x60(%rsp)
  0x0000000116b4df3b: mov    %rbp,0x50(%rsp)
  0x0000000116b4df40: mov    %rsi,0x48(%rsp)
  0x0000000116b4df45: mov    %rdi,0x40(%rsp)
  0x0000000116b4df4a: mov    %r8,0x38(%rsp)
  0x0000000116b4df4f: mov    %r9,0x30(%rsp)
  0x0000000116b4df54: mov    %r10,0x28(%rsp)
  0x0000000116b4df59: mov    %r11,0x20(%rsp)
  0x0000000116b4df5e: mov    %r12,0x18(%rsp)
  0x0000000116b4df63: mov    %r13,0x10(%rsp)
  0x0000000116b4df68: mov    %r14,0x8(%rsp)
  0x0000000116b4df6d: mov    %r15,(%rsp)
  0x0000000116b4df71: movabs $0x10cb763be,%rdi
  0x0000000116b4df7b: movabs $0x116b4df1b,%rsi
  0x0000000116b4df85: mov    %rsp,%rdx
  0x0000000116b4df88: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4df8c: callq  0x000000010c7dd830
  0x0000000116b4df91: hlt    
  0x0000000116b4df92: movzbl 0x9(%r13),%ebx
  0x0000000116b4df97: add    $0x9,%r13
  0x0000000116b4df9b: movabs $0x10ce3ae80,%r10
  0x0000000116b4dfa5: jmpq   *(%r10,%rbx,8)
  0x0000000116b4dfa9: movq   $0x0,-0x10(%rbp)
  0x0000000116b4dfb1: mov    -0x38(%rbp),%r13
  0x0000000116b4dfb5: mov    -0x30(%rbp),%r14
  0x0000000116b4dfb9: cmpq   $0x0,0x8(%r15)
  0x0000000116b4dfc1: je     0x0000000116b4e297
  0x0000000116b4dfc7: callq  0x0000000116b4dfd1
  0x0000000116b4dfcc: jmpq   0x0000000116b4e220
  0x0000000116b4dfd1: lea    0x8(%rsp),%rax
  0x0000000116b4dfd6: mov    %r13,-0x38(%rbp)
  0x0000000116b4dfda: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4dfe2: je     0x0000000116b4e05f
  0x0000000116b4dfe8: mov    %rsp,-0x28(%rsp)
  0x0000000116b4dfed: sub    $0x80,%rsp
  0x0000000116b4dff4: mov    %rax,0x78(%rsp)
  0x0000000116b4dff9: mov    %rcx,0x70(%rsp)
  0x0000000116b4dffe: mov    %rdx,0x68(%rsp)
  0x0000000116b4e003: mov    %rbx,0x60(%rsp)
  0x0000000116b4e008: mov    %rbp,0x50(%rsp)
  0x0000000116b4e00d: mov    %rsi,0x48(%rsp)
  0x0000000116b4e012: mov    %rdi,0x40(%rsp)
  0x0000000116b4e017: mov    %r8,0x38(%rsp)
  0x0000000116b4e01c: mov    %r9,0x30(%rsp)
  0x0000000116b4e021: mov    %r10,0x28(%rsp)
  0x0000000116b4e026: mov    %r11,0x20(%rsp)
  0x0000000116b4e02b: mov    %r12,0x18(%rsp)
  0x0000000116b4e030: mov    %r13,0x10(%rsp)
  0x0000000116b4e035: mov    %r14,0x8(%rsp)
  0x0000000116b4e03a: mov    %r15,(%rsp)
  0x0000000116b4e03e: movabs $0x10cc2363b,%rdi
  0x0000000116b4e048: movabs $0x116b4dfe8,%rsi
  0x0000000116b4e052: mov    %rsp,%rdx
  0x0000000116b4e055: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e059: callq  0x000000010c7dd830
  0x0000000116b4e05e: hlt    
  0x0000000116b4e05f: push   %r10
  0x0000000116b4e061: cmp    -0x9d077b8(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4e068: je     0x0000000116b4e0e5
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4e06e: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e073: sub    $0x80,%rsp
  0x0000000116b4e07a: mov    %rax,0x78(%rsp)
  0x0000000116b4e07f: mov    %rcx,0x70(%rsp)
  0x0000000116b4e084: mov    %rdx,0x68(%rsp)
  0x0000000116b4e089: mov    %rbx,0x60(%rsp)
  0x0000000116b4e08e: mov    %rbp,0x50(%rsp)
  0x0000000116b4e093: mov    %rsi,0x48(%rsp)
  0x0000000116b4e098: mov    %rdi,0x40(%rsp)
  0x0000000116b4e09d: mov    %r8,0x38(%rsp)
  0x0000000116b4e0a2: mov    %r9,0x30(%rsp)
  0x0000000116b4e0a7: mov    %r10,0x28(%rsp)
  0x0000000116b4e0ac: mov    %r11,0x20(%rsp)
  0x0000000116b4e0b1: mov    %r12,0x18(%rsp)
  0x0000000116b4e0b6: mov    %r13,0x10(%rsp)
  0x0000000116b4e0bb: mov    %r14,0x8(%rsp)
  0x0000000116b4e0c0: mov    %r15,(%rsp)
  0x0000000116b4e0c4: movabs $0x10cc63f17,%rdi
  0x0000000116b4e0ce: movabs $0x116b4e06e,%rsi
  0x0000000116b4e0d8: mov    %rsp,%rdx
  0x0000000116b4e0db: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e0df: callq  0x000000010c7dd830
  0x0000000116b4e0e4: hlt    
  0x0000000116b4e0e5: pop    %r10
  0x0000000116b4e0e7: mov    %r15,%rdi
  0x0000000116b4e0ea: mov    %rbp,0x290(%r15)
  0x0000000116b4e0f1: mov    %rax,0x280(%r15)
  0x0000000116b4e0f8: test   $0xf,%esp
  0x0000000116b4e0fe: je     0x0000000116b4e116
  0x0000000116b4e104: sub    $0x8,%rsp
  0x0000000116b4e108: callq  0x000000010c5881a0
  0x0000000116b4e10d: add    $0x8,%rsp
  0x0000000116b4e111: jmpq   0x0000000116b4e11b
  0x0000000116b4e116: callq  0x000000010c5881a0
  0x0000000116b4e11b: push   %rax
  0x0000000116b4e11c: push   %rdi
  0x0000000116b4e11d: push   %rsi
  0x0000000116b4e11e: push   %rdx
  0x0000000116b4e11f: push   %rcx
  0x0000000116b4e120: push   %r8
  0x0000000116b4e122: push   %r9
  0x0000000116b4e124: push   %r10
  0x0000000116b4e126: mov    %rsp,%r10
  0x0000000116b4e129: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e12d: push   %r10
  0x0000000116b4e12f: push   %r11
  0x0000000116b4e131: mov    $0x109,%edi
  0x0000000116b4e136: movabs $0x7ff815049fd5,%r10
  0x0000000116b4e140: callq  *%r10
  0x0000000116b4e143: pop    %r11
  0x0000000116b4e145: pop    %rsp
  0x0000000116b4e146: pop    %r10
  0x0000000116b4e148: pop    %r9
  0x0000000116b4e14a: pop    %r8
  0x0000000116b4e14c: pop    %rcx
  0x0000000116b4e14d: pop    %rdx
  0x0000000116b4e14e: pop    %rsi
  0x0000000116b4e14f: pop    %rdi
  0x0000000116b4e150: cmp    %rax,%r15
  0x0000000116b4e153: je     0x0000000116b4e1d0
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4e159: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e15e: sub    $0x80,%rsp
  0x0000000116b4e165: mov    %rax,0x78(%rsp)
  0x0000000116b4e16a: mov    %rcx,0x70(%rsp)
  0x0000000116b4e16f: mov    %rdx,0x68(%rsp)
  0x0000000116b4e174: mov    %rbx,0x60(%rsp)
  0x0000000116b4e179: mov    %rbp,0x50(%rsp)
  0x0000000116b4e17e: mov    %rsi,0x48(%rsp)
  0x0000000116b4e183: mov    %rdi,0x40(%rsp)
  0x0000000116b4e188: mov    %r8,0x38(%rsp)
  0x0000000116b4e18d: mov    %r9,0x30(%rsp)
  0x0000000116b4e192: mov    %r10,0x28(%rsp)
  0x0000000116b4e197: mov    %r11,0x20(%rsp)
  0x0000000116b4e19c: mov    %r12,0x18(%rsp)
  0x0000000116b4e1a1: mov    %r13,0x10(%rsp)
  0x0000000116b4e1a6: mov    %r14,0x8(%rsp)
  0x0000000116b4e1ab: mov    %r15,(%rsp)
  0x0000000116b4e1af: movabs $0x10cc6405e,%rdi
  0x0000000116b4e1b9: movabs $0x116b4e159,%rsi
  0x0000000116b4e1c3: mov    %rsp,%rdx
  0x0000000116b4e1c6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e1ca: callq  0x000000010c7dd830
  0x0000000116b4e1cf: hlt    
  0x0000000116b4e1d0: pop    %rax
  0x0000000116b4e1d1: movabs $0x0,%r10
  0x0000000116b4e1db: mov    %r10,0x280(%r15)
  0x0000000116b4e1e2: movabs $0x0,%r10
  0x0000000116b4e1ec: mov    %r10,0x290(%r15)
  0x0000000116b4e1f3: movabs $0x0,%r10
  0x0000000116b4e1fd: mov    %r10,0x288(%r15)
  0x0000000116b4e204: cmpq   $0x0,0x8(%r15)
  0x0000000116b4e20c: je     0x0000000116b4e217
  0x0000000116b4e212: jmpq   0x0000000116b30420
  0x0000000116b4e217: mov    -0x38(%rbp),%r13
  0x0000000116b4e21b: mov    -0x30(%rbp),%r14
  0x0000000116b4e21f: retq   
  0x0000000116b4e220: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e225: sub    $0x80,%rsp
  0x0000000116b4e22c: mov    %rax,0x78(%rsp)
  0x0000000116b4e231: mov    %rcx,0x70(%rsp)
  0x0000000116b4e236: mov    %rdx,0x68(%rsp)
  0x0000000116b4e23b: mov    %rbx,0x60(%rsp)
  0x0000000116b4e240: mov    %rbp,0x50(%rsp)
  0x0000000116b4e245: mov    %rsi,0x48(%rsp)
  0x0000000116b4e24a: mov    %rdi,0x40(%rsp)
  0x0000000116b4e24f: mov    %r8,0x38(%rsp)
  0x0000000116b4e254: mov    %r9,0x30(%rsp)
  0x0000000116b4e259: mov    %r10,0x28(%rsp)
  0x0000000116b4e25e: mov    %r11,0x20(%rsp)
  0x0000000116b4e263: mov    %r12,0x18(%rsp)
  0x0000000116b4e268: mov    %r13,0x10(%rsp)
  0x0000000116b4e26d: mov    %r14,0x8(%rsp)
  0x0000000116b4e272: mov    %r15,(%rsp)
  0x0000000116b4e276: movabs $0x10cb763be,%rdi
  0x0000000116b4e280: movabs $0x116b4e220,%rsi
  0x0000000116b4e28a: mov    %rsp,%rdx
  0x0000000116b4e28d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e291: callq  0x000000010c7dd830
  0x0000000116b4e296: hlt    
  0x0000000116b4e297: movzbl 0x9(%r13),%ebx
  0x0000000116b4e29c: add    $0x9,%r13
  0x0000000116b4e2a0: movabs $0x10ce38e80,%r10
  0x0000000116b4e2aa: jmpq   *(%r10,%rbx,8)
  0x0000000116b4e2ae: movq   $0x0,-0x10(%rbp)
  0x0000000116b4e2b6: mov    -0x38(%rbp),%r13
  0x0000000116b4e2ba: mov    -0x30(%rbp),%r14
  0x0000000116b4e2be: cmpq   $0x0,0x8(%r15)
  0x0000000116b4e2c6: je     0x0000000116b4e59c
  0x0000000116b4e2cc: callq  0x0000000116b4e2d6
  0x0000000116b4e2d1: jmpq   0x0000000116b4e525
  0x0000000116b4e2d6: lea    0x8(%rsp),%rax
  0x0000000116b4e2db: mov    %r13,-0x38(%rbp)
  0x0000000116b4e2df: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4e2e7: je     0x0000000116b4e364
  0x0000000116b4e2ed: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e2f2: sub    $0x80,%rsp
  0x0000000116b4e2f9: mov    %rax,0x78(%rsp)
  0x0000000116b4e2fe: mov    %rcx,0x70(%rsp)
  0x0000000116b4e303: mov    %rdx,0x68(%rsp)
  0x0000000116b4e308: mov    %rbx,0x60(%rsp)
  0x0000000116b4e30d: mov    %rbp,0x50(%rsp)
  0x0000000116b4e312: mov    %rsi,0x48(%rsp)
  0x0000000116b4e317: mov    %rdi,0x40(%rsp)
  0x0000000116b4e31c: mov    %r8,0x38(%rsp)
  0x0000000116b4e321: mov    %r9,0x30(%rsp)
  0x0000000116b4e326: mov    %r10,0x28(%rsp)
  0x0000000116b4e32b: mov    %r11,0x20(%rsp)
  0x0000000116b4e330: mov    %r12,0x18(%rsp)
  0x0000000116b4e335: mov    %r13,0x10(%rsp)
  0x0000000116b4e33a: mov    %r14,0x8(%rsp)
  0x0000000116b4e33f: mov    %r15,(%rsp)
  0x0000000116b4e343: movabs $0x10cc2363b,%rdi
  0x0000000116b4e34d: movabs $0x116b4e2ed,%rsi
  0x0000000116b4e357: mov    %rsp,%rdx
  0x0000000116b4e35a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e35e: callq  0x000000010c7dd830
  0x0000000116b4e363: hlt    
  0x0000000116b4e364: push   %r10
  0x0000000116b4e366: cmp    -0x9d07abd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4e36d: je     0x0000000116b4e3ea
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4e373: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e378: sub    $0x80,%rsp
  0x0000000116b4e37f: mov    %rax,0x78(%rsp)
  0x0000000116b4e384: mov    %rcx,0x70(%rsp)
  0x0000000116b4e389: mov    %rdx,0x68(%rsp)
  0x0000000116b4e38e: mov    %rbx,0x60(%rsp)
  0x0000000116b4e393: mov    %rbp,0x50(%rsp)
  0x0000000116b4e398: mov    %rsi,0x48(%rsp)
  0x0000000116b4e39d: mov    %rdi,0x40(%rsp)
  0x0000000116b4e3a2: mov    %r8,0x38(%rsp)
  0x0000000116b4e3a7: mov    %r9,0x30(%rsp)
  0x0000000116b4e3ac: mov    %r10,0x28(%rsp)
  0x0000000116b4e3b1: mov    %r11,0x20(%rsp)
  0x0000000116b4e3b6: mov    %r12,0x18(%rsp)
  0x0000000116b4e3bb: mov    %r13,0x10(%rsp)
  0x0000000116b4e3c0: mov    %r14,0x8(%rsp)
  0x0000000116b4e3c5: mov    %r15,(%rsp)
  0x0000000116b4e3c9: movabs $0x10cc63f17,%rdi
  0x0000000116b4e3d3: movabs $0x116b4e373,%rsi
  0x0000000116b4e3dd: mov    %rsp,%rdx
  0x0000000116b4e3e0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e3e4: callq  0x000000010c7dd830
  0x0000000116b4e3e9: hlt    
  0x0000000116b4e3ea: pop    %r10
  0x0000000116b4e3ec: mov    %r15,%rdi
  0x0000000116b4e3ef: mov    %rbp,0x290(%r15)
  0x0000000116b4e3f6: mov    %rax,0x280(%r15)
  0x0000000116b4e3fd: test   $0xf,%esp
  0x0000000116b4e403: je     0x0000000116b4e41b
  0x0000000116b4e409: sub    $0x8,%rsp
  0x0000000116b4e40d: callq  0x000000010c5881a0
  0x0000000116b4e412: add    $0x8,%rsp
  0x0000000116b4e416: jmpq   0x0000000116b4e420
  0x0000000116b4e41b: callq  0x000000010c5881a0
  0x0000000116b4e420: push   %rax
  0x0000000116b4e421: push   %rdi
  0x0000000116b4e422: push   %rsi
  0x0000000116b4e423: push   %rdx
  0x0000000116b4e424: push   %rcx
  0x0000000116b4e425: push   %r8
  0x0000000116b4e427: push   %r9
  0x0000000116b4e429: push   %r10
  0x0000000116b4e42b: mov    %rsp,%r10
  0x0000000116b4e42e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e432: push   %r10
  0x0000000116b4e434: push   %r11
  0x0000000116b4e436: mov    $0x109,%edi
  0x0000000116b4e43b: movabs $0x7ff815049fd5,%r10
  0x0000000116b4e445: callq  *%r10
  0x0000000116b4e448: pop    %r11
  0x0000000116b4e44a: pop    %rsp
  0x0000000116b4e44b: pop    %r10
  0x0000000116b4e44d: pop    %r9
  0x0000000116b4e44f: pop    %r8
  0x0000000116b4e451: pop    %rcx
  0x0000000116b4e452: pop    %rdx
  0x0000000116b4e453: pop    %rsi
  0x0000000116b4e454: pop    %rdi
  0x0000000116b4e455: cmp    %rax,%r15
  0x0000000116b4e458: je     0x0000000116b4e4d5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4e45e: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e463: sub    $0x80,%rsp
  0x0000000116b4e46a: mov    %rax,0x78(%rsp)
  0x0000000116b4e46f: mov    %rcx,0x70(%rsp)
  0x0000000116b4e474: mov    %rdx,0x68(%rsp)
  0x0000000116b4e479: mov    %rbx,0x60(%rsp)
  0x0000000116b4e47e: mov    %rbp,0x50(%rsp)
  0x0000000116b4e483: mov    %rsi,0x48(%rsp)
  0x0000000116b4e488: mov    %rdi,0x40(%rsp)
  0x0000000116b4e48d: mov    %r8,0x38(%rsp)
  0x0000000116b4e492: mov    %r9,0x30(%rsp)
  0x0000000116b4e497: mov    %r10,0x28(%rsp)
  0x0000000116b4e49c: mov    %r11,0x20(%rsp)
  0x0000000116b4e4a1: mov    %r12,0x18(%rsp)
  0x0000000116b4e4a6: mov    %r13,0x10(%rsp)
  0x0000000116b4e4ab: mov    %r14,0x8(%rsp)
  0x0000000116b4e4b0: mov    %r15,(%rsp)
  0x0000000116b4e4b4: movabs $0x10cc6405e,%rdi
  0x0000000116b4e4be: movabs $0x116b4e45e,%rsi
  0x0000000116b4e4c8: mov    %rsp,%rdx
  0x0000000116b4e4cb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e4cf: callq  0x000000010c7dd830
  0x0000000116b4e4d4: hlt    
  0x0000000116b4e4d5: pop    %rax
  0x0000000116b4e4d6: movabs $0x0,%r10
  0x0000000116b4e4e0: mov    %r10,0x280(%r15)
  0x0000000116b4e4e7: movabs $0x0,%r10
  0x0000000116b4e4f1: mov    %r10,0x290(%r15)
  0x0000000116b4e4f8: movabs $0x0,%r10
  0x0000000116b4e502: mov    %r10,0x288(%r15)
  0x0000000116b4e509: cmpq   $0x0,0x8(%r15)
  0x0000000116b4e511: je     0x0000000116b4e51c
  0x0000000116b4e517: jmpq   0x0000000116b30420
  0x0000000116b4e51c: mov    -0x38(%rbp),%r13
  0x0000000116b4e520: mov    -0x30(%rbp),%r14
  0x0000000116b4e524: retq   
  0x0000000116b4e525: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e52a: sub    $0x80,%rsp
  0x0000000116b4e531: mov    %rax,0x78(%rsp)
  0x0000000116b4e536: mov    %rcx,0x70(%rsp)
  0x0000000116b4e53b: mov    %rdx,0x68(%rsp)
  0x0000000116b4e540: mov    %rbx,0x60(%rsp)
  0x0000000116b4e545: mov    %rbp,0x50(%rsp)
  0x0000000116b4e54a: mov    %rsi,0x48(%rsp)
  0x0000000116b4e54f: mov    %rdi,0x40(%rsp)
  0x0000000116b4e554: mov    %r8,0x38(%rsp)
  0x0000000116b4e559: mov    %r9,0x30(%rsp)
  0x0000000116b4e55e: mov    %r10,0x28(%rsp)
  0x0000000116b4e563: mov    %r11,0x20(%rsp)
  0x0000000116b4e568: mov    %r12,0x18(%rsp)
  0x0000000116b4e56d: mov    %r13,0x10(%rsp)
  0x0000000116b4e572: mov    %r14,0x8(%rsp)
  0x0000000116b4e577: mov    %r15,(%rsp)
  0x0000000116b4e57b: movabs $0x10cb763be,%rdi
  0x0000000116b4e585: movabs $0x116b4e525,%rsi
  0x0000000116b4e58f: mov    %rsp,%rdx
  0x0000000116b4e592: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e596: callq  0x000000010c7dd830
  0x0000000116b4e59b: hlt    
  0x0000000116b4e59c: movzbl 0x9(%r13),%ebx
  0x0000000116b4e5a1: add    $0x9,%r13
  0x0000000116b4e5a5: movabs $0x10ce39680,%r10
  0x0000000116b4e5af: jmpq   *(%r10,%rbx,8)
  0x0000000116b4e5b3: movq   $0x0,-0x10(%rbp)
  0x0000000116b4e5bb: mov    -0x38(%rbp),%r13
  0x0000000116b4e5bf: mov    -0x30(%rbp),%r14
  0x0000000116b4e5c3: cmpq   $0x0,0x8(%r15)
  0x0000000116b4e5cb: je     0x0000000116b4e8a1
  0x0000000116b4e5d1: callq  0x0000000116b4e5db
  0x0000000116b4e5d6: jmpq   0x0000000116b4e82a
  0x0000000116b4e5db: lea    0x8(%rsp),%rax
  0x0000000116b4e5e0: mov    %r13,-0x38(%rbp)
  0x0000000116b4e5e4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4e5ec: je     0x0000000116b4e669
  0x0000000116b4e5f2: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e5f7: sub    $0x80,%rsp
  0x0000000116b4e5fe: mov    %rax,0x78(%rsp)
  0x0000000116b4e603: mov    %rcx,0x70(%rsp)
  0x0000000116b4e608: mov    %rdx,0x68(%rsp)
  0x0000000116b4e60d: mov    %rbx,0x60(%rsp)
  0x0000000116b4e612: mov    %rbp,0x50(%rsp)
  0x0000000116b4e617: mov    %rsi,0x48(%rsp)
  0x0000000116b4e61c: mov    %rdi,0x40(%rsp)
  0x0000000116b4e621: mov    %r8,0x38(%rsp)
  0x0000000116b4e626: mov    %r9,0x30(%rsp)
  0x0000000116b4e62b: mov    %r10,0x28(%rsp)
  0x0000000116b4e630: mov    %r11,0x20(%rsp)
  0x0000000116b4e635: mov    %r12,0x18(%rsp)
  0x0000000116b4e63a: mov    %r13,0x10(%rsp)
  0x0000000116b4e63f: mov    %r14,0x8(%rsp)
  0x0000000116b4e644: mov    %r15,(%rsp)
  0x0000000116b4e648: movabs $0x10cc2363b,%rdi
  0x0000000116b4e652: movabs $0x116b4e5f2,%rsi
  0x0000000116b4e65c: mov    %rsp,%rdx
  0x0000000116b4e65f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e663: callq  0x000000010c7dd830
  0x0000000116b4e668: hlt    
  0x0000000116b4e669: push   %r10
  0x0000000116b4e66b: cmp    -0x9d07dc2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4e672: je     0x0000000116b4e6ef
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4e678: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e67d: sub    $0x80,%rsp
  0x0000000116b4e684: mov    %rax,0x78(%rsp)
  0x0000000116b4e689: mov    %rcx,0x70(%rsp)
  0x0000000116b4e68e: mov    %rdx,0x68(%rsp)
  0x0000000116b4e693: mov    %rbx,0x60(%rsp)
  0x0000000116b4e698: mov    %rbp,0x50(%rsp)
  0x0000000116b4e69d: mov    %rsi,0x48(%rsp)
  0x0000000116b4e6a2: mov    %rdi,0x40(%rsp)
  0x0000000116b4e6a7: mov    %r8,0x38(%rsp)
  0x0000000116b4e6ac: mov    %r9,0x30(%rsp)
  0x0000000116b4e6b1: mov    %r10,0x28(%rsp)
  0x0000000116b4e6b6: mov    %r11,0x20(%rsp)
  0x0000000116b4e6bb: mov    %r12,0x18(%rsp)
  0x0000000116b4e6c0: mov    %r13,0x10(%rsp)
  0x0000000116b4e6c5: mov    %r14,0x8(%rsp)
  0x0000000116b4e6ca: mov    %r15,(%rsp)
  0x0000000116b4e6ce: movabs $0x10cc63f17,%rdi
  0x0000000116b4e6d8: movabs $0x116b4e678,%rsi
  0x0000000116b4e6e2: mov    %rsp,%rdx
  0x0000000116b4e6e5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e6e9: callq  0x000000010c7dd830
  0x0000000116b4e6ee: hlt    
  0x0000000116b4e6ef: pop    %r10
  0x0000000116b4e6f1: mov    %r15,%rdi
  0x0000000116b4e6f4: mov    %rbp,0x290(%r15)
  0x0000000116b4e6fb: mov    %rax,0x280(%r15)
  0x0000000116b4e702: test   $0xf,%esp
  0x0000000116b4e708: je     0x0000000116b4e720
  0x0000000116b4e70e: sub    $0x8,%rsp
  0x0000000116b4e712: callq  0x000000010c5881a0
  0x0000000116b4e717: add    $0x8,%rsp
  0x0000000116b4e71b: jmpq   0x0000000116b4e725
  0x0000000116b4e720: callq  0x000000010c5881a0
  0x0000000116b4e725: push   %rax
  0x0000000116b4e726: push   %rdi
  0x0000000116b4e727: push   %rsi
  0x0000000116b4e728: push   %rdx
  0x0000000116b4e729: push   %rcx
  0x0000000116b4e72a: push   %r8
  0x0000000116b4e72c: push   %r9
  0x0000000116b4e72e: push   %r10
  0x0000000116b4e730: mov    %rsp,%r10
  0x0000000116b4e733: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e737: push   %r10
  0x0000000116b4e739: push   %r11
  0x0000000116b4e73b: mov    $0x109,%edi
  0x0000000116b4e740: movabs $0x7ff815049fd5,%r10
  0x0000000116b4e74a: callq  *%r10
  0x0000000116b4e74d: pop    %r11
  0x0000000116b4e74f: pop    %rsp
  0x0000000116b4e750: pop    %r10
  0x0000000116b4e752: pop    %r9
  0x0000000116b4e754: pop    %r8
  0x0000000116b4e756: pop    %rcx
  0x0000000116b4e757: pop    %rdx
  0x0000000116b4e758: pop    %rsi
  0x0000000116b4e759: pop    %rdi
  0x0000000116b4e75a: cmp    %rax,%r15
  0x0000000116b4e75d: je     0x0000000116b4e7da
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4e763: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e768: sub    $0x80,%rsp
  0x0000000116b4e76f: mov    %rax,0x78(%rsp)
  0x0000000116b4e774: mov    %rcx,0x70(%rsp)
  0x0000000116b4e779: mov    %rdx,0x68(%rsp)
  0x0000000116b4e77e: mov    %rbx,0x60(%rsp)
  0x0000000116b4e783: mov    %rbp,0x50(%rsp)
  0x0000000116b4e788: mov    %rsi,0x48(%rsp)
  0x0000000116b4e78d: mov    %rdi,0x40(%rsp)
  0x0000000116b4e792: mov    %r8,0x38(%rsp)
  0x0000000116b4e797: mov    %r9,0x30(%rsp)
  0x0000000116b4e79c: mov    %r10,0x28(%rsp)
  0x0000000116b4e7a1: mov    %r11,0x20(%rsp)
  0x0000000116b4e7a6: mov    %r12,0x18(%rsp)
  0x0000000116b4e7ab: mov    %r13,0x10(%rsp)
  0x0000000116b4e7b0: mov    %r14,0x8(%rsp)
  0x0000000116b4e7b5: mov    %r15,(%rsp)
  0x0000000116b4e7b9: movabs $0x10cc6405e,%rdi
  0x0000000116b4e7c3: movabs $0x116b4e763,%rsi
  0x0000000116b4e7cd: mov    %rsp,%rdx
  0x0000000116b4e7d0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e7d4: callq  0x000000010c7dd830
  0x0000000116b4e7d9: hlt    
  0x0000000116b4e7da: pop    %rax
  0x0000000116b4e7db: movabs $0x0,%r10
  0x0000000116b4e7e5: mov    %r10,0x280(%r15)
  0x0000000116b4e7ec: movabs $0x0,%r10
  0x0000000116b4e7f6: mov    %r10,0x290(%r15)
  0x0000000116b4e7fd: movabs $0x0,%r10
  0x0000000116b4e807: mov    %r10,0x288(%r15)
  0x0000000116b4e80e: cmpq   $0x0,0x8(%r15)
  0x0000000116b4e816: je     0x0000000116b4e821
  0x0000000116b4e81c: jmpq   0x0000000116b30420
  0x0000000116b4e821: mov    -0x38(%rbp),%r13
  0x0000000116b4e825: mov    -0x30(%rbp),%r14
  0x0000000116b4e829: retq   
  0x0000000116b4e82a: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e82f: sub    $0x80,%rsp
  0x0000000116b4e836: mov    %rax,0x78(%rsp)
  0x0000000116b4e83b: mov    %rcx,0x70(%rsp)
  0x0000000116b4e840: mov    %rdx,0x68(%rsp)
  0x0000000116b4e845: mov    %rbx,0x60(%rsp)
  0x0000000116b4e84a: mov    %rbp,0x50(%rsp)
  0x0000000116b4e84f: mov    %rsi,0x48(%rsp)
  0x0000000116b4e854: mov    %rdi,0x40(%rsp)
  0x0000000116b4e859: mov    %r8,0x38(%rsp)
  0x0000000116b4e85e: mov    %r9,0x30(%rsp)
  0x0000000116b4e863: mov    %r10,0x28(%rsp)
  0x0000000116b4e868: mov    %r11,0x20(%rsp)
  0x0000000116b4e86d: mov    %r12,0x18(%rsp)
  0x0000000116b4e872: mov    %r13,0x10(%rsp)
  0x0000000116b4e877: mov    %r14,0x8(%rsp)
  0x0000000116b4e87c: mov    %r15,(%rsp)
  0x0000000116b4e880: movabs $0x10cb763be,%rdi
  0x0000000116b4e88a: movabs $0x116b4e82a,%rsi
  0x0000000116b4e894: mov    %rsp,%rdx
  0x0000000116b4e897: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e89b: callq  0x000000010c7dd830
  0x0000000116b4e8a0: hlt    
  0x0000000116b4e8a1: movzbl 0x9(%r13),%ebx
  0x0000000116b4e8a6: add    $0x9,%r13
  0x0000000116b4e8aa: movabs $0x10ce39e80,%r10
  0x0000000116b4e8b4: jmpq   *(%r10,%rbx,8)
  0x0000000116b4e8b8: movq   $0x0,-0x10(%rbp)
  0x0000000116b4e8c0: mov    -0x38(%rbp),%r13
  0x0000000116b4e8c4: mov    -0x30(%rbp),%r14
  0x0000000116b4e8c8: cmpq   $0x0,0x8(%r15)
  0x0000000116b4e8d0: je     0x0000000116b4eba6
  0x0000000116b4e8d6: callq  0x0000000116b4e8e0
  0x0000000116b4e8db: jmpq   0x0000000116b4eb2f
  0x0000000116b4e8e0: lea    0x8(%rsp),%rax
  0x0000000116b4e8e5: mov    %r13,-0x38(%rbp)
  0x0000000116b4e8e9: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4e8f1: je     0x0000000116b4e96e
  0x0000000116b4e8f7: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e8fc: sub    $0x80,%rsp
  0x0000000116b4e903: mov    %rax,0x78(%rsp)
  0x0000000116b4e908: mov    %rcx,0x70(%rsp)
  0x0000000116b4e90d: mov    %rdx,0x68(%rsp)
  0x0000000116b4e912: mov    %rbx,0x60(%rsp)
  0x0000000116b4e917: mov    %rbp,0x50(%rsp)
  0x0000000116b4e91c: mov    %rsi,0x48(%rsp)
  0x0000000116b4e921: mov    %rdi,0x40(%rsp)
  0x0000000116b4e926: mov    %r8,0x38(%rsp)
  0x0000000116b4e92b: mov    %r9,0x30(%rsp)
  0x0000000116b4e930: mov    %r10,0x28(%rsp)
  0x0000000116b4e935: mov    %r11,0x20(%rsp)
  0x0000000116b4e93a: mov    %r12,0x18(%rsp)
  0x0000000116b4e93f: mov    %r13,0x10(%rsp)
  0x0000000116b4e944: mov    %r14,0x8(%rsp)
  0x0000000116b4e949: mov    %r15,(%rsp)
  0x0000000116b4e94d: movabs $0x10cc2363b,%rdi
  0x0000000116b4e957: movabs $0x116b4e8f7,%rsi
  0x0000000116b4e961: mov    %rsp,%rdx
  0x0000000116b4e964: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e968: callq  0x000000010c7dd830
  0x0000000116b4e96d: hlt    
  0x0000000116b4e96e: push   %r10
  0x0000000116b4e970: cmp    -0x9d080c7(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4e977: je     0x0000000116b4e9f4
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4e97d: mov    %rsp,-0x28(%rsp)
  0x0000000116b4e982: sub    $0x80,%rsp
  0x0000000116b4e989: mov    %rax,0x78(%rsp)
  0x0000000116b4e98e: mov    %rcx,0x70(%rsp)
  0x0000000116b4e993: mov    %rdx,0x68(%rsp)
  0x0000000116b4e998: mov    %rbx,0x60(%rsp)
  0x0000000116b4e99d: mov    %rbp,0x50(%rsp)
  0x0000000116b4e9a2: mov    %rsi,0x48(%rsp)
  0x0000000116b4e9a7: mov    %rdi,0x40(%rsp)
  0x0000000116b4e9ac: mov    %r8,0x38(%rsp)
  0x0000000116b4e9b1: mov    %r9,0x30(%rsp)
  0x0000000116b4e9b6: mov    %r10,0x28(%rsp)
  0x0000000116b4e9bb: mov    %r11,0x20(%rsp)
  0x0000000116b4e9c0: mov    %r12,0x18(%rsp)
  0x0000000116b4e9c5: mov    %r13,0x10(%rsp)
  0x0000000116b4e9ca: mov    %r14,0x8(%rsp)
  0x0000000116b4e9cf: mov    %r15,(%rsp)
  0x0000000116b4e9d3: movabs $0x10cc63f17,%rdi
  0x0000000116b4e9dd: movabs $0x116b4e97d,%rsi
  0x0000000116b4e9e7: mov    %rsp,%rdx
  0x0000000116b4e9ea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4e9ee: callq  0x000000010c7dd830
  0x0000000116b4e9f3: hlt    
  0x0000000116b4e9f4: pop    %r10
  0x0000000116b4e9f6: mov    %r15,%rdi
  0x0000000116b4e9f9: mov    %rbp,0x290(%r15)
  0x0000000116b4ea00: mov    %rax,0x280(%r15)
  0x0000000116b4ea07: test   $0xf,%esp
  0x0000000116b4ea0d: je     0x0000000116b4ea25
  0x0000000116b4ea13: sub    $0x8,%rsp
  0x0000000116b4ea17: callq  0x000000010c5881a0
  0x0000000116b4ea1c: add    $0x8,%rsp
  0x0000000116b4ea20: jmpq   0x0000000116b4ea2a
  0x0000000116b4ea25: callq  0x000000010c5881a0
  0x0000000116b4ea2a: push   %rax
  0x0000000116b4ea2b: push   %rdi
  0x0000000116b4ea2c: push   %rsi
  0x0000000116b4ea2d: push   %rdx
  0x0000000116b4ea2e: push   %rcx
  0x0000000116b4ea2f: push   %r8
  0x0000000116b4ea31: push   %r9
  0x0000000116b4ea33: push   %r10
  0x0000000116b4ea35: mov    %rsp,%r10
  0x0000000116b4ea38: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ea3c: push   %r10
  0x0000000116b4ea3e: push   %r11
  0x0000000116b4ea40: mov    $0x109,%edi
  0x0000000116b4ea45: movabs $0x7ff815049fd5,%r10
  0x0000000116b4ea4f: callq  *%r10
  0x0000000116b4ea52: pop    %r11
  0x0000000116b4ea54: pop    %rsp
  0x0000000116b4ea55: pop    %r10
  0x0000000116b4ea57: pop    %r9
  0x0000000116b4ea59: pop    %r8
  0x0000000116b4ea5b: pop    %rcx
  0x0000000116b4ea5c: pop    %rdx
  0x0000000116b4ea5d: pop    %rsi
  0x0000000116b4ea5e: pop    %rdi
  0x0000000116b4ea5f: cmp    %rax,%r15
  0x0000000116b4ea62: je     0x0000000116b4eadf
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4ea68: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ea6d: sub    $0x80,%rsp
  0x0000000116b4ea74: mov    %rax,0x78(%rsp)
  0x0000000116b4ea79: mov    %rcx,0x70(%rsp)
  0x0000000116b4ea7e: mov    %rdx,0x68(%rsp)
  0x0000000116b4ea83: mov    %rbx,0x60(%rsp)
  0x0000000116b4ea88: mov    %rbp,0x50(%rsp)
  0x0000000116b4ea8d: mov    %rsi,0x48(%rsp)
  0x0000000116b4ea92: mov    %rdi,0x40(%rsp)
  0x0000000116b4ea97: mov    %r8,0x38(%rsp)
  0x0000000116b4ea9c: mov    %r9,0x30(%rsp)
  0x0000000116b4eaa1: mov    %r10,0x28(%rsp)
  0x0000000116b4eaa6: mov    %r11,0x20(%rsp)
  0x0000000116b4eaab: mov    %r12,0x18(%rsp)
  0x0000000116b4eab0: mov    %r13,0x10(%rsp)
  0x0000000116b4eab5: mov    %r14,0x8(%rsp)
  0x0000000116b4eaba: mov    %r15,(%rsp)
  0x0000000116b4eabe: movabs $0x10cc6405e,%rdi
  0x0000000116b4eac8: movabs $0x116b4ea68,%rsi
  0x0000000116b4ead2: mov    %rsp,%rdx
  0x0000000116b4ead5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ead9: callq  0x000000010c7dd830
  0x0000000116b4eade: hlt    
  0x0000000116b4eadf: pop    %rax
  0x0000000116b4eae0: movabs $0x0,%r10
  0x0000000116b4eaea: mov    %r10,0x280(%r15)
  0x0000000116b4eaf1: movabs $0x0,%r10
  0x0000000116b4eafb: mov    %r10,0x290(%r15)
  0x0000000116b4eb02: movabs $0x0,%r10
  0x0000000116b4eb0c: mov    %r10,0x288(%r15)
  0x0000000116b4eb13: cmpq   $0x0,0x8(%r15)
  0x0000000116b4eb1b: je     0x0000000116b4eb26
  0x0000000116b4eb21: jmpq   0x0000000116b30420
  0x0000000116b4eb26: mov    -0x38(%rbp),%r13
  0x0000000116b4eb2a: mov    -0x30(%rbp),%r14
  0x0000000116b4eb2e: retq   
  0x0000000116b4eb2f: mov    %rsp,-0x28(%rsp)
  0x0000000116b4eb34: sub    $0x80,%rsp
  0x0000000116b4eb3b: mov    %rax,0x78(%rsp)
  0x0000000116b4eb40: mov    %rcx,0x70(%rsp)
  0x0000000116b4eb45: mov    %rdx,0x68(%rsp)
  0x0000000116b4eb4a: mov    %rbx,0x60(%rsp)
  0x0000000116b4eb4f: mov    %rbp,0x50(%rsp)
  0x0000000116b4eb54: mov    %rsi,0x48(%rsp)
  0x0000000116b4eb59: mov    %rdi,0x40(%rsp)
  0x0000000116b4eb5e: mov    %r8,0x38(%rsp)
  0x0000000116b4eb63: mov    %r9,0x30(%rsp)
  0x0000000116b4eb68: mov    %r10,0x28(%rsp)
  0x0000000116b4eb6d: mov    %r11,0x20(%rsp)
  0x0000000116b4eb72: mov    %r12,0x18(%rsp)
  0x0000000116b4eb77: mov    %r13,0x10(%rsp)
  0x0000000116b4eb7c: mov    %r14,0x8(%rsp)
  0x0000000116b4eb81: mov    %r15,(%rsp)
  0x0000000116b4eb85: movabs $0x10cb763be,%rdi
  0x0000000116b4eb8f: movabs $0x116b4eb2f,%rsi
  0x0000000116b4eb99: mov    %rsp,%rdx
  0x0000000116b4eb9c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4eba0: callq  0x000000010c7dd830
  0x0000000116b4eba5: hlt    
  0x0000000116b4eba6: movzbl 0x9(%r13),%ebx
  0x0000000116b4ebab: add    $0x9,%r13
  0x0000000116b4ebaf: movabs $0x10ce3a680,%r10
  0x0000000116b4ebb9: jmpq   *(%r10,%rbx,8)
  0x0000000116b4ebbd: movq   $0x0,-0x10(%rbp)
  0x0000000116b4ebc5: mov    -0x38(%rbp),%r13
  0x0000000116b4ebc9: mov    -0x30(%rbp),%r14
  0x0000000116b4ebcd: cmpq   $0x0,0x8(%r15)
  0x0000000116b4ebd5: je     0x0000000116b4eeab
  0x0000000116b4ebdb: callq  0x0000000116b4ebe5
  0x0000000116b4ebe0: jmpq   0x0000000116b4ee34
  0x0000000116b4ebe5: lea    0x8(%rsp),%rax
  0x0000000116b4ebea: mov    %r13,-0x38(%rbp)
  0x0000000116b4ebee: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4ebf6: je     0x0000000116b4ec73
  0x0000000116b4ebfc: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ec01: sub    $0x80,%rsp
  0x0000000116b4ec08: mov    %rax,0x78(%rsp)
  0x0000000116b4ec0d: mov    %rcx,0x70(%rsp)
  0x0000000116b4ec12: mov    %rdx,0x68(%rsp)
  0x0000000116b4ec17: mov    %rbx,0x60(%rsp)
  0x0000000116b4ec1c: mov    %rbp,0x50(%rsp)
  0x0000000116b4ec21: mov    %rsi,0x48(%rsp)
  0x0000000116b4ec26: mov    %rdi,0x40(%rsp)
  0x0000000116b4ec2b: mov    %r8,0x38(%rsp)
  0x0000000116b4ec30: mov    %r9,0x30(%rsp)
  0x0000000116b4ec35: mov    %r10,0x28(%rsp)
  0x0000000116b4ec3a: mov    %r11,0x20(%rsp)
  0x0000000116b4ec3f: mov    %r12,0x18(%rsp)
  0x0000000116b4ec44: mov    %r13,0x10(%rsp)
  0x0000000116b4ec49: mov    %r14,0x8(%rsp)
  0x0000000116b4ec4e: mov    %r15,(%rsp)
  0x0000000116b4ec52: movabs $0x10cc2363b,%rdi
  0x0000000116b4ec5c: movabs $0x116b4ebfc,%rsi
  0x0000000116b4ec66: mov    %rsp,%rdx
  0x0000000116b4ec69: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ec6d: callq  0x000000010c7dd830
  0x0000000116b4ec72: hlt    
  0x0000000116b4ec73: push   %r10
  0x0000000116b4ec75: cmp    -0x9d083cc(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4ec7c: je     0x0000000116b4ecf9
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4ec82: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ec87: sub    $0x80,%rsp
  0x0000000116b4ec8e: mov    %rax,0x78(%rsp)
  0x0000000116b4ec93: mov    %rcx,0x70(%rsp)
  0x0000000116b4ec98: mov    %rdx,0x68(%rsp)
  0x0000000116b4ec9d: mov    %rbx,0x60(%rsp)
  0x0000000116b4eca2: mov    %rbp,0x50(%rsp)
  0x0000000116b4eca7: mov    %rsi,0x48(%rsp)
  0x0000000116b4ecac: mov    %rdi,0x40(%rsp)
  0x0000000116b4ecb1: mov    %r8,0x38(%rsp)
  0x0000000116b4ecb6: mov    %r9,0x30(%rsp)
  0x0000000116b4ecbb: mov    %r10,0x28(%rsp)
  0x0000000116b4ecc0: mov    %r11,0x20(%rsp)
  0x0000000116b4ecc5: mov    %r12,0x18(%rsp)
  0x0000000116b4ecca: mov    %r13,0x10(%rsp)
  0x0000000116b4eccf: mov    %r14,0x8(%rsp)
  0x0000000116b4ecd4: mov    %r15,(%rsp)
  0x0000000116b4ecd8: movabs $0x10cc63f17,%rdi
  0x0000000116b4ece2: movabs $0x116b4ec82,%rsi
  0x0000000116b4ecec: mov    %rsp,%rdx
  0x0000000116b4ecef: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ecf3: callq  0x000000010c7dd830
  0x0000000116b4ecf8: hlt    
  0x0000000116b4ecf9: pop    %r10
  0x0000000116b4ecfb: mov    %r15,%rdi
  0x0000000116b4ecfe: mov    %rbp,0x290(%r15)
  0x0000000116b4ed05: mov    %rax,0x280(%r15)
  0x0000000116b4ed0c: test   $0xf,%esp
  0x0000000116b4ed12: je     0x0000000116b4ed2a
  0x0000000116b4ed18: sub    $0x8,%rsp
  0x0000000116b4ed1c: callq  0x000000010c5881a0
  0x0000000116b4ed21: add    $0x8,%rsp
  0x0000000116b4ed25: jmpq   0x0000000116b4ed2f
  0x0000000116b4ed2a: callq  0x000000010c5881a0
  0x0000000116b4ed2f: push   %rax
  0x0000000116b4ed30: push   %rdi
  0x0000000116b4ed31: push   %rsi
  0x0000000116b4ed32: push   %rdx
  0x0000000116b4ed33: push   %rcx
  0x0000000116b4ed34: push   %r8
  0x0000000116b4ed36: push   %r9
  0x0000000116b4ed38: push   %r10
  0x0000000116b4ed3a: mov    %rsp,%r10
  0x0000000116b4ed3d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ed41: push   %r10
  0x0000000116b4ed43: push   %r11
  0x0000000116b4ed45: mov    $0x109,%edi
  0x0000000116b4ed4a: movabs $0x7ff815049fd5,%r10
  0x0000000116b4ed54: callq  *%r10
  0x0000000116b4ed57: pop    %r11
  0x0000000116b4ed59: pop    %rsp
  0x0000000116b4ed5a: pop    %r10
  0x0000000116b4ed5c: pop    %r9
  0x0000000116b4ed5e: pop    %r8
  0x0000000116b4ed60: pop    %rcx
  0x0000000116b4ed61: pop    %rdx
  0x0000000116b4ed62: pop    %rsi
  0x0000000116b4ed63: pop    %rdi
  0x0000000116b4ed64: cmp    %rax,%r15
  0x0000000116b4ed67: je     0x0000000116b4ede4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4ed6d: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ed72: sub    $0x80,%rsp
  0x0000000116b4ed79: mov    %rax,0x78(%rsp)
  0x0000000116b4ed7e: mov    %rcx,0x70(%rsp)
  0x0000000116b4ed83: mov    %rdx,0x68(%rsp)
  0x0000000116b4ed88: mov    %rbx,0x60(%rsp)
  0x0000000116b4ed8d: mov    %rbp,0x50(%rsp)
  0x0000000116b4ed92: mov    %rsi,0x48(%rsp)
  0x0000000116b4ed97: mov    %rdi,0x40(%rsp)
  0x0000000116b4ed9c: mov    %r8,0x38(%rsp)
  0x0000000116b4eda1: mov    %r9,0x30(%rsp)
  0x0000000116b4eda6: mov    %r10,0x28(%rsp)
  0x0000000116b4edab: mov    %r11,0x20(%rsp)
  0x0000000116b4edb0: mov    %r12,0x18(%rsp)
  0x0000000116b4edb5: mov    %r13,0x10(%rsp)
  0x0000000116b4edba: mov    %r14,0x8(%rsp)
  0x0000000116b4edbf: mov    %r15,(%rsp)
  0x0000000116b4edc3: movabs $0x10cc6405e,%rdi
  0x0000000116b4edcd: movabs $0x116b4ed6d,%rsi
  0x0000000116b4edd7: mov    %rsp,%rdx
  0x0000000116b4edda: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4edde: callq  0x000000010c7dd830
  0x0000000116b4ede3: hlt    
  0x0000000116b4ede4: pop    %rax
  0x0000000116b4ede5: movabs $0x0,%r10
  0x0000000116b4edef: mov    %r10,0x280(%r15)
  0x0000000116b4edf6: movabs $0x0,%r10
  0x0000000116b4ee00: mov    %r10,0x290(%r15)
  0x0000000116b4ee07: movabs $0x0,%r10
  0x0000000116b4ee11: mov    %r10,0x288(%r15)
  0x0000000116b4ee18: cmpq   $0x0,0x8(%r15)
  0x0000000116b4ee20: je     0x0000000116b4ee2b
  0x0000000116b4ee26: jmpq   0x0000000116b30420
  0x0000000116b4ee2b: mov    -0x38(%rbp),%r13
  0x0000000116b4ee2f: mov    -0x30(%rbp),%r14
  0x0000000116b4ee33: retq   
  0x0000000116b4ee34: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ee39: sub    $0x80,%rsp
  0x0000000116b4ee40: mov    %rax,0x78(%rsp)
  0x0000000116b4ee45: mov    %rcx,0x70(%rsp)
  0x0000000116b4ee4a: mov    %rdx,0x68(%rsp)
  0x0000000116b4ee4f: mov    %rbx,0x60(%rsp)
  0x0000000116b4ee54: mov    %rbp,0x50(%rsp)
  0x0000000116b4ee59: mov    %rsi,0x48(%rsp)
  0x0000000116b4ee5e: mov    %rdi,0x40(%rsp)
  0x0000000116b4ee63: mov    %r8,0x38(%rsp)
  0x0000000116b4ee68: mov    %r9,0x30(%rsp)
  0x0000000116b4ee6d: mov    %r10,0x28(%rsp)
  0x0000000116b4ee72: mov    %r11,0x20(%rsp)
  0x0000000116b4ee77: mov    %r12,0x18(%rsp)
  0x0000000116b4ee7c: mov    %r13,0x10(%rsp)
  0x0000000116b4ee81: mov    %r14,0x8(%rsp)
  0x0000000116b4ee86: mov    %r15,(%rsp)
  0x0000000116b4ee8a: movabs $0x10cb763be,%rdi
  0x0000000116b4ee94: movabs $0x116b4ee34,%rsi
  0x0000000116b4ee9e: mov    %rsp,%rdx
  0x0000000116b4eea1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4eea5: callq  0x000000010c7dd830
  0x0000000116b4eeaa: hlt    
  0x0000000116b4eeab: movzbl 0x9(%r13),%ebx
  0x0000000116b4eeb0: add    $0x9,%r13
  0x0000000116b4eeb4: movabs $0x10ce3b680,%r10
  0x0000000116b4eebe: jmpq   *(%r10,%rbx,8)
  0x0000000116b4eec2: nop
  0x0000000116b4eec3: nop
  0x0000000116b4eec4: nop
  0x0000000116b4eec5: nop
  0x0000000116b4eec6: nop
  0x0000000116b4eec7: nop
  0x0000000116b4eec8: int3   
  0x0000000116b4eec9: int3   
  0x0000000116b4eeca: int3   
  0x0000000116b4eecb: int3   
  0x0000000116b4eecc: int3   
  0x0000000116b4eecd: int3   
  0x0000000116b4eece: int3   
  0x0000000116b4eecf: int3   
  0x0000000116b4eed0: int3   
  0x0000000116b4eed1: int3   
  0x0000000116b4eed2: int3   
  0x0000000116b4eed3: int3   
  0x0000000116b4eed4: int3   
  0x0000000116b4eed5: int3   
  0x0000000116b4eed6: int3   
  0x0000000116b4eed7: int3   
  0x0000000116b4eed8: int3   
  0x0000000116b4eed9: int3   
  0x0000000116b4eeda: int3   
  0x0000000116b4eedb: int3   
  0x0000000116b4eedc: int3   
  0x0000000116b4eedd: int3   
  0x0000000116b4eede: int3   
  0x0000000116b4eedf: int3   

----------------------------------------------------------------------
result handlers for native calls  [0x0000000116b4ef20, 0x0000000116b4ef40]  32 bytes

  0x0000000116b4ef20: and    $0xff,%eax
  0x0000000116b4ef26: setne  %al
  0x0000000116b4ef29: retq   
  0x0000000116b4ef2a: movzwl %ax,%eax
  0x0000000116b4ef2d: retq   
  0x0000000116b4ef2e: movsbl %al,%eax
  0x0000000116b4ef31: retq   
  0x0000000116b4ef32: movswl %ax,%eax
  0x0000000116b4ef35: retq   
  0x0000000116b4ef36: retq   
  0x0000000116b4ef37: retq   
  0x0000000116b4ef38: retq   
  0x0000000116b4ef39: retq   
  0x0000000116b4ef3a: retq   
  0x0000000116b4ef3b: mov    0x10(%rbp),%rax
  0x0000000116b4ef3f: retq   

----------------------------------------------------------------------
continuation entry points  [0x0000000116b4ef80, 0x0000000116b4f0a0]  288 bytes

  0x0000000116b4ef80: movq   $0x0,-0x10(%rbp)
  0x0000000116b4ef88: movzbl 0x0(%r13),%ebx
  0x0000000116b4ef8d: movabs $0x10ce36e80,%r10
  0x0000000116b4ef97: jmpq   *(%r10,%rbx,8)
  0x0000000116b4ef9b: movq   $0x0,-0x10(%rbp)
  0x0000000116b4efa3: movzbl 0x0(%r13),%ebx
  0x0000000116b4efa8: movabs $0x10ce37680,%r10
  0x0000000116b4efb2: jmpq   *(%r10,%rbx,8)
  0x0000000116b4efb6: movq   $0x0,-0x10(%rbp)
  0x0000000116b4efbe: movzbl 0x0(%r13),%ebx
  0x0000000116b4efc3: movabs $0x10ce37e80,%r10
  0x0000000116b4efcd: jmpq   *(%r10,%rbx,8)
  0x0000000116b4efd1: movq   $0x0,-0x10(%rbp)
  0x0000000116b4efd9: movzbl 0x0(%r13),%ebx
  0x0000000116b4efde: movabs $0x10ce38680,%r10
  0x0000000116b4efe8: jmpq   *(%r10,%rbx,8)
  0x0000000116b4efec: movq   $0x0,-0x10(%rbp)
  0x0000000116b4eff4: movzbl 0x0(%r13),%ebx
  0x0000000116b4eff9: movabs $0x10ce3ae80,%r10
  0x0000000116b4f003: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f007: movq   $0x0,-0x10(%rbp)
  0x0000000116b4f00f: movzbl 0x0(%r13),%ebx
  0x0000000116b4f014: movabs $0x10ce38e80,%r10
  0x0000000116b4f01e: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f022: movq   $0x0,-0x10(%rbp)
  0x0000000116b4f02a: movzbl 0x0(%r13),%ebx
  0x0000000116b4f02f: movabs $0x10ce39680,%r10
  0x0000000116b4f039: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f03d: movq   $0x0,-0x10(%rbp)
  0x0000000116b4f045: movzbl 0x0(%r13),%ebx
  0x0000000116b4f04a: movabs $0x10ce39e80,%r10
  0x0000000116b4f054: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f058: movq   $0x0,-0x10(%rbp)
  0x0000000116b4f060: movzbl 0x0(%r13),%ebx
  0x0000000116b4f065: movabs $0x10ce3a680,%r10
  0x0000000116b4f06f: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f073: movq   $0x0,-0x10(%rbp)
  0x0000000116b4f07b: movzbl 0x0(%r13),%ebx
  0x0000000116b4f080: movabs $0x10ce3b680,%r10
  0x0000000116b4f08a: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f08e: nop
  0x0000000116b4f08f: nop
  0x0000000116b4f090: int3   
  0x0000000116b4f091: int3   
  0x0000000116b4f092: int3   
  0x0000000116b4f093: int3   
  0x0000000116b4f094: int3   
  0x0000000116b4f095: int3   
  0x0000000116b4f096: int3   
  0x0000000116b4f097: int3   
  0x0000000116b4f098: int3   
  0x0000000116b4f099: int3   
  0x0000000116b4f09a: int3   
  0x0000000116b4f09b: int3   
  0x0000000116b4f09c: int3   
  0x0000000116b4f09d: int3   
  0x0000000116b4f09e: int3   
  0x0000000116b4f09f: int3   

----------------------------------------------------------------------
safepoint entry points  [0x0000000116b4f0e0, 0x0000000116b50940]  6240 bytes

  0x0000000116b4f0e0: push   %rax
  0x0000000116b4f0e1: callq  0x0000000116b4f0eb
  0x0000000116b4f0e6: jmpq   0x0000000116b4f33a
  0x0000000116b4f0eb: lea    0x8(%rsp),%rax
  0x0000000116b4f0f0: mov    %r13,-0x38(%rbp)
  0x0000000116b4f0f4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4f0fc: je     0x0000000116b4f179
  0x0000000116b4f102: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f107: sub    $0x80,%rsp
  0x0000000116b4f10e: mov    %rax,0x78(%rsp)
  0x0000000116b4f113: mov    %rcx,0x70(%rsp)
  0x0000000116b4f118: mov    %rdx,0x68(%rsp)
  0x0000000116b4f11d: mov    %rbx,0x60(%rsp)
  0x0000000116b4f122: mov    %rbp,0x50(%rsp)
  0x0000000116b4f127: mov    %rsi,0x48(%rsp)
  0x0000000116b4f12c: mov    %rdi,0x40(%rsp)
  0x0000000116b4f131: mov    %r8,0x38(%rsp)
  0x0000000116b4f136: mov    %r9,0x30(%rsp)
  0x0000000116b4f13b: mov    %r10,0x28(%rsp)
  0x0000000116b4f140: mov    %r11,0x20(%rsp)
  0x0000000116b4f145: mov    %r12,0x18(%rsp)
  0x0000000116b4f14a: mov    %r13,0x10(%rsp)
  0x0000000116b4f14f: mov    %r14,0x8(%rsp)
  0x0000000116b4f154: mov    %r15,(%rsp)
  0x0000000116b4f158: movabs $0x10cc2363b,%rdi
  0x0000000116b4f162: movabs $0x116b4f102,%rsi
  0x0000000116b4f16c: mov    %rsp,%rdx
  0x0000000116b4f16f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f173: callq  0x000000010c7dd830
  0x0000000116b4f178: hlt    
  0x0000000116b4f179: push   %r10
  0x0000000116b4f17b: cmp    -0x9d088d2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4f182: je     0x0000000116b4f1ff
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4f188: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f18d: sub    $0x80,%rsp
  0x0000000116b4f194: mov    %rax,0x78(%rsp)
  0x0000000116b4f199: mov    %rcx,0x70(%rsp)
  0x0000000116b4f19e: mov    %rdx,0x68(%rsp)
  0x0000000116b4f1a3: mov    %rbx,0x60(%rsp)
  0x0000000116b4f1a8: mov    %rbp,0x50(%rsp)
  0x0000000116b4f1ad: mov    %rsi,0x48(%rsp)
  0x0000000116b4f1b2: mov    %rdi,0x40(%rsp)
  0x0000000116b4f1b7: mov    %r8,0x38(%rsp)
  0x0000000116b4f1bc: mov    %r9,0x30(%rsp)
  0x0000000116b4f1c1: mov    %r10,0x28(%rsp)
  0x0000000116b4f1c6: mov    %r11,0x20(%rsp)
  0x0000000116b4f1cb: mov    %r12,0x18(%rsp)
  0x0000000116b4f1d0: mov    %r13,0x10(%rsp)
  0x0000000116b4f1d5: mov    %r14,0x8(%rsp)
  0x0000000116b4f1da: mov    %r15,(%rsp)
  0x0000000116b4f1de: movabs $0x10cc63f17,%rdi
  0x0000000116b4f1e8: movabs $0x116b4f188,%rsi
  0x0000000116b4f1f2: mov    %rsp,%rdx
  0x0000000116b4f1f5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f1f9: callq  0x000000010c7dd830
  0x0000000116b4f1fe: hlt    
  0x0000000116b4f1ff: pop    %r10
  0x0000000116b4f201: mov    %r15,%rdi
  0x0000000116b4f204: mov    %rbp,0x290(%r15)
  0x0000000116b4f20b: mov    %rax,0x280(%r15)
  0x0000000116b4f212: test   $0xf,%esp
  0x0000000116b4f218: je     0x0000000116b4f230
  0x0000000116b4f21e: sub    $0x8,%rsp
  0x0000000116b4f222: callq  0x000000010c58c440
  0x0000000116b4f227: add    $0x8,%rsp
  0x0000000116b4f22b: jmpq   0x0000000116b4f235
  0x0000000116b4f230: callq  0x000000010c58c440
  0x0000000116b4f235: push   %rax
  0x0000000116b4f236: push   %rdi
  0x0000000116b4f237: push   %rsi
  0x0000000116b4f238: push   %rdx
  0x0000000116b4f239: push   %rcx
  0x0000000116b4f23a: push   %r8
  0x0000000116b4f23c: push   %r9
  0x0000000116b4f23e: push   %r10
  0x0000000116b4f240: mov    %rsp,%r10
  0x0000000116b4f243: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f247: push   %r10
  0x0000000116b4f249: push   %r11
  0x0000000116b4f24b: mov    $0x109,%edi
  0x0000000116b4f250: movabs $0x7ff815049fd5,%r10
  0x0000000116b4f25a: callq  *%r10
  0x0000000116b4f25d: pop    %r11
  0x0000000116b4f25f: pop    %rsp
  0x0000000116b4f260: pop    %r10
  0x0000000116b4f262: pop    %r9
  0x0000000116b4f264: pop    %r8
  0x0000000116b4f266: pop    %rcx
  0x0000000116b4f267: pop    %rdx
  0x0000000116b4f268: pop    %rsi
  0x0000000116b4f269: pop    %rdi
  0x0000000116b4f26a: cmp    %rax,%r15
  0x0000000116b4f26d: je     0x0000000116b4f2ea
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4f273: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f278: sub    $0x80,%rsp
  0x0000000116b4f27f: mov    %rax,0x78(%rsp)
  0x0000000116b4f284: mov    %rcx,0x70(%rsp)
  0x0000000116b4f289: mov    %rdx,0x68(%rsp)
  0x0000000116b4f28e: mov    %rbx,0x60(%rsp)
  0x0000000116b4f293: mov    %rbp,0x50(%rsp)
  0x0000000116b4f298: mov    %rsi,0x48(%rsp)
  0x0000000116b4f29d: mov    %rdi,0x40(%rsp)
  0x0000000116b4f2a2: mov    %r8,0x38(%rsp)
  0x0000000116b4f2a7: mov    %r9,0x30(%rsp)
  0x0000000116b4f2ac: mov    %r10,0x28(%rsp)
  0x0000000116b4f2b1: mov    %r11,0x20(%rsp)
  0x0000000116b4f2b6: mov    %r12,0x18(%rsp)
  0x0000000116b4f2bb: mov    %r13,0x10(%rsp)
  0x0000000116b4f2c0: mov    %r14,0x8(%rsp)
  0x0000000116b4f2c5: mov    %r15,(%rsp)
  0x0000000116b4f2c9: movabs $0x10cc6405e,%rdi
  0x0000000116b4f2d3: movabs $0x116b4f273,%rsi
  0x0000000116b4f2dd: mov    %rsp,%rdx
  0x0000000116b4f2e0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f2e4: callq  0x000000010c7dd830
  0x0000000116b4f2e9: hlt    
  0x0000000116b4f2ea: pop    %rax
  0x0000000116b4f2eb: movabs $0x0,%r10
  0x0000000116b4f2f5: mov    %r10,0x280(%r15)
  0x0000000116b4f2fc: movabs $0x0,%r10
  0x0000000116b4f306: mov    %r10,0x290(%r15)
  0x0000000116b4f30d: movabs $0x0,%r10
  0x0000000116b4f317: mov    %r10,0x288(%r15)
  0x0000000116b4f31e: cmpq   $0x0,0x8(%r15)
  0x0000000116b4f326: je     0x0000000116b4f331
  0x0000000116b4f32c: jmpq   0x0000000116b30420
  0x0000000116b4f331: mov    -0x38(%rbp),%r13
  0x0000000116b4f335: mov    -0x30(%rbp),%r14
  0x0000000116b4f339: retq   
  0x0000000116b4f33a: movzbl 0x0(%r13),%ebx
  0x0000000116b4f33f: movabs $0x10ce36680,%r10
  0x0000000116b4f349: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f34d: push   %rax
  0x0000000116b4f34e: callq  0x0000000116b4f358
  0x0000000116b4f353: jmpq   0x0000000116b4f5a7
  0x0000000116b4f358: lea    0x8(%rsp),%rax
  0x0000000116b4f35d: mov    %r13,-0x38(%rbp)
  0x0000000116b4f361: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4f369: je     0x0000000116b4f3e6
  0x0000000116b4f36f: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f374: sub    $0x80,%rsp
  0x0000000116b4f37b: mov    %rax,0x78(%rsp)
  0x0000000116b4f380: mov    %rcx,0x70(%rsp)
  0x0000000116b4f385: mov    %rdx,0x68(%rsp)
  0x0000000116b4f38a: mov    %rbx,0x60(%rsp)
  0x0000000116b4f38f: mov    %rbp,0x50(%rsp)
  0x0000000116b4f394: mov    %rsi,0x48(%rsp)
  0x0000000116b4f399: mov    %rdi,0x40(%rsp)
  0x0000000116b4f39e: mov    %r8,0x38(%rsp)
  0x0000000116b4f3a3: mov    %r9,0x30(%rsp)
  0x0000000116b4f3a8: mov    %r10,0x28(%rsp)
  0x0000000116b4f3ad: mov    %r11,0x20(%rsp)
  0x0000000116b4f3b2: mov    %r12,0x18(%rsp)
  0x0000000116b4f3b7: mov    %r13,0x10(%rsp)
  0x0000000116b4f3bc: mov    %r14,0x8(%rsp)
  0x0000000116b4f3c1: mov    %r15,(%rsp)
  0x0000000116b4f3c5: movabs $0x10cc2363b,%rdi
  0x0000000116b4f3cf: movabs $0x116b4f36f,%rsi
  0x0000000116b4f3d9: mov    %rsp,%rdx
  0x0000000116b4f3dc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f3e0: callq  0x000000010c7dd830
  0x0000000116b4f3e5: hlt    
  0x0000000116b4f3e6: push   %r10
  0x0000000116b4f3e8: cmp    -0x9d08b3f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4f3ef: je     0x0000000116b4f46c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4f3f5: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f3fa: sub    $0x80,%rsp
  0x0000000116b4f401: mov    %rax,0x78(%rsp)
  0x0000000116b4f406: mov    %rcx,0x70(%rsp)
  0x0000000116b4f40b: mov    %rdx,0x68(%rsp)
  0x0000000116b4f410: mov    %rbx,0x60(%rsp)
  0x0000000116b4f415: mov    %rbp,0x50(%rsp)
  0x0000000116b4f41a: mov    %rsi,0x48(%rsp)
  0x0000000116b4f41f: mov    %rdi,0x40(%rsp)
  0x0000000116b4f424: mov    %r8,0x38(%rsp)
  0x0000000116b4f429: mov    %r9,0x30(%rsp)
  0x0000000116b4f42e: mov    %r10,0x28(%rsp)
  0x0000000116b4f433: mov    %r11,0x20(%rsp)
  0x0000000116b4f438: mov    %r12,0x18(%rsp)
  0x0000000116b4f43d: mov    %r13,0x10(%rsp)
  0x0000000116b4f442: mov    %r14,0x8(%rsp)
  0x0000000116b4f447: mov    %r15,(%rsp)
  0x0000000116b4f44b: movabs $0x10cc63f17,%rdi
  0x0000000116b4f455: movabs $0x116b4f3f5,%rsi
  0x0000000116b4f45f: mov    %rsp,%rdx
  0x0000000116b4f462: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f466: callq  0x000000010c7dd830
  0x0000000116b4f46b: hlt    
  0x0000000116b4f46c: pop    %r10
  0x0000000116b4f46e: mov    %r15,%rdi
  0x0000000116b4f471: mov    %rbp,0x290(%r15)
  0x0000000116b4f478: mov    %rax,0x280(%r15)
  0x0000000116b4f47f: test   $0xf,%esp
  0x0000000116b4f485: je     0x0000000116b4f49d
  0x0000000116b4f48b: sub    $0x8,%rsp
  0x0000000116b4f48f: callq  0x000000010c58c440
  0x0000000116b4f494: add    $0x8,%rsp
  0x0000000116b4f498: jmpq   0x0000000116b4f4a2
  0x0000000116b4f49d: callq  0x000000010c58c440
  0x0000000116b4f4a2: push   %rax
  0x0000000116b4f4a3: push   %rdi
  0x0000000116b4f4a4: push   %rsi
  0x0000000116b4f4a5: push   %rdx
  0x0000000116b4f4a6: push   %rcx
  0x0000000116b4f4a7: push   %r8
  0x0000000116b4f4a9: push   %r9
  0x0000000116b4f4ab: push   %r10
  0x0000000116b4f4ad: mov    %rsp,%r10
  0x0000000116b4f4b0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f4b4: push   %r10
  0x0000000116b4f4b6: push   %r11
  0x0000000116b4f4b8: mov    $0x109,%edi
  0x0000000116b4f4bd: movabs $0x7ff815049fd5,%r10
  0x0000000116b4f4c7: callq  *%r10
  0x0000000116b4f4ca: pop    %r11
  0x0000000116b4f4cc: pop    %rsp
  0x0000000116b4f4cd: pop    %r10
  0x0000000116b4f4cf: pop    %r9
  0x0000000116b4f4d1: pop    %r8
  0x0000000116b4f4d3: pop    %rcx
  0x0000000116b4f4d4: pop    %rdx
  0x0000000116b4f4d5: pop    %rsi
  0x0000000116b4f4d6: pop    %rdi
  0x0000000116b4f4d7: cmp    %rax,%r15
  0x0000000116b4f4da: je     0x0000000116b4f557
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4f4e0: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f4e5: sub    $0x80,%rsp
  0x0000000116b4f4ec: mov    %rax,0x78(%rsp)
  0x0000000116b4f4f1: mov    %rcx,0x70(%rsp)
  0x0000000116b4f4f6: mov    %rdx,0x68(%rsp)
  0x0000000116b4f4fb: mov    %rbx,0x60(%rsp)
  0x0000000116b4f500: mov    %rbp,0x50(%rsp)
  0x0000000116b4f505: mov    %rsi,0x48(%rsp)
  0x0000000116b4f50a: mov    %rdi,0x40(%rsp)
  0x0000000116b4f50f: mov    %r8,0x38(%rsp)
  0x0000000116b4f514: mov    %r9,0x30(%rsp)
  0x0000000116b4f519: mov    %r10,0x28(%rsp)
  0x0000000116b4f51e: mov    %r11,0x20(%rsp)
  0x0000000116b4f523: mov    %r12,0x18(%rsp)
  0x0000000116b4f528: mov    %r13,0x10(%rsp)
  0x0000000116b4f52d: mov    %r14,0x8(%rsp)
  0x0000000116b4f532: mov    %r15,(%rsp)
  0x0000000116b4f536: movabs $0x10cc6405e,%rdi
  0x0000000116b4f540: movabs $0x116b4f4e0,%rsi
  0x0000000116b4f54a: mov    %rsp,%rdx
  0x0000000116b4f54d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f551: callq  0x000000010c7dd830
  0x0000000116b4f556: hlt    
  0x0000000116b4f557: pop    %rax
  0x0000000116b4f558: movabs $0x0,%r10
  0x0000000116b4f562: mov    %r10,0x280(%r15)
  0x0000000116b4f569: movabs $0x0,%r10
  0x0000000116b4f573: mov    %r10,0x290(%r15)
  0x0000000116b4f57a: movabs $0x0,%r10
  0x0000000116b4f584: mov    %r10,0x288(%r15)
  0x0000000116b4f58b: cmpq   $0x0,0x8(%r15)
  0x0000000116b4f593: je     0x0000000116b4f59e
  0x0000000116b4f599: jmpq   0x0000000116b30420
  0x0000000116b4f59e: mov    -0x38(%rbp),%r13
  0x0000000116b4f5a2: mov    -0x30(%rbp),%r14
  0x0000000116b4f5a6: retq   
  0x0000000116b4f5a7: movzbl 0x0(%r13),%ebx
  0x0000000116b4f5ac: movabs $0x10ce36680,%r10
  0x0000000116b4f5b6: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f5ba: push   %rax
  0x0000000116b4f5bb: callq  0x0000000116b4f5c5
  0x0000000116b4f5c0: jmpq   0x0000000116b4f814
  0x0000000116b4f5c5: lea    0x8(%rsp),%rax
  0x0000000116b4f5ca: mov    %r13,-0x38(%rbp)
  0x0000000116b4f5ce: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4f5d6: je     0x0000000116b4f653
  0x0000000116b4f5dc: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f5e1: sub    $0x80,%rsp
  0x0000000116b4f5e8: mov    %rax,0x78(%rsp)
  0x0000000116b4f5ed: mov    %rcx,0x70(%rsp)
  0x0000000116b4f5f2: mov    %rdx,0x68(%rsp)
  0x0000000116b4f5f7: mov    %rbx,0x60(%rsp)
  0x0000000116b4f5fc: mov    %rbp,0x50(%rsp)
  0x0000000116b4f601: mov    %rsi,0x48(%rsp)
  0x0000000116b4f606: mov    %rdi,0x40(%rsp)
  0x0000000116b4f60b: mov    %r8,0x38(%rsp)
  0x0000000116b4f610: mov    %r9,0x30(%rsp)
  0x0000000116b4f615: mov    %r10,0x28(%rsp)
  0x0000000116b4f61a: mov    %r11,0x20(%rsp)
  0x0000000116b4f61f: mov    %r12,0x18(%rsp)
  0x0000000116b4f624: mov    %r13,0x10(%rsp)
  0x0000000116b4f629: mov    %r14,0x8(%rsp)
  0x0000000116b4f62e: mov    %r15,(%rsp)
  0x0000000116b4f632: movabs $0x10cc2363b,%rdi
  0x0000000116b4f63c: movabs $0x116b4f5dc,%rsi
  0x0000000116b4f646: mov    %rsp,%rdx
  0x0000000116b4f649: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f64d: callq  0x000000010c7dd830
  0x0000000116b4f652: hlt    
  0x0000000116b4f653: push   %r10
  0x0000000116b4f655: cmp    -0x9d08dac(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4f65c: je     0x0000000116b4f6d9
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4f662: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f667: sub    $0x80,%rsp
  0x0000000116b4f66e: mov    %rax,0x78(%rsp)
  0x0000000116b4f673: mov    %rcx,0x70(%rsp)
  0x0000000116b4f678: mov    %rdx,0x68(%rsp)
  0x0000000116b4f67d: mov    %rbx,0x60(%rsp)
  0x0000000116b4f682: mov    %rbp,0x50(%rsp)
  0x0000000116b4f687: mov    %rsi,0x48(%rsp)
  0x0000000116b4f68c: mov    %rdi,0x40(%rsp)
  0x0000000116b4f691: mov    %r8,0x38(%rsp)
  0x0000000116b4f696: mov    %r9,0x30(%rsp)
  0x0000000116b4f69b: mov    %r10,0x28(%rsp)
  0x0000000116b4f6a0: mov    %r11,0x20(%rsp)
  0x0000000116b4f6a5: mov    %r12,0x18(%rsp)
  0x0000000116b4f6aa: mov    %r13,0x10(%rsp)
  0x0000000116b4f6af: mov    %r14,0x8(%rsp)
  0x0000000116b4f6b4: mov    %r15,(%rsp)
  0x0000000116b4f6b8: movabs $0x10cc63f17,%rdi
  0x0000000116b4f6c2: movabs $0x116b4f662,%rsi
  0x0000000116b4f6cc: mov    %rsp,%rdx
  0x0000000116b4f6cf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f6d3: callq  0x000000010c7dd830
  0x0000000116b4f6d8: hlt    
  0x0000000116b4f6d9: pop    %r10
  0x0000000116b4f6db: mov    %r15,%rdi
  0x0000000116b4f6de: mov    %rbp,0x290(%r15)
  0x0000000116b4f6e5: mov    %rax,0x280(%r15)
  0x0000000116b4f6ec: test   $0xf,%esp
  0x0000000116b4f6f2: je     0x0000000116b4f70a
  0x0000000116b4f6f8: sub    $0x8,%rsp
  0x0000000116b4f6fc: callq  0x000000010c58c440
  0x0000000116b4f701: add    $0x8,%rsp
  0x0000000116b4f705: jmpq   0x0000000116b4f70f
  0x0000000116b4f70a: callq  0x000000010c58c440
  0x0000000116b4f70f: push   %rax
  0x0000000116b4f710: push   %rdi
  0x0000000116b4f711: push   %rsi
  0x0000000116b4f712: push   %rdx
  0x0000000116b4f713: push   %rcx
  0x0000000116b4f714: push   %r8
  0x0000000116b4f716: push   %r9
  0x0000000116b4f718: push   %r10
  0x0000000116b4f71a: mov    %rsp,%r10
  0x0000000116b4f71d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f721: push   %r10
  0x0000000116b4f723: push   %r11
  0x0000000116b4f725: mov    $0x109,%edi
  0x0000000116b4f72a: movabs $0x7ff815049fd5,%r10
  0x0000000116b4f734: callq  *%r10
  0x0000000116b4f737: pop    %r11
  0x0000000116b4f739: pop    %rsp
  0x0000000116b4f73a: pop    %r10
  0x0000000116b4f73c: pop    %r9
  0x0000000116b4f73e: pop    %r8
  0x0000000116b4f740: pop    %rcx
  0x0000000116b4f741: pop    %rdx
  0x0000000116b4f742: pop    %rsi
  0x0000000116b4f743: pop    %rdi
  0x0000000116b4f744: cmp    %rax,%r15
  0x0000000116b4f747: je     0x0000000116b4f7c4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4f74d: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f752: sub    $0x80,%rsp
  0x0000000116b4f759: mov    %rax,0x78(%rsp)
  0x0000000116b4f75e: mov    %rcx,0x70(%rsp)
  0x0000000116b4f763: mov    %rdx,0x68(%rsp)
  0x0000000116b4f768: mov    %rbx,0x60(%rsp)
  0x0000000116b4f76d: mov    %rbp,0x50(%rsp)
  0x0000000116b4f772: mov    %rsi,0x48(%rsp)
  0x0000000116b4f777: mov    %rdi,0x40(%rsp)
  0x0000000116b4f77c: mov    %r8,0x38(%rsp)
  0x0000000116b4f781: mov    %r9,0x30(%rsp)
  0x0000000116b4f786: mov    %r10,0x28(%rsp)
  0x0000000116b4f78b: mov    %r11,0x20(%rsp)
  0x0000000116b4f790: mov    %r12,0x18(%rsp)
  0x0000000116b4f795: mov    %r13,0x10(%rsp)
  0x0000000116b4f79a: mov    %r14,0x8(%rsp)
  0x0000000116b4f79f: mov    %r15,(%rsp)
  0x0000000116b4f7a3: movabs $0x10cc6405e,%rdi
  0x0000000116b4f7ad: movabs $0x116b4f74d,%rsi
  0x0000000116b4f7b7: mov    %rsp,%rdx
  0x0000000116b4f7ba: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f7be: callq  0x000000010c7dd830
  0x0000000116b4f7c3: hlt    
  0x0000000116b4f7c4: pop    %rax
  0x0000000116b4f7c5: movabs $0x0,%r10
  0x0000000116b4f7cf: mov    %r10,0x280(%r15)
  0x0000000116b4f7d6: movabs $0x0,%r10
  0x0000000116b4f7e0: mov    %r10,0x290(%r15)
  0x0000000116b4f7e7: movabs $0x0,%r10
  0x0000000116b4f7f1: mov    %r10,0x288(%r15)
  0x0000000116b4f7f8: cmpq   $0x0,0x8(%r15)
  0x0000000116b4f800: je     0x0000000116b4f80b
  0x0000000116b4f806: jmpq   0x0000000116b30420
  0x0000000116b4f80b: mov    -0x38(%rbp),%r13
  0x0000000116b4f80f: mov    -0x30(%rbp),%r14
  0x0000000116b4f813: retq   
  0x0000000116b4f814: movzbl 0x0(%r13),%ebx
  0x0000000116b4f819: movabs $0x10ce36680,%r10
  0x0000000116b4f823: jmpq   *(%r10,%rbx,8)
  0x0000000116b4f827: push   %rax
  0x0000000116b4f828: callq  0x0000000116b4f832
  0x0000000116b4f82d: jmpq   0x0000000116b4fa81
  0x0000000116b4f832: lea    0x8(%rsp),%rax
  0x0000000116b4f837: mov    %r13,-0x38(%rbp)
  0x0000000116b4f83b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4f843: je     0x0000000116b4f8c0
  0x0000000116b4f849: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f84e: sub    $0x80,%rsp
  0x0000000116b4f855: mov    %rax,0x78(%rsp)
  0x0000000116b4f85a: mov    %rcx,0x70(%rsp)
  0x0000000116b4f85f: mov    %rdx,0x68(%rsp)
  0x0000000116b4f864: mov    %rbx,0x60(%rsp)
  0x0000000116b4f869: mov    %rbp,0x50(%rsp)
  0x0000000116b4f86e: mov    %rsi,0x48(%rsp)
  0x0000000116b4f873: mov    %rdi,0x40(%rsp)
  0x0000000116b4f878: mov    %r8,0x38(%rsp)
  0x0000000116b4f87d: mov    %r9,0x30(%rsp)
  0x0000000116b4f882: mov    %r10,0x28(%rsp)
  0x0000000116b4f887: mov    %r11,0x20(%rsp)
  0x0000000116b4f88c: mov    %r12,0x18(%rsp)
  0x0000000116b4f891: mov    %r13,0x10(%rsp)
  0x0000000116b4f896: mov    %r14,0x8(%rsp)
  0x0000000116b4f89b: mov    %r15,(%rsp)
  0x0000000116b4f89f: movabs $0x10cc2363b,%rdi
  0x0000000116b4f8a9: movabs $0x116b4f849,%rsi
  0x0000000116b4f8b3: mov    %rsp,%rdx
  0x0000000116b4f8b6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f8ba: callq  0x000000010c7dd830
  0x0000000116b4f8bf: hlt    
  0x0000000116b4f8c0: push   %r10
  0x0000000116b4f8c2: cmp    -0x9d09019(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4f8c9: je     0x0000000116b4f946
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4f8cf: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f8d4: sub    $0x80,%rsp
  0x0000000116b4f8db: mov    %rax,0x78(%rsp)
  0x0000000116b4f8e0: mov    %rcx,0x70(%rsp)
  0x0000000116b4f8e5: mov    %rdx,0x68(%rsp)
  0x0000000116b4f8ea: mov    %rbx,0x60(%rsp)
  0x0000000116b4f8ef: mov    %rbp,0x50(%rsp)
  0x0000000116b4f8f4: mov    %rsi,0x48(%rsp)
  0x0000000116b4f8f9: mov    %rdi,0x40(%rsp)
  0x0000000116b4f8fe: mov    %r8,0x38(%rsp)
  0x0000000116b4f903: mov    %r9,0x30(%rsp)
  0x0000000116b4f908: mov    %r10,0x28(%rsp)
  0x0000000116b4f90d: mov    %r11,0x20(%rsp)
  0x0000000116b4f912: mov    %r12,0x18(%rsp)
  0x0000000116b4f917: mov    %r13,0x10(%rsp)
  0x0000000116b4f91c: mov    %r14,0x8(%rsp)
  0x0000000116b4f921: mov    %r15,(%rsp)
  0x0000000116b4f925: movabs $0x10cc63f17,%rdi
  0x0000000116b4f92f: movabs $0x116b4f8cf,%rsi
  0x0000000116b4f939: mov    %rsp,%rdx
  0x0000000116b4f93c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f940: callq  0x000000010c7dd830
  0x0000000116b4f945: hlt    
  0x0000000116b4f946: pop    %r10
  0x0000000116b4f948: mov    %r15,%rdi
  0x0000000116b4f94b: mov    %rbp,0x290(%r15)
  0x0000000116b4f952: mov    %rax,0x280(%r15)
  0x0000000116b4f959: test   $0xf,%esp
  0x0000000116b4f95f: je     0x0000000116b4f977
  0x0000000116b4f965: sub    $0x8,%rsp
  0x0000000116b4f969: callq  0x000000010c58c440
  0x0000000116b4f96e: add    $0x8,%rsp
  0x0000000116b4f972: jmpq   0x0000000116b4f97c
  0x0000000116b4f977: callq  0x000000010c58c440
  0x0000000116b4f97c: push   %rax
  0x0000000116b4f97d: push   %rdi
  0x0000000116b4f97e: push   %rsi
  0x0000000116b4f97f: push   %rdx
  0x0000000116b4f980: push   %rcx
  0x0000000116b4f981: push   %r8
  0x0000000116b4f983: push   %r9
  0x0000000116b4f985: push   %r10
  0x0000000116b4f987: mov    %rsp,%r10
  0x0000000116b4f98a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4f98e: push   %r10
  0x0000000116b4f990: push   %r11
  0x0000000116b4f992: mov    $0x109,%edi
  0x0000000116b4f997: movabs $0x7ff815049fd5,%r10
  0x0000000116b4f9a1: callq  *%r10
  0x0000000116b4f9a4: pop    %r11
  0x0000000116b4f9a6: pop    %rsp
  0x0000000116b4f9a7: pop    %r10
  0x0000000116b4f9a9: pop    %r9
  0x0000000116b4f9ab: pop    %r8
  0x0000000116b4f9ad: pop    %rcx
  0x0000000116b4f9ae: pop    %rdx
  0x0000000116b4f9af: pop    %rsi
  0x0000000116b4f9b0: pop    %rdi
  0x0000000116b4f9b1: cmp    %rax,%r15
  0x0000000116b4f9b4: je     0x0000000116b4fa31
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4f9ba: mov    %rsp,-0x28(%rsp)
  0x0000000116b4f9bf: sub    $0x80,%rsp
  0x0000000116b4f9c6: mov    %rax,0x78(%rsp)
  0x0000000116b4f9cb: mov    %rcx,0x70(%rsp)
  0x0000000116b4f9d0: mov    %rdx,0x68(%rsp)
  0x0000000116b4f9d5: mov    %rbx,0x60(%rsp)
  0x0000000116b4f9da: mov    %rbp,0x50(%rsp)
  0x0000000116b4f9df: mov    %rsi,0x48(%rsp)
  0x0000000116b4f9e4: mov    %rdi,0x40(%rsp)
  0x0000000116b4f9e9: mov    %r8,0x38(%rsp)
  0x0000000116b4f9ee: mov    %r9,0x30(%rsp)
  0x0000000116b4f9f3: mov    %r10,0x28(%rsp)
  0x0000000116b4f9f8: mov    %r11,0x20(%rsp)
  0x0000000116b4f9fd: mov    %r12,0x18(%rsp)
  0x0000000116b4fa02: mov    %r13,0x10(%rsp)
  0x0000000116b4fa07: mov    %r14,0x8(%rsp)
  0x0000000116b4fa0c: mov    %r15,(%rsp)
  0x0000000116b4fa10: movabs $0x10cc6405e,%rdi
  0x0000000116b4fa1a: movabs $0x116b4f9ba,%rsi
  0x0000000116b4fa24: mov    %rsp,%rdx
  0x0000000116b4fa27: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fa2b: callq  0x000000010c7dd830
  0x0000000116b4fa30: hlt    
  0x0000000116b4fa31: pop    %rax
  0x0000000116b4fa32: movabs $0x0,%r10
  0x0000000116b4fa3c: mov    %r10,0x280(%r15)
  0x0000000116b4fa43: movabs $0x0,%r10
  0x0000000116b4fa4d: mov    %r10,0x290(%r15)
  0x0000000116b4fa54: movabs $0x0,%r10
  0x0000000116b4fa5e: mov    %r10,0x288(%r15)
  0x0000000116b4fa65: cmpq   $0x0,0x8(%r15)
  0x0000000116b4fa6d: je     0x0000000116b4fa78
  0x0000000116b4fa73: jmpq   0x0000000116b30420
  0x0000000116b4fa78: mov    -0x38(%rbp),%r13
  0x0000000116b4fa7c: mov    -0x30(%rbp),%r14
  0x0000000116b4fa80: retq   
  0x0000000116b4fa81: movzbl 0x0(%r13),%ebx
  0x0000000116b4fa86: movabs $0x10ce36680,%r10
  0x0000000116b4fa90: jmpq   *(%r10,%rbx,8)
  0x0000000116b4fa94: push   %rax
  0x0000000116b4fa95: callq  0x0000000116b4fa9f
  0x0000000116b4fa9a: jmpq   0x0000000116b4fcee
  0x0000000116b4fa9f: lea    0x8(%rsp),%rax
  0x0000000116b4faa4: mov    %r13,-0x38(%rbp)
  0x0000000116b4faa8: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4fab0: je     0x0000000116b4fb2d
  0x0000000116b4fab6: mov    %rsp,-0x28(%rsp)
  0x0000000116b4fabb: sub    $0x80,%rsp
  0x0000000116b4fac2: mov    %rax,0x78(%rsp)
  0x0000000116b4fac7: mov    %rcx,0x70(%rsp)
  0x0000000116b4facc: mov    %rdx,0x68(%rsp)
  0x0000000116b4fad1: mov    %rbx,0x60(%rsp)
  0x0000000116b4fad6: mov    %rbp,0x50(%rsp)
  0x0000000116b4fadb: mov    %rsi,0x48(%rsp)
  0x0000000116b4fae0: mov    %rdi,0x40(%rsp)
  0x0000000116b4fae5: mov    %r8,0x38(%rsp)
  0x0000000116b4faea: mov    %r9,0x30(%rsp)
  0x0000000116b4faef: mov    %r10,0x28(%rsp)
  0x0000000116b4faf4: mov    %r11,0x20(%rsp)
  0x0000000116b4faf9: mov    %r12,0x18(%rsp)
  0x0000000116b4fafe: mov    %r13,0x10(%rsp)
  0x0000000116b4fb03: mov    %r14,0x8(%rsp)
  0x0000000116b4fb08: mov    %r15,(%rsp)
  0x0000000116b4fb0c: movabs $0x10cc2363b,%rdi
  0x0000000116b4fb16: movabs $0x116b4fab6,%rsi
  0x0000000116b4fb20: mov    %rsp,%rdx
  0x0000000116b4fb23: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fb27: callq  0x000000010c7dd830
  0x0000000116b4fb2c: hlt    
  0x0000000116b4fb2d: push   %r10
  0x0000000116b4fb2f: cmp    -0x9d09286(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4fb36: je     0x0000000116b4fbb3
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4fb3c: mov    %rsp,-0x28(%rsp)
  0x0000000116b4fb41: sub    $0x80,%rsp
  0x0000000116b4fb48: mov    %rax,0x78(%rsp)
  0x0000000116b4fb4d: mov    %rcx,0x70(%rsp)
  0x0000000116b4fb52: mov    %rdx,0x68(%rsp)
  0x0000000116b4fb57: mov    %rbx,0x60(%rsp)
  0x0000000116b4fb5c: mov    %rbp,0x50(%rsp)
  0x0000000116b4fb61: mov    %rsi,0x48(%rsp)
  0x0000000116b4fb66: mov    %rdi,0x40(%rsp)
  0x0000000116b4fb6b: mov    %r8,0x38(%rsp)
  0x0000000116b4fb70: mov    %r9,0x30(%rsp)
  0x0000000116b4fb75: mov    %r10,0x28(%rsp)
  0x0000000116b4fb7a: mov    %r11,0x20(%rsp)
  0x0000000116b4fb7f: mov    %r12,0x18(%rsp)
  0x0000000116b4fb84: mov    %r13,0x10(%rsp)
  0x0000000116b4fb89: mov    %r14,0x8(%rsp)
  0x0000000116b4fb8e: mov    %r15,(%rsp)
  0x0000000116b4fb92: movabs $0x10cc63f17,%rdi
  0x0000000116b4fb9c: movabs $0x116b4fb3c,%rsi
  0x0000000116b4fba6: mov    %rsp,%rdx
  0x0000000116b4fba9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fbad: callq  0x000000010c7dd830
  0x0000000116b4fbb2: hlt    
  0x0000000116b4fbb3: pop    %r10
  0x0000000116b4fbb5: mov    %r15,%rdi
  0x0000000116b4fbb8: mov    %rbp,0x290(%r15)
  0x0000000116b4fbbf: mov    %rax,0x280(%r15)
  0x0000000116b4fbc6: test   $0xf,%esp
  0x0000000116b4fbcc: je     0x0000000116b4fbe4
  0x0000000116b4fbd2: sub    $0x8,%rsp
  0x0000000116b4fbd6: callq  0x000000010c58c440
  0x0000000116b4fbdb: add    $0x8,%rsp
  0x0000000116b4fbdf: jmpq   0x0000000116b4fbe9
  0x0000000116b4fbe4: callq  0x000000010c58c440
  0x0000000116b4fbe9: push   %rax
  0x0000000116b4fbea: push   %rdi
  0x0000000116b4fbeb: push   %rsi
  0x0000000116b4fbec: push   %rdx
  0x0000000116b4fbed: push   %rcx
  0x0000000116b4fbee: push   %r8
  0x0000000116b4fbf0: push   %r9
  0x0000000116b4fbf2: push   %r10
  0x0000000116b4fbf4: mov    %rsp,%r10
  0x0000000116b4fbf7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fbfb: push   %r10
  0x0000000116b4fbfd: push   %r11
  0x0000000116b4fbff: mov    $0x109,%edi
  0x0000000116b4fc04: movabs $0x7ff815049fd5,%r10
  0x0000000116b4fc0e: callq  *%r10
  0x0000000116b4fc11: pop    %r11
  0x0000000116b4fc13: pop    %rsp
  0x0000000116b4fc14: pop    %r10
  0x0000000116b4fc16: pop    %r9
  0x0000000116b4fc18: pop    %r8
  0x0000000116b4fc1a: pop    %rcx
  0x0000000116b4fc1b: pop    %rdx
  0x0000000116b4fc1c: pop    %rsi
  0x0000000116b4fc1d: pop    %rdi
  0x0000000116b4fc1e: cmp    %rax,%r15
  0x0000000116b4fc21: je     0x0000000116b4fc9e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4fc27: mov    %rsp,-0x28(%rsp)
  0x0000000116b4fc2c: sub    $0x80,%rsp
  0x0000000116b4fc33: mov    %rax,0x78(%rsp)
  0x0000000116b4fc38: mov    %rcx,0x70(%rsp)
  0x0000000116b4fc3d: mov    %rdx,0x68(%rsp)
  0x0000000116b4fc42: mov    %rbx,0x60(%rsp)
  0x0000000116b4fc47: mov    %rbp,0x50(%rsp)
  0x0000000116b4fc4c: mov    %rsi,0x48(%rsp)
  0x0000000116b4fc51: mov    %rdi,0x40(%rsp)
  0x0000000116b4fc56: mov    %r8,0x38(%rsp)
  0x0000000116b4fc5b: mov    %r9,0x30(%rsp)
  0x0000000116b4fc60: mov    %r10,0x28(%rsp)
  0x0000000116b4fc65: mov    %r11,0x20(%rsp)
  0x0000000116b4fc6a: mov    %r12,0x18(%rsp)
  0x0000000116b4fc6f: mov    %r13,0x10(%rsp)
  0x0000000116b4fc74: mov    %r14,0x8(%rsp)
  0x0000000116b4fc79: mov    %r15,(%rsp)
  0x0000000116b4fc7d: movabs $0x10cc6405e,%rdi
  0x0000000116b4fc87: movabs $0x116b4fc27,%rsi
  0x0000000116b4fc91: mov    %rsp,%rdx
  0x0000000116b4fc94: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fc98: callq  0x000000010c7dd830
  0x0000000116b4fc9d: hlt    
  0x0000000116b4fc9e: pop    %rax
  0x0000000116b4fc9f: movabs $0x0,%r10
  0x0000000116b4fca9: mov    %r10,0x280(%r15)
  0x0000000116b4fcb0: movabs $0x0,%r10
  0x0000000116b4fcba: mov    %r10,0x290(%r15)
  0x0000000116b4fcc1: movabs $0x0,%r10
  0x0000000116b4fccb: mov    %r10,0x288(%r15)
  0x0000000116b4fcd2: cmpq   $0x0,0x8(%r15)
  0x0000000116b4fcda: je     0x0000000116b4fce5
  0x0000000116b4fce0: jmpq   0x0000000116b30420
  0x0000000116b4fce5: mov    -0x38(%rbp),%r13
  0x0000000116b4fce9: mov    -0x30(%rbp),%r14
  0x0000000116b4fced: retq   
  0x0000000116b4fcee: movzbl 0x0(%r13),%ebx
  0x0000000116b4fcf3: movabs $0x10ce36680,%r10
  0x0000000116b4fcfd: jmpq   *(%r10,%rbx,8)
  0x0000000116b4fd01: push   %rax
  0x0000000116b4fd02: callq  0x0000000116b4fd0c
  0x0000000116b4fd07: jmpq   0x0000000116b4ff5b
  0x0000000116b4fd0c: lea    0x8(%rsp),%rax
  0x0000000116b4fd11: mov    %r13,-0x38(%rbp)
  0x0000000116b4fd15: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4fd1d: je     0x0000000116b4fd9a
  0x0000000116b4fd23: mov    %rsp,-0x28(%rsp)
  0x0000000116b4fd28: sub    $0x80,%rsp
  0x0000000116b4fd2f: mov    %rax,0x78(%rsp)
  0x0000000116b4fd34: mov    %rcx,0x70(%rsp)
  0x0000000116b4fd39: mov    %rdx,0x68(%rsp)
  0x0000000116b4fd3e: mov    %rbx,0x60(%rsp)
  0x0000000116b4fd43: mov    %rbp,0x50(%rsp)
  0x0000000116b4fd48: mov    %rsi,0x48(%rsp)
  0x0000000116b4fd4d: mov    %rdi,0x40(%rsp)
  0x0000000116b4fd52: mov    %r8,0x38(%rsp)
  0x0000000116b4fd57: mov    %r9,0x30(%rsp)
  0x0000000116b4fd5c: mov    %r10,0x28(%rsp)
  0x0000000116b4fd61: mov    %r11,0x20(%rsp)
  0x0000000116b4fd66: mov    %r12,0x18(%rsp)
  0x0000000116b4fd6b: mov    %r13,0x10(%rsp)
  0x0000000116b4fd70: mov    %r14,0x8(%rsp)
  0x0000000116b4fd75: mov    %r15,(%rsp)
  0x0000000116b4fd79: movabs $0x10cc2363b,%rdi
  0x0000000116b4fd83: movabs $0x116b4fd23,%rsi
  0x0000000116b4fd8d: mov    %rsp,%rdx
  0x0000000116b4fd90: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fd94: callq  0x000000010c7dd830
  0x0000000116b4fd99: hlt    
  0x0000000116b4fd9a: push   %r10
  0x0000000116b4fd9c: cmp    -0x9d094f3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b4fda3: je     0x0000000116b4fe20
  ;; call_VM_base: heap base corrupted?
  0x0000000116b4fda9: mov    %rsp,-0x28(%rsp)
  0x0000000116b4fdae: sub    $0x80,%rsp
  0x0000000116b4fdb5: mov    %rax,0x78(%rsp)
  0x0000000116b4fdba: mov    %rcx,0x70(%rsp)
  0x0000000116b4fdbf: mov    %rdx,0x68(%rsp)
  0x0000000116b4fdc4: mov    %rbx,0x60(%rsp)
  0x0000000116b4fdc9: mov    %rbp,0x50(%rsp)
  0x0000000116b4fdce: mov    %rsi,0x48(%rsp)
  0x0000000116b4fdd3: mov    %rdi,0x40(%rsp)
  0x0000000116b4fdd8: mov    %r8,0x38(%rsp)
  0x0000000116b4fddd: mov    %r9,0x30(%rsp)
  0x0000000116b4fde2: mov    %r10,0x28(%rsp)
  0x0000000116b4fde7: mov    %r11,0x20(%rsp)
  0x0000000116b4fdec: mov    %r12,0x18(%rsp)
  0x0000000116b4fdf1: mov    %r13,0x10(%rsp)
  0x0000000116b4fdf6: mov    %r14,0x8(%rsp)
  0x0000000116b4fdfb: mov    %r15,(%rsp)
  0x0000000116b4fdff: movabs $0x10cc63f17,%rdi
  0x0000000116b4fe09: movabs $0x116b4fda9,%rsi
  0x0000000116b4fe13: mov    %rsp,%rdx
  0x0000000116b4fe16: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fe1a: callq  0x000000010c7dd830
  0x0000000116b4fe1f: hlt    
  0x0000000116b4fe20: pop    %r10
  0x0000000116b4fe22: mov    %r15,%rdi
  0x0000000116b4fe25: mov    %rbp,0x290(%r15)
  0x0000000116b4fe2c: mov    %rax,0x280(%r15)
  0x0000000116b4fe33: test   $0xf,%esp
  0x0000000116b4fe39: je     0x0000000116b4fe51
  0x0000000116b4fe3f: sub    $0x8,%rsp
  0x0000000116b4fe43: callq  0x000000010c58c440
  0x0000000116b4fe48: add    $0x8,%rsp
  0x0000000116b4fe4c: jmpq   0x0000000116b4fe56
  0x0000000116b4fe51: callq  0x000000010c58c440
  0x0000000116b4fe56: push   %rax
  0x0000000116b4fe57: push   %rdi
  0x0000000116b4fe58: push   %rsi
  0x0000000116b4fe59: push   %rdx
  0x0000000116b4fe5a: push   %rcx
  0x0000000116b4fe5b: push   %r8
  0x0000000116b4fe5d: push   %r9
  0x0000000116b4fe5f: push   %r10
  0x0000000116b4fe61: mov    %rsp,%r10
  0x0000000116b4fe64: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4fe68: push   %r10
  0x0000000116b4fe6a: push   %r11
  0x0000000116b4fe6c: mov    $0x109,%edi
  0x0000000116b4fe71: movabs $0x7ff815049fd5,%r10
  0x0000000116b4fe7b: callq  *%r10
  0x0000000116b4fe7e: pop    %r11
  0x0000000116b4fe80: pop    %rsp
  0x0000000116b4fe81: pop    %r10
  0x0000000116b4fe83: pop    %r9
  0x0000000116b4fe85: pop    %r8
  0x0000000116b4fe87: pop    %rcx
  0x0000000116b4fe88: pop    %rdx
  0x0000000116b4fe89: pop    %rsi
  0x0000000116b4fe8a: pop    %rdi
  0x0000000116b4fe8b: cmp    %rax,%r15
  0x0000000116b4fe8e: je     0x0000000116b4ff0b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b4fe94: mov    %rsp,-0x28(%rsp)
  0x0000000116b4fe99: sub    $0x80,%rsp
  0x0000000116b4fea0: mov    %rax,0x78(%rsp)
  0x0000000116b4fea5: mov    %rcx,0x70(%rsp)
  0x0000000116b4feaa: mov    %rdx,0x68(%rsp)
  0x0000000116b4feaf: mov    %rbx,0x60(%rsp)
  0x0000000116b4feb4: mov    %rbp,0x50(%rsp)
  0x0000000116b4feb9: mov    %rsi,0x48(%rsp)
  0x0000000116b4febe: mov    %rdi,0x40(%rsp)
  0x0000000116b4fec3: mov    %r8,0x38(%rsp)
  0x0000000116b4fec8: mov    %r9,0x30(%rsp)
  0x0000000116b4fecd: mov    %r10,0x28(%rsp)
  0x0000000116b4fed2: mov    %r11,0x20(%rsp)
  0x0000000116b4fed7: mov    %r12,0x18(%rsp)
  0x0000000116b4fedc: mov    %r13,0x10(%rsp)
  0x0000000116b4fee1: mov    %r14,0x8(%rsp)
  0x0000000116b4fee6: mov    %r15,(%rsp)
  0x0000000116b4feea: movabs $0x10cc6405e,%rdi
  0x0000000116b4fef4: movabs $0x116b4fe94,%rsi
  0x0000000116b4fefe: mov    %rsp,%rdx
  0x0000000116b4ff01: and    $0xfffffffffffffff0,%rsp
  0x0000000116b4ff05: callq  0x000000010c7dd830
  0x0000000116b4ff0a: hlt    
  0x0000000116b4ff0b: pop    %rax
  0x0000000116b4ff0c: movabs $0x0,%r10
  0x0000000116b4ff16: mov    %r10,0x280(%r15)
  0x0000000116b4ff1d: movabs $0x0,%r10
  0x0000000116b4ff27: mov    %r10,0x290(%r15)
  0x0000000116b4ff2e: movabs $0x0,%r10
  0x0000000116b4ff38: mov    %r10,0x288(%r15)
  0x0000000116b4ff3f: cmpq   $0x0,0x8(%r15)
  0x0000000116b4ff47: je     0x0000000116b4ff52
  0x0000000116b4ff4d: jmpq   0x0000000116b30420
  0x0000000116b4ff52: mov    -0x38(%rbp),%r13
  0x0000000116b4ff56: mov    -0x30(%rbp),%r14
  0x0000000116b4ff5a: retq   
  0x0000000116b4ff5b: movzbl 0x0(%r13),%ebx
  0x0000000116b4ff60: movabs $0x10ce36680,%r10
  0x0000000116b4ff6a: jmpq   *(%r10,%rbx,8)
  0x0000000116b4ff6e: sub    $0x10,%rsp
  0x0000000116b4ff72: mov    %rax,(%rsp)
  0x0000000116b4ff76: callq  0x0000000116b4ff80
  0x0000000116b4ff7b: jmpq   0x0000000116b501cf
  0x0000000116b4ff80: lea    0x8(%rsp),%rax
  0x0000000116b4ff85: mov    %r13,-0x38(%rbp)
  0x0000000116b4ff89: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b4ff91: je     0x0000000116b5000e
  0x0000000116b4ff97: mov    %rsp,-0x28(%rsp)
  0x0000000116b4ff9c: sub    $0x80,%rsp
  0x0000000116b4ffa3: mov    %rax,0x78(%rsp)
  0x0000000116b4ffa8: mov    %rcx,0x70(%rsp)
  0x0000000116b4ffad: mov    %rdx,0x68(%rsp)
  0x0000000116b4ffb2: mov    %rbx,0x60(%rsp)
  0x0000000116b4ffb7: mov    %rbp,0x50(%rsp)
  0x0000000116b4ffbc: mov    %rsi,0x48(%rsp)
  0x0000000116b4ffc1: mov    %rdi,0x40(%rsp)
  0x0000000116b4ffc6: mov    %r8,0x38(%rsp)
  0x0000000116b4ffcb: mov    %r9,0x30(%rsp)
  0x0000000116b4ffd0: mov    %r10,0x28(%rsp)
  0x0000000116b4ffd5: mov    %r11,0x20(%rsp)
  0x0000000116b4ffda: mov    %r12,0x18(%rsp)
  0x0000000116b4ffdf: mov    %r13,0x10(%rsp)
  0x0000000116b4ffe4: mov    %r14,0x8(%rsp)
  0x0000000116b4ffe9: mov    %r15,(%rsp)
  0x0000000116b4ffed: movabs $0x10cc2363b,%rdi
  0x0000000116b4fff7: movabs $0x116b4ff97,%rsi
  0x0000000116b50001: mov    %rsp,%rdx
  0x0000000116b50004: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50008: callq  0x000000010c7dd830
  0x0000000116b5000d: hlt    
  0x0000000116b5000e: push   %r10
  0x0000000116b50010: cmp    -0x9d09767(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b50017: je     0x0000000116b50094
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5001d: mov    %rsp,-0x28(%rsp)
  0x0000000116b50022: sub    $0x80,%rsp
  0x0000000116b50029: mov    %rax,0x78(%rsp)
  0x0000000116b5002e: mov    %rcx,0x70(%rsp)
  0x0000000116b50033: mov    %rdx,0x68(%rsp)
  0x0000000116b50038: mov    %rbx,0x60(%rsp)
  0x0000000116b5003d: mov    %rbp,0x50(%rsp)
  0x0000000116b50042: mov    %rsi,0x48(%rsp)
  0x0000000116b50047: mov    %rdi,0x40(%rsp)
  0x0000000116b5004c: mov    %r8,0x38(%rsp)
  0x0000000116b50051: mov    %r9,0x30(%rsp)
  0x0000000116b50056: mov    %r10,0x28(%rsp)
  0x0000000116b5005b: mov    %r11,0x20(%rsp)
  0x0000000116b50060: mov    %r12,0x18(%rsp)
  0x0000000116b50065: mov    %r13,0x10(%rsp)
  0x0000000116b5006a: mov    %r14,0x8(%rsp)
  0x0000000116b5006f: mov    %r15,(%rsp)
  0x0000000116b50073: movabs $0x10cc63f17,%rdi
  0x0000000116b5007d: movabs $0x116b5001d,%rsi
  0x0000000116b50087: mov    %rsp,%rdx
  0x0000000116b5008a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5008e: callq  0x000000010c7dd830
  0x0000000116b50093: hlt    
  0x0000000116b50094: pop    %r10
  0x0000000116b50096: mov    %r15,%rdi
  0x0000000116b50099: mov    %rbp,0x290(%r15)
  0x0000000116b500a0: mov    %rax,0x280(%r15)
  0x0000000116b500a7: test   $0xf,%esp
  0x0000000116b500ad: je     0x0000000116b500c5
  0x0000000116b500b3: sub    $0x8,%rsp
  0x0000000116b500b7: callq  0x000000010c58c440
  0x0000000116b500bc: add    $0x8,%rsp
  0x0000000116b500c0: jmpq   0x0000000116b500ca
  0x0000000116b500c5: callq  0x000000010c58c440
  0x0000000116b500ca: push   %rax
  0x0000000116b500cb: push   %rdi
  0x0000000116b500cc: push   %rsi
  0x0000000116b500cd: push   %rdx
  0x0000000116b500ce: push   %rcx
  0x0000000116b500cf: push   %r8
  0x0000000116b500d1: push   %r9
  0x0000000116b500d3: push   %r10
  0x0000000116b500d5: mov    %rsp,%r10
  0x0000000116b500d8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b500dc: push   %r10
  0x0000000116b500de: push   %r11
  0x0000000116b500e0: mov    $0x109,%edi
  0x0000000116b500e5: movabs $0x7ff815049fd5,%r10
  0x0000000116b500ef: callq  *%r10
  0x0000000116b500f2: pop    %r11
  0x0000000116b500f4: pop    %rsp
  0x0000000116b500f5: pop    %r10
  0x0000000116b500f7: pop    %r9
  0x0000000116b500f9: pop    %r8
  0x0000000116b500fb: pop    %rcx
  0x0000000116b500fc: pop    %rdx
  0x0000000116b500fd: pop    %rsi
  0x0000000116b500fe: pop    %rdi
  0x0000000116b500ff: cmp    %rax,%r15
  0x0000000116b50102: je     0x0000000116b5017f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b50108: mov    %rsp,-0x28(%rsp)
  0x0000000116b5010d: sub    $0x80,%rsp
  0x0000000116b50114: mov    %rax,0x78(%rsp)
  0x0000000116b50119: mov    %rcx,0x70(%rsp)
  0x0000000116b5011e: mov    %rdx,0x68(%rsp)
  0x0000000116b50123: mov    %rbx,0x60(%rsp)
  0x0000000116b50128: mov    %rbp,0x50(%rsp)
  0x0000000116b5012d: mov    %rsi,0x48(%rsp)
  0x0000000116b50132: mov    %rdi,0x40(%rsp)
  0x0000000116b50137: mov    %r8,0x38(%rsp)
  0x0000000116b5013c: mov    %r9,0x30(%rsp)
  0x0000000116b50141: mov    %r10,0x28(%rsp)
  0x0000000116b50146: mov    %r11,0x20(%rsp)
  0x0000000116b5014b: mov    %r12,0x18(%rsp)
  0x0000000116b50150: mov    %r13,0x10(%rsp)
  0x0000000116b50155: mov    %r14,0x8(%rsp)
  0x0000000116b5015a: mov    %r15,(%rsp)
  0x0000000116b5015e: movabs $0x10cc6405e,%rdi
  0x0000000116b50168: movabs $0x116b50108,%rsi
  0x0000000116b50172: mov    %rsp,%rdx
  0x0000000116b50175: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50179: callq  0x000000010c7dd830
  0x0000000116b5017e: hlt    
  0x0000000116b5017f: pop    %rax
  0x0000000116b50180: movabs $0x0,%r10
  0x0000000116b5018a: mov    %r10,0x280(%r15)
  0x0000000116b50191: movabs $0x0,%r10
  0x0000000116b5019b: mov    %r10,0x290(%r15)
  0x0000000116b501a2: movabs $0x0,%r10
  0x0000000116b501ac: mov    %r10,0x288(%r15)
  0x0000000116b501b3: cmpq   $0x0,0x8(%r15)
  0x0000000116b501bb: je     0x0000000116b501c6
  0x0000000116b501c1: jmpq   0x0000000116b30420
  0x0000000116b501c6: mov    -0x38(%rbp),%r13
  0x0000000116b501ca: mov    -0x30(%rbp),%r14
  0x0000000116b501ce: retq   
  0x0000000116b501cf: movzbl 0x0(%r13),%ebx
  0x0000000116b501d4: movabs $0x10ce36680,%r10
  0x0000000116b501de: jmpq   *(%r10,%rbx,8)
  0x0000000116b501e2: sub    $0x8,%rsp
  0x0000000116b501e6: vmovss %xmm0,(%rsp)
  0x0000000116b501eb: callq  0x0000000116b501f5
  0x0000000116b501f0: jmpq   0x0000000116b50444
  0x0000000116b501f5: lea    0x8(%rsp),%rax
  0x0000000116b501fa: mov    %r13,-0x38(%rbp)
  0x0000000116b501fe: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b50206: je     0x0000000116b50283
  0x0000000116b5020c: mov    %rsp,-0x28(%rsp)
  0x0000000116b50211: sub    $0x80,%rsp
  0x0000000116b50218: mov    %rax,0x78(%rsp)
  0x0000000116b5021d: mov    %rcx,0x70(%rsp)
  0x0000000116b50222: mov    %rdx,0x68(%rsp)
  0x0000000116b50227: mov    %rbx,0x60(%rsp)
  0x0000000116b5022c: mov    %rbp,0x50(%rsp)
  0x0000000116b50231: mov    %rsi,0x48(%rsp)
  0x0000000116b50236: mov    %rdi,0x40(%rsp)
  0x0000000116b5023b: mov    %r8,0x38(%rsp)
  0x0000000116b50240: mov    %r9,0x30(%rsp)
  0x0000000116b50245: mov    %r10,0x28(%rsp)
  0x0000000116b5024a: mov    %r11,0x20(%rsp)
  0x0000000116b5024f: mov    %r12,0x18(%rsp)
  0x0000000116b50254: mov    %r13,0x10(%rsp)
  0x0000000116b50259: mov    %r14,0x8(%rsp)
  0x0000000116b5025e: mov    %r15,(%rsp)
  0x0000000116b50262: movabs $0x10cc2363b,%rdi
  0x0000000116b5026c: movabs $0x116b5020c,%rsi
  0x0000000116b50276: mov    %rsp,%rdx
  0x0000000116b50279: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5027d: callq  0x000000010c7dd830
  0x0000000116b50282: hlt    
  0x0000000116b50283: push   %r10
  0x0000000116b50285: cmp    -0x9d099dc(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5028c: je     0x0000000116b50309
  ;; call_VM_base: heap base corrupted?
  0x0000000116b50292: mov    %rsp,-0x28(%rsp)
  0x0000000116b50297: sub    $0x80,%rsp
  0x0000000116b5029e: mov    %rax,0x78(%rsp)
  0x0000000116b502a3: mov    %rcx,0x70(%rsp)
  0x0000000116b502a8: mov    %rdx,0x68(%rsp)
  0x0000000116b502ad: mov    %rbx,0x60(%rsp)
  0x0000000116b502b2: mov    %rbp,0x50(%rsp)
  0x0000000116b502b7: mov    %rsi,0x48(%rsp)
  0x0000000116b502bc: mov    %rdi,0x40(%rsp)
  0x0000000116b502c1: mov    %r8,0x38(%rsp)
  0x0000000116b502c6: mov    %r9,0x30(%rsp)
  0x0000000116b502cb: mov    %r10,0x28(%rsp)
  0x0000000116b502d0: mov    %r11,0x20(%rsp)
  0x0000000116b502d5: mov    %r12,0x18(%rsp)
  0x0000000116b502da: mov    %r13,0x10(%rsp)
  0x0000000116b502df: mov    %r14,0x8(%rsp)
  0x0000000116b502e4: mov    %r15,(%rsp)
  0x0000000116b502e8: movabs $0x10cc63f17,%rdi
  0x0000000116b502f2: movabs $0x116b50292,%rsi
  0x0000000116b502fc: mov    %rsp,%rdx
  0x0000000116b502ff: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50303: callq  0x000000010c7dd830
  0x0000000116b50308: hlt    
  0x0000000116b50309: pop    %r10
  0x0000000116b5030b: mov    %r15,%rdi
  0x0000000116b5030e: mov    %rbp,0x290(%r15)
  0x0000000116b50315: mov    %rax,0x280(%r15)
  0x0000000116b5031c: test   $0xf,%esp
  0x0000000116b50322: je     0x0000000116b5033a
  0x0000000116b50328: sub    $0x8,%rsp
  0x0000000116b5032c: callq  0x000000010c58c440
  0x0000000116b50331: add    $0x8,%rsp
  0x0000000116b50335: jmpq   0x0000000116b5033f
  0x0000000116b5033a: callq  0x000000010c58c440
  0x0000000116b5033f: push   %rax
  0x0000000116b50340: push   %rdi
  0x0000000116b50341: push   %rsi
  0x0000000116b50342: push   %rdx
  0x0000000116b50343: push   %rcx
  0x0000000116b50344: push   %r8
  0x0000000116b50346: push   %r9
  0x0000000116b50348: push   %r10
  0x0000000116b5034a: mov    %rsp,%r10
  0x0000000116b5034d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50351: push   %r10
  0x0000000116b50353: push   %r11
  0x0000000116b50355: mov    $0x109,%edi
  0x0000000116b5035a: movabs $0x7ff815049fd5,%r10
  0x0000000116b50364: callq  *%r10
  0x0000000116b50367: pop    %r11
  0x0000000116b50369: pop    %rsp
  0x0000000116b5036a: pop    %r10
  0x0000000116b5036c: pop    %r9
  0x0000000116b5036e: pop    %r8
  0x0000000116b50370: pop    %rcx
  0x0000000116b50371: pop    %rdx
  0x0000000116b50372: pop    %rsi
  0x0000000116b50373: pop    %rdi
  0x0000000116b50374: cmp    %rax,%r15
  0x0000000116b50377: je     0x0000000116b503f4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5037d: mov    %rsp,-0x28(%rsp)
  0x0000000116b50382: sub    $0x80,%rsp
  0x0000000116b50389: mov    %rax,0x78(%rsp)
  0x0000000116b5038e: mov    %rcx,0x70(%rsp)
  0x0000000116b50393: mov    %rdx,0x68(%rsp)
  0x0000000116b50398: mov    %rbx,0x60(%rsp)
  0x0000000116b5039d: mov    %rbp,0x50(%rsp)
  0x0000000116b503a2: mov    %rsi,0x48(%rsp)
  0x0000000116b503a7: mov    %rdi,0x40(%rsp)
  0x0000000116b503ac: mov    %r8,0x38(%rsp)
  0x0000000116b503b1: mov    %r9,0x30(%rsp)
  0x0000000116b503b6: mov    %r10,0x28(%rsp)
  0x0000000116b503bb: mov    %r11,0x20(%rsp)
  0x0000000116b503c0: mov    %r12,0x18(%rsp)
  0x0000000116b503c5: mov    %r13,0x10(%rsp)
  0x0000000116b503ca: mov    %r14,0x8(%rsp)
  0x0000000116b503cf: mov    %r15,(%rsp)
  0x0000000116b503d3: movabs $0x10cc6405e,%rdi
  0x0000000116b503dd: movabs $0x116b5037d,%rsi
  0x0000000116b503e7: mov    %rsp,%rdx
  0x0000000116b503ea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b503ee: callq  0x000000010c7dd830
  0x0000000116b503f3: hlt    
  0x0000000116b503f4: pop    %rax
  0x0000000116b503f5: movabs $0x0,%r10
  0x0000000116b503ff: mov    %r10,0x280(%r15)
  0x0000000116b50406: movabs $0x0,%r10
  0x0000000116b50410: mov    %r10,0x290(%r15)
  0x0000000116b50417: movabs $0x0,%r10
  0x0000000116b50421: mov    %r10,0x288(%r15)
  0x0000000116b50428: cmpq   $0x0,0x8(%r15)
  0x0000000116b50430: je     0x0000000116b5043b
  0x0000000116b50436: jmpq   0x0000000116b30420
  0x0000000116b5043b: mov    -0x38(%rbp),%r13
  0x0000000116b5043f: mov    -0x30(%rbp),%r14
  0x0000000116b50443: retq   
  0x0000000116b50444: movzbl 0x0(%r13),%ebx
  0x0000000116b50449: movabs $0x10ce36680,%r10
  0x0000000116b50453: jmpq   *(%r10,%rbx,8)
  0x0000000116b50457: sub    $0x10,%rsp
  0x0000000116b5045b: vmovsd %xmm0,(%rsp)
  0x0000000116b50460: callq  0x0000000116b5046a
  0x0000000116b50465: jmpq   0x0000000116b506b9
  0x0000000116b5046a: lea    0x8(%rsp),%rax
  0x0000000116b5046f: mov    %r13,-0x38(%rbp)
  0x0000000116b50473: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5047b: je     0x0000000116b504f8
  0x0000000116b50481: mov    %rsp,-0x28(%rsp)
  0x0000000116b50486: sub    $0x80,%rsp
  0x0000000116b5048d: mov    %rax,0x78(%rsp)
  0x0000000116b50492: mov    %rcx,0x70(%rsp)
  0x0000000116b50497: mov    %rdx,0x68(%rsp)
  0x0000000116b5049c: mov    %rbx,0x60(%rsp)
  0x0000000116b504a1: mov    %rbp,0x50(%rsp)
  0x0000000116b504a6: mov    %rsi,0x48(%rsp)
  0x0000000116b504ab: mov    %rdi,0x40(%rsp)
  0x0000000116b504b0: mov    %r8,0x38(%rsp)
  0x0000000116b504b5: mov    %r9,0x30(%rsp)
  0x0000000116b504ba: mov    %r10,0x28(%rsp)
  0x0000000116b504bf: mov    %r11,0x20(%rsp)
  0x0000000116b504c4: mov    %r12,0x18(%rsp)
  0x0000000116b504c9: mov    %r13,0x10(%rsp)
  0x0000000116b504ce: mov    %r14,0x8(%rsp)
  0x0000000116b504d3: mov    %r15,(%rsp)
  0x0000000116b504d7: movabs $0x10cc2363b,%rdi
  0x0000000116b504e1: movabs $0x116b50481,%rsi
  0x0000000116b504eb: mov    %rsp,%rdx
  0x0000000116b504ee: and    $0xfffffffffffffff0,%rsp
  0x0000000116b504f2: callq  0x000000010c7dd830
  0x0000000116b504f7: hlt    
  0x0000000116b504f8: push   %r10
  0x0000000116b504fa: cmp    -0x9d09c51(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b50501: je     0x0000000116b5057e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b50507: mov    %rsp,-0x28(%rsp)
  0x0000000116b5050c: sub    $0x80,%rsp
  0x0000000116b50513: mov    %rax,0x78(%rsp)
  0x0000000116b50518: mov    %rcx,0x70(%rsp)
  0x0000000116b5051d: mov    %rdx,0x68(%rsp)
  0x0000000116b50522: mov    %rbx,0x60(%rsp)
  0x0000000116b50527: mov    %rbp,0x50(%rsp)
  0x0000000116b5052c: mov    %rsi,0x48(%rsp)
  0x0000000116b50531: mov    %rdi,0x40(%rsp)
  0x0000000116b50536: mov    %r8,0x38(%rsp)
  0x0000000116b5053b: mov    %r9,0x30(%rsp)
  0x0000000116b50540: mov    %r10,0x28(%rsp)
  0x0000000116b50545: mov    %r11,0x20(%rsp)
  0x0000000116b5054a: mov    %r12,0x18(%rsp)
  0x0000000116b5054f: mov    %r13,0x10(%rsp)
  0x0000000116b50554: mov    %r14,0x8(%rsp)
  0x0000000116b50559: mov    %r15,(%rsp)
  0x0000000116b5055d: movabs $0x10cc63f17,%rdi
  0x0000000116b50567: movabs $0x116b50507,%rsi
  0x0000000116b50571: mov    %rsp,%rdx
  0x0000000116b50574: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50578: callq  0x000000010c7dd830
  0x0000000116b5057d: hlt    
  0x0000000116b5057e: pop    %r10
  0x0000000116b50580: mov    %r15,%rdi
  0x0000000116b50583: mov    %rbp,0x290(%r15)
  0x0000000116b5058a: mov    %rax,0x280(%r15)
  0x0000000116b50591: test   $0xf,%esp
  0x0000000116b50597: je     0x0000000116b505af
  0x0000000116b5059d: sub    $0x8,%rsp
  0x0000000116b505a1: callq  0x000000010c58c440
  0x0000000116b505a6: add    $0x8,%rsp
  0x0000000116b505aa: jmpq   0x0000000116b505b4
  0x0000000116b505af: callq  0x000000010c58c440
  0x0000000116b505b4: push   %rax
  0x0000000116b505b5: push   %rdi
  0x0000000116b505b6: push   %rsi
  0x0000000116b505b7: push   %rdx
  0x0000000116b505b8: push   %rcx
  0x0000000116b505b9: push   %r8
  0x0000000116b505bb: push   %r9
  0x0000000116b505bd: push   %r10
  0x0000000116b505bf: mov    %rsp,%r10
  0x0000000116b505c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b505c6: push   %r10
  0x0000000116b505c8: push   %r11
  0x0000000116b505ca: mov    $0x109,%edi
  0x0000000116b505cf: movabs $0x7ff815049fd5,%r10
  0x0000000116b505d9: callq  *%r10
  0x0000000116b505dc: pop    %r11
  0x0000000116b505de: pop    %rsp
  0x0000000116b505df: pop    %r10
  0x0000000116b505e1: pop    %r9
  0x0000000116b505e3: pop    %r8
  0x0000000116b505e5: pop    %rcx
  0x0000000116b505e6: pop    %rdx
  0x0000000116b505e7: pop    %rsi
  0x0000000116b505e8: pop    %rdi
  0x0000000116b505e9: cmp    %rax,%r15
  0x0000000116b505ec: je     0x0000000116b50669
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b505f2: mov    %rsp,-0x28(%rsp)
  0x0000000116b505f7: sub    $0x80,%rsp
  0x0000000116b505fe: mov    %rax,0x78(%rsp)
  0x0000000116b50603: mov    %rcx,0x70(%rsp)
  0x0000000116b50608: mov    %rdx,0x68(%rsp)
  0x0000000116b5060d: mov    %rbx,0x60(%rsp)
  0x0000000116b50612: mov    %rbp,0x50(%rsp)
  0x0000000116b50617: mov    %rsi,0x48(%rsp)
  0x0000000116b5061c: mov    %rdi,0x40(%rsp)
  0x0000000116b50621: mov    %r8,0x38(%rsp)
  0x0000000116b50626: mov    %r9,0x30(%rsp)
  0x0000000116b5062b: mov    %r10,0x28(%rsp)
  0x0000000116b50630: mov    %r11,0x20(%rsp)
  0x0000000116b50635: mov    %r12,0x18(%rsp)
  0x0000000116b5063a: mov    %r13,0x10(%rsp)
  0x0000000116b5063f: mov    %r14,0x8(%rsp)
  0x0000000116b50644: mov    %r15,(%rsp)
  0x0000000116b50648: movabs $0x10cc6405e,%rdi
  0x0000000116b50652: movabs $0x116b505f2,%rsi
  0x0000000116b5065c: mov    %rsp,%rdx
  0x0000000116b5065f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50663: callq  0x000000010c7dd830
  0x0000000116b50668: hlt    
  0x0000000116b50669: pop    %rax
  0x0000000116b5066a: movabs $0x0,%r10
  0x0000000116b50674: mov    %r10,0x280(%r15)
  0x0000000116b5067b: movabs $0x0,%r10
  0x0000000116b50685: mov    %r10,0x290(%r15)
  0x0000000116b5068c: movabs $0x0,%r10
  0x0000000116b50696: mov    %r10,0x288(%r15)
  0x0000000116b5069d: cmpq   $0x0,0x8(%r15)
  0x0000000116b506a5: je     0x0000000116b506b0
  0x0000000116b506ab: jmpq   0x0000000116b30420
  0x0000000116b506b0: mov    -0x38(%rbp),%r13
  0x0000000116b506b4: mov    -0x30(%rbp),%r14
  0x0000000116b506b8: retq   
  0x0000000116b506b9: movzbl 0x0(%r13),%ebx
  0x0000000116b506be: movabs $0x10ce36680,%r10
  0x0000000116b506c8: jmpq   *(%r10,%rbx,8)
  0x0000000116b506cc: callq  0x0000000116b506d6
  0x0000000116b506d1: jmpq   0x0000000116b50925
  0x0000000116b506d6: lea    0x8(%rsp),%rax
  0x0000000116b506db: mov    %r13,-0x38(%rbp)
  0x0000000116b506df: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b506e7: je     0x0000000116b50764
  0x0000000116b506ed: mov    %rsp,-0x28(%rsp)
  0x0000000116b506f2: sub    $0x80,%rsp
  0x0000000116b506f9: mov    %rax,0x78(%rsp)
  0x0000000116b506fe: mov    %rcx,0x70(%rsp)
  0x0000000116b50703: mov    %rdx,0x68(%rsp)
  0x0000000116b50708: mov    %rbx,0x60(%rsp)
  0x0000000116b5070d: mov    %rbp,0x50(%rsp)
  0x0000000116b50712: mov    %rsi,0x48(%rsp)
  0x0000000116b50717: mov    %rdi,0x40(%rsp)
  0x0000000116b5071c: mov    %r8,0x38(%rsp)
  0x0000000116b50721: mov    %r9,0x30(%rsp)
  0x0000000116b50726: mov    %r10,0x28(%rsp)
  0x0000000116b5072b: mov    %r11,0x20(%rsp)
  0x0000000116b50730: mov    %r12,0x18(%rsp)
  0x0000000116b50735: mov    %r13,0x10(%rsp)
  0x0000000116b5073a: mov    %r14,0x8(%rsp)
  0x0000000116b5073f: mov    %r15,(%rsp)
  0x0000000116b50743: movabs $0x10cc2363b,%rdi
  0x0000000116b5074d: movabs $0x116b506ed,%rsi
  0x0000000116b50757: mov    %rsp,%rdx
  0x0000000116b5075a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5075e: callq  0x000000010c7dd830
  0x0000000116b50763: hlt    
  0x0000000116b50764: push   %r10
  0x0000000116b50766: cmp    -0x9d09ebd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5076d: je     0x0000000116b507ea
  ;; call_VM_base: heap base corrupted?
  0x0000000116b50773: mov    %rsp,-0x28(%rsp)
  0x0000000116b50778: sub    $0x80,%rsp
  0x0000000116b5077f: mov    %rax,0x78(%rsp)
  0x0000000116b50784: mov    %rcx,0x70(%rsp)
  0x0000000116b50789: mov    %rdx,0x68(%rsp)
  0x0000000116b5078e: mov    %rbx,0x60(%rsp)
  0x0000000116b50793: mov    %rbp,0x50(%rsp)
  0x0000000116b50798: mov    %rsi,0x48(%rsp)
  0x0000000116b5079d: mov    %rdi,0x40(%rsp)
  0x0000000116b507a2: mov    %r8,0x38(%rsp)
  0x0000000116b507a7: mov    %r9,0x30(%rsp)
  0x0000000116b507ac: mov    %r10,0x28(%rsp)
  0x0000000116b507b1: mov    %r11,0x20(%rsp)
  0x0000000116b507b6: mov    %r12,0x18(%rsp)
  0x0000000116b507bb: mov    %r13,0x10(%rsp)
  0x0000000116b507c0: mov    %r14,0x8(%rsp)
  0x0000000116b507c5: mov    %r15,(%rsp)
  0x0000000116b507c9: movabs $0x10cc63f17,%rdi
  0x0000000116b507d3: movabs $0x116b50773,%rsi
  0x0000000116b507dd: mov    %rsp,%rdx
  0x0000000116b507e0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b507e4: callq  0x000000010c7dd830
  0x0000000116b507e9: hlt    
  0x0000000116b507ea: pop    %r10
  0x0000000116b507ec: mov    %r15,%rdi
  0x0000000116b507ef: mov    %rbp,0x290(%r15)
  0x0000000116b507f6: mov    %rax,0x280(%r15)
  0x0000000116b507fd: test   $0xf,%esp
  0x0000000116b50803: je     0x0000000116b5081b
  0x0000000116b50809: sub    $0x8,%rsp
  0x0000000116b5080d: callq  0x000000010c58c440
  0x0000000116b50812: add    $0x8,%rsp
  0x0000000116b50816: jmpq   0x0000000116b50820
  0x0000000116b5081b: callq  0x000000010c58c440
  0x0000000116b50820: push   %rax
  0x0000000116b50821: push   %rdi
  0x0000000116b50822: push   %rsi
  0x0000000116b50823: push   %rdx
  0x0000000116b50824: push   %rcx
  0x0000000116b50825: push   %r8
  0x0000000116b50827: push   %r9
  0x0000000116b50829: push   %r10
  0x0000000116b5082b: mov    %rsp,%r10
  0x0000000116b5082e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50832: push   %r10
  0x0000000116b50834: push   %r11
  0x0000000116b50836: mov    $0x109,%edi
  0x0000000116b5083b: movabs $0x7ff815049fd5,%r10
  0x0000000116b50845: callq  *%r10
  0x0000000116b50848: pop    %r11
  0x0000000116b5084a: pop    %rsp
  0x0000000116b5084b: pop    %r10
  0x0000000116b5084d: pop    %r9
  0x0000000116b5084f: pop    %r8
  0x0000000116b50851: pop    %rcx
  0x0000000116b50852: pop    %rdx
  0x0000000116b50853: pop    %rsi
  0x0000000116b50854: pop    %rdi
  0x0000000116b50855: cmp    %rax,%r15
  0x0000000116b50858: je     0x0000000116b508d5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5085e: mov    %rsp,-0x28(%rsp)
  0x0000000116b50863: sub    $0x80,%rsp
  0x0000000116b5086a: mov    %rax,0x78(%rsp)
  0x0000000116b5086f: mov    %rcx,0x70(%rsp)
  0x0000000116b50874: mov    %rdx,0x68(%rsp)
  0x0000000116b50879: mov    %rbx,0x60(%rsp)
  0x0000000116b5087e: mov    %rbp,0x50(%rsp)
  0x0000000116b50883: mov    %rsi,0x48(%rsp)
  0x0000000116b50888: mov    %rdi,0x40(%rsp)
  0x0000000116b5088d: mov    %r8,0x38(%rsp)
  0x0000000116b50892: mov    %r9,0x30(%rsp)
  0x0000000116b50897: mov    %r10,0x28(%rsp)
  0x0000000116b5089c: mov    %r11,0x20(%rsp)
  0x0000000116b508a1: mov    %r12,0x18(%rsp)
  0x0000000116b508a6: mov    %r13,0x10(%rsp)
  0x0000000116b508ab: mov    %r14,0x8(%rsp)
  0x0000000116b508b0: mov    %r15,(%rsp)
  0x0000000116b508b4: movabs $0x10cc6405e,%rdi
  0x0000000116b508be: movabs $0x116b5085e,%rsi
  0x0000000116b508c8: mov    %rsp,%rdx
  0x0000000116b508cb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b508cf: callq  0x000000010c7dd830
  0x0000000116b508d4: hlt    
  0x0000000116b508d5: pop    %rax
  0x0000000116b508d6: movabs $0x0,%r10
  0x0000000116b508e0: mov    %r10,0x280(%r15)
  0x0000000116b508e7: movabs $0x0,%r10
  0x0000000116b508f1: mov    %r10,0x290(%r15)
  0x0000000116b508f8: movabs $0x0,%r10
  0x0000000116b50902: mov    %r10,0x288(%r15)
  0x0000000116b50909: cmpq   $0x0,0x8(%r15)
  0x0000000116b50911: je     0x0000000116b5091c
  0x0000000116b50917: jmpq   0x0000000116b30420
  0x0000000116b5091c: mov    -0x38(%rbp),%r13
  0x0000000116b50920: mov    -0x30(%rbp),%r14
  0x0000000116b50924: retq   
  0x0000000116b50925: movzbl 0x0(%r13),%ebx
  0x0000000116b5092a: movabs $0x10ce36680,%r10
  0x0000000116b50934: jmpq   *(%r10,%rbx,8)
  0x0000000116b50938: int3   
  0x0000000116b50939: int3   
  0x0000000116b5093a: int3   
  0x0000000116b5093b: int3   
  0x0000000116b5093c: int3   
  0x0000000116b5093d: int3   
  0x0000000116b5093e: int3   
  0x0000000116b5093f: int3   

----------------------------------------------------------------------
exception handling  [0x0000000116b50980, 0x0000000116b52840]  7872 bytes

  0x0000000116b50980: movq   $0x0,-0x10(%rbp)
  0x0000000116b50988: mov    -0x38(%rbp),%r13
  0x0000000116b5098c: mov    -0x30(%rbp),%r14
  0x0000000116b50990: xor    %r12,%r12
  0x0000000116b50993: mov    %rax,%rsi
  0x0000000116b50996: mov    -0x40(%rbp),%rsp
  0x0000000116b5099a: movq   $0x0,-0x10(%rbp)
  0x0000000116b509a2: callq  0x0000000116b509ac
  0x0000000116b509a7: jmpq   0x0000000116b50c13
  0x0000000116b509ac: lea    0x8(%rsp),%rax
  0x0000000116b509b1: mov    %r13,-0x38(%rbp)
  0x0000000116b509b5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b509bd: je     0x0000000116b50a3a
  0x0000000116b509c3: mov    %rsp,-0x28(%rsp)
  0x0000000116b509c8: sub    $0x80,%rsp
  0x0000000116b509cf: mov    %rax,0x78(%rsp)
  0x0000000116b509d4: mov    %rcx,0x70(%rsp)
  0x0000000116b509d9: mov    %rdx,0x68(%rsp)
  0x0000000116b509de: mov    %rbx,0x60(%rsp)
  0x0000000116b509e3: mov    %rbp,0x50(%rsp)
  0x0000000116b509e8: mov    %rsi,0x48(%rsp)
  0x0000000116b509ed: mov    %rdi,0x40(%rsp)
  0x0000000116b509f2: mov    %r8,0x38(%rsp)
  0x0000000116b509f7: mov    %r9,0x30(%rsp)
  0x0000000116b509fc: mov    %r10,0x28(%rsp)
  0x0000000116b50a01: mov    %r11,0x20(%rsp)
  0x0000000116b50a06: mov    %r12,0x18(%rsp)
  0x0000000116b50a0b: mov    %r13,0x10(%rsp)
  0x0000000116b50a10: mov    %r14,0x8(%rsp)
  0x0000000116b50a15: mov    %r15,(%rsp)
  0x0000000116b50a19: movabs $0x10cc2363b,%rdi
  0x0000000116b50a23: movabs $0x116b509c3,%rsi
  0x0000000116b50a2d: mov    %rsp,%rdx
  0x0000000116b50a30: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50a34: callq  0x000000010c7dd830
  0x0000000116b50a39: hlt    
  0x0000000116b50a3a: push   %r10
  0x0000000116b50a3c: cmp    -0x9d0a193(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b50a43: je     0x0000000116b50ac0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b50a49: mov    %rsp,-0x28(%rsp)
  0x0000000116b50a4e: sub    $0x80,%rsp
  0x0000000116b50a55: mov    %rax,0x78(%rsp)
  0x0000000116b50a5a: mov    %rcx,0x70(%rsp)
  0x0000000116b50a5f: mov    %rdx,0x68(%rsp)
  0x0000000116b50a64: mov    %rbx,0x60(%rsp)
  0x0000000116b50a69: mov    %rbp,0x50(%rsp)
  0x0000000116b50a6e: mov    %rsi,0x48(%rsp)
  0x0000000116b50a73: mov    %rdi,0x40(%rsp)
  0x0000000116b50a78: mov    %r8,0x38(%rsp)
  0x0000000116b50a7d: mov    %r9,0x30(%rsp)
  0x0000000116b50a82: mov    %r10,0x28(%rsp)
  0x0000000116b50a87: mov    %r11,0x20(%rsp)
  0x0000000116b50a8c: mov    %r12,0x18(%rsp)
  0x0000000116b50a91: mov    %r13,0x10(%rsp)
  0x0000000116b50a96: mov    %r14,0x8(%rsp)
  0x0000000116b50a9b: mov    %r15,(%rsp)
  0x0000000116b50a9f: movabs $0x10cc63f17,%rdi
  0x0000000116b50aa9: movabs $0x116b50a49,%rsi
  0x0000000116b50ab3: mov    %rsp,%rdx
  0x0000000116b50ab6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50aba: callq  0x000000010c7dd830
  0x0000000116b50abf: hlt    
  0x0000000116b50ac0: pop    %r10
  0x0000000116b50ac2: mov    %r15,%rdi
  0x0000000116b50ac5: mov    %rbp,0x290(%r15)
  0x0000000116b50acc: mov    %rax,0x280(%r15)
  0x0000000116b50ad3: test   $0xf,%esp
  0x0000000116b50ad9: je     0x0000000116b50af1
  0x0000000116b50adf: sub    $0x8,%rsp
  0x0000000116b50ae3: callq  0x000000010c587860
  0x0000000116b50ae8: add    $0x8,%rsp
  0x0000000116b50aec: jmpq   0x0000000116b50af6
  0x0000000116b50af1: callq  0x000000010c587860
  0x0000000116b50af6: push   %rax
  0x0000000116b50af7: push   %rdi
  0x0000000116b50af8: push   %rsi
  0x0000000116b50af9: push   %rdx
  0x0000000116b50afa: push   %rcx
  0x0000000116b50afb: push   %r8
  0x0000000116b50afd: push   %r9
  0x0000000116b50aff: push   %r10
  0x0000000116b50b01: mov    %rsp,%r10
  0x0000000116b50b04: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50b08: push   %r10
  0x0000000116b50b0a: push   %r11
  0x0000000116b50b0c: mov    $0x109,%edi
  0x0000000116b50b11: movabs $0x7ff815049fd5,%r10
  0x0000000116b50b1b: callq  *%r10
  0x0000000116b50b1e: pop    %r11
  0x0000000116b50b20: pop    %rsp
  0x0000000116b50b21: pop    %r10
  0x0000000116b50b23: pop    %r9
  0x0000000116b50b25: pop    %r8
  0x0000000116b50b27: pop    %rcx
  0x0000000116b50b28: pop    %rdx
  0x0000000116b50b29: pop    %rsi
  0x0000000116b50b2a: pop    %rdi
  0x0000000116b50b2b: cmp    %rax,%r15
  0x0000000116b50b2e: je     0x0000000116b50bab
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b50b34: mov    %rsp,-0x28(%rsp)
  0x0000000116b50b39: sub    $0x80,%rsp
  0x0000000116b50b40: mov    %rax,0x78(%rsp)
  0x0000000116b50b45: mov    %rcx,0x70(%rsp)
  0x0000000116b50b4a: mov    %rdx,0x68(%rsp)
  0x0000000116b50b4f: mov    %rbx,0x60(%rsp)
  0x0000000116b50b54: mov    %rbp,0x50(%rsp)
  0x0000000116b50b59: mov    %rsi,0x48(%rsp)
  0x0000000116b50b5e: mov    %rdi,0x40(%rsp)
  0x0000000116b50b63: mov    %r8,0x38(%rsp)
  0x0000000116b50b68: mov    %r9,0x30(%rsp)
  0x0000000116b50b6d: mov    %r10,0x28(%rsp)
  0x0000000116b50b72: mov    %r11,0x20(%rsp)
  0x0000000116b50b77: mov    %r12,0x18(%rsp)
  0x0000000116b50b7c: mov    %r13,0x10(%rsp)
  0x0000000116b50b81: mov    %r14,0x8(%rsp)
  0x0000000116b50b86: mov    %r15,(%rsp)
  0x0000000116b50b8a: movabs $0x10cc6405e,%rdi
  0x0000000116b50b94: movabs $0x116b50b34,%rsi
  0x0000000116b50b9e: mov    %rsp,%rdx
  0x0000000116b50ba1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50ba5: callq  0x000000010c7dd830
  0x0000000116b50baa: hlt    
  0x0000000116b50bab: pop    %rax
  0x0000000116b50bac: movabs $0x0,%r10
  0x0000000116b50bb6: mov    %r10,0x280(%r15)
  0x0000000116b50bbd: movabs $0x0,%r10
  0x0000000116b50bc7: mov    %r10,0x290(%r15)
  0x0000000116b50bce: movabs $0x0,%r10
  0x0000000116b50bd8: mov    %r10,0x288(%r15)
  0x0000000116b50bdf: cmpq   $0x0,0x8(%r15)
  0x0000000116b50be7: je     0x0000000116b50bf2
  0x0000000116b50bed: jmpq   0x0000000116b30420
  0x0000000116b50bf2: mov    0x2e0(%r15),%rdx
  0x0000000116b50bf9: movabs $0x0,%r10
  0x0000000116b50c03: mov    %r10,0x2e0(%r15)
  0x0000000116b50c0a: mov    -0x38(%rbp),%r13
  0x0000000116b50c0e: mov    -0x30(%rbp),%r14
  0x0000000116b50c12: retq   
  0x0000000116b50c13: push   %rdx
  0x0000000116b50c14: jmpq   *%rax
  0x0000000116b50c16: mov    -0x40(%rbp),%rsp
  0x0000000116b50c1a: movq   $0x0,-0x10(%rbp)
  0x0000000116b50c22: mov    0x37c(%r15),%edx
  0x0000000116b50c29: or     $0x2,%edx
  0x0000000116b50c2c: mov    %edx,0x37c(%r15)
  0x0000000116b50c33: mov    0x8(%rbp),%rsi
  0x0000000116b50c37: mov    %rsi,%rdi
  0x0000000116b50c3a: test   $0xf,%esp
  0x0000000116b50c40: je     0x0000000116b50c58
  0x0000000116b50c46: sub    $0x8,%rsp
  0x0000000116b50c4a: callq  0x000000010c58d1c0
  0x0000000116b50c4f: add    $0x8,%rsp
  0x0000000116b50c53: jmpq   0x0000000116b50c5d
  0x0000000116b50c58: callq  0x000000010c58d1c0
  0x0000000116b50c5d: test   %eax,%eax
  0x0000000116b50c5f: jne    0x0000000116b5131f
  0x0000000116b50c65: mov    -0x18(%rbp),%rax
  0x0000000116b50c69: mov    0x10(%rax),%rax
  0x0000000116b50c6d: movzwl 0x2c(%rax),%eax
  0x0000000116b50c71: shl    $0x3,%eax
  0x0000000116b50c74: mov    -0x30(%rbp),%r14
  0x0000000116b50c78: sub    %rax,%r14
  0x0000000116b50c7b: add    $0x8,%r14
  0x0000000116b50c7f: mov    %r14,%rdx
  0x0000000116b50c82: mov    %rax,%rsi
  0x0000000116b50c85: mov    %r15,%rdi
  0x0000000116b50c88: test   $0xf,%esp
  0x0000000116b50c8e: je     0x0000000116b50ca6
  0x0000000116b50c94: sub    $0x8,%rsp
  0x0000000116b50c98: callq  0x000000010c374cf0
  0x0000000116b50c9d: add    $0x8,%rsp
  0x0000000116b50ca1: jmpq   0x0000000116b50cab
  0x0000000116b50ca6: callq  0x000000010c374cf0
  0x0000000116b50cab: mov    0x33d(%r15),%dl
  0x0000000116b50cb2: movb   $0x0,0x33d(%r15)
  0x0000000116b50cba: mov    -0x18(%rbp),%rbx
  0x0000000116b50cbe: mov    0x28(%rbx),%ecx
  0x0000000116b50cc1: test   $0x20,%ecx
  0x0000000116b50cc7: je     0x0000000116b50f88
  0x0000000116b50ccd: test   $0xff,%dl
  0x0000000116b50cd0: jne    0x0000000116b5124d
  0x0000000116b50cd6: lea    -0x50(%rbp),%rsi
  0x0000000116b50cda: mov    0x8(%rsi),%rax
  0x0000000116b50cde: test   %rax,%rax
  0x0000000116b50ce1: jne    0x0000000116b50cec
  0x0000000116b50ce7: jmpq   0x0000000116b50f88
  0x0000000116b50cec: mov    %r13,-0x38(%rbp)
  0x0000000116b50cf0: lea    (%rsi),%rax
  0x0000000116b50cf3: mov    0x8(%rsi),%rcx
  0x0000000116b50cf7: movq   $0x0,0x8(%rsi)
  0x0000000116b50cff: mov    (%rcx),%rdx
  0x0000000116b50d02: and    $0x7,%rdx
  0x0000000116b50d06: cmp    $0x5,%rdx
  0x0000000116b50d0a: je     0x0000000116b50f84
  0x0000000116b50d10: mov    (%rax),%rdx
  0x0000000116b50d13: test   %rdx,%rdx
  0x0000000116b50d16: je     0x0000000116b50f84
  0x0000000116b50d1c: lock cmpxchg %rdx,(%rcx)
  0x0000000116b50d21: je     0x0000000116b50f84
  0x0000000116b50d27: mov    %rcx,0x8(%rsi)
  0x0000000116b50d2b: callq  0x0000000116b50d35
  0x0000000116b50d30: jmpq   0x0000000116b50f84
  0x0000000116b50d35: lea    0x8(%rsp),%rax
  0x0000000116b50d3a: mov    %r13,-0x38(%rbp)
  0x0000000116b50d3e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b50d46: je     0x0000000116b50dc3
  0x0000000116b50d4c: mov    %rsp,-0x28(%rsp)
  0x0000000116b50d51: sub    $0x80,%rsp
  0x0000000116b50d58: mov    %rax,0x78(%rsp)
  0x0000000116b50d5d: mov    %rcx,0x70(%rsp)
  0x0000000116b50d62: mov    %rdx,0x68(%rsp)
  0x0000000116b50d67: mov    %rbx,0x60(%rsp)
  0x0000000116b50d6c: mov    %rbp,0x50(%rsp)
  0x0000000116b50d71: mov    %rsi,0x48(%rsp)
  0x0000000116b50d76: mov    %rdi,0x40(%rsp)
  0x0000000116b50d7b: mov    %r8,0x38(%rsp)
  0x0000000116b50d80: mov    %r9,0x30(%rsp)
  0x0000000116b50d85: mov    %r10,0x28(%rsp)
  0x0000000116b50d8a: mov    %r11,0x20(%rsp)
  0x0000000116b50d8f: mov    %r12,0x18(%rsp)
  0x0000000116b50d94: mov    %r13,0x10(%rsp)
  0x0000000116b50d99: mov    %r14,0x8(%rsp)
  0x0000000116b50d9e: mov    %r15,(%rsp)
  0x0000000116b50da2: movabs $0x10cc2363b,%rdi
  0x0000000116b50dac: movabs $0x116b50d4c,%rsi
  0x0000000116b50db6: mov    %rsp,%rdx
  0x0000000116b50db9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50dbd: callq  0x000000010c7dd830
  0x0000000116b50dc2: hlt    
  0x0000000116b50dc3: push   %r10
  0x0000000116b50dc5: cmp    -0x9d0a51c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b50dcc: je     0x0000000116b50e49
  ;; call_VM_base: heap base corrupted?
  0x0000000116b50dd2: mov    %rsp,-0x28(%rsp)
  0x0000000116b50dd7: sub    $0x80,%rsp
  0x0000000116b50dde: mov    %rax,0x78(%rsp)
  0x0000000116b50de3: mov    %rcx,0x70(%rsp)
  0x0000000116b50de8: mov    %rdx,0x68(%rsp)
  0x0000000116b50ded: mov    %rbx,0x60(%rsp)
  0x0000000116b50df2: mov    %rbp,0x50(%rsp)
  0x0000000116b50df7: mov    %rsi,0x48(%rsp)
  0x0000000116b50dfc: mov    %rdi,0x40(%rsp)
  0x0000000116b50e01: mov    %r8,0x38(%rsp)
  0x0000000116b50e06: mov    %r9,0x30(%rsp)
  0x0000000116b50e0b: mov    %r10,0x28(%rsp)
  0x0000000116b50e10: mov    %r11,0x20(%rsp)
  0x0000000116b50e15: mov    %r12,0x18(%rsp)
  0x0000000116b50e1a: mov    %r13,0x10(%rsp)
  0x0000000116b50e1f: mov    %r14,0x8(%rsp)
  0x0000000116b50e24: mov    %r15,(%rsp)
  0x0000000116b50e28: movabs $0x10cc63f17,%rdi
  0x0000000116b50e32: movabs $0x116b50dd2,%rsi
  0x0000000116b50e3c: mov    %rsp,%rdx
  0x0000000116b50e3f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50e43: callq  0x000000010c7dd830
  0x0000000116b50e48: hlt    
  0x0000000116b50e49: pop    %r10
  0x0000000116b50e4b: mov    %r15,%rdi
  0x0000000116b50e4e: mov    %rbp,0x290(%r15)
  0x0000000116b50e55: mov    %rax,0x280(%r15)
  0x0000000116b50e5c: test   $0xf,%esp
  0x0000000116b50e62: je     0x0000000116b50e7a
  0x0000000116b50e68: sub    $0x8,%rsp
  0x0000000116b50e6c: callq  0x000000010c588f80
  0x0000000116b50e71: add    $0x8,%rsp
  0x0000000116b50e75: jmpq   0x0000000116b50e7f
  0x0000000116b50e7a: callq  0x000000010c588f80
  0x0000000116b50e7f: push   %rax
  0x0000000116b50e80: push   %rdi
  0x0000000116b50e81: push   %rsi
  0x0000000116b50e82: push   %rdx
  0x0000000116b50e83: push   %rcx
  0x0000000116b50e84: push   %r8
  0x0000000116b50e86: push   %r9
  0x0000000116b50e88: push   %r10
  0x0000000116b50e8a: mov    %rsp,%r10
  0x0000000116b50e8d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50e91: push   %r10
  0x0000000116b50e93: push   %r11
  0x0000000116b50e95: mov    $0x109,%edi
  0x0000000116b50e9a: movabs $0x7ff815049fd5,%r10
  0x0000000116b50ea4: callq  *%r10
  0x0000000116b50ea7: pop    %r11
  0x0000000116b50ea9: pop    %rsp
  0x0000000116b50eaa: pop    %r10
  0x0000000116b50eac: pop    %r9
  0x0000000116b50eae: pop    %r8
  0x0000000116b50eb0: pop    %rcx
  0x0000000116b50eb1: pop    %rdx
  0x0000000116b50eb2: pop    %rsi
  0x0000000116b50eb3: pop    %rdi
  0x0000000116b50eb4: cmp    %rax,%r15
  0x0000000116b50eb7: je     0x0000000116b50f34
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b50ebd: mov    %rsp,-0x28(%rsp)
  0x0000000116b50ec2: sub    $0x80,%rsp
  0x0000000116b50ec9: mov    %rax,0x78(%rsp)
  0x0000000116b50ece: mov    %rcx,0x70(%rsp)
  0x0000000116b50ed3: mov    %rdx,0x68(%rsp)
  0x0000000116b50ed8: mov    %rbx,0x60(%rsp)
  0x0000000116b50edd: mov    %rbp,0x50(%rsp)
  0x0000000116b50ee2: mov    %rsi,0x48(%rsp)
  0x0000000116b50ee7: mov    %rdi,0x40(%rsp)
  0x0000000116b50eec: mov    %r8,0x38(%rsp)
  0x0000000116b50ef1: mov    %r9,0x30(%rsp)
  0x0000000116b50ef6: mov    %r10,0x28(%rsp)
  0x0000000116b50efb: mov    %r11,0x20(%rsp)
  0x0000000116b50f00: mov    %r12,0x18(%rsp)
  0x0000000116b50f05: mov    %r13,0x10(%rsp)
  0x0000000116b50f0a: mov    %r14,0x8(%rsp)
  0x0000000116b50f0f: mov    %r15,(%rsp)
  0x0000000116b50f13: movabs $0x10cc6405e,%rdi
  0x0000000116b50f1d: movabs $0x116b50ebd,%rsi
  0x0000000116b50f27: mov    %rsp,%rdx
  0x0000000116b50f2a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b50f2e: callq  0x000000010c7dd830
  0x0000000116b50f33: hlt    
  0x0000000116b50f34: pop    %rax
  0x0000000116b50f35: movabs $0x0,%r10
  0x0000000116b50f3f: mov    %r10,0x280(%r15)
  0x0000000116b50f46: movabs $0x0,%r10
  0x0000000116b50f50: mov    %r10,0x290(%r15)
  0x0000000116b50f57: movabs $0x0,%r10
  0x0000000116b50f61: mov    %r10,0x288(%r15)
  0x0000000116b50f68: cmpq   $0x0,0x8(%r15)
  0x0000000116b50f70: je     0x0000000116b50f7b
  0x0000000116b50f76: jmpq   0x0000000116b30420
  0x0000000116b50f7b: mov    -0x38(%rbp),%r13
  0x0000000116b50f7f: mov    -0x30(%rbp),%r14
  0x0000000116b50f83: retq   
  0x0000000116b50f84: mov    -0x38(%rbp),%r13
  0x0000000116b50f88: mov    -0x40(%rbp),%rsi
  0x0000000116b50f8c: lea    -0x40(%rbp),%rbx
  0x0000000116b50f90: jmpq   0x0000000116b51248
  0x0000000116b50f95: mov    %r13,-0x38(%rbp)
  0x0000000116b50f99: lea    (%rsi),%rax
  0x0000000116b50f9c: mov    0x8(%rsi),%rcx
  0x0000000116b50fa0: movq   $0x0,0x8(%rsi)
  0x0000000116b50fa8: mov    (%rcx),%rdx
  0x0000000116b50fab: and    $0x7,%rdx
  0x0000000116b50faf: cmp    $0x5,%rdx
  0x0000000116b50fb3: je     0x0000000116b5122d
  0x0000000116b50fb9: mov    (%rax),%rdx
  0x0000000116b50fbc: test   %rdx,%rdx
  0x0000000116b50fbf: je     0x0000000116b5122d
  0x0000000116b50fc5: lock cmpxchg %rdx,(%rcx)
  0x0000000116b50fca: je     0x0000000116b5122d
  0x0000000116b50fd0: mov    %rcx,0x8(%rsi)
  0x0000000116b50fd4: callq  0x0000000116b50fde
  0x0000000116b50fd9: jmpq   0x0000000116b5122d
  0x0000000116b50fde: lea    0x8(%rsp),%rax
  0x0000000116b50fe3: mov    %r13,-0x38(%rbp)
  0x0000000116b50fe7: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b50fef: je     0x0000000116b5106c
  0x0000000116b50ff5: mov    %rsp,-0x28(%rsp)
  0x0000000116b50ffa: sub    $0x80,%rsp
  0x0000000116b51001: mov    %rax,0x78(%rsp)
  0x0000000116b51006: mov    %rcx,0x70(%rsp)
  0x0000000116b5100b: mov    %rdx,0x68(%rsp)
  0x0000000116b51010: mov    %rbx,0x60(%rsp)
  0x0000000116b51015: mov    %rbp,0x50(%rsp)
  0x0000000116b5101a: mov    %rsi,0x48(%rsp)
  0x0000000116b5101f: mov    %rdi,0x40(%rsp)
  0x0000000116b51024: mov    %r8,0x38(%rsp)
  0x0000000116b51029: mov    %r9,0x30(%rsp)
  0x0000000116b5102e: mov    %r10,0x28(%rsp)
  0x0000000116b51033: mov    %r11,0x20(%rsp)
  0x0000000116b51038: mov    %r12,0x18(%rsp)
  0x0000000116b5103d: mov    %r13,0x10(%rsp)
  0x0000000116b51042: mov    %r14,0x8(%rsp)
  0x0000000116b51047: mov    %r15,(%rsp)
  0x0000000116b5104b: movabs $0x10cc2363b,%rdi
  0x0000000116b51055: movabs $0x116b50ff5,%rsi
  0x0000000116b5105f: mov    %rsp,%rdx
  0x0000000116b51062: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51066: callq  0x000000010c7dd830
  0x0000000116b5106b: hlt    
  0x0000000116b5106c: push   %r10
  0x0000000116b5106e: cmp    -0x9d0a7c5(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b51075: je     0x0000000116b510f2
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5107b: mov    %rsp,-0x28(%rsp)
  0x0000000116b51080: sub    $0x80,%rsp
  0x0000000116b51087: mov    %rax,0x78(%rsp)
  0x0000000116b5108c: mov    %rcx,0x70(%rsp)
  0x0000000116b51091: mov    %rdx,0x68(%rsp)
  0x0000000116b51096: mov    %rbx,0x60(%rsp)
  0x0000000116b5109b: mov    %rbp,0x50(%rsp)
  0x0000000116b510a0: mov    %rsi,0x48(%rsp)
  0x0000000116b510a5: mov    %rdi,0x40(%rsp)
  0x0000000116b510aa: mov    %r8,0x38(%rsp)
  0x0000000116b510af: mov    %r9,0x30(%rsp)
  0x0000000116b510b4: mov    %r10,0x28(%rsp)
  0x0000000116b510b9: mov    %r11,0x20(%rsp)
  0x0000000116b510be: mov    %r12,0x18(%rsp)
  0x0000000116b510c3: mov    %r13,0x10(%rsp)
  0x0000000116b510c8: mov    %r14,0x8(%rsp)
  0x0000000116b510cd: mov    %r15,(%rsp)
  0x0000000116b510d1: movabs $0x10cc63f17,%rdi
  0x0000000116b510db: movabs $0x116b5107b,%rsi
  0x0000000116b510e5: mov    %rsp,%rdx
  0x0000000116b510e8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b510ec: callq  0x000000010c7dd830
  0x0000000116b510f1: hlt    
  0x0000000116b510f2: pop    %r10
  0x0000000116b510f4: mov    %r15,%rdi
  0x0000000116b510f7: mov    %rbp,0x290(%r15)
  0x0000000116b510fe: mov    %rax,0x280(%r15)
  0x0000000116b51105: test   $0xf,%esp
  0x0000000116b5110b: je     0x0000000116b51123
  0x0000000116b51111: sub    $0x8,%rsp
  0x0000000116b51115: callq  0x000000010c588f80
  0x0000000116b5111a: add    $0x8,%rsp
  0x0000000116b5111e: jmpq   0x0000000116b51128
  0x0000000116b51123: callq  0x000000010c588f80
  0x0000000116b51128: push   %rax
  0x0000000116b51129: push   %rdi
  0x0000000116b5112a: push   %rsi
  0x0000000116b5112b: push   %rdx
  0x0000000116b5112c: push   %rcx
  0x0000000116b5112d: push   %r8
  0x0000000116b5112f: push   %r9
  0x0000000116b51131: push   %r10
  0x0000000116b51133: mov    %rsp,%r10
  0x0000000116b51136: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5113a: push   %r10
  0x0000000116b5113c: push   %r11
  0x0000000116b5113e: mov    $0x109,%edi
  0x0000000116b51143: movabs $0x7ff815049fd5,%r10
  0x0000000116b5114d: callq  *%r10
  0x0000000116b51150: pop    %r11
  0x0000000116b51152: pop    %rsp
  0x0000000116b51153: pop    %r10
  0x0000000116b51155: pop    %r9
  0x0000000116b51157: pop    %r8
  0x0000000116b51159: pop    %rcx
  0x0000000116b5115a: pop    %rdx
  0x0000000116b5115b: pop    %rsi
  0x0000000116b5115c: pop    %rdi
  0x0000000116b5115d: cmp    %rax,%r15
  0x0000000116b51160: je     0x0000000116b511dd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b51166: mov    %rsp,-0x28(%rsp)
  0x0000000116b5116b: sub    $0x80,%rsp
  0x0000000116b51172: mov    %rax,0x78(%rsp)
  0x0000000116b51177: mov    %rcx,0x70(%rsp)
  0x0000000116b5117c: mov    %rdx,0x68(%rsp)
  0x0000000116b51181: mov    %rbx,0x60(%rsp)
  0x0000000116b51186: mov    %rbp,0x50(%rsp)
  0x0000000116b5118b: mov    %rsi,0x48(%rsp)
  0x0000000116b51190: mov    %rdi,0x40(%rsp)
  0x0000000116b51195: mov    %r8,0x38(%rsp)
  0x0000000116b5119a: mov    %r9,0x30(%rsp)
  0x0000000116b5119f: mov    %r10,0x28(%rsp)
  0x0000000116b511a4: mov    %r11,0x20(%rsp)
  0x0000000116b511a9: mov    %r12,0x18(%rsp)
  0x0000000116b511ae: mov    %r13,0x10(%rsp)
  0x0000000116b511b3: mov    %r14,0x8(%rsp)
  0x0000000116b511b8: mov    %r15,(%rsp)
  0x0000000116b511bc: movabs $0x10cc6405e,%rdi
  0x0000000116b511c6: movabs $0x116b51166,%rsi
  0x0000000116b511d0: mov    %rsp,%rdx
  0x0000000116b511d3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b511d7: callq  0x000000010c7dd830
  0x0000000116b511dc: hlt    
  0x0000000116b511dd: pop    %rax
  0x0000000116b511de: movabs $0x0,%r10
  0x0000000116b511e8: mov    %r10,0x280(%r15)
  0x0000000116b511ef: movabs $0x0,%r10
  0x0000000116b511f9: mov    %r10,0x290(%r15)
  0x0000000116b51200: movabs $0x0,%r10
  0x0000000116b5120a: mov    %r10,0x288(%r15)
  0x0000000116b51211: cmpq   $0x0,0x8(%r15)
  0x0000000116b51219: je     0x0000000116b51224
  0x0000000116b5121f: jmpq   0x0000000116b30420
  0x0000000116b51224: mov    -0x38(%rbp),%r13
  0x0000000116b51228: mov    -0x30(%rbp),%r14
  0x0000000116b5122c: retq   
  0x0000000116b5122d: mov    -0x38(%rbp),%r13
  0x0000000116b51231: jmpq   0x0000000116b50f88
  0x0000000116b51236: cmpq   $0x0,0x8(%rsi)
  0x0000000116b5123e: jne    0x0000000116b50f95
  0x0000000116b51244: add    $0x10,%rsi
  0x0000000116b51248: cmp    %rbx,%rsi
  0x0000000116b5124b: jne    0x0000000116b51236
  0x0000000116b5124d: cmpb   $0x0,-0x9d34052(%rip)        # 0x000000010ce1d202
  0x0000000116b51254: je     0x0000000116b51309
  0x0000000116b5125a: mov    -0x18(%rbp),%rsi
  0x0000000116b5125e: mov    %r15,%rdi
  0x0000000116b51261: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b51269: je     0x0000000116b512e6
  0x0000000116b5126f: mov    %rsp,-0x28(%rsp)
  0x0000000116b51274: sub    $0x80,%rsp
  0x0000000116b5127b: mov    %rax,0x78(%rsp)
  0x0000000116b51280: mov    %rcx,0x70(%rsp)
  0x0000000116b51285: mov    %rdx,0x68(%rsp)
  0x0000000116b5128a: mov    %rbx,0x60(%rsp)
  0x0000000116b5128f: mov    %rbp,0x50(%rsp)
  0x0000000116b51294: mov    %rsi,0x48(%rsp)
  0x0000000116b51299: mov    %rdi,0x40(%rsp)
  0x0000000116b5129e: mov    %r8,0x38(%rsp)
  0x0000000116b512a3: mov    %r9,0x30(%rsp)
  0x0000000116b512a8: mov    %r10,0x28(%rsp)
  0x0000000116b512ad: mov    %r11,0x20(%rsp)
  0x0000000116b512b2: mov    %r12,0x18(%rsp)
  0x0000000116b512b7: mov    %r13,0x10(%rsp)
  0x0000000116b512bc: mov    %r14,0x8(%rsp)
  0x0000000116b512c1: mov    %r15,(%rsp)
  0x0000000116b512c5: movabs $0x10cc2363b,%rdi
  0x0000000116b512cf: movabs $0x116b5126f,%rsi
  0x0000000116b512d9: mov    %rsp,%rdx
  0x0000000116b512dc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b512e0: callq  0x000000010c7dd830
  0x0000000116b512e5: hlt    
  0x0000000116b512e6: test   $0xf,%esp
  0x0000000116b512ec: je     0x0000000116b51304
  0x0000000116b512f2: sub    $0x8,%rsp
  0x0000000116b512f6: callq  0x000000010c9c9850
  0x0000000116b512fb: add    $0x8,%rsp
  0x0000000116b512ff: jmpq   0x0000000116b51309
  0x0000000116b51304: callq  0x000000010c9c9850
  0x0000000116b51309: mov    -0x8(%rbp),%rbx
  0x0000000116b5130d: leaveq 
  0x0000000116b5130e: pop    %rdx
  0x0000000116b5130f: mov    %rbx,%rsp
  0x0000000116b51312: movl   $0x4,0x37c(%r15)
  0x0000000116b5131d: jmpq   *%rdx
  0x0000000116b5131f: mov    0x33d(%r15),%dl
  0x0000000116b51326: movb   $0x0,0x33d(%r15)
  0x0000000116b5132e: mov    -0x18(%rbp),%rbx
  0x0000000116b51332: mov    0x28(%rbx),%ecx
  0x0000000116b51335: test   $0x20,%ecx
  0x0000000116b5133b: je     0x0000000116b515fc
  0x0000000116b51341: test   $0xff,%dl
  0x0000000116b51344: jne    0x0000000116b518c1
  0x0000000116b5134a: lea    -0x50(%rbp),%rsi
  0x0000000116b5134e: mov    0x8(%rsi),%rax
  0x0000000116b51352: test   %rax,%rax
  0x0000000116b51355: jne    0x0000000116b51360
  0x0000000116b5135b: jmpq   0x0000000116b515fc
  0x0000000116b51360: mov    %r13,-0x38(%rbp)
  0x0000000116b51364: lea    (%rsi),%rax
  0x0000000116b51367: mov    0x8(%rsi),%rcx
  0x0000000116b5136b: movq   $0x0,0x8(%rsi)
  0x0000000116b51373: mov    (%rcx),%rdx
  0x0000000116b51376: and    $0x7,%rdx
  0x0000000116b5137a: cmp    $0x5,%rdx
  0x0000000116b5137e: je     0x0000000116b515f8
  0x0000000116b51384: mov    (%rax),%rdx
  0x0000000116b51387: test   %rdx,%rdx
  0x0000000116b5138a: je     0x0000000116b515f8
  0x0000000116b51390: lock cmpxchg %rdx,(%rcx)
  0x0000000116b51395: je     0x0000000116b515f8
  0x0000000116b5139b: mov    %rcx,0x8(%rsi)
  0x0000000116b5139f: callq  0x0000000116b513a9
  0x0000000116b513a4: jmpq   0x0000000116b515f8
  0x0000000116b513a9: lea    0x8(%rsp),%rax
  0x0000000116b513ae: mov    %r13,-0x38(%rbp)
  0x0000000116b513b2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b513ba: je     0x0000000116b51437
  0x0000000116b513c0: mov    %rsp,-0x28(%rsp)
  0x0000000116b513c5: sub    $0x80,%rsp
  0x0000000116b513cc: mov    %rax,0x78(%rsp)
  0x0000000116b513d1: mov    %rcx,0x70(%rsp)
  0x0000000116b513d6: mov    %rdx,0x68(%rsp)
  0x0000000116b513db: mov    %rbx,0x60(%rsp)
  0x0000000116b513e0: mov    %rbp,0x50(%rsp)
  0x0000000116b513e5: mov    %rsi,0x48(%rsp)
  0x0000000116b513ea: mov    %rdi,0x40(%rsp)
  0x0000000116b513ef: mov    %r8,0x38(%rsp)
  0x0000000116b513f4: mov    %r9,0x30(%rsp)
  0x0000000116b513f9: mov    %r10,0x28(%rsp)
  0x0000000116b513fe: mov    %r11,0x20(%rsp)
  0x0000000116b51403: mov    %r12,0x18(%rsp)
  0x0000000116b51408: mov    %r13,0x10(%rsp)
  0x0000000116b5140d: mov    %r14,0x8(%rsp)
  0x0000000116b51412: mov    %r15,(%rsp)
  0x0000000116b51416: movabs $0x10cc2363b,%rdi
  0x0000000116b51420: movabs $0x116b513c0,%rsi
  0x0000000116b5142a: mov    %rsp,%rdx
  0x0000000116b5142d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51431: callq  0x000000010c7dd830
  0x0000000116b51436: hlt    
  0x0000000116b51437: push   %r10
  0x0000000116b51439: cmp    -0x9d0ab90(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b51440: je     0x0000000116b514bd
  ;; call_VM_base: heap base corrupted?
  0x0000000116b51446: mov    %rsp,-0x28(%rsp)
  0x0000000116b5144b: sub    $0x80,%rsp
  0x0000000116b51452: mov    %rax,0x78(%rsp)
  0x0000000116b51457: mov    %rcx,0x70(%rsp)
  0x0000000116b5145c: mov    %rdx,0x68(%rsp)
  0x0000000116b51461: mov    %rbx,0x60(%rsp)
  0x0000000116b51466: mov    %rbp,0x50(%rsp)
  0x0000000116b5146b: mov    %rsi,0x48(%rsp)
  0x0000000116b51470: mov    %rdi,0x40(%rsp)
  0x0000000116b51475: mov    %r8,0x38(%rsp)
  0x0000000116b5147a: mov    %r9,0x30(%rsp)
  0x0000000116b5147f: mov    %r10,0x28(%rsp)
  0x0000000116b51484: mov    %r11,0x20(%rsp)
  0x0000000116b51489: mov    %r12,0x18(%rsp)
  0x0000000116b5148e: mov    %r13,0x10(%rsp)
  0x0000000116b51493: mov    %r14,0x8(%rsp)
  0x0000000116b51498: mov    %r15,(%rsp)
  0x0000000116b5149c: movabs $0x10cc63f17,%rdi
  0x0000000116b514a6: movabs $0x116b51446,%rsi
  0x0000000116b514b0: mov    %rsp,%rdx
  0x0000000116b514b3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b514b7: callq  0x000000010c7dd830
  0x0000000116b514bc: hlt    
  0x0000000116b514bd: pop    %r10
  0x0000000116b514bf: mov    %r15,%rdi
  0x0000000116b514c2: mov    %rbp,0x290(%r15)
  0x0000000116b514c9: mov    %rax,0x280(%r15)
  0x0000000116b514d0: test   $0xf,%esp
  0x0000000116b514d6: je     0x0000000116b514ee
  0x0000000116b514dc: sub    $0x8,%rsp
  0x0000000116b514e0: callq  0x000000010c588f80
  0x0000000116b514e5: add    $0x8,%rsp
  0x0000000116b514e9: jmpq   0x0000000116b514f3
  0x0000000116b514ee: callq  0x000000010c588f80
  0x0000000116b514f3: push   %rax
  0x0000000116b514f4: push   %rdi
  0x0000000116b514f5: push   %rsi
  0x0000000116b514f6: push   %rdx
  0x0000000116b514f7: push   %rcx
  0x0000000116b514f8: push   %r8
  0x0000000116b514fa: push   %r9
  0x0000000116b514fc: push   %r10
  0x0000000116b514fe: mov    %rsp,%r10
  0x0000000116b51501: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51505: push   %r10
  0x0000000116b51507: push   %r11
  0x0000000116b51509: mov    $0x109,%edi
  0x0000000116b5150e: movabs $0x7ff815049fd5,%r10
  0x0000000116b51518: callq  *%r10
  0x0000000116b5151b: pop    %r11
  0x0000000116b5151d: pop    %rsp
  0x0000000116b5151e: pop    %r10
  0x0000000116b51520: pop    %r9
  0x0000000116b51522: pop    %r8
  0x0000000116b51524: pop    %rcx
  0x0000000116b51525: pop    %rdx
  0x0000000116b51526: pop    %rsi
  0x0000000116b51527: pop    %rdi
  0x0000000116b51528: cmp    %rax,%r15
  0x0000000116b5152b: je     0x0000000116b515a8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b51531: mov    %rsp,-0x28(%rsp)
  0x0000000116b51536: sub    $0x80,%rsp
  0x0000000116b5153d: mov    %rax,0x78(%rsp)
  0x0000000116b51542: mov    %rcx,0x70(%rsp)
  0x0000000116b51547: mov    %rdx,0x68(%rsp)
  0x0000000116b5154c: mov    %rbx,0x60(%rsp)
  0x0000000116b51551: mov    %rbp,0x50(%rsp)
  0x0000000116b51556: mov    %rsi,0x48(%rsp)
  0x0000000116b5155b: mov    %rdi,0x40(%rsp)
  0x0000000116b51560: mov    %r8,0x38(%rsp)
  0x0000000116b51565: mov    %r9,0x30(%rsp)
  0x0000000116b5156a: mov    %r10,0x28(%rsp)
  0x0000000116b5156f: mov    %r11,0x20(%rsp)
  0x0000000116b51574: mov    %r12,0x18(%rsp)
  0x0000000116b51579: mov    %r13,0x10(%rsp)
  0x0000000116b5157e: mov    %r14,0x8(%rsp)
  0x0000000116b51583: mov    %r15,(%rsp)
  0x0000000116b51587: movabs $0x10cc6405e,%rdi
  0x0000000116b51591: movabs $0x116b51531,%rsi
  0x0000000116b5159b: mov    %rsp,%rdx
  0x0000000116b5159e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b515a2: callq  0x000000010c7dd830
  0x0000000116b515a7: hlt    
  0x0000000116b515a8: pop    %rax
  0x0000000116b515a9: movabs $0x0,%r10
  0x0000000116b515b3: mov    %r10,0x280(%r15)
  0x0000000116b515ba: movabs $0x0,%r10
  0x0000000116b515c4: mov    %r10,0x290(%r15)
  0x0000000116b515cb: movabs $0x0,%r10
  0x0000000116b515d5: mov    %r10,0x288(%r15)
  0x0000000116b515dc: cmpq   $0x0,0x8(%r15)
  0x0000000116b515e4: je     0x0000000116b515ef
  0x0000000116b515ea: jmpq   0x0000000116b30420
  0x0000000116b515ef: mov    -0x38(%rbp),%r13
  0x0000000116b515f3: mov    -0x30(%rbp),%r14
  0x0000000116b515f7: retq   
  0x0000000116b515f8: mov    -0x38(%rbp),%r13
  0x0000000116b515fc: mov    -0x40(%rbp),%rsi
  0x0000000116b51600: lea    -0x40(%rbp),%rbx
  0x0000000116b51604: jmpq   0x0000000116b518bc
  0x0000000116b51609: mov    %r13,-0x38(%rbp)
  0x0000000116b5160d: lea    (%rsi),%rax
  0x0000000116b51610: mov    0x8(%rsi),%rcx
  0x0000000116b51614: movq   $0x0,0x8(%rsi)
  0x0000000116b5161c: mov    (%rcx),%rdx
  0x0000000116b5161f: and    $0x7,%rdx
  0x0000000116b51623: cmp    $0x5,%rdx
  0x0000000116b51627: je     0x0000000116b518a1
  0x0000000116b5162d: mov    (%rax),%rdx
  0x0000000116b51630: test   %rdx,%rdx
  0x0000000116b51633: je     0x0000000116b518a1
  0x0000000116b51639: lock cmpxchg %rdx,(%rcx)
  0x0000000116b5163e: je     0x0000000116b518a1
  0x0000000116b51644: mov    %rcx,0x8(%rsi)
  0x0000000116b51648: callq  0x0000000116b51652
  0x0000000116b5164d: jmpq   0x0000000116b518a1
  0x0000000116b51652: lea    0x8(%rsp),%rax
  0x0000000116b51657: mov    %r13,-0x38(%rbp)
  0x0000000116b5165b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b51663: je     0x0000000116b516e0
  0x0000000116b51669: mov    %rsp,-0x28(%rsp)
  0x0000000116b5166e: sub    $0x80,%rsp
  0x0000000116b51675: mov    %rax,0x78(%rsp)
  0x0000000116b5167a: mov    %rcx,0x70(%rsp)
  0x0000000116b5167f: mov    %rdx,0x68(%rsp)
  0x0000000116b51684: mov    %rbx,0x60(%rsp)
  0x0000000116b51689: mov    %rbp,0x50(%rsp)
  0x0000000116b5168e: mov    %rsi,0x48(%rsp)
  0x0000000116b51693: mov    %rdi,0x40(%rsp)
  0x0000000116b51698: mov    %r8,0x38(%rsp)
  0x0000000116b5169d: mov    %r9,0x30(%rsp)
  0x0000000116b516a2: mov    %r10,0x28(%rsp)
  0x0000000116b516a7: mov    %r11,0x20(%rsp)
  0x0000000116b516ac: mov    %r12,0x18(%rsp)
  0x0000000116b516b1: mov    %r13,0x10(%rsp)
  0x0000000116b516b6: mov    %r14,0x8(%rsp)
  0x0000000116b516bb: mov    %r15,(%rsp)
  0x0000000116b516bf: movabs $0x10cc2363b,%rdi
  0x0000000116b516c9: movabs $0x116b51669,%rsi
  0x0000000116b516d3: mov    %rsp,%rdx
  0x0000000116b516d6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b516da: callq  0x000000010c7dd830
  0x0000000116b516df: hlt    
  0x0000000116b516e0: push   %r10
  0x0000000116b516e2: cmp    -0x9d0ae39(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b516e9: je     0x0000000116b51766
  ;; call_VM_base: heap base corrupted?
  0x0000000116b516ef: mov    %rsp,-0x28(%rsp)
  0x0000000116b516f4: sub    $0x80,%rsp
  0x0000000116b516fb: mov    %rax,0x78(%rsp)
  0x0000000116b51700: mov    %rcx,0x70(%rsp)
  0x0000000116b51705: mov    %rdx,0x68(%rsp)
  0x0000000116b5170a: mov    %rbx,0x60(%rsp)
  0x0000000116b5170f: mov    %rbp,0x50(%rsp)
  0x0000000116b51714: mov    %rsi,0x48(%rsp)
  0x0000000116b51719: mov    %rdi,0x40(%rsp)
  0x0000000116b5171e: mov    %r8,0x38(%rsp)
  0x0000000116b51723: mov    %r9,0x30(%rsp)
  0x0000000116b51728: mov    %r10,0x28(%rsp)
  0x0000000116b5172d: mov    %r11,0x20(%rsp)
  0x0000000116b51732: mov    %r12,0x18(%rsp)
  0x0000000116b51737: mov    %r13,0x10(%rsp)
  0x0000000116b5173c: mov    %r14,0x8(%rsp)
  0x0000000116b51741: mov    %r15,(%rsp)
  0x0000000116b51745: movabs $0x10cc63f17,%rdi
  0x0000000116b5174f: movabs $0x116b516ef,%rsi
  0x0000000116b51759: mov    %rsp,%rdx
  0x0000000116b5175c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51760: callq  0x000000010c7dd830
  0x0000000116b51765: hlt    
  0x0000000116b51766: pop    %r10
  0x0000000116b51768: mov    %r15,%rdi
  0x0000000116b5176b: mov    %rbp,0x290(%r15)
  0x0000000116b51772: mov    %rax,0x280(%r15)
  0x0000000116b51779: test   $0xf,%esp
  0x0000000116b5177f: je     0x0000000116b51797
  0x0000000116b51785: sub    $0x8,%rsp
  0x0000000116b51789: callq  0x000000010c588f80
  0x0000000116b5178e: add    $0x8,%rsp
  0x0000000116b51792: jmpq   0x0000000116b5179c
  0x0000000116b51797: callq  0x000000010c588f80
  0x0000000116b5179c: push   %rax
  0x0000000116b5179d: push   %rdi
  0x0000000116b5179e: push   %rsi
  0x0000000116b5179f: push   %rdx
  0x0000000116b517a0: push   %rcx
  0x0000000116b517a1: push   %r8
  0x0000000116b517a3: push   %r9
  0x0000000116b517a5: push   %r10
  0x0000000116b517a7: mov    %rsp,%r10
  0x0000000116b517aa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b517ae: push   %r10
  0x0000000116b517b0: push   %r11
  0x0000000116b517b2: mov    $0x109,%edi
  0x0000000116b517b7: movabs $0x7ff815049fd5,%r10
  0x0000000116b517c1: callq  *%r10
  0x0000000116b517c4: pop    %r11
  0x0000000116b517c6: pop    %rsp
  0x0000000116b517c7: pop    %r10
  0x0000000116b517c9: pop    %r9
  0x0000000116b517cb: pop    %r8
  0x0000000116b517cd: pop    %rcx
  0x0000000116b517ce: pop    %rdx
  0x0000000116b517cf: pop    %rsi
  0x0000000116b517d0: pop    %rdi
  0x0000000116b517d1: cmp    %rax,%r15
  0x0000000116b517d4: je     0x0000000116b51851
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b517da: mov    %rsp,-0x28(%rsp)
  0x0000000116b517df: sub    $0x80,%rsp
  0x0000000116b517e6: mov    %rax,0x78(%rsp)
  0x0000000116b517eb: mov    %rcx,0x70(%rsp)
  0x0000000116b517f0: mov    %rdx,0x68(%rsp)
  0x0000000116b517f5: mov    %rbx,0x60(%rsp)
  0x0000000116b517fa: mov    %rbp,0x50(%rsp)
  0x0000000116b517ff: mov    %rsi,0x48(%rsp)
  0x0000000116b51804: mov    %rdi,0x40(%rsp)
  0x0000000116b51809: mov    %r8,0x38(%rsp)
  0x0000000116b5180e: mov    %r9,0x30(%rsp)
  0x0000000116b51813: mov    %r10,0x28(%rsp)
  0x0000000116b51818: mov    %r11,0x20(%rsp)
  0x0000000116b5181d: mov    %r12,0x18(%rsp)
  0x0000000116b51822: mov    %r13,0x10(%rsp)
  0x0000000116b51827: mov    %r14,0x8(%rsp)
  0x0000000116b5182c: mov    %r15,(%rsp)
  0x0000000116b51830: movabs $0x10cc6405e,%rdi
  0x0000000116b5183a: movabs $0x116b517da,%rsi
  0x0000000116b51844: mov    %rsp,%rdx
  0x0000000116b51847: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5184b: callq  0x000000010c7dd830
  0x0000000116b51850: hlt    
  0x0000000116b51851: pop    %rax
  0x0000000116b51852: movabs $0x0,%r10
  0x0000000116b5185c: mov    %r10,0x280(%r15)
  0x0000000116b51863: movabs $0x0,%r10
  0x0000000116b5186d: mov    %r10,0x290(%r15)
  0x0000000116b51874: movabs $0x0,%r10
  0x0000000116b5187e: mov    %r10,0x288(%r15)
  0x0000000116b51885: cmpq   $0x0,0x8(%r15)
  0x0000000116b5188d: je     0x0000000116b51898
  0x0000000116b51893: jmpq   0x0000000116b30420
  0x0000000116b51898: mov    -0x38(%rbp),%r13
  0x0000000116b5189c: mov    -0x30(%rbp),%r14
  0x0000000116b518a0: retq   
  0x0000000116b518a1: mov    -0x38(%rbp),%r13
  0x0000000116b518a5: jmpq   0x0000000116b515fc
  0x0000000116b518aa: cmpq   $0x0,0x8(%rsi)
  0x0000000116b518b2: jne    0x0000000116b51609
  0x0000000116b518b8: add    $0x10,%rsi
  0x0000000116b518bc: cmp    %rbx,%rsi
  0x0000000116b518bf: jne    0x0000000116b518aa
  0x0000000116b518c1: cmpb   $0x0,-0x9d346c6(%rip)        # 0x000000010ce1d202
  0x0000000116b518c8: je     0x0000000116b5197d
  0x0000000116b518ce: mov    -0x18(%rbp),%rsi
  0x0000000116b518d2: mov    %r15,%rdi
  0x0000000116b518d5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b518dd: je     0x0000000116b5195a
  0x0000000116b518e3: mov    %rsp,-0x28(%rsp)
  0x0000000116b518e8: sub    $0x80,%rsp
  0x0000000116b518ef: mov    %rax,0x78(%rsp)
  0x0000000116b518f4: mov    %rcx,0x70(%rsp)
  0x0000000116b518f9: mov    %rdx,0x68(%rsp)
  0x0000000116b518fe: mov    %rbx,0x60(%rsp)
  0x0000000116b51903: mov    %rbp,0x50(%rsp)
  0x0000000116b51908: mov    %rsi,0x48(%rsp)
  0x0000000116b5190d: mov    %rdi,0x40(%rsp)
  0x0000000116b51912: mov    %r8,0x38(%rsp)
  0x0000000116b51917: mov    %r9,0x30(%rsp)
  0x0000000116b5191c: mov    %r10,0x28(%rsp)
  0x0000000116b51921: mov    %r11,0x20(%rsp)
  0x0000000116b51926: mov    %r12,0x18(%rsp)
  0x0000000116b5192b: mov    %r13,0x10(%rsp)
  0x0000000116b51930: mov    %r14,0x8(%rsp)
  0x0000000116b51935: mov    %r15,(%rsp)
  0x0000000116b51939: movabs $0x10cc2363b,%rdi
  0x0000000116b51943: movabs $0x116b518e3,%rsi
  0x0000000116b5194d: mov    %rsp,%rdx
  0x0000000116b51950: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51954: callq  0x000000010c7dd830
  0x0000000116b51959: hlt    
  0x0000000116b5195a: test   $0xf,%esp
  0x0000000116b51960: je     0x0000000116b51978
  0x0000000116b51966: sub    $0x8,%rsp
  0x0000000116b5196a: callq  0x000000010c9c9850
  0x0000000116b5196f: add    $0x8,%rsp
  0x0000000116b51973: jmpq   0x0000000116b5197d
  0x0000000116b51978: callq  0x000000010c9c9850
  0x0000000116b5197d: mov    -0x8(%rbp),%rbx
  0x0000000116b51981: leaveq 
  0x0000000116b51982: pop    %rdx
  0x0000000116b51983: mov    %rbx,%rsp
  0x0000000116b51986: mov    %rsp,%rsi
  0x0000000116b51989: mov    -0x10(%rbp),%rdx
  0x0000000116b5198d: mov    %rbp,0x290(%r15)
  0x0000000116b51994: movabs $0x116b5198d,%r10
  0x0000000116b5199e: mov    %r10,0x288(%r15)
  0x0000000116b519a5: mov    %rsp,0x280(%r15)
  0x0000000116b519ac: mov    %r15,%rdi
  0x0000000116b519af: test   $0xf,%esp
  0x0000000116b519b5: je     0x0000000116b519cd
  0x0000000116b519bb: sub    $0x8,%rsp
  0x0000000116b519bf: callq  0x000000010c58e420
  0x0000000116b519c4: add    $0x8,%rsp
  0x0000000116b519c8: jmpq   0x0000000116b519d2
  0x0000000116b519cd: callq  0x000000010c58e420
  0x0000000116b519d2: movabs $0x0,%r10
  0x0000000116b519dc: mov    %r10,0x280(%r15)
  0x0000000116b519e3: movabs $0x0,%r10
  0x0000000116b519ed: mov    %r10,0x290(%r15)
  0x0000000116b519f4: movabs $0x0,%r10
  0x0000000116b519fe: mov    %r10,0x288(%r15)
  0x0000000116b51a05: mov    -0x10(%rbp),%rsp
  0x0000000116b51a09: movq   $0x0,-0x10(%rbp)
  0x0000000116b51a11: mov    -0x38(%rbp),%r13
  0x0000000116b51a15: mov    -0x30(%rbp),%r14
  0x0000000116b51a19: movl   $0x0,0x37c(%r15)
  0x0000000116b51a24: cmpb   $0xb8,0x0(%r13)
  0x0000000116b51a29: jne    0x0000000116b51cb9
  0x0000000116b51a2f: mov    -0x18(%rbp),%rdx
  0x0000000116b51a33: mov    (%r14),%rax
  0x0000000116b51a36: callq  0x0000000116b51a40
  0x0000000116b51a3b: jmpq   0x0000000116b51cad
  0x0000000116b51a40: mov    %r13,%rcx
  0x0000000116b51a43: mov    %rax,%rsi
  0x0000000116b51a46: lea    0x8(%rsp),%rax
  0x0000000116b51a4b: mov    %r13,-0x38(%rbp)
  0x0000000116b51a4f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b51a57: je     0x0000000116b51ad4
  0x0000000116b51a5d: mov    %rsp,-0x28(%rsp)
  0x0000000116b51a62: sub    $0x80,%rsp
  0x0000000116b51a69: mov    %rax,0x78(%rsp)
  0x0000000116b51a6e: mov    %rcx,0x70(%rsp)
  0x0000000116b51a73: mov    %rdx,0x68(%rsp)
  0x0000000116b51a78: mov    %rbx,0x60(%rsp)
  0x0000000116b51a7d: mov    %rbp,0x50(%rsp)
  0x0000000116b51a82: mov    %rsi,0x48(%rsp)
  0x0000000116b51a87: mov    %rdi,0x40(%rsp)
  0x0000000116b51a8c: mov    %r8,0x38(%rsp)
  0x0000000116b51a91: mov    %r9,0x30(%rsp)
  0x0000000116b51a96: mov    %r10,0x28(%rsp)
  0x0000000116b51a9b: mov    %r11,0x20(%rsp)
  0x0000000116b51aa0: mov    %r12,0x18(%rsp)
  0x0000000116b51aa5: mov    %r13,0x10(%rsp)
  0x0000000116b51aaa: mov    %r14,0x8(%rsp)
  0x0000000116b51aaf: mov    %r15,(%rsp)
  0x0000000116b51ab3: movabs $0x10cc2363b,%rdi
  0x0000000116b51abd: movabs $0x116b51a5d,%rsi
  0x0000000116b51ac7: mov    %rsp,%rdx
  0x0000000116b51aca: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51ace: callq  0x000000010c7dd830
  0x0000000116b51ad3: hlt    
  0x0000000116b51ad4: push   %r10
  0x0000000116b51ad6: cmp    -0x9d0b22d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b51add: je     0x0000000116b51b5a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b51ae3: mov    %rsp,-0x28(%rsp)
  0x0000000116b51ae8: sub    $0x80,%rsp
  0x0000000116b51aef: mov    %rax,0x78(%rsp)
  0x0000000116b51af4: mov    %rcx,0x70(%rsp)
  0x0000000116b51af9: mov    %rdx,0x68(%rsp)
  0x0000000116b51afe: mov    %rbx,0x60(%rsp)
  0x0000000116b51b03: mov    %rbp,0x50(%rsp)
  0x0000000116b51b08: mov    %rsi,0x48(%rsp)
  0x0000000116b51b0d: mov    %rdi,0x40(%rsp)
  0x0000000116b51b12: mov    %r8,0x38(%rsp)
  0x0000000116b51b17: mov    %r9,0x30(%rsp)
  0x0000000116b51b1c: mov    %r10,0x28(%rsp)
  0x0000000116b51b21: mov    %r11,0x20(%rsp)
  0x0000000116b51b26: mov    %r12,0x18(%rsp)
  0x0000000116b51b2b: mov    %r13,0x10(%rsp)
  0x0000000116b51b30: mov    %r14,0x8(%rsp)
  0x0000000116b51b35: mov    %r15,(%rsp)
  0x0000000116b51b39: movabs $0x10cc63f17,%rdi
  0x0000000116b51b43: movabs $0x116b51ae3,%rsi
  0x0000000116b51b4d: mov    %rsp,%rdx
  0x0000000116b51b50: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51b54: callq  0x000000010c7dd830
  0x0000000116b51b59: hlt    
  0x0000000116b51b5a: pop    %r10
  0x0000000116b51b5c: mov    %r15,%rdi
  0x0000000116b51b5f: mov    %rbp,0x290(%r15)
  0x0000000116b51b66: mov    %rax,0x280(%r15)
  0x0000000116b51b6d: test   $0xf,%esp
  0x0000000116b51b73: je     0x0000000116b51b8b
  0x0000000116b51b79: sub    $0x8,%rsp
  0x0000000116b51b7d: callq  0x000000010c58e730
  0x0000000116b51b82: add    $0x8,%rsp
  0x0000000116b51b86: jmpq   0x0000000116b51b90
  0x0000000116b51b8b: callq  0x000000010c58e730
  0x0000000116b51b90: push   %rax
  0x0000000116b51b91: push   %rdi
  0x0000000116b51b92: push   %rsi
  0x0000000116b51b93: push   %rdx
  0x0000000116b51b94: push   %rcx
  0x0000000116b51b95: push   %r8
  0x0000000116b51b97: push   %r9
  0x0000000116b51b99: push   %r10
  0x0000000116b51b9b: mov    %rsp,%r10
  0x0000000116b51b9e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51ba2: push   %r10
  0x0000000116b51ba4: push   %r11
  0x0000000116b51ba6: mov    $0x109,%edi
  0x0000000116b51bab: movabs $0x7ff815049fd5,%r10
  0x0000000116b51bb5: callq  *%r10
  0x0000000116b51bb8: pop    %r11
  0x0000000116b51bba: pop    %rsp
  0x0000000116b51bbb: pop    %r10
  0x0000000116b51bbd: pop    %r9
  0x0000000116b51bbf: pop    %r8
  0x0000000116b51bc1: pop    %rcx
  0x0000000116b51bc2: pop    %rdx
  0x0000000116b51bc3: pop    %rsi
  0x0000000116b51bc4: pop    %rdi
  0x0000000116b51bc5: cmp    %rax,%r15
  0x0000000116b51bc8: je     0x0000000116b51c45
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b51bce: mov    %rsp,-0x28(%rsp)
  0x0000000116b51bd3: sub    $0x80,%rsp
  0x0000000116b51bda: mov    %rax,0x78(%rsp)
  0x0000000116b51bdf: mov    %rcx,0x70(%rsp)
  0x0000000116b51be4: mov    %rdx,0x68(%rsp)
  0x0000000116b51be9: mov    %rbx,0x60(%rsp)
  0x0000000116b51bee: mov    %rbp,0x50(%rsp)
  0x0000000116b51bf3: mov    %rsi,0x48(%rsp)
  0x0000000116b51bf8: mov    %rdi,0x40(%rsp)
  0x0000000116b51bfd: mov    %r8,0x38(%rsp)
  0x0000000116b51c02: mov    %r9,0x30(%rsp)
  0x0000000116b51c07: mov    %r10,0x28(%rsp)
  0x0000000116b51c0c: mov    %r11,0x20(%rsp)
  0x0000000116b51c11: mov    %r12,0x18(%rsp)
  0x0000000116b51c16: mov    %r13,0x10(%rsp)
  0x0000000116b51c1b: mov    %r14,0x8(%rsp)
  0x0000000116b51c20: mov    %r15,(%rsp)
  0x0000000116b51c24: movabs $0x10cc6405e,%rdi
  0x0000000116b51c2e: movabs $0x116b51bce,%rsi
  0x0000000116b51c38: mov    %rsp,%rdx
  0x0000000116b51c3b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51c3f: callq  0x000000010c7dd830
  0x0000000116b51c44: hlt    
  0x0000000116b51c45: pop    %rax
  0x0000000116b51c46: movabs $0x0,%r10
  0x0000000116b51c50: mov    %r10,0x280(%r15)
  0x0000000116b51c57: movabs $0x0,%r10
  0x0000000116b51c61: mov    %r10,0x290(%r15)
  0x0000000116b51c68: movabs $0x0,%r10
  0x0000000116b51c72: mov    %r10,0x288(%r15)
  0x0000000116b51c79: cmpq   $0x0,0x8(%r15)
  0x0000000116b51c81: je     0x0000000116b51c8c
  0x0000000116b51c87: jmpq   0x0000000116b30420
  0x0000000116b51c8c: mov    0x2e0(%r15),%rax
  0x0000000116b51c93: movabs $0x0,%r10
  0x0000000116b51c9d: mov    %r10,0x2e0(%r15)
  0x0000000116b51ca4: mov    -0x38(%rbp),%r13
  0x0000000116b51ca8: mov    -0x30(%rbp),%r14
  0x0000000116b51cac: retq   
  0x0000000116b51cad: test   %rax,%rax
  0x0000000116b51cb0: je     0x0000000116b51cb9
  0x0000000116b51cb6: mov    %rax,(%rbx)
  0x0000000116b51cb9: movzbl 0x0(%r13),%ebx
  0x0000000116b51cbe: movabs $0x10ce3b680,%r10
  0x0000000116b51cc8: jmpq   *(%r10,%rbx,8)
  0x0000000116b51ccc: pop    %rax
  0x0000000116b51ccd: mov    %rax,0x2e0(%r15)
  0x0000000116b51cd4: mov    0x33d(%r15),%dl
  0x0000000116b51cdb: movb   $0x0,0x33d(%r15)
  0x0000000116b51ce3: mov    -0x18(%rbp),%rbx
  0x0000000116b51ce7: mov    0x28(%rbx),%ecx
  0x0000000116b51cea: test   $0x20,%ecx
  0x0000000116b51cf0: je     0x0000000116b5220a
  0x0000000116b51cf6: test   $0xff,%dl
  0x0000000116b51cf9: jne    0x0000000116b52728
  0x0000000116b51cff: lea    -0x50(%rbp),%rsi
  0x0000000116b51d03: mov    0x8(%rsi),%rax
  0x0000000116b51d07: test   %rax,%rax
  0x0000000116b51d0a: jne    0x0000000116b51f6e
  0x0000000116b51d10: callq  0x0000000116b51d1a
  0x0000000116b51d15: jmpq   0x0000000116b51f69
  0x0000000116b51d1a: lea    0x8(%rsp),%rax
  0x0000000116b51d1f: mov    %r13,-0x38(%rbp)
  0x0000000116b51d23: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b51d2b: je     0x0000000116b51da8
  0x0000000116b51d31: mov    %rsp,-0x28(%rsp)
  0x0000000116b51d36: sub    $0x80,%rsp
  0x0000000116b51d3d: mov    %rax,0x78(%rsp)
  0x0000000116b51d42: mov    %rcx,0x70(%rsp)
  0x0000000116b51d47: mov    %rdx,0x68(%rsp)
  0x0000000116b51d4c: mov    %rbx,0x60(%rsp)
  0x0000000116b51d51: mov    %rbp,0x50(%rsp)
  0x0000000116b51d56: mov    %rsi,0x48(%rsp)
  0x0000000116b51d5b: mov    %rdi,0x40(%rsp)
  0x0000000116b51d60: mov    %r8,0x38(%rsp)
  0x0000000116b51d65: mov    %r9,0x30(%rsp)
  0x0000000116b51d6a: mov    %r10,0x28(%rsp)
  0x0000000116b51d6f: mov    %r11,0x20(%rsp)
  0x0000000116b51d74: mov    %r12,0x18(%rsp)
  0x0000000116b51d79: mov    %r13,0x10(%rsp)
  0x0000000116b51d7e: mov    %r14,0x8(%rsp)
  0x0000000116b51d83: mov    %r15,(%rsp)
  0x0000000116b51d87: movabs $0x10cc2363b,%rdi
  0x0000000116b51d91: movabs $0x116b51d31,%rsi
  0x0000000116b51d9b: mov    %rsp,%rdx
  0x0000000116b51d9e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51da2: callq  0x000000010c7dd830
  0x0000000116b51da7: hlt    
  0x0000000116b51da8: push   %r10
  0x0000000116b51daa: cmp    -0x9d0b501(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b51db1: je     0x0000000116b51e2e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b51db7: mov    %rsp,-0x28(%rsp)
  0x0000000116b51dbc: sub    $0x80,%rsp
  0x0000000116b51dc3: mov    %rax,0x78(%rsp)
  0x0000000116b51dc8: mov    %rcx,0x70(%rsp)
  0x0000000116b51dcd: mov    %rdx,0x68(%rsp)
  0x0000000116b51dd2: mov    %rbx,0x60(%rsp)
  0x0000000116b51dd7: mov    %rbp,0x50(%rsp)
  0x0000000116b51ddc: mov    %rsi,0x48(%rsp)
  0x0000000116b51de1: mov    %rdi,0x40(%rsp)
  0x0000000116b51de6: mov    %r8,0x38(%rsp)
  0x0000000116b51deb: mov    %r9,0x30(%rsp)
  0x0000000116b51df0: mov    %r10,0x28(%rsp)
  0x0000000116b51df5: mov    %r11,0x20(%rsp)
  0x0000000116b51dfa: mov    %r12,0x18(%rsp)
  0x0000000116b51dff: mov    %r13,0x10(%rsp)
  0x0000000116b51e04: mov    %r14,0x8(%rsp)
  0x0000000116b51e09: mov    %r15,(%rsp)
  0x0000000116b51e0d: movabs $0x10cc63f17,%rdi
  0x0000000116b51e17: movabs $0x116b51db7,%rsi
  0x0000000116b51e21: mov    %rsp,%rdx
  0x0000000116b51e24: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51e28: callq  0x000000010c7dd830
  0x0000000116b51e2d: hlt    
  0x0000000116b51e2e: pop    %r10
  0x0000000116b51e30: mov    %r15,%rdi
  0x0000000116b51e33: mov    %rbp,0x290(%r15)
  0x0000000116b51e3a: mov    %rax,0x280(%r15)
  0x0000000116b51e41: test   $0xf,%esp
  0x0000000116b51e47: je     0x0000000116b51e5f
  0x0000000116b51e4d: sub    $0x8,%rsp
  0x0000000116b51e51: callq  0x000000010c589410
  0x0000000116b51e56: add    $0x8,%rsp
  0x0000000116b51e5a: jmpq   0x0000000116b51e64
  0x0000000116b51e5f: callq  0x000000010c589410
  0x0000000116b51e64: push   %rax
  0x0000000116b51e65: push   %rdi
  0x0000000116b51e66: push   %rsi
  0x0000000116b51e67: push   %rdx
  0x0000000116b51e68: push   %rcx
  0x0000000116b51e69: push   %r8
  0x0000000116b51e6b: push   %r9
  0x0000000116b51e6d: push   %r10
  0x0000000116b51e6f: mov    %rsp,%r10
  0x0000000116b51e72: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51e76: push   %r10
  0x0000000116b51e78: push   %r11
  0x0000000116b51e7a: mov    $0x109,%edi
  0x0000000116b51e7f: movabs $0x7ff815049fd5,%r10
  0x0000000116b51e89: callq  *%r10
  0x0000000116b51e8c: pop    %r11
  0x0000000116b51e8e: pop    %rsp
  0x0000000116b51e8f: pop    %r10
  0x0000000116b51e91: pop    %r9
  0x0000000116b51e93: pop    %r8
  0x0000000116b51e95: pop    %rcx
  0x0000000116b51e96: pop    %rdx
  0x0000000116b51e97: pop    %rsi
  0x0000000116b51e98: pop    %rdi
  0x0000000116b51e99: cmp    %rax,%r15
  0x0000000116b51e9c: je     0x0000000116b51f19
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b51ea2: mov    %rsp,-0x28(%rsp)
  0x0000000116b51ea7: sub    $0x80,%rsp
  0x0000000116b51eae: mov    %rax,0x78(%rsp)
  0x0000000116b51eb3: mov    %rcx,0x70(%rsp)
  0x0000000116b51eb8: mov    %rdx,0x68(%rsp)
  0x0000000116b51ebd: mov    %rbx,0x60(%rsp)
  0x0000000116b51ec2: mov    %rbp,0x50(%rsp)
  0x0000000116b51ec7: mov    %rsi,0x48(%rsp)
  0x0000000116b51ecc: mov    %rdi,0x40(%rsp)
  0x0000000116b51ed1: mov    %r8,0x38(%rsp)
  0x0000000116b51ed6: mov    %r9,0x30(%rsp)
  0x0000000116b51edb: mov    %r10,0x28(%rsp)
  0x0000000116b51ee0: mov    %r11,0x20(%rsp)
  0x0000000116b51ee5: mov    %r12,0x18(%rsp)
  0x0000000116b51eea: mov    %r13,0x10(%rsp)
  0x0000000116b51eef: mov    %r14,0x8(%rsp)
  0x0000000116b51ef4: mov    %r15,(%rsp)
  0x0000000116b51ef8: movabs $0x10cc6405e,%rdi
  0x0000000116b51f02: movabs $0x116b51ea2,%rsi
  0x0000000116b51f0c: mov    %rsp,%rdx
  0x0000000116b51f0f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b51f13: callq  0x000000010c7dd830
  0x0000000116b51f18: hlt    
  0x0000000116b51f19: pop    %rax
  0x0000000116b51f1a: movabs $0x0,%r10
  0x0000000116b51f24: mov    %r10,0x280(%r15)
  0x0000000116b51f2b: movabs $0x0,%r10
  0x0000000116b51f35: mov    %r10,0x290(%r15)
  0x0000000116b51f3c: movabs $0x0,%r10
  0x0000000116b51f46: mov    %r10,0x288(%r15)
  0x0000000116b51f4d: cmpq   $0x0,0x8(%r15)
  0x0000000116b51f55: je     0x0000000116b51f60
  0x0000000116b51f5b: jmpq   0x0000000116b30420
  0x0000000116b51f60: mov    -0x38(%rbp),%r13
  0x0000000116b51f64: mov    -0x30(%rbp),%r14
  0x0000000116b51f68: retq   
  0x0000000116b51f69: jmpq   0x0000000116b5220a
  0x0000000116b51f6e: mov    %r13,-0x38(%rbp)
  0x0000000116b51f72: lea    (%rsi),%rax
  0x0000000116b51f75: mov    0x8(%rsi),%rcx
  0x0000000116b51f79: movq   $0x0,0x8(%rsi)
  0x0000000116b51f81: mov    (%rcx),%rdx
  0x0000000116b51f84: and    $0x7,%rdx
  0x0000000116b51f88: cmp    $0x5,%rdx
  0x0000000116b51f8c: je     0x0000000116b52206
  0x0000000116b51f92: mov    (%rax),%rdx
  0x0000000116b51f95: test   %rdx,%rdx
  0x0000000116b51f98: je     0x0000000116b52206
  0x0000000116b51f9e: lock cmpxchg %rdx,(%rcx)
  0x0000000116b51fa3: je     0x0000000116b52206
  0x0000000116b51fa9: mov    %rcx,0x8(%rsi)
  0x0000000116b51fad: callq  0x0000000116b51fb7
  0x0000000116b51fb2: jmpq   0x0000000116b52206
  0x0000000116b51fb7: lea    0x8(%rsp),%rax
  0x0000000116b51fbc: mov    %r13,-0x38(%rbp)
  0x0000000116b51fc0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b51fc8: je     0x0000000116b52045
  0x0000000116b51fce: mov    %rsp,-0x28(%rsp)
  0x0000000116b51fd3: sub    $0x80,%rsp
  0x0000000116b51fda: mov    %rax,0x78(%rsp)
  0x0000000116b51fdf: mov    %rcx,0x70(%rsp)
  0x0000000116b51fe4: mov    %rdx,0x68(%rsp)
  0x0000000116b51fe9: mov    %rbx,0x60(%rsp)
  0x0000000116b51fee: mov    %rbp,0x50(%rsp)
  0x0000000116b51ff3: mov    %rsi,0x48(%rsp)
  0x0000000116b51ff8: mov    %rdi,0x40(%rsp)
  0x0000000116b51ffd: mov    %r8,0x38(%rsp)
  0x0000000116b52002: mov    %r9,0x30(%rsp)
  0x0000000116b52007: mov    %r10,0x28(%rsp)
  0x0000000116b5200c: mov    %r11,0x20(%rsp)
  0x0000000116b52011: mov    %r12,0x18(%rsp)
  0x0000000116b52016: mov    %r13,0x10(%rsp)
  0x0000000116b5201b: mov    %r14,0x8(%rsp)
  0x0000000116b52020: mov    %r15,(%rsp)
  0x0000000116b52024: movabs $0x10cc2363b,%rdi
  0x0000000116b5202e: movabs $0x116b51fce,%rsi
  0x0000000116b52038: mov    %rsp,%rdx
  0x0000000116b5203b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5203f: callq  0x000000010c7dd830
  0x0000000116b52044: hlt    
  0x0000000116b52045: push   %r10
  0x0000000116b52047: cmp    -0x9d0b79e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5204e: je     0x0000000116b520cb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b52054: mov    %rsp,-0x28(%rsp)
  0x0000000116b52059: sub    $0x80,%rsp
  0x0000000116b52060: mov    %rax,0x78(%rsp)
  0x0000000116b52065: mov    %rcx,0x70(%rsp)
  0x0000000116b5206a: mov    %rdx,0x68(%rsp)
  0x0000000116b5206f: mov    %rbx,0x60(%rsp)
  0x0000000116b52074: mov    %rbp,0x50(%rsp)
  0x0000000116b52079: mov    %rsi,0x48(%rsp)
  0x0000000116b5207e: mov    %rdi,0x40(%rsp)
  0x0000000116b52083: mov    %r8,0x38(%rsp)
  0x0000000116b52088: mov    %r9,0x30(%rsp)
  0x0000000116b5208d: mov    %r10,0x28(%rsp)
  0x0000000116b52092: mov    %r11,0x20(%rsp)
  0x0000000116b52097: mov    %r12,0x18(%rsp)
  0x0000000116b5209c: mov    %r13,0x10(%rsp)
  0x0000000116b520a1: mov    %r14,0x8(%rsp)
  0x0000000116b520a6: mov    %r15,(%rsp)
  0x0000000116b520aa: movabs $0x10cc63f17,%rdi
  0x0000000116b520b4: movabs $0x116b52054,%rsi
  0x0000000116b520be: mov    %rsp,%rdx
  0x0000000116b520c1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b520c5: callq  0x000000010c7dd830
  0x0000000116b520ca: hlt    
  0x0000000116b520cb: pop    %r10
  0x0000000116b520cd: mov    %r15,%rdi
  0x0000000116b520d0: mov    %rbp,0x290(%r15)
  0x0000000116b520d7: mov    %rax,0x280(%r15)
  0x0000000116b520de: test   $0xf,%esp
  0x0000000116b520e4: je     0x0000000116b520fc
  0x0000000116b520ea: sub    $0x8,%rsp
  0x0000000116b520ee: callq  0x000000010c588f80
  0x0000000116b520f3: add    $0x8,%rsp
  0x0000000116b520f7: jmpq   0x0000000116b52101
  0x0000000116b520fc: callq  0x000000010c588f80
  0x0000000116b52101: push   %rax
  0x0000000116b52102: push   %rdi
  0x0000000116b52103: push   %rsi
  0x0000000116b52104: push   %rdx
  0x0000000116b52105: push   %rcx
  0x0000000116b52106: push   %r8
  0x0000000116b52108: push   %r9
  0x0000000116b5210a: push   %r10
  0x0000000116b5210c: mov    %rsp,%r10
  0x0000000116b5210f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52113: push   %r10
  0x0000000116b52115: push   %r11
  0x0000000116b52117: mov    $0x109,%edi
  0x0000000116b5211c: movabs $0x7ff815049fd5,%r10
  0x0000000116b52126: callq  *%r10
  0x0000000116b52129: pop    %r11
  0x0000000116b5212b: pop    %rsp
  0x0000000116b5212c: pop    %r10
  0x0000000116b5212e: pop    %r9
  0x0000000116b52130: pop    %r8
  0x0000000116b52132: pop    %rcx
  0x0000000116b52133: pop    %rdx
  0x0000000116b52134: pop    %rsi
  0x0000000116b52135: pop    %rdi
  0x0000000116b52136: cmp    %rax,%r15
  0x0000000116b52139: je     0x0000000116b521b6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5213f: mov    %rsp,-0x28(%rsp)
  0x0000000116b52144: sub    $0x80,%rsp
  0x0000000116b5214b: mov    %rax,0x78(%rsp)
  0x0000000116b52150: mov    %rcx,0x70(%rsp)
  0x0000000116b52155: mov    %rdx,0x68(%rsp)
  0x0000000116b5215a: mov    %rbx,0x60(%rsp)
  0x0000000116b5215f: mov    %rbp,0x50(%rsp)
  0x0000000116b52164: mov    %rsi,0x48(%rsp)
  0x0000000116b52169: mov    %rdi,0x40(%rsp)
  0x0000000116b5216e: mov    %r8,0x38(%rsp)
  0x0000000116b52173: mov    %r9,0x30(%rsp)
  0x0000000116b52178: mov    %r10,0x28(%rsp)
  0x0000000116b5217d: mov    %r11,0x20(%rsp)
  0x0000000116b52182: mov    %r12,0x18(%rsp)
  0x0000000116b52187: mov    %r13,0x10(%rsp)
  0x0000000116b5218c: mov    %r14,0x8(%rsp)
  0x0000000116b52191: mov    %r15,(%rsp)
  0x0000000116b52195: movabs $0x10cc6405e,%rdi
  0x0000000116b5219f: movabs $0x116b5213f,%rsi
  0x0000000116b521a9: mov    %rsp,%rdx
  0x0000000116b521ac: and    $0xfffffffffffffff0,%rsp
  0x0000000116b521b0: callq  0x000000010c7dd830
  0x0000000116b521b5: hlt    
  0x0000000116b521b6: pop    %rax
  0x0000000116b521b7: movabs $0x0,%r10
  0x0000000116b521c1: mov    %r10,0x280(%r15)
  0x0000000116b521c8: movabs $0x0,%r10
  0x0000000116b521d2: mov    %r10,0x290(%r15)
  0x0000000116b521d9: movabs $0x0,%r10
  0x0000000116b521e3: mov    %r10,0x288(%r15)
  0x0000000116b521ea: cmpq   $0x0,0x8(%r15)
  0x0000000116b521f2: je     0x0000000116b521fd
  0x0000000116b521f8: jmpq   0x0000000116b30420
  0x0000000116b521fd: mov    -0x38(%rbp),%r13
  0x0000000116b52201: mov    -0x30(%rbp),%r14
  0x0000000116b52205: retq   
  0x0000000116b52206: mov    -0x38(%rbp),%r13
  0x0000000116b5220a: mov    -0x40(%rbp),%rsi
  0x0000000116b5220e: lea    -0x40(%rbp),%rbx
  0x0000000116b52212: jmpq   0x0000000116b52723
  0x0000000116b52217: mov    %r13,-0x38(%rbp)
  0x0000000116b5221b: lea    (%rsi),%rax
  0x0000000116b5221e: mov    0x8(%rsi),%rcx
  0x0000000116b52222: movq   $0x0,0x8(%rsi)
  0x0000000116b5222a: mov    (%rcx),%rdx
  0x0000000116b5222d: and    $0x7,%rdx
  0x0000000116b52231: cmp    $0x5,%rdx
  0x0000000116b52235: je     0x0000000116b524af
  0x0000000116b5223b: mov    (%rax),%rdx
  0x0000000116b5223e: test   %rdx,%rdx
  0x0000000116b52241: je     0x0000000116b524af
  0x0000000116b52247: lock cmpxchg %rdx,(%rcx)
  0x0000000116b5224c: je     0x0000000116b524af
  0x0000000116b52252: mov    %rcx,0x8(%rsi)
  0x0000000116b52256: callq  0x0000000116b52260
  0x0000000116b5225b: jmpq   0x0000000116b524af
  0x0000000116b52260: lea    0x8(%rsp),%rax
  0x0000000116b52265: mov    %r13,-0x38(%rbp)
  0x0000000116b52269: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b52271: je     0x0000000116b522ee
  0x0000000116b52277: mov    %rsp,-0x28(%rsp)
  0x0000000116b5227c: sub    $0x80,%rsp
  0x0000000116b52283: mov    %rax,0x78(%rsp)
  0x0000000116b52288: mov    %rcx,0x70(%rsp)
  0x0000000116b5228d: mov    %rdx,0x68(%rsp)
  0x0000000116b52292: mov    %rbx,0x60(%rsp)
  0x0000000116b52297: mov    %rbp,0x50(%rsp)
  0x0000000116b5229c: mov    %rsi,0x48(%rsp)
  0x0000000116b522a1: mov    %rdi,0x40(%rsp)
  0x0000000116b522a6: mov    %r8,0x38(%rsp)
  0x0000000116b522ab: mov    %r9,0x30(%rsp)
  0x0000000116b522b0: mov    %r10,0x28(%rsp)
  0x0000000116b522b5: mov    %r11,0x20(%rsp)
  0x0000000116b522ba: mov    %r12,0x18(%rsp)
  0x0000000116b522bf: mov    %r13,0x10(%rsp)
  0x0000000116b522c4: mov    %r14,0x8(%rsp)
  0x0000000116b522c9: mov    %r15,(%rsp)
  0x0000000116b522cd: movabs $0x10cc2363b,%rdi
  0x0000000116b522d7: movabs $0x116b52277,%rsi
  0x0000000116b522e1: mov    %rsp,%rdx
  0x0000000116b522e4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b522e8: callq  0x000000010c7dd830
  0x0000000116b522ed: hlt    
  0x0000000116b522ee: push   %r10
  0x0000000116b522f0: cmp    -0x9d0ba47(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b522f7: je     0x0000000116b52374
  ;; call_VM_base: heap base corrupted?
  0x0000000116b522fd: mov    %rsp,-0x28(%rsp)
  0x0000000116b52302: sub    $0x80,%rsp
  0x0000000116b52309: mov    %rax,0x78(%rsp)
  0x0000000116b5230e: mov    %rcx,0x70(%rsp)
  0x0000000116b52313: mov    %rdx,0x68(%rsp)
  0x0000000116b52318: mov    %rbx,0x60(%rsp)
  0x0000000116b5231d: mov    %rbp,0x50(%rsp)
  0x0000000116b52322: mov    %rsi,0x48(%rsp)
  0x0000000116b52327: mov    %rdi,0x40(%rsp)
  0x0000000116b5232c: mov    %r8,0x38(%rsp)
  0x0000000116b52331: mov    %r9,0x30(%rsp)
  0x0000000116b52336: mov    %r10,0x28(%rsp)
  0x0000000116b5233b: mov    %r11,0x20(%rsp)
  0x0000000116b52340: mov    %r12,0x18(%rsp)
  0x0000000116b52345: mov    %r13,0x10(%rsp)
  0x0000000116b5234a: mov    %r14,0x8(%rsp)
  0x0000000116b5234f: mov    %r15,(%rsp)
  0x0000000116b52353: movabs $0x10cc63f17,%rdi
  0x0000000116b5235d: movabs $0x116b522fd,%rsi
  0x0000000116b52367: mov    %rsp,%rdx
  0x0000000116b5236a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5236e: callq  0x000000010c7dd830
  0x0000000116b52373: hlt    
  0x0000000116b52374: pop    %r10
  0x0000000116b52376: mov    %r15,%rdi
  0x0000000116b52379: mov    %rbp,0x290(%r15)
  0x0000000116b52380: mov    %rax,0x280(%r15)
  0x0000000116b52387: test   $0xf,%esp
  0x0000000116b5238d: je     0x0000000116b523a5
  0x0000000116b52393: sub    $0x8,%rsp
  0x0000000116b52397: callq  0x000000010c588f80
  0x0000000116b5239c: add    $0x8,%rsp
  0x0000000116b523a0: jmpq   0x0000000116b523aa
  0x0000000116b523a5: callq  0x000000010c588f80
  0x0000000116b523aa: push   %rax
  0x0000000116b523ab: push   %rdi
  0x0000000116b523ac: push   %rsi
  0x0000000116b523ad: push   %rdx
  0x0000000116b523ae: push   %rcx
  0x0000000116b523af: push   %r8
  0x0000000116b523b1: push   %r9
  0x0000000116b523b3: push   %r10
  0x0000000116b523b5: mov    %rsp,%r10
  0x0000000116b523b8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b523bc: push   %r10
  0x0000000116b523be: push   %r11
  0x0000000116b523c0: mov    $0x109,%edi
  0x0000000116b523c5: movabs $0x7ff815049fd5,%r10
  0x0000000116b523cf: callq  *%r10
  0x0000000116b523d2: pop    %r11
  0x0000000116b523d4: pop    %rsp
  0x0000000116b523d5: pop    %r10
  0x0000000116b523d7: pop    %r9
  0x0000000116b523d9: pop    %r8
  0x0000000116b523db: pop    %rcx
  0x0000000116b523dc: pop    %rdx
  0x0000000116b523dd: pop    %rsi
  0x0000000116b523de: pop    %rdi
  0x0000000116b523df: cmp    %rax,%r15
  0x0000000116b523e2: je     0x0000000116b5245f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b523e8: mov    %rsp,-0x28(%rsp)
  0x0000000116b523ed: sub    $0x80,%rsp
  0x0000000116b523f4: mov    %rax,0x78(%rsp)
  0x0000000116b523f9: mov    %rcx,0x70(%rsp)
  0x0000000116b523fe: mov    %rdx,0x68(%rsp)
  0x0000000116b52403: mov    %rbx,0x60(%rsp)
  0x0000000116b52408: mov    %rbp,0x50(%rsp)
  0x0000000116b5240d: mov    %rsi,0x48(%rsp)
  0x0000000116b52412: mov    %rdi,0x40(%rsp)
  0x0000000116b52417: mov    %r8,0x38(%rsp)
  0x0000000116b5241c: mov    %r9,0x30(%rsp)
  0x0000000116b52421: mov    %r10,0x28(%rsp)
  0x0000000116b52426: mov    %r11,0x20(%rsp)
  0x0000000116b5242b: mov    %r12,0x18(%rsp)
  0x0000000116b52430: mov    %r13,0x10(%rsp)
  0x0000000116b52435: mov    %r14,0x8(%rsp)
  0x0000000116b5243a: mov    %r15,(%rsp)
  0x0000000116b5243e: movabs $0x10cc6405e,%rdi
  0x0000000116b52448: movabs $0x116b523e8,%rsi
  0x0000000116b52452: mov    %rsp,%rdx
  0x0000000116b52455: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52459: callq  0x000000010c7dd830
  0x0000000116b5245e: hlt    
  0x0000000116b5245f: pop    %rax
  0x0000000116b52460: movabs $0x0,%r10
  0x0000000116b5246a: mov    %r10,0x280(%r15)
  0x0000000116b52471: movabs $0x0,%r10
  0x0000000116b5247b: mov    %r10,0x290(%r15)
  0x0000000116b52482: movabs $0x0,%r10
  0x0000000116b5248c: mov    %r10,0x288(%r15)
  0x0000000116b52493: cmpq   $0x0,0x8(%r15)
  0x0000000116b5249b: je     0x0000000116b524a6
  0x0000000116b524a1: jmpq   0x0000000116b30420
  0x0000000116b524a6: mov    -0x38(%rbp),%r13
  0x0000000116b524aa: mov    -0x30(%rbp),%r14
  0x0000000116b524ae: retq   
  0x0000000116b524af: mov    -0x38(%rbp),%r13
  0x0000000116b524b3: callq  0x0000000116b524bd
  0x0000000116b524b8: jmpq   0x0000000116b5270c
  0x0000000116b524bd: lea    0x8(%rsp),%rax
  0x0000000116b524c2: mov    %r13,-0x38(%rbp)
  0x0000000116b524c6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b524ce: je     0x0000000116b5254b
  0x0000000116b524d4: mov    %rsp,-0x28(%rsp)
  0x0000000116b524d9: sub    $0x80,%rsp
  0x0000000116b524e0: mov    %rax,0x78(%rsp)
  0x0000000116b524e5: mov    %rcx,0x70(%rsp)
  0x0000000116b524ea: mov    %rdx,0x68(%rsp)
  0x0000000116b524ef: mov    %rbx,0x60(%rsp)
  0x0000000116b524f4: mov    %rbp,0x50(%rsp)
  0x0000000116b524f9: mov    %rsi,0x48(%rsp)
  0x0000000116b524fe: mov    %rdi,0x40(%rsp)
  0x0000000116b52503: mov    %r8,0x38(%rsp)
  0x0000000116b52508: mov    %r9,0x30(%rsp)
  0x0000000116b5250d: mov    %r10,0x28(%rsp)
  0x0000000116b52512: mov    %r11,0x20(%rsp)
  0x0000000116b52517: mov    %r12,0x18(%rsp)
  0x0000000116b5251c: mov    %r13,0x10(%rsp)
  0x0000000116b52521: mov    %r14,0x8(%rsp)
  0x0000000116b52526: mov    %r15,(%rsp)
  0x0000000116b5252a: movabs $0x10cc2363b,%rdi
  0x0000000116b52534: movabs $0x116b524d4,%rsi
  0x0000000116b5253e: mov    %rsp,%rdx
  0x0000000116b52541: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52545: callq  0x000000010c7dd830
  0x0000000116b5254a: hlt    
  0x0000000116b5254b: push   %r10
  0x0000000116b5254d: cmp    -0x9d0bca4(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b52554: je     0x0000000116b525d1
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5255a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5255f: sub    $0x80,%rsp
  0x0000000116b52566: mov    %rax,0x78(%rsp)
  0x0000000116b5256b: mov    %rcx,0x70(%rsp)
  0x0000000116b52570: mov    %rdx,0x68(%rsp)
  0x0000000116b52575: mov    %rbx,0x60(%rsp)
  0x0000000116b5257a: mov    %rbp,0x50(%rsp)
  0x0000000116b5257f: mov    %rsi,0x48(%rsp)
  0x0000000116b52584: mov    %rdi,0x40(%rsp)
  0x0000000116b52589: mov    %r8,0x38(%rsp)
  0x0000000116b5258e: mov    %r9,0x30(%rsp)
  0x0000000116b52593: mov    %r10,0x28(%rsp)
  0x0000000116b52598: mov    %r11,0x20(%rsp)
  0x0000000116b5259d: mov    %r12,0x18(%rsp)
  0x0000000116b525a2: mov    %r13,0x10(%rsp)
  0x0000000116b525a7: mov    %r14,0x8(%rsp)
  0x0000000116b525ac: mov    %r15,(%rsp)
  0x0000000116b525b0: movabs $0x10cc63f17,%rdi
  0x0000000116b525ba: movabs $0x116b5255a,%rsi
  0x0000000116b525c4: mov    %rsp,%rdx
  0x0000000116b525c7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b525cb: callq  0x000000010c7dd830
  0x0000000116b525d0: hlt    
  0x0000000116b525d1: pop    %r10
  0x0000000116b525d3: mov    %r15,%rdi
  0x0000000116b525d6: mov    %rbp,0x290(%r15)
  0x0000000116b525dd: mov    %rax,0x280(%r15)
  0x0000000116b525e4: test   $0xf,%esp
  0x0000000116b525ea: je     0x0000000116b52602
  0x0000000116b525f0: sub    $0x8,%rsp
  0x0000000116b525f4: callq  0x000000010c589410
  0x0000000116b525f9: add    $0x8,%rsp
  0x0000000116b525fd: jmpq   0x0000000116b52607
  0x0000000116b52602: callq  0x000000010c589410
  0x0000000116b52607: push   %rax
  0x0000000116b52608: push   %rdi
  0x0000000116b52609: push   %rsi
  0x0000000116b5260a: push   %rdx
  0x0000000116b5260b: push   %rcx
  0x0000000116b5260c: push   %r8
  0x0000000116b5260e: push   %r9
  0x0000000116b52610: push   %r10
  0x0000000116b52612: mov    %rsp,%r10
  0x0000000116b52615: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52619: push   %r10
  0x0000000116b5261b: push   %r11
  0x0000000116b5261d: mov    $0x109,%edi
  0x0000000116b52622: movabs $0x7ff815049fd5,%r10
  0x0000000116b5262c: callq  *%r10
  0x0000000116b5262f: pop    %r11
  0x0000000116b52631: pop    %rsp
  0x0000000116b52632: pop    %r10
  0x0000000116b52634: pop    %r9
  0x0000000116b52636: pop    %r8
  0x0000000116b52638: pop    %rcx
  0x0000000116b52639: pop    %rdx
  0x0000000116b5263a: pop    %rsi
  0x0000000116b5263b: pop    %rdi
  0x0000000116b5263c: cmp    %rax,%r15
  0x0000000116b5263f: je     0x0000000116b526bc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b52645: mov    %rsp,-0x28(%rsp)
  0x0000000116b5264a: sub    $0x80,%rsp
  0x0000000116b52651: mov    %rax,0x78(%rsp)
  0x0000000116b52656: mov    %rcx,0x70(%rsp)
  0x0000000116b5265b: mov    %rdx,0x68(%rsp)
  0x0000000116b52660: mov    %rbx,0x60(%rsp)
  0x0000000116b52665: mov    %rbp,0x50(%rsp)
  0x0000000116b5266a: mov    %rsi,0x48(%rsp)
  0x0000000116b5266f: mov    %rdi,0x40(%rsp)
  0x0000000116b52674: mov    %r8,0x38(%rsp)
  0x0000000116b52679: mov    %r9,0x30(%rsp)
  0x0000000116b5267e: mov    %r10,0x28(%rsp)
  0x0000000116b52683: mov    %r11,0x20(%rsp)
  0x0000000116b52688: mov    %r12,0x18(%rsp)
  0x0000000116b5268d: mov    %r13,0x10(%rsp)
  0x0000000116b52692: mov    %r14,0x8(%rsp)
  0x0000000116b52697: mov    %r15,(%rsp)
  0x0000000116b5269b: movabs $0x10cc6405e,%rdi
  0x0000000116b526a5: movabs $0x116b52645,%rsi
  0x0000000116b526af: mov    %rsp,%rdx
  0x0000000116b526b2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b526b6: callq  0x000000010c7dd830
  0x0000000116b526bb: hlt    
  0x0000000116b526bc: pop    %rax
  0x0000000116b526bd: movabs $0x0,%r10
  0x0000000116b526c7: mov    %r10,0x280(%r15)
  0x0000000116b526ce: movabs $0x0,%r10
  0x0000000116b526d8: mov    %r10,0x290(%r15)
  0x0000000116b526df: movabs $0x0,%r10
  0x0000000116b526e9: mov    %r10,0x288(%r15)
  0x0000000116b526f0: cmpq   $0x0,0x8(%r15)
  0x0000000116b526f8: je     0x0000000116b52703
  0x0000000116b526fe: jmpq   0x0000000116b30420
  0x0000000116b52703: mov    -0x38(%rbp),%r13
  0x0000000116b52707: mov    -0x30(%rbp),%r14
  0x0000000116b5270b: retq   
  0x0000000116b5270c: jmpq   0x0000000116b5220a
  0x0000000116b52711: cmpq   $0x0,0x8(%rsi)
  0x0000000116b52719: jne    0x0000000116b52217
  0x0000000116b5271f: add    $0x10,%rsi
  0x0000000116b52723: cmp    %rbx,%rsi
  0x0000000116b52726: jne    0x0000000116b52711
  0x0000000116b52728: cmpb   $0x0,-0x9d3552d(%rip)        # 0x000000010ce1d202
  0x0000000116b5272f: je     0x0000000116b527e4
  0x0000000116b52735: mov    -0x18(%rbp),%rsi
  0x0000000116b52739: mov    %r15,%rdi
  0x0000000116b5273c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b52744: je     0x0000000116b527c1
  0x0000000116b5274a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5274f: sub    $0x80,%rsp
  0x0000000116b52756: mov    %rax,0x78(%rsp)
  0x0000000116b5275b: mov    %rcx,0x70(%rsp)
  0x0000000116b52760: mov    %rdx,0x68(%rsp)
  0x0000000116b52765: mov    %rbx,0x60(%rsp)
  0x0000000116b5276a: mov    %rbp,0x50(%rsp)
  0x0000000116b5276f: mov    %rsi,0x48(%rsp)
  0x0000000116b52774: mov    %rdi,0x40(%rsp)
  0x0000000116b52779: mov    %r8,0x38(%rsp)
  0x0000000116b5277e: mov    %r9,0x30(%rsp)
  0x0000000116b52783: mov    %r10,0x28(%rsp)
  0x0000000116b52788: mov    %r11,0x20(%rsp)
  0x0000000116b5278d: mov    %r12,0x18(%rsp)
  0x0000000116b52792: mov    %r13,0x10(%rsp)
  0x0000000116b52797: mov    %r14,0x8(%rsp)
  0x0000000116b5279c: mov    %r15,(%rsp)
  0x0000000116b527a0: movabs $0x10cc2363b,%rdi
  0x0000000116b527aa: movabs $0x116b5274a,%rsi
  0x0000000116b527b4: mov    %rsp,%rdx
  0x0000000116b527b7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b527bb: callq  0x000000010c7dd830
  0x0000000116b527c0: hlt    
  0x0000000116b527c1: test   $0xf,%esp
  0x0000000116b527c7: je     0x0000000116b527df
  0x0000000116b527cd: sub    $0x8,%rsp
  0x0000000116b527d1: callq  0x000000010c9c9850
  0x0000000116b527d6: add    $0x8,%rsp
  0x0000000116b527da: jmpq   0x0000000116b527e4
  0x0000000116b527df: callq  0x000000010c9c9850
  0x0000000116b527e4: mov    -0x8(%rbp),%rbx
  0x0000000116b527e8: leaveq 
  0x0000000116b527e9: pop    %rdx
  0x0000000116b527ea: mov    %rbx,%rsp
  0x0000000116b527ed: mov    0x2e0(%r15),%rax
  0x0000000116b527f4: movabs $0x0,%r10
  0x0000000116b527fe: mov    %r10,0x2e0(%r15)
  0x0000000116b52805: push   %rax
  0x0000000116b52806: push   %rdx
  0x0000000116b52807: mov    %rdx,%rsi
  0x0000000116b5280a: mov    %r15,%rdi
  0x0000000116b5280d: test   $0xf,%esp
  0x0000000116b52813: je     0x0000000116b5282b
  0x0000000116b52819: sub    $0x8,%rsp
  0x0000000116b5281d: callq  0x000000010c9c6b50
  0x0000000116b52822: add    $0x8,%rsp
  0x0000000116b52826: jmpq   0x0000000116b52830
  0x0000000116b5282b: callq  0x000000010c9c6b50
  0x0000000116b52830: mov    %rax,%rbx
  0x0000000116b52833: pop    %rdx
  0x0000000116b52834: pop    %rax
  0x0000000116b52835: jmpq   *%rbx
  0x0000000116b52837: nop
  0x0000000116b52838: int3   
  0x0000000116b52839: int3   
  0x0000000116b5283a: int3   
  0x0000000116b5283b: int3   
  0x0000000116b5283c: int3   
  0x0000000116b5283d: int3   
  0x0000000116b5283e: int3   
  0x0000000116b5283f: int3   

----------------------------------------------------------------------
throw exception entrypoints  [0x0000000116b52880, 0x0000000116b53800]  3968 bytes

  0x0000000116b52880: mov    -0x40(%rbp),%rsp
  0x0000000116b52884: movq   $0x0,-0x10(%rbp)
  0x0000000116b5288c: movabs $0x10ccaece3,%rsi
  0x0000000116b52896: callq  0x0000000116b528a0
  0x0000000116b5289b: jmpq   0x0000000116b52af2
  0x0000000116b528a0: mov    %rbx,%rdx
  0x0000000116b528a3: lea    0x8(%rsp),%rax
  0x0000000116b528a8: mov    %r13,-0x38(%rbp)
  0x0000000116b528ac: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b528b4: je     0x0000000116b52931
  0x0000000116b528ba: mov    %rsp,-0x28(%rsp)
  0x0000000116b528bf: sub    $0x80,%rsp
  0x0000000116b528c6: mov    %rax,0x78(%rsp)
  0x0000000116b528cb: mov    %rcx,0x70(%rsp)
  0x0000000116b528d0: mov    %rdx,0x68(%rsp)
  0x0000000116b528d5: mov    %rbx,0x60(%rsp)
  0x0000000116b528da: mov    %rbp,0x50(%rsp)
  0x0000000116b528df: mov    %rsi,0x48(%rsp)
  0x0000000116b528e4: mov    %rdi,0x40(%rsp)
  0x0000000116b528e9: mov    %r8,0x38(%rsp)
  0x0000000116b528ee: mov    %r9,0x30(%rsp)
  0x0000000116b528f3: mov    %r10,0x28(%rsp)
  0x0000000116b528f8: mov    %r11,0x20(%rsp)
  0x0000000116b528fd: mov    %r12,0x18(%rsp)
  0x0000000116b52902: mov    %r13,0x10(%rsp)
  0x0000000116b52907: mov    %r14,0x8(%rsp)
  0x0000000116b5290c: mov    %r15,(%rsp)
  0x0000000116b52910: movabs $0x10cc2363b,%rdi
  0x0000000116b5291a: movabs $0x116b528ba,%rsi
  0x0000000116b52924: mov    %rsp,%rdx
  0x0000000116b52927: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5292b: callq  0x000000010c7dd830
  0x0000000116b52930: hlt    
  0x0000000116b52931: push   %r10
  0x0000000116b52933: cmp    -0x9d0c08a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5293a: je     0x0000000116b529b7
  ;; call_VM_base: heap base corrupted?
  0x0000000116b52940: mov    %rsp,-0x28(%rsp)
  0x0000000116b52945: sub    $0x80,%rsp
  0x0000000116b5294c: mov    %rax,0x78(%rsp)
  0x0000000116b52951: mov    %rcx,0x70(%rsp)
  0x0000000116b52956: mov    %rdx,0x68(%rsp)
  0x0000000116b5295b: mov    %rbx,0x60(%rsp)
  0x0000000116b52960: mov    %rbp,0x50(%rsp)
  0x0000000116b52965: mov    %rsi,0x48(%rsp)
  0x0000000116b5296a: mov    %rdi,0x40(%rsp)
  0x0000000116b5296f: mov    %r8,0x38(%rsp)
  0x0000000116b52974: mov    %r9,0x30(%rsp)
  0x0000000116b52979: mov    %r10,0x28(%rsp)
  0x0000000116b5297e: mov    %r11,0x20(%rsp)
  0x0000000116b52983: mov    %r12,0x18(%rsp)
  0x0000000116b52988: mov    %r13,0x10(%rsp)
  0x0000000116b5298d: mov    %r14,0x8(%rsp)
  0x0000000116b52992: mov    %r15,(%rsp)
  0x0000000116b52996: movabs $0x10cc63f17,%rdi
  0x0000000116b529a0: movabs $0x116b52940,%rsi
  0x0000000116b529aa: mov    %rsp,%rdx
  0x0000000116b529ad: and    $0xfffffffffffffff0,%rsp
  0x0000000116b529b1: callq  0x000000010c7dd830
  0x0000000116b529b6: hlt    
  0x0000000116b529b7: pop    %r10
  0x0000000116b529b9: mov    %r15,%rdi
  0x0000000116b529bc: mov    %rbp,0x290(%r15)
  0x0000000116b529c3: mov    %rax,0x280(%r15)
  0x0000000116b529ca: test   $0xf,%esp
  0x0000000116b529d0: je     0x0000000116b529e8
  0x0000000116b529d6: sub    $0x8,%rsp
  0x0000000116b529da: callq  0x000000010c5873c0
  0x0000000116b529df: add    $0x8,%rsp
  0x0000000116b529e3: jmpq   0x0000000116b529ed
  0x0000000116b529e8: callq  0x000000010c5873c0
  0x0000000116b529ed: push   %rax
  0x0000000116b529ee: push   %rdi
  0x0000000116b529ef: push   %rsi
  0x0000000116b529f0: push   %rdx
  0x0000000116b529f1: push   %rcx
  0x0000000116b529f2: push   %r8
  0x0000000116b529f4: push   %r9
  0x0000000116b529f6: push   %r10
  0x0000000116b529f8: mov    %rsp,%r10
  0x0000000116b529fb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b529ff: push   %r10
  0x0000000116b52a01: push   %r11
  0x0000000116b52a03: mov    $0x109,%edi
  0x0000000116b52a08: movabs $0x7ff815049fd5,%r10
  0x0000000116b52a12: callq  *%r10
  0x0000000116b52a15: pop    %r11
  0x0000000116b52a17: pop    %rsp
  0x0000000116b52a18: pop    %r10
  0x0000000116b52a1a: pop    %r9
  0x0000000116b52a1c: pop    %r8
  0x0000000116b52a1e: pop    %rcx
  0x0000000116b52a1f: pop    %rdx
  0x0000000116b52a20: pop    %rsi
  0x0000000116b52a21: pop    %rdi
  0x0000000116b52a22: cmp    %rax,%r15
  0x0000000116b52a25: je     0x0000000116b52aa2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b52a2b: mov    %rsp,-0x28(%rsp)
  0x0000000116b52a30: sub    $0x80,%rsp
  0x0000000116b52a37: mov    %rax,0x78(%rsp)
  0x0000000116b52a3c: mov    %rcx,0x70(%rsp)
  0x0000000116b52a41: mov    %rdx,0x68(%rsp)
  0x0000000116b52a46: mov    %rbx,0x60(%rsp)
  0x0000000116b52a4b: mov    %rbp,0x50(%rsp)
  0x0000000116b52a50: mov    %rsi,0x48(%rsp)
  0x0000000116b52a55: mov    %rdi,0x40(%rsp)
  0x0000000116b52a5a: mov    %r8,0x38(%rsp)
  0x0000000116b52a5f: mov    %r9,0x30(%rsp)
  0x0000000116b52a64: mov    %r10,0x28(%rsp)
  0x0000000116b52a69: mov    %r11,0x20(%rsp)
  0x0000000116b52a6e: mov    %r12,0x18(%rsp)
  0x0000000116b52a73: mov    %r13,0x10(%rsp)
  0x0000000116b52a78: mov    %r14,0x8(%rsp)
  0x0000000116b52a7d: mov    %r15,(%rsp)
  0x0000000116b52a81: movabs $0x10cc6405e,%rdi
  0x0000000116b52a8b: movabs $0x116b52a2b,%rsi
  0x0000000116b52a95: mov    %rsp,%rdx
  0x0000000116b52a98: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52a9c: callq  0x000000010c7dd830
  0x0000000116b52aa1: hlt    
  0x0000000116b52aa2: pop    %rax
  0x0000000116b52aa3: movabs $0x0,%r10
  0x0000000116b52aad: mov    %r10,0x280(%r15)
  0x0000000116b52ab4: movabs $0x0,%r10
  0x0000000116b52abe: mov    %r10,0x290(%r15)
  0x0000000116b52ac5: movabs $0x0,%r10
  0x0000000116b52acf: mov    %r10,0x288(%r15)
  0x0000000116b52ad6: cmpq   $0x0,0x8(%r15)
  0x0000000116b52ade: je     0x0000000116b52ae9
  0x0000000116b52ae4: jmpq   0x0000000116b30420
  0x0000000116b52ae9: mov    -0x38(%rbp),%r13
  0x0000000116b52aed: mov    -0x30(%rbp),%r14
  0x0000000116b52af1: retq   
  0x0000000116b52af2: pop    %rdx
  0x0000000116b52af3: mov    -0x40(%rbp),%rsp
  0x0000000116b52af7: movq   $0x0,-0x10(%rbp)
  0x0000000116b52aff: movabs $0x10ccaed0c,%rsi
  0x0000000116b52b09: callq  0x0000000116b52b13
  0x0000000116b52b0e: jmpq   0x0000000116b52d7a
  0x0000000116b52b13: lea    0x8(%rsp),%rax
  0x0000000116b52b18: mov    %r13,-0x38(%rbp)
  0x0000000116b52b1c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b52b24: je     0x0000000116b52ba1
  0x0000000116b52b2a: mov    %rsp,-0x28(%rsp)
  0x0000000116b52b2f: sub    $0x80,%rsp
  0x0000000116b52b36: mov    %rax,0x78(%rsp)
  0x0000000116b52b3b: mov    %rcx,0x70(%rsp)
  0x0000000116b52b40: mov    %rdx,0x68(%rsp)
  0x0000000116b52b45: mov    %rbx,0x60(%rsp)
  0x0000000116b52b4a: mov    %rbp,0x50(%rsp)
  0x0000000116b52b4f: mov    %rsi,0x48(%rsp)
  0x0000000116b52b54: mov    %rdi,0x40(%rsp)
  0x0000000116b52b59: mov    %r8,0x38(%rsp)
  0x0000000116b52b5e: mov    %r9,0x30(%rsp)
  0x0000000116b52b63: mov    %r10,0x28(%rsp)
  0x0000000116b52b68: mov    %r11,0x20(%rsp)
  0x0000000116b52b6d: mov    %r12,0x18(%rsp)
  0x0000000116b52b72: mov    %r13,0x10(%rsp)
  0x0000000116b52b77: mov    %r14,0x8(%rsp)
  0x0000000116b52b7c: mov    %r15,(%rsp)
  0x0000000116b52b80: movabs $0x10cc2363b,%rdi
  0x0000000116b52b8a: movabs $0x116b52b2a,%rsi
  0x0000000116b52b94: mov    %rsp,%rdx
  0x0000000116b52b97: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52b9b: callq  0x000000010c7dd830
  0x0000000116b52ba0: hlt    
  0x0000000116b52ba1: push   %r10
  0x0000000116b52ba3: cmp    -0x9d0c2fa(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b52baa: je     0x0000000116b52c27
  ;; call_VM_base: heap base corrupted?
  0x0000000116b52bb0: mov    %rsp,-0x28(%rsp)
  0x0000000116b52bb5: sub    $0x80,%rsp
  0x0000000116b52bbc: mov    %rax,0x78(%rsp)
  0x0000000116b52bc1: mov    %rcx,0x70(%rsp)
  0x0000000116b52bc6: mov    %rdx,0x68(%rsp)
  0x0000000116b52bcb: mov    %rbx,0x60(%rsp)
  0x0000000116b52bd0: mov    %rbp,0x50(%rsp)
  0x0000000116b52bd5: mov    %rsi,0x48(%rsp)
  0x0000000116b52bda: mov    %rdi,0x40(%rsp)
  0x0000000116b52bdf: mov    %r8,0x38(%rsp)
  0x0000000116b52be4: mov    %r9,0x30(%rsp)
  0x0000000116b52be9: mov    %r10,0x28(%rsp)
  0x0000000116b52bee: mov    %r11,0x20(%rsp)
  0x0000000116b52bf3: mov    %r12,0x18(%rsp)
  0x0000000116b52bf8: mov    %r13,0x10(%rsp)
  0x0000000116b52bfd: mov    %r14,0x8(%rsp)
  0x0000000116b52c02: mov    %r15,(%rsp)
  0x0000000116b52c06: movabs $0x10cc63f17,%rdi
  0x0000000116b52c10: movabs $0x116b52bb0,%rsi
  0x0000000116b52c1a: mov    %rsp,%rdx
  0x0000000116b52c1d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52c21: callq  0x000000010c7dd830
  0x0000000116b52c26: hlt    
  0x0000000116b52c27: pop    %r10
  0x0000000116b52c29: mov    %r15,%rdi
  0x0000000116b52c2c: mov    %rbp,0x290(%r15)
  0x0000000116b52c33: mov    %rax,0x280(%r15)
  0x0000000116b52c3a: test   $0xf,%esp
  0x0000000116b52c40: je     0x0000000116b52c58
  0x0000000116b52c46: sub    $0x8,%rsp
  0x0000000116b52c4a: callq  0x000000010c587120
  0x0000000116b52c4f: add    $0x8,%rsp
  0x0000000116b52c53: jmpq   0x0000000116b52c5d
  0x0000000116b52c58: callq  0x000000010c587120
  0x0000000116b52c5d: push   %rax
  0x0000000116b52c5e: push   %rdi
  0x0000000116b52c5f: push   %rsi
  0x0000000116b52c60: push   %rdx
  0x0000000116b52c61: push   %rcx
  0x0000000116b52c62: push   %r8
  0x0000000116b52c64: push   %r9
  0x0000000116b52c66: push   %r10
  0x0000000116b52c68: mov    %rsp,%r10
  0x0000000116b52c6b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52c6f: push   %r10
  0x0000000116b52c71: push   %r11
  0x0000000116b52c73: mov    $0x109,%edi
  0x0000000116b52c78: movabs $0x7ff815049fd5,%r10
  0x0000000116b52c82: callq  *%r10
  0x0000000116b52c85: pop    %r11
  0x0000000116b52c87: pop    %rsp
  0x0000000116b52c88: pop    %r10
  0x0000000116b52c8a: pop    %r9
  0x0000000116b52c8c: pop    %r8
  0x0000000116b52c8e: pop    %rcx
  0x0000000116b52c8f: pop    %rdx
  0x0000000116b52c90: pop    %rsi
  0x0000000116b52c91: pop    %rdi
  0x0000000116b52c92: cmp    %rax,%r15
  0x0000000116b52c95: je     0x0000000116b52d12
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b52c9b: mov    %rsp,-0x28(%rsp)
  0x0000000116b52ca0: sub    $0x80,%rsp
  0x0000000116b52ca7: mov    %rax,0x78(%rsp)
  0x0000000116b52cac: mov    %rcx,0x70(%rsp)
  0x0000000116b52cb1: mov    %rdx,0x68(%rsp)
  0x0000000116b52cb6: mov    %rbx,0x60(%rsp)
  0x0000000116b52cbb: mov    %rbp,0x50(%rsp)
  0x0000000116b52cc0: mov    %rsi,0x48(%rsp)
  0x0000000116b52cc5: mov    %rdi,0x40(%rsp)
  0x0000000116b52cca: mov    %r8,0x38(%rsp)
  0x0000000116b52ccf: mov    %r9,0x30(%rsp)
  0x0000000116b52cd4: mov    %r10,0x28(%rsp)
  0x0000000116b52cd9: mov    %r11,0x20(%rsp)
  0x0000000116b52cde: mov    %r12,0x18(%rsp)
  0x0000000116b52ce3: mov    %r13,0x10(%rsp)
  0x0000000116b52ce8: mov    %r14,0x8(%rsp)
  0x0000000116b52ced: mov    %r15,(%rsp)
  0x0000000116b52cf1: movabs $0x10cc6405e,%rdi
  0x0000000116b52cfb: movabs $0x116b52c9b,%rsi
  0x0000000116b52d05: mov    %rsp,%rdx
  0x0000000116b52d08: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52d0c: callq  0x000000010c7dd830
  0x0000000116b52d11: hlt    
  0x0000000116b52d12: pop    %rax
  0x0000000116b52d13: movabs $0x0,%r10
  0x0000000116b52d1d: mov    %r10,0x280(%r15)
  0x0000000116b52d24: movabs $0x0,%r10
  0x0000000116b52d2e: mov    %r10,0x290(%r15)
  0x0000000116b52d35: movabs $0x0,%r10
  0x0000000116b52d3f: mov    %r10,0x288(%r15)
  0x0000000116b52d46: cmpq   $0x0,0x8(%r15)
  0x0000000116b52d4e: je     0x0000000116b52d59
  0x0000000116b52d54: jmpq   0x0000000116b30420
  0x0000000116b52d59: mov    0x2e0(%r15),%rax
  0x0000000116b52d60: movabs $0x0,%r10
  0x0000000116b52d6a: mov    %r10,0x2e0(%r15)
  0x0000000116b52d71: mov    -0x38(%rbp),%r13
  0x0000000116b52d75: mov    -0x30(%rbp),%r14
  0x0000000116b52d79: retq   
  0x0000000116b52d7a: jmpq   0x0000000116b50993
  0x0000000116b52d7f: mov    -0x40(%rbp),%rsp
  0x0000000116b52d83: movq   $0x0,-0x10(%rbp)
  0x0000000116b52d8b: movabs $0x10ccaed2a,%rsi
  0x0000000116b52d95: movabs $0x10cb93908,%rdx
  0x0000000116b52d9f: callq  0x0000000116b52da9
  0x0000000116b52da4: jmpq   0x0000000116b53010
  0x0000000116b52da9: lea    0x8(%rsp),%rax
  0x0000000116b52dae: mov    %r13,-0x38(%rbp)
  0x0000000116b52db2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b52dba: je     0x0000000116b52e37
  0x0000000116b52dc0: mov    %rsp,-0x28(%rsp)
  0x0000000116b52dc5: sub    $0x80,%rsp
  0x0000000116b52dcc: mov    %rax,0x78(%rsp)
  0x0000000116b52dd1: mov    %rcx,0x70(%rsp)
  0x0000000116b52dd6: mov    %rdx,0x68(%rsp)
  0x0000000116b52ddb: mov    %rbx,0x60(%rsp)
  0x0000000116b52de0: mov    %rbp,0x50(%rsp)
  0x0000000116b52de5: mov    %rsi,0x48(%rsp)
  0x0000000116b52dea: mov    %rdi,0x40(%rsp)
  0x0000000116b52def: mov    %r8,0x38(%rsp)
  0x0000000116b52df4: mov    %r9,0x30(%rsp)
  0x0000000116b52df9: mov    %r10,0x28(%rsp)
  0x0000000116b52dfe: mov    %r11,0x20(%rsp)
  0x0000000116b52e03: mov    %r12,0x18(%rsp)
  0x0000000116b52e08: mov    %r13,0x10(%rsp)
  0x0000000116b52e0d: mov    %r14,0x8(%rsp)
  0x0000000116b52e12: mov    %r15,(%rsp)
  0x0000000116b52e16: movabs $0x10cc2363b,%rdi
  0x0000000116b52e20: movabs $0x116b52dc0,%rsi
  0x0000000116b52e2a: mov    %rsp,%rdx
  0x0000000116b52e2d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52e31: callq  0x000000010c7dd830
  0x0000000116b52e36: hlt    
  0x0000000116b52e37: push   %r10
  0x0000000116b52e39: cmp    -0x9d0c590(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b52e40: je     0x0000000116b52ebd
  ;; call_VM_base: heap base corrupted?
  0x0000000116b52e46: mov    %rsp,-0x28(%rsp)
  0x0000000116b52e4b: sub    $0x80,%rsp
  0x0000000116b52e52: mov    %rax,0x78(%rsp)
  0x0000000116b52e57: mov    %rcx,0x70(%rsp)
  0x0000000116b52e5c: mov    %rdx,0x68(%rsp)
  0x0000000116b52e61: mov    %rbx,0x60(%rsp)
  0x0000000116b52e66: mov    %rbp,0x50(%rsp)
  0x0000000116b52e6b: mov    %rsi,0x48(%rsp)
  0x0000000116b52e70: mov    %rdi,0x40(%rsp)
  0x0000000116b52e75: mov    %r8,0x38(%rsp)
  0x0000000116b52e7a: mov    %r9,0x30(%rsp)
  0x0000000116b52e7f: mov    %r10,0x28(%rsp)
  0x0000000116b52e84: mov    %r11,0x20(%rsp)
  0x0000000116b52e89: mov    %r12,0x18(%rsp)
  0x0000000116b52e8e: mov    %r13,0x10(%rsp)
  0x0000000116b52e93: mov    %r14,0x8(%rsp)
  0x0000000116b52e98: mov    %r15,(%rsp)
  0x0000000116b52e9c: movabs $0x10cc63f17,%rdi
  0x0000000116b52ea6: movabs $0x116b52e46,%rsi
  0x0000000116b52eb0: mov    %rsp,%rdx
  0x0000000116b52eb3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52eb7: callq  0x000000010c7dd830
  0x0000000116b52ebc: hlt    
  0x0000000116b52ebd: pop    %r10
  0x0000000116b52ebf: mov    %r15,%rdi
  0x0000000116b52ec2: mov    %rbp,0x290(%r15)
  0x0000000116b52ec9: mov    %rax,0x280(%r15)
  0x0000000116b52ed0: test   $0xf,%esp
  0x0000000116b52ed6: je     0x0000000116b52eee
  0x0000000116b52edc: sub    $0x8,%rsp
  0x0000000116b52ee0: callq  0x000000010c586e30
  0x0000000116b52ee5: add    $0x8,%rsp
  0x0000000116b52ee9: jmpq   0x0000000116b52ef3
  0x0000000116b52eee: callq  0x000000010c586e30
  0x0000000116b52ef3: push   %rax
  0x0000000116b52ef4: push   %rdi
  0x0000000116b52ef5: push   %rsi
  0x0000000116b52ef6: push   %rdx
  0x0000000116b52ef7: push   %rcx
  0x0000000116b52ef8: push   %r8
  0x0000000116b52efa: push   %r9
  0x0000000116b52efc: push   %r10
  0x0000000116b52efe: mov    %rsp,%r10
  0x0000000116b52f01: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52f05: push   %r10
  0x0000000116b52f07: push   %r11
  0x0000000116b52f09: mov    $0x109,%edi
  0x0000000116b52f0e: movabs $0x7ff815049fd5,%r10
  0x0000000116b52f18: callq  *%r10
  0x0000000116b52f1b: pop    %r11
  0x0000000116b52f1d: pop    %rsp
  0x0000000116b52f1e: pop    %r10
  0x0000000116b52f20: pop    %r9
  0x0000000116b52f22: pop    %r8
  0x0000000116b52f24: pop    %rcx
  0x0000000116b52f25: pop    %rdx
  0x0000000116b52f26: pop    %rsi
  0x0000000116b52f27: pop    %rdi
  0x0000000116b52f28: cmp    %rax,%r15
  0x0000000116b52f2b: je     0x0000000116b52fa8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b52f31: mov    %rsp,-0x28(%rsp)
  0x0000000116b52f36: sub    $0x80,%rsp
  0x0000000116b52f3d: mov    %rax,0x78(%rsp)
  0x0000000116b52f42: mov    %rcx,0x70(%rsp)
  0x0000000116b52f47: mov    %rdx,0x68(%rsp)
  0x0000000116b52f4c: mov    %rbx,0x60(%rsp)
  0x0000000116b52f51: mov    %rbp,0x50(%rsp)
  0x0000000116b52f56: mov    %rsi,0x48(%rsp)
  0x0000000116b52f5b: mov    %rdi,0x40(%rsp)
  0x0000000116b52f60: mov    %r8,0x38(%rsp)
  0x0000000116b52f65: mov    %r9,0x30(%rsp)
  0x0000000116b52f6a: mov    %r10,0x28(%rsp)
  0x0000000116b52f6f: mov    %r11,0x20(%rsp)
  0x0000000116b52f74: mov    %r12,0x18(%rsp)
  0x0000000116b52f79: mov    %r13,0x10(%rsp)
  0x0000000116b52f7e: mov    %r14,0x8(%rsp)
  0x0000000116b52f83: mov    %r15,(%rsp)
  0x0000000116b52f87: movabs $0x10cc6405e,%rdi
  0x0000000116b52f91: movabs $0x116b52f31,%rsi
  0x0000000116b52f9b: mov    %rsp,%rdx
  0x0000000116b52f9e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b52fa2: callq  0x000000010c7dd830
  0x0000000116b52fa7: hlt    
  0x0000000116b52fa8: pop    %rax
  0x0000000116b52fa9: movabs $0x0,%r10
  0x0000000116b52fb3: mov    %r10,0x280(%r15)
  0x0000000116b52fba: movabs $0x0,%r10
  0x0000000116b52fc4: mov    %r10,0x290(%r15)
  0x0000000116b52fcb: movabs $0x0,%r10
  0x0000000116b52fd5: mov    %r10,0x288(%r15)
  0x0000000116b52fdc: cmpq   $0x0,0x8(%r15)
  0x0000000116b52fe4: je     0x0000000116b52fef
  0x0000000116b52fea: jmpq   0x0000000116b30420
  0x0000000116b52fef: mov    0x2e0(%r15),%rax
  0x0000000116b52ff6: movabs $0x0,%r10
  0x0000000116b53000: mov    %r10,0x2e0(%r15)
  0x0000000116b53007: mov    -0x38(%rbp),%r13
  0x0000000116b5300b: mov    -0x30(%rbp),%r14
  0x0000000116b5300f: retq   
  0x0000000116b53010: jmpq   0x0000000116b50993
  0x0000000116b53015: pop    %rsi
  0x0000000116b53016: mov    -0x40(%rbp),%rsp
  0x0000000116b5301a: movq   $0x0,-0x10(%rbp)
  0x0000000116b53022: callq  0x0000000116b5302c
  0x0000000116b53027: jmpq   0x0000000116b5327b
  0x0000000116b5302c: lea    0x8(%rsp),%rax
  0x0000000116b53031: mov    %r13,-0x38(%rbp)
  0x0000000116b53035: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5303d: je     0x0000000116b530ba
  0x0000000116b53043: mov    %rsp,-0x28(%rsp)
  0x0000000116b53048: sub    $0x80,%rsp
  0x0000000116b5304f: mov    %rax,0x78(%rsp)
  0x0000000116b53054: mov    %rcx,0x70(%rsp)
  0x0000000116b53059: mov    %rdx,0x68(%rsp)
  0x0000000116b5305e: mov    %rbx,0x60(%rsp)
  0x0000000116b53063: mov    %rbp,0x50(%rsp)
  0x0000000116b53068: mov    %rsi,0x48(%rsp)
  0x0000000116b5306d: mov    %rdi,0x40(%rsp)
  0x0000000116b53072: mov    %r8,0x38(%rsp)
  0x0000000116b53077: mov    %r9,0x30(%rsp)
  0x0000000116b5307c: mov    %r10,0x28(%rsp)
  0x0000000116b53081: mov    %r11,0x20(%rsp)
  0x0000000116b53086: mov    %r12,0x18(%rsp)
  0x0000000116b5308b: mov    %r13,0x10(%rsp)
  0x0000000116b53090: mov    %r14,0x8(%rsp)
  0x0000000116b53095: mov    %r15,(%rsp)
  0x0000000116b53099: movabs $0x10cc2363b,%rdi
  0x0000000116b530a3: movabs $0x116b53043,%rsi
  0x0000000116b530ad: mov    %rsp,%rdx
  0x0000000116b530b0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b530b4: callq  0x000000010c7dd830
  0x0000000116b530b9: hlt    
  0x0000000116b530ba: push   %r10
  0x0000000116b530bc: cmp    -0x9d0c813(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b530c3: je     0x0000000116b53140
  ;; call_VM_base: heap base corrupted?
  0x0000000116b530c9: mov    %rsp,-0x28(%rsp)
  0x0000000116b530ce: sub    $0x80,%rsp
  0x0000000116b530d5: mov    %rax,0x78(%rsp)
  0x0000000116b530da: mov    %rcx,0x70(%rsp)
  0x0000000116b530df: mov    %rdx,0x68(%rsp)
  0x0000000116b530e4: mov    %rbx,0x60(%rsp)
  0x0000000116b530e9: mov    %rbp,0x50(%rsp)
  0x0000000116b530ee: mov    %rsi,0x48(%rsp)
  0x0000000116b530f3: mov    %rdi,0x40(%rsp)
  0x0000000116b530f8: mov    %r8,0x38(%rsp)
  0x0000000116b530fd: mov    %r9,0x30(%rsp)
  0x0000000116b53102: mov    %r10,0x28(%rsp)
  0x0000000116b53107: mov    %r11,0x20(%rsp)
  0x0000000116b5310c: mov    %r12,0x18(%rsp)
  0x0000000116b53111: mov    %r13,0x10(%rsp)
  0x0000000116b53116: mov    %r14,0x8(%rsp)
  0x0000000116b5311b: mov    %r15,(%rsp)
  0x0000000116b5311f: movabs $0x10cc63f17,%rdi
  0x0000000116b53129: movabs $0x116b530c9,%rsi
  0x0000000116b53133: mov    %rsp,%rdx
  0x0000000116b53136: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5313a: callq  0x000000010c7dd830
  0x0000000116b5313f: hlt    
  0x0000000116b53140: pop    %r10
  0x0000000116b53142: mov    %r15,%rdi
  0x0000000116b53145: mov    %rbp,0x290(%r15)
  0x0000000116b5314c: mov    %rax,0x280(%r15)
  0x0000000116b53153: test   $0xf,%esp
  0x0000000116b53159: je     0x0000000116b53171
  0x0000000116b5315f: sub    $0x8,%rsp
  0x0000000116b53163: callq  0x000000010c587630
  0x0000000116b53168: add    $0x8,%rsp
  0x0000000116b5316c: jmpq   0x0000000116b53176
  0x0000000116b53171: callq  0x000000010c587630
  0x0000000116b53176: push   %rax
  0x0000000116b53177: push   %rdi
  0x0000000116b53178: push   %rsi
  0x0000000116b53179: push   %rdx
  0x0000000116b5317a: push   %rcx
  0x0000000116b5317b: push   %r8
  0x0000000116b5317d: push   %r9
  0x0000000116b5317f: push   %r10
  0x0000000116b53181: mov    %rsp,%r10
  0x0000000116b53184: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53188: push   %r10
  0x0000000116b5318a: push   %r11
  0x0000000116b5318c: mov    $0x109,%edi
  0x0000000116b53191: movabs $0x7ff815049fd5,%r10
  0x0000000116b5319b: callq  *%r10
  0x0000000116b5319e: pop    %r11
  0x0000000116b531a0: pop    %rsp
  0x0000000116b531a1: pop    %r10
  0x0000000116b531a3: pop    %r9
  0x0000000116b531a5: pop    %r8
  0x0000000116b531a7: pop    %rcx
  0x0000000116b531a8: pop    %rdx
  0x0000000116b531a9: pop    %rsi
  0x0000000116b531aa: pop    %rdi
  0x0000000116b531ab: cmp    %rax,%r15
  0x0000000116b531ae: je     0x0000000116b5322b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b531b4: mov    %rsp,-0x28(%rsp)
  0x0000000116b531b9: sub    $0x80,%rsp
  0x0000000116b531c0: mov    %rax,0x78(%rsp)
  0x0000000116b531c5: mov    %rcx,0x70(%rsp)
  0x0000000116b531ca: mov    %rdx,0x68(%rsp)
  0x0000000116b531cf: mov    %rbx,0x60(%rsp)
  0x0000000116b531d4: mov    %rbp,0x50(%rsp)
  0x0000000116b531d9: mov    %rsi,0x48(%rsp)
  0x0000000116b531de: mov    %rdi,0x40(%rsp)
  0x0000000116b531e3: mov    %r8,0x38(%rsp)
  0x0000000116b531e8: mov    %r9,0x30(%rsp)
  0x0000000116b531ed: mov    %r10,0x28(%rsp)
  0x0000000116b531f2: mov    %r11,0x20(%rsp)
  0x0000000116b531f7: mov    %r12,0x18(%rsp)
  0x0000000116b531fc: mov    %r13,0x10(%rsp)
  0x0000000116b53201: mov    %r14,0x8(%rsp)
  0x0000000116b53206: mov    %r15,(%rsp)
  0x0000000116b5320a: movabs $0x10cc6405e,%rdi
  0x0000000116b53214: movabs $0x116b531b4,%rsi
  0x0000000116b5321e: mov    %rsp,%rdx
  0x0000000116b53221: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53225: callq  0x000000010c7dd830
  0x0000000116b5322a: hlt    
  0x0000000116b5322b: pop    %rax
  0x0000000116b5322c: movabs $0x0,%r10
  0x0000000116b53236: mov    %r10,0x280(%r15)
  0x0000000116b5323d: movabs $0x0,%r10
  0x0000000116b53247: mov    %r10,0x290(%r15)
  0x0000000116b5324e: movabs $0x0,%r10
  0x0000000116b53258: mov    %r10,0x288(%r15)
  0x0000000116b5325f: cmpq   $0x0,0x8(%r15)
  0x0000000116b53267: je     0x0000000116b53272
  0x0000000116b5326d: jmpq   0x0000000116b30420
  0x0000000116b53272: mov    -0x38(%rbp),%r13
  0x0000000116b53276: mov    -0x30(%rbp),%r14
  0x0000000116b5327a: retq   
  0x0000000116b5327b: mov    -0x40(%rbp),%rsp
  0x0000000116b5327f: movq   $0x0,-0x10(%rbp)
  0x0000000116b53287: movabs $0x10ccaed48,%rsi
  0x0000000116b53291: movabs $0x0,%rdx
  0x0000000116b5329b: callq  0x0000000116b532a5
  0x0000000116b532a0: jmpq   0x0000000116b5350c
  0x0000000116b532a5: lea    0x8(%rsp),%rax
  0x0000000116b532aa: mov    %r13,-0x38(%rbp)
  0x0000000116b532ae: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b532b6: je     0x0000000116b53333
  0x0000000116b532bc: mov    %rsp,-0x28(%rsp)
  0x0000000116b532c1: sub    $0x80,%rsp
  0x0000000116b532c8: mov    %rax,0x78(%rsp)
  0x0000000116b532cd: mov    %rcx,0x70(%rsp)
  0x0000000116b532d2: mov    %rdx,0x68(%rsp)
  0x0000000116b532d7: mov    %rbx,0x60(%rsp)
  0x0000000116b532dc: mov    %rbp,0x50(%rsp)
  0x0000000116b532e1: mov    %rsi,0x48(%rsp)
  0x0000000116b532e6: mov    %rdi,0x40(%rsp)
  0x0000000116b532eb: mov    %r8,0x38(%rsp)
  0x0000000116b532f0: mov    %r9,0x30(%rsp)
  0x0000000116b532f5: mov    %r10,0x28(%rsp)
  0x0000000116b532fa: mov    %r11,0x20(%rsp)
  0x0000000116b532ff: mov    %r12,0x18(%rsp)
  0x0000000116b53304: mov    %r13,0x10(%rsp)
  0x0000000116b53309: mov    %r14,0x8(%rsp)
  0x0000000116b5330e: mov    %r15,(%rsp)
  0x0000000116b53312: movabs $0x10cc2363b,%rdi
  0x0000000116b5331c: movabs $0x116b532bc,%rsi
  0x0000000116b53326: mov    %rsp,%rdx
  0x0000000116b53329: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5332d: callq  0x000000010c7dd830
  0x0000000116b53332: hlt    
  0x0000000116b53333: push   %r10
  0x0000000116b53335: cmp    -0x9d0ca8c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5333c: je     0x0000000116b533b9
  ;; call_VM_base: heap base corrupted?
  0x0000000116b53342: mov    %rsp,-0x28(%rsp)
  0x0000000116b53347: sub    $0x80,%rsp
  0x0000000116b5334e: mov    %rax,0x78(%rsp)
  0x0000000116b53353: mov    %rcx,0x70(%rsp)
  0x0000000116b53358: mov    %rdx,0x68(%rsp)
  0x0000000116b5335d: mov    %rbx,0x60(%rsp)
  0x0000000116b53362: mov    %rbp,0x50(%rsp)
  0x0000000116b53367: mov    %rsi,0x48(%rsp)
  0x0000000116b5336c: mov    %rdi,0x40(%rsp)
  0x0000000116b53371: mov    %r8,0x38(%rsp)
  0x0000000116b53376: mov    %r9,0x30(%rsp)
  0x0000000116b5337b: mov    %r10,0x28(%rsp)
  0x0000000116b53380: mov    %r11,0x20(%rsp)
  0x0000000116b53385: mov    %r12,0x18(%rsp)
  0x0000000116b5338a: mov    %r13,0x10(%rsp)
  0x0000000116b5338f: mov    %r14,0x8(%rsp)
  0x0000000116b53394: mov    %r15,(%rsp)
  0x0000000116b53398: movabs $0x10cc63f17,%rdi
  0x0000000116b533a2: movabs $0x116b53342,%rsi
  0x0000000116b533ac: mov    %rsp,%rdx
  0x0000000116b533af: and    $0xfffffffffffffff0,%rsp
  0x0000000116b533b3: callq  0x000000010c7dd830
  0x0000000116b533b8: hlt    
  0x0000000116b533b9: pop    %r10
  0x0000000116b533bb: mov    %r15,%rdi
  0x0000000116b533be: mov    %rbp,0x290(%r15)
  0x0000000116b533c5: mov    %rax,0x280(%r15)
  0x0000000116b533cc: test   $0xf,%esp
  0x0000000116b533d2: je     0x0000000116b533ea
  0x0000000116b533d8: sub    $0x8,%rsp
  0x0000000116b533dc: callq  0x000000010c586e30
  0x0000000116b533e1: add    $0x8,%rsp
  0x0000000116b533e5: jmpq   0x0000000116b533ef
  0x0000000116b533ea: callq  0x000000010c586e30
  0x0000000116b533ef: push   %rax
  0x0000000116b533f0: push   %rdi
  0x0000000116b533f1: push   %rsi
  0x0000000116b533f2: push   %rdx
  0x0000000116b533f3: push   %rcx
  0x0000000116b533f4: push   %r8
  0x0000000116b533f6: push   %r9
  0x0000000116b533f8: push   %r10
  0x0000000116b533fa: mov    %rsp,%r10
  0x0000000116b533fd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53401: push   %r10
  0x0000000116b53403: push   %r11
  0x0000000116b53405: mov    $0x109,%edi
  0x0000000116b5340a: movabs $0x7ff815049fd5,%r10
  0x0000000116b53414: callq  *%r10
  0x0000000116b53417: pop    %r11
  0x0000000116b53419: pop    %rsp
  0x0000000116b5341a: pop    %r10
  0x0000000116b5341c: pop    %r9
  0x0000000116b5341e: pop    %r8
  0x0000000116b53420: pop    %rcx
  0x0000000116b53421: pop    %rdx
  0x0000000116b53422: pop    %rsi
  0x0000000116b53423: pop    %rdi
  0x0000000116b53424: cmp    %rax,%r15
  0x0000000116b53427: je     0x0000000116b534a4
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5342d: mov    %rsp,-0x28(%rsp)
  0x0000000116b53432: sub    $0x80,%rsp
  0x0000000116b53439: mov    %rax,0x78(%rsp)
  0x0000000116b5343e: mov    %rcx,0x70(%rsp)
  0x0000000116b53443: mov    %rdx,0x68(%rsp)
  0x0000000116b53448: mov    %rbx,0x60(%rsp)
  0x0000000116b5344d: mov    %rbp,0x50(%rsp)
  0x0000000116b53452: mov    %rsi,0x48(%rsp)
  0x0000000116b53457: mov    %rdi,0x40(%rsp)
  0x0000000116b5345c: mov    %r8,0x38(%rsp)
  0x0000000116b53461: mov    %r9,0x30(%rsp)
  0x0000000116b53466: mov    %r10,0x28(%rsp)
  0x0000000116b5346b: mov    %r11,0x20(%rsp)
  0x0000000116b53470: mov    %r12,0x18(%rsp)
  0x0000000116b53475: mov    %r13,0x10(%rsp)
  0x0000000116b5347a: mov    %r14,0x8(%rsp)
  0x0000000116b5347f: mov    %r15,(%rsp)
  0x0000000116b53483: movabs $0x10cc6405e,%rdi
  0x0000000116b5348d: movabs $0x116b5342d,%rsi
  0x0000000116b53497: mov    %rsp,%rdx
  0x0000000116b5349a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5349e: callq  0x000000010c7dd830
  0x0000000116b534a3: hlt    
  0x0000000116b534a4: pop    %rax
  0x0000000116b534a5: movabs $0x0,%r10
  0x0000000116b534af: mov    %r10,0x280(%r15)
  0x0000000116b534b6: movabs $0x0,%r10
  0x0000000116b534c0: mov    %r10,0x290(%r15)
  0x0000000116b534c7: movabs $0x0,%r10
  0x0000000116b534d1: mov    %r10,0x288(%r15)
  0x0000000116b534d8: cmpq   $0x0,0x8(%r15)
  0x0000000116b534e0: je     0x0000000116b534eb
  0x0000000116b534e6: jmpq   0x0000000116b30420
  0x0000000116b534eb: mov    0x2e0(%r15),%rax
  0x0000000116b534f2: movabs $0x0,%r10
  0x0000000116b534fc: mov    %r10,0x2e0(%r15)
  0x0000000116b53503: mov    -0x38(%rbp),%r13
  0x0000000116b53507: mov    -0x30(%rbp),%r14
  0x0000000116b5350b: retq   
  0x0000000116b5350c: jmpq   0x0000000116b50993
  0x0000000116b53511: lea    -0x40(%rbp),%rax
  0x0000000116b53515: cmp    %rsp,%rax
  0x0000000116b53518: jae    0x0000000116b53595
  0x0000000116b5351e: mov    %rsp,-0x28(%rsp)
  0x0000000116b53523: sub    $0x80,%rsp
  0x0000000116b5352a: mov    %rax,0x78(%rsp)
  0x0000000116b5352f: mov    %rcx,0x70(%rsp)
  0x0000000116b53534: mov    %rdx,0x68(%rsp)
  0x0000000116b53539: mov    %rbx,0x60(%rsp)
  0x0000000116b5353e: mov    %rbp,0x50(%rsp)
  0x0000000116b53543: mov    %rsi,0x48(%rsp)
  0x0000000116b53548: mov    %rdi,0x40(%rsp)
  0x0000000116b5354d: mov    %r8,0x38(%rsp)
  0x0000000116b53552: mov    %r9,0x30(%rsp)
  0x0000000116b53557: mov    %r10,0x28(%rsp)
  0x0000000116b5355c: mov    %r11,0x20(%rsp)
  0x0000000116b53561: mov    %r12,0x18(%rsp)
  0x0000000116b53566: mov    %r13,0x10(%rsp)
  0x0000000116b5356b: mov    %r14,0x8(%rsp)
  0x0000000116b53570: mov    %r15,(%rsp)
  0x0000000116b53574: movabs $0x10ccaf775,%rdi
  0x0000000116b5357e: movabs $0x116b5351e,%rsi
  0x0000000116b53588: mov    %rsp,%rdx
  0x0000000116b5358b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5358f: callq  0x000000010c7dd830
  0x0000000116b53594: hlt    
  0x0000000116b53595: mov    -0x38(%rbp),%r13
  0x0000000116b53599: mov    -0x40(%rbp),%rsp
  0x0000000116b5359d: movq   $0x0,-0x10(%rbp)
  0x0000000116b535a5: callq  0x0000000116b535af
  0x0000000116b535aa: jmpq   0x0000000116b537fe
  0x0000000116b535af: lea    0x8(%rsp),%rax
  0x0000000116b535b4: mov    %r13,-0x38(%rbp)
  0x0000000116b535b8: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b535c0: je     0x0000000116b5363d
  0x0000000116b535c6: mov    %rsp,-0x28(%rsp)
  0x0000000116b535cb: sub    $0x80,%rsp
  0x0000000116b535d2: mov    %rax,0x78(%rsp)
  0x0000000116b535d7: mov    %rcx,0x70(%rsp)
  0x0000000116b535dc: mov    %rdx,0x68(%rsp)
  0x0000000116b535e1: mov    %rbx,0x60(%rsp)
  0x0000000116b535e6: mov    %rbp,0x50(%rsp)
  0x0000000116b535eb: mov    %rsi,0x48(%rsp)
  0x0000000116b535f0: mov    %rdi,0x40(%rsp)
  0x0000000116b535f5: mov    %r8,0x38(%rsp)
  0x0000000116b535fa: mov    %r9,0x30(%rsp)
  0x0000000116b535ff: mov    %r10,0x28(%rsp)
  0x0000000116b53604: mov    %r11,0x20(%rsp)
  0x0000000116b53609: mov    %r12,0x18(%rsp)
  0x0000000116b5360e: mov    %r13,0x10(%rsp)
  0x0000000116b53613: mov    %r14,0x8(%rsp)
  0x0000000116b53618: mov    %r15,(%rsp)
  0x0000000116b5361c: movabs $0x10cc2363b,%rdi
  0x0000000116b53626: movabs $0x116b535c6,%rsi
  0x0000000116b53630: mov    %rsp,%rdx
  0x0000000116b53633: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53637: callq  0x000000010c7dd830
  0x0000000116b5363c: hlt    
  0x0000000116b5363d: push   %r10
  0x0000000116b5363f: cmp    -0x9d0cd96(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b53646: je     0x0000000116b536c3
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5364c: mov    %rsp,-0x28(%rsp)
  0x0000000116b53651: sub    $0x80,%rsp
  0x0000000116b53658: mov    %rax,0x78(%rsp)
  0x0000000116b5365d: mov    %rcx,0x70(%rsp)
  0x0000000116b53662: mov    %rdx,0x68(%rsp)
  0x0000000116b53667: mov    %rbx,0x60(%rsp)
  0x0000000116b5366c: mov    %rbp,0x50(%rsp)
  0x0000000116b53671: mov    %rsi,0x48(%rsp)
  0x0000000116b53676: mov    %rdi,0x40(%rsp)
  0x0000000116b5367b: mov    %r8,0x38(%rsp)
  0x0000000116b53680: mov    %r9,0x30(%rsp)
  0x0000000116b53685: mov    %r10,0x28(%rsp)
  0x0000000116b5368a: mov    %r11,0x20(%rsp)
  0x0000000116b5368f: mov    %r12,0x18(%rsp)
  0x0000000116b53694: mov    %r13,0x10(%rsp)
  0x0000000116b53699: mov    %r14,0x8(%rsp)
  0x0000000116b5369e: mov    %r15,(%rsp)
  0x0000000116b536a2: movabs $0x10cc63f17,%rdi
  0x0000000116b536ac: movabs $0x116b5364c,%rsi
  0x0000000116b536b6: mov    %rsp,%rdx
  0x0000000116b536b9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b536bd: callq  0x000000010c7dd830
  0x0000000116b536c2: hlt    
  0x0000000116b536c3: pop    %r10
  0x0000000116b536c5: mov    %r15,%rdi
  0x0000000116b536c8: mov    %rbp,0x290(%r15)
  0x0000000116b536cf: mov    %rax,0x280(%r15)
  0x0000000116b536d6: test   $0xf,%esp
  0x0000000116b536dc: je     0x0000000116b536f4
  0x0000000116b536e2: sub    $0x8,%rsp
  0x0000000116b536e6: callq  0x000000010c586b80
  0x0000000116b536eb: add    $0x8,%rsp
  0x0000000116b536ef: jmpq   0x0000000116b536f9
  0x0000000116b536f4: callq  0x000000010c586b80
  0x0000000116b536f9: push   %rax
  0x0000000116b536fa: push   %rdi
  0x0000000116b536fb: push   %rsi
  0x0000000116b536fc: push   %rdx
  0x0000000116b536fd: push   %rcx
  0x0000000116b536fe: push   %r8
  0x0000000116b53700: push   %r9
  0x0000000116b53702: push   %r10
  0x0000000116b53704: mov    %rsp,%r10
  0x0000000116b53707: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5370b: push   %r10
  0x0000000116b5370d: push   %r11
  0x0000000116b5370f: mov    $0x109,%edi
  0x0000000116b53714: movabs $0x7ff815049fd5,%r10
  0x0000000116b5371e: callq  *%r10
  0x0000000116b53721: pop    %r11
  0x0000000116b53723: pop    %rsp
  0x0000000116b53724: pop    %r10
  0x0000000116b53726: pop    %r9
  0x0000000116b53728: pop    %r8
  0x0000000116b5372a: pop    %rcx
  0x0000000116b5372b: pop    %rdx
  0x0000000116b5372c: pop    %rsi
  0x0000000116b5372d: pop    %rdi
  0x0000000116b5372e: cmp    %rax,%r15
  0x0000000116b53731: je     0x0000000116b537ae
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b53737: mov    %rsp,-0x28(%rsp)
  0x0000000116b5373c: sub    $0x80,%rsp
  0x0000000116b53743: mov    %rax,0x78(%rsp)
  0x0000000116b53748: mov    %rcx,0x70(%rsp)
  0x0000000116b5374d: mov    %rdx,0x68(%rsp)
  0x0000000116b53752: mov    %rbx,0x60(%rsp)
  0x0000000116b53757: mov    %rbp,0x50(%rsp)
  0x0000000116b5375c: mov    %rsi,0x48(%rsp)
  0x0000000116b53761: mov    %rdi,0x40(%rsp)
  0x0000000116b53766: mov    %r8,0x38(%rsp)
  0x0000000116b5376b: mov    %r9,0x30(%rsp)
  0x0000000116b53770: mov    %r10,0x28(%rsp)
  0x0000000116b53775: mov    %r11,0x20(%rsp)
  0x0000000116b5377a: mov    %r12,0x18(%rsp)
  0x0000000116b5377f: mov    %r13,0x10(%rsp)
  0x0000000116b53784: mov    %r14,0x8(%rsp)
  0x0000000116b53789: mov    %r15,(%rsp)
  0x0000000116b5378d: movabs $0x10cc6405e,%rdi
  0x0000000116b53797: movabs $0x116b53737,%rsi
  0x0000000116b537a1: mov    %rsp,%rdx
  0x0000000116b537a4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b537a8: callq  0x000000010c7dd830
  0x0000000116b537ad: hlt    
  0x0000000116b537ae: pop    %rax
  0x0000000116b537af: movabs $0x0,%r10
  0x0000000116b537b9: mov    %r10,0x280(%r15)
  0x0000000116b537c0: movabs $0x0,%r10
  0x0000000116b537ca: mov    %r10,0x290(%r15)
  0x0000000116b537d1: movabs $0x0,%r10
  0x0000000116b537db: mov    %r10,0x288(%r15)
  0x0000000116b537e2: cmpq   $0x0,0x8(%r15)
  0x0000000116b537ea: je     0x0000000116b537f5
  0x0000000116b537f0: jmpq   0x0000000116b30420
  0x0000000116b537f5: mov    -0x38(%rbp),%r13
  0x0000000116b537f9: mov    -0x30(%rbp),%r14
  0x0000000116b537fd: retq   
  0x0000000116b537fe: nop
  0x0000000116b537ff: nop

----------------------------------------------------------------------
method entry point (kind = zerolocals)  [0x0000000116b53840, 0x0000000116b53d80]  1344 bytes

  0x0000000116b53840: mov    0x10(%rbx),%rdx
  0x0000000116b53844: movzwl 0x2c(%rdx),%ecx
  0x0000000116b53848: movzwl 0x2a(%rdx),%edx
  0x0000000116b5384c: sub    %ecx,%edx
  0x0000000116b5384e: cmp    $0x1f6,%edx
  0x0000000116b53854: jbe    0x0000000116b5399d
  0x0000000116b5385a: mov    %rdx,%rax
  0x0000000116b5385d: shl    $0x3,%rax
  0x0000000116b53861: add    $0x50,%rax
  0x0000000116b53865: cmpq   $0x0,0x1d0(%r15)
  0x0000000116b53870: jne    0x0000000116b538ed
  0x0000000116b53876: mov    %rsp,-0x28(%rsp)
  0x0000000116b5387b: sub    $0x80,%rsp
  0x0000000116b53882: mov    %rax,0x78(%rsp)
  0x0000000116b53887: mov    %rcx,0x70(%rsp)
  0x0000000116b5388c: mov    %rdx,0x68(%rsp)
  0x0000000116b53891: mov    %rbx,0x60(%rsp)
  0x0000000116b53896: mov    %rbp,0x50(%rsp)
  0x0000000116b5389b: mov    %rsi,0x48(%rsp)
  0x0000000116b538a0: mov    %rdi,0x40(%rsp)
  0x0000000116b538a5: mov    %r8,0x38(%rsp)
  0x0000000116b538aa: mov    %r9,0x30(%rsp)
  0x0000000116b538af: mov    %r10,0x28(%rsp)
  0x0000000116b538b4: mov    %r11,0x20(%rsp)
  0x0000000116b538b9: mov    %r12,0x18(%rsp)
  0x0000000116b538be: mov    %r13,0x10(%rsp)
  0x0000000116b538c3: mov    %r14,0x8(%rsp)
  0x0000000116b538c8: mov    %r15,(%rsp)
  0x0000000116b538cc: movabs $0x10ccaf955,%rdi
  0x0000000116b538d6: movabs $0x116b53876,%rsi
  0x0000000116b538e0: mov    %rsp,%rdx
  0x0000000116b538e3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b538e7: callq  0x000000010c7dd830
  0x0000000116b538ec: hlt    
  0x0000000116b538ed: cmpq   $0x0,0x1d8(%r15)
  0x0000000116b538f8: jne    0x0000000116b53975
  0x0000000116b538fe: mov    %rsp,-0x28(%rsp)
  0x0000000116b53903: sub    $0x80,%rsp
  0x0000000116b5390a: mov    %rax,0x78(%rsp)
  0x0000000116b5390f: mov    %rcx,0x70(%rsp)
  0x0000000116b53914: mov    %rdx,0x68(%rsp)
  0x0000000116b53919: mov    %rbx,0x60(%rsp)
  0x0000000116b5391e: mov    %rbp,0x50(%rsp)
  0x0000000116b53923: mov    %rsi,0x48(%rsp)
  0x0000000116b53928: mov    %rdi,0x40(%rsp)
  0x0000000116b5392d: mov    %r8,0x38(%rsp)
  0x0000000116b53932: mov    %r9,0x30(%rsp)
  0x0000000116b53937: mov    %r10,0x28(%rsp)
  0x0000000116b5393c: mov    %r11,0x20(%rsp)
  0x0000000116b53941: mov    %r12,0x18(%rsp)
  0x0000000116b53946: mov    %r13,0x10(%rsp)
  0x0000000116b5394b: mov    %r14,0x8(%rsp)
  0x0000000116b53950: mov    %r15,(%rsp)
  0x0000000116b53954: movabs $0x10ccaf968,%rdi
  0x0000000116b5395e: movabs $0x116b538fe,%rsi
  0x0000000116b53968: mov    %rsp,%rdx
  0x0000000116b5396b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5396f: callq  0x000000010c7dd830
  0x0000000116b53974: hlt    
  0x0000000116b53975: add    0x1d0(%r15),%rax
  0x0000000116b5397c: sub    0x1d8(%r15),%rax
  0x0000000116b53983: add    $0x16000,%rax
  0x0000000116b5398a: cmp    %rax,%rsp
  0x0000000116b5398d: ja     0x0000000116b5399d
  0x0000000116b53993: pop    %rax
  0x0000000116b53994: mov    %r13,%rsp
  0x0000000116b53997: push   %rax
  0x0000000116b53998: jmpq   0x0000000116b35280
  0x0000000116b5399d: pop    %rax
  0x0000000116b5399e: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b539a3: test   %edx,%edx
  0x0000000116b539a5: jle    0x0000000116b539b4
  0x0000000116b539ab: pushq  $0x0
  0x0000000116b539b0: dec    %edx
  0x0000000116b539b2: jg     0x0000000116b539ab
  0x0000000116b539b4: push   %rax
  0x0000000116b539b5: push   %rbp
  0x0000000116b539b6: mov    %rsp,%rbp
  0x0000000116b539b9: push   %r13
  0x0000000116b539bb: pushq  $0x0
  0x0000000116b539c0: mov    0x10(%rbx),%r13
  0x0000000116b539c4: lea    0x30(%r13),%r13
  0x0000000116b539c8: push   %rbx
  0x0000000116b539c9: pushq  $0x0
  0x0000000116b539ce: mov    0x10(%rbx),%rdx
  0x0000000116b539d2: mov    0x8(%rdx),%rdx
  0x0000000116b539d6: mov    0x18(%rdx),%rdx
  0x0000000116b539da: push   %rdx
  0x0000000116b539db: push   %r14
  0x0000000116b539dd: push   %r13
  0x0000000116b539df: pushq  $0x0
  0x0000000116b539e4: mov    %rsp,(%rsp)
  0x0000000116b539e8: mov    0x28(%rbx),%eax
  0x0000000116b539eb: test   $0x100,%eax
  0x0000000116b539f0: je     0x0000000116b53a6d
  0x0000000116b539f6: mov    %rsp,-0x28(%rsp)
  0x0000000116b539fb: sub    $0x80,%rsp
  0x0000000116b53a02: mov    %rax,0x78(%rsp)
  0x0000000116b53a07: mov    %rcx,0x70(%rsp)
  0x0000000116b53a0c: mov    %rdx,0x68(%rsp)
  0x0000000116b53a11: mov    %rbx,0x60(%rsp)
  0x0000000116b53a16: mov    %rbp,0x50(%rsp)
  0x0000000116b53a1b: mov    %rsi,0x48(%rsp)
  0x0000000116b53a20: mov    %rdi,0x40(%rsp)
  0x0000000116b53a25: mov    %r8,0x38(%rsp)
  0x0000000116b53a2a: mov    %r9,0x30(%rsp)
  0x0000000116b53a2f: mov    %r10,0x28(%rsp)
  0x0000000116b53a34: mov    %r11,0x20(%rsp)
  0x0000000116b53a39: mov    %r12,0x18(%rsp)
  0x0000000116b53a3e: mov    %r13,0x10(%rsp)
  0x0000000116b53a43: mov    %r14,0x8(%rsp)
  0x0000000116b53a48: mov    %r15,(%rsp)
  0x0000000116b53a4c: movabs $0x10ccafdb0,%rdi
  0x0000000116b53a56: movabs $0x116b539f6,%rsi
  0x0000000116b53a60: mov    %rsp,%rdx
  0x0000000116b53a63: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53a67: callq  0x000000010c7dd830
  0x0000000116b53a6c: hlt    
  0x0000000116b53a6d: test   $0x400,%eax
  0x0000000116b53a72: je     0x0000000116b53aef
  0x0000000116b53a78: mov    %rsp,-0x28(%rsp)
  0x0000000116b53a7d: sub    $0x80,%rsp
  0x0000000116b53a84: mov    %rax,0x78(%rsp)
  0x0000000116b53a89: mov    %rcx,0x70(%rsp)
  0x0000000116b53a8e: mov    %rdx,0x68(%rsp)
  0x0000000116b53a93: mov    %rbx,0x60(%rsp)
  0x0000000116b53a98: mov    %rbp,0x50(%rsp)
  0x0000000116b53a9d: mov    %rsi,0x48(%rsp)
  0x0000000116b53aa2: mov    %rdi,0x40(%rsp)
  0x0000000116b53aa7: mov    %r8,0x38(%rsp)
  0x0000000116b53aac: mov    %r9,0x30(%rsp)
  0x0000000116b53ab1: mov    %r10,0x28(%rsp)
  0x0000000116b53ab6: mov    %r11,0x20(%rsp)
  0x0000000116b53abb: mov    %r12,0x18(%rsp)
  0x0000000116b53ac0: mov    %r13,0x10(%rsp)
  0x0000000116b53ac5: mov    %r14,0x8(%rsp)
  0x0000000116b53aca: mov    %r15,(%rsp)
  0x0000000116b53ace: movabs $0x10ccafb36,%rdi
  0x0000000116b53ad8: movabs $0x116b53a78,%rsi
  0x0000000116b53ae2: mov    %rsp,%rdx
  0x0000000116b53ae5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53ae9: callq  0x000000010c7dd830
  0x0000000116b53aee: hlt    
  0x0000000116b53aef: movb   $0x1,0x33d(%r15)
  0x0000000116b53af7: mov    %eax,-0x1000(%rsp)
  0x0000000116b53afe: mov    %eax,-0x2000(%rsp)
  0x0000000116b53b05: mov    %eax,-0x3000(%rsp)
  0x0000000116b53b0c: mov    %eax,-0x4000(%rsp)
  0x0000000116b53b13: mov    %eax,-0x5000(%rsp)
  0x0000000116b53b1a: mov    %eax,-0x6000(%rsp)
  0x0000000116b53b21: mov    %eax,-0x7000(%rsp)
  0x0000000116b53b28: mov    %eax,-0x8000(%rsp)
  0x0000000116b53b2f: mov    %eax,-0x9000(%rsp)
  0x0000000116b53b36: mov    %eax,-0xa000(%rsp)
  0x0000000116b53b3d: mov    %eax,-0xb000(%rsp)
  0x0000000116b53b44: mov    %eax,-0xc000(%rsp)
  0x0000000116b53b4b: mov    %eax,-0xd000(%rsp)
  0x0000000116b53b52: mov    %eax,-0xe000(%rsp)
  0x0000000116b53b59: mov    %eax,-0xf000(%rsp)
  0x0000000116b53b60: mov    %eax,-0x10000(%rsp)
  0x0000000116b53b67: mov    %eax,-0x11000(%rsp)
  0x0000000116b53b6e: mov    %eax,-0x12000(%rsp)
  0x0000000116b53b75: mov    %eax,-0x13000(%rsp)
  0x0000000116b53b7c: mov    %eax,-0x14000(%rsp)
  0x0000000116b53b83: mov    %eax,-0x15000(%rsp)
  0x0000000116b53b8a: mov    %eax,-0x16000(%rsp)
  0x0000000116b53b91: movb   $0x0,0x33d(%r15)
  0x0000000116b53b99: mov    0x28(%rbx),%eax
  0x0000000116b53b9c: test   $0x20,%eax
  0x0000000116b53ba1: je     0x0000000116b53c1e
  0x0000000116b53ba7: mov    %rsp,-0x28(%rsp)
  0x0000000116b53bac: sub    $0x80,%rsp
  0x0000000116b53bb3: mov    %rax,0x78(%rsp)
  0x0000000116b53bb8: mov    %rcx,0x70(%rsp)
  0x0000000116b53bbd: mov    %rdx,0x68(%rsp)
  0x0000000116b53bc2: mov    %rbx,0x60(%rsp)
  0x0000000116b53bc7: mov    %rbp,0x50(%rsp)
  0x0000000116b53bcc: mov    %rsi,0x48(%rsp)
  0x0000000116b53bd1: mov    %rdi,0x40(%rsp)
  0x0000000116b53bd6: mov    %r8,0x38(%rsp)
  0x0000000116b53bdb: mov    %r9,0x30(%rsp)
  0x0000000116b53be0: mov    %r10,0x28(%rsp)
  0x0000000116b53be5: mov    %r11,0x20(%rsp)
  0x0000000116b53bea: mov    %r12,0x18(%rsp)
  0x0000000116b53bef: mov    %r13,0x10(%rsp)
  0x0000000116b53bf4: mov    %r14,0x8(%rsp)
  0x0000000116b53bf9: mov    %r15,(%rsp)
  0x0000000116b53bfd: movabs $0x10ccafb66,%rdi
  0x0000000116b53c07: movabs $0x116b53ba7,%rsi
  0x0000000116b53c11: mov    %rsp,%rdx
  0x0000000116b53c14: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53c18: callq  0x000000010c7dd830
  0x0000000116b53c1d: hlt    
  0x0000000116b53c1e: mov    -0x40(%rbp),%rax
  0x0000000116b53c22: cmp    %rsp,%rax
  0x0000000116b53c25: je     0x0000000116b53ca2
  0x0000000116b53c2b: mov    %rsp,-0x28(%rsp)
  0x0000000116b53c30: sub    $0x80,%rsp
  0x0000000116b53c37: mov    %rax,0x78(%rsp)
  0x0000000116b53c3c: mov    %rcx,0x70(%rsp)
  0x0000000116b53c41: mov    %rdx,0x68(%rsp)
  0x0000000116b53c46: mov    %rbx,0x60(%rsp)
  0x0000000116b53c4b: mov    %rbp,0x50(%rsp)
  0x0000000116b53c50: mov    %rsi,0x48(%rsp)
  0x0000000116b53c55: mov    %rdi,0x40(%rsp)
  0x0000000116b53c5a: mov    %r8,0x38(%rsp)
  0x0000000116b53c5f: mov    %r9,0x30(%rsp)
  0x0000000116b53c64: mov    %r10,0x28(%rsp)
  0x0000000116b53c69: mov    %r11,0x20(%rsp)
  0x0000000116b53c6e: mov    %r12,0x18(%rsp)
  0x0000000116b53c73: mov    %r13,0x10(%rsp)
  0x0000000116b53c78: mov    %r14,0x8(%rsp)
  0x0000000116b53c7d: mov    %r15,(%rsp)
  0x0000000116b53c81: movabs $0x10ccafb83,%rdi
  0x0000000116b53c8b: movabs $0x116b53c2b,%rsi
  0x0000000116b53c95: mov    %rsp,%rdx
  0x0000000116b53c98: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53c9c: callq  0x000000010c7dd830
  0x0000000116b53ca1: hlt    
  0x0000000116b53ca2: cmpb   $0x0,-0x9d36aa7(%rip)        # 0x000000010ce1d202
  0x0000000116b53ca9: je     0x0000000116b53d5e
  0x0000000116b53caf: mov    -0x18(%rbp),%rsi
  0x0000000116b53cb3: mov    %r15,%rdi
  0x0000000116b53cb6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b53cbe: je     0x0000000116b53d3b
  0x0000000116b53cc4: mov    %rsp,-0x28(%rsp)
  0x0000000116b53cc9: sub    $0x80,%rsp
  0x0000000116b53cd0: mov    %rax,0x78(%rsp)
  0x0000000116b53cd5: mov    %rcx,0x70(%rsp)
  0x0000000116b53cda: mov    %rdx,0x68(%rsp)
  0x0000000116b53cdf: mov    %rbx,0x60(%rsp)
  0x0000000116b53ce4: mov    %rbp,0x50(%rsp)
  0x0000000116b53ce9: mov    %rsi,0x48(%rsp)
  0x0000000116b53cee: mov    %rdi,0x40(%rsp)
  0x0000000116b53cf3: mov    %r8,0x38(%rsp)
  0x0000000116b53cf8: mov    %r9,0x30(%rsp)
  0x0000000116b53cfd: mov    %r10,0x28(%rsp)
  0x0000000116b53d02: mov    %r11,0x20(%rsp)
  0x0000000116b53d07: mov    %r12,0x18(%rsp)
  0x0000000116b53d0c: mov    %r13,0x10(%rsp)
  0x0000000116b53d11: mov    %r14,0x8(%rsp)
  0x0000000116b53d16: mov    %r15,(%rsp)
  0x0000000116b53d1a: movabs $0x10cc2363b,%rdi
  0x0000000116b53d24: movabs $0x116b53cc4,%rsi
  0x0000000116b53d2e: mov    %rsp,%rdx
  0x0000000116b53d31: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53d35: callq  0x000000010c7dd830
  0x0000000116b53d3a: hlt    
  0x0000000116b53d3b: test   $0xf,%esp
  0x0000000116b53d41: je     0x0000000116b53d59
  0x0000000116b53d47: sub    $0x8,%rsp
  0x0000000116b53d4b: callq  0x000000010c9c9630
  0x0000000116b53d50: add    $0x8,%rsp
  0x0000000116b53d54: jmpq   0x0000000116b53d5e
  0x0000000116b53d59: callq  0x000000010c9c9630
  0x0000000116b53d5e: movzbl 0x0(%r13),%ebx
  0x0000000116b53d63: movabs $0x10ce3b680,%r10
  0x0000000116b53d6d: jmpq   *(%r10,%rbx,8)
  0x0000000116b53d71: nop
  0x0000000116b53d72: nop
  0x0000000116b53d73: nop
  0x0000000116b53d74: nop
  0x0000000116b53d75: nop
  0x0000000116b53d76: nop
  0x0000000116b53d77: nop
  0x0000000116b53d78: int3   
  0x0000000116b53d79: int3   
  0x0000000116b53d7a: int3   
  0x0000000116b53d7b: int3   
  0x0000000116b53d7c: int3   
  0x0000000116b53d7d: int3   
  0x0000000116b53d7e: int3   
  0x0000000116b53d7f: int3   

----------------------------------------------------------------------
method entry point (kind = zerolocals_synchronized)  [0x0000000116b53dc0, 0x0000000116b546c0]  2304 bytes

  0x0000000116b53dc0: mov    0x10(%rbx),%rdx
  0x0000000116b53dc4: movzwl 0x2c(%rdx),%ecx
  0x0000000116b53dc8: movzwl 0x2a(%rdx),%edx
  0x0000000116b53dcc: sub    %ecx,%edx
  0x0000000116b53dce: cmp    $0x1f6,%edx
  0x0000000116b53dd4: jbe    0x0000000116b53f1d
  0x0000000116b53dda: mov    %rdx,%rax
  0x0000000116b53ddd: shl    $0x3,%rax
  0x0000000116b53de1: add    $0x50,%rax
  0x0000000116b53de5: cmpq   $0x0,0x1d0(%r15)
  0x0000000116b53df0: jne    0x0000000116b53e6d
  0x0000000116b53df6: mov    %rsp,-0x28(%rsp)
  0x0000000116b53dfb: sub    $0x80,%rsp
  0x0000000116b53e02: mov    %rax,0x78(%rsp)
  0x0000000116b53e07: mov    %rcx,0x70(%rsp)
  0x0000000116b53e0c: mov    %rdx,0x68(%rsp)
  0x0000000116b53e11: mov    %rbx,0x60(%rsp)
  0x0000000116b53e16: mov    %rbp,0x50(%rsp)
  0x0000000116b53e1b: mov    %rsi,0x48(%rsp)
  0x0000000116b53e20: mov    %rdi,0x40(%rsp)
  0x0000000116b53e25: mov    %r8,0x38(%rsp)
  0x0000000116b53e2a: mov    %r9,0x30(%rsp)
  0x0000000116b53e2f: mov    %r10,0x28(%rsp)
  0x0000000116b53e34: mov    %r11,0x20(%rsp)
  0x0000000116b53e39: mov    %r12,0x18(%rsp)
  0x0000000116b53e3e: mov    %r13,0x10(%rsp)
  0x0000000116b53e43: mov    %r14,0x8(%rsp)
  0x0000000116b53e48: mov    %r15,(%rsp)
  0x0000000116b53e4c: movabs $0x10ccaf955,%rdi
  0x0000000116b53e56: movabs $0x116b53df6,%rsi
  0x0000000116b53e60: mov    %rsp,%rdx
  0x0000000116b53e63: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53e67: callq  0x000000010c7dd830
  0x0000000116b53e6c: hlt    
  0x0000000116b53e6d: cmpq   $0x0,0x1d8(%r15)
  0x0000000116b53e78: jne    0x0000000116b53ef5
  0x0000000116b53e7e: mov    %rsp,-0x28(%rsp)
  0x0000000116b53e83: sub    $0x80,%rsp
  0x0000000116b53e8a: mov    %rax,0x78(%rsp)
  0x0000000116b53e8f: mov    %rcx,0x70(%rsp)
  0x0000000116b53e94: mov    %rdx,0x68(%rsp)
  0x0000000116b53e99: mov    %rbx,0x60(%rsp)
  0x0000000116b53e9e: mov    %rbp,0x50(%rsp)
  0x0000000116b53ea3: mov    %rsi,0x48(%rsp)
  0x0000000116b53ea8: mov    %rdi,0x40(%rsp)
  0x0000000116b53ead: mov    %r8,0x38(%rsp)
  0x0000000116b53eb2: mov    %r9,0x30(%rsp)
  0x0000000116b53eb7: mov    %r10,0x28(%rsp)
  0x0000000116b53ebc: mov    %r11,0x20(%rsp)
  0x0000000116b53ec1: mov    %r12,0x18(%rsp)
  0x0000000116b53ec6: mov    %r13,0x10(%rsp)
  0x0000000116b53ecb: mov    %r14,0x8(%rsp)
  0x0000000116b53ed0: mov    %r15,(%rsp)
  0x0000000116b53ed4: movabs $0x10ccaf968,%rdi
  0x0000000116b53ede: movabs $0x116b53e7e,%rsi
  0x0000000116b53ee8: mov    %rsp,%rdx
  0x0000000116b53eeb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53eef: callq  0x000000010c7dd830
  0x0000000116b53ef4: hlt    
  0x0000000116b53ef5: add    0x1d0(%r15),%rax
  0x0000000116b53efc: sub    0x1d8(%r15),%rax
  0x0000000116b53f03: add    $0x16000,%rax
  0x0000000116b53f0a: cmp    %rax,%rsp
  0x0000000116b53f0d: ja     0x0000000116b53f1d
  0x0000000116b53f13: pop    %rax
  0x0000000116b53f14: mov    %r13,%rsp
  0x0000000116b53f17: push   %rax
  0x0000000116b53f18: jmpq   0x0000000116b35280
  0x0000000116b53f1d: pop    %rax
  0x0000000116b53f1e: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b53f23: test   %edx,%edx
  0x0000000116b53f25: jle    0x0000000116b53f34
  0x0000000116b53f2b: pushq  $0x0
  0x0000000116b53f30: dec    %edx
  0x0000000116b53f32: jg     0x0000000116b53f2b
  0x0000000116b53f34: push   %rax
  0x0000000116b53f35: push   %rbp
  0x0000000116b53f36: mov    %rsp,%rbp
  0x0000000116b53f39: push   %r13
  0x0000000116b53f3b: pushq  $0x0
  0x0000000116b53f40: mov    0x10(%rbx),%r13
  0x0000000116b53f44: lea    0x30(%r13),%r13
  0x0000000116b53f48: push   %rbx
  0x0000000116b53f49: pushq  $0x0
  0x0000000116b53f4e: mov    0x10(%rbx),%rdx
  0x0000000116b53f52: mov    0x8(%rdx),%rdx
  0x0000000116b53f56: mov    0x18(%rdx),%rdx
  0x0000000116b53f5a: push   %rdx
  0x0000000116b53f5b: push   %r14
  0x0000000116b53f5d: push   %r13
  0x0000000116b53f5f: pushq  $0x0
  0x0000000116b53f64: mov    %rsp,(%rsp)
  0x0000000116b53f68: mov    0x28(%rbx),%eax
  0x0000000116b53f6b: test   $0x100,%eax
  0x0000000116b53f70: je     0x0000000116b53fed
  0x0000000116b53f76: mov    %rsp,-0x28(%rsp)
  0x0000000116b53f7b: sub    $0x80,%rsp
  0x0000000116b53f82: mov    %rax,0x78(%rsp)
  0x0000000116b53f87: mov    %rcx,0x70(%rsp)
  0x0000000116b53f8c: mov    %rdx,0x68(%rsp)
  0x0000000116b53f91: mov    %rbx,0x60(%rsp)
  0x0000000116b53f96: mov    %rbp,0x50(%rsp)
  0x0000000116b53f9b: mov    %rsi,0x48(%rsp)
  0x0000000116b53fa0: mov    %rdi,0x40(%rsp)
  0x0000000116b53fa5: mov    %r8,0x38(%rsp)
  0x0000000116b53faa: mov    %r9,0x30(%rsp)
  0x0000000116b53faf: mov    %r10,0x28(%rsp)
  0x0000000116b53fb4: mov    %r11,0x20(%rsp)
  0x0000000116b53fb9: mov    %r12,0x18(%rsp)
  0x0000000116b53fbe: mov    %r13,0x10(%rsp)
  0x0000000116b53fc3: mov    %r14,0x8(%rsp)
  0x0000000116b53fc8: mov    %r15,(%rsp)
  0x0000000116b53fcc: movabs $0x10ccafdb0,%rdi
  0x0000000116b53fd6: movabs $0x116b53f76,%rsi
  0x0000000116b53fe0: mov    %rsp,%rdx
  0x0000000116b53fe3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b53fe7: callq  0x000000010c7dd830
  0x0000000116b53fec: hlt    
  0x0000000116b53fed: test   $0x400,%eax
  0x0000000116b53ff2: je     0x0000000116b5406f
  0x0000000116b53ff8: mov    %rsp,-0x28(%rsp)
  0x0000000116b53ffd: sub    $0x80,%rsp
  0x0000000116b54004: mov    %rax,0x78(%rsp)
  0x0000000116b54009: mov    %rcx,0x70(%rsp)
  0x0000000116b5400e: mov    %rdx,0x68(%rsp)
  0x0000000116b54013: mov    %rbx,0x60(%rsp)
  0x0000000116b54018: mov    %rbp,0x50(%rsp)
  0x0000000116b5401d: mov    %rsi,0x48(%rsp)
  0x0000000116b54022: mov    %rdi,0x40(%rsp)
  0x0000000116b54027: mov    %r8,0x38(%rsp)
  0x0000000116b5402c: mov    %r9,0x30(%rsp)
  0x0000000116b54031: mov    %r10,0x28(%rsp)
  0x0000000116b54036: mov    %r11,0x20(%rsp)
  0x0000000116b5403b: mov    %r12,0x18(%rsp)
  0x0000000116b54040: mov    %r13,0x10(%rsp)
  0x0000000116b54045: mov    %r14,0x8(%rsp)
  0x0000000116b5404a: mov    %r15,(%rsp)
  0x0000000116b5404e: movabs $0x10ccafb36,%rdi
  0x0000000116b54058: movabs $0x116b53ff8,%rsi
  0x0000000116b54062: mov    %rsp,%rdx
  0x0000000116b54065: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54069: callq  0x000000010c7dd830
  0x0000000116b5406e: hlt    
  0x0000000116b5406f: movb   $0x1,0x33d(%r15)
  0x0000000116b54077: mov    %eax,-0x1000(%rsp)
  0x0000000116b5407e: mov    %eax,-0x2000(%rsp)
  0x0000000116b54085: mov    %eax,-0x3000(%rsp)
  0x0000000116b5408c: mov    %eax,-0x4000(%rsp)
  0x0000000116b54093: mov    %eax,-0x5000(%rsp)
  0x0000000116b5409a: mov    %eax,-0x6000(%rsp)
  0x0000000116b540a1: mov    %eax,-0x7000(%rsp)
  0x0000000116b540a8: mov    %eax,-0x8000(%rsp)
  0x0000000116b540af: mov    %eax,-0x9000(%rsp)
  0x0000000116b540b6: mov    %eax,-0xa000(%rsp)
  0x0000000116b540bd: mov    %eax,-0xb000(%rsp)
  0x0000000116b540c4: mov    %eax,-0xc000(%rsp)
  0x0000000116b540cb: mov    %eax,-0xd000(%rsp)
  0x0000000116b540d2: mov    %eax,-0xe000(%rsp)
  0x0000000116b540d9: mov    %eax,-0xf000(%rsp)
  0x0000000116b540e0: mov    %eax,-0x10000(%rsp)
  0x0000000116b540e7: mov    %eax,-0x11000(%rsp)
  0x0000000116b540ee: mov    %eax,-0x12000(%rsp)
  0x0000000116b540f5: mov    %eax,-0x13000(%rsp)
  0x0000000116b540fc: mov    %eax,-0x14000(%rsp)
  0x0000000116b54103: mov    %eax,-0x15000(%rsp)
  0x0000000116b5410a: mov    %eax,-0x16000(%rsp)
  0x0000000116b54111: movb   $0x0,0x33d(%r15)
  0x0000000116b54119: mov    0x28(%rbx),%eax
  0x0000000116b5411c: test   $0x20,%eax
  0x0000000116b54121: jne    0x0000000116b5419e
  0x0000000116b54127: mov    %rsp,-0x28(%rsp)
  0x0000000116b5412c: sub    $0x80,%rsp
  0x0000000116b54133: mov    %rax,0x78(%rsp)
  0x0000000116b54138: mov    %rcx,0x70(%rsp)
  0x0000000116b5413d: mov    %rdx,0x68(%rsp)
  0x0000000116b54142: mov    %rbx,0x60(%rsp)
  0x0000000116b54147: mov    %rbp,0x50(%rsp)
  0x0000000116b5414c: mov    %rsi,0x48(%rsp)
  0x0000000116b54151: mov    %rdi,0x40(%rsp)
  0x0000000116b54156: mov    %r8,0x38(%rsp)
  0x0000000116b5415b: mov    %r9,0x30(%rsp)
  0x0000000116b54160: mov    %r10,0x28(%rsp)
  0x0000000116b54165: mov    %r11,0x20(%rsp)
  0x0000000116b5416a: mov    %r12,0x18(%rsp)
  0x0000000116b5416f: mov    %r13,0x10(%rsp)
  0x0000000116b54174: mov    %r14,0x8(%rsp)
  0x0000000116b54179: mov    %r15,(%rsp)
  0x0000000116b5417d: movabs $0x10ccaf9c1,%rdi
  0x0000000116b54187: movabs $0x116b54127,%rsi
  0x0000000116b54191: mov    %rsp,%rdx
  0x0000000116b54194: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54198: callq  0x000000010c7dd830
  0x0000000116b5419d: hlt    
  0x0000000116b5419e: mov    0x28(%rbx),%eax
  0x0000000116b541a1: test   $0x8,%eax
  0x0000000116b541a6: mov    (%r14),%rax
  0x0000000116b541a9: je     0x0000000116b5423f
  0x0000000116b541af: mov    0x10(%rbx),%rax
  0x0000000116b541b3: mov    0x8(%rax),%rax
  0x0000000116b541b7: mov    0x20(%rax),%rax
  0x0000000116b541bb: mov    0x70(%rax),%rax
  0x0000000116b541bf: test   %rax,%rax
  0x0000000116b541c2: jne    0x0000000116b5423f
  0x0000000116b541c8: mov    %rsp,-0x28(%rsp)
  0x0000000116b541cd: sub    $0x80,%rsp
  0x0000000116b541d4: mov    %rax,0x78(%rsp)
  0x0000000116b541d9: mov    %rcx,0x70(%rsp)
  0x0000000116b541de: mov    %rdx,0x68(%rsp)
  0x0000000116b541e3: mov    %rbx,0x60(%rsp)
  0x0000000116b541e8: mov    %rbp,0x50(%rsp)
  0x0000000116b541ed: mov    %rsi,0x48(%rsp)
  0x0000000116b541f2: mov    %rdi,0x40(%rsp)
  0x0000000116b541f7: mov    %r8,0x38(%rsp)
  0x0000000116b541fc: mov    %r9,0x30(%rsp)
  0x0000000116b54201: mov    %r10,0x28(%rsp)
  0x0000000116b54206: mov    %r11,0x20(%rsp)
  0x0000000116b5420b: mov    %r12,0x18(%rsp)
  0x0000000116b54210: mov    %r13,0x10(%rsp)
  0x0000000116b54215: mov    %r14,0x8(%rsp)
  0x0000000116b5421a: mov    %r15,(%rsp)
  0x0000000116b5421e: movabs $0x10ccaf9e5,%rdi
  0x0000000116b54228: movabs $0x116b541c8,%rsi
  0x0000000116b54232: mov    %rsp,%rdx
  0x0000000116b54235: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54239: callq  0x000000010c7dd830
  0x0000000116b5423e: hlt    
  0x0000000116b5423f: sub    $0x10,%rsp
  0x0000000116b54243: mov    %rsp,-0x40(%rbp)
  0x0000000116b54247: mov    %rax,0x8(%rsp)
  0x0000000116b5424c: mov    %rsp,%rsi
  0x0000000116b5424f: mov    0x8(%rsi),%rcx
  0x0000000116b54253: mov    (%rcx),%rax
  0x0000000116b54256: mov    %rax,%r10
  0x0000000116b54259: and    $0x7,%r10
  0x0000000116b5425d: cmp    $0x5,%r10
  0x0000000116b54261: jne    0x0000000116b542eb
  0x0000000116b54267: mov    0x8(%rcx),%r10d
  0x0000000116b5426b: shl    $0x3,%r10
  0x0000000116b5426f: mov    0xb0(%r10),%r10
  0x0000000116b54276: or     %r15,%r10
  0x0000000116b54279: xor    %rax,%r10
  0x0000000116b5427c: and    $0xffffffffffffff87,%r10
  0x0000000116b54280: je     0x0000000116b5456d
  0x0000000116b54286: test   $0x7,%r10
  0x0000000116b5428d: jne    0x0000000116b542d7
  0x0000000116b5428f: test   $0x300,%r10
  0x0000000116b54296: jne    0x0000000116b542b5
  0x0000000116b54298: and    $0x37f,%rax
  0x0000000116b5429f: mov    %rax,%r10
  0x0000000116b542a2: or     %r15,%r10
  0x0000000116b542a5: lock cmpxchg %r10,(%rcx)
  0x0000000116b542aa: jne    0x0000000116b54314
  0x0000000116b542b0: jmpq   0x0000000116b5456d
  0x0000000116b542b5: mov    0x8(%rcx),%r10d
  0x0000000116b542b9: shl    $0x3,%r10
  0x0000000116b542bd: mov    0xb0(%r10),%r10
  0x0000000116b542c4: or     %r15,%r10
  0x0000000116b542c7: lock cmpxchg %r10,(%rcx)
  0x0000000116b542cc: jne    0x0000000116b54314
  0x0000000116b542d2: jmpq   0x0000000116b5456d
  0x0000000116b542d7: mov    0x8(%rcx),%r10d
  0x0000000116b542db: shl    $0x3,%r10
  0x0000000116b542df: mov    0xb0(%r10),%r10
  0x0000000116b542e6: lock cmpxchg %r10,(%rcx)
  0x0000000116b542eb: mov    $0x1,%eax
  0x0000000116b542f0: or     (%rcx),%rax
  0x0000000116b542f3: mov    %rax,(%rsi)
  0x0000000116b542f6: lock cmpxchg %rsi,(%rcx)
  0x0000000116b542fb: je     0x0000000116b5456d
  0x0000000116b54301: sub    %rsp,%rax
  0x0000000116b54304: and    $0xfffffffffffff007,%rax
  0x0000000116b5430b: mov    %rax,(%rsi)
  0x0000000116b5430e: je     0x0000000116b5456d
  0x0000000116b54314: callq  0x0000000116b5431e
  0x0000000116b54319: jmpq   0x0000000116b5456d
  0x0000000116b5431e: lea    0x8(%rsp),%rax
  0x0000000116b54323: mov    %r13,-0x38(%rbp)
  0x0000000116b54327: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5432f: je     0x0000000116b543ac
  0x0000000116b54335: mov    %rsp,-0x28(%rsp)
  0x0000000116b5433a: sub    $0x80,%rsp
  0x0000000116b54341: mov    %rax,0x78(%rsp)
  0x0000000116b54346: mov    %rcx,0x70(%rsp)
  0x0000000116b5434b: mov    %rdx,0x68(%rsp)
  0x0000000116b54350: mov    %rbx,0x60(%rsp)
  0x0000000116b54355: mov    %rbp,0x50(%rsp)
  0x0000000116b5435a: mov    %rsi,0x48(%rsp)
  0x0000000116b5435f: mov    %rdi,0x40(%rsp)
  0x0000000116b54364: mov    %r8,0x38(%rsp)
  0x0000000116b54369: mov    %r9,0x30(%rsp)
  0x0000000116b5436e: mov    %r10,0x28(%rsp)
  0x0000000116b54373: mov    %r11,0x20(%rsp)
  0x0000000116b54378: mov    %r12,0x18(%rsp)
  0x0000000116b5437d: mov    %r13,0x10(%rsp)
  0x0000000116b54382: mov    %r14,0x8(%rsp)
  0x0000000116b54387: mov    %r15,(%rsp)
  0x0000000116b5438b: movabs $0x10cc2363b,%rdi
  0x0000000116b54395: movabs $0x116b54335,%rsi
  0x0000000116b5439f: mov    %rsp,%rdx
  0x0000000116b543a2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b543a6: callq  0x000000010c7dd830
  0x0000000116b543ab: hlt    
  0x0000000116b543ac: push   %r10
  0x0000000116b543ae: cmp    -0x9d0db05(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b543b5: je     0x0000000116b54432
  ;; call_VM_base: heap base corrupted?
  0x0000000116b543bb: mov    %rsp,-0x28(%rsp)
  0x0000000116b543c0: sub    $0x80,%rsp
  0x0000000116b543c7: mov    %rax,0x78(%rsp)
  0x0000000116b543cc: mov    %rcx,0x70(%rsp)
  0x0000000116b543d1: mov    %rdx,0x68(%rsp)
  0x0000000116b543d6: mov    %rbx,0x60(%rsp)
  0x0000000116b543db: mov    %rbp,0x50(%rsp)
  0x0000000116b543e0: mov    %rsi,0x48(%rsp)
  0x0000000116b543e5: mov    %rdi,0x40(%rsp)
  0x0000000116b543ea: mov    %r8,0x38(%rsp)
  0x0000000116b543ef: mov    %r9,0x30(%rsp)
  0x0000000116b543f4: mov    %r10,0x28(%rsp)
  0x0000000116b543f9: mov    %r11,0x20(%rsp)
  0x0000000116b543fe: mov    %r12,0x18(%rsp)
  0x0000000116b54403: mov    %r13,0x10(%rsp)
  0x0000000116b54408: mov    %r14,0x8(%rsp)
  0x0000000116b5440d: mov    %r15,(%rsp)
  0x0000000116b54411: movabs $0x10cc63f17,%rdi
  0x0000000116b5441b: movabs $0x116b543bb,%rsi
  0x0000000116b54425: mov    %rsp,%rdx
  0x0000000116b54428: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5442c: callq  0x000000010c7dd830
  0x0000000116b54431: hlt    
  0x0000000116b54432: pop    %r10
  0x0000000116b54434: mov    %r15,%rdi
  0x0000000116b54437: mov    %rbp,0x290(%r15)
  0x0000000116b5443e: mov    %rax,0x280(%r15)
  0x0000000116b54445: test   $0xf,%esp
  0x0000000116b5444b: je     0x0000000116b54463
  0x0000000116b54451: sub    $0x8,%rsp
  0x0000000116b54455: callq  0x000000010c588c20
  0x0000000116b5445a: add    $0x8,%rsp
  0x0000000116b5445e: jmpq   0x0000000116b54468
  0x0000000116b54463: callq  0x000000010c588c20
  0x0000000116b54468: push   %rax
  0x0000000116b54469: push   %rdi
  0x0000000116b5446a: push   %rsi
  0x0000000116b5446b: push   %rdx
  0x0000000116b5446c: push   %rcx
  0x0000000116b5446d: push   %r8
  0x0000000116b5446f: push   %r9
  0x0000000116b54471: push   %r10
  0x0000000116b54473: mov    %rsp,%r10
  0x0000000116b54476: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5447a: push   %r10
  0x0000000116b5447c: push   %r11
  0x0000000116b5447e: mov    $0x109,%edi
  0x0000000116b54483: movabs $0x7ff815049fd5,%r10
  0x0000000116b5448d: callq  *%r10
  0x0000000116b54490: pop    %r11
  0x0000000116b54492: pop    %rsp
  0x0000000116b54493: pop    %r10
  0x0000000116b54495: pop    %r9
  0x0000000116b54497: pop    %r8
  0x0000000116b54499: pop    %rcx
  0x0000000116b5449a: pop    %rdx
  0x0000000116b5449b: pop    %rsi
  0x0000000116b5449c: pop    %rdi
  0x0000000116b5449d: cmp    %rax,%r15
  0x0000000116b544a0: je     0x0000000116b5451d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b544a6: mov    %rsp,-0x28(%rsp)
  0x0000000116b544ab: sub    $0x80,%rsp
  0x0000000116b544b2: mov    %rax,0x78(%rsp)
  0x0000000116b544b7: mov    %rcx,0x70(%rsp)
  0x0000000116b544bc: mov    %rdx,0x68(%rsp)
  0x0000000116b544c1: mov    %rbx,0x60(%rsp)
  0x0000000116b544c6: mov    %rbp,0x50(%rsp)
  0x0000000116b544cb: mov    %rsi,0x48(%rsp)
  0x0000000116b544d0: mov    %rdi,0x40(%rsp)
  0x0000000116b544d5: mov    %r8,0x38(%rsp)
  0x0000000116b544da: mov    %r9,0x30(%rsp)
  0x0000000116b544df: mov    %r10,0x28(%rsp)
  0x0000000116b544e4: mov    %r11,0x20(%rsp)
  0x0000000116b544e9: mov    %r12,0x18(%rsp)
  0x0000000116b544ee: mov    %r13,0x10(%rsp)
  0x0000000116b544f3: mov    %r14,0x8(%rsp)
  0x0000000116b544f8: mov    %r15,(%rsp)
  0x0000000116b544fc: movabs $0x10cc6405e,%rdi
  0x0000000116b54506: movabs $0x116b544a6,%rsi
  0x0000000116b54510: mov    %rsp,%rdx
  0x0000000116b54513: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54517: callq  0x000000010c7dd830
  0x0000000116b5451c: hlt    
  0x0000000116b5451d: pop    %rax
  0x0000000116b5451e: movabs $0x0,%r10
  0x0000000116b54528: mov    %r10,0x280(%r15)
  0x0000000116b5452f: movabs $0x0,%r10
  0x0000000116b54539: mov    %r10,0x290(%r15)
  0x0000000116b54540: movabs $0x0,%r10
  0x0000000116b5454a: mov    %r10,0x288(%r15)
  0x0000000116b54551: cmpq   $0x0,0x8(%r15)
  0x0000000116b54559: je     0x0000000116b54564
  0x0000000116b5455f: jmpq   0x0000000116b30420
  0x0000000116b54564: mov    -0x38(%rbp),%r13
  0x0000000116b54568: mov    -0x30(%rbp),%r14
  0x0000000116b5456c: retq   
  0x0000000116b5456d: mov    -0x40(%rbp),%rax
  0x0000000116b54571: cmp    %rsp,%rax
  0x0000000116b54574: je     0x0000000116b545f1
  0x0000000116b5457a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5457f: sub    $0x80,%rsp
  0x0000000116b54586: mov    %rax,0x78(%rsp)
  0x0000000116b5458b: mov    %rcx,0x70(%rsp)
  0x0000000116b54590: mov    %rdx,0x68(%rsp)
  0x0000000116b54595: mov    %rbx,0x60(%rsp)
  0x0000000116b5459a: mov    %rbp,0x50(%rsp)
  0x0000000116b5459f: mov    %rsi,0x48(%rsp)
  0x0000000116b545a4: mov    %rdi,0x40(%rsp)
  0x0000000116b545a9: mov    %r8,0x38(%rsp)
  0x0000000116b545ae: mov    %r9,0x30(%rsp)
  0x0000000116b545b3: mov    %r10,0x28(%rsp)
  0x0000000116b545b8: mov    %r11,0x20(%rsp)
  0x0000000116b545bd: mov    %r12,0x18(%rsp)
  0x0000000116b545c2: mov    %r13,0x10(%rsp)
  0x0000000116b545c7: mov    %r14,0x8(%rsp)
  0x0000000116b545cc: mov    %r15,(%rsp)
  0x0000000116b545d0: movabs $0x10ccafb83,%rdi
  0x0000000116b545da: movabs $0x116b5457a,%rsi
  0x0000000116b545e4: mov    %rsp,%rdx
  0x0000000116b545e7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b545eb: callq  0x000000010c7dd830
  0x0000000116b545f0: hlt    
  0x0000000116b545f1: cmpb   $0x0,-0x9d373f6(%rip)        # 0x000000010ce1d202
  0x0000000116b545f8: je     0x0000000116b546ad
  0x0000000116b545fe: mov    -0x18(%rbp),%rsi
  0x0000000116b54602: mov    %r15,%rdi
  0x0000000116b54605: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5460d: je     0x0000000116b5468a
  0x0000000116b54613: mov    %rsp,-0x28(%rsp)
  0x0000000116b54618: sub    $0x80,%rsp
  0x0000000116b5461f: mov    %rax,0x78(%rsp)
  0x0000000116b54624: mov    %rcx,0x70(%rsp)
  0x0000000116b54629: mov    %rdx,0x68(%rsp)
  0x0000000116b5462e: mov    %rbx,0x60(%rsp)
  0x0000000116b54633: mov    %rbp,0x50(%rsp)
  0x0000000116b54638: mov    %rsi,0x48(%rsp)
  0x0000000116b5463d: mov    %rdi,0x40(%rsp)
  0x0000000116b54642: mov    %r8,0x38(%rsp)
  0x0000000116b54647: mov    %r9,0x30(%rsp)
  0x0000000116b5464c: mov    %r10,0x28(%rsp)
  0x0000000116b54651: mov    %r11,0x20(%rsp)
  0x0000000116b54656: mov    %r12,0x18(%rsp)
  0x0000000116b5465b: mov    %r13,0x10(%rsp)
  0x0000000116b54660: mov    %r14,0x8(%rsp)
  0x0000000116b54665: mov    %r15,(%rsp)
  0x0000000116b54669: movabs $0x10cc2363b,%rdi
  0x0000000116b54673: movabs $0x116b54613,%rsi
  0x0000000116b5467d: mov    %rsp,%rdx
  0x0000000116b54680: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54684: callq  0x000000010c7dd830
  0x0000000116b54689: hlt    
  0x0000000116b5468a: test   $0xf,%esp
  0x0000000116b54690: je     0x0000000116b546a8
  0x0000000116b54696: sub    $0x8,%rsp
  0x0000000116b5469a: callq  0x000000010c9c9630
  0x0000000116b5469f: add    $0x8,%rsp
  0x0000000116b546a3: jmpq   0x0000000116b546ad
  0x0000000116b546a8: callq  0x000000010c9c9630
  0x0000000116b546ad: movzbl 0x0(%r13),%ebx
  0x0000000116b546b2: movabs $0x10ce3b680,%r10
  0x0000000116b546bc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
method entry point (kind = empty)  [0x0000000116b54700, 0x0000000116b54c60]  1376 bytes

  0x0000000116b54700: cmpl   $0x0,-0x9d2e0ca(%rip)        # 0x000000010ce26640
  0x0000000116b5470a: jne    0x0000000116b54716
  0x0000000116b54710: pop    %rax
  0x0000000116b54711: mov    %r13,%rsp
  0x0000000116b54714: jmpq   *%rax
  0x0000000116b54716: mov    0x10(%rbx),%rdx
  0x0000000116b5471a: movzwl 0x2c(%rdx),%ecx
  0x0000000116b5471e: movzwl 0x2a(%rdx),%edx
  0x0000000116b54722: sub    %ecx,%edx
  0x0000000116b54724: cmp    $0x1f6,%edx
  0x0000000116b5472a: jbe    0x0000000116b54873
  0x0000000116b54730: mov    %rdx,%rax
  0x0000000116b54733: shl    $0x3,%rax
  0x0000000116b54737: add    $0x50,%rax
  0x0000000116b5473b: cmpq   $0x0,0x1d0(%r15)
  0x0000000116b54746: jne    0x0000000116b547c3
  0x0000000116b5474c: mov    %rsp,-0x28(%rsp)
  0x0000000116b54751: sub    $0x80,%rsp
  0x0000000116b54758: mov    %rax,0x78(%rsp)
  0x0000000116b5475d: mov    %rcx,0x70(%rsp)
  0x0000000116b54762: mov    %rdx,0x68(%rsp)
  0x0000000116b54767: mov    %rbx,0x60(%rsp)
  0x0000000116b5476c: mov    %rbp,0x50(%rsp)
  0x0000000116b54771: mov    %rsi,0x48(%rsp)
  0x0000000116b54776: mov    %rdi,0x40(%rsp)
  0x0000000116b5477b: mov    %r8,0x38(%rsp)
  0x0000000116b54780: mov    %r9,0x30(%rsp)
  0x0000000116b54785: mov    %r10,0x28(%rsp)
  0x0000000116b5478a: mov    %r11,0x20(%rsp)
  0x0000000116b5478f: mov    %r12,0x18(%rsp)
  0x0000000116b54794: mov    %r13,0x10(%rsp)
  0x0000000116b54799: mov    %r14,0x8(%rsp)
  0x0000000116b5479e: mov    %r15,(%rsp)
  0x0000000116b547a2: movabs $0x10ccaf955,%rdi
  0x0000000116b547ac: movabs $0x116b5474c,%rsi
  0x0000000116b547b6: mov    %rsp,%rdx
  0x0000000116b547b9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b547bd: callq  0x000000010c7dd830
  0x0000000116b547c2: hlt    
  0x0000000116b547c3: cmpq   $0x0,0x1d8(%r15)
  0x0000000116b547ce: jne    0x0000000116b5484b
  0x0000000116b547d4: mov    %rsp,-0x28(%rsp)
  0x0000000116b547d9: sub    $0x80,%rsp
  0x0000000116b547e0: mov    %rax,0x78(%rsp)
  0x0000000116b547e5: mov    %rcx,0x70(%rsp)
  0x0000000116b547ea: mov    %rdx,0x68(%rsp)
  0x0000000116b547ef: mov    %rbx,0x60(%rsp)
  0x0000000116b547f4: mov    %rbp,0x50(%rsp)
  0x0000000116b547f9: mov    %rsi,0x48(%rsp)
  0x0000000116b547fe: mov    %rdi,0x40(%rsp)
  0x0000000116b54803: mov    %r8,0x38(%rsp)
  0x0000000116b54808: mov    %r9,0x30(%rsp)
  0x0000000116b5480d: mov    %r10,0x28(%rsp)
  0x0000000116b54812: mov    %r11,0x20(%rsp)
  0x0000000116b54817: mov    %r12,0x18(%rsp)
  0x0000000116b5481c: mov    %r13,0x10(%rsp)
  0x0000000116b54821: mov    %r14,0x8(%rsp)
  0x0000000116b54826: mov    %r15,(%rsp)
  0x0000000116b5482a: movabs $0x10ccaf968,%rdi
  0x0000000116b54834: movabs $0x116b547d4,%rsi
  0x0000000116b5483e: mov    %rsp,%rdx
  0x0000000116b54841: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54845: callq  0x000000010c7dd830
  0x0000000116b5484a: hlt    
  0x0000000116b5484b: add    0x1d0(%r15),%rax
  0x0000000116b54852: sub    0x1d8(%r15),%rax
  0x0000000116b54859: add    $0x16000,%rax
  0x0000000116b54860: cmp    %rax,%rsp
  0x0000000116b54863: ja     0x0000000116b54873
  0x0000000116b54869: pop    %rax
  0x0000000116b5486a: mov    %r13,%rsp
  0x0000000116b5486d: push   %rax
  0x0000000116b5486e: jmpq   0x0000000116b35280
  0x0000000116b54873: pop    %rax
  0x0000000116b54874: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b54879: test   %edx,%edx
  0x0000000116b5487b: jle    0x0000000116b5488a
  0x0000000116b54881: pushq  $0x0
  0x0000000116b54886: dec    %edx
  0x0000000116b54888: jg     0x0000000116b54881
  0x0000000116b5488a: push   %rax
  0x0000000116b5488b: push   %rbp
  0x0000000116b5488c: mov    %rsp,%rbp
  0x0000000116b5488f: push   %r13
  0x0000000116b54891: pushq  $0x0
  0x0000000116b54896: mov    0x10(%rbx),%r13
  0x0000000116b5489a: lea    0x30(%r13),%r13
  0x0000000116b5489e: push   %rbx
  0x0000000116b5489f: pushq  $0x0
  0x0000000116b548a4: mov    0x10(%rbx),%rdx
  0x0000000116b548a8: mov    0x8(%rdx),%rdx
  0x0000000116b548ac: mov    0x18(%rdx),%rdx
  0x0000000116b548b0: push   %rdx
  0x0000000116b548b1: push   %r14
  0x0000000116b548b3: push   %r13
  0x0000000116b548b5: pushq  $0x0
  0x0000000116b548ba: mov    %rsp,(%rsp)
  0x0000000116b548be: mov    0x28(%rbx),%eax
  0x0000000116b548c1: test   $0x100,%eax
  0x0000000116b548c6: je     0x0000000116b54943
  0x0000000116b548cc: mov    %rsp,-0x28(%rsp)
  0x0000000116b548d1: sub    $0x80,%rsp
  0x0000000116b548d8: mov    %rax,0x78(%rsp)
  0x0000000116b548dd: mov    %rcx,0x70(%rsp)
  0x0000000116b548e2: mov    %rdx,0x68(%rsp)
  0x0000000116b548e7: mov    %rbx,0x60(%rsp)
  0x0000000116b548ec: mov    %rbp,0x50(%rsp)
  0x0000000116b548f1: mov    %rsi,0x48(%rsp)
  0x0000000116b548f6: mov    %rdi,0x40(%rsp)
  0x0000000116b548fb: mov    %r8,0x38(%rsp)
  0x0000000116b54900: mov    %r9,0x30(%rsp)
  0x0000000116b54905: mov    %r10,0x28(%rsp)
  0x0000000116b5490a: mov    %r11,0x20(%rsp)
  0x0000000116b5490f: mov    %r12,0x18(%rsp)
  0x0000000116b54914: mov    %r13,0x10(%rsp)
  0x0000000116b54919: mov    %r14,0x8(%rsp)
  0x0000000116b5491e: mov    %r15,(%rsp)
  0x0000000116b54922: movabs $0x10ccafdb0,%rdi
  0x0000000116b5492c: movabs $0x116b548cc,%rsi
  0x0000000116b54936: mov    %rsp,%rdx
  0x0000000116b54939: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5493d: callq  0x000000010c7dd830
  0x0000000116b54942: hlt    
  0x0000000116b54943: test   $0x400,%eax
  0x0000000116b54948: je     0x0000000116b549c5
  0x0000000116b5494e: mov    %rsp,-0x28(%rsp)
  0x0000000116b54953: sub    $0x80,%rsp
  0x0000000116b5495a: mov    %rax,0x78(%rsp)
  0x0000000116b5495f: mov    %rcx,0x70(%rsp)
  0x0000000116b54964: mov    %rdx,0x68(%rsp)
  0x0000000116b54969: mov    %rbx,0x60(%rsp)
  0x0000000116b5496e: mov    %rbp,0x50(%rsp)
  0x0000000116b54973: mov    %rsi,0x48(%rsp)
  0x0000000116b54978: mov    %rdi,0x40(%rsp)
  0x0000000116b5497d: mov    %r8,0x38(%rsp)
  0x0000000116b54982: mov    %r9,0x30(%rsp)
  0x0000000116b54987: mov    %r10,0x28(%rsp)
  0x0000000116b5498c: mov    %r11,0x20(%rsp)
  0x0000000116b54991: mov    %r12,0x18(%rsp)
  0x0000000116b54996: mov    %r13,0x10(%rsp)
  0x0000000116b5499b: mov    %r14,0x8(%rsp)
  0x0000000116b549a0: mov    %r15,(%rsp)
  0x0000000116b549a4: movabs $0x10ccafb36,%rdi
  0x0000000116b549ae: movabs $0x116b5494e,%rsi
  0x0000000116b549b8: mov    %rsp,%rdx
  0x0000000116b549bb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b549bf: callq  0x000000010c7dd830
  0x0000000116b549c4: hlt    
  0x0000000116b549c5: movb   $0x1,0x33d(%r15)
  0x0000000116b549cd: mov    %eax,-0x1000(%rsp)
  0x0000000116b549d4: mov    %eax,-0x2000(%rsp)
  0x0000000116b549db: mov    %eax,-0x3000(%rsp)
  0x0000000116b549e2: mov    %eax,-0x4000(%rsp)
  0x0000000116b549e9: mov    %eax,-0x5000(%rsp)
  0x0000000116b549f0: mov    %eax,-0x6000(%rsp)
  0x0000000116b549f7: mov    %eax,-0x7000(%rsp)
  0x0000000116b549fe: mov    %eax,-0x8000(%rsp)
  0x0000000116b54a05: mov    %eax,-0x9000(%rsp)
  0x0000000116b54a0c: mov    %eax,-0xa000(%rsp)
  0x0000000116b54a13: mov    %eax,-0xb000(%rsp)
  0x0000000116b54a1a: mov    %eax,-0xc000(%rsp)
  0x0000000116b54a21: mov    %eax,-0xd000(%rsp)
  0x0000000116b54a28: mov    %eax,-0xe000(%rsp)
  0x0000000116b54a2f: mov    %eax,-0xf000(%rsp)
  0x0000000116b54a36: mov    %eax,-0x10000(%rsp)
  0x0000000116b54a3d: mov    %eax,-0x11000(%rsp)
  0x0000000116b54a44: mov    %eax,-0x12000(%rsp)
  0x0000000116b54a4b: mov    %eax,-0x13000(%rsp)
  0x0000000116b54a52: mov    %eax,-0x14000(%rsp)
  0x0000000116b54a59: mov    %eax,-0x15000(%rsp)
  0x0000000116b54a60: mov    %eax,-0x16000(%rsp)
  0x0000000116b54a67: movb   $0x0,0x33d(%r15)
  0x0000000116b54a6f: mov    0x28(%rbx),%eax
  0x0000000116b54a72: test   $0x20,%eax
  0x0000000116b54a77: je     0x0000000116b54af4
  0x0000000116b54a7d: mov    %rsp,-0x28(%rsp)
  0x0000000116b54a82: sub    $0x80,%rsp
  0x0000000116b54a89: mov    %rax,0x78(%rsp)
  0x0000000116b54a8e: mov    %rcx,0x70(%rsp)
  0x0000000116b54a93: mov    %rdx,0x68(%rsp)
  0x0000000116b54a98: mov    %rbx,0x60(%rsp)
  0x0000000116b54a9d: mov    %rbp,0x50(%rsp)
  0x0000000116b54aa2: mov    %rsi,0x48(%rsp)
  0x0000000116b54aa7: mov    %rdi,0x40(%rsp)
  0x0000000116b54aac: mov    %r8,0x38(%rsp)
  0x0000000116b54ab1: mov    %r9,0x30(%rsp)
  0x0000000116b54ab6: mov    %r10,0x28(%rsp)
  0x0000000116b54abb: mov    %r11,0x20(%rsp)
  0x0000000116b54ac0: mov    %r12,0x18(%rsp)
  0x0000000116b54ac5: mov    %r13,0x10(%rsp)
  0x0000000116b54aca: mov    %r14,0x8(%rsp)
  0x0000000116b54acf: mov    %r15,(%rsp)
  0x0000000116b54ad3: movabs $0x10ccafb66,%rdi
  0x0000000116b54add: movabs $0x116b54a7d,%rsi
  0x0000000116b54ae7: mov    %rsp,%rdx
  0x0000000116b54aea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54aee: callq  0x000000010c7dd830
  0x0000000116b54af3: hlt    
  0x0000000116b54af4: mov    -0x40(%rbp),%rax
  0x0000000116b54af8: cmp    %rsp,%rax
  0x0000000116b54afb: je     0x0000000116b54b78
  0x0000000116b54b01: mov    %rsp,-0x28(%rsp)
  0x0000000116b54b06: sub    $0x80,%rsp
  0x0000000116b54b0d: mov    %rax,0x78(%rsp)
  0x0000000116b54b12: mov    %rcx,0x70(%rsp)
  0x0000000116b54b17: mov    %rdx,0x68(%rsp)
  0x0000000116b54b1c: mov    %rbx,0x60(%rsp)
  0x0000000116b54b21: mov    %rbp,0x50(%rsp)
  0x0000000116b54b26: mov    %rsi,0x48(%rsp)
  0x0000000116b54b2b: mov    %rdi,0x40(%rsp)
  0x0000000116b54b30: mov    %r8,0x38(%rsp)
  0x0000000116b54b35: mov    %r9,0x30(%rsp)
  0x0000000116b54b3a: mov    %r10,0x28(%rsp)
  0x0000000116b54b3f: mov    %r11,0x20(%rsp)
  0x0000000116b54b44: mov    %r12,0x18(%rsp)
  0x0000000116b54b49: mov    %r13,0x10(%rsp)
  0x0000000116b54b4e: mov    %r14,0x8(%rsp)
  0x0000000116b54b53: mov    %r15,(%rsp)
  0x0000000116b54b57: movabs $0x10ccafb83,%rdi
  0x0000000116b54b61: movabs $0x116b54b01,%rsi
  0x0000000116b54b6b: mov    %rsp,%rdx
  0x0000000116b54b6e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54b72: callq  0x000000010c7dd830
  0x0000000116b54b77: hlt    
  0x0000000116b54b78: cmpb   $0x0,-0x9d3797d(%rip)        # 0x000000010ce1d202
  0x0000000116b54b7f: je     0x0000000116b54c34
  0x0000000116b54b85: mov    -0x18(%rbp),%rsi
  0x0000000116b54b89: mov    %r15,%rdi
  0x0000000116b54b8c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b54b94: je     0x0000000116b54c11
  0x0000000116b54b9a: mov    %rsp,-0x28(%rsp)
  0x0000000116b54b9f: sub    $0x80,%rsp
  0x0000000116b54ba6: mov    %rax,0x78(%rsp)
  0x0000000116b54bab: mov    %rcx,0x70(%rsp)
  0x0000000116b54bb0: mov    %rdx,0x68(%rsp)
  0x0000000116b54bb5: mov    %rbx,0x60(%rsp)
  0x0000000116b54bba: mov    %rbp,0x50(%rsp)
  0x0000000116b54bbf: mov    %rsi,0x48(%rsp)
  0x0000000116b54bc4: mov    %rdi,0x40(%rsp)
  0x0000000116b54bc9: mov    %r8,0x38(%rsp)
  0x0000000116b54bce: mov    %r9,0x30(%rsp)
  0x0000000116b54bd3: mov    %r10,0x28(%rsp)
  0x0000000116b54bd8: mov    %r11,0x20(%rsp)
  0x0000000116b54bdd: mov    %r12,0x18(%rsp)
  0x0000000116b54be2: mov    %r13,0x10(%rsp)
  0x0000000116b54be7: mov    %r14,0x8(%rsp)
  0x0000000116b54bec: mov    %r15,(%rsp)
  0x0000000116b54bf0: movabs $0x10cc2363b,%rdi
  0x0000000116b54bfa: movabs $0x116b54b9a,%rsi
  0x0000000116b54c04: mov    %rsp,%rdx
  0x0000000116b54c07: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54c0b: callq  0x000000010c7dd830
  0x0000000116b54c10: hlt    
  0x0000000116b54c11: test   $0xf,%esp
  0x0000000116b54c17: je     0x0000000116b54c2f
  0x0000000116b54c1d: sub    $0x8,%rsp
  0x0000000116b54c21: callq  0x000000010c9c9630
  0x0000000116b54c26: add    $0x8,%rsp
  0x0000000116b54c2a: jmpq   0x0000000116b54c34
  0x0000000116b54c2f: callq  0x000000010c9c9630
  0x0000000116b54c34: movzbl 0x0(%r13),%ebx
  0x0000000116b54c39: movabs $0x10ce3b680,%r10
  0x0000000116b54c43: jmpq   *(%r10,%rbx,8)
  0x0000000116b54c47: nop
  0x0000000116b54c48: int3   
  0x0000000116b54c49: int3   
  0x0000000116b54c4a: int3   
  0x0000000116b54c4b: int3   
  0x0000000116b54c4c: int3   
  0x0000000116b54c4d: int3   
  0x0000000116b54c4e: int3   
  0x0000000116b54c4f: int3   
  0x0000000116b54c50: int3   
  0x0000000116b54c51: int3   
  0x0000000116b54c52: int3   
  0x0000000116b54c53: int3   
  0x0000000116b54c54: int3   
  0x0000000116b54c55: int3   
  0x0000000116b54c56: int3   
  0x0000000116b54c57: int3   
  0x0000000116b54c58: int3   
  0x0000000116b54c59: int3   
  0x0000000116b54c5a: int3   
  0x0000000116b54c5b: int3   
  0x0000000116b54c5c: int3   
  0x0000000116b54c5d: int3   
  0x0000000116b54c5e: int3   
  0x0000000116b54c5f: int3   

----------------------------------------------------------------------
method entry point (kind = accessor)  [0x0000000116b54ca0, 0x0000000116b553a0]  1792 bytes

  0x0000000116b54ca0: cmpl   $0x0,-0x9d2e66a(%rip)        # 0x000000010ce26640
  0x0000000116b54caa: jne    0x0000000116b54e67
  0x0000000116b54cb0: mov    0x8(%rsp),%rax
  0x0000000116b54cb5: test   %rax,%rax
  0x0000000116b54cb8: je     0x0000000116b54e67
  0x0000000116b54cbe: mov    0x10(%rbx),%rdx
  0x0000000116b54cc2: mov    0x8(%rdx),%rdi
  0x0000000116b54cc6: mov    0x30(%rdx),%edx
  0x0000000116b54cc9: shr    $0x10,%edx
  0x0000000116b54ccc: shl    $0x2,%edx
  0x0000000116b54ccf: mov    0x18(%rdi),%rdi
  0x0000000116b54cd3: mov    0x10(%rdi,%rdx,8),%ecx
  0x0000000116b54cd7: shr    $0x10,%ecx
  0x0000000116b54cda: and    $0xff,%ecx
  0x0000000116b54ce0: cmp    $0xb4,%ecx
  0x0000000116b54ce6: jne    0x0000000116b54e67
  0x0000000116b54cec: mov    0x20(%rdi,%rdx,8),%rcx
  0x0000000116b54cf1: mov    0x28(%rdi,%rdx,8),%edx
  0x0000000116b54cf5: shr    $0x1c,%edx
  0x0000000116b54cf8: cmp    $0x8,%edx
  0x0000000116b54cfb: jne    0x0000000116b54d95
  0x0000000116b54d01: mov    (%rax,%rcx,1),%eax
  0x0000000116b54d04: push   %r10
  0x0000000116b54d06: cmp    -0x9d0e45d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b54d0d: je     0x0000000116b54d8a
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b54d13: mov    %rsp,-0x28(%rsp)
  0x0000000116b54d18: sub    $0x80,%rsp
  0x0000000116b54d1f: mov    %rax,0x78(%rsp)
  0x0000000116b54d24: mov    %rcx,0x70(%rsp)
  0x0000000116b54d29: mov    %rdx,0x68(%rsp)
  0x0000000116b54d2e: mov    %rbx,0x60(%rsp)
  0x0000000116b54d33: mov    %rbp,0x50(%rsp)
  0x0000000116b54d38: mov    %rsi,0x48(%rsp)
  0x0000000116b54d3d: mov    %rdi,0x40(%rsp)
  0x0000000116b54d42: mov    %r8,0x38(%rsp)
  0x0000000116b54d47: mov    %r9,0x30(%rsp)
  0x0000000116b54d4c: mov    %r10,0x28(%rsp)
  0x0000000116b54d51: mov    %r11,0x20(%rsp)
  0x0000000116b54d56: mov    %r12,0x18(%rsp)
  0x0000000116b54d5b: mov    %r13,0x10(%rsp)
  0x0000000116b54d60: mov    %r14,0x8(%rsp)
  0x0000000116b54d65: mov    %r15,(%rsp)
  0x0000000116b54d69: movabs $0x10cc64abb,%rdi
  0x0000000116b54d73: movabs $0x116b54d13,%rsi
  0x0000000116b54d7d: mov    %rsp,%rdx
  0x0000000116b54d80: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54d84: callq  0x000000010c7dd830
  0x0000000116b54d89: hlt    
  0x0000000116b54d8a: pop    %r10
  0x0000000116b54d8c: shl    $0x3,%rax
  0x0000000116b54d90: jmpq   0x0000000116b54e60
  0x0000000116b54d95: cmp    $0x4,%edx
  0x0000000116b54d98: jne    0x0000000116b54da6
  0x0000000116b54d9e: mov    (%rax,%rcx,1),%eax
  0x0000000116b54da1: jmpq   0x0000000116b54e60
  0x0000000116b54da6: cmp    $0x0,%edx
  0x0000000116b54da9: jne    0x0000000116b54db8
  0x0000000116b54daf: movsbl (%rax,%rcx,1),%eax
  0x0000000116b54db3: jmpq   0x0000000116b54e60
  0x0000000116b54db8: cmp    $0x1,%edx
  0x0000000116b54dbb: jne    0x0000000116b54dca
  0x0000000116b54dc1: movsbl (%rax,%rcx,1),%eax
  0x0000000116b54dc5: jmpq   0x0000000116b54e60
  0x0000000116b54dca: cmp    $0x3,%edx
  0x0000000116b54dcd: jne    0x0000000116b54ddc
  0x0000000116b54dd3: movswl (%rax,%rcx,1),%eax
  0x0000000116b54dd7: jmpq   0x0000000116b54e60
  0x0000000116b54ddc: cmp    $0x2,%edx
  0x0000000116b54ddf: je     0x0000000116b54e5c
  0x0000000116b54de5: mov    %rsp,-0x28(%rsp)
  0x0000000116b54dea: sub    $0x80,%rsp
  0x0000000116b54df1: mov    %rax,0x78(%rsp)
  0x0000000116b54df6: mov    %rcx,0x70(%rsp)
  0x0000000116b54dfb: mov    %rdx,0x68(%rsp)
  0x0000000116b54e00: mov    %rbx,0x60(%rsp)
  0x0000000116b54e05: mov    %rbp,0x50(%rsp)
  0x0000000116b54e0a: mov    %rsi,0x48(%rsp)
  0x0000000116b54e0f: mov    %rdi,0x40(%rsp)
  0x0000000116b54e14: mov    %r8,0x38(%rsp)
  0x0000000116b54e19: mov    %r9,0x30(%rsp)
  0x0000000116b54e1e: mov    %r10,0x28(%rsp)
  0x0000000116b54e23: mov    %r11,0x20(%rsp)
  0x0000000116b54e28: mov    %r12,0x18(%rsp)
  0x0000000116b54e2d: mov    %r13,0x10(%rsp)
  0x0000000116b54e32: mov    %r14,0x8(%rsp)
  0x0000000116b54e37: mov    %r15,(%rsp)
  0x0000000116b54e3b: movabs $0x10ccafaf6,%rdi
  0x0000000116b54e45: movabs $0x116b54de5,%rsi
  0x0000000116b54e4f: mov    %rsp,%rdx
  0x0000000116b54e52: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54e56: callq  0x000000010c7dd830
  0x0000000116b54e5b: hlt    
  0x0000000116b54e5c: movzwl (%rax,%rcx,1),%eax
  0x0000000116b54e60: pop    %rdi
  0x0000000116b54e61: mov    %r13,%rsp
  0x0000000116b54e64: jmpq   *%rdi
  0x0000000116b54e66: retq   
  0x0000000116b54e67: mov    0x10(%rbx),%rdx
  0x0000000116b54e6b: movzwl 0x2c(%rdx),%ecx
  0x0000000116b54e6f: movzwl 0x2a(%rdx),%edx
  0x0000000116b54e73: sub    %ecx,%edx
  0x0000000116b54e75: cmp    $0x1f6,%edx
  0x0000000116b54e7b: jbe    0x0000000116b54fc4
  0x0000000116b54e81: mov    %rdx,%rax
  0x0000000116b54e84: shl    $0x3,%rax
  0x0000000116b54e88: add    $0x50,%rax
  0x0000000116b54e8c: cmpq   $0x0,0x1d0(%r15)
  0x0000000116b54e97: jne    0x0000000116b54f14
  0x0000000116b54e9d: mov    %rsp,-0x28(%rsp)
  0x0000000116b54ea2: sub    $0x80,%rsp
  0x0000000116b54ea9: mov    %rax,0x78(%rsp)
  0x0000000116b54eae: mov    %rcx,0x70(%rsp)
  0x0000000116b54eb3: mov    %rdx,0x68(%rsp)
  0x0000000116b54eb8: mov    %rbx,0x60(%rsp)
  0x0000000116b54ebd: mov    %rbp,0x50(%rsp)
  0x0000000116b54ec2: mov    %rsi,0x48(%rsp)
  0x0000000116b54ec7: mov    %rdi,0x40(%rsp)
  0x0000000116b54ecc: mov    %r8,0x38(%rsp)
  0x0000000116b54ed1: mov    %r9,0x30(%rsp)
  0x0000000116b54ed6: mov    %r10,0x28(%rsp)
  0x0000000116b54edb: mov    %r11,0x20(%rsp)
  0x0000000116b54ee0: mov    %r12,0x18(%rsp)
  0x0000000116b54ee5: mov    %r13,0x10(%rsp)
  0x0000000116b54eea: mov    %r14,0x8(%rsp)
  0x0000000116b54eef: mov    %r15,(%rsp)
  0x0000000116b54ef3: movabs $0x10ccaf955,%rdi
  0x0000000116b54efd: movabs $0x116b54e9d,%rsi
  0x0000000116b54f07: mov    %rsp,%rdx
  0x0000000116b54f0a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54f0e: callq  0x000000010c7dd830
  0x0000000116b54f13: hlt    
  0x0000000116b54f14: cmpq   $0x0,0x1d8(%r15)
  0x0000000116b54f1f: jne    0x0000000116b54f9c
  0x0000000116b54f25: mov    %rsp,-0x28(%rsp)
  0x0000000116b54f2a: sub    $0x80,%rsp
  0x0000000116b54f31: mov    %rax,0x78(%rsp)
  0x0000000116b54f36: mov    %rcx,0x70(%rsp)
  0x0000000116b54f3b: mov    %rdx,0x68(%rsp)
  0x0000000116b54f40: mov    %rbx,0x60(%rsp)
  0x0000000116b54f45: mov    %rbp,0x50(%rsp)
  0x0000000116b54f4a: mov    %rsi,0x48(%rsp)
  0x0000000116b54f4f: mov    %rdi,0x40(%rsp)
  0x0000000116b54f54: mov    %r8,0x38(%rsp)
  0x0000000116b54f59: mov    %r9,0x30(%rsp)
  0x0000000116b54f5e: mov    %r10,0x28(%rsp)
  0x0000000116b54f63: mov    %r11,0x20(%rsp)
  0x0000000116b54f68: mov    %r12,0x18(%rsp)
  0x0000000116b54f6d: mov    %r13,0x10(%rsp)
  0x0000000116b54f72: mov    %r14,0x8(%rsp)
  0x0000000116b54f77: mov    %r15,(%rsp)
  0x0000000116b54f7b: movabs $0x10ccaf968,%rdi
  0x0000000116b54f85: movabs $0x116b54f25,%rsi
  0x0000000116b54f8f: mov    %rsp,%rdx
  0x0000000116b54f92: and    $0xfffffffffffffff0,%rsp
  0x0000000116b54f96: callq  0x000000010c7dd830
  0x0000000116b54f9b: hlt    
  0x0000000116b54f9c: add    0x1d0(%r15),%rax
  0x0000000116b54fa3: sub    0x1d8(%r15),%rax
  0x0000000116b54faa: add    $0x16000,%rax
  0x0000000116b54fb1: cmp    %rax,%rsp
  0x0000000116b54fb4: ja     0x0000000116b54fc4
  0x0000000116b54fba: pop    %rax
  0x0000000116b54fbb: mov    %r13,%rsp
  0x0000000116b54fbe: push   %rax
  0x0000000116b54fbf: jmpq   0x0000000116b35280
  0x0000000116b54fc4: pop    %rax
  0x0000000116b54fc5: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b54fca: test   %edx,%edx
  0x0000000116b54fcc: jle    0x0000000116b54fdb
  0x0000000116b54fd2: pushq  $0x0
  0x0000000116b54fd7: dec    %edx
  0x0000000116b54fd9: jg     0x0000000116b54fd2
  0x0000000116b54fdb: push   %rax
  0x0000000116b54fdc: push   %rbp
  0x0000000116b54fdd: mov    %rsp,%rbp
  0x0000000116b54fe0: push   %r13
  0x0000000116b54fe2: pushq  $0x0
  0x0000000116b54fe7: mov    0x10(%rbx),%r13
  0x0000000116b54feb: lea    0x30(%r13),%r13
  0x0000000116b54fef: push   %rbx
  0x0000000116b54ff0: pushq  $0x0
  0x0000000116b54ff5: mov    0x10(%rbx),%rdx
  0x0000000116b54ff9: mov    0x8(%rdx),%rdx
  0x0000000116b54ffd: mov    0x18(%rdx),%rdx
  0x0000000116b55001: push   %rdx
  0x0000000116b55002: push   %r14
  0x0000000116b55004: push   %r13
  0x0000000116b55006: pushq  $0x0
  0x0000000116b5500b: mov    %rsp,(%rsp)
  0x0000000116b5500f: mov    0x28(%rbx),%eax
  0x0000000116b55012: test   $0x100,%eax
  0x0000000116b55017: je     0x0000000116b55094
  0x0000000116b5501d: mov    %rsp,-0x28(%rsp)
  0x0000000116b55022: sub    $0x80,%rsp
  0x0000000116b55029: mov    %rax,0x78(%rsp)
  0x0000000116b5502e: mov    %rcx,0x70(%rsp)
  0x0000000116b55033: mov    %rdx,0x68(%rsp)
  0x0000000116b55038: mov    %rbx,0x60(%rsp)
  0x0000000116b5503d: mov    %rbp,0x50(%rsp)
  0x0000000116b55042: mov    %rsi,0x48(%rsp)
  0x0000000116b55047: mov    %rdi,0x40(%rsp)
  0x0000000116b5504c: mov    %r8,0x38(%rsp)
  0x0000000116b55051: mov    %r9,0x30(%rsp)
  0x0000000116b55056: mov    %r10,0x28(%rsp)
  0x0000000116b5505b: mov    %r11,0x20(%rsp)
  0x0000000116b55060: mov    %r12,0x18(%rsp)
  0x0000000116b55065: mov    %r13,0x10(%rsp)
  0x0000000116b5506a: mov    %r14,0x8(%rsp)
  0x0000000116b5506f: mov    %r15,(%rsp)
  0x0000000116b55073: movabs $0x10ccafdb0,%rdi
  0x0000000116b5507d: movabs $0x116b5501d,%rsi
  0x0000000116b55087: mov    %rsp,%rdx
  0x0000000116b5508a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5508e: callq  0x000000010c7dd830
  0x0000000116b55093: hlt    
  0x0000000116b55094: test   $0x400,%eax
  0x0000000116b55099: je     0x0000000116b55116
  0x0000000116b5509f: mov    %rsp,-0x28(%rsp)
  0x0000000116b550a4: sub    $0x80,%rsp
  0x0000000116b550ab: mov    %rax,0x78(%rsp)
  0x0000000116b550b0: mov    %rcx,0x70(%rsp)
  0x0000000116b550b5: mov    %rdx,0x68(%rsp)
  0x0000000116b550ba: mov    %rbx,0x60(%rsp)
  0x0000000116b550bf: mov    %rbp,0x50(%rsp)
  0x0000000116b550c4: mov    %rsi,0x48(%rsp)
  0x0000000116b550c9: mov    %rdi,0x40(%rsp)
  0x0000000116b550ce: mov    %r8,0x38(%rsp)
  0x0000000116b550d3: mov    %r9,0x30(%rsp)
  0x0000000116b550d8: mov    %r10,0x28(%rsp)
  0x0000000116b550dd: mov    %r11,0x20(%rsp)
  0x0000000116b550e2: mov    %r12,0x18(%rsp)
  0x0000000116b550e7: mov    %r13,0x10(%rsp)
  0x0000000116b550ec: mov    %r14,0x8(%rsp)
  0x0000000116b550f1: mov    %r15,(%rsp)
  0x0000000116b550f5: movabs $0x10ccafb36,%rdi
  0x0000000116b550ff: movabs $0x116b5509f,%rsi
  0x0000000116b55109: mov    %rsp,%rdx
  0x0000000116b5510c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b55110: callq  0x000000010c7dd830
  0x0000000116b55115: hlt    
  0x0000000116b55116: movb   $0x1,0x33d(%r15)
  0x0000000116b5511e: mov    %eax,-0x1000(%rsp)
  0x0000000116b55125: mov    %eax,-0x2000(%rsp)
  0x0000000116b5512c: mov    %eax,-0x3000(%rsp)
  0x0000000116b55133: mov    %eax,-0x4000(%rsp)
  0x0000000116b5513a: mov    %eax,-0x5000(%rsp)
  0x0000000116b55141: mov    %eax,-0x6000(%rsp)
  0x0000000116b55148: mov    %eax,-0x7000(%rsp)
  0x0000000116b5514f: mov    %eax,-0x8000(%rsp)
  0x0000000116b55156: mov    %eax,-0x9000(%rsp)
  0x0000000116b5515d: mov    %eax,-0xa000(%rsp)
  0x0000000116b55164: mov    %eax,-0xb000(%rsp)
  0x0000000116b5516b: mov    %eax,-0xc000(%rsp)
  0x0000000116b55172: mov    %eax,-0xd000(%rsp)
  0x0000000116b55179: mov    %eax,-0xe000(%rsp)
  0x0000000116b55180: mov    %eax,-0xf000(%rsp)
  0x0000000116b55187: mov    %eax,-0x10000(%rsp)
  0x0000000116b5518e: mov    %eax,-0x11000(%rsp)
  0x0000000116b55195: mov    %eax,-0x12000(%rsp)
  0x0000000116b5519c: mov    %eax,-0x13000(%rsp)
  0x0000000116b551a3: mov    %eax,-0x14000(%rsp)
  0x0000000116b551aa: mov    %eax,-0x15000(%rsp)
  0x0000000116b551b1: mov    %eax,-0x16000(%rsp)
  0x0000000116b551b8: movb   $0x0,0x33d(%r15)
  0x0000000116b551c0: mov    0x28(%rbx),%eax
  0x0000000116b551c3: test   $0x20,%eax
  0x0000000116b551c8: je     0x0000000116b55245
  0x0000000116b551ce: mov    %rsp,-0x28(%rsp)
  0x0000000116b551d3: sub    $0x80,%rsp
  0x0000000116b551da: mov    %rax,0x78(%rsp)
  0x0000000116b551df: mov    %rcx,0x70(%rsp)
  0x0000000116b551e4: mov    %rdx,0x68(%rsp)
  0x0000000116b551e9: mov    %rbx,0x60(%rsp)
  0x0000000116b551ee: mov    %rbp,0x50(%rsp)
  0x0000000116b551f3: mov    %rsi,0x48(%rsp)
  0x0000000116b551f8: mov    %rdi,0x40(%rsp)
  0x0000000116b551fd: mov    %r8,0x38(%rsp)
  0x0000000116b55202: mov    %r9,0x30(%rsp)
  0x0000000116b55207: mov    %r10,0x28(%rsp)
  0x0000000116b5520c: mov    %r11,0x20(%rsp)
  0x0000000116b55211: mov    %r12,0x18(%rsp)
  0x0000000116b55216: mov    %r13,0x10(%rsp)
  0x0000000116b5521b: mov    %r14,0x8(%rsp)
  0x0000000116b55220: mov    %r15,(%rsp)
  0x0000000116b55224: movabs $0x10ccafb66,%rdi
  0x0000000116b5522e: movabs $0x116b551ce,%rsi
  0x0000000116b55238: mov    %rsp,%rdx
  0x0000000116b5523b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5523f: callq  0x000000010c7dd830
  0x0000000116b55244: hlt    
  0x0000000116b55245: mov    -0x40(%rbp),%rax
  0x0000000116b55249: cmp    %rsp,%rax
  0x0000000116b5524c: je     0x0000000116b552c9
  0x0000000116b55252: mov    %rsp,-0x28(%rsp)
  0x0000000116b55257: sub    $0x80,%rsp
  0x0000000116b5525e: mov    %rax,0x78(%rsp)
  0x0000000116b55263: mov    %rcx,0x70(%rsp)
  0x0000000116b55268: mov    %rdx,0x68(%rsp)
  0x0000000116b5526d: mov    %rbx,0x60(%rsp)
  0x0000000116b55272: mov    %rbp,0x50(%rsp)
  0x0000000116b55277: mov    %rsi,0x48(%rsp)
  0x0000000116b5527c: mov    %rdi,0x40(%rsp)
  0x0000000116b55281: mov    %r8,0x38(%rsp)
  0x0000000116b55286: mov    %r9,0x30(%rsp)
  0x0000000116b5528b: mov    %r10,0x28(%rsp)
  0x0000000116b55290: mov    %r11,0x20(%rsp)
  0x0000000116b55295: mov    %r12,0x18(%rsp)
  0x0000000116b5529a: mov    %r13,0x10(%rsp)
  0x0000000116b5529f: mov    %r14,0x8(%rsp)
  0x0000000116b552a4: mov    %r15,(%rsp)
  0x0000000116b552a8: movabs $0x10ccafb83,%rdi
  0x0000000116b552b2: movabs $0x116b55252,%rsi
  0x0000000116b552bc: mov    %rsp,%rdx
  0x0000000116b552bf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b552c3: callq  0x000000010c7dd830
  0x0000000116b552c8: hlt    
  0x0000000116b552c9: cmpb   $0x0,-0x9d380ce(%rip)        # 0x000000010ce1d202
  0x0000000116b552d0: je     0x0000000116b55385
  0x0000000116b552d6: mov    -0x18(%rbp),%rsi
  0x0000000116b552da: mov    %r15,%rdi
  0x0000000116b552dd: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b552e5: je     0x0000000116b55362
  0x0000000116b552eb: mov    %rsp,-0x28(%rsp)
  0x0000000116b552f0: sub    $0x80,%rsp
  0x0000000116b552f7: mov    %rax,0x78(%rsp)
  0x0000000116b552fc: mov    %rcx,0x70(%rsp)
  0x0000000116b55301: mov    %rdx,0x68(%rsp)
  0x0000000116b55306: mov    %rbx,0x60(%rsp)
  0x0000000116b5530b: mov    %rbp,0x50(%rsp)
  0x0000000116b55310: mov    %rsi,0x48(%rsp)
  0x0000000116b55315: mov    %rdi,0x40(%rsp)
  0x0000000116b5531a: mov    %r8,0x38(%rsp)
  0x0000000116b5531f: mov    %r9,0x30(%rsp)
  0x0000000116b55324: mov    %r10,0x28(%rsp)
  0x0000000116b55329: mov    %r11,0x20(%rsp)
  0x0000000116b5532e: mov    %r12,0x18(%rsp)
  0x0000000116b55333: mov    %r13,0x10(%rsp)
  0x0000000116b55338: mov    %r14,0x8(%rsp)
  0x0000000116b5533d: mov    %r15,(%rsp)
  0x0000000116b55341: movabs $0x10cc2363b,%rdi
  0x0000000116b5534b: movabs $0x116b552eb,%rsi
  0x0000000116b55355: mov    %rsp,%rdx
  0x0000000116b55358: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5535c: callq  0x000000010c7dd830
  0x0000000116b55361: hlt    
  0x0000000116b55362: test   $0xf,%esp
  0x0000000116b55368: je     0x0000000116b55380
  0x0000000116b5536e: sub    $0x8,%rsp
  0x0000000116b55372: callq  0x000000010c9c9630
  0x0000000116b55377: add    $0x8,%rsp
  0x0000000116b5537b: jmpq   0x0000000116b55385
  0x0000000116b55380: callq  0x000000010c9c9630
  0x0000000116b55385: movzbl 0x0(%r13),%ebx
  0x0000000116b5538a: movabs $0x10ce3b680,%r10
  0x0000000116b55394: jmpq   *(%r10,%rbx,8)
  0x0000000116b55398: int3   
  0x0000000116b55399: int3   
  0x0000000116b5539a: int3   
  0x0000000116b5539b: int3   
  0x0000000116b5539c: int3   
  0x0000000116b5539d: int3   
  0x0000000116b5539e: int3   
  0x0000000116b5539f: int3   

----------------------------------------------------------------------
method entry point (kind = abstract)  [0x0000000116b553e0, 0x0000000116b556e0]  768 bytes

  0x0000000116b553e0: mov    -0x40(%rbp),%rsp
  0x0000000116b553e4: movq   $0x0,-0x10(%rbp)
  0x0000000116b553ec: mov    -0x38(%rbp),%r13
  0x0000000116b553f0: mov    -0x30(%rbp),%r14
  0x0000000116b553f4: callq  0x0000000116b553fe
  0x0000000116b553f9: jmpq   0x0000000116b5564d
  0x0000000116b553fe: lea    0x8(%rsp),%rax
  0x0000000116b55403: mov    %r13,-0x38(%rbp)
  0x0000000116b55407: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5540f: je     0x0000000116b5548c
  0x0000000116b55415: mov    %rsp,-0x28(%rsp)
  0x0000000116b5541a: sub    $0x80,%rsp
  0x0000000116b55421: mov    %rax,0x78(%rsp)
  0x0000000116b55426: mov    %rcx,0x70(%rsp)
  0x0000000116b5542b: mov    %rdx,0x68(%rsp)
  0x0000000116b55430: mov    %rbx,0x60(%rsp)
  0x0000000116b55435: mov    %rbp,0x50(%rsp)
  0x0000000116b5543a: mov    %rsi,0x48(%rsp)
  0x0000000116b5543f: mov    %rdi,0x40(%rsp)
  0x0000000116b55444: mov    %r8,0x38(%rsp)
  0x0000000116b55449: mov    %r9,0x30(%rsp)
  0x0000000116b5544e: mov    %r10,0x28(%rsp)
  0x0000000116b55453: mov    %r11,0x20(%rsp)
  0x0000000116b55458: mov    %r12,0x18(%rsp)
  0x0000000116b5545d: mov    %r13,0x10(%rsp)
  0x0000000116b55462: mov    %r14,0x8(%rsp)
  0x0000000116b55467: mov    %r15,(%rsp)
  0x0000000116b5546b: movabs $0x10cc2363b,%rdi
  0x0000000116b55475: movabs $0x116b55415,%rsi
  0x0000000116b5547f: mov    %rsp,%rdx
  0x0000000116b55482: and    $0xfffffffffffffff0,%rsp
  0x0000000116b55486: callq  0x000000010c7dd830
  0x0000000116b5548b: hlt    
  0x0000000116b5548c: push   %r10
  0x0000000116b5548e: cmp    -0x9d0ebe5(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b55495: je     0x0000000116b55512
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5549b: mov    %rsp,-0x28(%rsp)
  0x0000000116b554a0: sub    $0x80,%rsp
  0x0000000116b554a7: mov    %rax,0x78(%rsp)
  0x0000000116b554ac: mov    %rcx,0x70(%rsp)
  0x0000000116b554b1: mov    %rdx,0x68(%rsp)
  0x0000000116b554b6: mov    %rbx,0x60(%rsp)
  0x0000000116b554bb: mov    %rbp,0x50(%rsp)
  0x0000000116b554c0: mov    %rsi,0x48(%rsp)
  0x0000000116b554c5: mov    %rdi,0x40(%rsp)
  0x0000000116b554ca: mov    %r8,0x38(%rsp)
  0x0000000116b554cf: mov    %r9,0x30(%rsp)
  0x0000000116b554d4: mov    %r10,0x28(%rsp)
  0x0000000116b554d9: mov    %r11,0x20(%rsp)
  0x0000000116b554de: mov    %r12,0x18(%rsp)
  0x0000000116b554e3: mov    %r13,0x10(%rsp)
  0x0000000116b554e8: mov    %r14,0x8(%rsp)
  0x0000000116b554ed: mov    %r15,(%rsp)
  0x0000000116b554f1: movabs $0x10cc63f17,%rdi
  0x0000000116b554fb: movabs $0x116b5549b,%rsi
  0x0000000116b55505: mov    %rsp,%rdx
  0x0000000116b55508: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5550c: callq  0x000000010c7dd830
  0x0000000116b55511: hlt    
  0x0000000116b55512: pop    %r10
  0x0000000116b55514: mov    %r15,%rdi
  0x0000000116b55517: mov    %rbp,0x290(%r15)
  0x0000000116b5551e: mov    %rax,0x280(%r15)
  0x0000000116b55525: test   $0xf,%esp
  0x0000000116b5552b: je     0x0000000116b55543
  0x0000000116b55531: sub    $0x8,%rsp
  0x0000000116b55535: callq  0x000000010c588320
  0x0000000116b5553a: add    $0x8,%rsp
  0x0000000116b5553e: jmpq   0x0000000116b55548
  0x0000000116b55543: callq  0x000000010c588320
  0x0000000116b55548: push   %rax
  0x0000000116b55549: push   %rdi
  0x0000000116b5554a: push   %rsi
  0x0000000116b5554b: push   %rdx
  0x0000000116b5554c: push   %rcx
  0x0000000116b5554d: push   %r8
  0x0000000116b5554f: push   %r9
  0x0000000116b55551: push   %r10
  0x0000000116b55553: mov    %rsp,%r10
  0x0000000116b55556: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5555a: push   %r10
  0x0000000116b5555c: push   %r11
  0x0000000116b5555e: mov    $0x109,%edi
  0x0000000116b55563: movabs $0x7ff815049fd5,%r10
  0x0000000116b5556d: callq  *%r10
  0x0000000116b55570: pop    %r11
  0x0000000116b55572: pop    %rsp
  0x0000000116b55573: pop    %r10
  0x0000000116b55575: pop    %r9
  0x0000000116b55577: pop    %r8
  0x0000000116b55579: pop    %rcx
  0x0000000116b5557a: pop    %rdx
  0x0000000116b5557b: pop    %rsi
  0x0000000116b5557c: pop    %rdi
  0x0000000116b5557d: cmp    %rax,%r15
  0x0000000116b55580: je     0x0000000116b555fd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b55586: mov    %rsp,-0x28(%rsp)
  0x0000000116b5558b: sub    $0x80,%rsp
  0x0000000116b55592: mov    %rax,0x78(%rsp)
  0x0000000116b55597: mov    %rcx,0x70(%rsp)
  0x0000000116b5559c: mov    %rdx,0x68(%rsp)
  0x0000000116b555a1: mov    %rbx,0x60(%rsp)
  0x0000000116b555a6: mov    %rbp,0x50(%rsp)
  0x0000000116b555ab: mov    %rsi,0x48(%rsp)
  0x0000000116b555b0: mov    %rdi,0x40(%rsp)
  0x0000000116b555b5: mov    %r8,0x38(%rsp)
  0x0000000116b555ba: mov    %r9,0x30(%rsp)
  0x0000000116b555bf: mov    %r10,0x28(%rsp)
  0x0000000116b555c4: mov    %r11,0x20(%rsp)
  0x0000000116b555c9: mov    %r12,0x18(%rsp)
  0x0000000116b555ce: mov    %r13,0x10(%rsp)
  0x0000000116b555d3: mov    %r14,0x8(%rsp)
  0x0000000116b555d8: mov    %r15,(%rsp)
  0x0000000116b555dc: movabs $0x10cc6405e,%rdi
  0x0000000116b555e6: movabs $0x116b55586,%rsi
  0x0000000116b555f0: mov    %rsp,%rdx
  0x0000000116b555f3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b555f7: callq  0x000000010c7dd830
  0x0000000116b555fc: hlt    
  0x0000000116b555fd: pop    %rax
  0x0000000116b555fe: movabs $0x0,%r10
  0x0000000116b55608: mov    %r10,0x280(%r15)
  0x0000000116b5560f: movabs $0x0,%r10
  0x0000000116b55619: mov    %r10,0x290(%r15)
  0x0000000116b55620: movabs $0x0,%r10
  0x0000000116b5562a: mov    %r10,0x288(%r15)
  0x0000000116b55631: cmpq   $0x0,0x8(%r15)
  0x0000000116b55639: je     0x0000000116b55644
  0x0000000116b5563f: jmpq   0x0000000116b30420
  0x0000000116b55644: mov    -0x38(%rbp),%r13
  0x0000000116b55648: mov    -0x30(%rbp),%r14
  0x0000000116b5564c: retq   
  0x0000000116b5564d: mov    %rsp,-0x28(%rsp)
  0x0000000116b55652: sub    $0x80,%rsp
  0x0000000116b55659: mov    %rax,0x78(%rsp)
  0x0000000116b5565e: mov    %rcx,0x70(%rsp)
  0x0000000116b55663: mov    %rdx,0x68(%rsp)
  0x0000000116b55668: mov    %rbx,0x60(%rsp)
  0x0000000116b5566d: mov    %rbp,0x50(%rsp)
  0x0000000116b55672: mov    %rsi,0x48(%rsp)
  0x0000000116b55677: mov    %rdi,0x40(%rsp)
  0x0000000116b5567c: mov    %r8,0x38(%rsp)
  0x0000000116b55681: mov    %r9,0x30(%rsp)
  0x0000000116b55686: mov    %r10,0x28(%rsp)
  0x0000000116b5568b: mov    %r11,0x20(%rsp)
  0x0000000116b55690: mov    %r12,0x18(%rsp)
  0x0000000116b55695: mov    %r13,0x10(%rsp)
  0x0000000116b5569a: mov    %r14,0x8(%rsp)
  0x0000000116b5569f: mov    %r15,(%rsp)
  0x0000000116b556a3: movabs $0x10cb763be,%rdi
  0x0000000116b556ad: movabs $0x116b5564d,%rsi
  0x0000000116b556b7: mov    %rsp,%rdx
  0x0000000116b556ba: and    $0xfffffffffffffff0,%rsp
  0x0000000116b556be: callq  0x000000010c7dd830
  0x0000000116b556c3: hlt    
  0x0000000116b556c4: nop
  0x0000000116b556c5: nop
  0x0000000116b556c6: nop
  0x0000000116b556c7: nop
  0x0000000116b556c8: int3   
  0x0000000116b556c9: int3   
  0x0000000116b556ca: int3   
  0x0000000116b556cb: int3   
  0x0000000116b556cc: int3   
  0x0000000116b556cd: int3   
  0x0000000116b556ce: int3   
  0x0000000116b556cf: int3   
  0x0000000116b556d0: int3   
  0x0000000116b556d1: int3   
  0x0000000116b556d2: int3   
  0x0000000116b556d3: int3   
  0x0000000116b556d4: int3   
  0x0000000116b556d5: int3   
  0x0000000116b556d6: int3   
  0x0000000116b556d7: int3   
  0x0000000116b556d8: int3   
  0x0000000116b556d9: int3   
  0x0000000116b556da: int3   
  0x0000000116b556db: int3   
  0x0000000116b556dc: int3   
  0x0000000116b556dd: int3   
  0x0000000116b556de: int3   
  0x0000000116b556df: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sin)  [0x0000000116b55720, 0x0000000116b55a80]  864 bytes

  0x0000000116b55720: fldl   0x8(%rsp)
  0x0000000116b55724: fldl   -0x9e79dd2(%rip)        # 0x000000010ccdb958
  0x0000000116b5572a: fld    %st(1)
  0x0000000116b5572c: fabs   
  0x0000000116b5572e: fucomip %st(1),%st
  0x0000000116b55730: ffree  %st(0)
  0x0000000116b55732: fincstp 
  0x0000000116b55734: ja     0x0000000116b55741
  0x0000000116b5573a: fsin   
  0x0000000116b5573c: jmpq   0x0000000116b55a5b
  0x0000000116b55741: mov    %rsp,-0x28(%rsp)
  0x0000000116b55746: sub    $0x80,%rsp
  0x0000000116b5574d: mov    %rax,0x78(%rsp)
  0x0000000116b55752: mov    %rcx,0x70(%rsp)
  0x0000000116b55757: mov    %rdx,0x68(%rsp)
  0x0000000116b5575c: mov    %rbx,0x60(%rsp)
  0x0000000116b55761: mov    %rbp,0x50(%rsp)
  0x0000000116b55766: mov    %rsi,0x48(%rsp)
  0x0000000116b5576b: mov    %rdi,0x40(%rsp)
  0x0000000116b55770: mov    %r8,0x38(%rsp)
  0x0000000116b55775: mov    %r9,0x30(%rsp)
  0x0000000116b5577a: mov    %r10,0x28(%rsp)
  0x0000000116b5577f: mov    %r11,0x20(%rsp)
  0x0000000116b55784: mov    %r12,0x18(%rsp)
  0x0000000116b55789: mov    %r13,0x10(%rsp)
  0x0000000116b5578e: mov    %r14,0x8(%rsp)
  0x0000000116b55793: mov    %r15,(%rsp)
  0x0000000116b55797: sub    $0x100,%rsp
  0x0000000116b5579e: vextractf128 $0x1,%ymm0,(%rsp)
  0x0000000116b557a5: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x0000000116b557ad: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x0000000116b557b5: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x0000000116b557bd: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x0000000116b557c5: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x0000000116b557cd: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x0000000116b557d5: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x0000000116b557dd: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x0000000116b557e8: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x0000000116b557f3: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x0000000116b557fe: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x0000000116b55809: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x0000000116b55814: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x0000000116b5581f: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x0000000116b5582a: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x0000000116b55835: sub    $0x100,%rsp
  0x0000000116b5583c: vmovdqu %xmm0,(%rsp)
  0x0000000116b55841: vmovdqu %xmm1,0x10(%rsp)
  0x0000000116b55847: vmovdqu %xmm2,0x20(%rsp)
  0x0000000116b5584d: vmovdqu %xmm3,0x30(%rsp)
  0x0000000116b55853: vmovdqu %xmm4,0x40(%rsp)
  0x0000000116b55859: vmovdqu %xmm5,0x50(%rsp)
  0x0000000116b5585f: vmovdqu %xmm6,0x60(%rsp)
  0x0000000116b55865: vmovdqu %xmm7,0x70(%rsp)
  0x0000000116b5586b: vmovdqu %xmm8,0x80(%rsp)
  0x0000000116b55874: vmovdqu %xmm9,0x90(%rsp)
  0x0000000116b5587d: vmovdqu %xmm10,0xa0(%rsp)
  0x0000000116b55886: vmovdqu %xmm11,0xb0(%rsp)
  0x0000000116b5588f: vmovdqu %xmm12,0xc0(%rsp)
  0x0000000116b55898: vmovdqu %xmm13,0xd0(%rsp)
  0x0000000116b558a1: vmovdqu %xmm14,0xe0(%rsp)
  0x0000000116b558aa: vmovdqu %xmm15,0xf0(%rsp)
  0x0000000116b558b3: sub    $0x8,%rsp
  0x0000000116b558b7: fstpl  (%rsp)
  0x0000000116b558ba: vmovsd (%rsp),%xmm0
  0x0000000116b558bf: test   $0xf,%esp
  0x0000000116b558c5: je     0x0000000116b558dd
  0x0000000116b558cb: sub    $0x8,%rsp
  0x0000000116b558cf: callq  0x000000010c9d3820
  0x0000000116b558d4: add    $0x8,%rsp
  0x0000000116b558d8: jmpq   0x0000000116b558e2
  0x0000000116b558dd: callq  0x000000010c9d3820
  0x0000000116b558e2: vmovsd %xmm0,(%rsp)
  0x0000000116b558e7: fldl   (%rsp)
  0x0000000116b558ea: add    $0x8,%rsp
  0x0000000116b558ee: vmovdqu (%rsp),%xmm0
  0x0000000116b558f3: vmovdqu 0x10(%rsp),%xmm1
  0x0000000116b558f9: vmovdqu 0x20(%rsp),%xmm2
  0x0000000116b558ff: vmovdqu 0x30(%rsp),%xmm3
  0x0000000116b55905: vmovdqu 0x40(%rsp),%xmm4
  0x0000000116b5590b: vmovdqu 0x50(%rsp),%xmm5
  0x0000000116b55911: vmovdqu 0x60(%rsp),%xmm6
  0x0000000116b55917: vmovdqu 0x70(%rsp),%xmm7
  0x0000000116b5591d: vmovdqu 0x80(%rsp),%xmm8
  0x0000000116b55926: vmovdqu 0x90(%rsp),%xmm9
  0x0000000116b5592f: vmovdqu 0xa0(%rsp),%xmm10
  0x0000000116b55938: vmovdqu 0xb0(%rsp),%xmm11
  0x0000000116b55941: vmovdqu 0xc0(%rsp),%xmm12
  0x0000000116b5594a: vmovdqu 0xd0(%rsp),%xmm13
  0x0000000116b55953: vmovdqu 0xe0(%rsp),%xmm14
  0x0000000116b5595c: vmovdqu 0xf0(%rsp),%xmm15
  0x0000000116b55965: add    $0x100,%rsp
  0x0000000116b5596c: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x0000000116b55973: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x0000000116b5597b: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x0000000116b55983: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x0000000116b5598b: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x0000000116b55993: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x0000000116b5599b: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x0000000116b559a3: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x0000000116b559ab: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x0000000116b559b6: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x0000000116b559c1: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x0000000116b559cc: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x0000000116b559d7: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x0000000116b559e2: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x0000000116b559ed: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x0000000116b559f8: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x0000000116b55a03: add    $0x100,%rsp
  0x0000000116b55a0a: mov    (%rsp),%r15
  0x0000000116b55a0e: mov    0x8(%rsp),%r14
  0x0000000116b55a13: mov    0x10(%rsp),%r13
  0x0000000116b55a18: mov    0x18(%rsp),%r12
  0x0000000116b55a1d: mov    0x20(%rsp),%r11
  0x0000000116b55a22: mov    0x28(%rsp),%r10
  0x0000000116b55a27: mov    0x30(%rsp),%r9
  0x0000000116b55a2c: mov    0x38(%rsp),%r8
  0x0000000116b55a31: mov    0x40(%rsp),%rdi
  0x0000000116b55a36: mov    0x48(%rsp),%rsi
  0x0000000116b55a3b: mov    0x50(%rsp),%rbp
  0x0000000116b55a40: mov    0x60(%rsp),%rbx
  0x0000000116b55a45: mov    0x68(%rsp),%rdx
  0x0000000116b55a4a: mov    0x70(%rsp),%rcx
  0x0000000116b55a4f: mov    0x78(%rsp),%rax
  0x0000000116b55a54: add    $0x80,%rsp
  0x0000000116b55a5b: sub    $0x10,%rsp
  0x0000000116b55a5f: fstpl  (%rsp)
  0x0000000116b55a62: vmovsd (%rsp),%xmm0
  0x0000000116b55a67: add    $0x10,%rsp
  0x0000000116b55a6b: pop    %rax
  0x0000000116b55a6c: mov    %r13,%rsp
  0x0000000116b55a6f: jmpq   *%rax
  0x0000000116b55a71: nop
  0x0000000116b55a72: nop
  0x0000000116b55a73: nop
  0x0000000116b55a74: nop
  0x0000000116b55a75: nop
  0x0000000116b55a76: nop
  0x0000000116b55a77: nop
  0x0000000116b55a78: int3   
  0x0000000116b55a79: int3   
  0x0000000116b55a7a: int3   
  0x0000000116b55a7b: int3   
  0x0000000116b55a7c: int3   
  0x0000000116b55a7d: int3   
  0x0000000116b55a7e: int3   
  0x0000000116b55a7f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_cos)  [0x0000000116b55ac0, 0x0000000116b55e20]  864 bytes

  0x0000000116b55ac0: fldl   0x8(%rsp)
  0x0000000116b55ac4: fldl   -0x9e7a172(%rip)        # 0x000000010ccdb958
  0x0000000116b55aca: fld    %st(1)
  0x0000000116b55acc: fabs   
  0x0000000116b55ace: fucomip %st(1),%st
  0x0000000116b55ad0: ffree  %st(0)
  0x0000000116b55ad2: fincstp 
  0x0000000116b55ad4: ja     0x0000000116b55ae1
  0x0000000116b55ada: fcos   
  0x0000000116b55adc: jmpq   0x0000000116b55dfb
  0x0000000116b55ae1: mov    %rsp,-0x28(%rsp)
  0x0000000116b55ae6: sub    $0x80,%rsp
  0x0000000116b55aed: mov    %rax,0x78(%rsp)
  0x0000000116b55af2: mov    %rcx,0x70(%rsp)
  0x0000000116b55af7: mov    %rdx,0x68(%rsp)
  0x0000000116b55afc: mov    %rbx,0x60(%rsp)
  0x0000000116b55b01: mov    %rbp,0x50(%rsp)
  0x0000000116b55b06: mov    %rsi,0x48(%rsp)
  0x0000000116b55b0b: mov    %rdi,0x40(%rsp)
  0x0000000116b55b10: mov    %r8,0x38(%rsp)
  0x0000000116b55b15: mov    %r9,0x30(%rsp)
  0x0000000116b55b1a: mov    %r10,0x28(%rsp)
  0x0000000116b55b1f: mov    %r11,0x20(%rsp)
  0x0000000116b55b24: mov    %r12,0x18(%rsp)
  0x0000000116b55b29: mov    %r13,0x10(%rsp)
  0x0000000116b55b2e: mov    %r14,0x8(%rsp)
  0x0000000116b55b33: mov    %r15,(%rsp)
  0x0000000116b55b37: sub    $0x100,%rsp
  0x0000000116b55b3e: vextractf128 $0x1,%ymm0,(%rsp)
  0x0000000116b55b45: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x0000000116b55b4d: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x0000000116b55b55: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x0000000116b55b5d: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x0000000116b55b65: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x0000000116b55b6d: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x0000000116b55b75: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x0000000116b55b7d: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x0000000116b55b88: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x0000000116b55b93: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x0000000116b55b9e: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x0000000116b55ba9: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x0000000116b55bb4: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x0000000116b55bbf: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x0000000116b55bca: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x0000000116b55bd5: sub    $0x100,%rsp
  0x0000000116b55bdc: vmovdqu %xmm0,(%rsp)
  0x0000000116b55be1: vmovdqu %xmm1,0x10(%rsp)
  0x0000000116b55be7: vmovdqu %xmm2,0x20(%rsp)
  0x0000000116b55bed: vmovdqu %xmm3,0x30(%rsp)
  0x0000000116b55bf3: vmovdqu %xmm4,0x40(%rsp)
  0x0000000116b55bf9: vmovdqu %xmm5,0x50(%rsp)
  0x0000000116b55bff: vmovdqu %xmm6,0x60(%rsp)
  0x0000000116b55c05: vmovdqu %xmm7,0x70(%rsp)
  0x0000000116b55c0b: vmovdqu %xmm8,0x80(%rsp)
  0x0000000116b55c14: vmovdqu %xmm9,0x90(%rsp)
  0x0000000116b55c1d: vmovdqu %xmm10,0xa0(%rsp)
  0x0000000116b55c26: vmovdqu %xmm11,0xb0(%rsp)
  0x0000000116b55c2f: vmovdqu %xmm12,0xc0(%rsp)
  0x0000000116b55c38: vmovdqu %xmm13,0xd0(%rsp)
  0x0000000116b55c41: vmovdqu %xmm14,0xe0(%rsp)
  0x0000000116b55c4a: vmovdqu %xmm15,0xf0(%rsp)
  0x0000000116b55c53: sub    $0x8,%rsp
  0x0000000116b55c57: fstpl  (%rsp)
  0x0000000116b55c5a: vmovsd (%rsp),%xmm0
  0x0000000116b55c5f: test   $0xf,%esp
  0x0000000116b55c65: je     0x0000000116b55c7d
  0x0000000116b55c6b: sub    $0x8,%rsp
  0x0000000116b55c6f: callq  0x000000010c9d44b0
  0x0000000116b55c74: add    $0x8,%rsp
  0x0000000116b55c78: jmpq   0x0000000116b55c82
  0x0000000116b55c7d: callq  0x000000010c9d44b0
  0x0000000116b55c82: vmovsd %xmm0,(%rsp)
  0x0000000116b55c87: fldl   (%rsp)
  0x0000000116b55c8a: add    $0x8,%rsp
  0x0000000116b55c8e: vmovdqu (%rsp),%xmm0
  0x0000000116b55c93: vmovdqu 0x10(%rsp),%xmm1
  0x0000000116b55c99: vmovdqu 0x20(%rsp),%xmm2
  0x0000000116b55c9f: vmovdqu 0x30(%rsp),%xmm3
  0x0000000116b55ca5: vmovdqu 0x40(%rsp),%xmm4
  0x0000000116b55cab: vmovdqu 0x50(%rsp),%xmm5
  0x0000000116b55cb1: vmovdqu 0x60(%rsp),%xmm6
  0x0000000116b55cb7: vmovdqu 0x70(%rsp),%xmm7
  0x0000000116b55cbd: vmovdqu 0x80(%rsp),%xmm8
  0x0000000116b55cc6: vmovdqu 0x90(%rsp),%xmm9
  0x0000000116b55ccf: vmovdqu 0xa0(%rsp),%xmm10
  0x0000000116b55cd8: vmovdqu 0xb0(%rsp),%xmm11
  0x0000000116b55ce1: vmovdqu 0xc0(%rsp),%xmm12
  0x0000000116b55cea: vmovdqu 0xd0(%rsp),%xmm13
  0x0000000116b55cf3: vmovdqu 0xe0(%rsp),%xmm14
  0x0000000116b55cfc: vmovdqu 0xf0(%rsp),%xmm15
  0x0000000116b55d05: add    $0x100,%rsp
  0x0000000116b55d0c: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x0000000116b55d13: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x0000000116b55d1b: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x0000000116b55d23: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x0000000116b55d2b: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x0000000116b55d33: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x0000000116b55d3b: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x0000000116b55d43: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x0000000116b55d4b: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x0000000116b55d56: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x0000000116b55d61: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x0000000116b55d6c: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x0000000116b55d77: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x0000000116b55d82: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x0000000116b55d8d: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x0000000116b55d98: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x0000000116b55da3: add    $0x100,%rsp
  0x0000000116b55daa: mov    (%rsp),%r15
  0x0000000116b55dae: mov    0x8(%rsp),%r14
  0x0000000116b55db3: mov    0x10(%rsp),%r13
  0x0000000116b55db8: mov    0x18(%rsp),%r12
  0x0000000116b55dbd: mov    0x20(%rsp),%r11
  0x0000000116b55dc2: mov    0x28(%rsp),%r10
  0x0000000116b55dc7: mov    0x30(%rsp),%r9
  0x0000000116b55dcc: mov    0x38(%rsp),%r8
  0x0000000116b55dd1: mov    0x40(%rsp),%rdi
  0x0000000116b55dd6: mov    0x48(%rsp),%rsi
  0x0000000116b55ddb: mov    0x50(%rsp),%rbp
  0x0000000116b55de0: mov    0x60(%rsp),%rbx
  0x0000000116b55de5: mov    0x68(%rsp),%rdx
  0x0000000116b55dea: mov    0x70(%rsp),%rcx
  0x0000000116b55def: mov    0x78(%rsp),%rax
  0x0000000116b55df4: add    $0x80,%rsp
  0x0000000116b55dfb: sub    $0x10,%rsp
  0x0000000116b55dff: fstpl  (%rsp)
  0x0000000116b55e02: vmovsd (%rsp),%xmm0
  0x0000000116b55e07: add    $0x10,%rsp
  0x0000000116b55e0b: pop    %rax
  0x0000000116b55e0c: mov    %r13,%rsp
  0x0000000116b55e0f: jmpq   *%rax
  0x0000000116b55e11: nop
  0x0000000116b55e12: nop
  0x0000000116b55e13: nop
  0x0000000116b55e14: nop
  0x0000000116b55e15: nop
  0x0000000116b55e16: nop
  0x0000000116b55e17: nop
  0x0000000116b55e18: int3   
  0x0000000116b55e19: int3   
  0x0000000116b55e1a: int3   
  0x0000000116b55e1b: int3   
  0x0000000116b55e1c: int3   
  0x0000000116b55e1d: int3   
  0x0000000116b55e1e: int3   
  0x0000000116b55e1f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_tan)  [0x0000000116b55e60, 0x0000000116b561c0]  864 bytes

  0x0000000116b55e60: fldl   0x8(%rsp)
  0x0000000116b55e64: fldl   -0x9e7a512(%rip)        # 0x000000010ccdb958
  0x0000000116b55e6a: fld    %st(1)
  0x0000000116b55e6c: fabs   
  0x0000000116b55e6e: fucomip %st(1),%st
  0x0000000116b55e70: ffree  %st(0)
  0x0000000116b55e72: fincstp 
  0x0000000116b55e74: ja     0x0000000116b55e83
  0x0000000116b55e7a: fptan  
  0x0000000116b55e7c: fstp   %st(0)
  0x0000000116b55e7e: jmpq   0x0000000116b5619d
  0x0000000116b55e83: mov    %rsp,-0x28(%rsp)
  0x0000000116b55e88: sub    $0x80,%rsp
  0x0000000116b55e8f: mov    %rax,0x78(%rsp)
  0x0000000116b55e94: mov    %rcx,0x70(%rsp)
  0x0000000116b55e99: mov    %rdx,0x68(%rsp)
  0x0000000116b55e9e: mov    %rbx,0x60(%rsp)
  0x0000000116b55ea3: mov    %rbp,0x50(%rsp)
  0x0000000116b55ea8: mov    %rsi,0x48(%rsp)
  0x0000000116b55ead: mov    %rdi,0x40(%rsp)
  0x0000000116b55eb2: mov    %r8,0x38(%rsp)
  0x0000000116b55eb7: mov    %r9,0x30(%rsp)
  0x0000000116b55ebc: mov    %r10,0x28(%rsp)
  0x0000000116b55ec1: mov    %r11,0x20(%rsp)
  0x0000000116b55ec6: mov    %r12,0x18(%rsp)
  0x0000000116b55ecb: mov    %r13,0x10(%rsp)
  0x0000000116b55ed0: mov    %r14,0x8(%rsp)
  0x0000000116b55ed5: mov    %r15,(%rsp)
  0x0000000116b55ed9: sub    $0x100,%rsp
  0x0000000116b55ee0: vextractf128 $0x1,%ymm0,(%rsp)
  0x0000000116b55ee7: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x0000000116b55eef: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x0000000116b55ef7: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x0000000116b55eff: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x0000000116b55f07: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x0000000116b55f0f: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x0000000116b55f17: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x0000000116b55f1f: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x0000000116b55f2a: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x0000000116b55f35: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x0000000116b55f40: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x0000000116b55f4b: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x0000000116b55f56: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x0000000116b55f61: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x0000000116b55f6c: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x0000000116b55f77: sub    $0x100,%rsp
  0x0000000116b55f7e: vmovdqu %xmm0,(%rsp)
  0x0000000116b55f83: vmovdqu %xmm1,0x10(%rsp)
  0x0000000116b55f89: vmovdqu %xmm2,0x20(%rsp)
  0x0000000116b55f8f: vmovdqu %xmm3,0x30(%rsp)
  0x0000000116b55f95: vmovdqu %xmm4,0x40(%rsp)
  0x0000000116b55f9b: vmovdqu %xmm5,0x50(%rsp)
  0x0000000116b55fa1: vmovdqu %xmm6,0x60(%rsp)
  0x0000000116b55fa7: vmovdqu %xmm7,0x70(%rsp)
  0x0000000116b55fad: vmovdqu %xmm8,0x80(%rsp)
  0x0000000116b55fb6: vmovdqu %xmm9,0x90(%rsp)
  0x0000000116b55fbf: vmovdqu %xmm10,0xa0(%rsp)
  0x0000000116b55fc8: vmovdqu %xmm11,0xb0(%rsp)
  0x0000000116b55fd1: vmovdqu %xmm12,0xc0(%rsp)
  0x0000000116b55fda: vmovdqu %xmm13,0xd0(%rsp)
  0x0000000116b55fe3: vmovdqu %xmm14,0xe0(%rsp)
  0x0000000116b55fec: vmovdqu %xmm15,0xf0(%rsp)
  0x0000000116b55ff5: sub    $0x8,%rsp
  0x0000000116b55ff9: fstpl  (%rsp)
  0x0000000116b55ffc: vmovsd (%rsp),%xmm0
  0x0000000116b56001: test   $0xf,%esp
  0x0000000116b56007: je     0x0000000116b5601f
  0x0000000116b5600d: sub    $0x8,%rsp
  0x0000000116b56011: callq  0x000000010c9d47a0
  0x0000000116b56016: add    $0x8,%rsp
  0x0000000116b5601a: jmpq   0x0000000116b56024
  0x0000000116b5601f: callq  0x000000010c9d47a0
  0x0000000116b56024: vmovsd %xmm0,(%rsp)
  0x0000000116b56029: fldl   (%rsp)
  0x0000000116b5602c: add    $0x8,%rsp
  0x0000000116b56030: vmovdqu (%rsp),%xmm0
  0x0000000116b56035: vmovdqu 0x10(%rsp),%xmm1
  0x0000000116b5603b: vmovdqu 0x20(%rsp),%xmm2
  0x0000000116b56041: vmovdqu 0x30(%rsp),%xmm3
  0x0000000116b56047: vmovdqu 0x40(%rsp),%xmm4
  0x0000000116b5604d: vmovdqu 0x50(%rsp),%xmm5
  0x0000000116b56053: vmovdqu 0x60(%rsp),%xmm6
  0x0000000116b56059: vmovdqu 0x70(%rsp),%xmm7
  0x0000000116b5605f: vmovdqu 0x80(%rsp),%xmm8
  0x0000000116b56068: vmovdqu 0x90(%rsp),%xmm9
  0x0000000116b56071: vmovdqu 0xa0(%rsp),%xmm10
  0x0000000116b5607a: vmovdqu 0xb0(%rsp),%xmm11
  0x0000000116b56083: vmovdqu 0xc0(%rsp),%xmm12
  0x0000000116b5608c: vmovdqu 0xd0(%rsp),%xmm13
  0x0000000116b56095: vmovdqu 0xe0(%rsp),%xmm14
  0x0000000116b5609e: vmovdqu 0xf0(%rsp),%xmm15
  0x0000000116b560a7: add    $0x100,%rsp
  0x0000000116b560ae: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x0000000116b560b5: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x0000000116b560bd: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x0000000116b560c5: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x0000000116b560cd: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x0000000116b560d5: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x0000000116b560dd: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x0000000116b560e5: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x0000000116b560ed: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x0000000116b560f8: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x0000000116b56103: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x0000000116b5610e: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x0000000116b56119: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x0000000116b56124: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x0000000116b5612f: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x0000000116b5613a: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x0000000116b56145: add    $0x100,%rsp
  0x0000000116b5614c: mov    (%rsp),%r15
  0x0000000116b56150: mov    0x8(%rsp),%r14
  0x0000000116b56155: mov    0x10(%rsp),%r13
  0x0000000116b5615a: mov    0x18(%rsp),%r12
  0x0000000116b5615f: mov    0x20(%rsp),%r11
  0x0000000116b56164: mov    0x28(%rsp),%r10
  0x0000000116b56169: mov    0x30(%rsp),%r9
  0x0000000116b5616e: mov    0x38(%rsp),%r8
  0x0000000116b56173: mov    0x40(%rsp),%rdi
  0x0000000116b56178: mov    0x48(%rsp),%rsi
  0x0000000116b5617d: mov    0x50(%rsp),%rbp
  0x0000000116b56182: mov    0x60(%rsp),%rbx
  0x0000000116b56187: mov    0x68(%rsp),%rdx
  0x0000000116b5618c: mov    0x70(%rsp),%rcx
  0x0000000116b56191: mov    0x78(%rsp),%rax
  0x0000000116b56196: add    $0x80,%rsp
  0x0000000116b5619d: sub    $0x10,%rsp
  0x0000000116b561a1: fstpl  (%rsp)
  0x0000000116b561a4: vmovsd (%rsp),%xmm0
  0x0000000116b561a9: add    $0x10,%rsp
  0x0000000116b561ad: pop    %rax
  0x0000000116b561ae: mov    %r13,%rsp
  0x0000000116b561b1: jmpq   *%rax
  0x0000000116b561b3: nop
  0x0000000116b561b4: nop
  0x0000000116b561b5: nop
  0x0000000116b561b6: nop
  0x0000000116b561b7: nop
  0x0000000116b561b8: int3   
  0x0000000116b561b9: int3   
  0x0000000116b561ba: int3   
  0x0000000116b561bb: int3   
  0x0000000116b561bc: int3   
  0x0000000116b561bd: int3   
  0x0000000116b561be: int3   
  0x0000000116b561bf: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_abs)  [0x0000000116b56200, 0x0000000116b56220]  32 bytes

  0x0000000116b56200: fldl   0x8(%rsp)
  0x0000000116b56204: fabs   
  0x0000000116b56206: sub    $0x10,%rsp
  0x0000000116b5620a: fstpl  (%rsp)
  0x0000000116b5620d: vmovsd (%rsp),%xmm0
  0x0000000116b56212: add    $0x10,%rsp
  0x0000000116b56216: pop    %rax
  0x0000000116b56217: mov    %r13,%rsp
  0x0000000116b5621a: jmpq   *%rax
  0x0000000116b5621c: nop
  0x0000000116b5621d: nop
  0x0000000116b5621e: nop
  0x0000000116b5621f: nop

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sqrt)  [0x0000000116b56260, 0x0000000116b56280]  32 bytes

  0x0000000116b56260: vsqrtsd 0x8(%rsp),%xmm0,%xmm0
  0x0000000116b56266: pop    %rax
  0x0000000116b56267: mov    %r13,%rsp
  0x0000000116b5626a: jmpq   *%rax
  0x0000000116b5626c: nop
  0x0000000116b5626d: nop
  0x0000000116b5626e: nop
  0x0000000116b5626f: nop
  0x0000000116b56270: int3   
  0x0000000116b56271: int3   
  0x0000000116b56272: int3   
  0x0000000116b56273: int3   
  0x0000000116b56274: int3   
  0x0000000116b56275: int3   
  0x0000000116b56276: int3   
  0x0000000116b56277: int3   
  0x0000000116b56278: int3   
  0x0000000116b56279: int3   
  0x0000000116b5627a: int3   
  0x0000000116b5627b: int3   
  0x0000000116b5627c: int3   
  0x0000000116b5627d: int3   
  0x0000000116b5627e: int3   
  0x0000000116b5627f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log)  [0x0000000116b562c0, 0x0000000116b562e0]  32 bytes

  0x0000000116b562c0: fldl   0x8(%rsp)
  0x0000000116b562c4: fldln2 
  0x0000000116b562c6: fxch   %st(1)
  0x0000000116b562c8: fyl2x  
  0x0000000116b562ca: sub    $0x10,%rsp
  0x0000000116b562ce: fstpl  (%rsp)
  0x0000000116b562d1: vmovsd (%rsp),%xmm0
  0x0000000116b562d6: add    $0x10,%rsp
  0x0000000116b562da: pop    %rax
  0x0000000116b562db: mov    %r13,%rsp
  0x0000000116b562de: jmpq   *%rax

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log10)  [0x0000000116b56320, 0x0000000116b56340]  32 bytes

  0x0000000116b56320: fldl   0x8(%rsp)
  0x0000000116b56324: fldlg2 
  0x0000000116b56326: fxch   %st(1)
  0x0000000116b56328: fyl2x  
  0x0000000116b5632a: sub    $0x10,%rsp
  0x0000000116b5632e: fstpl  (%rsp)
  0x0000000116b56331: vmovsd (%rsp),%xmm0
  0x0000000116b56336: add    $0x10,%rsp
  0x0000000116b5633a: pop    %rax
  0x0000000116b5633b: mov    %r13,%rsp
  0x0000000116b5633e: jmpq   *%rax

----------------------------------------------------------------------
method entry point (kind = java_lang_math_exp)  [0x0000000116b56380, 0x0000000116b56740]  960 bytes

  0x0000000116b56380: fldl   0x8(%rsp)
  0x0000000116b56384: fld    %st(0)
  0x0000000116b56386: sub    $0x8,%rsp
  0x0000000116b5638a: fstcw  (%rsp)
  0x0000000116b5638e: mov    (%rsp),%eax
  0x0000000116b56391: or     $0x300,%eax
  0x0000000116b56397: push   %rax
  0x0000000116b56398: fldcw  (%rsp)
  0x0000000116b5639b: pop    %rax
  0x0000000116b5639c: fldl2e 
  0x0000000116b5639e: fmulp  %st,%st(1)
  0x0000000116b563a0: sub    $0x8,%rsp
  0x0000000116b563a4: fld    %st(0)
  0x0000000116b563a6: frndint 
  0x0000000116b563a8: fsubr  %st,%st(1)
  0x0000000116b563aa: fistpl (%rsp)
  0x0000000116b563ad: f2xm1  
  0x0000000116b563af: fld1   
  0x0000000116b563b1: faddp  %st,%st(1)
  0x0000000116b563b3: mov    (%rsp),%eax
  0x0000000116b563b6: mov    $0xfffff800,%ecx
  0x0000000116b563bb: add    $0x3ff,%eax
  0x0000000116b563c1: mov    %eax,%edx
  0x0000000116b563c3: shl    $0x14,%eax
  0x0000000116b563c6: add    $0x1,%edx
  0x0000000116b563c9: cmove  %ecx,%eax
  0x0000000116b563cc: cmp    $0x1,%edx
  0x0000000116b563cf: cmove  %ecx,%eax
  0x0000000116b563d2: test   %edx,%ecx
  0x0000000116b563d4: cmovne %ecx,%eax
  0x0000000116b563d7: mov    %eax,0x4(%rsp)
  0x0000000116b563db: movl   $0x0,(%rsp)
  0x0000000116b563e2: fmull  (%rsp)
  0x0000000116b563e5: add    $0x8,%rsp
  0x0000000116b563e9: fldcw  (%rsp)
  0x0000000116b563ec: add    $0x8,%rsp
  0x0000000116b563f0: fucomi %st(0),%st
  0x0000000116b563f2: jp     0x0000000116b563ff
  0x0000000116b563f8: ffree  %st(1)
  0x0000000116b563fa: jmpq   0x0000000116b5671d
  0x0000000116b563ff: ffree  %st(0)
  0x0000000116b56401: fincstp 
  0x0000000116b56403: mov    %rsp,-0x28(%rsp)
  0x0000000116b56408: sub    $0x80,%rsp
  0x0000000116b5640f: mov    %rax,0x78(%rsp)
  0x0000000116b56414: mov    %rcx,0x70(%rsp)
  0x0000000116b56419: mov    %rdx,0x68(%rsp)
  0x0000000116b5641e: mov    %rbx,0x60(%rsp)
  0x0000000116b56423: mov    %rbp,0x50(%rsp)
  0x0000000116b56428: mov    %rsi,0x48(%rsp)
  0x0000000116b5642d: mov    %rdi,0x40(%rsp)
  0x0000000116b56432: mov    %r8,0x38(%rsp)
  0x0000000116b56437: mov    %r9,0x30(%rsp)
  0x0000000116b5643c: mov    %r10,0x28(%rsp)
  0x0000000116b56441: mov    %r11,0x20(%rsp)
  0x0000000116b56446: mov    %r12,0x18(%rsp)
  0x0000000116b5644b: mov    %r13,0x10(%rsp)
  0x0000000116b56450: mov    %r14,0x8(%rsp)
  0x0000000116b56455: mov    %r15,(%rsp)
  0x0000000116b56459: sub    $0x100,%rsp
  0x0000000116b56460: vextractf128 $0x1,%ymm0,(%rsp)
  0x0000000116b56467: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x0000000116b5646f: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x0000000116b56477: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x0000000116b5647f: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x0000000116b56487: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x0000000116b5648f: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x0000000116b56497: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x0000000116b5649f: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x0000000116b564aa: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x0000000116b564b5: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x0000000116b564c0: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x0000000116b564cb: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x0000000116b564d6: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x0000000116b564e1: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x0000000116b564ec: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x0000000116b564f7: sub    $0x100,%rsp
  0x0000000116b564fe: vmovdqu %xmm0,(%rsp)
  0x0000000116b56503: vmovdqu %xmm1,0x10(%rsp)
  0x0000000116b56509: vmovdqu %xmm2,0x20(%rsp)
  0x0000000116b5650f: vmovdqu %xmm3,0x30(%rsp)
  0x0000000116b56515: vmovdqu %xmm4,0x40(%rsp)
  0x0000000116b5651b: vmovdqu %xmm5,0x50(%rsp)
  0x0000000116b56521: vmovdqu %xmm6,0x60(%rsp)
  0x0000000116b56527: vmovdqu %xmm7,0x70(%rsp)
  0x0000000116b5652d: vmovdqu %xmm8,0x80(%rsp)
  0x0000000116b56536: vmovdqu %xmm9,0x90(%rsp)
  0x0000000116b5653f: vmovdqu %xmm10,0xa0(%rsp)
  0x0000000116b56548: vmovdqu %xmm11,0xb0(%rsp)
  0x0000000116b56551: vmovdqu %xmm12,0xc0(%rsp)
  0x0000000116b5655a: vmovdqu %xmm13,0xd0(%rsp)
  0x0000000116b56563: vmovdqu %xmm14,0xe0(%rsp)
  0x0000000116b5656c: vmovdqu %xmm15,0xf0(%rsp)
  0x0000000116b56575: sub    $0x8,%rsp
  0x0000000116b56579: fstpl  (%rsp)
  0x0000000116b5657c: vmovsd (%rsp),%xmm0
  0x0000000116b56581: test   $0xf,%esp
  0x0000000116b56587: je     0x0000000116b5659f
  0x0000000116b5658d: sub    $0x8,%rsp
  0x0000000116b56591: callq  0x000000010c9d1da0
  0x0000000116b56596: add    $0x8,%rsp
  0x0000000116b5659a: jmpq   0x0000000116b565a4
  0x0000000116b5659f: callq  0x000000010c9d1da0
  0x0000000116b565a4: vmovsd %xmm0,(%rsp)
  0x0000000116b565a9: fldl   (%rsp)
  0x0000000116b565ac: add    $0x8,%rsp
  0x0000000116b565b0: vmovdqu (%rsp),%xmm0
  0x0000000116b565b5: vmovdqu 0x10(%rsp),%xmm1
  0x0000000116b565bb: vmovdqu 0x20(%rsp),%xmm2
  0x0000000116b565c1: vmovdqu 0x30(%rsp),%xmm3
  0x0000000116b565c7: vmovdqu 0x40(%rsp),%xmm4
  0x0000000116b565cd: vmovdqu 0x50(%rsp),%xmm5
  0x0000000116b565d3: vmovdqu 0x60(%rsp),%xmm6
  0x0000000116b565d9: vmovdqu 0x70(%rsp),%xmm7
  0x0000000116b565df: vmovdqu 0x80(%rsp),%xmm8
  0x0000000116b565e8: vmovdqu 0x90(%rsp),%xmm9
  0x0000000116b565f1: vmovdqu 0xa0(%rsp),%xmm10
  0x0000000116b565fa: vmovdqu 0xb0(%rsp),%xmm11
  0x0000000116b56603: vmovdqu 0xc0(%rsp),%xmm12
  0x0000000116b5660c: vmovdqu 0xd0(%rsp),%xmm13
  0x0000000116b56615: vmovdqu 0xe0(%rsp),%xmm14
  0x0000000116b5661e: vmovdqu 0xf0(%rsp),%xmm15
  0x0000000116b56627: add    $0x100,%rsp
  0x0000000116b5662e: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x0000000116b56635: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x0000000116b5663d: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x0000000116b56645: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x0000000116b5664d: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x0000000116b56655: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x0000000116b5665d: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x0000000116b56665: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x0000000116b5666d: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x0000000116b56678: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x0000000116b56683: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x0000000116b5668e: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x0000000116b56699: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x0000000116b566a4: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x0000000116b566af: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x0000000116b566ba: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x0000000116b566c5: add    $0x100,%rsp
  0x0000000116b566cc: mov    (%rsp),%r15
  0x0000000116b566d0: mov    0x8(%rsp),%r14
  0x0000000116b566d5: mov    0x10(%rsp),%r13
  0x0000000116b566da: mov    0x18(%rsp),%r12
  0x0000000116b566df: mov    0x20(%rsp),%r11
  0x0000000116b566e4: mov    0x28(%rsp),%r10
  0x0000000116b566e9: mov    0x30(%rsp),%r9
  0x0000000116b566ee: mov    0x38(%rsp),%r8
  0x0000000116b566f3: mov    0x40(%rsp),%rdi
  0x0000000116b566f8: mov    0x48(%rsp),%rsi
  0x0000000116b566fd: mov    0x50(%rsp),%rbp
  0x0000000116b56702: mov    0x60(%rsp),%rbx
  0x0000000116b56707: mov    0x68(%rsp),%rdx
  0x0000000116b5670c: mov    0x70(%rsp),%rcx
  0x0000000116b56711: mov    0x78(%rsp),%rax
  0x0000000116b56716: add    $0x80,%rsp
  0x0000000116b5671d: sub    $0x10,%rsp
  0x0000000116b56721: fstpl  (%rsp)
  0x0000000116b56724: vmovsd (%rsp),%xmm0
  0x0000000116b56729: add    $0x10,%rsp
  0x0000000116b5672d: pop    %rax
  0x0000000116b5672e: mov    %r13,%rsp
  0x0000000116b56731: jmpq   *%rax
  0x0000000116b56733: nop
  0x0000000116b56734: nop
  0x0000000116b56735: nop
  0x0000000116b56736: nop
  0x0000000116b56737: nop
  0x0000000116b56738: int3   
  0x0000000116b56739: int3   
  0x0000000116b5673a: int3   
  0x0000000116b5673b: int3   
  0x0000000116b5673c: int3   
  0x0000000116b5673d: int3   
  0x0000000116b5673e: int3   
  0x0000000116b5673f: int3   

----------------------------------------------------------------------
method entry point (kind = java_lang_math_pow)  [0x0000000116b56780, 0x0000000116b56cc0]  1344 bytes

  0x0000000116b56780: fldl   0x8(%rsp)
  0x0000000116b56784: fldl   0x18(%rsp)
  0x0000000116b56788: movabs $0x10cdc9010,%rax
  0x0000000116b56792: fldl   (%rax)
  0x0000000116b56794: fucomip %st(2),%st
  0x0000000116b56796: jp     0x0000000116b567af
  0x0000000116b5679c: jne    0x0000000116b567af
  0x0000000116b567a2: fxch   %st(1)
  0x0000000116b567a4: ffree  %st(0)
  0x0000000116b567a6: fincstp 
  0x0000000116b567a8: fmul   %st(0),%st
  0x0000000116b567aa: jmpq   0x0000000116b56ca8
  0x0000000116b567af: fldz   
  0x0000000116b567b1: fucomip %st(1),%st
  0x0000000116b567b3: ja     0x0000000116b56836
  0x0000000116b567b9: fld    %st(1)
  0x0000000116b567bb: fld    %st(1)
  ;; fast_pow {
  0x0000000116b567bd: sub    $0x8,%rsp
  0x0000000116b567c1: fstcw  (%rsp)
  0x0000000116b567c5: mov    (%rsp),%eax
  0x0000000116b567c8: or     $0x300,%eax
  0x0000000116b567ce: push   %rax
  0x0000000116b567cf: fldcw  (%rsp)
  0x0000000116b567d2: pop    %rax
  0x0000000116b567d3: fyl2x  
  0x0000000116b567d5: sub    $0x8,%rsp
  0x0000000116b567d9: fld    %st(0)
  0x0000000116b567db: frndint 
  0x0000000116b567dd: fsubr  %st,%st(1)
  0x0000000116b567df: fistpl (%rsp)
  0x0000000116b567e2: f2xm1  
  0x0000000116b567e4: fld1   
  0x0000000116b567e6: faddp  %st,%st(1)
  0x0000000116b567e8: mov    (%rsp),%eax
  0x0000000116b567eb: mov    $0xfffff800,%ecx
  0x0000000116b567f0: add    $0x3ff,%eax
  0x0000000116b567f6: mov    %eax,%edx
  0x0000000116b567f8: shl    $0x14,%eax
  0x0000000116b567fb: add    $0x1,%edx
  0x0000000116b567fe: cmove  %ecx,%eax
  0x0000000116b56801: cmp    $0x1,%edx
  0x0000000116b56804: cmove  %ecx,%eax
  0x0000000116b56807: test   %edx,%ecx
  0x0000000116b56809: cmovne %ecx,%eax
  0x0000000116b5680c: mov    %eax,0x4(%rsp)
  0x0000000116b56810: movl   $0x0,(%rsp)
  0x0000000116b56817: fmull  (%rsp)
  0x0000000116b5681a: add    $0x8,%rsp
  0x0000000116b5681e: fldcw  (%rsp)
  0x0000000116b56821: add    $0x8,%rsp
  ;; } fast_pow
  0x0000000116b56825: fucomi %st(0),%st
  0x0000000116b56827: jp     0x0000000116b56980
  0x0000000116b5682d: ffree  %st(2)
  0x0000000116b5682f: ffree  %st(1)
  0x0000000116b56831: jmpq   0x0000000116b56ca8
  0x0000000116b56836: fld    %st(1)
  0x0000000116b56838: frndint 
  0x0000000116b5683a: fucomi %st(2),%st
  0x0000000116b5683c: jne    0x0000000116b56980
  0x0000000116b56842: sub    $0x8,%rsp
  0x0000000116b56846: fld1   
  0x0000000116b56848: fadd   %st(1),%st
  0x0000000116b5684a: fstpl  (%rsp)
  0x0000000116b5684d: fldl   (%rsp)
  0x0000000116b56850: fucomip %st(1),%st
  0x0000000116b56852: fistpll (%rsp)
  0x0000000116b56855: jne    0x0000000116b5686a
  0x0000000116b5685b: movl   $0x0,(%rsp)
  0x0000000116b56862: movl   $0x0,0x4(%rsp)
  0x0000000116b5686a: fld    %st(1)
  0x0000000116b5686c: fld    %st(1)
  0x0000000116b5686e: fabs   
  ;; fast_pow {
  0x0000000116b56870: sub    $0x8,%rsp
  0x0000000116b56874: fstcw  (%rsp)
  0x0000000116b56878: mov    (%rsp),%eax
  0x0000000116b5687b: or     $0x300,%eax
  0x0000000116b56881: push   %rax
  0x0000000116b56882: fldcw  (%rsp)
  0x0000000116b56885: pop    %rax
  0x0000000116b56886: fyl2x  
  0x0000000116b56888: sub    $0x8,%rsp
  0x0000000116b5688c: fld    %st(0)
  0x0000000116b5688e: frndint 
  0x0000000116b56890: fsubr  %st,%st(1)
  0x0000000116b56892: fistpl (%rsp)
  0x0000000116b56895: f2xm1  
  0x0000000116b56897: fld1   
  0x0000000116b56899: faddp  %st,%st(1)
  0x0000000116b5689b: mov    (%rsp),%eax
  0x0000000116b5689e: mov    $0xfffff800,%ecx
  0x0000000116b568a3: add    $0x3ff,%eax
  0x0000000116b568a9: mov    %eax,%edx
  0x0000000116b568ab: shl    $0x14,%eax
  0x0000000116b568ae: add    $0x1,%edx
  0x0000000116b568b1: cmove  %ecx,%eax
  0x0000000116b568b4: cmp    $0x1,%edx
  0x0000000116b568b7: cmove  %ecx,%eax
  0x0000000116b568ba: test   %edx,%ecx
  0x0000000116b568bc: cmovne %ecx,%eax
  0x0000000116b568bf: mov    %eax,0x4(%rsp)
  0x0000000116b568c3: movl   $0x0,(%rsp)
  0x0000000116b568ca: fmull  (%rsp)
  0x0000000116b568cd: add    $0x8,%rsp
  0x0000000116b568d1: fldcw  (%rsp)
  0x0000000116b568d4: add    $0x8,%rsp
  ;; } fast_pow
  0x0000000116b568d8: fucomi %st(0),%st
  0x0000000116b568da: pop    %rax
  0x0000000116b568db: jp     0x0000000116b56980
  0x0000000116b568e1: mov    %rax,%rcx
  0x0000000116b568e4: shl    %rcx
  0x0000000116b568e7: jae    0x0000000116b5696a
  0x0000000116b568ed: jne    0x0000000116b5696a
  ;; integer indefinite value shouldn&apos;t be seen here
  0x0000000116b568f3: mov    %rsp,-0x28(%rsp)
  0x0000000116b568f8: sub    $0x80,%rsp
  0x0000000116b568ff: mov    %rax,0x78(%rsp)
  0x0000000116b56904: mov    %rcx,0x70(%rsp)
  0x0000000116b56909: mov    %rdx,0x68(%rsp)
  0x0000000116b5690e: mov    %rbx,0x60(%rsp)
  0x0000000116b56913: mov    %rbp,0x50(%rsp)
  0x0000000116b56918: mov    %rsi,0x48(%rsp)
  0x0000000116b5691d: mov    %rdi,0x40(%rsp)
  0x0000000116b56922: mov    %r8,0x38(%rsp)
  0x0000000116b56927: mov    %r9,0x30(%rsp)
  0x0000000116b5692c: mov    %r10,0x28(%rsp)
  0x0000000116b56931: mov    %r11,0x20(%rsp)
  0x0000000116b56936: mov    %r12,0x18(%rsp)
  0x0000000116b5693b: mov    %r13,0x10(%rsp)
  0x0000000116b56940: mov    %r14,0x8(%rsp)
  0x0000000116b56945: mov    %r15,(%rsp)
  0x0000000116b56949: movabs $0x10cc6423a,%rdi
  0x0000000116b56953: movabs $0x116b568f3,%rsi
  0x0000000116b5695d: mov    %rsp,%rdx
  0x0000000116b56960: and    $0xfffffffffffffff0,%rsp
  0x0000000116b56964: callq  0x000000010c7dd830
  0x0000000116b56969: hlt    
  0x0000000116b5696a: ffree  %st(2)
  0x0000000116b5696c: ffree  %st(1)
  0x0000000116b5696e: test   $0x1,%eax
  0x0000000116b56973: je     0x0000000116b56ca8
  0x0000000116b56979: fchs   
  0x0000000116b5697b: jmpq   0x0000000116b56ca8
  0x0000000116b56980: ffree  %st(0)
  0x0000000116b56982: fincstp 
  0x0000000116b56984: mov    %rsp,-0x28(%rsp)
  0x0000000116b56989: sub    $0x80,%rsp
  0x0000000116b56990: mov    %rax,0x78(%rsp)
  0x0000000116b56995: mov    %rcx,0x70(%rsp)
  0x0000000116b5699a: mov    %rdx,0x68(%rsp)
  0x0000000116b5699f: mov    %rbx,0x60(%rsp)
  0x0000000116b569a4: mov    %rbp,0x50(%rsp)
  0x0000000116b569a9: mov    %rsi,0x48(%rsp)
  0x0000000116b569ae: mov    %rdi,0x40(%rsp)
  0x0000000116b569b3: mov    %r8,0x38(%rsp)
  0x0000000116b569b8: mov    %r9,0x30(%rsp)
  0x0000000116b569bd: mov    %r10,0x28(%rsp)
  0x0000000116b569c2: mov    %r11,0x20(%rsp)
  0x0000000116b569c7: mov    %r12,0x18(%rsp)
  0x0000000116b569cc: mov    %r13,0x10(%rsp)
  0x0000000116b569d1: mov    %r14,0x8(%rsp)
  0x0000000116b569d6: mov    %r15,(%rsp)
  0x0000000116b569da: sub    $0x100,%rsp
  0x0000000116b569e1: vextractf128 $0x1,%ymm0,(%rsp)
  0x0000000116b569e8: vextractf128 $0x1,%ymm1,0x10(%rsp)
  0x0000000116b569f0: vextractf128 $0x1,%ymm2,0x20(%rsp)
  0x0000000116b569f8: vextractf128 $0x1,%ymm3,0x30(%rsp)
  0x0000000116b56a00: vextractf128 $0x1,%ymm4,0x40(%rsp)
  0x0000000116b56a08: vextractf128 $0x1,%ymm5,0x50(%rsp)
  0x0000000116b56a10: vextractf128 $0x1,%ymm6,0x60(%rsp)
  0x0000000116b56a18: vextractf128 $0x1,%ymm7,0x70(%rsp)
  0x0000000116b56a20: vextractf128 $0x1,%ymm8,0x80(%rsp)
  0x0000000116b56a2b: vextractf128 $0x1,%ymm9,0x90(%rsp)
  0x0000000116b56a36: vextractf128 $0x1,%ymm10,0xa0(%rsp)
  0x0000000116b56a41: vextractf128 $0x1,%ymm11,0xb0(%rsp)
  0x0000000116b56a4c: vextractf128 $0x1,%ymm12,0xc0(%rsp)
  0x0000000116b56a57: vextractf128 $0x1,%ymm13,0xd0(%rsp)
  0x0000000116b56a62: vextractf128 $0x1,%ymm14,0xe0(%rsp)
  0x0000000116b56a6d: vextractf128 $0x1,%ymm15,0xf0(%rsp)
  0x0000000116b56a78: sub    $0x100,%rsp
  0x0000000116b56a7f: vmovdqu %xmm0,(%rsp)
  0x0000000116b56a84: vmovdqu %xmm1,0x10(%rsp)
  0x0000000116b56a8a: vmovdqu %xmm2,0x20(%rsp)
  0x0000000116b56a90: vmovdqu %xmm3,0x30(%rsp)
  0x0000000116b56a96: vmovdqu %xmm4,0x40(%rsp)
  0x0000000116b56a9c: vmovdqu %xmm5,0x50(%rsp)
  0x0000000116b56aa2: vmovdqu %xmm6,0x60(%rsp)
  0x0000000116b56aa8: vmovdqu %xmm7,0x70(%rsp)
  0x0000000116b56aae: vmovdqu %xmm8,0x80(%rsp)
  0x0000000116b56ab7: vmovdqu %xmm9,0x90(%rsp)
  0x0000000116b56ac0: vmovdqu %xmm10,0xa0(%rsp)
  0x0000000116b56ac9: vmovdqu %xmm11,0xb0(%rsp)
  0x0000000116b56ad2: vmovdqu %xmm12,0xc0(%rsp)
  0x0000000116b56adb: vmovdqu %xmm13,0xd0(%rsp)
  0x0000000116b56ae4: vmovdqu %xmm14,0xe0(%rsp)
  0x0000000116b56aed: vmovdqu %xmm15,0xf0(%rsp)
  0x0000000116b56af6: sub    $0x10,%rsp
  0x0000000116b56afa: fstpl  (%rsp)
  0x0000000116b56afd: fstpl  0x8(%rsp)
  0x0000000116b56b01: vmovsd (%rsp),%xmm0
  0x0000000116b56b06: vmovsd 0x8(%rsp),%xmm1
  0x0000000116b56b0c: test   $0xf,%esp
  0x0000000116b56b12: je     0x0000000116b56b2a
  0x0000000116b56b18: sub    $0x8,%rsp
  0x0000000116b56b1c: callq  0x000000010c9d3690
  0x0000000116b56b21: add    $0x8,%rsp
  0x0000000116b56b25: jmpq   0x0000000116b56b2f
  0x0000000116b56b2a: callq  0x000000010c9d3690
  0x0000000116b56b2f: vmovsd %xmm0,(%rsp)
  0x0000000116b56b34: fldl   (%rsp)
  0x0000000116b56b37: add    $0x10,%rsp
  0x0000000116b56b3b: vmovdqu (%rsp),%xmm0
  0x0000000116b56b40: vmovdqu 0x10(%rsp),%xmm1
  0x0000000116b56b46: vmovdqu 0x20(%rsp),%xmm2
  0x0000000116b56b4c: vmovdqu 0x30(%rsp),%xmm3
  0x0000000116b56b52: vmovdqu 0x40(%rsp),%xmm4
  0x0000000116b56b58: vmovdqu 0x50(%rsp),%xmm5
  0x0000000116b56b5e: vmovdqu 0x60(%rsp),%xmm6
  0x0000000116b56b64: vmovdqu 0x70(%rsp),%xmm7
  0x0000000116b56b6a: vmovdqu 0x80(%rsp),%xmm8
  0x0000000116b56b73: vmovdqu 0x90(%rsp),%xmm9
  0x0000000116b56b7c: vmovdqu 0xa0(%rsp),%xmm10
  0x0000000116b56b85: vmovdqu 0xb0(%rsp),%xmm11
  0x0000000116b56b8e: vmovdqu 0xc0(%rsp),%xmm12
  0x0000000116b56b97: vmovdqu 0xd0(%rsp),%xmm13
  0x0000000116b56ba0: vmovdqu 0xe0(%rsp),%xmm14
  0x0000000116b56ba9: vmovdqu 0xf0(%rsp),%xmm15
  0x0000000116b56bb2: add    $0x100,%rsp
  0x0000000116b56bb9: vinsertf128 $0x1,(%rsp),%ymm0,%ymm0
  0x0000000116b56bc0: vinsertf128 $0x1,0x10(%rsp),%ymm1,%ymm1
  0x0000000116b56bc8: vinsertf128 $0x1,0x20(%rsp),%ymm2,%ymm2
  0x0000000116b56bd0: vinsertf128 $0x1,0x30(%rsp),%ymm3,%ymm3
  0x0000000116b56bd8: vinsertf128 $0x1,0x40(%rsp),%ymm4,%ymm4
  0x0000000116b56be0: vinsertf128 $0x1,0x50(%rsp),%ymm5,%ymm5
  0x0000000116b56be8: vinsertf128 $0x1,0x60(%rsp),%ymm6,%ymm6
  0x0000000116b56bf0: vinsertf128 $0x1,0x70(%rsp),%ymm7,%ymm7
  0x0000000116b56bf8: vinsertf128 $0x1,0x80(%rsp),%ymm8,%ymm8
  0x0000000116b56c03: vinsertf128 $0x1,0x90(%rsp),%ymm9,%ymm9
  0x0000000116b56c0e: vinsertf128 $0x1,0xa0(%rsp),%ymm10,%ymm10
  0x0000000116b56c19: vinsertf128 $0x1,0xb0(%rsp),%ymm11,%ymm11
  0x0000000116b56c24: vinsertf128 $0x1,0xc0(%rsp),%ymm12,%ymm12
  0x0000000116b56c2f: vinsertf128 $0x1,0xd0(%rsp),%ymm13,%ymm13
  0x0000000116b56c3a: vinsertf128 $0x1,0xe0(%rsp),%ymm14,%ymm14
  0x0000000116b56c45: vinsertf128 $0x1,0xf0(%rsp),%ymm15,%ymm15
  0x0000000116b56c50: add    $0x100,%rsp
  0x0000000116b56c57: mov    (%rsp),%r15
  0x0000000116b56c5b: mov    0x8(%rsp),%r14
  0x0000000116b56c60: mov    0x10(%rsp),%r13
  0x0000000116b56c65: mov    0x18(%rsp),%r12
  0x0000000116b56c6a: mov    0x20(%rsp),%r11
  0x0000000116b56c6f: mov    0x28(%rsp),%r10
  0x0000000116b56c74: mov    0x30(%rsp),%r9
  0x0000000116b56c79: mov    0x38(%rsp),%r8
  0x0000000116b56c7e: mov    0x40(%rsp),%rdi
  0x0000000116b56c83: mov    0x48(%rsp),%rsi
  0x0000000116b56c88: mov    0x50(%rsp),%rbp
  0x0000000116b56c8d: mov    0x60(%rsp),%rbx
  0x0000000116b56c92: mov    0x68(%rsp),%rdx
  0x0000000116b56c97: mov    0x70(%rsp),%rcx
  0x0000000116b56c9c: mov    0x78(%rsp),%rax
  0x0000000116b56ca1: add    $0x80,%rsp
  0x0000000116b56ca8: sub    $0x10,%rsp
  0x0000000116b56cac: fstpl  (%rsp)
  0x0000000116b56caf: vmovsd (%rsp),%xmm0
  0x0000000116b56cb4: add    $0x10,%rsp
  0x0000000116b56cb8: pop    %rax
  0x0000000116b56cb9: mov    %r13,%rsp
  0x0000000116b56cbc: jmpq   *%rax
  0x0000000116b56cbe: nop
  0x0000000116b56cbf: nop

----------------------------------------------------------------------
method entry point (kind = java_lang_ref_reference_get)  [0x0000000116b56d00, 0x0000000116b57400]  1792 bytes

  0x0000000116b56d00: cmpl   $0x0,-0x9d306ca(%rip)        # 0x000000010ce26640
  0x0000000116b56d0a: jne    0x0000000116b56ec7
  0x0000000116b56d10: mov    0x8(%rsp),%rax
  0x0000000116b56d15: test   %rax,%rax
  0x0000000116b56d18: je     0x0000000116b56ec7
  0x0000000116b56d1e: mov    0x10(%rbx),%rdx
  0x0000000116b56d22: mov    0x8(%rdx),%rdi
  0x0000000116b56d26: mov    0x30(%rdx),%edx
  0x0000000116b56d29: shr    $0x10,%edx
  0x0000000116b56d2c: shl    $0x2,%edx
  0x0000000116b56d2f: mov    0x18(%rdi),%rdi
  0x0000000116b56d33: mov    0x10(%rdi,%rdx,8),%ecx
  0x0000000116b56d37: shr    $0x10,%ecx
  0x0000000116b56d3a: and    $0xff,%ecx
  0x0000000116b56d40: cmp    $0xb4,%ecx
  0x0000000116b56d46: jne    0x0000000116b56ec7
  0x0000000116b56d4c: mov    0x20(%rdi,%rdx,8),%rcx
  0x0000000116b56d51: mov    0x28(%rdi,%rdx,8),%edx
  0x0000000116b56d55: shr    $0x1c,%edx
  0x0000000116b56d58: cmp    $0x8,%edx
  0x0000000116b56d5b: jne    0x0000000116b56df5
  0x0000000116b56d61: mov    (%rax,%rcx,1),%eax
  0x0000000116b56d64: push   %r10
  0x0000000116b56d66: cmp    -0x9d104bd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b56d6d: je     0x0000000116b56dea
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b56d73: mov    %rsp,-0x28(%rsp)
  0x0000000116b56d78: sub    $0x80,%rsp
  0x0000000116b56d7f: mov    %rax,0x78(%rsp)
  0x0000000116b56d84: mov    %rcx,0x70(%rsp)
  0x0000000116b56d89: mov    %rdx,0x68(%rsp)
  0x0000000116b56d8e: mov    %rbx,0x60(%rsp)
  0x0000000116b56d93: mov    %rbp,0x50(%rsp)
  0x0000000116b56d98: mov    %rsi,0x48(%rsp)
  0x0000000116b56d9d: mov    %rdi,0x40(%rsp)
  0x0000000116b56da2: mov    %r8,0x38(%rsp)
  0x0000000116b56da7: mov    %r9,0x30(%rsp)
  0x0000000116b56dac: mov    %r10,0x28(%rsp)
  0x0000000116b56db1: mov    %r11,0x20(%rsp)
  0x0000000116b56db6: mov    %r12,0x18(%rsp)
  0x0000000116b56dbb: mov    %r13,0x10(%rsp)
  0x0000000116b56dc0: mov    %r14,0x8(%rsp)
  0x0000000116b56dc5: mov    %r15,(%rsp)
  0x0000000116b56dc9: movabs $0x10cc64abb,%rdi
  0x0000000116b56dd3: movabs $0x116b56d73,%rsi
  0x0000000116b56ddd: mov    %rsp,%rdx
  0x0000000116b56de0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b56de4: callq  0x000000010c7dd830
  0x0000000116b56de9: hlt    
  0x0000000116b56dea: pop    %r10
  0x0000000116b56dec: shl    $0x3,%rax
  0x0000000116b56df0: jmpq   0x0000000116b56ec0
  0x0000000116b56df5: cmp    $0x4,%edx
  0x0000000116b56df8: jne    0x0000000116b56e06
  0x0000000116b56dfe: mov    (%rax,%rcx,1),%eax
  0x0000000116b56e01: jmpq   0x0000000116b56ec0
  0x0000000116b56e06: cmp    $0x0,%edx
  0x0000000116b56e09: jne    0x0000000116b56e18
  0x0000000116b56e0f: movsbl (%rax,%rcx,1),%eax
  0x0000000116b56e13: jmpq   0x0000000116b56ec0
  0x0000000116b56e18: cmp    $0x1,%edx
  0x0000000116b56e1b: jne    0x0000000116b56e2a
  0x0000000116b56e21: movsbl (%rax,%rcx,1),%eax
  0x0000000116b56e25: jmpq   0x0000000116b56ec0
  0x0000000116b56e2a: cmp    $0x3,%edx
  0x0000000116b56e2d: jne    0x0000000116b56e3c
  0x0000000116b56e33: movswl (%rax,%rcx,1),%eax
  0x0000000116b56e37: jmpq   0x0000000116b56ec0
  0x0000000116b56e3c: cmp    $0x2,%edx
  0x0000000116b56e3f: je     0x0000000116b56ebc
  0x0000000116b56e45: mov    %rsp,-0x28(%rsp)
  0x0000000116b56e4a: sub    $0x80,%rsp
  0x0000000116b56e51: mov    %rax,0x78(%rsp)
  0x0000000116b56e56: mov    %rcx,0x70(%rsp)
  0x0000000116b56e5b: mov    %rdx,0x68(%rsp)
  0x0000000116b56e60: mov    %rbx,0x60(%rsp)
  0x0000000116b56e65: mov    %rbp,0x50(%rsp)
  0x0000000116b56e6a: mov    %rsi,0x48(%rsp)
  0x0000000116b56e6f: mov    %rdi,0x40(%rsp)
  0x0000000116b56e74: mov    %r8,0x38(%rsp)
  0x0000000116b56e79: mov    %r9,0x30(%rsp)
  0x0000000116b56e7e: mov    %r10,0x28(%rsp)
  0x0000000116b56e83: mov    %r11,0x20(%rsp)
  0x0000000116b56e88: mov    %r12,0x18(%rsp)
  0x0000000116b56e8d: mov    %r13,0x10(%rsp)
  0x0000000116b56e92: mov    %r14,0x8(%rsp)
  0x0000000116b56e97: mov    %r15,(%rsp)
  0x0000000116b56e9b: movabs $0x10ccafaf6,%rdi
  0x0000000116b56ea5: movabs $0x116b56e45,%rsi
  0x0000000116b56eaf: mov    %rsp,%rdx
  0x0000000116b56eb2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b56eb6: callq  0x000000010c7dd830
  0x0000000116b56ebb: hlt    
  0x0000000116b56ebc: movzwl (%rax,%rcx,1),%eax
  0x0000000116b56ec0: pop    %rdi
  0x0000000116b56ec1: mov    %r13,%rsp
  0x0000000116b56ec4: jmpq   *%rdi
  0x0000000116b56ec6: retq   
  0x0000000116b56ec7: mov    0x10(%rbx),%rdx
  0x0000000116b56ecb: movzwl 0x2c(%rdx),%ecx
  0x0000000116b56ecf: movzwl 0x2a(%rdx),%edx
  0x0000000116b56ed3: sub    %ecx,%edx
  0x0000000116b56ed5: cmp    $0x1f6,%edx
  0x0000000116b56edb: jbe    0x0000000116b57024
  0x0000000116b56ee1: mov    %rdx,%rax
  0x0000000116b56ee4: shl    $0x3,%rax
  0x0000000116b56ee8: add    $0x50,%rax
  0x0000000116b56eec: cmpq   $0x0,0x1d0(%r15)
  0x0000000116b56ef7: jne    0x0000000116b56f74
  0x0000000116b56efd: mov    %rsp,-0x28(%rsp)
  0x0000000116b56f02: sub    $0x80,%rsp
  0x0000000116b56f09: mov    %rax,0x78(%rsp)
  0x0000000116b56f0e: mov    %rcx,0x70(%rsp)
  0x0000000116b56f13: mov    %rdx,0x68(%rsp)
  0x0000000116b56f18: mov    %rbx,0x60(%rsp)
  0x0000000116b56f1d: mov    %rbp,0x50(%rsp)
  0x0000000116b56f22: mov    %rsi,0x48(%rsp)
  0x0000000116b56f27: mov    %rdi,0x40(%rsp)
  0x0000000116b56f2c: mov    %r8,0x38(%rsp)
  0x0000000116b56f31: mov    %r9,0x30(%rsp)
  0x0000000116b56f36: mov    %r10,0x28(%rsp)
  0x0000000116b56f3b: mov    %r11,0x20(%rsp)
  0x0000000116b56f40: mov    %r12,0x18(%rsp)
  0x0000000116b56f45: mov    %r13,0x10(%rsp)
  0x0000000116b56f4a: mov    %r14,0x8(%rsp)
  0x0000000116b56f4f: mov    %r15,(%rsp)
  0x0000000116b56f53: movabs $0x10ccaf955,%rdi
  0x0000000116b56f5d: movabs $0x116b56efd,%rsi
  0x0000000116b56f67: mov    %rsp,%rdx
  0x0000000116b56f6a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b56f6e: callq  0x000000010c7dd830
  0x0000000116b56f73: hlt    
  0x0000000116b56f74: cmpq   $0x0,0x1d8(%r15)
  0x0000000116b56f7f: jne    0x0000000116b56ffc
  0x0000000116b56f85: mov    %rsp,-0x28(%rsp)
  0x0000000116b56f8a: sub    $0x80,%rsp
  0x0000000116b56f91: mov    %rax,0x78(%rsp)
  0x0000000116b56f96: mov    %rcx,0x70(%rsp)
  0x0000000116b56f9b: mov    %rdx,0x68(%rsp)
  0x0000000116b56fa0: mov    %rbx,0x60(%rsp)
  0x0000000116b56fa5: mov    %rbp,0x50(%rsp)
  0x0000000116b56faa: mov    %rsi,0x48(%rsp)
  0x0000000116b56faf: mov    %rdi,0x40(%rsp)
  0x0000000116b56fb4: mov    %r8,0x38(%rsp)
  0x0000000116b56fb9: mov    %r9,0x30(%rsp)
  0x0000000116b56fbe: mov    %r10,0x28(%rsp)
  0x0000000116b56fc3: mov    %r11,0x20(%rsp)
  0x0000000116b56fc8: mov    %r12,0x18(%rsp)
  0x0000000116b56fcd: mov    %r13,0x10(%rsp)
  0x0000000116b56fd2: mov    %r14,0x8(%rsp)
  0x0000000116b56fd7: mov    %r15,(%rsp)
  0x0000000116b56fdb: movabs $0x10ccaf968,%rdi
  0x0000000116b56fe5: movabs $0x116b56f85,%rsi
  0x0000000116b56fef: mov    %rsp,%rdx
  0x0000000116b56ff2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b56ff6: callq  0x000000010c7dd830
  0x0000000116b56ffb: hlt    
  0x0000000116b56ffc: add    0x1d0(%r15),%rax
  0x0000000116b57003: sub    0x1d8(%r15),%rax
  0x0000000116b5700a: add    $0x16000,%rax
  0x0000000116b57011: cmp    %rax,%rsp
  0x0000000116b57014: ja     0x0000000116b57024
  0x0000000116b5701a: pop    %rax
  0x0000000116b5701b: mov    %r13,%rsp
  0x0000000116b5701e: push   %rax
  0x0000000116b5701f: jmpq   0x0000000116b35280
  0x0000000116b57024: pop    %rax
  0x0000000116b57025: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b5702a: test   %edx,%edx
  0x0000000116b5702c: jle    0x0000000116b5703b
  0x0000000116b57032: pushq  $0x0
  0x0000000116b57037: dec    %edx
  0x0000000116b57039: jg     0x0000000116b57032
  0x0000000116b5703b: push   %rax
  0x0000000116b5703c: push   %rbp
  0x0000000116b5703d: mov    %rsp,%rbp
  0x0000000116b57040: push   %r13
  0x0000000116b57042: pushq  $0x0
  0x0000000116b57047: mov    0x10(%rbx),%r13
  0x0000000116b5704b: lea    0x30(%r13),%r13
  0x0000000116b5704f: push   %rbx
  0x0000000116b57050: pushq  $0x0
  0x0000000116b57055: mov    0x10(%rbx),%rdx
  0x0000000116b57059: mov    0x8(%rdx),%rdx
  0x0000000116b5705d: mov    0x18(%rdx),%rdx
  0x0000000116b57061: push   %rdx
  0x0000000116b57062: push   %r14
  0x0000000116b57064: push   %r13
  0x0000000116b57066: pushq  $0x0
  0x0000000116b5706b: mov    %rsp,(%rsp)
  0x0000000116b5706f: mov    0x28(%rbx),%eax
  0x0000000116b57072: test   $0x100,%eax
  0x0000000116b57077: je     0x0000000116b570f4
  0x0000000116b5707d: mov    %rsp,-0x28(%rsp)
  0x0000000116b57082: sub    $0x80,%rsp
  0x0000000116b57089: mov    %rax,0x78(%rsp)
  0x0000000116b5708e: mov    %rcx,0x70(%rsp)
  0x0000000116b57093: mov    %rdx,0x68(%rsp)
  0x0000000116b57098: mov    %rbx,0x60(%rsp)
  0x0000000116b5709d: mov    %rbp,0x50(%rsp)
  0x0000000116b570a2: mov    %rsi,0x48(%rsp)
  0x0000000116b570a7: mov    %rdi,0x40(%rsp)
  0x0000000116b570ac: mov    %r8,0x38(%rsp)
  0x0000000116b570b1: mov    %r9,0x30(%rsp)
  0x0000000116b570b6: mov    %r10,0x28(%rsp)
  0x0000000116b570bb: mov    %r11,0x20(%rsp)
  0x0000000116b570c0: mov    %r12,0x18(%rsp)
  0x0000000116b570c5: mov    %r13,0x10(%rsp)
  0x0000000116b570ca: mov    %r14,0x8(%rsp)
  0x0000000116b570cf: mov    %r15,(%rsp)
  0x0000000116b570d3: movabs $0x10ccafdb0,%rdi
  0x0000000116b570dd: movabs $0x116b5707d,%rsi
  0x0000000116b570e7: mov    %rsp,%rdx
  0x0000000116b570ea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b570ee: callq  0x000000010c7dd830
  0x0000000116b570f3: hlt    
  0x0000000116b570f4: test   $0x400,%eax
  0x0000000116b570f9: je     0x0000000116b57176
  0x0000000116b570ff: mov    %rsp,-0x28(%rsp)
  0x0000000116b57104: sub    $0x80,%rsp
  0x0000000116b5710b: mov    %rax,0x78(%rsp)
  0x0000000116b57110: mov    %rcx,0x70(%rsp)
  0x0000000116b57115: mov    %rdx,0x68(%rsp)
  0x0000000116b5711a: mov    %rbx,0x60(%rsp)
  0x0000000116b5711f: mov    %rbp,0x50(%rsp)
  0x0000000116b57124: mov    %rsi,0x48(%rsp)
  0x0000000116b57129: mov    %rdi,0x40(%rsp)
  0x0000000116b5712e: mov    %r8,0x38(%rsp)
  0x0000000116b57133: mov    %r9,0x30(%rsp)
  0x0000000116b57138: mov    %r10,0x28(%rsp)
  0x0000000116b5713d: mov    %r11,0x20(%rsp)
  0x0000000116b57142: mov    %r12,0x18(%rsp)
  0x0000000116b57147: mov    %r13,0x10(%rsp)
  0x0000000116b5714c: mov    %r14,0x8(%rsp)
  0x0000000116b57151: mov    %r15,(%rsp)
  0x0000000116b57155: movabs $0x10ccafb36,%rdi
  0x0000000116b5715f: movabs $0x116b570ff,%rsi
  0x0000000116b57169: mov    %rsp,%rdx
  0x0000000116b5716c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57170: callq  0x000000010c7dd830
  0x0000000116b57175: hlt    
  0x0000000116b57176: movb   $0x1,0x33d(%r15)
  0x0000000116b5717e: mov    %eax,-0x1000(%rsp)
  0x0000000116b57185: mov    %eax,-0x2000(%rsp)
  0x0000000116b5718c: mov    %eax,-0x3000(%rsp)
  0x0000000116b57193: mov    %eax,-0x4000(%rsp)
  0x0000000116b5719a: mov    %eax,-0x5000(%rsp)
  0x0000000116b571a1: mov    %eax,-0x6000(%rsp)
  0x0000000116b571a8: mov    %eax,-0x7000(%rsp)
  0x0000000116b571af: mov    %eax,-0x8000(%rsp)
  0x0000000116b571b6: mov    %eax,-0x9000(%rsp)
  0x0000000116b571bd: mov    %eax,-0xa000(%rsp)
  0x0000000116b571c4: mov    %eax,-0xb000(%rsp)
  0x0000000116b571cb: mov    %eax,-0xc000(%rsp)
  0x0000000116b571d2: mov    %eax,-0xd000(%rsp)
  0x0000000116b571d9: mov    %eax,-0xe000(%rsp)
  0x0000000116b571e0: mov    %eax,-0xf000(%rsp)
  0x0000000116b571e7: mov    %eax,-0x10000(%rsp)
  0x0000000116b571ee: mov    %eax,-0x11000(%rsp)
  0x0000000116b571f5: mov    %eax,-0x12000(%rsp)
  0x0000000116b571fc: mov    %eax,-0x13000(%rsp)
  0x0000000116b57203: mov    %eax,-0x14000(%rsp)
  0x0000000116b5720a: mov    %eax,-0x15000(%rsp)
  0x0000000116b57211: mov    %eax,-0x16000(%rsp)
  0x0000000116b57218: movb   $0x0,0x33d(%r15)
  0x0000000116b57220: mov    0x28(%rbx),%eax
  0x0000000116b57223: test   $0x20,%eax
  0x0000000116b57228: je     0x0000000116b572a5
  0x0000000116b5722e: mov    %rsp,-0x28(%rsp)
  0x0000000116b57233: sub    $0x80,%rsp
  0x0000000116b5723a: mov    %rax,0x78(%rsp)
  0x0000000116b5723f: mov    %rcx,0x70(%rsp)
  0x0000000116b57244: mov    %rdx,0x68(%rsp)
  0x0000000116b57249: mov    %rbx,0x60(%rsp)
  0x0000000116b5724e: mov    %rbp,0x50(%rsp)
  0x0000000116b57253: mov    %rsi,0x48(%rsp)
  0x0000000116b57258: mov    %rdi,0x40(%rsp)
  0x0000000116b5725d: mov    %r8,0x38(%rsp)
  0x0000000116b57262: mov    %r9,0x30(%rsp)
  0x0000000116b57267: mov    %r10,0x28(%rsp)
  0x0000000116b5726c: mov    %r11,0x20(%rsp)
  0x0000000116b57271: mov    %r12,0x18(%rsp)
  0x0000000116b57276: mov    %r13,0x10(%rsp)
  0x0000000116b5727b: mov    %r14,0x8(%rsp)
  0x0000000116b57280: mov    %r15,(%rsp)
  0x0000000116b57284: movabs $0x10ccafb66,%rdi
  0x0000000116b5728e: movabs $0x116b5722e,%rsi
  0x0000000116b57298: mov    %rsp,%rdx
  0x0000000116b5729b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5729f: callq  0x000000010c7dd830
  0x0000000116b572a4: hlt    
  0x0000000116b572a5: mov    -0x40(%rbp),%rax
  0x0000000116b572a9: cmp    %rsp,%rax
  0x0000000116b572ac: je     0x0000000116b57329
  0x0000000116b572b2: mov    %rsp,-0x28(%rsp)
  0x0000000116b572b7: sub    $0x80,%rsp
  0x0000000116b572be: mov    %rax,0x78(%rsp)
  0x0000000116b572c3: mov    %rcx,0x70(%rsp)
  0x0000000116b572c8: mov    %rdx,0x68(%rsp)
  0x0000000116b572cd: mov    %rbx,0x60(%rsp)
  0x0000000116b572d2: mov    %rbp,0x50(%rsp)
  0x0000000116b572d7: mov    %rsi,0x48(%rsp)
  0x0000000116b572dc: mov    %rdi,0x40(%rsp)
  0x0000000116b572e1: mov    %r8,0x38(%rsp)
  0x0000000116b572e6: mov    %r9,0x30(%rsp)
  0x0000000116b572eb: mov    %r10,0x28(%rsp)
  0x0000000116b572f0: mov    %r11,0x20(%rsp)
  0x0000000116b572f5: mov    %r12,0x18(%rsp)
  0x0000000116b572fa: mov    %r13,0x10(%rsp)
  0x0000000116b572ff: mov    %r14,0x8(%rsp)
  0x0000000116b57304: mov    %r15,(%rsp)
  0x0000000116b57308: movabs $0x10ccafb83,%rdi
  0x0000000116b57312: movabs $0x116b572b2,%rsi
  0x0000000116b5731c: mov    %rsp,%rdx
  0x0000000116b5731f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57323: callq  0x000000010c7dd830
  0x0000000116b57328: hlt    
  0x0000000116b57329: cmpb   $0x0,-0x9d3a12e(%rip)        # 0x000000010ce1d202
  0x0000000116b57330: je     0x0000000116b573e5
  0x0000000116b57336: mov    -0x18(%rbp),%rsi
  0x0000000116b5733a: mov    %r15,%rdi
  0x0000000116b5733d: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b57345: je     0x0000000116b573c2
  0x0000000116b5734b: mov    %rsp,-0x28(%rsp)
  0x0000000116b57350: sub    $0x80,%rsp
  0x0000000116b57357: mov    %rax,0x78(%rsp)
  0x0000000116b5735c: mov    %rcx,0x70(%rsp)
  0x0000000116b57361: mov    %rdx,0x68(%rsp)
  0x0000000116b57366: mov    %rbx,0x60(%rsp)
  0x0000000116b5736b: mov    %rbp,0x50(%rsp)
  0x0000000116b57370: mov    %rsi,0x48(%rsp)
  0x0000000116b57375: mov    %rdi,0x40(%rsp)
  0x0000000116b5737a: mov    %r8,0x38(%rsp)
  0x0000000116b5737f: mov    %r9,0x30(%rsp)
  0x0000000116b57384: mov    %r10,0x28(%rsp)
  0x0000000116b57389: mov    %r11,0x20(%rsp)
  0x0000000116b5738e: mov    %r12,0x18(%rsp)
  0x0000000116b57393: mov    %r13,0x10(%rsp)
  0x0000000116b57398: mov    %r14,0x8(%rsp)
  0x0000000116b5739d: mov    %r15,(%rsp)
  0x0000000116b573a1: movabs $0x10cc2363b,%rdi
  0x0000000116b573ab: movabs $0x116b5734b,%rsi
  0x0000000116b573b5: mov    %rsp,%rdx
  0x0000000116b573b8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b573bc: callq  0x000000010c7dd830
  0x0000000116b573c1: hlt    
  0x0000000116b573c2: test   $0xf,%esp
  0x0000000116b573c8: je     0x0000000116b573e0
  0x0000000116b573ce: sub    $0x8,%rsp
  0x0000000116b573d2: callq  0x000000010c9c9630
  0x0000000116b573d7: add    $0x8,%rsp
  0x0000000116b573db: jmpq   0x0000000116b573e5
  0x0000000116b573e0: callq  0x000000010c9c9630
  0x0000000116b573e5: movzbl 0x0(%r13),%ebx
  0x0000000116b573ea: movabs $0x10ce3b680,%r10
  0x0000000116b573f4: jmpq   *(%r10,%rbx,8)
  0x0000000116b573f8: int3   
  0x0000000116b573f9: int3   
  0x0000000116b573fa: int3   
  0x0000000116b573fb: int3   
  0x0000000116b573fc: int3   
  0x0000000116b573fd: int3   
  0x0000000116b573fe: int3   
  0x0000000116b573ff: int3   

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_update)  [0x0000000116b57440, 0x0000000116b588c0]  5248 bytes

  0x0000000116b57440: cmpl   $0x0,-0x9d30e0a(%rip)        # 0x000000010ce26640
  0x0000000116b5744a: jne    0x0000000116b5747a
  0x0000000116b57450: mov    0x8(%rsp),%edi
  0x0000000116b57454: mov    0x10(%rsp),%eax
  0x0000000116b57458: movabs $0x10cdca100,%rsi
  0x0000000116b57462: not    %eax
  0x0000000116b57464: xor    %eax,%edi
  0x0000000116b57466: and    $0xff,%edi
  0x0000000116b5746c: shr    $0x8,%eax
  0x0000000116b5746f: xor    (%rsi,%rdi,4),%eax
  0x0000000116b57472: not    %eax
  0x0000000116b57474: pop    %rdi
  0x0000000116b57475: mov    %r13,%rsp
  0x0000000116b57478: jmpq   *%rdi
  0x0000000116b5747a: mov    0x10(%rbx),%rcx
  0x0000000116b5747e: movzwl 0x2c(%rcx),%ecx
  0x0000000116b57482: pop    %rax
  0x0000000116b57483: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b57488: pushq  $0x0
  0x0000000116b5748d: pushq  $0x0
  0x0000000116b57492: push   %rax
  0x0000000116b57493: push   %rbp
  0x0000000116b57494: mov    %rsp,%rbp
  0x0000000116b57497: push   %r13
  0x0000000116b57499: pushq  $0x0
  0x0000000116b5749e: mov    0x10(%rbx),%r13
  0x0000000116b574a2: lea    0x30(%r13),%r13
  0x0000000116b574a6: push   %rbx
  0x0000000116b574a7: pushq  $0x0
  0x0000000116b574ac: mov    0x10(%rbx),%rdx
  0x0000000116b574b0: mov    0x8(%rdx),%rdx
  0x0000000116b574b4: mov    0x18(%rdx),%rdx
  0x0000000116b574b8: push   %rdx
  0x0000000116b574b9: push   %r14
  0x0000000116b574bb: pushq  $0x0
  0x0000000116b574c0: pushq  $0x0
  0x0000000116b574c5: mov    %rsp,(%rsp)
  0x0000000116b574c9: mov    0x28(%rbx),%eax
  0x0000000116b574cc: test   $0x100,%eax
  0x0000000116b574d1: jne    0x0000000116b5754e
  0x0000000116b574d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b574dc: sub    $0x80,%rsp
  0x0000000116b574e3: mov    %rax,0x78(%rsp)
  0x0000000116b574e8: mov    %rcx,0x70(%rsp)
  0x0000000116b574ed: mov    %rdx,0x68(%rsp)
  0x0000000116b574f2: mov    %rbx,0x60(%rsp)
  0x0000000116b574f7: mov    %rbp,0x50(%rsp)
  0x0000000116b574fc: mov    %rsi,0x48(%rsp)
  0x0000000116b57501: mov    %rdi,0x40(%rsp)
  0x0000000116b57506: mov    %r8,0x38(%rsp)
  0x0000000116b5750b: mov    %r9,0x30(%rsp)
  0x0000000116b57510: mov    %r10,0x28(%rsp)
  0x0000000116b57515: mov    %r11,0x20(%rsp)
  0x0000000116b5751a: mov    %r12,0x18(%rsp)
  0x0000000116b5751f: mov    %r13,0x10(%rsp)
  0x0000000116b57524: mov    %r14,0x8(%rsp)
  0x0000000116b57529: mov    %r15,(%rsp)
  0x0000000116b5752d: movabs $0x10ccafb09,%rdi
  0x0000000116b57537: movabs $0x116b574d7,%rsi
  0x0000000116b57541: mov    %rsp,%rdx
  0x0000000116b57544: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57548: callq  0x000000010c7dd830
  0x0000000116b5754d: hlt    
  0x0000000116b5754e: test   $0x400,%eax
  0x0000000116b57553: je     0x0000000116b575d0
  0x0000000116b57559: mov    %rsp,-0x28(%rsp)
  0x0000000116b5755e: sub    $0x80,%rsp
  0x0000000116b57565: mov    %rax,0x78(%rsp)
  0x0000000116b5756a: mov    %rcx,0x70(%rsp)
  0x0000000116b5756f: mov    %rdx,0x68(%rsp)
  0x0000000116b57574: mov    %rbx,0x60(%rsp)
  0x0000000116b57579: mov    %rbp,0x50(%rsp)
  0x0000000116b5757e: mov    %rsi,0x48(%rsp)
  0x0000000116b57583: mov    %rdi,0x40(%rsp)
  0x0000000116b57588: mov    %r8,0x38(%rsp)
  0x0000000116b5758d: mov    %r9,0x30(%rsp)
  0x0000000116b57592: mov    %r10,0x28(%rsp)
  0x0000000116b57597: mov    %r11,0x20(%rsp)
  0x0000000116b5759c: mov    %r12,0x18(%rsp)
  0x0000000116b575a1: mov    %r13,0x10(%rsp)
  0x0000000116b575a6: mov    %r14,0x8(%rsp)
  0x0000000116b575ab: mov    %r15,(%rsp)
  0x0000000116b575af: movabs $0x10ccafb36,%rdi
  0x0000000116b575b9: movabs $0x116b57559,%rsi
  0x0000000116b575c3: mov    %rsp,%rdx
  0x0000000116b575c6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b575ca: callq  0x000000010c7dd830
  0x0000000116b575cf: hlt    
  0x0000000116b575d0: movb   $0x1,0x33d(%r15)
  0x0000000116b575d8: mov    %eax,-0x16000(%rsp)
  0x0000000116b575df: movb   $0x0,0x33d(%r15)
  0x0000000116b575e7: mov    0x28(%rbx),%eax
  0x0000000116b575ea: test   $0x20,%eax
  0x0000000116b575ef: je     0x0000000116b5766c
  0x0000000116b575f5: mov    %rsp,-0x28(%rsp)
  0x0000000116b575fa: sub    $0x80,%rsp
  0x0000000116b57601: mov    %rax,0x78(%rsp)
  0x0000000116b57606: mov    %rcx,0x70(%rsp)
  0x0000000116b5760b: mov    %rdx,0x68(%rsp)
  0x0000000116b57610: mov    %rbx,0x60(%rsp)
  0x0000000116b57615: mov    %rbp,0x50(%rsp)
  0x0000000116b5761a: mov    %rsi,0x48(%rsp)
  0x0000000116b5761f: mov    %rdi,0x40(%rsp)
  0x0000000116b57624: mov    %r8,0x38(%rsp)
  0x0000000116b57629: mov    %r9,0x30(%rsp)
  0x0000000116b5762e: mov    %r10,0x28(%rsp)
  0x0000000116b57633: mov    %r11,0x20(%rsp)
  0x0000000116b57638: mov    %r12,0x18(%rsp)
  0x0000000116b5763d: mov    %r13,0x10(%rsp)
  0x0000000116b57642: mov    %r14,0x8(%rsp)
  0x0000000116b57647: mov    %r15,(%rsp)
  0x0000000116b5764b: movabs $0x10ccafb66,%rdi
  0x0000000116b57655: movabs $0x116b575f5,%rsi
  0x0000000116b5765f: mov    %rsp,%rdx
  0x0000000116b57662: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57666: callq  0x000000010c7dd830
  0x0000000116b5766b: hlt    
  0x0000000116b5766c: mov    -0x40(%rbp),%rax
  0x0000000116b57670: cmp    %rsp,%rax
  0x0000000116b57673: je     0x0000000116b576f0
  0x0000000116b57679: mov    %rsp,-0x28(%rsp)
  0x0000000116b5767e: sub    $0x80,%rsp
  0x0000000116b57685: mov    %rax,0x78(%rsp)
  0x0000000116b5768a: mov    %rcx,0x70(%rsp)
  0x0000000116b5768f: mov    %rdx,0x68(%rsp)
  0x0000000116b57694: mov    %rbx,0x60(%rsp)
  0x0000000116b57699: mov    %rbp,0x50(%rsp)
  0x0000000116b5769e: mov    %rsi,0x48(%rsp)
  0x0000000116b576a3: mov    %rdi,0x40(%rsp)
  0x0000000116b576a8: mov    %r8,0x38(%rsp)
  0x0000000116b576ad: mov    %r9,0x30(%rsp)
  0x0000000116b576b2: mov    %r10,0x28(%rsp)
  0x0000000116b576b7: mov    %r11,0x20(%rsp)
  0x0000000116b576bc: mov    %r12,0x18(%rsp)
  0x0000000116b576c1: mov    %r13,0x10(%rsp)
  0x0000000116b576c6: mov    %r14,0x8(%rsp)
  0x0000000116b576cb: mov    %r15,(%rsp)
  0x0000000116b576cf: movabs $0x10ccafb83,%rdi
  0x0000000116b576d9: movabs $0x116b57679,%rsi
  0x0000000116b576e3: mov    %rsp,%rdx
  0x0000000116b576e6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b576ea: callq  0x000000010c7dd830
  0x0000000116b576ef: hlt    
  0x0000000116b576f0: cmpb   $0x0,-0x9d3a4f5(%rip)        # 0x000000010ce1d202
  0x0000000116b576f7: je     0x0000000116b577ac
  0x0000000116b576fd: mov    -0x18(%rbp),%rsi
  0x0000000116b57701: mov    %r15,%rdi
  0x0000000116b57704: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5770c: je     0x0000000116b57789
  0x0000000116b57712: mov    %rsp,-0x28(%rsp)
  0x0000000116b57717: sub    $0x80,%rsp
  0x0000000116b5771e: mov    %rax,0x78(%rsp)
  0x0000000116b57723: mov    %rcx,0x70(%rsp)
  0x0000000116b57728: mov    %rdx,0x68(%rsp)
  0x0000000116b5772d: mov    %rbx,0x60(%rsp)
  0x0000000116b57732: mov    %rbp,0x50(%rsp)
  0x0000000116b57737: mov    %rsi,0x48(%rsp)
  0x0000000116b5773c: mov    %rdi,0x40(%rsp)
  0x0000000116b57741: mov    %r8,0x38(%rsp)
  0x0000000116b57746: mov    %r9,0x30(%rsp)
  0x0000000116b5774b: mov    %r10,0x28(%rsp)
  0x0000000116b57750: mov    %r11,0x20(%rsp)
  0x0000000116b57755: mov    %r12,0x18(%rsp)
  0x0000000116b5775a: mov    %r13,0x10(%rsp)
  0x0000000116b5775f: mov    %r14,0x8(%rsp)
  0x0000000116b57764: mov    %r15,(%rsp)
  0x0000000116b57768: movabs $0x10cc2363b,%rdi
  0x0000000116b57772: movabs $0x116b57712,%rsi
  0x0000000116b5777c: mov    %rsp,%rdx
  0x0000000116b5777f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57783: callq  0x000000010c7dd830
  0x0000000116b57788: hlt    
  0x0000000116b57789: test   $0xf,%esp
  0x0000000116b5778f: je     0x0000000116b577a7
  0x0000000116b57795: sub    $0x8,%rsp
  0x0000000116b57799: callq  0x000000010c9c9630
  0x0000000116b5779e: add    $0x8,%rsp
  0x0000000116b577a2: jmpq   0x0000000116b577ac
  0x0000000116b577a7: callq  0x000000010c9c9630
  0x0000000116b577ac: mov    -0x18(%rbp),%rbx
  0x0000000116b577b0: mov    0x10(%rbx),%r11
  0x0000000116b577b4: movzwl 0x2c(%r11),%r11d
  0x0000000116b577b9: shl    $0x3,%r11d
  0x0000000116b577bd: sub    %r11,%rsp
  0x0000000116b577c0: sub    $0x0,%rsp
  0x0000000116b577c4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b577c8: mov    0x70(%rbx),%r11
  0x0000000116b577cc: test   %r11,%r11
  0x0000000116b577cf: jne    0x0000000116b57a39
  0x0000000116b577d5: callq  0x0000000116b577df
  0x0000000116b577da: jmpq   0x0000000116b57a31
  0x0000000116b577df: mov    %rbx,%rsi
  0x0000000116b577e2: lea    0x8(%rsp),%rax
  0x0000000116b577e7: mov    %r13,-0x38(%rbp)
  0x0000000116b577eb: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b577f3: je     0x0000000116b57870
  0x0000000116b577f9: mov    %rsp,-0x28(%rsp)
  0x0000000116b577fe: sub    $0x80,%rsp
  0x0000000116b57805: mov    %rax,0x78(%rsp)
  0x0000000116b5780a: mov    %rcx,0x70(%rsp)
  0x0000000116b5780f: mov    %rdx,0x68(%rsp)
  0x0000000116b57814: mov    %rbx,0x60(%rsp)
  0x0000000116b57819: mov    %rbp,0x50(%rsp)
  0x0000000116b5781e: mov    %rsi,0x48(%rsp)
  0x0000000116b57823: mov    %rdi,0x40(%rsp)
  0x0000000116b57828: mov    %r8,0x38(%rsp)
  0x0000000116b5782d: mov    %r9,0x30(%rsp)
  0x0000000116b57832: mov    %r10,0x28(%rsp)
  0x0000000116b57837: mov    %r11,0x20(%rsp)
  0x0000000116b5783c: mov    %r12,0x18(%rsp)
  0x0000000116b57841: mov    %r13,0x10(%rsp)
  0x0000000116b57846: mov    %r14,0x8(%rsp)
  0x0000000116b5784b: mov    %r15,(%rsp)
  0x0000000116b5784f: movabs $0x10cc2363b,%rdi
  0x0000000116b57859: movabs $0x116b577f9,%rsi
  0x0000000116b57863: mov    %rsp,%rdx
  0x0000000116b57866: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5786a: callq  0x000000010c7dd830
  0x0000000116b5786f: hlt    
  0x0000000116b57870: push   %r10
  0x0000000116b57872: cmp    -0x9d10fc9(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b57879: je     0x0000000116b578f6
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5787f: mov    %rsp,-0x28(%rsp)
  0x0000000116b57884: sub    $0x80,%rsp
  0x0000000116b5788b: mov    %rax,0x78(%rsp)
  0x0000000116b57890: mov    %rcx,0x70(%rsp)
  0x0000000116b57895: mov    %rdx,0x68(%rsp)
  0x0000000116b5789a: mov    %rbx,0x60(%rsp)
  0x0000000116b5789f: mov    %rbp,0x50(%rsp)
  0x0000000116b578a4: mov    %rsi,0x48(%rsp)
  0x0000000116b578a9: mov    %rdi,0x40(%rsp)
  0x0000000116b578ae: mov    %r8,0x38(%rsp)
  0x0000000116b578b3: mov    %r9,0x30(%rsp)
  0x0000000116b578b8: mov    %r10,0x28(%rsp)
  0x0000000116b578bd: mov    %r11,0x20(%rsp)
  0x0000000116b578c2: mov    %r12,0x18(%rsp)
  0x0000000116b578c7: mov    %r13,0x10(%rsp)
  0x0000000116b578cc: mov    %r14,0x8(%rsp)
  0x0000000116b578d1: mov    %r15,(%rsp)
  0x0000000116b578d5: movabs $0x10cc63f17,%rdi
  0x0000000116b578df: movabs $0x116b5787f,%rsi
  0x0000000116b578e9: mov    %rsp,%rdx
  0x0000000116b578ec: and    $0xfffffffffffffff0,%rsp
  0x0000000116b578f0: callq  0x000000010c7dd830
  0x0000000116b578f5: hlt    
  0x0000000116b578f6: pop    %r10
  0x0000000116b578f8: mov    %r15,%rdi
  0x0000000116b578fb: mov    %rbp,0x290(%r15)
  0x0000000116b57902: mov    %rax,0x280(%r15)
  0x0000000116b57909: test   $0xf,%esp
  0x0000000116b5790f: je     0x0000000116b57927
  0x0000000116b57915: sub    $0x8,%rsp
  0x0000000116b57919: callq  0x000000010c58e1c0
  0x0000000116b5791e: add    $0x8,%rsp
  0x0000000116b57922: jmpq   0x0000000116b5792c
  0x0000000116b57927: callq  0x000000010c58e1c0
  0x0000000116b5792c: push   %rax
  0x0000000116b5792d: push   %rdi
  0x0000000116b5792e: push   %rsi
  0x0000000116b5792f: push   %rdx
  0x0000000116b57930: push   %rcx
  0x0000000116b57931: push   %r8
  0x0000000116b57933: push   %r9
  0x0000000116b57935: push   %r10
  0x0000000116b57937: mov    %rsp,%r10
  0x0000000116b5793a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5793e: push   %r10
  0x0000000116b57940: push   %r11
  0x0000000116b57942: mov    $0x109,%edi
  0x0000000116b57947: movabs $0x7ff815049fd5,%r10
  0x0000000116b57951: callq  *%r10
  0x0000000116b57954: pop    %r11
  0x0000000116b57956: pop    %rsp
  0x0000000116b57957: pop    %r10
  0x0000000116b57959: pop    %r9
  0x0000000116b5795b: pop    %r8
  0x0000000116b5795d: pop    %rcx
  0x0000000116b5795e: pop    %rdx
  0x0000000116b5795f: pop    %rsi
  0x0000000116b57960: pop    %rdi
  0x0000000116b57961: cmp    %rax,%r15
  0x0000000116b57964: je     0x0000000116b579e1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5796a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5796f: sub    $0x80,%rsp
  0x0000000116b57976: mov    %rax,0x78(%rsp)
  0x0000000116b5797b: mov    %rcx,0x70(%rsp)
  0x0000000116b57980: mov    %rdx,0x68(%rsp)
  0x0000000116b57985: mov    %rbx,0x60(%rsp)
  0x0000000116b5798a: mov    %rbp,0x50(%rsp)
  0x0000000116b5798f: mov    %rsi,0x48(%rsp)
  0x0000000116b57994: mov    %rdi,0x40(%rsp)
  0x0000000116b57999: mov    %r8,0x38(%rsp)
  0x0000000116b5799e: mov    %r9,0x30(%rsp)
  0x0000000116b579a3: mov    %r10,0x28(%rsp)
  0x0000000116b579a8: mov    %r11,0x20(%rsp)
  0x0000000116b579ad: mov    %r12,0x18(%rsp)
  0x0000000116b579b2: mov    %r13,0x10(%rsp)
  0x0000000116b579b7: mov    %r14,0x8(%rsp)
  0x0000000116b579bc: mov    %r15,(%rsp)
  0x0000000116b579c0: movabs $0x10cc6405e,%rdi
  0x0000000116b579ca: movabs $0x116b5796a,%rsi
  0x0000000116b579d4: mov    %rsp,%rdx
  0x0000000116b579d7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b579db: callq  0x000000010c7dd830
  0x0000000116b579e0: hlt    
  0x0000000116b579e1: pop    %rax
  0x0000000116b579e2: movabs $0x0,%r10
  0x0000000116b579ec: mov    %r10,0x280(%r15)
  0x0000000116b579f3: movabs $0x0,%r10
  0x0000000116b579fd: mov    %r10,0x290(%r15)
  0x0000000116b57a04: movabs $0x0,%r10
  0x0000000116b57a0e: mov    %r10,0x288(%r15)
  0x0000000116b57a15: cmpq   $0x0,0x8(%r15)
  0x0000000116b57a1d: je     0x0000000116b57a28
  0x0000000116b57a23: jmpq   0x0000000116b30420
  0x0000000116b57a28: mov    -0x38(%rbp),%r13
  0x0000000116b57a2c: mov    -0x30(%rbp),%r14
  0x0000000116b57a30: retq   
  0x0000000116b57a31: mov    -0x18(%rbp),%rbx
  0x0000000116b57a35: mov    0x70(%rbx),%r11
  0x0000000116b57a39: callq  *%r11
  0x0000000116b57a3c: mov    -0x18(%rbp),%rbx
  0x0000000116b57a40: mov    %rax,0x18(%rbp)
  0x0000000116b57a44: mov    0x28(%rbx),%r11d
  0x0000000116b57a48: test   $0x8,%r11d
  0x0000000116b57a4f: je     0x0000000116b57a6d
  0x0000000116b57a55: mov    0x10(%rbx),%r11
  0x0000000116b57a59: mov    0x8(%r11),%r11
  0x0000000116b57a5d: mov    0x20(%r11),%r11
  0x0000000116b57a61: mov    0x70(%r11),%r11
  0x0000000116b57a65: mov    %r11,0x10(%rbp)
  0x0000000116b57a69: lea    0x10(%rbp),%rsi
  0x0000000116b57a6d: mov    0x68(%rbx),%rax
  0x0000000116b57a71: movabs $0x10c9c8cd0,%r11
  0x0000000116b57a7b: cmp    %r11,%rax
  0x0000000116b57a7e: jne    0x0000000116b57ce8
  0x0000000116b57a84: callq  0x0000000116b57a8e
  0x0000000116b57a89: jmpq   0x0000000116b57ce0
  0x0000000116b57a8e: mov    %rbx,%rsi
  0x0000000116b57a91: lea    0x8(%rsp),%rax
  0x0000000116b57a96: mov    %r13,-0x38(%rbp)
  0x0000000116b57a9a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b57aa2: je     0x0000000116b57b1f
  0x0000000116b57aa8: mov    %rsp,-0x28(%rsp)
  0x0000000116b57aad: sub    $0x80,%rsp
  0x0000000116b57ab4: mov    %rax,0x78(%rsp)
  0x0000000116b57ab9: mov    %rcx,0x70(%rsp)
  0x0000000116b57abe: mov    %rdx,0x68(%rsp)
  0x0000000116b57ac3: mov    %rbx,0x60(%rsp)
  0x0000000116b57ac8: mov    %rbp,0x50(%rsp)
  0x0000000116b57acd: mov    %rsi,0x48(%rsp)
  0x0000000116b57ad2: mov    %rdi,0x40(%rsp)
  0x0000000116b57ad7: mov    %r8,0x38(%rsp)
  0x0000000116b57adc: mov    %r9,0x30(%rsp)
  0x0000000116b57ae1: mov    %r10,0x28(%rsp)
  0x0000000116b57ae6: mov    %r11,0x20(%rsp)
  0x0000000116b57aeb: mov    %r12,0x18(%rsp)
  0x0000000116b57af0: mov    %r13,0x10(%rsp)
  0x0000000116b57af5: mov    %r14,0x8(%rsp)
  0x0000000116b57afa: mov    %r15,(%rsp)
  0x0000000116b57afe: movabs $0x10cc2363b,%rdi
  0x0000000116b57b08: movabs $0x116b57aa8,%rsi
  0x0000000116b57b12: mov    %rsp,%rdx
  0x0000000116b57b15: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57b19: callq  0x000000010c7dd830
  0x0000000116b57b1e: hlt    
  0x0000000116b57b1f: push   %r10
  0x0000000116b57b21: cmp    -0x9d11278(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b57b28: je     0x0000000116b57ba5
  ;; call_VM_base: heap base corrupted?
  0x0000000116b57b2e: mov    %rsp,-0x28(%rsp)
  0x0000000116b57b33: sub    $0x80,%rsp
  0x0000000116b57b3a: mov    %rax,0x78(%rsp)
  0x0000000116b57b3f: mov    %rcx,0x70(%rsp)
  0x0000000116b57b44: mov    %rdx,0x68(%rsp)
  0x0000000116b57b49: mov    %rbx,0x60(%rsp)
  0x0000000116b57b4e: mov    %rbp,0x50(%rsp)
  0x0000000116b57b53: mov    %rsi,0x48(%rsp)
  0x0000000116b57b58: mov    %rdi,0x40(%rsp)
  0x0000000116b57b5d: mov    %r8,0x38(%rsp)
  0x0000000116b57b62: mov    %r9,0x30(%rsp)
  0x0000000116b57b67: mov    %r10,0x28(%rsp)
  0x0000000116b57b6c: mov    %r11,0x20(%rsp)
  0x0000000116b57b71: mov    %r12,0x18(%rsp)
  0x0000000116b57b76: mov    %r13,0x10(%rsp)
  0x0000000116b57b7b: mov    %r14,0x8(%rsp)
  0x0000000116b57b80: mov    %r15,(%rsp)
  0x0000000116b57b84: movabs $0x10cc63f17,%rdi
  0x0000000116b57b8e: movabs $0x116b57b2e,%rsi
  0x0000000116b57b98: mov    %rsp,%rdx
  0x0000000116b57b9b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57b9f: callq  0x000000010c7dd830
  0x0000000116b57ba4: hlt    
  0x0000000116b57ba5: pop    %r10
  0x0000000116b57ba7: mov    %r15,%rdi
  0x0000000116b57baa: mov    %rbp,0x290(%r15)
  0x0000000116b57bb1: mov    %rax,0x280(%r15)
  0x0000000116b57bb8: test   $0xf,%esp
  0x0000000116b57bbe: je     0x0000000116b57bd6
  0x0000000116b57bc4: sub    $0x8,%rsp
  0x0000000116b57bc8: callq  0x000000010c58e1c0
  0x0000000116b57bcd: add    $0x8,%rsp
  0x0000000116b57bd1: jmpq   0x0000000116b57bdb
  0x0000000116b57bd6: callq  0x000000010c58e1c0
  0x0000000116b57bdb: push   %rax
  0x0000000116b57bdc: push   %rdi
  0x0000000116b57bdd: push   %rsi
  0x0000000116b57bde: push   %rdx
  0x0000000116b57bdf: push   %rcx
  0x0000000116b57be0: push   %r8
  0x0000000116b57be2: push   %r9
  0x0000000116b57be4: push   %r10
  0x0000000116b57be6: mov    %rsp,%r10
  0x0000000116b57be9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57bed: push   %r10
  0x0000000116b57bef: push   %r11
  0x0000000116b57bf1: mov    $0x109,%edi
  0x0000000116b57bf6: movabs $0x7ff815049fd5,%r10
  0x0000000116b57c00: callq  *%r10
  0x0000000116b57c03: pop    %r11
  0x0000000116b57c05: pop    %rsp
  0x0000000116b57c06: pop    %r10
  0x0000000116b57c08: pop    %r9
  0x0000000116b57c0a: pop    %r8
  0x0000000116b57c0c: pop    %rcx
  0x0000000116b57c0d: pop    %rdx
  0x0000000116b57c0e: pop    %rsi
  0x0000000116b57c0f: pop    %rdi
  0x0000000116b57c10: cmp    %rax,%r15
  0x0000000116b57c13: je     0x0000000116b57c90
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b57c19: mov    %rsp,-0x28(%rsp)
  0x0000000116b57c1e: sub    $0x80,%rsp
  0x0000000116b57c25: mov    %rax,0x78(%rsp)
  0x0000000116b57c2a: mov    %rcx,0x70(%rsp)
  0x0000000116b57c2f: mov    %rdx,0x68(%rsp)
  0x0000000116b57c34: mov    %rbx,0x60(%rsp)
  0x0000000116b57c39: mov    %rbp,0x50(%rsp)
  0x0000000116b57c3e: mov    %rsi,0x48(%rsp)
  0x0000000116b57c43: mov    %rdi,0x40(%rsp)
  0x0000000116b57c48: mov    %r8,0x38(%rsp)
  0x0000000116b57c4d: mov    %r9,0x30(%rsp)
  0x0000000116b57c52: mov    %r10,0x28(%rsp)
  0x0000000116b57c57: mov    %r11,0x20(%rsp)
  0x0000000116b57c5c: mov    %r12,0x18(%rsp)
  0x0000000116b57c61: mov    %r13,0x10(%rsp)
  0x0000000116b57c66: mov    %r14,0x8(%rsp)
  0x0000000116b57c6b: mov    %r15,(%rsp)
  0x0000000116b57c6f: movabs $0x10cc6405e,%rdi
  0x0000000116b57c79: movabs $0x116b57c19,%rsi
  0x0000000116b57c83: mov    %rsp,%rdx
  0x0000000116b57c86: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57c8a: callq  0x000000010c7dd830
  0x0000000116b57c8f: hlt    
  0x0000000116b57c90: pop    %rax
  0x0000000116b57c91: movabs $0x0,%r10
  0x0000000116b57c9b: mov    %r10,0x280(%r15)
  0x0000000116b57ca2: movabs $0x0,%r10
  0x0000000116b57cac: mov    %r10,0x290(%r15)
  0x0000000116b57cb3: movabs $0x0,%r10
  0x0000000116b57cbd: mov    %r10,0x288(%r15)
  0x0000000116b57cc4: cmpq   $0x0,0x8(%r15)
  0x0000000116b57ccc: je     0x0000000116b57cd7
  0x0000000116b57cd2: jmpq   0x0000000116b30420
  0x0000000116b57cd7: mov    -0x38(%rbp),%r13
  0x0000000116b57cdb: mov    -0x30(%rbp),%r14
  0x0000000116b57cdf: retq   
  0x0000000116b57ce0: mov    -0x18(%rbp),%rbx
  0x0000000116b57ce4: mov    0x68(%rbx),%rax
  0x0000000116b57ce8: lea    0x2a0(%r15),%rdi
  0x0000000116b57cef: mov    %rbp,0x290(%r15)
  0x0000000116b57cf6: movabs $0x116b57cef,%r10
  0x0000000116b57d00: mov    %r10,0x288(%r15)
  0x0000000116b57d07: mov    %rsp,0x280(%r15)
  0x0000000116b57d0e: mov    0x318(%r15),%r11d
  0x0000000116b57d15: cmp    $0x8,%r11d
  0x0000000116b57d19: je     0x0000000116b57d96
  0x0000000116b57d1f: mov    %rsp,-0x28(%rsp)
  0x0000000116b57d24: sub    $0x80,%rsp
  0x0000000116b57d2b: mov    %rax,0x78(%rsp)
  0x0000000116b57d30: mov    %rcx,0x70(%rsp)
  0x0000000116b57d35: mov    %rdx,0x68(%rsp)
  0x0000000116b57d3a: mov    %rbx,0x60(%rsp)
  0x0000000116b57d3f: mov    %rbp,0x50(%rsp)
  0x0000000116b57d44: mov    %rsi,0x48(%rsp)
  0x0000000116b57d49: mov    %rdi,0x40(%rsp)
  0x0000000116b57d4e: mov    %r8,0x38(%rsp)
  0x0000000116b57d53: mov    %r9,0x30(%rsp)
  0x0000000116b57d58: mov    %r10,0x28(%rsp)
  0x0000000116b57d5d: mov    %r11,0x20(%rsp)
  0x0000000116b57d62: mov    %r12,0x18(%rsp)
  0x0000000116b57d67: mov    %r13,0x10(%rsp)
  0x0000000116b57d6c: mov    %r14,0x8(%rsp)
  0x0000000116b57d71: mov    %r15,(%rsp)
  0x0000000116b57d75: movabs $0x10ccafca4,%rdi
  0x0000000116b57d7f: movabs $0x116b57d1f,%rsi
  0x0000000116b57d89: mov    %rsp,%rdx
  0x0000000116b57d8c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57d90: callq  0x000000010c7dd830
  0x0000000116b57d95: hlt    
  0x0000000116b57d96: movl   $0x4,0x318(%r15)
  0x0000000116b57da1: callq  *%rax
  0x0000000116b57da3: vzeroupper 
  0x0000000116b57da6: sub    $0x10,%rsp
  0x0000000116b57daa: vmovsd %xmm0,(%rsp)
  0x0000000116b57daf: sub    $0x10,%rsp
  0x0000000116b57db3: mov    %rax,(%rsp)
  0x0000000116b57db7: movl   $0x5,0x318(%r15)
  0x0000000116b57dc2: lock addl $0x0,(%rsp)
  0x0000000116b57dc7: cmpl   $0x0,-0x9d31791(%rip)        # 0x000000010ce26640
  0x0000000116b57dd1: jne    0x0000000116b57de5
  0x0000000116b57dd7: cmpl   $0x0,0x30(%r15)
  0x0000000116b57ddf: je     0x0000000116b57dfe
  0x0000000116b57de5: mov    %r15,%rdi
  0x0000000116b57de8: mov    %rsp,%r12
  0x0000000116b57deb: sub    $0x0,%rsp
  0x0000000116b57def: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57df3: callq  0x000000010ca7ea20
  0x0000000116b57df8: mov    %r12,%rsp
  0x0000000116b57dfb: xor    %r12,%r12
  0x0000000116b57dfe: movl   $0x8,0x318(%r15)
  0x0000000116b57e09: movabs $0x0,%r10
  0x0000000116b57e13: mov    %r10,0x280(%r15)
  0x0000000116b57e1a: movabs $0x0,%r10
  0x0000000116b57e24: mov    %r10,0x290(%r15)
  0x0000000116b57e2b: movabs $0x0,%r10
  0x0000000116b57e35: mov    %r10,0x288(%r15)
  0x0000000116b57e3c: mov    0x38(%r15),%r11
  0x0000000116b57e40: movl   $0x0,0x108(%r11)
  0x0000000116b57e4b: movabs $0x116b4ef3b,%r11
  0x0000000116b57e55: cmp    0x18(%rbp),%r11
  0x0000000116b57e59: jne    0x0000000116b57e94
  0x0000000116b57e5f: mov    (%rsp),%rax
  0x0000000116b57e63: add    $0x10,%rsp
  0x0000000116b57e67: test   %rax,%rax
  0x0000000116b57e6a: je     0x0000000116b57e88
  0x0000000116b57e70: test   $0x1,%rax
  0x0000000116b57e76: je     0x0000000116b57e85
  0x0000000116b57e7c: mov    -0x1(%rax),%rax
  0x0000000116b57e80: jmpq   0x0000000116b57e88
  0x0000000116b57e85: mov    (%rax),%rax
  0x0000000116b57e88: mov    %rax,0x10(%rbp)
  0x0000000116b57e8c: sub    $0x10,%rsp
  0x0000000116b57e90: mov    %rax,(%rsp)
  0x0000000116b57e94: cmpl   $0x1,0x344(%r15)
  0x0000000116b57e9f: jne    0x0000000116b57f62
  0x0000000116b57ea5: mov    %rsp,-0x28(%rsp)
  0x0000000116b57eaa: sub    $0x80,%rsp
  0x0000000116b57eb1: mov    %rax,0x78(%rsp)
  0x0000000116b57eb6: mov    %rcx,0x70(%rsp)
  0x0000000116b57ebb: mov    %rdx,0x68(%rsp)
  0x0000000116b57ec0: mov    %rbx,0x60(%rsp)
  0x0000000116b57ec5: mov    %rbp,0x50(%rsp)
  0x0000000116b57eca: mov    %rsi,0x48(%rsp)
  0x0000000116b57ecf: mov    %rdi,0x40(%rsp)
  0x0000000116b57ed4: mov    %r8,0x38(%rsp)
  0x0000000116b57ed9: mov    %r9,0x30(%rsp)
  0x0000000116b57ede: mov    %r10,0x28(%rsp)
  0x0000000116b57ee3: mov    %r11,0x20(%rsp)
  0x0000000116b57ee8: mov    %r12,0x18(%rsp)
  0x0000000116b57eed: mov    %r13,0x10(%rsp)
  0x0000000116b57ef2: mov    %r14,0x8(%rsp)
  0x0000000116b57ef7: mov    %r15,(%rsp)
  0x0000000116b57efb: mov    %rsp,%r12
  0x0000000116b57efe: sub    $0x0,%rsp
  0x0000000116b57f02: and    $0xfffffffffffffff0,%rsp
  0x0000000116b57f06: callq  0x000000010c9ccc30
  0x0000000116b57f0b: mov    %r12,%rsp
  0x0000000116b57f0e: mov    (%rsp),%r15
  0x0000000116b57f12: mov    0x8(%rsp),%r14
  0x0000000116b57f17: mov    0x10(%rsp),%r13
  0x0000000116b57f1c: mov    0x18(%rsp),%r12
  0x0000000116b57f21: mov    0x20(%rsp),%r11
  0x0000000116b57f26: mov    0x28(%rsp),%r10
  0x0000000116b57f2b: mov    0x30(%rsp),%r9
  0x0000000116b57f30: mov    0x38(%rsp),%r8
  0x0000000116b57f35: mov    0x40(%rsp),%rdi
  0x0000000116b57f3a: mov    0x48(%rsp),%rsi
  0x0000000116b57f3f: mov    0x50(%rsp),%rbp
  0x0000000116b57f44: mov    0x60(%rsp),%rbx
  0x0000000116b57f49: mov    0x68(%rsp),%rdx
  0x0000000116b57f4e: mov    0x70(%rsp),%rcx
  0x0000000116b57f53: mov    0x78(%rsp),%rax
  0x0000000116b57f58: add    $0x80,%rsp
  0x0000000116b57f5f: xor    %r12,%r12
  0x0000000116b57f62: mov    -0x18(%rbp),%rbx
  0x0000000116b57f66: mov    0x10(%rbx),%r13
  0x0000000116b57f6a: lea    0x30(%r13),%r13
  0x0000000116b57f6e: cmpq   $0x0,0x8(%r15)
  0x0000000116b57f76: je     0x0000000116b5824c
  0x0000000116b57f7c: callq  0x0000000116b57f86
  0x0000000116b57f81: jmpq   0x0000000116b581d5
  0x0000000116b57f86: lea    0x8(%rsp),%rax
  0x0000000116b57f8b: mov    %r13,-0x38(%rbp)
  0x0000000116b57f8f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b57f97: je     0x0000000116b58014
  0x0000000116b57f9d: mov    %rsp,-0x28(%rsp)
  0x0000000116b57fa2: sub    $0x80,%rsp
  0x0000000116b57fa9: mov    %rax,0x78(%rsp)
  0x0000000116b57fae: mov    %rcx,0x70(%rsp)
  0x0000000116b57fb3: mov    %rdx,0x68(%rsp)
  0x0000000116b57fb8: mov    %rbx,0x60(%rsp)
  0x0000000116b57fbd: mov    %rbp,0x50(%rsp)
  0x0000000116b57fc2: mov    %rsi,0x48(%rsp)
  0x0000000116b57fc7: mov    %rdi,0x40(%rsp)
  0x0000000116b57fcc: mov    %r8,0x38(%rsp)
  0x0000000116b57fd1: mov    %r9,0x30(%rsp)
  0x0000000116b57fd6: mov    %r10,0x28(%rsp)
  0x0000000116b57fdb: mov    %r11,0x20(%rsp)
  0x0000000116b57fe0: mov    %r12,0x18(%rsp)
  0x0000000116b57fe5: mov    %r13,0x10(%rsp)
  0x0000000116b57fea: mov    %r14,0x8(%rsp)
  0x0000000116b57fef: mov    %r15,(%rsp)
  0x0000000116b57ff3: movabs $0x10cc2363b,%rdi
  0x0000000116b57ffd: movabs $0x116b57f9d,%rsi
  0x0000000116b58007: mov    %rsp,%rdx
  0x0000000116b5800a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5800e: callq  0x000000010c7dd830
  0x0000000116b58013: hlt    
  0x0000000116b58014: push   %r10
  0x0000000116b58016: cmp    -0x9d1176d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5801d: je     0x0000000116b5809a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b58023: mov    %rsp,-0x28(%rsp)
  0x0000000116b58028: sub    $0x80,%rsp
  0x0000000116b5802f: mov    %rax,0x78(%rsp)
  0x0000000116b58034: mov    %rcx,0x70(%rsp)
  0x0000000116b58039: mov    %rdx,0x68(%rsp)
  0x0000000116b5803e: mov    %rbx,0x60(%rsp)
  0x0000000116b58043: mov    %rbp,0x50(%rsp)
  0x0000000116b58048: mov    %rsi,0x48(%rsp)
  0x0000000116b5804d: mov    %rdi,0x40(%rsp)
  0x0000000116b58052: mov    %r8,0x38(%rsp)
  0x0000000116b58057: mov    %r9,0x30(%rsp)
  0x0000000116b5805c: mov    %r10,0x28(%rsp)
  0x0000000116b58061: mov    %r11,0x20(%rsp)
  0x0000000116b58066: mov    %r12,0x18(%rsp)
  0x0000000116b5806b: mov    %r13,0x10(%rsp)
  0x0000000116b58070: mov    %r14,0x8(%rsp)
  0x0000000116b58075: mov    %r15,(%rsp)
  0x0000000116b58079: movabs $0x10cc63f17,%rdi
  0x0000000116b58083: movabs $0x116b58023,%rsi
  0x0000000116b5808d: mov    %rsp,%rdx
  0x0000000116b58090: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58094: callq  0x000000010c7dd830
  0x0000000116b58099: hlt    
  0x0000000116b5809a: pop    %r10
  0x0000000116b5809c: mov    %r15,%rdi
  0x0000000116b5809f: mov    %rbp,0x290(%r15)
  0x0000000116b580a6: mov    %rax,0x280(%r15)
  0x0000000116b580ad: test   $0xf,%esp
  0x0000000116b580b3: je     0x0000000116b580cb
  0x0000000116b580b9: sub    $0x8,%rsp
  0x0000000116b580bd: callq  0x000000010c5881a0
  0x0000000116b580c2: add    $0x8,%rsp
  0x0000000116b580c6: jmpq   0x0000000116b580d0
  0x0000000116b580cb: callq  0x000000010c5881a0
  0x0000000116b580d0: push   %rax
  0x0000000116b580d1: push   %rdi
  0x0000000116b580d2: push   %rsi
  0x0000000116b580d3: push   %rdx
  0x0000000116b580d4: push   %rcx
  0x0000000116b580d5: push   %r8
  0x0000000116b580d7: push   %r9
  0x0000000116b580d9: push   %r10
  0x0000000116b580db: mov    %rsp,%r10
  0x0000000116b580de: and    $0xfffffffffffffff0,%rsp
  0x0000000116b580e2: push   %r10
  0x0000000116b580e4: push   %r11
  0x0000000116b580e6: mov    $0x109,%edi
  0x0000000116b580eb: movabs $0x7ff815049fd5,%r10
  0x0000000116b580f5: callq  *%r10
  0x0000000116b580f8: pop    %r11
  0x0000000116b580fa: pop    %rsp
  0x0000000116b580fb: pop    %r10
  0x0000000116b580fd: pop    %r9
  0x0000000116b580ff: pop    %r8
  0x0000000116b58101: pop    %rcx
  0x0000000116b58102: pop    %rdx
  0x0000000116b58103: pop    %rsi
  0x0000000116b58104: pop    %rdi
  0x0000000116b58105: cmp    %rax,%r15
  0x0000000116b58108: je     0x0000000116b58185
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5810e: mov    %rsp,-0x28(%rsp)
  0x0000000116b58113: sub    $0x80,%rsp
  0x0000000116b5811a: mov    %rax,0x78(%rsp)
  0x0000000116b5811f: mov    %rcx,0x70(%rsp)
  0x0000000116b58124: mov    %rdx,0x68(%rsp)
  0x0000000116b58129: mov    %rbx,0x60(%rsp)
  0x0000000116b5812e: mov    %rbp,0x50(%rsp)
  0x0000000116b58133: mov    %rsi,0x48(%rsp)
  0x0000000116b58138: mov    %rdi,0x40(%rsp)
  0x0000000116b5813d: mov    %r8,0x38(%rsp)
  0x0000000116b58142: mov    %r9,0x30(%rsp)
  0x0000000116b58147: mov    %r10,0x28(%rsp)
  0x0000000116b5814c: mov    %r11,0x20(%rsp)
  0x0000000116b58151: mov    %r12,0x18(%rsp)
  0x0000000116b58156: mov    %r13,0x10(%rsp)
  0x0000000116b5815b: mov    %r14,0x8(%rsp)
  0x0000000116b58160: mov    %r15,(%rsp)
  0x0000000116b58164: movabs $0x10cc6405e,%rdi
  0x0000000116b5816e: movabs $0x116b5810e,%rsi
  0x0000000116b58178: mov    %rsp,%rdx
  0x0000000116b5817b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5817f: callq  0x000000010c7dd830
  0x0000000116b58184: hlt    
  0x0000000116b58185: pop    %rax
  0x0000000116b58186: movabs $0x0,%r10
  0x0000000116b58190: mov    %r10,0x280(%r15)
  0x0000000116b58197: movabs $0x0,%r10
  0x0000000116b581a1: mov    %r10,0x290(%r15)
  0x0000000116b581a8: movabs $0x0,%r10
  0x0000000116b581b2: mov    %r10,0x288(%r15)
  0x0000000116b581b9: cmpq   $0x0,0x8(%r15)
  0x0000000116b581c1: je     0x0000000116b581cc
  0x0000000116b581c7: jmpq   0x0000000116b30420
  0x0000000116b581cc: mov    -0x38(%rbp),%r13
  0x0000000116b581d0: mov    -0x30(%rbp),%r14
  0x0000000116b581d4: retq   
  0x0000000116b581d5: mov    %rsp,-0x28(%rsp)
  0x0000000116b581da: sub    $0x80,%rsp
  0x0000000116b581e1: mov    %rax,0x78(%rsp)
  0x0000000116b581e6: mov    %rcx,0x70(%rsp)
  0x0000000116b581eb: mov    %rdx,0x68(%rsp)
  0x0000000116b581f0: mov    %rbx,0x60(%rsp)
  0x0000000116b581f5: mov    %rbp,0x50(%rsp)
  0x0000000116b581fa: mov    %rsi,0x48(%rsp)
  0x0000000116b581ff: mov    %rdi,0x40(%rsp)
  0x0000000116b58204: mov    %r8,0x38(%rsp)
  0x0000000116b58209: mov    %r9,0x30(%rsp)
  0x0000000116b5820e: mov    %r10,0x28(%rsp)
  0x0000000116b58213: mov    %r11,0x20(%rsp)
  0x0000000116b58218: mov    %r12,0x18(%rsp)
  0x0000000116b5821d: mov    %r13,0x10(%rsp)
  0x0000000116b58222: mov    %r14,0x8(%rsp)
  0x0000000116b58227: mov    %r15,(%rsp)
  0x0000000116b5822b: movabs $0x10cb763be,%rdi
  0x0000000116b58235: movabs $0x116b581d5,%rsi
  0x0000000116b5823f: mov    %rsp,%rdx
  0x0000000116b58242: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58246: callq  0x000000010c7dd830
  0x0000000116b5824b: hlt    
  0x0000000116b5824c: mov    0x28(%rbx),%r11d
  0x0000000116b58250: test   $0x20,%r11d
  0x0000000116b58257: je     0x0000000116b587da
  0x0000000116b5825d: lea    -0x50(%rbp),%rsi
  0x0000000116b58261: mov    0x8(%rsi),%r11
  0x0000000116b58265: test   %r11,%r11
  0x0000000116b58268: jne    0x0000000116b5853e
  0x0000000116b5826e: callq  0x0000000116b58278
  0x0000000116b58273: jmpq   0x0000000116b584c7
  0x0000000116b58278: lea    0x8(%rsp),%rax
  0x0000000116b5827d: mov    %r13,-0x38(%rbp)
  0x0000000116b58281: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b58289: je     0x0000000116b58306
  0x0000000116b5828f: mov    %rsp,-0x28(%rsp)
  0x0000000116b58294: sub    $0x80,%rsp
  0x0000000116b5829b: mov    %rax,0x78(%rsp)
  0x0000000116b582a0: mov    %rcx,0x70(%rsp)
  0x0000000116b582a5: mov    %rdx,0x68(%rsp)
  0x0000000116b582aa: mov    %rbx,0x60(%rsp)
  0x0000000116b582af: mov    %rbp,0x50(%rsp)
  0x0000000116b582b4: mov    %rsi,0x48(%rsp)
  0x0000000116b582b9: mov    %rdi,0x40(%rsp)
  0x0000000116b582be: mov    %r8,0x38(%rsp)
  0x0000000116b582c3: mov    %r9,0x30(%rsp)
  0x0000000116b582c8: mov    %r10,0x28(%rsp)
  0x0000000116b582cd: mov    %r11,0x20(%rsp)
  0x0000000116b582d2: mov    %r12,0x18(%rsp)
  0x0000000116b582d7: mov    %r13,0x10(%rsp)
  0x0000000116b582dc: mov    %r14,0x8(%rsp)
  0x0000000116b582e1: mov    %r15,(%rsp)
  0x0000000116b582e5: movabs $0x10cc2363b,%rdi
  0x0000000116b582ef: movabs $0x116b5828f,%rsi
  0x0000000116b582f9: mov    %rsp,%rdx
  0x0000000116b582fc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58300: callq  0x000000010c7dd830
  0x0000000116b58305: hlt    
  0x0000000116b58306: push   %r10
  0x0000000116b58308: cmp    -0x9d11a5f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5830f: je     0x0000000116b5838c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b58315: mov    %rsp,-0x28(%rsp)
  0x0000000116b5831a: sub    $0x80,%rsp
  0x0000000116b58321: mov    %rax,0x78(%rsp)
  0x0000000116b58326: mov    %rcx,0x70(%rsp)
  0x0000000116b5832b: mov    %rdx,0x68(%rsp)
  0x0000000116b58330: mov    %rbx,0x60(%rsp)
  0x0000000116b58335: mov    %rbp,0x50(%rsp)
  0x0000000116b5833a: mov    %rsi,0x48(%rsp)
  0x0000000116b5833f: mov    %rdi,0x40(%rsp)
  0x0000000116b58344: mov    %r8,0x38(%rsp)
  0x0000000116b58349: mov    %r9,0x30(%rsp)
  0x0000000116b5834e: mov    %r10,0x28(%rsp)
  0x0000000116b58353: mov    %r11,0x20(%rsp)
  0x0000000116b58358: mov    %r12,0x18(%rsp)
  0x0000000116b5835d: mov    %r13,0x10(%rsp)
  0x0000000116b58362: mov    %r14,0x8(%rsp)
  0x0000000116b58367: mov    %r15,(%rsp)
  0x0000000116b5836b: movabs $0x10cc63f17,%rdi
  0x0000000116b58375: movabs $0x116b58315,%rsi
  0x0000000116b5837f: mov    %rsp,%rdx
  0x0000000116b58382: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58386: callq  0x000000010c7dd830
  0x0000000116b5838b: hlt    
  0x0000000116b5838c: pop    %r10
  0x0000000116b5838e: mov    %r15,%rdi
  0x0000000116b58391: mov    %rbp,0x290(%r15)
  0x0000000116b58398: mov    %rax,0x280(%r15)
  0x0000000116b5839f: test   $0xf,%esp
  0x0000000116b583a5: je     0x0000000116b583bd
  0x0000000116b583ab: sub    $0x8,%rsp
  0x0000000116b583af: callq  0x000000010c5892a0
  0x0000000116b583b4: add    $0x8,%rsp
  0x0000000116b583b8: jmpq   0x0000000116b583c2
  0x0000000116b583bd: callq  0x000000010c5892a0
  0x0000000116b583c2: push   %rax
  0x0000000116b583c3: push   %rdi
  0x0000000116b583c4: push   %rsi
  0x0000000116b583c5: push   %rdx
  0x0000000116b583c6: push   %rcx
  0x0000000116b583c7: push   %r8
  0x0000000116b583c9: push   %r9
  0x0000000116b583cb: push   %r10
  0x0000000116b583cd: mov    %rsp,%r10
  0x0000000116b583d0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b583d4: push   %r10
  0x0000000116b583d6: push   %r11
  0x0000000116b583d8: mov    $0x109,%edi
  0x0000000116b583dd: movabs $0x7ff815049fd5,%r10
  0x0000000116b583e7: callq  *%r10
  0x0000000116b583ea: pop    %r11
  0x0000000116b583ec: pop    %rsp
  0x0000000116b583ed: pop    %r10
  0x0000000116b583ef: pop    %r9
  0x0000000116b583f1: pop    %r8
  0x0000000116b583f3: pop    %rcx
  0x0000000116b583f4: pop    %rdx
  0x0000000116b583f5: pop    %rsi
  0x0000000116b583f6: pop    %rdi
  0x0000000116b583f7: cmp    %rax,%r15
  0x0000000116b583fa: je     0x0000000116b58477
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b58400: mov    %rsp,-0x28(%rsp)
  0x0000000116b58405: sub    $0x80,%rsp
  0x0000000116b5840c: mov    %rax,0x78(%rsp)
  0x0000000116b58411: mov    %rcx,0x70(%rsp)
  0x0000000116b58416: mov    %rdx,0x68(%rsp)
  0x0000000116b5841b: mov    %rbx,0x60(%rsp)
  0x0000000116b58420: mov    %rbp,0x50(%rsp)
  0x0000000116b58425: mov    %rsi,0x48(%rsp)
  0x0000000116b5842a: mov    %rdi,0x40(%rsp)
  0x0000000116b5842f: mov    %r8,0x38(%rsp)
  0x0000000116b58434: mov    %r9,0x30(%rsp)
  0x0000000116b58439: mov    %r10,0x28(%rsp)
  0x0000000116b5843e: mov    %r11,0x20(%rsp)
  0x0000000116b58443: mov    %r12,0x18(%rsp)
  0x0000000116b58448: mov    %r13,0x10(%rsp)
  0x0000000116b5844d: mov    %r14,0x8(%rsp)
  0x0000000116b58452: mov    %r15,(%rsp)
  0x0000000116b58456: movabs $0x10cc6405e,%rdi
  0x0000000116b58460: movabs $0x116b58400,%rsi
  0x0000000116b5846a: mov    %rsp,%rdx
  0x0000000116b5846d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58471: callq  0x000000010c7dd830
  0x0000000116b58476: hlt    
  0x0000000116b58477: pop    %rax
  0x0000000116b58478: movabs $0x0,%r10
  0x0000000116b58482: mov    %r10,0x280(%r15)
  0x0000000116b58489: movabs $0x0,%r10
  0x0000000116b58493: mov    %r10,0x290(%r15)
  0x0000000116b5849a: movabs $0x0,%r10
  0x0000000116b584a4: mov    %r10,0x288(%r15)
  0x0000000116b584ab: cmpq   $0x0,0x8(%r15)
  0x0000000116b584b3: je     0x0000000116b584be
  0x0000000116b584b9: jmpq   0x0000000116b30420
  0x0000000116b584be: mov    -0x38(%rbp),%r13
  0x0000000116b584c2: mov    -0x30(%rbp),%r14
  0x0000000116b584c6: retq   
  0x0000000116b584c7: mov    %rsp,-0x28(%rsp)
  0x0000000116b584cc: sub    $0x80,%rsp
  0x0000000116b584d3: mov    %rax,0x78(%rsp)
  0x0000000116b584d8: mov    %rcx,0x70(%rsp)
  0x0000000116b584dd: mov    %rdx,0x68(%rsp)
  0x0000000116b584e2: mov    %rbx,0x60(%rsp)
  0x0000000116b584e7: mov    %rbp,0x50(%rsp)
  0x0000000116b584ec: mov    %rsi,0x48(%rsp)
  0x0000000116b584f1: mov    %rdi,0x40(%rsp)
  0x0000000116b584f6: mov    %r8,0x38(%rsp)
  0x0000000116b584fb: mov    %r9,0x30(%rsp)
  0x0000000116b58500: mov    %r10,0x28(%rsp)
  0x0000000116b58505: mov    %r11,0x20(%rsp)
  0x0000000116b5850a: mov    %r12,0x18(%rsp)
  0x0000000116b5850f: mov    %r13,0x10(%rsp)
  0x0000000116b58514: mov    %r14,0x8(%rsp)
  0x0000000116b58519: mov    %r15,(%rsp)
  0x0000000116b5851d: movabs $0x10cb763be,%rdi
  0x0000000116b58527: movabs $0x116b584c7,%rsi
  0x0000000116b58531: mov    %rsp,%rdx
  0x0000000116b58534: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58538: callq  0x000000010c7dd830
  0x0000000116b5853d: hlt    
  0x0000000116b5853e: mov    %r13,-0x38(%rbp)
  0x0000000116b58542: lea    (%rsi),%rax
  0x0000000116b58545: mov    0x8(%rsi),%rcx
  0x0000000116b58549: movq   $0x0,0x8(%rsi)
  0x0000000116b58551: mov    (%rcx),%rdx
  0x0000000116b58554: and    $0x7,%rdx
  0x0000000116b58558: cmp    $0x5,%rdx
  0x0000000116b5855c: je     0x0000000116b587d6
  0x0000000116b58562: mov    (%rax),%rdx
  0x0000000116b58565: test   %rdx,%rdx
  0x0000000116b58568: je     0x0000000116b587d6
  0x0000000116b5856e: lock cmpxchg %rdx,(%rcx)
  0x0000000116b58573: je     0x0000000116b587d6
  0x0000000116b58579: mov    %rcx,0x8(%rsi)
  0x0000000116b5857d: callq  0x0000000116b58587
  0x0000000116b58582: jmpq   0x0000000116b587d6
  0x0000000116b58587: lea    0x8(%rsp),%rax
  0x0000000116b5858c: mov    %r13,-0x38(%rbp)
  0x0000000116b58590: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b58598: je     0x0000000116b58615
  0x0000000116b5859e: mov    %rsp,-0x28(%rsp)
  0x0000000116b585a3: sub    $0x80,%rsp
  0x0000000116b585aa: mov    %rax,0x78(%rsp)
  0x0000000116b585af: mov    %rcx,0x70(%rsp)
  0x0000000116b585b4: mov    %rdx,0x68(%rsp)
  0x0000000116b585b9: mov    %rbx,0x60(%rsp)
  0x0000000116b585be: mov    %rbp,0x50(%rsp)
  0x0000000116b585c3: mov    %rsi,0x48(%rsp)
  0x0000000116b585c8: mov    %rdi,0x40(%rsp)
  0x0000000116b585cd: mov    %r8,0x38(%rsp)
  0x0000000116b585d2: mov    %r9,0x30(%rsp)
  0x0000000116b585d7: mov    %r10,0x28(%rsp)
  0x0000000116b585dc: mov    %r11,0x20(%rsp)
  0x0000000116b585e1: mov    %r12,0x18(%rsp)
  0x0000000116b585e6: mov    %r13,0x10(%rsp)
  0x0000000116b585eb: mov    %r14,0x8(%rsp)
  0x0000000116b585f0: mov    %r15,(%rsp)
  0x0000000116b585f4: movabs $0x10cc2363b,%rdi
  0x0000000116b585fe: movabs $0x116b5859e,%rsi
  0x0000000116b58608: mov    %rsp,%rdx
  0x0000000116b5860b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5860f: callq  0x000000010c7dd830
  0x0000000116b58614: hlt    
  0x0000000116b58615: push   %r10
  0x0000000116b58617: cmp    -0x9d11d6e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5861e: je     0x0000000116b5869b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b58624: mov    %rsp,-0x28(%rsp)
  0x0000000116b58629: sub    $0x80,%rsp
  0x0000000116b58630: mov    %rax,0x78(%rsp)
  0x0000000116b58635: mov    %rcx,0x70(%rsp)
  0x0000000116b5863a: mov    %rdx,0x68(%rsp)
  0x0000000116b5863f: mov    %rbx,0x60(%rsp)
  0x0000000116b58644: mov    %rbp,0x50(%rsp)
  0x0000000116b58649: mov    %rsi,0x48(%rsp)
  0x0000000116b5864e: mov    %rdi,0x40(%rsp)
  0x0000000116b58653: mov    %r8,0x38(%rsp)
  0x0000000116b58658: mov    %r9,0x30(%rsp)
  0x0000000116b5865d: mov    %r10,0x28(%rsp)
  0x0000000116b58662: mov    %r11,0x20(%rsp)
  0x0000000116b58667: mov    %r12,0x18(%rsp)
  0x0000000116b5866c: mov    %r13,0x10(%rsp)
  0x0000000116b58671: mov    %r14,0x8(%rsp)
  0x0000000116b58676: mov    %r15,(%rsp)
  0x0000000116b5867a: movabs $0x10cc63f17,%rdi
  0x0000000116b58684: movabs $0x116b58624,%rsi
  0x0000000116b5868e: mov    %rsp,%rdx
  0x0000000116b58691: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58695: callq  0x000000010c7dd830
  0x0000000116b5869a: hlt    
  0x0000000116b5869b: pop    %r10
  0x0000000116b5869d: mov    %r15,%rdi
  0x0000000116b586a0: mov    %rbp,0x290(%r15)
  0x0000000116b586a7: mov    %rax,0x280(%r15)
  0x0000000116b586ae: test   $0xf,%esp
  0x0000000116b586b4: je     0x0000000116b586cc
  0x0000000116b586ba: sub    $0x8,%rsp
  0x0000000116b586be: callq  0x000000010c588f80
  0x0000000116b586c3: add    $0x8,%rsp
  0x0000000116b586c7: jmpq   0x0000000116b586d1
  0x0000000116b586cc: callq  0x000000010c588f80
  0x0000000116b586d1: push   %rax
  0x0000000116b586d2: push   %rdi
  0x0000000116b586d3: push   %rsi
  0x0000000116b586d4: push   %rdx
  0x0000000116b586d5: push   %rcx
  0x0000000116b586d6: push   %r8
  0x0000000116b586d8: push   %r9
  0x0000000116b586da: push   %r10
  0x0000000116b586dc: mov    %rsp,%r10
  0x0000000116b586df: and    $0xfffffffffffffff0,%rsp
  0x0000000116b586e3: push   %r10
  0x0000000116b586e5: push   %r11
  0x0000000116b586e7: mov    $0x109,%edi
  0x0000000116b586ec: movabs $0x7ff815049fd5,%r10
  0x0000000116b586f6: callq  *%r10
  0x0000000116b586f9: pop    %r11
  0x0000000116b586fb: pop    %rsp
  0x0000000116b586fc: pop    %r10
  0x0000000116b586fe: pop    %r9
  0x0000000116b58700: pop    %r8
  0x0000000116b58702: pop    %rcx
  0x0000000116b58703: pop    %rdx
  0x0000000116b58704: pop    %rsi
  0x0000000116b58705: pop    %rdi
  0x0000000116b58706: cmp    %rax,%r15
  0x0000000116b58709: je     0x0000000116b58786
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5870f: mov    %rsp,-0x28(%rsp)
  0x0000000116b58714: sub    $0x80,%rsp
  0x0000000116b5871b: mov    %rax,0x78(%rsp)
  0x0000000116b58720: mov    %rcx,0x70(%rsp)
  0x0000000116b58725: mov    %rdx,0x68(%rsp)
  0x0000000116b5872a: mov    %rbx,0x60(%rsp)
  0x0000000116b5872f: mov    %rbp,0x50(%rsp)
  0x0000000116b58734: mov    %rsi,0x48(%rsp)
  0x0000000116b58739: mov    %rdi,0x40(%rsp)
  0x0000000116b5873e: mov    %r8,0x38(%rsp)
  0x0000000116b58743: mov    %r9,0x30(%rsp)
  0x0000000116b58748: mov    %r10,0x28(%rsp)
  0x0000000116b5874d: mov    %r11,0x20(%rsp)
  0x0000000116b58752: mov    %r12,0x18(%rsp)
  0x0000000116b58757: mov    %r13,0x10(%rsp)
  0x0000000116b5875c: mov    %r14,0x8(%rsp)
  0x0000000116b58761: mov    %r15,(%rsp)
  0x0000000116b58765: movabs $0x10cc6405e,%rdi
  0x0000000116b5876f: movabs $0x116b5870f,%rsi
  0x0000000116b58779: mov    %rsp,%rdx
  0x0000000116b5877c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58780: callq  0x000000010c7dd830
  0x0000000116b58785: hlt    
  0x0000000116b58786: pop    %rax
  0x0000000116b58787: movabs $0x0,%r10
  0x0000000116b58791: mov    %r10,0x280(%r15)
  0x0000000116b58798: movabs $0x0,%r10
  0x0000000116b587a2: mov    %r10,0x290(%r15)
  0x0000000116b587a9: movabs $0x0,%r10
  0x0000000116b587b3: mov    %r10,0x288(%r15)
  0x0000000116b587ba: cmpq   $0x0,0x8(%r15)
  0x0000000116b587c2: je     0x0000000116b587cd
  0x0000000116b587c8: jmpq   0x0000000116b30420
  0x0000000116b587cd: mov    -0x38(%rbp),%r13
  0x0000000116b587d1: mov    -0x30(%rbp),%r14
  0x0000000116b587d5: retq   
  0x0000000116b587d6: mov    -0x38(%rbp),%r13
  0x0000000116b587da: cmpb   $0x0,-0x9d3b5df(%rip)        # 0x000000010ce1d202
  0x0000000116b587e1: je     0x0000000116b58896
  0x0000000116b587e7: mov    -0x18(%rbp),%rsi
  0x0000000116b587eb: mov    %r15,%rdi
  0x0000000116b587ee: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b587f6: je     0x0000000116b58873
  0x0000000116b587fc: mov    %rsp,-0x28(%rsp)
  0x0000000116b58801: sub    $0x80,%rsp
  0x0000000116b58808: mov    %rax,0x78(%rsp)
  0x0000000116b5880d: mov    %rcx,0x70(%rsp)
  0x0000000116b58812: mov    %rdx,0x68(%rsp)
  0x0000000116b58817: mov    %rbx,0x60(%rsp)
  0x0000000116b5881c: mov    %rbp,0x50(%rsp)
  0x0000000116b58821: mov    %rsi,0x48(%rsp)
  0x0000000116b58826: mov    %rdi,0x40(%rsp)
  0x0000000116b5882b: mov    %r8,0x38(%rsp)
  0x0000000116b58830: mov    %r9,0x30(%rsp)
  0x0000000116b58835: mov    %r10,0x28(%rsp)
  0x0000000116b5883a: mov    %r11,0x20(%rsp)
  0x0000000116b5883f: mov    %r12,0x18(%rsp)
  0x0000000116b58844: mov    %r13,0x10(%rsp)
  0x0000000116b58849: mov    %r14,0x8(%rsp)
  0x0000000116b5884e: mov    %r15,(%rsp)
  0x0000000116b58852: movabs $0x10cc2363b,%rdi
  0x0000000116b5885c: movabs $0x116b587fc,%rsi
  0x0000000116b58866: mov    %rsp,%rdx
  0x0000000116b58869: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5886d: callq  0x000000010c7dd830
  0x0000000116b58872: hlt    
  0x0000000116b58873: test   $0xf,%esp
  0x0000000116b58879: je     0x0000000116b58891
  0x0000000116b5887f: sub    $0x8,%rsp
  0x0000000116b58883: callq  0x000000010c9c9850
  0x0000000116b58888: add    $0x8,%rsp
  0x0000000116b5888c: jmpq   0x0000000116b58896
  0x0000000116b58891: callq  0x000000010c9c9850
  0x0000000116b58896: mov    (%rsp),%rax
  0x0000000116b5889a: add    $0x10,%rsp
  0x0000000116b5889e: vmovsd (%rsp),%xmm0
  0x0000000116b588a3: add    $0x10,%rsp
  0x0000000116b588a7: mov    0x18(%rbp),%r11
  0x0000000116b588ab: callq  *%r11
  0x0000000116b588ae: mov    -0x8(%rbp),%r11
  0x0000000116b588b2: leaveq 
  0x0000000116b588b3: pop    %rdi
  0x0000000116b588b4: mov    %r11,%rsp
  0x0000000116b588b7: jmpq   *%rdi
  0x0000000116b588b9: nop
  0x0000000116b588ba: nop
  0x0000000116b588bb: nop
  0x0000000116b588bc: nop
  0x0000000116b588bd: nop
  0x0000000116b588be: nop
  0x0000000116b588bf: nop

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateBytes)  [0x0000000116b58900, 0x0000000116b59da0]  5280 bytes

  0x0000000116b58900: cmpl   $0x0,-0x9d322ca(%rip)        # 0x000000010ce26640
  0x0000000116b5890a: jne    0x0000000116b58952
  0x0000000116b58910: mov    0x18(%rsp),%rsi
  0x0000000116b58915: add    $0x10,%rsi
  0x0000000116b58919: movslq 0x10(%rsp),%rdx
  0x0000000116b5891e: add    %rdx,%rsi
  0x0000000116b58921: mov    0x20(%rsp),%edi
  0x0000000116b58925: mov    0x8(%rsp),%edx
  0x0000000116b58929: test   $0xf,%esp
  0x0000000116b5892f: je     0x0000000116b58947
  0x0000000116b58935: sub    $0x8,%rsp
  0x0000000116b58939: callq  0x0000000116b309a0
  0x0000000116b5893e: add    $0x8,%rsp
  0x0000000116b58942: jmpq   0x0000000116b5894c
  0x0000000116b58947: callq  0x0000000116b309a0
  0x0000000116b5894c: pop    %rdi
  0x0000000116b5894d: mov    %r13,%rsp
  0x0000000116b58950: jmpq   *%rdi
  0x0000000116b58952: mov    0x10(%rbx),%rcx
  0x0000000116b58956: movzwl 0x2c(%rcx),%ecx
  0x0000000116b5895a: pop    %rax
  0x0000000116b5895b: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b58960: pushq  $0x0
  0x0000000116b58965: pushq  $0x0
  0x0000000116b5896a: push   %rax
  0x0000000116b5896b: push   %rbp
  0x0000000116b5896c: mov    %rsp,%rbp
  0x0000000116b5896f: push   %r13
  0x0000000116b58971: pushq  $0x0
  0x0000000116b58976: mov    0x10(%rbx),%r13
  0x0000000116b5897a: lea    0x30(%r13),%r13
  0x0000000116b5897e: push   %rbx
  0x0000000116b5897f: pushq  $0x0
  0x0000000116b58984: mov    0x10(%rbx),%rdx
  0x0000000116b58988: mov    0x8(%rdx),%rdx
  0x0000000116b5898c: mov    0x18(%rdx),%rdx
  0x0000000116b58990: push   %rdx
  0x0000000116b58991: push   %r14
  0x0000000116b58993: pushq  $0x0
  0x0000000116b58998: pushq  $0x0
  0x0000000116b5899d: mov    %rsp,(%rsp)
  0x0000000116b589a1: mov    0x28(%rbx),%eax
  0x0000000116b589a4: test   $0x100,%eax
  0x0000000116b589a9: jne    0x0000000116b58a26
  0x0000000116b589af: mov    %rsp,-0x28(%rsp)
  0x0000000116b589b4: sub    $0x80,%rsp
  0x0000000116b589bb: mov    %rax,0x78(%rsp)
  0x0000000116b589c0: mov    %rcx,0x70(%rsp)
  0x0000000116b589c5: mov    %rdx,0x68(%rsp)
  0x0000000116b589ca: mov    %rbx,0x60(%rsp)
  0x0000000116b589cf: mov    %rbp,0x50(%rsp)
  0x0000000116b589d4: mov    %rsi,0x48(%rsp)
  0x0000000116b589d9: mov    %rdi,0x40(%rsp)
  0x0000000116b589de: mov    %r8,0x38(%rsp)
  0x0000000116b589e3: mov    %r9,0x30(%rsp)
  0x0000000116b589e8: mov    %r10,0x28(%rsp)
  0x0000000116b589ed: mov    %r11,0x20(%rsp)
  0x0000000116b589f2: mov    %r12,0x18(%rsp)
  0x0000000116b589f7: mov    %r13,0x10(%rsp)
  0x0000000116b589fc: mov    %r14,0x8(%rsp)
  0x0000000116b58a01: mov    %r15,(%rsp)
  0x0000000116b58a05: movabs $0x10ccafb09,%rdi
  0x0000000116b58a0f: movabs $0x116b589af,%rsi
  0x0000000116b58a19: mov    %rsp,%rdx
  0x0000000116b58a1c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58a20: callq  0x000000010c7dd830
  0x0000000116b58a25: hlt    
  0x0000000116b58a26: test   $0x400,%eax
  0x0000000116b58a2b: je     0x0000000116b58aa8
  0x0000000116b58a31: mov    %rsp,-0x28(%rsp)
  0x0000000116b58a36: sub    $0x80,%rsp
  0x0000000116b58a3d: mov    %rax,0x78(%rsp)
  0x0000000116b58a42: mov    %rcx,0x70(%rsp)
  0x0000000116b58a47: mov    %rdx,0x68(%rsp)
  0x0000000116b58a4c: mov    %rbx,0x60(%rsp)
  0x0000000116b58a51: mov    %rbp,0x50(%rsp)
  0x0000000116b58a56: mov    %rsi,0x48(%rsp)
  0x0000000116b58a5b: mov    %rdi,0x40(%rsp)
  0x0000000116b58a60: mov    %r8,0x38(%rsp)
  0x0000000116b58a65: mov    %r9,0x30(%rsp)
  0x0000000116b58a6a: mov    %r10,0x28(%rsp)
  0x0000000116b58a6f: mov    %r11,0x20(%rsp)
  0x0000000116b58a74: mov    %r12,0x18(%rsp)
  0x0000000116b58a79: mov    %r13,0x10(%rsp)
  0x0000000116b58a7e: mov    %r14,0x8(%rsp)
  0x0000000116b58a83: mov    %r15,(%rsp)
  0x0000000116b58a87: movabs $0x10ccafb36,%rdi
  0x0000000116b58a91: movabs $0x116b58a31,%rsi
  0x0000000116b58a9b: mov    %rsp,%rdx
  0x0000000116b58a9e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58aa2: callq  0x000000010c7dd830
  0x0000000116b58aa7: hlt    
  0x0000000116b58aa8: movb   $0x1,0x33d(%r15)
  0x0000000116b58ab0: mov    %eax,-0x16000(%rsp)
  0x0000000116b58ab7: movb   $0x0,0x33d(%r15)
  0x0000000116b58abf: mov    0x28(%rbx),%eax
  0x0000000116b58ac2: test   $0x20,%eax
  0x0000000116b58ac7: je     0x0000000116b58b44
  0x0000000116b58acd: mov    %rsp,-0x28(%rsp)
  0x0000000116b58ad2: sub    $0x80,%rsp
  0x0000000116b58ad9: mov    %rax,0x78(%rsp)
  0x0000000116b58ade: mov    %rcx,0x70(%rsp)
  0x0000000116b58ae3: mov    %rdx,0x68(%rsp)
  0x0000000116b58ae8: mov    %rbx,0x60(%rsp)
  0x0000000116b58aed: mov    %rbp,0x50(%rsp)
  0x0000000116b58af2: mov    %rsi,0x48(%rsp)
  0x0000000116b58af7: mov    %rdi,0x40(%rsp)
  0x0000000116b58afc: mov    %r8,0x38(%rsp)
  0x0000000116b58b01: mov    %r9,0x30(%rsp)
  0x0000000116b58b06: mov    %r10,0x28(%rsp)
  0x0000000116b58b0b: mov    %r11,0x20(%rsp)
  0x0000000116b58b10: mov    %r12,0x18(%rsp)
  0x0000000116b58b15: mov    %r13,0x10(%rsp)
  0x0000000116b58b1a: mov    %r14,0x8(%rsp)
  0x0000000116b58b1f: mov    %r15,(%rsp)
  0x0000000116b58b23: movabs $0x10ccafb66,%rdi
  0x0000000116b58b2d: movabs $0x116b58acd,%rsi
  0x0000000116b58b37: mov    %rsp,%rdx
  0x0000000116b58b3a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58b3e: callq  0x000000010c7dd830
  0x0000000116b58b43: hlt    
  0x0000000116b58b44: mov    -0x40(%rbp),%rax
  0x0000000116b58b48: cmp    %rsp,%rax
  0x0000000116b58b4b: je     0x0000000116b58bc8
  0x0000000116b58b51: mov    %rsp,-0x28(%rsp)
  0x0000000116b58b56: sub    $0x80,%rsp
  0x0000000116b58b5d: mov    %rax,0x78(%rsp)
  0x0000000116b58b62: mov    %rcx,0x70(%rsp)
  0x0000000116b58b67: mov    %rdx,0x68(%rsp)
  0x0000000116b58b6c: mov    %rbx,0x60(%rsp)
  0x0000000116b58b71: mov    %rbp,0x50(%rsp)
  0x0000000116b58b76: mov    %rsi,0x48(%rsp)
  0x0000000116b58b7b: mov    %rdi,0x40(%rsp)
  0x0000000116b58b80: mov    %r8,0x38(%rsp)
  0x0000000116b58b85: mov    %r9,0x30(%rsp)
  0x0000000116b58b8a: mov    %r10,0x28(%rsp)
  0x0000000116b58b8f: mov    %r11,0x20(%rsp)
  0x0000000116b58b94: mov    %r12,0x18(%rsp)
  0x0000000116b58b99: mov    %r13,0x10(%rsp)
  0x0000000116b58b9e: mov    %r14,0x8(%rsp)
  0x0000000116b58ba3: mov    %r15,(%rsp)
  0x0000000116b58ba7: movabs $0x10ccafb83,%rdi
  0x0000000116b58bb1: movabs $0x116b58b51,%rsi
  0x0000000116b58bbb: mov    %rsp,%rdx
  0x0000000116b58bbe: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58bc2: callq  0x000000010c7dd830
  0x0000000116b58bc7: hlt    
  0x0000000116b58bc8: cmpb   $0x0,-0x9d3b9cd(%rip)        # 0x000000010ce1d202
  0x0000000116b58bcf: je     0x0000000116b58c84
  0x0000000116b58bd5: mov    -0x18(%rbp),%rsi
  0x0000000116b58bd9: mov    %r15,%rdi
  0x0000000116b58bdc: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b58be4: je     0x0000000116b58c61
  0x0000000116b58bea: mov    %rsp,-0x28(%rsp)
  0x0000000116b58bef: sub    $0x80,%rsp
  0x0000000116b58bf6: mov    %rax,0x78(%rsp)
  0x0000000116b58bfb: mov    %rcx,0x70(%rsp)
  0x0000000116b58c00: mov    %rdx,0x68(%rsp)
  0x0000000116b58c05: mov    %rbx,0x60(%rsp)
  0x0000000116b58c0a: mov    %rbp,0x50(%rsp)
  0x0000000116b58c0f: mov    %rsi,0x48(%rsp)
  0x0000000116b58c14: mov    %rdi,0x40(%rsp)
  0x0000000116b58c19: mov    %r8,0x38(%rsp)
  0x0000000116b58c1e: mov    %r9,0x30(%rsp)
  0x0000000116b58c23: mov    %r10,0x28(%rsp)
  0x0000000116b58c28: mov    %r11,0x20(%rsp)
  0x0000000116b58c2d: mov    %r12,0x18(%rsp)
  0x0000000116b58c32: mov    %r13,0x10(%rsp)
  0x0000000116b58c37: mov    %r14,0x8(%rsp)
  0x0000000116b58c3c: mov    %r15,(%rsp)
  0x0000000116b58c40: movabs $0x10cc2363b,%rdi
  0x0000000116b58c4a: movabs $0x116b58bea,%rsi
  0x0000000116b58c54: mov    %rsp,%rdx
  0x0000000116b58c57: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58c5b: callq  0x000000010c7dd830
  0x0000000116b58c60: hlt    
  0x0000000116b58c61: test   $0xf,%esp
  0x0000000116b58c67: je     0x0000000116b58c7f
  0x0000000116b58c6d: sub    $0x8,%rsp
  0x0000000116b58c71: callq  0x000000010c9c9630
  0x0000000116b58c76: add    $0x8,%rsp
  0x0000000116b58c7a: jmpq   0x0000000116b58c84
  0x0000000116b58c7f: callq  0x000000010c9c9630
  0x0000000116b58c84: mov    -0x18(%rbp),%rbx
  0x0000000116b58c88: mov    0x10(%rbx),%r11
  0x0000000116b58c8c: movzwl 0x2c(%r11),%r11d
  0x0000000116b58c91: shl    $0x3,%r11d
  0x0000000116b58c95: sub    %r11,%rsp
  0x0000000116b58c98: sub    $0x0,%rsp
  0x0000000116b58c9c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58ca0: mov    0x70(%rbx),%r11
  0x0000000116b58ca4: test   %r11,%r11
  0x0000000116b58ca7: jne    0x0000000116b58f11
  0x0000000116b58cad: callq  0x0000000116b58cb7
  0x0000000116b58cb2: jmpq   0x0000000116b58f09
  0x0000000116b58cb7: mov    %rbx,%rsi
  0x0000000116b58cba: lea    0x8(%rsp),%rax
  0x0000000116b58cbf: mov    %r13,-0x38(%rbp)
  0x0000000116b58cc3: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b58ccb: je     0x0000000116b58d48
  0x0000000116b58cd1: mov    %rsp,-0x28(%rsp)
  0x0000000116b58cd6: sub    $0x80,%rsp
  0x0000000116b58cdd: mov    %rax,0x78(%rsp)
  0x0000000116b58ce2: mov    %rcx,0x70(%rsp)
  0x0000000116b58ce7: mov    %rdx,0x68(%rsp)
  0x0000000116b58cec: mov    %rbx,0x60(%rsp)
  0x0000000116b58cf1: mov    %rbp,0x50(%rsp)
  0x0000000116b58cf6: mov    %rsi,0x48(%rsp)
  0x0000000116b58cfb: mov    %rdi,0x40(%rsp)
  0x0000000116b58d00: mov    %r8,0x38(%rsp)
  0x0000000116b58d05: mov    %r9,0x30(%rsp)
  0x0000000116b58d0a: mov    %r10,0x28(%rsp)
  0x0000000116b58d0f: mov    %r11,0x20(%rsp)
  0x0000000116b58d14: mov    %r12,0x18(%rsp)
  0x0000000116b58d19: mov    %r13,0x10(%rsp)
  0x0000000116b58d1e: mov    %r14,0x8(%rsp)
  0x0000000116b58d23: mov    %r15,(%rsp)
  0x0000000116b58d27: movabs $0x10cc2363b,%rdi
  0x0000000116b58d31: movabs $0x116b58cd1,%rsi
  0x0000000116b58d3b: mov    %rsp,%rdx
  0x0000000116b58d3e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58d42: callq  0x000000010c7dd830
  0x0000000116b58d47: hlt    
  0x0000000116b58d48: push   %r10
  0x0000000116b58d4a: cmp    -0x9d124a1(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b58d51: je     0x0000000116b58dce
  ;; call_VM_base: heap base corrupted?
  0x0000000116b58d57: mov    %rsp,-0x28(%rsp)
  0x0000000116b58d5c: sub    $0x80,%rsp
  0x0000000116b58d63: mov    %rax,0x78(%rsp)
  0x0000000116b58d68: mov    %rcx,0x70(%rsp)
  0x0000000116b58d6d: mov    %rdx,0x68(%rsp)
  0x0000000116b58d72: mov    %rbx,0x60(%rsp)
  0x0000000116b58d77: mov    %rbp,0x50(%rsp)
  0x0000000116b58d7c: mov    %rsi,0x48(%rsp)
  0x0000000116b58d81: mov    %rdi,0x40(%rsp)
  0x0000000116b58d86: mov    %r8,0x38(%rsp)
  0x0000000116b58d8b: mov    %r9,0x30(%rsp)
  0x0000000116b58d90: mov    %r10,0x28(%rsp)
  0x0000000116b58d95: mov    %r11,0x20(%rsp)
  0x0000000116b58d9a: mov    %r12,0x18(%rsp)
  0x0000000116b58d9f: mov    %r13,0x10(%rsp)
  0x0000000116b58da4: mov    %r14,0x8(%rsp)
  0x0000000116b58da9: mov    %r15,(%rsp)
  0x0000000116b58dad: movabs $0x10cc63f17,%rdi
  0x0000000116b58db7: movabs $0x116b58d57,%rsi
  0x0000000116b58dc1: mov    %rsp,%rdx
  0x0000000116b58dc4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58dc8: callq  0x000000010c7dd830
  0x0000000116b58dcd: hlt    
  0x0000000116b58dce: pop    %r10
  0x0000000116b58dd0: mov    %r15,%rdi
  0x0000000116b58dd3: mov    %rbp,0x290(%r15)
  0x0000000116b58dda: mov    %rax,0x280(%r15)
  0x0000000116b58de1: test   $0xf,%esp
  0x0000000116b58de7: je     0x0000000116b58dff
  0x0000000116b58ded: sub    $0x8,%rsp
  0x0000000116b58df1: callq  0x000000010c58e1c0
  0x0000000116b58df6: add    $0x8,%rsp
  0x0000000116b58dfa: jmpq   0x0000000116b58e04
  0x0000000116b58dff: callq  0x000000010c58e1c0
  0x0000000116b58e04: push   %rax
  0x0000000116b58e05: push   %rdi
  0x0000000116b58e06: push   %rsi
  0x0000000116b58e07: push   %rdx
  0x0000000116b58e08: push   %rcx
  0x0000000116b58e09: push   %r8
  0x0000000116b58e0b: push   %r9
  0x0000000116b58e0d: push   %r10
  0x0000000116b58e0f: mov    %rsp,%r10
  0x0000000116b58e12: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58e16: push   %r10
  0x0000000116b58e18: push   %r11
  0x0000000116b58e1a: mov    $0x109,%edi
  0x0000000116b58e1f: movabs $0x7ff815049fd5,%r10
  0x0000000116b58e29: callq  *%r10
  0x0000000116b58e2c: pop    %r11
  0x0000000116b58e2e: pop    %rsp
  0x0000000116b58e2f: pop    %r10
  0x0000000116b58e31: pop    %r9
  0x0000000116b58e33: pop    %r8
  0x0000000116b58e35: pop    %rcx
  0x0000000116b58e36: pop    %rdx
  0x0000000116b58e37: pop    %rsi
  0x0000000116b58e38: pop    %rdi
  0x0000000116b58e39: cmp    %rax,%r15
  0x0000000116b58e3c: je     0x0000000116b58eb9
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b58e42: mov    %rsp,-0x28(%rsp)
  0x0000000116b58e47: sub    $0x80,%rsp
  0x0000000116b58e4e: mov    %rax,0x78(%rsp)
  0x0000000116b58e53: mov    %rcx,0x70(%rsp)
  0x0000000116b58e58: mov    %rdx,0x68(%rsp)
  0x0000000116b58e5d: mov    %rbx,0x60(%rsp)
  0x0000000116b58e62: mov    %rbp,0x50(%rsp)
  0x0000000116b58e67: mov    %rsi,0x48(%rsp)
  0x0000000116b58e6c: mov    %rdi,0x40(%rsp)
  0x0000000116b58e71: mov    %r8,0x38(%rsp)
  0x0000000116b58e76: mov    %r9,0x30(%rsp)
  0x0000000116b58e7b: mov    %r10,0x28(%rsp)
  0x0000000116b58e80: mov    %r11,0x20(%rsp)
  0x0000000116b58e85: mov    %r12,0x18(%rsp)
  0x0000000116b58e8a: mov    %r13,0x10(%rsp)
  0x0000000116b58e8f: mov    %r14,0x8(%rsp)
  0x0000000116b58e94: mov    %r15,(%rsp)
  0x0000000116b58e98: movabs $0x10cc6405e,%rdi
  0x0000000116b58ea2: movabs $0x116b58e42,%rsi
  0x0000000116b58eac: mov    %rsp,%rdx
  0x0000000116b58eaf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58eb3: callq  0x000000010c7dd830
  0x0000000116b58eb8: hlt    
  0x0000000116b58eb9: pop    %rax
  0x0000000116b58eba: movabs $0x0,%r10
  0x0000000116b58ec4: mov    %r10,0x280(%r15)
  0x0000000116b58ecb: movabs $0x0,%r10
  0x0000000116b58ed5: mov    %r10,0x290(%r15)
  0x0000000116b58edc: movabs $0x0,%r10
  0x0000000116b58ee6: mov    %r10,0x288(%r15)
  0x0000000116b58eed: cmpq   $0x0,0x8(%r15)
  0x0000000116b58ef5: je     0x0000000116b58f00
  0x0000000116b58efb: jmpq   0x0000000116b30420
  0x0000000116b58f00: mov    -0x38(%rbp),%r13
  0x0000000116b58f04: mov    -0x30(%rbp),%r14
  0x0000000116b58f08: retq   
  0x0000000116b58f09: mov    -0x18(%rbp),%rbx
  0x0000000116b58f0d: mov    0x70(%rbx),%r11
  0x0000000116b58f11: callq  *%r11
  0x0000000116b58f14: mov    -0x18(%rbp),%rbx
  0x0000000116b58f18: mov    %rax,0x18(%rbp)
  0x0000000116b58f1c: mov    0x28(%rbx),%r11d
  0x0000000116b58f20: test   $0x8,%r11d
  0x0000000116b58f27: je     0x0000000116b58f45
  0x0000000116b58f2d: mov    0x10(%rbx),%r11
  0x0000000116b58f31: mov    0x8(%r11),%r11
  0x0000000116b58f35: mov    0x20(%r11),%r11
  0x0000000116b58f39: mov    0x70(%r11),%r11
  0x0000000116b58f3d: mov    %r11,0x10(%rbp)
  0x0000000116b58f41: lea    0x10(%rbp),%rsi
  0x0000000116b58f45: mov    0x68(%rbx),%rax
  0x0000000116b58f49: movabs $0x10c9c8cd0,%r11
  0x0000000116b58f53: cmp    %r11,%rax
  0x0000000116b58f56: jne    0x0000000116b591c0
  0x0000000116b58f5c: callq  0x0000000116b58f66
  0x0000000116b58f61: jmpq   0x0000000116b591b8
  0x0000000116b58f66: mov    %rbx,%rsi
  0x0000000116b58f69: lea    0x8(%rsp),%rax
  0x0000000116b58f6e: mov    %r13,-0x38(%rbp)
  0x0000000116b58f72: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b58f7a: je     0x0000000116b58ff7
  0x0000000116b58f80: mov    %rsp,-0x28(%rsp)
  0x0000000116b58f85: sub    $0x80,%rsp
  0x0000000116b58f8c: mov    %rax,0x78(%rsp)
  0x0000000116b58f91: mov    %rcx,0x70(%rsp)
  0x0000000116b58f96: mov    %rdx,0x68(%rsp)
  0x0000000116b58f9b: mov    %rbx,0x60(%rsp)
  0x0000000116b58fa0: mov    %rbp,0x50(%rsp)
  0x0000000116b58fa5: mov    %rsi,0x48(%rsp)
  0x0000000116b58faa: mov    %rdi,0x40(%rsp)
  0x0000000116b58faf: mov    %r8,0x38(%rsp)
  0x0000000116b58fb4: mov    %r9,0x30(%rsp)
  0x0000000116b58fb9: mov    %r10,0x28(%rsp)
  0x0000000116b58fbe: mov    %r11,0x20(%rsp)
  0x0000000116b58fc3: mov    %r12,0x18(%rsp)
  0x0000000116b58fc8: mov    %r13,0x10(%rsp)
  0x0000000116b58fcd: mov    %r14,0x8(%rsp)
  0x0000000116b58fd2: mov    %r15,(%rsp)
  0x0000000116b58fd6: movabs $0x10cc2363b,%rdi
  0x0000000116b58fe0: movabs $0x116b58f80,%rsi
  0x0000000116b58fea: mov    %rsp,%rdx
  0x0000000116b58fed: and    $0xfffffffffffffff0,%rsp
  0x0000000116b58ff1: callq  0x000000010c7dd830
  0x0000000116b58ff6: hlt    
  0x0000000116b58ff7: push   %r10
  0x0000000116b58ff9: cmp    -0x9d12750(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b59000: je     0x0000000116b5907d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b59006: mov    %rsp,-0x28(%rsp)
  0x0000000116b5900b: sub    $0x80,%rsp
  0x0000000116b59012: mov    %rax,0x78(%rsp)
  0x0000000116b59017: mov    %rcx,0x70(%rsp)
  0x0000000116b5901c: mov    %rdx,0x68(%rsp)
  0x0000000116b59021: mov    %rbx,0x60(%rsp)
  0x0000000116b59026: mov    %rbp,0x50(%rsp)
  0x0000000116b5902b: mov    %rsi,0x48(%rsp)
  0x0000000116b59030: mov    %rdi,0x40(%rsp)
  0x0000000116b59035: mov    %r8,0x38(%rsp)
  0x0000000116b5903a: mov    %r9,0x30(%rsp)
  0x0000000116b5903f: mov    %r10,0x28(%rsp)
  0x0000000116b59044: mov    %r11,0x20(%rsp)
  0x0000000116b59049: mov    %r12,0x18(%rsp)
  0x0000000116b5904e: mov    %r13,0x10(%rsp)
  0x0000000116b59053: mov    %r14,0x8(%rsp)
  0x0000000116b59058: mov    %r15,(%rsp)
  0x0000000116b5905c: movabs $0x10cc63f17,%rdi
  0x0000000116b59066: movabs $0x116b59006,%rsi
  0x0000000116b59070: mov    %rsp,%rdx
  0x0000000116b59073: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59077: callq  0x000000010c7dd830
  0x0000000116b5907c: hlt    
  0x0000000116b5907d: pop    %r10
  0x0000000116b5907f: mov    %r15,%rdi
  0x0000000116b59082: mov    %rbp,0x290(%r15)
  0x0000000116b59089: mov    %rax,0x280(%r15)
  0x0000000116b59090: test   $0xf,%esp
  0x0000000116b59096: je     0x0000000116b590ae
  0x0000000116b5909c: sub    $0x8,%rsp
  0x0000000116b590a0: callq  0x000000010c58e1c0
  0x0000000116b590a5: add    $0x8,%rsp
  0x0000000116b590a9: jmpq   0x0000000116b590b3
  0x0000000116b590ae: callq  0x000000010c58e1c0
  0x0000000116b590b3: push   %rax
  0x0000000116b590b4: push   %rdi
  0x0000000116b590b5: push   %rsi
  0x0000000116b590b6: push   %rdx
  0x0000000116b590b7: push   %rcx
  0x0000000116b590b8: push   %r8
  0x0000000116b590ba: push   %r9
  0x0000000116b590bc: push   %r10
  0x0000000116b590be: mov    %rsp,%r10
  0x0000000116b590c1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b590c5: push   %r10
  0x0000000116b590c7: push   %r11
  0x0000000116b590c9: mov    $0x109,%edi
  0x0000000116b590ce: movabs $0x7ff815049fd5,%r10
  0x0000000116b590d8: callq  *%r10
  0x0000000116b590db: pop    %r11
  0x0000000116b590dd: pop    %rsp
  0x0000000116b590de: pop    %r10
  0x0000000116b590e0: pop    %r9
  0x0000000116b590e2: pop    %r8
  0x0000000116b590e4: pop    %rcx
  0x0000000116b590e5: pop    %rdx
  0x0000000116b590e6: pop    %rsi
  0x0000000116b590e7: pop    %rdi
  0x0000000116b590e8: cmp    %rax,%r15
  0x0000000116b590eb: je     0x0000000116b59168
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b590f1: mov    %rsp,-0x28(%rsp)
  0x0000000116b590f6: sub    $0x80,%rsp
  0x0000000116b590fd: mov    %rax,0x78(%rsp)
  0x0000000116b59102: mov    %rcx,0x70(%rsp)
  0x0000000116b59107: mov    %rdx,0x68(%rsp)
  0x0000000116b5910c: mov    %rbx,0x60(%rsp)
  0x0000000116b59111: mov    %rbp,0x50(%rsp)
  0x0000000116b59116: mov    %rsi,0x48(%rsp)
  0x0000000116b5911b: mov    %rdi,0x40(%rsp)
  0x0000000116b59120: mov    %r8,0x38(%rsp)
  0x0000000116b59125: mov    %r9,0x30(%rsp)
  0x0000000116b5912a: mov    %r10,0x28(%rsp)
  0x0000000116b5912f: mov    %r11,0x20(%rsp)
  0x0000000116b59134: mov    %r12,0x18(%rsp)
  0x0000000116b59139: mov    %r13,0x10(%rsp)
  0x0000000116b5913e: mov    %r14,0x8(%rsp)
  0x0000000116b59143: mov    %r15,(%rsp)
  0x0000000116b59147: movabs $0x10cc6405e,%rdi
  0x0000000116b59151: movabs $0x116b590f1,%rsi
  0x0000000116b5915b: mov    %rsp,%rdx
  0x0000000116b5915e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59162: callq  0x000000010c7dd830
  0x0000000116b59167: hlt    
  0x0000000116b59168: pop    %rax
  0x0000000116b59169: movabs $0x0,%r10
  0x0000000116b59173: mov    %r10,0x280(%r15)
  0x0000000116b5917a: movabs $0x0,%r10
  0x0000000116b59184: mov    %r10,0x290(%r15)
  0x0000000116b5918b: movabs $0x0,%r10
  0x0000000116b59195: mov    %r10,0x288(%r15)
  0x0000000116b5919c: cmpq   $0x0,0x8(%r15)
  0x0000000116b591a4: je     0x0000000116b591af
  0x0000000116b591aa: jmpq   0x0000000116b30420
  0x0000000116b591af: mov    -0x38(%rbp),%r13
  0x0000000116b591b3: mov    -0x30(%rbp),%r14
  0x0000000116b591b7: retq   
  0x0000000116b591b8: mov    -0x18(%rbp),%rbx
  0x0000000116b591bc: mov    0x68(%rbx),%rax
  0x0000000116b591c0: lea    0x2a0(%r15),%rdi
  0x0000000116b591c7: mov    %rbp,0x290(%r15)
  0x0000000116b591ce: movabs $0x116b591c7,%r10
  0x0000000116b591d8: mov    %r10,0x288(%r15)
  0x0000000116b591df: mov    %rsp,0x280(%r15)
  0x0000000116b591e6: mov    0x318(%r15),%r11d
  0x0000000116b591ed: cmp    $0x8,%r11d
  0x0000000116b591f1: je     0x0000000116b5926e
  0x0000000116b591f7: mov    %rsp,-0x28(%rsp)
  0x0000000116b591fc: sub    $0x80,%rsp
  0x0000000116b59203: mov    %rax,0x78(%rsp)
  0x0000000116b59208: mov    %rcx,0x70(%rsp)
  0x0000000116b5920d: mov    %rdx,0x68(%rsp)
  0x0000000116b59212: mov    %rbx,0x60(%rsp)
  0x0000000116b59217: mov    %rbp,0x50(%rsp)
  0x0000000116b5921c: mov    %rsi,0x48(%rsp)
  0x0000000116b59221: mov    %rdi,0x40(%rsp)
  0x0000000116b59226: mov    %r8,0x38(%rsp)
  0x0000000116b5922b: mov    %r9,0x30(%rsp)
  0x0000000116b59230: mov    %r10,0x28(%rsp)
  0x0000000116b59235: mov    %r11,0x20(%rsp)
  0x0000000116b5923a: mov    %r12,0x18(%rsp)
  0x0000000116b5923f: mov    %r13,0x10(%rsp)
  0x0000000116b59244: mov    %r14,0x8(%rsp)
  0x0000000116b59249: mov    %r15,(%rsp)
  0x0000000116b5924d: movabs $0x10ccafca4,%rdi
  0x0000000116b59257: movabs $0x116b591f7,%rsi
  0x0000000116b59261: mov    %rsp,%rdx
  0x0000000116b59264: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59268: callq  0x000000010c7dd830
  0x0000000116b5926d: hlt    
  0x0000000116b5926e: movl   $0x4,0x318(%r15)
  0x0000000116b59279: callq  *%rax
  0x0000000116b5927b: vzeroupper 
  0x0000000116b5927e: sub    $0x10,%rsp
  0x0000000116b59282: vmovsd %xmm0,(%rsp)
  0x0000000116b59287: sub    $0x10,%rsp
  0x0000000116b5928b: mov    %rax,(%rsp)
  0x0000000116b5928f: movl   $0x5,0x318(%r15)
  0x0000000116b5929a: lock addl $0x0,(%rsp)
  0x0000000116b5929f: cmpl   $0x0,-0x9d32c69(%rip)        # 0x000000010ce26640
  0x0000000116b592a9: jne    0x0000000116b592bd
  0x0000000116b592af: cmpl   $0x0,0x30(%r15)
  0x0000000116b592b7: je     0x0000000116b592d6
  0x0000000116b592bd: mov    %r15,%rdi
  0x0000000116b592c0: mov    %rsp,%r12
  0x0000000116b592c3: sub    $0x0,%rsp
  0x0000000116b592c7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b592cb: callq  0x000000010ca7ea20
  0x0000000116b592d0: mov    %r12,%rsp
  0x0000000116b592d3: xor    %r12,%r12
  0x0000000116b592d6: movl   $0x8,0x318(%r15)
  0x0000000116b592e1: movabs $0x0,%r10
  0x0000000116b592eb: mov    %r10,0x280(%r15)
  0x0000000116b592f2: movabs $0x0,%r10
  0x0000000116b592fc: mov    %r10,0x290(%r15)
  0x0000000116b59303: movabs $0x0,%r10
  0x0000000116b5930d: mov    %r10,0x288(%r15)
  0x0000000116b59314: mov    0x38(%r15),%r11
  0x0000000116b59318: movl   $0x0,0x108(%r11)
  0x0000000116b59323: movabs $0x116b4ef3b,%r11
  0x0000000116b5932d: cmp    0x18(%rbp),%r11
  0x0000000116b59331: jne    0x0000000116b5936c
  0x0000000116b59337: mov    (%rsp),%rax
  0x0000000116b5933b: add    $0x10,%rsp
  0x0000000116b5933f: test   %rax,%rax
  0x0000000116b59342: je     0x0000000116b59360
  0x0000000116b59348: test   $0x1,%rax
  0x0000000116b5934e: je     0x0000000116b5935d
  0x0000000116b59354: mov    -0x1(%rax),%rax
  0x0000000116b59358: jmpq   0x0000000116b59360
  0x0000000116b5935d: mov    (%rax),%rax
  0x0000000116b59360: mov    %rax,0x10(%rbp)
  0x0000000116b59364: sub    $0x10,%rsp
  0x0000000116b59368: mov    %rax,(%rsp)
  0x0000000116b5936c: cmpl   $0x1,0x344(%r15)
  0x0000000116b59377: jne    0x0000000116b5943a
  0x0000000116b5937d: mov    %rsp,-0x28(%rsp)
  0x0000000116b59382: sub    $0x80,%rsp
  0x0000000116b59389: mov    %rax,0x78(%rsp)
  0x0000000116b5938e: mov    %rcx,0x70(%rsp)
  0x0000000116b59393: mov    %rdx,0x68(%rsp)
  0x0000000116b59398: mov    %rbx,0x60(%rsp)
  0x0000000116b5939d: mov    %rbp,0x50(%rsp)
  0x0000000116b593a2: mov    %rsi,0x48(%rsp)
  0x0000000116b593a7: mov    %rdi,0x40(%rsp)
  0x0000000116b593ac: mov    %r8,0x38(%rsp)
  0x0000000116b593b1: mov    %r9,0x30(%rsp)
  0x0000000116b593b6: mov    %r10,0x28(%rsp)
  0x0000000116b593bb: mov    %r11,0x20(%rsp)
  0x0000000116b593c0: mov    %r12,0x18(%rsp)
  0x0000000116b593c5: mov    %r13,0x10(%rsp)
  0x0000000116b593ca: mov    %r14,0x8(%rsp)
  0x0000000116b593cf: mov    %r15,(%rsp)
  0x0000000116b593d3: mov    %rsp,%r12
  0x0000000116b593d6: sub    $0x0,%rsp
  0x0000000116b593da: and    $0xfffffffffffffff0,%rsp
  0x0000000116b593de: callq  0x000000010c9ccc30
  0x0000000116b593e3: mov    %r12,%rsp
  0x0000000116b593e6: mov    (%rsp),%r15
  0x0000000116b593ea: mov    0x8(%rsp),%r14
  0x0000000116b593ef: mov    0x10(%rsp),%r13
  0x0000000116b593f4: mov    0x18(%rsp),%r12
  0x0000000116b593f9: mov    0x20(%rsp),%r11
  0x0000000116b593fe: mov    0x28(%rsp),%r10
  0x0000000116b59403: mov    0x30(%rsp),%r9
  0x0000000116b59408: mov    0x38(%rsp),%r8
  0x0000000116b5940d: mov    0x40(%rsp),%rdi
  0x0000000116b59412: mov    0x48(%rsp),%rsi
  0x0000000116b59417: mov    0x50(%rsp),%rbp
  0x0000000116b5941c: mov    0x60(%rsp),%rbx
  0x0000000116b59421: mov    0x68(%rsp),%rdx
  0x0000000116b59426: mov    0x70(%rsp),%rcx
  0x0000000116b5942b: mov    0x78(%rsp),%rax
  0x0000000116b59430: add    $0x80,%rsp
  0x0000000116b59437: xor    %r12,%r12
  0x0000000116b5943a: mov    -0x18(%rbp),%rbx
  0x0000000116b5943e: mov    0x10(%rbx),%r13
  0x0000000116b59442: lea    0x30(%r13),%r13
  0x0000000116b59446: cmpq   $0x0,0x8(%r15)
  0x0000000116b5944e: je     0x0000000116b59724
  0x0000000116b59454: callq  0x0000000116b5945e
  0x0000000116b59459: jmpq   0x0000000116b596ad
  0x0000000116b5945e: lea    0x8(%rsp),%rax
  0x0000000116b59463: mov    %r13,-0x38(%rbp)
  0x0000000116b59467: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5946f: je     0x0000000116b594ec
  0x0000000116b59475: mov    %rsp,-0x28(%rsp)
  0x0000000116b5947a: sub    $0x80,%rsp
  0x0000000116b59481: mov    %rax,0x78(%rsp)
  0x0000000116b59486: mov    %rcx,0x70(%rsp)
  0x0000000116b5948b: mov    %rdx,0x68(%rsp)
  0x0000000116b59490: mov    %rbx,0x60(%rsp)
  0x0000000116b59495: mov    %rbp,0x50(%rsp)
  0x0000000116b5949a: mov    %rsi,0x48(%rsp)
  0x0000000116b5949f: mov    %rdi,0x40(%rsp)
  0x0000000116b594a4: mov    %r8,0x38(%rsp)
  0x0000000116b594a9: mov    %r9,0x30(%rsp)
  0x0000000116b594ae: mov    %r10,0x28(%rsp)
  0x0000000116b594b3: mov    %r11,0x20(%rsp)
  0x0000000116b594b8: mov    %r12,0x18(%rsp)
  0x0000000116b594bd: mov    %r13,0x10(%rsp)
  0x0000000116b594c2: mov    %r14,0x8(%rsp)
  0x0000000116b594c7: mov    %r15,(%rsp)
  0x0000000116b594cb: movabs $0x10cc2363b,%rdi
  0x0000000116b594d5: movabs $0x116b59475,%rsi
  0x0000000116b594df: mov    %rsp,%rdx
  0x0000000116b594e2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b594e6: callq  0x000000010c7dd830
  0x0000000116b594eb: hlt    
  0x0000000116b594ec: push   %r10
  0x0000000116b594ee: cmp    -0x9d12c45(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b594f5: je     0x0000000116b59572
  ;; call_VM_base: heap base corrupted?
  0x0000000116b594fb: mov    %rsp,-0x28(%rsp)
  0x0000000116b59500: sub    $0x80,%rsp
  0x0000000116b59507: mov    %rax,0x78(%rsp)
  0x0000000116b5950c: mov    %rcx,0x70(%rsp)
  0x0000000116b59511: mov    %rdx,0x68(%rsp)
  0x0000000116b59516: mov    %rbx,0x60(%rsp)
  0x0000000116b5951b: mov    %rbp,0x50(%rsp)
  0x0000000116b59520: mov    %rsi,0x48(%rsp)
  0x0000000116b59525: mov    %rdi,0x40(%rsp)
  0x0000000116b5952a: mov    %r8,0x38(%rsp)
  0x0000000116b5952f: mov    %r9,0x30(%rsp)
  0x0000000116b59534: mov    %r10,0x28(%rsp)
  0x0000000116b59539: mov    %r11,0x20(%rsp)
  0x0000000116b5953e: mov    %r12,0x18(%rsp)
  0x0000000116b59543: mov    %r13,0x10(%rsp)
  0x0000000116b59548: mov    %r14,0x8(%rsp)
  0x0000000116b5954d: mov    %r15,(%rsp)
  0x0000000116b59551: movabs $0x10cc63f17,%rdi
  0x0000000116b5955b: movabs $0x116b594fb,%rsi
  0x0000000116b59565: mov    %rsp,%rdx
  0x0000000116b59568: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5956c: callq  0x000000010c7dd830
  0x0000000116b59571: hlt    
  0x0000000116b59572: pop    %r10
  0x0000000116b59574: mov    %r15,%rdi
  0x0000000116b59577: mov    %rbp,0x290(%r15)
  0x0000000116b5957e: mov    %rax,0x280(%r15)
  0x0000000116b59585: test   $0xf,%esp
  0x0000000116b5958b: je     0x0000000116b595a3
  0x0000000116b59591: sub    $0x8,%rsp
  0x0000000116b59595: callq  0x000000010c5881a0
  0x0000000116b5959a: add    $0x8,%rsp
  0x0000000116b5959e: jmpq   0x0000000116b595a8
  0x0000000116b595a3: callq  0x000000010c5881a0
  0x0000000116b595a8: push   %rax
  0x0000000116b595a9: push   %rdi
  0x0000000116b595aa: push   %rsi
  0x0000000116b595ab: push   %rdx
  0x0000000116b595ac: push   %rcx
  0x0000000116b595ad: push   %r8
  0x0000000116b595af: push   %r9
  0x0000000116b595b1: push   %r10
  0x0000000116b595b3: mov    %rsp,%r10
  0x0000000116b595b6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b595ba: push   %r10
  0x0000000116b595bc: push   %r11
  0x0000000116b595be: mov    $0x109,%edi
  0x0000000116b595c3: movabs $0x7ff815049fd5,%r10
  0x0000000116b595cd: callq  *%r10
  0x0000000116b595d0: pop    %r11
  0x0000000116b595d2: pop    %rsp
  0x0000000116b595d3: pop    %r10
  0x0000000116b595d5: pop    %r9
  0x0000000116b595d7: pop    %r8
  0x0000000116b595d9: pop    %rcx
  0x0000000116b595da: pop    %rdx
  0x0000000116b595db: pop    %rsi
  0x0000000116b595dc: pop    %rdi
  0x0000000116b595dd: cmp    %rax,%r15
  0x0000000116b595e0: je     0x0000000116b5965d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b595e6: mov    %rsp,-0x28(%rsp)
  0x0000000116b595eb: sub    $0x80,%rsp
  0x0000000116b595f2: mov    %rax,0x78(%rsp)
  0x0000000116b595f7: mov    %rcx,0x70(%rsp)
  0x0000000116b595fc: mov    %rdx,0x68(%rsp)
  0x0000000116b59601: mov    %rbx,0x60(%rsp)
  0x0000000116b59606: mov    %rbp,0x50(%rsp)
  0x0000000116b5960b: mov    %rsi,0x48(%rsp)
  0x0000000116b59610: mov    %rdi,0x40(%rsp)
  0x0000000116b59615: mov    %r8,0x38(%rsp)
  0x0000000116b5961a: mov    %r9,0x30(%rsp)
  0x0000000116b5961f: mov    %r10,0x28(%rsp)
  0x0000000116b59624: mov    %r11,0x20(%rsp)
  0x0000000116b59629: mov    %r12,0x18(%rsp)
  0x0000000116b5962e: mov    %r13,0x10(%rsp)
  0x0000000116b59633: mov    %r14,0x8(%rsp)
  0x0000000116b59638: mov    %r15,(%rsp)
  0x0000000116b5963c: movabs $0x10cc6405e,%rdi
  0x0000000116b59646: movabs $0x116b595e6,%rsi
  0x0000000116b59650: mov    %rsp,%rdx
  0x0000000116b59653: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59657: callq  0x000000010c7dd830
  0x0000000116b5965c: hlt    
  0x0000000116b5965d: pop    %rax
  0x0000000116b5965e: movabs $0x0,%r10
  0x0000000116b59668: mov    %r10,0x280(%r15)
  0x0000000116b5966f: movabs $0x0,%r10
  0x0000000116b59679: mov    %r10,0x290(%r15)
  0x0000000116b59680: movabs $0x0,%r10
  0x0000000116b5968a: mov    %r10,0x288(%r15)
  0x0000000116b59691: cmpq   $0x0,0x8(%r15)
  0x0000000116b59699: je     0x0000000116b596a4
  0x0000000116b5969f: jmpq   0x0000000116b30420
  0x0000000116b596a4: mov    -0x38(%rbp),%r13
  0x0000000116b596a8: mov    -0x30(%rbp),%r14
  0x0000000116b596ac: retq   
  0x0000000116b596ad: mov    %rsp,-0x28(%rsp)
  0x0000000116b596b2: sub    $0x80,%rsp
  0x0000000116b596b9: mov    %rax,0x78(%rsp)
  0x0000000116b596be: mov    %rcx,0x70(%rsp)
  0x0000000116b596c3: mov    %rdx,0x68(%rsp)
  0x0000000116b596c8: mov    %rbx,0x60(%rsp)
  0x0000000116b596cd: mov    %rbp,0x50(%rsp)
  0x0000000116b596d2: mov    %rsi,0x48(%rsp)
  0x0000000116b596d7: mov    %rdi,0x40(%rsp)
  0x0000000116b596dc: mov    %r8,0x38(%rsp)
  0x0000000116b596e1: mov    %r9,0x30(%rsp)
  0x0000000116b596e6: mov    %r10,0x28(%rsp)
  0x0000000116b596eb: mov    %r11,0x20(%rsp)
  0x0000000116b596f0: mov    %r12,0x18(%rsp)
  0x0000000116b596f5: mov    %r13,0x10(%rsp)
  0x0000000116b596fa: mov    %r14,0x8(%rsp)
  0x0000000116b596ff: mov    %r15,(%rsp)
  0x0000000116b59703: movabs $0x10cb763be,%rdi
  0x0000000116b5970d: movabs $0x116b596ad,%rsi
  0x0000000116b59717: mov    %rsp,%rdx
  0x0000000116b5971a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5971e: callq  0x000000010c7dd830
  0x0000000116b59723: hlt    
  0x0000000116b59724: mov    0x28(%rbx),%r11d
  0x0000000116b59728: test   $0x20,%r11d
  0x0000000116b5972f: je     0x0000000116b59cb2
  0x0000000116b59735: lea    -0x50(%rbp),%rsi
  0x0000000116b59739: mov    0x8(%rsi),%r11
  0x0000000116b5973d: test   %r11,%r11
  0x0000000116b59740: jne    0x0000000116b59a16
  0x0000000116b59746: callq  0x0000000116b59750
  0x0000000116b5974b: jmpq   0x0000000116b5999f
  0x0000000116b59750: lea    0x8(%rsp),%rax
  0x0000000116b59755: mov    %r13,-0x38(%rbp)
  0x0000000116b59759: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b59761: je     0x0000000116b597de
  0x0000000116b59767: mov    %rsp,-0x28(%rsp)
  0x0000000116b5976c: sub    $0x80,%rsp
  0x0000000116b59773: mov    %rax,0x78(%rsp)
  0x0000000116b59778: mov    %rcx,0x70(%rsp)
  0x0000000116b5977d: mov    %rdx,0x68(%rsp)
  0x0000000116b59782: mov    %rbx,0x60(%rsp)
  0x0000000116b59787: mov    %rbp,0x50(%rsp)
  0x0000000116b5978c: mov    %rsi,0x48(%rsp)
  0x0000000116b59791: mov    %rdi,0x40(%rsp)
  0x0000000116b59796: mov    %r8,0x38(%rsp)
  0x0000000116b5979b: mov    %r9,0x30(%rsp)
  0x0000000116b597a0: mov    %r10,0x28(%rsp)
  0x0000000116b597a5: mov    %r11,0x20(%rsp)
  0x0000000116b597aa: mov    %r12,0x18(%rsp)
  0x0000000116b597af: mov    %r13,0x10(%rsp)
  0x0000000116b597b4: mov    %r14,0x8(%rsp)
  0x0000000116b597b9: mov    %r15,(%rsp)
  0x0000000116b597bd: movabs $0x10cc2363b,%rdi
  0x0000000116b597c7: movabs $0x116b59767,%rsi
  0x0000000116b597d1: mov    %rsp,%rdx
  0x0000000116b597d4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b597d8: callq  0x000000010c7dd830
  0x0000000116b597dd: hlt    
  0x0000000116b597de: push   %r10
  0x0000000116b597e0: cmp    -0x9d12f37(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b597e7: je     0x0000000116b59864
  ;; call_VM_base: heap base corrupted?
  0x0000000116b597ed: mov    %rsp,-0x28(%rsp)
  0x0000000116b597f2: sub    $0x80,%rsp
  0x0000000116b597f9: mov    %rax,0x78(%rsp)
  0x0000000116b597fe: mov    %rcx,0x70(%rsp)
  0x0000000116b59803: mov    %rdx,0x68(%rsp)
  0x0000000116b59808: mov    %rbx,0x60(%rsp)
  0x0000000116b5980d: mov    %rbp,0x50(%rsp)
  0x0000000116b59812: mov    %rsi,0x48(%rsp)
  0x0000000116b59817: mov    %rdi,0x40(%rsp)
  0x0000000116b5981c: mov    %r8,0x38(%rsp)
  0x0000000116b59821: mov    %r9,0x30(%rsp)
  0x0000000116b59826: mov    %r10,0x28(%rsp)
  0x0000000116b5982b: mov    %r11,0x20(%rsp)
  0x0000000116b59830: mov    %r12,0x18(%rsp)
  0x0000000116b59835: mov    %r13,0x10(%rsp)
  0x0000000116b5983a: mov    %r14,0x8(%rsp)
  0x0000000116b5983f: mov    %r15,(%rsp)
  0x0000000116b59843: movabs $0x10cc63f17,%rdi
  0x0000000116b5984d: movabs $0x116b597ed,%rsi
  0x0000000116b59857: mov    %rsp,%rdx
  0x0000000116b5985a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5985e: callq  0x000000010c7dd830
  0x0000000116b59863: hlt    
  0x0000000116b59864: pop    %r10
  0x0000000116b59866: mov    %r15,%rdi
  0x0000000116b59869: mov    %rbp,0x290(%r15)
  0x0000000116b59870: mov    %rax,0x280(%r15)
  0x0000000116b59877: test   $0xf,%esp
  0x0000000116b5987d: je     0x0000000116b59895
  0x0000000116b59883: sub    $0x8,%rsp
  0x0000000116b59887: callq  0x000000010c5892a0
  0x0000000116b5988c: add    $0x8,%rsp
  0x0000000116b59890: jmpq   0x0000000116b5989a
  0x0000000116b59895: callq  0x000000010c5892a0
  0x0000000116b5989a: push   %rax
  0x0000000116b5989b: push   %rdi
  0x0000000116b5989c: push   %rsi
  0x0000000116b5989d: push   %rdx
  0x0000000116b5989e: push   %rcx
  0x0000000116b5989f: push   %r8
  0x0000000116b598a1: push   %r9
  0x0000000116b598a3: push   %r10
  0x0000000116b598a5: mov    %rsp,%r10
  0x0000000116b598a8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b598ac: push   %r10
  0x0000000116b598ae: push   %r11
  0x0000000116b598b0: mov    $0x109,%edi
  0x0000000116b598b5: movabs $0x7ff815049fd5,%r10
  0x0000000116b598bf: callq  *%r10
  0x0000000116b598c2: pop    %r11
  0x0000000116b598c4: pop    %rsp
  0x0000000116b598c5: pop    %r10
  0x0000000116b598c7: pop    %r9
  0x0000000116b598c9: pop    %r8
  0x0000000116b598cb: pop    %rcx
  0x0000000116b598cc: pop    %rdx
  0x0000000116b598cd: pop    %rsi
  0x0000000116b598ce: pop    %rdi
  0x0000000116b598cf: cmp    %rax,%r15
  0x0000000116b598d2: je     0x0000000116b5994f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b598d8: mov    %rsp,-0x28(%rsp)
  0x0000000116b598dd: sub    $0x80,%rsp
  0x0000000116b598e4: mov    %rax,0x78(%rsp)
  0x0000000116b598e9: mov    %rcx,0x70(%rsp)
  0x0000000116b598ee: mov    %rdx,0x68(%rsp)
  0x0000000116b598f3: mov    %rbx,0x60(%rsp)
  0x0000000116b598f8: mov    %rbp,0x50(%rsp)
  0x0000000116b598fd: mov    %rsi,0x48(%rsp)
  0x0000000116b59902: mov    %rdi,0x40(%rsp)
  0x0000000116b59907: mov    %r8,0x38(%rsp)
  0x0000000116b5990c: mov    %r9,0x30(%rsp)
  0x0000000116b59911: mov    %r10,0x28(%rsp)
  0x0000000116b59916: mov    %r11,0x20(%rsp)
  0x0000000116b5991b: mov    %r12,0x18(%rsp)
  0x0000000116b59920: mov    %r13,0x10(%rsp)
  0x0000000116b59925: mov    %r14,0x8(%rsp)
  0x0000000116b5992a: mov    %r15,(%rsp)
  0x0000000116b5992e: movabs $0x10cc6405e,%rdi
  0x0000000116b59938: movabs $0x116b598d8,%rsi
  0x0000000116b59942: mov    %rsp,%rdx
  0x0000000116b59945: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59949: callq  0x000000010c7dd830
  0x0000000116b5994e: hlt    
  0x0000000116b5994f: pop    %rax
  0x0000000116b59950: movabs $0x0,%r10
  0x0000000116b5995a: mov    %r10,0x280(%r15)
  0x0000000116b59961: movabs $0x0,%r10
  0x0000000116b5996b: mov    %r10,0x290(%r15)
  0x0000000116b59972: movabs $0x0,%r10
  0x0000000116b5997c: mov    %r10,0x288(%r15)
  0x0000000116b59983: cmpq   $0x0,0x8(%r15)
  0x0000000116b5998b: je     0x0000000116b59996
  0x0000000116b59991: jmpq   0x0000000116b30420
  0x0000000116b59996: mov    -0x38(%rbp),%r13
  0x0000000116b5999a: mov    -0x30(%rbp),%r14
  0x0000000116b5999e: retq   
  0x0000000116b5999f: mov    %rsp,-0x28(%rsp)
  0x0000000116b599a4: sub    $0x80,%rsp
  0x0000000116b599ab: mov    %rax,0x78(%rsp)
  0x0000000116b599b0: mov    %rcx,0x70(%rsp)
  0x0000000116b599b5: mov    %rdx,0x68(%rsp)
  0x0000000116b599ba: mov    %rbx,0x60(%rsp)
  0x0000000116b599bf: mov    %rbp,0x50(%rsp)
  0x0000000116b599c4: mov    %rsi,0x48(%rsp)
  0x0000000116b599c9: mov    %rdi,0x40(%rsp)
  0x0000000116b599ce: mov    %r8,0x38(%rsp)
  0x0000000116b599d3: mov    %r9,0x30(%rsp)
  0x0000000116b599d8: mov    %r10,0x28(%rsp)
  0x0000000116b599dd: mov    %r11,0x20(%rsp)
  0x0000000116b599e2: mov    %r12,0x18(%rsp)
  0x0000000116b599e7: mov    %r13,0x10(%rsp)
  0x0000000116b599ec: mov    %r14,0x8(%rsp)
  0x0000000116b599f1: mov    %r15,(%rsp)
  0x0000000116b599f5: movabs $0x10cb763be,%rdi
  0x0000000116b599ff: movabs $0x116b5999f,%rsi
  0x0000000116b59a09: mov    %rsp,%rdx
  0x0000000116b59a0c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59a10: callq  0x000000010c7dd830
  0x0000000116b59a15: hlt    
  0x0000000116b59a16: mov    %r13,-0x38(%rbp)
  0x0000000116b59a1a: lea    (%rsi),%rax
  0x0000000116b59a1d: mov    0x8(%rsi),%rcx
  0x0000000116b59a21: movq   $0x0,0x8(%rsi)
  0x0000000116b59a29: mov    (%rcx),%rdx
  0x0000000116b59a2c: and    $0x7,%rdx
  0x0000000116b59a30: cmp    $0x5,%rdx
  0x0000000116b59a34: je     0x0000000116b59cae
  0x0000000116b59a3a: mov    (%rax),%rdx
  0x0000000116b59a3d: test   %rdx,%rdx
  0x0000000116b59a40: je     0x0000000116b59cae
  0x0000000116b59a46: lock cmpxchg %rdx,(%rcx)
  0x0000000116b59a4b: je     0x0000000116b59cae
  0x0000000116b59a51: mov    %rcx,0x8(%rsi)
  0x0000000116b59a55: callq  0x0000000116b59a5f
  0x0000000116b59a5a: jmpq   0x0000000116b59cae
  0x0000000116b59a5f: lea    0x8(%rsp),%rax
  0x0000000116b59a64: mov    %r13,-0x38(%rbp)
  0x0000000116b59a68: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b59a70: je     0x0000000116b59aed
  0x0000000116b59a76: mov    %rsp,-0x28(%rsp)
  0x0000000116b59a7b: sub    $0x80,%rsp
  0x0000000116b59a82: mov    %rax,0x78(%rsp)
  0x0000000116b59a87: mov    %rcx,0x70(%rsp)
  0x0000000116b59a8c: mov    %rdx,0x68(%rsp)
  0x0000000116b59a91: mov    %rbx,0x60(%rsp)
  0x0000000116b59a96: mov    %rbp,0x50(%rsp)
  0x0000000116b59a9b: mov    %rsi,0x48(%rsp)
  0x0000000116b59aa0: mov    %rdi,0x40(%rsp)
  0x0000000116b59aa5: mov    %r8,0x38(%rsp)
  0x0000000116b59aaa: mov    %r9,0x30(%rsp)
  0x0000000116b59aaf: mov    %r10,0x28(%rsp)
  0x0000000116b59ab4: mov    %r11,0x20(%rsp)
  0x0000000116b59ab9: mov    %r12,0x18(%rsp)
  0x0000000116b59abe: mov    %r13,0x10(%rsp)
  0x0000000116b59ac3: mov    %r14,0x8(%rsp)
  0x0000000116b59ac8: mov    %r15,(%rsp)
  0x0000000116b59acc: movabs $0x10cc2363b,%rdi
  0x0000000116b59ad6: movabs $0x116b59a76,%rsi
  0x0000000116b59ae0: mov    %rsp,%rdx
  0x0000000116b59ae3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59ae7: callq  0x000000010c7dd830
  0x0000000116b59aec: hlt    
  0x0000000116b59aed: push   %r10
  0x0000000116b59aef: cmp    -0x9d13246(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b59af6: je     0x0000000116b59b73
  ;; call_VM_base: heap base corrupted?
  0x0000000116b59afc: mov    %rsp,-0x28(%rsp)
  0x0000000116b59b01: sub    $0x80,%rsp
  0x0000000116b59b08: mov    %rax,0x78(%rsp)
  0x0000000116b59b0d: mov    %rcx,0x70(%rsp)
  0x0000000116b59b12: mov    %rdx,0x68(%rsp)
  0x0000000116b59b17: mov    %rbx,0x60(%rsp)
  0x0000000116b59b1c: mov    %rbp,0x50(%rsp)
  0x0000000116b59b21: mov    %rsi,0x48(%rsp)
  0x0000000116b59b26: mov    %rdi,0x40(%rsp)
  0x0000000116b59b2b: mov    %r8,0x38(%rsp)
  0x0000000116b59b30: mov    %r9,0x30(%rsp)
  0x0000000116b59b35: mov    %r10,0x28(%rsp)
  0x0000000116b59b3a: mov    %r11,0x20(%rsp)
  0x0000000116b59b3f: mov    %r12,0x18(%rsp)
  0x0000000116b59b44: mov    %r13,0x10(%rsp)
  0x0000000116b59b49: mov    %r14,0x8(%rsp)
  0x0000000116b59b4e: mov    %r15,(%rsp)
  0x0000000116b59b52: movabs $0x10cc63f17,%rdi
  0x0000000116b59b5c: movabs $0x116b59afc,%rsi
  0x0000000116b59b66: mov    %rsp,%rdx
  0x0000000116b59b69: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59b6d: callq  0x000000010c7dd830
  0x0000000116b59b72: hlt    
  0x0000000116b59b73: pop    %r10
  0x0000000116b59b75: mov    %r15,%rdi
  0x0000000116b59b78: mov    %rbp,0x290(%r15)
  0x0000000116b59b7f: mov    %rax,0x280(%r15)
  0x0000000116b59b86: test   $0xf,%esp
  0x0000000116b59b8c: je     0x0000000116b59ba4
  0x0000000116b59b92: sub    $0x8,%rsp
  0x0000000116b59b96: callq  0x000000010c588f80
  0x0000000116b59b9b: add    $0x8,%rsp
  0x0000000116b59b9f: jmpq   0x0000000116b59ba9
  0x0000000116b59ba4: callq  0x000000010c588f80
  0x0000000116b59ba9: push   %rax
  0x0000000116b59baa: push   %rdi
  0x0000000116b59bab: push   %rsi
  0x0000000116b59bac: push   %rdx
  0x0000000116b59bad: push   %rcx
  0x0000000116b59bae: push   %r8
  0x0000000116b59bb0: push   %r9
  0x0000000116b59bb2: push   %r10
  0x0000000116b59bb4: mov    %rsp,%r10
  0x0000000116b59bb7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59bbb: push   %r10
  0x0000000116b59bbd: push   %r11
  0x0000000116b59bbf: mov    $0x109,%edi
  0x0000000116b59bc4: movabs $0x7ff815049fd5,%r10
  0x0000000116b59bce: callq  *%r10
  0x0000000116b59bd1: pop    %r11
  0x0000000116b59bd3: pop    %rsp
  0x0000000116b59bd4: pop    %r10
  0x0000000116b59bd6: pop    %r9
  0x0000000116b59bd8: pop    %r8
  0x0000000116b59bda: pop    %rcx
  0x0000000116b59bdb: pop    %rdx
  0x0000000116b59bdc: pop    %rsi
  0x0000000116b59bdd: pop    %rdi
  0x0000000116b59bde: cmp    %rax,%r15
  0x0000000116b59be1: je     0x0000000116b59c5e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b59be7: mov    %rsp,-0x28(%rsp)
  0x0000000116b59bec: sub    $0x80,%rsp
  0x0000000116b59bf3: mov    %rax,0x78(%rsp)
  0x0000000116b59bf8: mov    %rcx,0x70(%rsp)
  0x0000000116b59bfd: mov    %rdx,0x68(%rsp)
  0x0000000116b59c02: mov    %rbx,0x60(%rsp)
  0x0000000116b59c07: mov    %rbp,0x50(%rsp)
  0x0000000116b59c0c: mov    %rsi,0x48(%rsp)
  0x0000000116b59c11: mov    %rdi,0x40(%rsp)
  0x0000000116b59c16: mov    %r8,0x38(%rsp)
  0x0000000116b59c1b: mov    %r9,0x30(%rsp)
  0x0000000116b59c20: mov    %r10,0x28(%rsp)
  0x0000000116b59c25: mov    %r11,0x20(%rsp)
  0x0000000116b59c2a: mov    %r12,0x18(%rsp)
  0x0000000116b59c2f: mov    %r13,0x10(%rsp)
  0x0000000116b59c34: mov    %r14,0x8(%rsp)
  0x0000000116b59c39: mov    %r15,(%rsp)
  0x0000000116b59c3d: movabs $0x10cc6405e,%rdi
  0x0000000116b59c47: movabs $0x116b59be7,%rsi
  0x0000000116b59c51: mov    %rsp,%rdx
  0x0000000116b59c54: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59c58: callq  0x000000010c7dd830
  0x0000000116b59c5d: hlt    
  0x0000000116b59c5e: pop    %rax
  0x0000000116b59c5f: movabs $0x0,%r10
  0x0000000116b59c69: mov    %r10,0x280(%r15)
  0x0000000116b59c70: movabs $0x0,%r10
  0x0000000116b59c7a: mov    %r10,0x290(%r15)
  0x0000000116b59c81: movabs $0x0,%r10
  0x0000000116b59c8b: mov    %r10,0x288(%r15)
  0x0000000116b59c92: cmpq   $0x0,0x8(%r15)
  0x0000000116b59c9a: je     0x0000000116b59ca5
  0x0000000116b59ca0: jmpq   0x0000000116b30420
  0x0000000116b59ca5: mov    -0x38(%rbp),%r13
  0x0000000116b59ca9: mov    -0x30(%rbp),%r14
  0x0000000116b59cad: retq   
  0x0000000116b59cae: mov    -0x38(%rbp),%r13
  0x0000000116b59cb2: cmpb   $0x0,-0x9d3cab7(%rip)        # 0x000000010ce1d202
  0x0000000116b59cb9: je     0x0000000116b59d6e
  0x0000000116b59cbf: mov    -0x18(%rbp),%rsi
  0x0000000116b59cc3: mov    %r15,%rdi
  0x0000000116b59cc6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b59cce: je     0x0000000116b59d4b
  0x0000000116b59cd4: mov    %rsp,-0x28(%rsp)
  0x0000000116b59cd9: sub    $0x80,%rsp
  0x0000000116b59ce0: mov    %rax,0x78(%rsp)
  0x0000000116b59ce5: mov    %rcx,0x70(%rsp)
  0x0000000116b59cea: mov    %rdx,0x68(%rsp)
  0x0000000116b59cef: mov    %rbx,0x60(%rsp)
  0x0000000116b59cf4: mov    %rbp,0x50(%rsp)
  0x0000000116b59cf9: mov    %rsi,0x48(%rsp)
  0x0000000116b59cfe: mov    %rdi,0x40(%rsp)
  0x0000000116b59d03: mov    %r8,0x38(%rsp)
  0x0000000116b59d08: mov    %r9,0x30(%rsp)
  0x0000000116b59d0d: mov    %r10,0x28(%rsp)
  0x0000000116b59d12: mov    %r11,0x20(%rsp)
  0x0000000116b59d17: mov    %r12,0x18(%rsp)
  0x0000000116b59d1c: mov    %r13,0x10(%rsp)
  0x0000000116b59d21: mov    %r14,0x8(%rsp)
  0x0000000116b59d26: mov    %r15,(%rsp)
  0x0000000116b59d2a: movabs $0x10cc2363b,%rdi
  0x0000000116b59d34: movabs $0x116b59cd4,%rsi
  0x0000000116b59d3e: mov    %rsp,%rdx
  0x0000000116b59d41: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59d45: callq  0x000000010c7dd830
  0x0000000116b59d4a: hlt    
  0x0000000116b59d4b: test   $0xf,%esp
  0x0000000116b59d51: je     0x0000000116b59d69
  0x0000000116b59d57: sub    $0x8,%rsp
  0x0000000116b59d5b: callq  0x000000010c9c9850
  0x0000000116b59d60: add    $0x8,%rsp
  0x0000000116b59d64: jmpq   0x0000000116b59d6e
  0x0000000116b59d69: callq  0x000000010c9c9850
  0x0000000116b59d6e: mov    (%rsp),%rax
  0x0000000116b59d72: add    $0x10,%rsp
  0x0000000116b59d76: vmovsd (%rsp),%xmm0
  0x0000000116b59d7b: add    $0x10,%rsp
  0x0000000116b59d7f: mov    0x18(%rbp),%r11
  0x0000000116b59d83: callq  *%r11
  0x0000000116b59d86: mov    -0x8(%rbp),%r11
  0x0000000116b59d8a: leaveq 
  0x0000000116b59d8b: pop    %rdi
  0x0000000116b59d8c: mov    %r11,%rsp
  0x0000000116b59d8f: jmpq   *%rdi
  0x0000000116b59d91: nop
  0x0000000116b59d92: nop
  0x0000000116b59d93: nop
  0x0000000116b59d94: nop
  0x0000000116b59d95: nop
  0x0000000116b59d96: nop
  0x0000000116b59d97: nop
  0x0000000116b59d98: int3   
  0x0000000116b59d99: int3   
  0x0000000116b59d9a: int3   
  0x0000000116b59d9b: int3   
  0x0000000116b59d9c: int3   
  0x0000000116b59d9d: int3   
  0x0000000116b59d9e: int3   
  0x0000000116b59d9f: int3   

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateByteBuffer)  [0x0000000116b59de0, 0x0000000116b5b280]  5280 bytes

  0x0000000116b59de0: cmpl   $0x0,-0x9d337aa(%rip)        # 0x000000010ce26640
  0x0000000116b59dea: jne    0x0000000116b59e2e
  0x0000000116b59df0: mov    0x18(%rsp),%rsi
  0x0000000116b59df5: movslq 0x10(%rsp),%rdx
  0x0000000116b59dfa: add    %rdx,%rsi
  0x0000000116b59dfd: mov    0x28(%rsp),%edi
  0x0000000116b59e01: mov    0x8(%rsp),%edx
  0x0000000116b59e05: test   $0xf,%esp
  0x0000000116b59e0b: je     0x0000000116b59e23
  0x0000000116b59e11: sub    $0x8,%rsp
  0x0000000116b59e15: callq  0x0000000116b309a0
  0x0000000116b59e1a: add    $0x8,%rsp
  0x0000000116b59e1e: jmpq   0x0000000116b59e28
  0x0000000116b59e23: callq  0x0000000116b309a0
  0x0000000116b59e28: pop    %rdi
  0x0000000116b59e29: mov    %r13,%rsp
  0x0000000116b59e2c: jmpq   *%rdi
  0x0000000116b59e2e: mov    0x10(%rbx),%rcx
  0x0000000116b59e32: movzwl 0x2c(%rcx),%ecx
  0x0000000116b59e36: pop    %rax
  0x0000000116b59e37: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b59e3c: pushq  $0x0
  0x0000000116b59e41: pushq  $0x0
  0x0000000116b59e46: push   %rax
  0x0000000116b59e47: push   %rbp
  0x0000000116b59e48: mov    %rsp,%rbp
  0x0000000116b59e4b: push   %r13
  0x0000000116b59e4d: pushq  $0x0
  0x0000000116b59e52: mov    0x10(%rbx),%r13
  0x0000000116b59e56: lea    0x30(%r13),%r13
  0x0000000116b59e5a: push   %rbx
  0x0000000116b59e5b: pushq  $0x0
  0x0000000116b59e60: mov    0x10(%rbx),%rdx
  0x0000000116b59e64: mov    0x8(%rdx),%rdx
  0x0000000116b59e68: mov    0x18(%rdx),%rdx
  0x0000000116b59e6c: push   %rdx
  0x0000000116b59e6d: push   %r14
  0x0000000116b59e6f: pushq  $0x0
  0x0000000116b59e74: pushq  $0x0
  0x0000000116b59e79: mov    %rsp,(%rsp)
  0x0000000116b59e7d: mov    0x28(%rbx),%eax
  0x0000000116b59e80: test   $0x100,%eax
  0x0000000116b59e85: jne    0x0000000116b59f02
  0x0000000116b59e8b: mov    %rsp,-0x28(%rsp)
  0x0000000116b59e90: sub    $0x80,%rsp
  0x0000000116b59e97: mov    %rax,0x78(%rsp)
  0x0000000116b59e9c: mov    %rcx,0x70(%rsp)
  0x0000000116b59ea1: mov    %rdx,0x68(%rsp)
  0x0000000116b59ea6: mov    %rbx,0x60(%rsp)
  0x0000000116b59eab: mov    %rbp,0x50(%rsp)
  0x0000000116b59eb0: mov    %rsi,0x48(%rsp)
  0x0000000116b59eb5: mov    %rdi,0x40(%rsp)
  0x0000000116b59eba: mov    %r8,0x38(%rsp)
  0x0000000116b59ebf: mov    %r9,0x30(%rsp)
  0x0000000116b59ec4: mov    %r10,0x28(%rsp)
  0x0000000116b59ec9: mov    %r11,0x20(%rsp)
  0x0000000116b59ece: mov    %r12,0x18(%rsp)
  0x0000000116b59ed3: mov    %r13,0x10(%rsp)
  0x0000000116b59ed8: mov    %r14,0x8(%rsp)
  0x0000000116b59edd: mov    %r15,(%rsp)
  0x0000000116b59ee1: movabs $0x10ccafb09,%rdi
  0x0000000116b59eeb: movabs $0x116b59e8b,%rsi
  0x0000000116b59ef5: mov    %rsp,%rdx
  0x0000000116b59ef8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59efc: callq  0x000000010c7dd830
  0x0000000116b59f01: hlt    
  0x0000000116b59f02: test   $0x400,%eax
  0x0000000116b59f07: je     0x0000000116b59f84
  0x0000000116b59f0d: mov    %rsp,-0x28(%rsp)
  0x0000000116b59f12: sub    $0x80,%rsp
  0x0000000116b59f19: mov    %rax,0x78(%rsp)
  0x0000000116b59f1e: mov    %rcx,0x70(%rsp)
  0x0000000116b59f23: mov    %rdx,0x68(%rsp)
  0x0000000116b59f28: mov    %rbx,0x60(%rsp)
  0x0000000116b59f2d: mov    %rbp,0x50(%rsp)
  0x0000000116b59f32: mov    %rsi,0x48(%rsp)
  0x0000000116b59f37: mov    %rdi,0x40(%rsp)
  0x0000000116b59f3c: mov    %r8,0x38(%rsp)
  0x0000000116b59f41: mov    %r9,0x30(%rsp)
  0x0000000116b59f46: mov    %r10,0x28(%rsp)
  0x0000000116b59f4b: mov    %r11,0x20(%rsp)
  0x0000000116b59f50: mov    %r12,0x18(%rsp)
  0x0000000116b59f55: mov    %r13,0x10(%rsp)
  0x0000000116b59f5a: mov    %r14,0x8(%rsp)
  0x0000000116b59f5f: mov    %r15,(%rsp)
  0x0000000116b59f63: movabs $0x10ccafb36,%rdi
  0x0000000116b59f6d: movabs $0x116b59f0d,%rsi
  0x0000000116b59f77: mov    %rsp,%rdx
  0x0000000116b59f7a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b59f7e: callq  0x000000010c7dd830
  0x0000000116b59f83: hlt    
  0x0000000116b59f84: movb   $0x1,0x33d(%r15)
  0x0000000116b59f8c: mov    %eax,-0x16000(%rsp)
  0x0000000116b59f93: movb   $0x0,0x33d(%r15)
  0x0000000116b59f9b: mov    0x28(%rbx),%eax
  0x0000000116b59f9e: test   $0x20,%eax
  0x0000000116b59fa3: je     0x0000000116b5a020
  0x0000000116b59fa9: mov    %rsp,-0x28(%rsp)
  0x0000000116b59fae: sub    $0x80,%rsp
  0x0000000116b59fb5: mov    %rax,0x78(%rsp)
  0x0000000116b59fba: mov    %rcx,0x70(%rsp)
  0x0000000116b59fbf: mov    %rdx,0x68(%rsp)
  0x0000000116b59fc4: mov    %rbx,0x60(%rsp)
  0x0000000116b59fc9: mov    %rbp,0x50(%rsp)
  0x0000000116b59fce: mov    %rsi,0x48(%rsp)
  0x0000000116b59fd3: mov    %rdi,0x40(%rsp)
  0x0000000116b59fd8: mov    %r8,0x38(%rsp)
  0x0000000116b59fdd: mov    %r9,0x30(%rsp)
  0x0000000116b59fe2: mov    %r10,0x28(%rsp)
  0x0000000116b59fe7: mov    %r11,0x20(%rsp)
  0x0000000116b59fec: mov    %r12,0x18(%rsp)
  0x0000000116b59ff1: mov    %r13,0x10(%rsp)
  0x0000000116b59ff6: mov    %r14,0x8(%rsp)
  0x0000000116b59ffb: mov    %r15,(%rsp)
  0x0000000116b59fff: movabs $0x10ccafb66,%rdi
  0x0000000116b5a009: movabs $0x116b59fa9,%rsi
  0x0000000116b5a013: mov    %rsp,%rdx
  0x0000000116b5a016: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a01a: callq  0x000000010c7dd830
  0x0000000116b5a01f: hlt    
  0x0000000116b5a020: mov    -0x40(%rbp),%rax
  0x0000000116b5a024: cmp    %rsp,%rax
  0x0000000116b5a027: je     0x0000000116b5a0a4
  0x0000000116b5a02d: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a032: sub    $0x80,%rsp
  0x0000000116b5a039: mov    %rax,0x78(%rsp)
  0x0000000116b5a03e: mov    %rcx,0x70(%rsp)
  0x0000000116b5a043: mov    %rdx,0x68(%rsp)
  0x0000000116b5a048: mov    %rbx,0x60(%rsp)
  0x0000000116b5a04d: mov    %rbp,0x50(%rsp)
  0x0000000116b5a052: mov    %rsi,0x48(%rsp)
  0x0000000116b5a057: mov    %rdi,0x40(%rsp)
  0x0000000116b5a05c: mov    %r8,0x38(%rsp)
  0x0000000116b5a061: mov    %r9,0x30(%rsp)
  0x0000000116b5a066: mov    %r10,0x28(%rsp)
  0x0000000116b5a06b: mov    %r11,0x20(%rsp)
  0x0000000116b5a070: mov    %r12,0x18(%rsp)
  0x0000000116b5a075: mov    %r13,0x10(%rsp)
  0x0000000116b5a07a: mov    %r14,0x8(%rsp)
  0x0000000116b5a07f: mov    %r15,(%rsp)
  0x0000000116b5a083: movabs $0x10ccafb83,%rdi
  0x0000000116b5a08d: movabs $0x116b5a02d,%rsi
  0x0000000116b5a097: mov    %rsp,%rdx
  0x0000000116b5a09a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a09e: callq  0x000000010c7dd830
  0x0000000116b5a0a3: hlt    
  0x0000000116b5a0a4: cmpb   $0x0,-0x9d3cea9(%rip)        # 0x000000010ce1d202
  0x0000000116b5a0ab: je     0x0000000116b5a160
  0x0000000116b5a0b1: mov    -0x18(%rbp),%rsi
  0x0000000116b5a0b5: mov    %r15,%rdi
  0x0000000116b5a0b8: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5a0c0: je     0x0000000116b5a13d
  0x0000000116b5a0c6: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a0cb: sub    $0x80,%rsp
  0x0000000116b5a0d2: mov    %rax,0x78(%rsp)
  0x0000000116b5a0d7: mov    %rcx,0x70(%rsp)
  0x0000000116b5a0dc: mov    %rdx,0x68(%rsp)
  0x0000000116b5a0e1: mov    %rbx,0x60(%rsp)
  0x0000000116b5a0e6: mov    %rbp,0x50(%rsp)
  0x0000000116b5a0eb: mov    %rsi,0x48(%rsp)
  0x0000000116b5a0f0: mov    %rdi,0x40(%rsp)
  0x0000000116b5a0f5: mov    %r8,0x38(%rsp)
  0x0000000116b5a0fa: mov    %r9,0x30(%rsp)
  0x0000000116b5a0ff: mov    %r10,0x28(%rsp)
  0x0000000116b5a104: mov    %r11,0x20(%rsp)
  0x0000000116b5a109: mov    %r12,0x18(%rsp)
  0x0000000116b5a10e: mov    %r13,0x10(%rsp)
  0x0000000116b5a113: mov    %r14,0x8(%rsp)
  0x0000000116b5a118: mov    %r15,(%rsp)
  0x0000000116b5a11c: movabs $0x10cc2363b,%rdi
  0x0000000116b5a126: movabs $0x116b5a0c6,%rsi
  0x0000000116b5a130: mov    %rsp,%rdx
  0x0000000116b5a133: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a137: callq  0x000000010c7dd830
  0x0000000116b5a13c: hlt    
  0x0000000116b5a13d: test   $0xf,%esp
  0x0000000116b5a143: je     0x0000000116b5a15b
  0x0000000116b5a149: sub    $0x8,%rsp
  0x0000000116b5a14d: callq  0x000000010c9c9630
  0x0000000116b5a152: add    $0x8,%rsp
  0x0000000116b5a156: jmpq   0x0000000116b5a160
  0x0000000116b5a15b: callq  0x000000010c9c9630
  0x0000000116b5a160: mov    -0x18(%rbp),%rbx
  0x0000000116b5a164: mov    0x10(%rbx),%r11
  0x0000000116b5a168: movzwl 0x2c(%r11),%r11d
  0x0000000116b5a16d: shl    $0x3,%r11d
  0x0000000116b5a171: sub    %r11,%rsp
  0x0000000116b5a174: sub    $0x0,%rsp
  0x0000000116b5a178: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a17c: mov    0x70(%rbx),%r11
  0x0000000116b5a180: test   %r11,%r11
  0x0000000116b5a183: jne    0x0000000116b5a3ed
  0x0000000116b5a189: callq  0x0000000116b5a193
  0x0000000116b5a18e: jmpq   0x0000000116b5a3e5
  0x0000000116b5a193: mov    %rbx,%rsi
  0x0000000116b5a196: lea    0x8(%rsp),%rax
  0x0000000116b5a19b: mov    %r13,-0x38(%rbp)
  0x0000000116b5a19f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5a1a7: je     0x0000000116b5a224
  0x0000000116b5a1ad: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a1b2: sub    $0x80,%rsp
  0x0000000116b5a1b9: mov    %rax,0x78(%rsp)
  0x0000000116b5a1be: mov    %rcx,0x70(%rsp)
  0x0000000116b5a1c3: mov    %rdx,0x68(%rsp)
  0x0000000116b5a1c8: mov    %rbx,0x60(%rsp)
  0x0000000116b5a1cd: mov    %rbp,0x50(%rsp)
  0x0000000116b5a1d2: mov    %rsi,0x48(%rsp)
  0x0000000116b5a1d7: mov    %rdi,0x40(%rsp)
  0x0000000116b5a1dc: mov    %r8,0x38(%rsp)
  0x0000000116b5a1e1: mov    %r9,0x30(%rsp)
  0x0000000116b5a1e6: mov    %r10,0x28(%rsp)
  0x0000000116b5a1eb: mov    %r11,0x20(%rsp)
  0x0000000116b5a1f0: mov    %r12,0x18(%rsp)
  0x0000000116b5a1f5: mov    %r13,0x10(%rsp)
  0x0000000116b5a1fa: mov    %r14,0x8(%rsp)
  0x0000000116b5a1ff: mov    %r15,(%rsp)
  0x0000000116b5a203: movabs $0x10cc2363b,%rdi
  0x0000000116b5a20d: movabs $0x116b5a1ad,%rsi
  0x0000000116b5a217: mov    %rsp,%rdx
  0x0000000116b5a21a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a21e: callq  0x000000010c7dd830
  0x0000000116b5a223: hlt    
  0x0000000116b5a224: push   %r10
  0x0000000116b5a226: cmp    -0x9d1397d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5a22d: je     0x0000000116b5a2aa
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5a233: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a238: sub    $0x80,%rsp
  0x0000000116b5a23f: mov    %rax,0x78(%rsp)
  0x0000000116b5a244: mov    %rcx,0x70(%rsp)
  0x0000000116b5a249: mov    %rdx,0x68(%rsp)
  0x0000000116b5a24e: mov    %rbx,0x60(%rsp)
  0x0000000116b5a253: mov    %rbp,0x50(%rsp)
  0x0000000116b5a258: mov    %rsi,0x48(%rsp)
  0x0000000116b5a25d: mov    %rdi,0x40(%rsp)
  0x0000000116b5a262: mov    %r8,0x38(%rsp)
  0x0000000116b5a267: mov    %r9,0x30(%rsp)
  0x0000000116b5a26c: mov    %r10,0x28(%rsp)
  0x0000000116b5a271: mov    %r11,0x20(%rsp)
  0x0000000116b5a276: mov    %r12,0x18(%rsp)
  0x0000000116b5a27b: mov    %r13,0x10(%rsp)
  0x0000000116b5a280: mov    %r14,0x8(%rsp)
  0x0000000116b5a285: mov    %r15,(%rsp)
  0x0000000116b5a289: movabs $0x10cc63f17,%rdi
  0x0000000116b5a293: movabs $0x116b5a233,%rsi
  0x0000000116b5a29d: mov    %rsp,%rdx
  0x0000000116b5a2a0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a2a4: callq  0x000000010c7dd830
  0x0000000116b5a2a9: hlt    
  0x0000000116b5a2aa: pop    %r10
  0x0000000116b5a2ac: mov    %r15,%rdi
  0x0000000116b5a2af: mov    %rbp,0x290(%r15)
  0x0000000116b5a2b6: mov    %rax,0x280(%r15)
  0x0000000116b5a2bd: test   $0xf,%esp
  0x0000000116b5a2c3: je     0x0000000116b5a2db
  0x0000000116b5a2c9: sub    $0x8,%rsp
  0x0000000116b5a2cd: callq  0x000000010c58e1c0
  0x0000000116b5a2d2: add    $0x8,%rsp
  0x0000000116b5a2d6: jmpq   0x0000000116b5a2e0
  0x0000000116b5a2db: callq  0x000000010c58e1c0
  0x0000000116b5a2e0: push   %rax
  0x0000000116b5a2e1: push   %rdi
  0x0000000116b5a2e2: push   %rsi
  0x0000000116b5a2e3: push   %rdx
  0x0000000116b5a2e4: push   %rcx
  0x0000000116b5a2e5: push   %r8
  0x0000000116b5a2e7: push   %r9
  0x0000000116b5a2e9: push   %r10
  0x0000000116b5a2eb: mov    %rsp,%r10
  0x0000000116b5a2ee: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a2f2: push   %r10
  0x0000000116b5a2f4: push   %r11
  0x0000000116b5a2f6: mov    $0x109,%edi
  0x0000000116b5a2fb: movabs $0x7ff815049fd5,%r10
  0x0000000116b5a305: callq  *%r10
  0x0000000116b5a308: pop    %r11
  0x0000000116b5a30a: pop    %rsp
  0x0000000116b5a30b: pop    %r10
  0x0000000116b5a30d: pop    %r9
  0x0000000116b5a30f: pop    %r8
  0x0000000116b5a311: pop    %rcx
  0x0000000116b5a312: pop    %rdx
  0x0000000116b5a313: pop    %rsi
  0x0000000116b5a314: pop    %rdi
  0x0000000116b5a315: cmp    %rax,%r15
  0x0000000116b5a318: je     0x0000000116b5a395
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5a31e: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a323: sub    $0x80,%rsp
  0x0000000116b5a32a: mov    %rax,0x78(%rsp)
  0x0000000116b5a32f: mov    %rcx,0x70(%rsp)
  0x0000000116b5a334: mov    %rdx,0x68(%rsp)
  0x0000000116b5a339: mov    %rbx,0x60(%rsp)
  0x0000000116b5a33e: mov    %rbp,0x50(%rsp)
  0x0000000116b5a343: mov    %rsi,0x48(%rsp)
  0x0000000116b5a348: mov    %rdi,0x40(%rsp)
  0x0000000116b5a34d: mov    %r8,0x38(%rsp)
  0x0000000116b5a352: mov    %r9,0x30(%rsp)
  0x0000000116b5a357: mov    %r10,0x28(%rsp)
  0x0000000116b5a35c: mov    %r11,0x20(%rsp)
  0x0000000116b5a361: mov    %r12,0x18(%rsp)
  0x0000000116b5a366: mov    %r13,0x10(%rsp)
  0x0000000116b5a36b: mov    %r14,0x8(%rsp)
  0x0000000116b5a370: mov    %r15,(%rsp)
  0x0000000116b5a374: movabs $0x10cc6405e,%rdi
  0x0000000116b5a37e: movabs $0x116b5a31e,%rsi
  0x0000000116b5a388: mov    %rsp,%rdx
  0x0000000116b5a38b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a38f: callq  0x000000010c7dd830
  0x0000000116b5a394: hlt    
  0x0000000116b5a395: pop    %rax
  0x0000000116b5a396: movabs $0x0,%r10
  0x0000000116b5a3a0: mov    %r10,0x280(%r15)
  0x0000000116b5a3a7: movabs $0x0,%r10
  0x0000000116b5a3b1: mov    %r10,0x290(%r15)
  0x0000000116b5a3b8: movabs $0x0,%r10
  0x0000000116b5a3c2: mov    %r10,0x288(%r15)
  0x0000000116b5a3c9: cmpq   $0x0,0x8(%r15)
  0x0000000116b5a3d1: je     0x0000000116b5a3dc
  0x0000000116b5a3d7: jmpq   0x0000000116b30420
  0x0000000116b5a3dc: mov    -0x38(%rbp),%r13
  0x0000000116b5a3e0: mov    -0x30(%rbp),%r14
  0x0000000116b5a3e4: retq   
  0x0000000116b5a3e5: mov    -0x18(%rbp),%rbx
  0x0000000116b5a3e9: mov    0x70(%rbx),%r11
  0x0000000116b5a3ed: callq  *%r11
  0x0000000116b5a3f0: mov    -0x18(%rbp),%rbx
  0x0000000116b5a3f4: mov    %rax,0x18(%rbp)
  0x0000000116b5a3f8: mov    0x28(%rbx),%r11d
  0x0000000116b5a3fc: test   $0x8,%r11d
  0x0000000116b5a403: je     0x0000000116b5a421
  0x0000000116b5a409: mov    0x10(%rbx),%r11
  0x0000000116b5a40d: mov    0x8(%r11),%r11
  0x0000000116b5a411: mov    0x20(%r11),%r11
  0x0000000116b5a415: mov    0x70(%r11),%r11
  0x0000000116b5a419: mov    %r11,0x10(%rbp)
  0x0000000116b5a41d: lea    0x10(%rbp),%rsi
  0x0000000116b5a421: mov    0x68(%rbx),%rax
  0x0000000116b5a425: movabs $0x10c9c8cd0,%r11
  0x0000000116b5a42f: cmp    %r11,%rax
  0x0000000116b5a432: jne    0x0000000116b5a69c
  0x0000000116b5a438: callq  0x0000000116b5a442
  0x0000000116b5a43d: jmpq   0x0000000116b5a694
  0x0000000116b5a442: mov    %rbx,%rsi
  0x0000000116b5a445: lea    0x8(%rsp),%rax
  0x0000000116b5a44a: mov    %r13,-0x38(%rbp)
  0x0000000116b5a44e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5a456: je     0x0000000116b5a4d3
  0x0000000116b5a45c: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a461: sub    $0x80,%rsp
  0x0000000116b5a468: mov    %rax,0x78(%rsp)
  0x0000000116b5a46d: mov    %rcx,0x70(%rsp)
  0x0000000116b5a472: mov    %rdx,0x68(%rsp)
  0x0000000116b5a477: mov    %rbx,0x60(%rsp)
  0x0000000116b5a47c: mov    %rbp,0x50(%rsp)
  0x0000000116b5a481: mov    %rsi,0x48(%rsp)
  0x0000000116b5a486: mov    %rdi,0x40(%rsp)
  0x0000000116b5a48b: mov    %r8,0x38(%rsp)
  0x0000000116b5a490: mov    %r9,0x30(%rsp)
  0x0000000116b5a495: mov    %r10,0x28(%rsp)
  0x0000000116b5a49a: mov    %r11,0x20(%rsp)
  0x0000000116b5a49f: mov    %r12,0x18(%rsp)
  0x0000000116b5a4a4: mov    %r13,0x10(%rsp)
  0x0000000116b5a4a9: mov    %r14,0x8(%rsp)
  0x0000000116b5a4ae: mov    %r15,(%rsp)
  0x0000000116b5a4b2: movabs $0x10cc2363b,%rdi
  0x0000000116b5a4bc: movabs $0x116b5a45c,%rsi
  0x0000000116b5a4c6: mov    %rsp,%rdx
  0x0000000116b5a4c9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a4cd: callq  0x000000010c7dd830
  0x0000000116b5a4d2: hlt    
  0x0000000116b5a4d3: push   %r10
  0x0000000116b5a4d5: cmp    -0x9d13c2c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5a4dc: je     0x0000000116b5a559
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5a4e2: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a4e7: sub    $0x80,%rsp
  0x0000000116b5a4ee: mov    %rax,0x78(%rsp)
  0x0000000116b5a4f3: mov    %rcx,0x70(%rsp)
  0x0000000116b5a4f8: mov    %rdx,0x68(%rsp)
  0x0000000116b5a4fd: mov    %rbx,0x60(%rsp)
  0x0000000116b5a502: mov    %rbp,0x50(%rsp)
  0x0000000116b5a507: mov    %rsi,0x48(%rsp)
  0x0000000116b5a50c: mov    %rdi,0x40(%rsp)
  0x0000000116b5a511: mov    %r8,0x38(%rsp)
  0x0000000116b5a516: mov    %r9,0x30(%rsp)
  0x0000000116b5a51b: mov    %r10,0x28(%rsp)
  0x0000000116b5a520: mov    %r11,0x20(%rsp)
  0x0000000116b5a525: mov    %r12,0x18(%rsp)
  0x0000000116b5a52a: mov    %r13,0x10(%rsp)
  0x0000000116b5a52f: mov    %r14,0x8(%rsp)
  0x0000000116b5a534: mov    %r15,(%rsp)
  0x0000000116b5a538: movabs $0x10cc63f17,%rdi
  0x0000000116b5a542: movabs $0x116b5a4e2,%rsi
  0x0000000116b5a54c: mov    %rsp,%rdx
  0x0000000116b5a54f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a553: callq  0x000000010c7dd830
  0x0000000116b5a558: hlt    
  0x0000000116b5a559: pop    %r10
  0x0000000116b5a55b: mov    %r15,%rdi
  0x0000000116b5a55e: mov    %rbp,0x290(%r15)
  0x0000000116b5a565: mov    %rax,0x280(%r15)
  0x0000000116b5a56c: test   $0xf,%esp
  0x0000000116b5a572: je     0x0000000116b5a58a
  0x0000000116b5a578: sub    $0x8,%rsp
  0x0000000116b5a57c: callq  0x000000010c58e1c0
  0x0000000116b5a581: add    $0x8,%rsp
  0x0000000116b5a585: jmpq   0x0000000116b5a58f
  0x0000000116b5a58a: callq  0x000000010c58e1c0
  0x0000000116b5a58f: push   %rax
  0x0000000116b5a590: push   %rdi
  0x0000000116b5a591: push   %rsi
  0x0000000116b5a592: push   %rdx
  0x0000000116b5a593: push   %rcx
  0x0000000116b5a594: push   %r8
  0x0000000116b5a596: push   %r9
  0x0000000116b5a598: push   %r10
  0x0000000116b5a59a: mov    %rsp,%r10
  0x0000000116b5a59d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a5a1: push   %r10
  0x0000000116b5a5a3: push   %r11
  0x0000000116b5a5a5: mov    $0x109,%edi
  0x0000000116b5a5aa: movabs $0x7ff815049fd5,%r10
  0x0000000116b5a5b4: callq  *%r10
  0x0000000116b5a5b7: pop    %r11
  0x0000000116b5a5b9: pop    %rsp
  0x0000000116b5a5ba: pop    %r10
  0x0000000116b5a5bc: pop    %r9
  0x0000000116b5a5be: pop    %r8
  0x0000000116b5a5c0: pop    %rcx
  0x0000000116b5a5c1: pop    %rdx
  0x0000000116b5a5c2: pop    %rsi
  0x0000000116b5a5c3: pop    %rdi
  0x0000000116b5a5c4: cmp    %rax,%r15
  0x0000000116b5a5c7: je     0x0000000116b5a644
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5a5cd: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a5d2: sub    $0x80,%rsp
  0x0000000116b5a5d9: mov    %rax,0x78(%rsp)
  0x0000000116b5a5de: mov    %rcx,0x70(%rsp)
  0x0000000116b5a5e3: mov    %rdx,0x68(%rsp)
  0x0000000116b5a5e8: mov    %rbx,0x60(%rsp)
  0x0000000116b5a5ed: mov    %rbp,0x50(%rsp)
  0x0000000116b5a5f2: mov    %rsi,0x48(%rsp)
  0x0000000116b5a5f7: mov    %rdi,0x40(%rsp)
  0x0000000116b5a5fc: mov    %r8,0x38(%rsp)
  0x0000000116b5a601: mov    %r9,0x30(%rsp)
  0x0000000116b5a606: mov    %r10,0x28(%rsp)
  0x0000000116b5a60b: mov    %r11,0x20(%rsp)
  0x0000000116b5a610: mov    %r12,0x18(%rsp)
  0x0000000116b5a615: mov    %r13,0x10(%rsp)
  0x0000000116b5a61a: mov    %r14,0x8(%rsp)
  0x0000000116b5a61f: mov    %r15,(%rsp)
  0x0000000116b5a623: movabs $0x10cc6405e,%rdi
  0x0000000116b5a62d: movabs $0x116b5a5cd,%rsi
  0x0000000116b5a637: mov    %rsp,%rdx
  0x0000000116b5a63a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a63e: callq  0x000000010c7dd830
  0x0000000116b5a643: hlt    
  0x0000000116b5a644: pop    %rax
  0x0000000116b5a645: movabs $0x0,%r10
  0x0000000116b5a64f: mov    %r10,0x280(%r15)
  0x0000000116b5a656: movabs $0x0,%r10
  0x0000000116b5a660: mov    %r10,0x290(%r15)
  0x0000000116b5a667: movabs $0x0,%r10
  0x0000000116b5a671: mov    %r10,0x288(%r15)
  0x0000000116b5a678: cmpq   $0x0,0x8(%r15)
  0x0000000116b5a680: je     0x0000000116b5a68b
  0x0000000116b5a686: jmpq   0x0000000116b30420
  0x0000000116b5a68b: mov    -0x38(%rbp),%r13
  0x0000000116b5a68f: mov    -0x30(%rbp),%r14
  0x0000000116b5a693: retq   
  0x0000000116b5a694: mov    -0x18(%rbp),%rbx
  0x0000000116b5a698: mov    0x68(%rbx),%rax
  0x0000000116b5a69c: lea    0x2a0(%r15),%rdi
  0x0000000116b5a6a3: mov    %rbp,0x290(%r15)
  0x0000000116b5a6aa: movabs $0x116b5a6a3,%r10
  0x0000000116b5a6b4: mov    %r10,0x288(%r15)
  0x0000000116b5a6bb: mov    %rsp,0x280(%r15)
  0x0000000116b5a6c2: mov    0x318(%r15),%r11d
  0x0000000116b5a6c9: cmp    $0x8,%r11d
  0x0000000116b5a6cd: je     0x0000000116b5a74a
  0x0000000116b5a6d3: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a6d8: sub    $0x80,%rsp
  0x0000000116b5a6df: mov    %rax,0x78(%rsp)
  0x0000000116b5a6e4: mov    %rcx,0x70(%rsp)
  0x0000000116b5a6e9: mov    %rdx,0x68(%rsp)
  0x0000000116b5a6ee: mov    %rbx,0x60(%rsp)
  0x0000000116b5a6f3: mov    %rbp,0x50(%rsp)
  0x0000000116b5a6f8: mov    %rsi,0x48(%rsp)
  0x0000000116b5a6fd: mov    %rdi,0x40(%rsp)
  0x0000000116b5a702: mov    %r8,0x38(%rsp)
  0x0000000116b5a707: mov    %r9,0x30(%rsp)
  0x0000000116b5a70c: mov    %r10,0x28(%rsp)
  0x0000000116b5a711: mov    %r11,0x20(%rsp)
  0x0000000116b5a716: mov    %r12,0x18(%rsp)
  0x0000000116b5a71b: mov    %r13,0x10(%rsp)
  0x0000000116b5a720: mov    %r14,0x8(%rsp)
  0x0000000116b5a725: mov    %r15,(%rsp)
  0x0000000116b5a729: movabs $0x10ccafca4,%rdi
  0x0000000116b5a733: movabs $0x116b5a6d3,%rsi
  0x0000000116b5a73d: mov    %rsp,%rdx
  0x0000000116b5a740: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a744: callq  0x000000010c7dd830
  0x0000000116b5a749: hlt    
  0x0000000116b5a74a: movl   $0x4,0x318(%r15)
  0x0000000116b5a755: callq  *%rax
  0x0000000116b5a757: vzeroupper 
  0x0000000116b5a75a: sub    $0x10,%rsp
  0x0000000116b5a75e: vmovsd %xmm0,(%rsp)
  0x0000000116b5a763: sub    $0x10,%rsp
  0x0000000116b5a767: mov    %rax,(%rsp)
  0x0000000116b5a76b: movl   $0x5,0x318(%r15)
  0x0000000116b5a776: lock addl $0x0,(%rsp)
  0x0000000116b5a77b: cmpl   $0x0,-0x9d34145(%rip)        # 0x000000010ce26640
  0x0000000116b5a785: jne    0x0000000116b5a799
  0x0000000116b5a78b: cmpl   $0x0,0x30(%r15)
  0x0000000116b5a793: je     0x0000000116b5a7b2
  0x0000000116b5a799: mov    %r15,%rdi
  0x0000000116b5a79c: mov    %rsp,%r12
  0x0000000116b5a79f: sub    $0x0,%rsp
  0x0000000116b5a7a3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a7a7: callq  0x000000010ca7ea20
  0x0000000116b5a7ac: mov    %r12,%rsp
  0x0000000116b5a7af: xor    %r12,%r12
  0x0000000116b5a7b2: movl   $0x8,0x318(%r15)
  0x0000000116b5a7bd: movabs $0x0,%r10
  0x0000000116b5a7c7: mov    %r10,0x280(%r15)
  0x0000000116b5a7ce: movabs $0x0,%r10
  0x0000000116b5a7d8: mov    %r10,0x290(%r15)
  0x0000000116b5a7df: movabs $0x0,%r10
  0x0000000116b5a7e9: mov    %r10,0x288(%r15)
  0x0000000116b5a7f0: mov    0x38(%r15),%r11
  0x0000000116b5a7f4: movl   $0x0,0x108(%r11)
  0x0000000116b5a7ff: movabs $0x116b4ef3b,%r11
  0x0000000116b5a809: cmp    0x18(%rbp),%r11
  0x0000000116b5a80d: jne    0x0000000116b5a848
  0x0000000116b5a813: mov    (%rsp),%rax
  0x0000000116b5a817: add    $0x10,%rsp
  0x0000000116b5a81b: test   %rax,%rax
  0x0000000116b5a81e: je     0x0000000116b5a83c
  0x0000000116b5a824: test   $0x1,%rax
  0x0000000116b5a82a: je     0x0000000116b5a839
  0x0000000116b5a830: mov    -0x1(%rax),%rax
  0x0000000116b5a834: jmpq   0x0000000116b5a83c
  0x0000000116b5a839: mov    (%rax),%rax
  0x0000000116b5a83c: mov    %rax,0x10(%rbp)
  0x0000000116b5a840: sub    $0x10,%rsp
  0x0000000116b5a844: mov    %rax,(%rsp)
  0x0000000116b5a848: cmpl   $0x1,0x344(%r15)
  0x0000000116b5a853: jne    0x0000000116b5a916
  0x0000000116b5a859: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a85e: sub    $0x80,%rsp
  0x0000000116b5a865: mov    %rax,0x78(%rsp)
  0x0000000116b5a86a: mov    %rcx,0x70(%rsp)
  0x0000000116b5a86f: mov    %rdx,0x68(%rsp)
  0x0000000116b5a874: mov    %rbx,0x60(%rsp)
  0x0000000116b5a879: mov    %rbp,0x50(%rsp)
  0x0000000116b5a87e: mov    %rsi,0x48(%rsp)
  0x0000000116b5a883: mov    %rdi,0x40(%rsp)
  0x0000000116b5a888: mov    %r8,0x38(%rsp)
  0x0000000116b5a88d: mov    %r9,0x30(%rsp)
  0x0000000116b5a892: mov    %r10,0x28(%rsp)
  0x0000000116b5a897: mov    %r11,0x20(%rsp)
  0x0000000116b5a89c: mov    %r12,0x18(%rsp)
  0x0000000116b5a8a1: mov    %r13,0x10(%rsp)
  0x0000000116b5a8a6: mov    %r14,0x8(%rsp)
  0x0000000116b5a8ab: mov    %r15,(%rsp)
  0x0000000116b5a8af: mov    %rsp,%r12
  0x0000000116b5a8b2: sub    $0x0,%rsp
  0x0000000116b5a8b6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a8ba: callq  0x000000010c9ccc30
  0x0000000116b5a8bf: mov    %r12,%rsp
  0x0000000116b5a8c2: mov    (%rsp),%r15
  0x0000000116b5a8c6: mov    0x8(%rsp),%r14
  0x0000000116b5a8cb: mov    0x10(%rsp),%r13
  0x0000000116b5a8d0: mov    0x18(%rsp),%r12
  0x0000000116b5a8d5: mov    0x20(%rsp),%r11
  0x0000000116b5a8da: mov    0x28(%rsp),%r10
  0x0000000116b5a8df: mov    0x30(%rsp),%r9
  0x0000000116b5a8e4: mov    0x38(%rsp),%r8
  0x0000000116b5a8e9: mov    0x40(%rsp),%rdi
  0x0000000116b5a8ee: mov    0x48(%rsp),%rsi
  0x0000000116b5a8f3: mov    0x50(%rsp),%rbp
  0x0000000116b5a8f8: mov    0x60(%rsp),%rbx
  0x0000000116b5a8fd: mov    0x68(%rsp),%rdx
  0x0000000116b5a902: mov    0x70(%rsp),%rcx
  0x0000000116b5a907: mov    0x78(%rsp),%rax
  0x0000000116b5a90c: add    $0x80,%rsp
  0x0000000116b5a913: xor    %r12,%r12
  0x0000000116b5a916: mov    -0x18(%rbp),%rbx
  0x0000000116b5a91a: mov    0x10(%rbx),%r13
  0x0000000116b5a91e: lea    0x30(%r13),%r13
  0x0000000116b5a922: cmpq   $0x0,0x8(%r15)
  0x0000000116b5a92a: je     0x0000000116b5ac00
  0x0000000116b5a930: callq  0x0000000116b5a93a
  0x0000000116b5a935: jmpq   0x0000000116b5ab89
  0x0000000116b5a93a: lea    0x8(%rsp),%rax
  0x0000000116b5a93f: mov    %r13,-0x38(%rbp)
  0x0000000116b5a943: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5a94b: je     0x0000000116b5a9c8
  0x0000000116b5a951: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a956: sub    $0x80,%rsp
  0x0000000116b5a95d: mov    %rax,0x78(%rsp)
  0x0000000116b5a962: mov    %rcx,0x70(%rsp)
  0x0000000116b5a967: mov    %rdx,0x68(%rsp)
  0x0000000116b5a96c: mov    %rbx,0x60(%rsp)
  0x0000000116b5a971: mov    %rbp,0x50(%rsp)
  0x0000000116b5a976: mov    %rsi,0x48(%rsp)
  0x0000000116b5a97b: mov    %rdi,0x40(%rsp)
  0x0000000116b5a980: mov    %r8,0x38(%rsp)
  0x0000000116b5a985: mov    %r9,0x30(%rsp)
  0x0000000116b5a98a: mov    %r10,0x28(%rsp)
  0x0000000116b5a98f: mov    %r11,0x20(%rsp)
  0x0000000116b5a994: mov    %r12,0x18(%rsp)
  0x0000000116b5a999: mov    %r13,0x10(%rsp)
  0x0000000116b5a99e: mov    %r14,0x8(%rsp)
  0x0000000116b5a9a3: mov    %r15,(%rsp)
  0x0000000116b5a9a7: movabs $0x10cc2363b,%rdi
  0x0000000116b5a9b1: movabs $0x116b5a951,%rsi
  0x0000000116b5a9bb: mov    %rsp,%rdx
  0x0000000116b5a9be: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5a9c2: callq  0x000000010c7dd830
  0x0000000116b5a9c7: hlt    
  0x0000000116b5a9c8: push   %r10
  0x0000000116b5a9ca: cmp    -0x9d14121(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5a9d1: je     0x0000000116b5aa4e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5a9d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b5a9dc: sub    $0x80,%rsp
  0x0000000116b5a9e3: mov    %rax,0x78(%rsp)
  0x0000000116b5a9e8: mov    %rcx,0x70(%rsp)
  0x0000000116b5a9ed: mov    %rdx,0x68(%rsp)
  0x0000000116b5a9f2: mov    %rbx,0x60(%rsp)
  0x0000000116b5a9f7: mov    %rbp,0x50(%rsp)
  0x0000000116b5a9fc: mov    %rsi,0x48(%rsp)
  0x0000000116b5aa01: mov    %rdi,0x40(%rsp)
  0x0000000116b5aa06: mov    %r8,0x38(%rsp)
  0x0000000116b5aa0b: mov    %r9,0x30(%rsp)
  0x0000000116b5aa10: mov    %r10,0x28(%rsp)
  0x0000000116b5aa15: mov    %r11,0x20(%rsp)
  0x0000000116b5aa1a: mov    %r12,0x18(%rsp)
  0x0000000116b5aa1f: mov    %r13,0x10(%rsp)
  0x0000000116b5aa24: mov    %r14,0x8(%rsp)
  0x0000000116b5aa29: mov    %r15,(%rsp)
  0x0000000116b5aa2d: movabs $0x10cc63f17,%rdi
  0x0000000116b5aa37: movabs $0x116b5a9d7,%rsi
  0x0000000116b5aa41: mov    %rsp,%rdx
  0x0000000116b5aa44: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5aa48: callq  0x000000010c7dd830
  0x0000000116b5aa4d: hlt    
  0x0000000116b5aa4e: pop    %r10
  0x0000000116b5aa50: mov    %r15,%rdi
  0x0000000116b5aa53: mov    %rbp,0x290(%r15)
  0x0000000116b5aa5a: mov    %rax,0x280(%r15)
  0x0000000116b5aa61: test   $0xf,%esp
  0x0000000116b5aa67: je     0x0000000116b5aa7f
  0x0000000116b5aa6d: sub    $0x8,%rsp
  0x0000000116b5aa71: callq  0x000000010c5881a0
  0x0000000116b5aa76: add    $0x8,%rsp
  0x0000000116b5aa7a: jmpq   0x0000000116b5aa84
  0x0000000116b5aa7f: callq  0x000000010c5881a0
  0x0000000116b5aa84: push   %rax
  0x0000000116b5aa85: push   %rdi
  0x0000000116b5aa86: push   %rsi
  0x0000000116b5aa87: push   %rdx
  0x0000000116b5aa88: push   %rcx
  0x0000000116b5aa89: push   %r8
  0x0000000116b5aa8b: push   %r9
  0x0000000116b5aa8d: push   %r10
  0x0000000116b5aa8f: mov    %rsp,%r10
  0x0000000116b5aa92: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5aa96: push   %r10
  0x0000000116b5aa98: push   %r11
  0x0000000116b5aa9a: mov    $0x109,%edi
  0x0000000116b5aa9f: movabs $0x7ff815049fd5,%r10
  0x0000000116b5aaa9: callq  *%r10
  0x0000000116b5aaac: pop    %r11
  0x0000000116b5aaae: pop    %rsp
  0x0000000116b5aaaf: pop    %r10
  0x0000000116b5aab1: pop    %r9
  0x0000000116b5aab3: pop    %r8
  0x0000000116b5aab5: pop    %rcx
  0x0000000116b5aab6: pop    %rdx
  0x0000000116b5aab7: pop    %rsi
  0x0000000116b5aab8: pop    %rdi
  0x0000000116b5aab9: cmp    %rax,%r15
  0x0000000116b5aabc: je     0x0000000116b5ab39
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5aac2: mov    %rsp,-0x28(%rsp)
  0x0000000116b5aac7: sub    $0x80,%rsp
  0x0000000116b5aace: mov    %rax,0x78(%rsp)
  0x0000000116b5aad3: mov    %rcx,0x70(%rsp)
  0x0000000116b5aad8: mov    %rdx,0x68(%rsp)
  0x0000000116b5aadd: mov    %rbx,0x60(%rsp)
  0x0000000116b5aae2: mov    %rbp,0x50(%rsp)
  0x0000000116b5aae7: mov    %rsi,0x48(%rsp)
  0x0000000116b5aaec: mov    %rdi,0x40(%rsp)
  0x0000000116b5aaf1: mov    %r8,0x38(%rsp)
  0x0000000116b5aaf6: mov    %r9,0x30(%rsp)
  0x0000000116b5aafb: mov    %r10,0x28(%rsp)
  0x0000000116b5ab00: mov    %r11,0x20(%rsp)
  0x0000000116b5ab05: mov    %r12,0x18(%rsp)
  0x0000000116b5ab0a: mov    %r13,0x10(%rsp)
  0x0000000116b5ab0f: mov    %r14,0x8(%rsp)
  0x0000000116b5ab14: mov    %r15,(%rsp)
  0x0000000116b5ab18: movabs $0x10cc6405e,%rdi
  0x0000000116b5ab22: movabs $0x116b5aac2,%rsi
  0x0000000116b5ab2c: mov    %rsp,%rdx
  0x0000000116b5ab2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ab33: callq  0x000000010c7dd830
  0x0000000116b5ab38: hlt    
  0x0000000116b5ab39: pop    %rax
  0x0000000116b5ab3a: movabs $0x0,%r10
  0x0000000116b5ab44: mov    %r10,0x280(%r15)
  0x0000000116b5ab4b: movabs $0x0,%r10
  0x0000000116b5ab55: mov    %r10,0x290(%r15)
  0x0000000116b5ab5c: movabs $0x0,%r10
  0x0000000116b5ab66: mov    %r10,0x288(%r15)
  0x0000000116b5ab6d: cmpq   $0x0,0x8(%r15)
  0x0000000116b5ab75: je     0x0000000116b5ab80
  0x0000000116b5ab7b: jmpq   0x0000000116b30420
  0x0000000116b5ab80: mov    -0x38(%rbp),%r13
  0x0000000116b5ab84: mov    -0x30(%rbp),%r14
  0x0000000116b5ab88: retq   
  0x0000000116b5ab89: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ab8e: sub    $0x80,%rsp
  0x0000000116b5ab95: mov    %rax,0x78(%rsp)
  0x0000000116b5ab9a: mov    %rcx,0x70(%rsp)
  0x0000000116b5ab9f: mov    %rdx,0x68(%rsp)
  0x0000000116b5aba4: mov    %rbx,0x60(%rsp)
  0x0000000116b5aba9: mov    %rbp,0x50(%rsp)
  0x0000000116b5abae: mov    %rsi,0x48(%rsp)
  0x0000000116b5abb3: mov    %rdi,0x40(%rsp)
  0x0000000116b5abb8: mov    %r8,0x38(%rsp)
  0x0000000116b5abbd: mov    %r9,0x30(%rsp)
  0x0000000116b5abc2: mov    %r10,0x28(%rsp)
  0x0000000116b5abc7: mov    %r11,0x20(%rsp)
  0x0000000116b5abcc: mov    %r12,0x18(%rsp)
  0x0000000116b5abd1: mov    %r13,0x10(%rsp)
  0x0000000116b5abd6: mov    %r14,0x8(%rsp)
  0x0000000116b5abdb: mov    %r15,(%rsp)
  0x0000000116b5abdf: movabs $0x10cb763be,%rdi
  0x0000000116b5abe9: movabs $0x116b5ab89,%rsi
  0x0000000116b5abf3: mov    %rsp,%rdx
  0x0000000116b5abf6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5abfa: callq  0x000000010c7dd830
  0x0000000116b5abff: hlt    
  0x0000000116b5ac00: mov    0x28(%rbx),%r11d
  0x0000000116b5ac04: test   $0x20,%r11d
  0x0000000116b5ac0b: je     0x0000000116b5b18e
  0x0000000116b5ac11: lea    -0x50(%rbp),%rsi
  0x0000000116b5ac15: mov    0x8(%rsi),%r11
  0x0000000116b5ac19: test   %r11,%r11
  0x0000000116b5ac1c: jne    0x0000000116b5aef2
  0x0000000116b5ac22: callq  0x0000000116b5ac2c
  0x0000000116b5ac27: jmpq   0x0000000116b5ae7b
  0x0000000116b5ac2c: lea    0x8(%rsp),%rax
  0x0000000116b5ac31: mov    %r13,-0x38(%rbp)
  0x0000000116b5ac35: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5ac3d: je     0x0000000116b5acba
  0x0000000116b5ac43: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ac48: sub    $0x80,%rsp
  0x0000000116b5ac4f: mov    %rax,0x78(%rsp)
  0x0000000116b5ac54: mov    %rcx,0x70(%rsp)
  0x0000000116b5ac59: mov    %rdx,0x68(%rsp)
  0x0000000116b5ac5e: mov    %rbx,0x60(%rsp)
  0x0000000116b5ac63: mov    %rbp,0x50(%rsp)
  0x0000000116b5ac68: mov    %rsi,0x48(%rsp)
  0x0000000116b5ac6d: mov    %rdi,0x40(%rsp)
  0x0000000116b5ac72: mov    %r8,0x38(%rsp)
  0x0000000116b5ac77: mov    %r9,0x30(%rsp)
  0x0000000116b5ac7c: mov    %r10,0x28(%rsp)
  0x0000000116b5ac81: mov    %r11,0x20(%rsp)
  0x0000000116b5ac86: mov    %r12,0x18(%rsp)
  0x0000000116b5ac8b: mov    %r13,0x10(%rsp)
  0x0000000116b5ac90: mov    %r14,0x8(%rsp)
  0x0000000116b5ac95: mov    %r15,(%rsp)
  0x0000000116b5ac99: movabs $0x10cc2363b,%rdi
  0x0000000116b5aca3: movabs $0x116b5ac43,%rsi
  0x0000000116b5acad: mov    %rsp,%rdx
  0x0000000116b5acb0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5acb4: callq  0x000000010c7dd830
  0x0000000116b5acb9: hlt    
  0x0000000116b5acba: push   %r10
  0x0000000116b5acbc: cmp    -0x9d14413(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5acc3: je     0x0000000116b5ad40
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5acc9: mov    %rsp,-0x28(%rsp)
  0x0000000116b5acce: sub    $0x80,%rsp
  0x0000000116b5acd5: mov    %rax,0x78(%rsp)
  0x0000000116b5acda: mov    %rcx,0x70(%rsp)
  0x0000000116b5acdf: mov    %rdx,0x68(%rsp)
  0x0000000116b5ace4: mov    %rbx,0x60(%rsp)
  0x0000000116b5ace9: mov    %rbp,0x50(%rsp)
  0x0000000116b5acee: mov    %rsi,0x48(%rsp)
  0x0000000116b5acf3: mov    %rdi,0x40(%rsp)
  0x0000000116b5acf8: mov    %r8,0x38(%rsp)
  0x0000000116b5acfd: mov    %r9,0x30(%rsp)
  0x0000000116b5ad02: mov    %r10,0x28(%rsp)
  0x0000000116b5ad07: mov    %r11,0x20(%rsp)
  0x0000000116b5ad0c: mov    %r12,0x18(%rsp)
  0x0000000116b5ad11: mov    %r13,0x10(%rsp)
  0x0000000116b5ad16: mov    %r14,0x8(%rsp)
  0x0000000116b5ad1b: mov    %r15,(%rsp)
  0x0000000116b5ad1f: movabs $0x10cc63f17,%rdi
  0x0000000116b5ad29: movabs $0x116b5acc9,%rsi
  0x0000000116b5ad33: mov    %rsp,%rdx
  0x0000000116b5ad36: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ad3a: callq  0x000000010c7dd830
  0x0000000116b5ad3f: hlt    
  0x0000000116b5ad40: pop    %r10
  0x0000000116b5ad42: mov    %r15,%rdi
  0x0000000116b5ad45: mov    %rbp,0x290(%r15)
  0x0000000116b5ad4c: mov    %rax,0x280(%r15)
  0x0000000116b5ad53: test   $0xf,%esp
  0x0000000116b5ad59: je     0x0000000116b5ad71
  0x0000000116b5ad5f: sub    $0x8,%rsp
  0x0000000116b5ad63: callq  0x000000010c5892a0
  0x0000000116b5ad68: add    $0x8,%rsp
  0x0000000116b5ad6c: jmpq   0x0000000116b5ad76
  0x0000000116b5ad71: callq  0x000000010c5892a0
  0x0000000116b5ad76: push   %rax
  0x0000000116b5ad77: push   %rdi
  0x0000000116b5ad78: push   %rsi
  0x0000000116b5ad79: push   %rdx
  0x0000000116b5ad7a: push   %rcx
  0x0000000116b5ad7b: push   %r8
  0x0000000116b5ad7d: push   %r9
  0x0000000116b5ad7f: push   %r10
  0x0000000116b5ad81: mov    %rsp,%r10
  0x0000000116b5ad84: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ad88: push   %r10
  0x0000000116b5ad8a: push   %r11
  0x0000000116b5ad8c: mov    $0x109,%edi
  0x0000000116b5ad91: movabs $0x7ff815049fd5,%r10
  0x0000000116b5ad9b: callq  *%r10
  0x0000000116b5ad9e: pop    %r11
  0x0000000116b5ada0: pop    %rsp
  0x0000000116b5ada1: pop    %r10
  0x0000000116b5ada3: pop    %r9
  0x0000000116b5ada5: pop    %r8
  0x0000000116b5ada7: pop    %rcx
  0x0000000116b5ada8: pop    %rdx
  0x0000000116b5ada9: pop    %rsi
  0x0000000116b5adaa: pop    %rdi
  0x0000000116b5adab: cmp    %rax,%r15
  0x0000000116b5adae: je     0x0000000116b5ae2b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5adb4: mov    %rsp,-0x28(%rsp)
  0x0000000116b5adb9: sub    $0x80,%rsp
  0x0000000116b5adc0: mov    %rax,0x78(%rsp)
  0x0000000116b5adc5: mov    %rcx,0x70(%rsp)
  0x0000000116b5adca: mov    %rdx,0x68(%rsp)
  0x0000000116b5adcf: mov    %rbx,0x60(%rsp)
  0x0000000116b5add4: mov    %rbp,0x50(%rsp)
  0x0000000116b5add9: mov    %rsi,0x48(%rsp)
  0x0000000116b5adde: mov    %rdi,0x40(%rsp)
  0x0000000116b5ade3: mov    %r8,0x38(%rsp)
  0x0000000116b5ade8: mov    %r9,0x30(%rsp)
  0x0000000116b5aded: mov    %r10,0x28(%rsp)
  0x0000000116b5adf2: mov    %r11,0x20(%rsp)
  0x0000000116b5adf7: mov    %r12,0x18(%rsp)
  0x0000000116b5adfc: mov    %r13,0x10(%rsp)
  0x0000000116b5ae01: mov    %r14,0x8(%rsp)
  0x0000000116b5ae06: mov    %r15,(%rsp)
  0x0000000116b5ae0a: movabs $0x10cc6405e,%rdi
  0x0000000116b5ae14: movabs $0x116b5adb4,%rsi
  0x0000000116b5ae1e: mov    %rsp,%rdx
  0x0000000116b5ae21: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ae25: callq  0x000000010c7dd830
  0x0000000116b5ae2a: hlt    
  0x0000000116b5ae2b: pop    %rax
  0x0000000116b5ae2c: movabs $0x0,%r10
  0x0000000116b5ae36: mov    %r10,0x280(%r15)
  0x0000000116b5ae3d: movabs $0x0,%r10
  0x0000000116b5ae47: mov    %r10,0x290(%r15)
  0x0000000116b5ae4e: movabs $0x0,%r10
  0x0000000116b5ae58: mov    %r10,0x288(%r15)
  0x0000000116b5ae5f: cmpq   $0x0,0x8(%r15)
  0x0000000116b5ae67: je     0x0000000116b5ae72
  0x0000000116b5ae6d: jmpq   0x0000000116b30420
  0x0000000116b5ae72: mov    -0x38(%rbp),%r13
  0x0000000116b5ae76: mov    -0x30(%rbp),%r14
  0x0000000116b5ae7a: retq   
  0x0000000116b5ae7b: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ae80: sub    $0x80,%rsp
  0x0000000116b5ae87: mov    %rax,0x78(%rsp)
  0x0000000116b5ae8c: mov    %rcx,0x70(%rsp)
  0x0000000116b5ae91: mov    %rdx,0x68(%rsp)
  0x0000000116b5ae96: mov    %rbx,0x60(%rsp)
  0x0000000116b5ae9b: mov    %rbp,0x50(%rsp)
  0x0000000116b5aea0: mov    %rsi,0x48(%rsp)
  0x0000000116b5aea5: mov    %rdi,0x40(%rsp)
  0x0000000116b5aeaa: mov    %r8,0x38(%rsp)
  0x0000000116b5aeaf: mov    %r9,0x30(%rsp)
  0x0000000116b5aeb4: mov    %r10,0x28(%rsp)
  0x0000000116b5aeb9: mov    %r11,0x20(%rsp)
  0x0000000116b5aebe: mov    %r12,0x18(%rsp)
  0x0000000116b5aec3: mov    %r13,0x10(%rsp)
  0x0000000116b5aec8: mov    %r14,0x8(%rsp)
  0x0000000116b5aecd: mov    %r15,(%rsp)
  0x0000000116b5aed1: movabs $0x10cb763be,%rdi
  0x0000000116b5aedb: movabs $0x116b5ae7b,%rsi
  0x0000000116b5aee5: mov    %rsp,%rdx
  0x0000000116b5aee8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5aeec: callq  0x000000010c7dd830
  0x0000000116b5aef1: hlt    
  0x0000000116b5aef2: mov    %r13,-0x38(%rbp)
  0x0000000116b5aef6: lea    (%rsi),%rax
  0x0000000116b5aef9: mov    0x8(%rsi),%rcx
  0x0000000116b5aefd: movq   $0x0,0x8(%rsi)
  0x0000000116b5af05: mov    (%rcx),%rdx
  0x0000000116b5af08: and    $0x7,%rdx
  0x0000000116b5af0c: cmp    $0x5,%rdx
  0x0000000116b5af10: je     0x0000000116b5b18a
  0x0000000116b5af16: mov    (%rax),%rdx
  0x0000000116b5af19: test   %rdx,%rdx
  0x0000000116b5af1c: je     0x0000000116b5b18a
  0x0000000116b5af22: lock cmpxchg %rdx,(%rcx)
  0x0000000116b5af27: je     0x0000000116b5b18a
  0x0000000116b5af2d: mov    %rcx,0x8(%rsi)
  0x0000000116b5af31: callq  0x0000000116b5af3b
  0x0000000116b5af36: jmpq   0x0000000116b5b18a
  0x0000000116b5af3b: lea    0x8(%rsp),%rax
  0x0000000116b5af40: mov    %r13,-0x38(%rbp)
  0x0000000116b5af44: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5af4c: je     0x0000000116b5afc9
  0x0000000116b5af52: mov    %rsp,-0x28(%rsp)
  0x0000000116b5af57: sub    $0x80,%rsp
  0x0000000116b5af5e: mov    %rax,0x78(%rsp)
  0x0000000116b5af63: mov    %rcx,0x70(%rsp)
  0x0000000116b5af68: mov    %rdx,0x68(%rsp)
  0x0000000116b5af6d: mov    %rbx,0x60(%rsp)
  0x0000000116b5af72: mov    %rbp,0x50(%rsp)
  0x0000000116b5af77: mov    %rsi,0x48(%rsp)
  0x0000000116b5af7c: mov    %rdi,0x40(%rsp)
  0x0000000116b5af81: mov    %r8,0x38(%rsp)
  0x0000000116b5af86: mov    %r9,0x30(%rsp)
  0x0000000116b5af8b: mov    %r10,0x28(%rsp)
  0x0000000116b5af90: mov    %r11,0x20(%rsp)
  0x0000000116b5af95: mov    %r12,0x18(%rsp)
  0x0000000116b5af9a: mov    %r13,0x10(%rsp)
  0x0000000116b5af9f: mov    %r14,0x8(%rsp)
  0x0000000116b5afa4: mov    %r15,(%rsp)
  0x0000000116b5afa8: movabs $0x10cc2363b,%rdi
  0x0000000116b5afb2: movabs $0x116b5af52,%rsi
  0x0000000116b5afbc: mov    %rsp,%rdx
  0x0000000116b5afbf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5afc3: callq  0x000000010c7dd830
  0x0000000116b5afc8: hlt    
  0x0000000116b5afc9: push   %r10
  0x0000000116b5afcb: cmp    -0x9d14722(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5afd2: je     0x0000000116b5b04f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5afd8: mov    %rsp,-0x28(%rsp)
  0x0000000116b5afdd: sub    $0x80,%rsp
  0x0000000116b5afe4: mov    %rax,0x78(%rsp)
  0x0000000116b5afe9: mov    %rcx,0x70(%rsp)
  0x0000000116b5afee: mov    %rdx,0x68(%rsp)
  0x0000000116b5aff3: mov    %rbx,0x60(%rsp)
  0x0000000116b5aff8: mov    %rbp,0x50(%rsp)
  0x0000000116b5affd: mov    %rsi,0x48(%rsp)
  0x0000000116b5b002: mov    %rdi,0x40(%rsp)
  0x0000000116b5b007: mov    %r8,0x38(%rsp)
  0x0000000116b5b00c: mov    %r9,0x30(%rsp)
  0x0000000116b5b011: mov    %r10,0x28(%rsp)
  0x0000000116b5b016: mov    %r11,0x20(%rsp)
  0x0000000116b5b01b: mov    %r12,0x18(%rsp)
  0x0000000116b5b020: mov    %r13,0x10(%rsp)
  0x0000000116b5b025: mov    %r14,0x8(%rsp)
  0x0000000116b5b02a: mov    %r15,(%rsp)
  0x0000000116b5b02e: movabs $0x10cc63f17,%rdi
  0x0000000116b5b038: movabs $0x116b5afd8,%rsi
  0x0000000116b5b042: mov    %rsp,%rdx
  0x0000000116b5b045: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b049: callq  0x000000010c7dd830
  0x0000000116b5b04e: hlt    
  0x0000000116b5b04f: pop    %r10
  0x0000000116b5b051: mov    %r15,%rdi
  0x0000000116b5b054: mov    %rbp,0x290(%r15)
  0x0000000116b5b05b: mov    %rax,0x280(%r15)
  0x0000000116b5b062: test   $0xf,%esp
  0x0000000116b5b068: je     0x0000000116b5b080
  0x0000000116b5b06e: sub    $0x8,%rsp
  0x0000000116b5b072: callq  0x000000010c588f80
  0x0000000116b5b077: add    $0x8,%rsp
  0x0000000116b5b07b: jmpq   0x0000000116b5b085
  0x0000000116b5b080: callq  0x000000010c588f80
  0x0000000116b5b085: push   %rax
  0x0000000116b5b086: push   %rdi
  0x0000000116b5b087: push   %rsi
  0x0000000116b5b088: push   %rdx
  0x0000000116b5b089: push   %rcx
  0x0000000116b5b08a: push   %r8
  0x0000000116b5b08c: push   %r9
  0x0000000116b5b08e: push   %r10
  0x0000000116b5b090: mov    %rsp,%r10
  0x0000000116b5b093: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b097: push   %r10
  0x0000000116b5b099: push   %r11
  0x0000000116b5b09b: mov    $0x109,%edi
  0x0000000116b5b0a0: movabs $0x7ff815049fd5,%r10
  0x0000000116b5b0aa: callq  *%r10
  0x0000000116b5b0ad: pop    %r11
  0x0000000116b5b0af: pop    %rsp
  0x0000000116b5b0b0: pop    %r10
  0x0000000116b5b0b2: pop    %r9
  0x0000000116b5b0b4: pop    %r8
  0x0000000116b5b0b6: pop    %rcx
  0x0000000116b5b0b7: pop    %rdx
  0x0000000116b5b0b8: pop    %rsi
  0x0000000116b5b0b9: pop    %rdi
  0x0000000116b5b0ba: cmp    %rax,%r15
  0x0000000116b5b0bd: je     0x0000000116b5b13a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5b0c3: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b0c8: sub    $0x80,%rsp
  0x0000000116b5b0cf: mov    %rax,0x78(%rsp)
  0x0000000116b5b0d4: mov    %rcx,0x70(%rsp)
  0x0000000116b5b0d9: mov    %rdx,0x68(%rsp)
  0x0000000116b5b0de: mov    %rbx,0x60(%rsp)
  0x0000000116b5b0e3: mov    %rbp,0x50(%rsp)
  0x0000000116b5b0e8: mov    %rsi,0x48(%rsp)
  0x0000000116b5b0ed: mov    %rdi,0x40(%rsp)
  0x0000000116b5b0f2: mov    %r8,0x38(%rsp)
  0x0000000116b5b0f7: mov    %r9,0x30(%rsp)
  0x0000000116b5b0fc: mov    %r10,0x28(%rsp)
  0x0000000116b5b101: mov    %r11,0x20(%rsp)
  0x0000000116b5b106: mov    %r12,0x18(%rsp)
  0x0000000116b5b10b: mov    %r13,0x10(%rsp)
  0x0000000116b5b110: mov    %r14,0x8(%rsp)
  0x0000000116b5b115: mov    %r15,(%rsp)
  0x0000000116b5b119: movabs $0x10cc6405e,%rdi
  0x0000000116b5b123: movabs $0x116b5b0c3,%rsi
  0x0000000116b5b12d: mov    %rsp,%rdx
  0x0000000116b5b130: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b134: callq  0x000000010c7dd830
  0x0000000116b5b139: hlt    
  0x0000000116b5b13a: pop    %rax
  0x0000000116b5b13b: movabs $0x0,%r10
  0x0000000116b5b145: mov    %r10,0x280(%r15)
  0x0000000116b5b14c: movabs $0x0,%r10
  0x0000000116b5b156: mov    %r10,0x290(%r15)
  0x0000000116b5b15d: movabs $0x0,%r10
  0x0000000116b5b167: mov    %r10,0x288(%r15)
  0x0000000116b5b16e: cmpq   $0x0,0x8(%r15)
  0x0000000116b5b176: je     0x0000000116b5b181
  0x0000000116b5b17c: jmpq   0x0000000116b30420
  0x0000000116b5b181: mov    -0x38(%rbp),%r13
  0x0000000116b5b185: mov    -0x30(%rbp),%r14
  0x0000000116b5b189: retq   
  0x0000000116b5b18a: mov    -0x38(%rbp),%r13
  0x0000000116b5b18e: cmpb   $0x0,-0x9d3df93(%rip)        # 0x000000010ce1d202
  0x0000000116b5b195: je     0x0000000116b5b24a
  0x0000000116b5b19b: mov    -0x18(%rbp),%rsi
  0x0000000116b5b19f: mov    %r15,%rdi
  0x0000000116b5b1a2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5b1aa: je     0x0000000116b5b227
  0x0000000116b5b1b0: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b1b5: sub    $0x80,%rsp
  0x0000000116b5b1bc: mov    %rax,0x78(%rsp)
  0x0000000116b5b1c1: mov    %rcx,0x70(%rsp)
  0x0000000116b5b1c6: mov    %rdx,0x68(%rsp)
  0x0000000116b5b1cb: mov    %rbx,0x60(%rsp)
  0x0000000116b5b1d0: mov    %rbp,0x50(%rsp)
  0x0000000116b5b1d5: mov    %rsi,0x48(%rsp)
  0x0000000116b5b1da: mov    %rdi,0x40(%rsp)
  0x0000000116b5b1df: mov    %r8,0x38(%rsp)
  0x0000000116b5b1e4: mov    %r9,0x30(%rsp)
  0x0000000116b5b1e9: mov    %r10,0x28(%rsp)
  0x0000000116b5b1ee: mov    %r11,0x20(%rsp)
  0x0000000116b5b1f3: mov    %r12,0x18(%rsp)
  0x0000000116b5b1f8: mov    %r13,0x10(%rsp)
  0x0000000116b5b1fd: mov    %r14,0x8(%rsp)
  0x0000000116b5b202: mov    %r15,(%rsp)
  0x0000000116b5b206: movabs $0x10cc2363b,%rdi
  0x0000000116b5b210: movabs $0x116b5b1b0,%rsi
  0x0000000116b5b21a: mov    %rsp,%rdx
  0x0000000116b5b21d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b221: callq  0x000000010c7dd830
  0x0000000116b5b226: hlt    
  0x0000000116b5b227: test   $0xf,%esp
  0x0000000116b5b22d: je     0x0000000116b5b245
  0x0000000116b5b233: sub    $0x8,%rsp
  0x0000000116b5b237: callq  0x000000010c9c9850
  0x0000000116b5b23c: add    $0x8,%rsp
  0x0000000116b5b240: jmpq   0x0000000116b5b24a
  0x0000000116b5b245: callq  0x000000010c9c9850
  0x0000000116b5b24a: mov    (%rsp),%rax
  0x0000000116b5b24e: add    $0x10,%rsp
  0x0000000116b5b252: vmovsd (%rsp),%xmm0
  0x0000000116b5b257: add    $0x10,%rsp
  0x0000000116b5b25b: mov    0x18(%rbp),%r11
  0x0000000116b5b25f: callq  *%r11
  0x0000000116b5b262: mov    -0x8(%rbp),%r11
  0x0000000116b5b266: leaveq 
  0x0000000116b5b267: pop    %rdi
  0x0000000116b5b268: mov    %r11,%rsp
  0x0000000116b5b26b: jmpq   *%rdi
  0x0000000116b5b26d: nop
  0x0000000116b5b26e: nop
  0x0000000116b5b26f: nop
  0x0000000116b5b270: int3   
  0x0000000116b5b271: int3   
  0x0000000116b5b272: int3   
  0x0000000116b5b273: int3   
  0x0000000116b5b274: int3   
  0x0000000116b5b275: int3   
  0x0000000116b5b276: int3   
  0x0000000116b5b277: int3   
  0x0000000116b5b278: int3   
  0x0000000116b5b279: int3   
  0x0000000116b5b27a: int3   
  0x0000000116b5b27b: int3   
  0x0000000116b5b27c: int3   
  0x0000000116b5b27d: int3   
  0x0000000116b5b27e: int3   
  0x0000000116b5b27f: int3   

----------------------------------------------------------------------
method entry point (kind = native)  [0x0000000116b5b2c0, 0x0000000116b5c700]  5184 bytes

  0x0000000116b5b2c0: mov    0x10(%rbx),%rcx
  0x0000000116b5b2c4: movzwl 0x2c(%rcx),%ecx
  0x0000000116b5b2c8: pop    %rax
  0x0000000116b5b2c9: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b5b2ce: pushq  $0x0
  0x0000000116b5b2d3: pushq  $0x0
  0x0000000116b5b2d8: push   %rax
  0x0000000116b5b2d9: push   %rbp
  0x0000000116b5b2da: mov    %rsp,%rbp
  0x0000000116b5b2dd: push   %r13
  0x0000000116b5b2df: pushq  $0x0
  0x0000000116b5b2e4: mov    0x10(%rbx),%r13
  0x0000000116b5b2e8: lea    0x30(%r13),%r13
  0x0000000116b5b2ec: push   %rbx
  0x0000000116b5b2ed: pushq  $0x0
  0x0000000116b5b2f2: mov    0x10(%rbx),%rdx
  0x0000000116b5b2f6: mov    0x8(%rdx),%rdx
  0x0000000116b5b2fa: mov    0x18(%rdx),%rdx
  0x0000000116b5b2fe: push   %rdx
  0x0000000116b5b2ff: push   %r14
  0x0000000116b5b301: pushq  $0x0
  0x0000000116b5b306: pushq  $0x0
  0x0000000116b5b30b: mov    %rsp,(%rsp)
  0x0000000116b5b30f: mov    0x28(%rbx),%eax
  0x0000000116b5b312: test   $0x100,%eax
  0x0000000116b5b317: jne    0x0000000116b5b394
  0x0000000116b5b31d: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b322: sub    $0x80,%rsp
  0x0000000116b5b329: mov    %rax,0x78(%rsp)
  0x0000000116b5b32e: mov    %rcx,0x70(%rsp)
  0x0000000116b5b333: mov    %rdx,0x68(%rsp)
  0x0000000116b5b338: mov    %rbx,0x60(%rsp)
  0x0000000116b5b33d: mov    %rbp,0x50(%rsp)
  0x0000000116b5b342: mov    %rsi,0x48(%rsp)
  0x0000000116b5b347: mov    %rdi,0x40(%rsp)
  0x0000000116b5b34c: mov    %r8,0x38(%rsp)
  0x0000000116b5b351: mov    %r9,0x30(%rsp)
  0x0000000116b5b356: mov    %r10,0x28(%rsp)
  0x0000000116b5b35b: mov    %r11,0x20(%rsp)
  0x0000000116b5b360: mov    %r12,0x18(%rsp)
  0x0000000116b5b365: mov    %r13,0x10(%rsp)
  0x0000000116b5b36a: mov    %r14,0x8(%rsp)
  0x0000000116b5b36f: mov    %r15,(%rsp)
  0x0000000116b5b373: movabs $0x10ccafb09,%rdi
  0x0000000116b5b37d: movabs $0x116b5b31d,%rsi
  0x0000000116b5b387: mov    %rsp,%rdx
  0x0000000116b5b38a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b38e: callq  0x000000010c7dd830
  0x0000000116b5b393: hlt    
  0x0000000116b5b394: test   $0x400,%eax
  0x0000000116b5b399: je     0x0000000116b5b416
  0x0000000116b5b39f: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b3a4: sub    $0x80,%rsp
  0x0000000116b5b3ab: mov    %rax,0x78(%rsp)
  0x0000000116b5b3b0: mov    %rcx,0x70(%rsp)
  0x0000000116b5b3b5: mov    %rdx,0x68(%rsp)
  0x0000000116b5b3ba: mov    %rbx,0x60(%rsp)
  0x0000000116b5b3bf: mov    %rbp,0x50(%rsp)
  0x0000000116b5b3c4: mov    %rsi,0x48(%rsp)
  0x0000000116b5b3c9: mov    %rdi,0x40(%rsp)
  0x0000000116b5b3ce: mov    %r8,0x38(%rsp)
  0x0000000116b5b3d3: mov    %r9,0x30(%rsp)
  0x0000000116b5b3d8: mov    %r10,0x28(%rsp)
  0x0000000116b5b3dd: mov    %r11,0x20(%rsp)
  0x0000000116b5b3e2: mov    %r12,0x18(%rsp)
  0x0000000116b5b3e7: mov    %r13,0x10(%rsp)
  0x0000000116b5b3ec: mov    %r14,0x8(%rsp)
  0x0000000116b5b3f1: mov    %r15,(%rsp)
  0x0000000116b5b3f5: movabs $0x10ccafb36,%rdi
  0x0000000116b5b3ff: movabs $0x116b5b39f,%rsi
  0x0000000116b5b409: mov    %rsp,%rdx
  0x0000000116b5b40c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b410: callq  0x000000010c7dd830
  0x0000000116b5b415: hlt    
  0x0000000116b5b416: movb   $0x1,0x33d(%r15)
  0x0000000116b5b41e: mov    %eax,-0x16000(%rsp)
  0x0000000116b5b425: movb   $0x0,0x33d(%r15)
  0x0000000116b5b42d: mov    0x28(%rbx),%eax
  0x0000000116b5b430: test   $0x20,%eax
  0x0000000116b5b435: je     0x0000000116b5b4b2
  0x0000000116b5b43b: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b440: sub    $0x80,%rsp
  0x0000000116b5b447: mov    %rax,0x78(%rsp)
  0x0000000116b5b44c: mov    %rcx,0x70(%rsp)
  0x0000000116b5b451: mov    %rdx,0x68(%rsp)
  0x0000000116b5b456: mov    %rbx,0x60(%rsp)
  0x0000000116b5b45b: mov    %rbp,0x50(%rsp)
  0x0000000116b5b460: mov    %rsi,0x48(%rsp)
  0x0000000116b5b465: mov    %rdi,0x40(%rsp)
  0x0000000116b5b46a: mov    %r8,0x38(%rsp)
  0x0000000116b5b46f: mov    %r9,0x30(%rsp)
  0x0000000116b5b474: mov    %r10,0x28(%rsp)
  0x0000000116b5b479: mov    %r11,0x20(%rsp)
  0x0000000116b5b47e: mov    %r12,0x18(%rsp)
  0x0000000116b5b483: mov    %r13,0x10(%rsp)
  0x0000000116b5b488: mov    %r14,0x8(%rsp)
  0x0000000116b5b48d: mov    %r15,(%rsp)
  0x0000000116b5b491: movabs $0x10ccafb66,%rdi
  0x0000000116b5b49b: movabs $0x116b5b43b,%rsi
  0x0000000116b5b4a5: mov    %rsp,%rdx
  0x0000000116b5b4a8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b4ac: callq  0x000000010c7dd830
  0x0000000116b5b4b1: hlt    
  0x0000000116b5b4b2: mov    -0x40(%rbp),%rax
  0x0000000116b5b4b6: cmp    %rsp,%rax
  0x0000000116b5b4b9: je     0x0000000116b5b536
  0x0000000116b5b4bf: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b4c4: sub    $0x80,%rsp
  0x0000000116b5b4cb: mov    %rax,0x78(%rsp)
  0x0000000116b5b4d0: mov    %rcx,0x70(%rsp)
  0x0000000116b5b4d5: mov    %rdx,0x68(%rsp)
  0x0000000116b5b4da: mov    %rbx,0x60(%rsp)
  0x0000000116b5b4df: mov    %rbp,0x50(%rsp)
  0x0000000116b5b4e4: mov    %rsi,0x48(%rsp)
  0x0000000116b5b4e9: mov    %rdi,0x40(%rsp)
  0x0000000116b5b4ee: mov    %r8,0x38(%rsp)
  0x0000000116b5b4f3: mov    %r9,0x30(%rsp)
  0x0000000116b5b4f8: mov    %r10,0x28(%rsp)
  0x0000000116b5b4fd: mov    %r11,0x20(%rsp)
  0x0000000116b5b502: mov    %r12,0x18(%rsp)
  0x0000000116b5b507: mov    %r13,0x10(%rsp)
  0x0000000116b5b50c: mov    %r14,0x8(%rsp)
  0x0000000116b5b511: mov    %r15,(%rsp)
  0x0000000116b5b515: movabs $0x10ccafb83,%rdi
  0x0000000116b5b51f: movabs $0x116b5b4bf,%rsi
  0x0000000116b5b529: mov    %rsp,%rdx
  0x0000000116b5b52c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b530: callq  0x000000010c7dd830
  0x0000000116b5b535: hlt    
  0x0000000116b5b536: cmpb   $0x0,-0x9d3e33b(%rip)        # 0x000000010ce1d202
  0x0000000116b5b53d: je     0x0000000116b5b5f2
  0x0000000116b5b543: mov    -0x18(%rbp),%rsi
  0x0000000116b5b547: mov    %r15,%rdi
  0x0000000116b5b54a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5b552: je     0x0000000116b5b5cf
  0x0000000116b5b558: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b55d: sub    $0x80,%rsp
  0x0000000116b5b564: mov    %rax,0x78(%rsp)
  0x0000000116b5b569: mov    %rcx,0x70(%rsp)
  0x0000000116b5b56e: mov    %rdx,0x68(%rsp)
  0x0000000116b5b573: mov    %rbx,0x60(%rsp)
  0x0000000116b5b578: mov    %rbp,0x50(%rsp)
  0x0000000116b5b57d: mov    %rsi,0x48(%rsp)
  0x0000000116b5b582: mov    %rdi,0x40(%rsp)
  0x0000000116b5b587: mov    %r8,0x38(%rsp)
  0x0000000116b5b58c: mov    %r9,0x30(%rsp)
  0x0000000116b5b591: mov    %r10,0x28(%rsp)
  0x0000000116b5b596: mov    %r11,0x20(%rsp)
  0x0000000116b5b59b: mov    %r12,0x18(%rsp)
  0x0000000116b5b5a0: mov    %r13,0x10(%rsp)
  0x0000000116b5b5a5: mov    %r14,0x8(%rsp)
  0x0000000116b5b5aa: mov    %r15,(%rsp)
  0x0000000116b5b5ae: movabs $0x10cc2363b,%rdi
  0x0000000116b5b5b8: movabs $0x116b5b558,%rsi
  0x0000000116b5b5c2: mov    %rsp,%rdx
  0x0000000116b5b5c5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b5c9: callq  0x000000010c7dd830
  0x0000000116b5b5ce: hlt    
  0x0000000116b5b5cf: test   $0xf,%esp
  0x0000000116b5b5d5: je     0x0000000116b5b5ed
  0x0000000116b5b5db: sub    $0x8,%rsp
  0x0000000116b5b5df: callq  0x000000010c9c9630
  0x0000000116b5b5e4: add    $0x8,%rsp
  0x0000000116b5b5e8: jmpq   0x0000000116b5b5f2
  0x0000000116b5b5ed: callq  0x000000010c9c9630
  0x0000000116b5b5f2: mov    -0x18(%rbp),%rbx
  0x0000000116b5b5f6: mov    0x10(%rbx),%r11
  0x0000000116b5b5fa: movzwl 0x2c(%r11),%r11d
  0x0000000116b5b5ff: shl    $0x3,%r11d
  0x0000000116b5b603: sub    %r11,%rsp
  0x0000000116b5b606: sub    $0x0,%rsp
  0x0000000116b5b60a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b60e: mov    0x70(%rbx),%r11
  0x0000000116b5b612: test   %r11,%r11
  0x0000000116b5b615: jne    0x0000000116b5b87f
  0x0000000116b5b61b: callq  0x0000000116b5b625
  0x0000000116b5b620: jmpq   0x0000000116b5b877
  0x0000000116b5b625: mov    %rbx,%rsi
  0x0000000116b5b628: lea    0x8(%rsp),%rax
  0x0000000116b5b62d: mov    %r13,-0x38(%rbp)
  0x0000000116b5b631: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5b639: je     0x0000000116b5b6b6
  0x0000000116b5b63f: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b644: sub    $0x80,%rsp
  0x0000000116b5b64b: mov    %rax,0x78(%rsp)
  0x0000000116b5b650: mov    %rcx,0x70(%rsp)
  0x0000000116b5b655: mov    %rdx,0x68(%rsp)
  0x0000000116b5b65a: mov    %rbx,0x60(%rsp)
  0x0000000116b5b65f: mov    %rbp,0x50(%rsp)
  0x0000000116b5b664: mov    %rsi,0x48(%rsp)
  0x0000000116b5b669: mov    %rdi,0x40(%rsp)
  0x0000000116b5b66e: mov    %r8,0x38(%rsp)
  0x0000000116b5b673: mov    %r9,0x30(%rsp)
  0x0000000116b5b678: mov    %r10,0x28(%rsp)
  0x0000000116b5b67d: mov    %r11,0x20(%rsp)
  0x0000000116b5b682: mov    %r12,0x18(%rsp)
  0x0000000116b5b687: mov    %r13,0x10(%rsp)
  0x0000000116b5b68c: mov    %r14,0x8(%rsp)
  0x0000000116b5b691: mov    %r15,(%rsp)
  0x0000000116b5b695: movabs $0x10cc2363b,%rdi
  0x0000000116b5b69f: movabs $0x116b5b63f,%rsi
  0x0000000116b5b6a9: mov    %rsp,%rdx
  0x0000000116b5b6ac: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b6b0: callq  0x000000010c7dd830
  0x0000000116b5b6b5: hlt    
  0x0000000116b5b6b6: push   %r10
  0x0000000116b5b6b8: cmp    -0x9d14e0f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5b6bf: je     0x0000000116b5b73c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5b6c5: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b6ca: sub    $0x80,%rsp
  0x0000000116b5b6d1: mov    %rax,0x78(%rsp)
  0x0000000116b5b6d6: mov    %rcx,0x70(%rsp)
  0x0000000116b5b6db: mov    %rdx,0x68(%rsp)
  0x0000000116b5b6e0: mov    %rbx,0x60(%rsp)
  0x0000000116b5b6e5: mov    %rbp,0x50(%rsp)
  0x0000000116b5b6ea: mov    %rsi,0x48(%rsp)
  0x0000000116b5b6ef: mov    %rdi,0x40(%rsp)
  0x0000000116b5b6f4: mov    %r8,0x38(%rsp)
  0x0000000116b5b6f9: mov    %r9,0x30(%rsp)
  0x0000000116b5b6fe: mov    %r10,0x28(%rsp)
  0x0000000116b5b703: mov    %r11,0x20(%rsp)
  0x0000000116b5b708: mov    %r12,0x18(%rsp)
  0x0000000116b5b70d: mov    %r13,0x10(%rsp)
  0x0000000116b5b712: mov    %r14,0x8(%rsp)
  0x0000000116b5b717: mov    %r15,(%rsp)
  0x0000000116b5b71b: movabs $0x10cc63f17,%rdi
  0x0000000116b5b725: movabs $0x116b5b6c5,%rsi
  0x0000000116b5b72f: mov    %rsp,%rdx
  0x0000000116b5b732: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b736: callq  0x000000010c7dd830
  0x0000000116b5b73b: hlt    
  0x0000000116b5b73c: pop    %r10
  0x0000000116b5b73e: mov    %r15,%rdi
  0x0000000116b5b741: mov    %rbp,0x290(%r15)
  0x0000000116b5b748: mov    %rax,0x280(%r15)
  0x0000000116b5b74f: test   $0xf,%esp
  0x0000000116b5b755: je     0x0000000116b5b76d
  0x0000000116b5b75b: sub    $0x8,%rsp
  0x0000000116b5b75f: callq  0x000000010c58e1c0
  0x0000000116b5b764: add    $0x8,%rsp
  0x0000000116b5b768: jmpq   0x0000000116b5b772
  0x0000000116b5b76d: callq  0x000000010c58e1c0
  0x0000000116b5b772: push   %rax
  0x0000000116b5b773: push   %rdi
  0x0000000116b5b774: push   %rsi
  0x0000000116b5b775: push   %rdx
  0x0000000116b5b776: push   %rcx
  0x0000000116b5b777: push   %r8
  0x0000000116b5b779: push   %r9
  0x0000000116b5b77b: push   %r10
  0x0000000116b5b77d: mov    %rsp,%r10
  0x0000000116b5b780: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b784: push   %r10
  0x0000000116b5b786: push   %r11
  0x0000000116b5b788: mov    $0x109,%edi
  0x0000000116b5b78d: movabs $0x7ff815049fd5,%r10
  0x0000000116b5b797: callq  *%r10
  0x0000000116b5b79a: pop    %r11
  0x0000000116b5b79c: pop    %rsp
  0x0000000116b5b79d: pop    %r10
  0x0000000116b5b79f: pop    %r9
  0x0000000116b5b7a1: pop    %r8
  0x0000000116b5b7a3: pop    %rcx
  0x0000000116b5b7a4: pop    %rdx
  0x0000000116b5b7a5: pop    %rsi
  0x0000000116b5b7a6: pop    %rdi
  0x0000000116b5b7a7: cmp    %rax,%r15
  0x0000000116b5b7aa: je     0x0000000116b5b827
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5b7b0: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b7b5: sub    $0x80,%rsp
  0x0000000116b5b7bc: mov    %rax,0x78(%rsp)
  0x0000000116b5b7c1: mov    %rcx,0x70(%rsp)
  0x0000000116b5b7c6: mov    %rdx,0x68(%rsp)
  0x0000000116b5b7cb: mov    %rbx,0x60(%rsp)
  0x0000000116b5b7d0: mov    %rbp,0x50(%rsp)
  0x0000000116b5b7d5: mov    %rsi,0x48(%rsp)
  0x0000000116b5b7da: mov    %rdi,0x40(%rsp)
  0x0000000116b5b7df: mov    %r8,0x38(%rsp)
  0x0000000116b5b7e4: mov    %r9,0x30(%rsp)
  0x0000000116b5b7e9: mov    %r10,0x28(%rsp)
  0x0000000116b5b7ee: mov    %r11,0x20(%rsp)
  0x0000000116b5b7f3: mov    %r12,0x18(%rsp)
  0x0000000116b5b7f8: mov    %r13,0x10(%rsp)
  0x0000000116b5b7fd: mov    %r14,0x8(%rsp)
  0x0000000116b5b802: mov    %r15,(%rsp)
  0x0000000116b5b806: movabs $0x10cc6405e,%rdi
  0x0000000116b5b810: movabs $0x116b5b7b0,%rsi
  0x0000000116b5b81a: mov    %rsp,%rdx
  0x0000000116b5b81d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b821: callq  0x000000010c7dd830
  0x0000000116b5b826: hlt    
  0x0000000116b5b827: pop    %rax
  0x0000000116b5b828: movabs $0x0,%r10
  0x0000000116b5b832: mov    %r10,0x280(%r15)
  0x0000000116b5b839: movabs $0x0,%r10
  0x0000000116b5b843: mov    %r10,0x290(%r15)
  0x0000000116b5b84a: movabs $0x0,%r10
  0x0000000116b5b854: mov    %r10,0x288(%r15)
  0x0000000116b5b85b: cmpq   $0x0,0x8(%r15)
  0x0000000116b5b863: je     0x0000000116b5b86e
  0x0000000116b5b869: jmpq   0x0000000116b30420
  0x0000000116b5b86e: mov    -0x38(%rbp),%r13
  0x0000000116b5b872: mov    -0x30(%rbp),%r14
  0x0000000116b5b876: retq   
  0x0000000116b5b877: mov    -0x18(%rbp),%rbx
  0x0000000116b5b87b: mov    0x70(%rbx),%r11
  0x0000000116b5b87f: callq  *%r11
  0x0000000116b5b882: mov    -0x18(%rbp),%rbx
  0x0000000116b5b886: mov    %rax,0x18(%rbp)
  0x0000000116b5b88a: mov    0x28(%rbx),%r11d
  0x0000000116b5b88e: test   $0x8,%r11d
  0x0000000116b5b895: je     0x0000000116b5b8b3
  0x0000000116b5b89b: mov    0x10(%rbx),%r11
  0x0000000116b5b89f: mov    0x8(%r11),%r11
  0x0000000116b5b8a3: mov    0x20(%r11),%r11
  0x0000000116b5b8a7: mov    0x70(%r11),%r11
  0x0000000116b5b8ab: mov    %r11,0x10(%rbp)
  0x0000000116b5b8af: lea    0x10(%rbp),%rsi
  0x0000000116b5b8b3: mov    0x68(%rbx),%rax
  0x0000000116b5b8b7: movabs $0x10c9c8cd0,%r11
  0x0000000116b5b8c1: cmp    %r11,%rax
  0x0000000116b5b8c4: jne    0x0000000116b5bb2e
  0x0000000116b5b8ca: callq  0x0000000116b5b8d4
  0x0000000116b5b8cf: jmpq   0x0000000116b5bb26
  0x0000000116b5b8d4: mov    %rbx,%rsi
  0x0000000116b5b8d7: lea    0x8(%rsp),%rax
  0x0000000116b5b8dc: mov    %r13,-0x38(%rbp)
  0x0000000116b5b8e0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5b8e8: je     0x0000000116b5b965
  0x0000000116b5b8ee: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b8f3: sub    $0x80,%rsp
  0x0000000116b5b8fa: mov    %rax,0x78(%rsp)
  0x0000000116b5b8ff: mov    %rcx,0x70(%rsp)
  0x0000000116b5b904: mov    %rdx,0x68(%rsp)
  0x0000000116b5b909: mov    %rbx,0x60(%rsp)
  0x0000000116b5b90e: mov    %rbp,0x50(%rsp)
  0x0000000116b5b913: mov    %rsi,0x48(%rsp)
  0x0000000116b5b918: mov    %rdi,0x40(%rsp)
  0x0000000116b5b91d: mov    %r8,0x38(%rsp)
  0x0000000116b5b922: mov    %r9,0x30(%rsp)
  0x0000000116b5b927: mov    %r10,0x28(%rsp)
  0x0000000116b5b92c: mov    %r11,0x20(%rsp)
  0x0000000116b5b931: mov    %r12,0x18(%rsp)
  0x0000000116b5b936: mov    %r13,0x10(%rsp)
  0x0000000116b5b93b: mov    %r14,0x8(%rsp)
  0x0000000116b5b940: mov    %r15,(%rsp)
  0x0000000116b5b944: movabs $0x10cc2363b,%rdi
  0x0000000116b5b94e: movabs $0x116b5b8ee,%rsi
  0x0000000116b5b958: mov    %rsp,%rdx
  0x0000000116b5b95b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b95f: callq  0x000000010c7dd830
  0x0000000116b5b964: hlt    
  0x0000000116b5b965: push   %r10
  0x0000000116b5b967: cmp    -0x9d150be(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5b96e: je     0x0000000116b5b9eb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5b974: mov    %rsp,-0x28(%rsp)
  0x0000000116b5b979: sub    $0x80,%rsp
  0x0000000116b5b980: mov    %rax,0x78(%rsp)
  0x0000000116b5b985: mov    %rcx,0x70(%rsp)
  0x0000000116b5b98a: mov    %rdx,0x68(%rsp)
  0x0000000116b5b98f: mov    %rbx,0x60(%rsp)
  0x0000000116b5b994: mov    %rbp,0x50(%rsp)
  0x0000000116b5b999: mov    %rsi,0x48(%rsp)
  0x0000000116b5b99e: mov    %rdi,0x40(%rsp)
  0x0000000116b5b9a3: mov    %r8,0x38(%rsp)
  0x0000000116b5b9a8: mov    %r9,0x30(%rsp)
  0x0000000116b5b9ad: mov    %r10,0x28(%rsp)
  0x0000000116b5b9b2: mov    %r11,0x20(%rsp)
  0x0000000116b5b9b7: mov    %r12,0x18(%rsp)
  0x0000000116b5b9bc: mov    %r13,0x10(%rsp)
  0x0000000116b5b9c1: mov    %r14,0x8(%rsp)
  0x0000000116b5b9c6: mov    %r15,(%rsp)
  0x0000000116b5b9ca: movabs $0x10cc63f17,%rdi
  0x0000000116b5b9d4: movabs $0x116b5b974,%rsi
  0x0000000116b5b9de: mov    %rsp,%rdx
  0x0000000116b5b9e1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5b9e5: callq  0x000000010c7dd830
  0x0000000116b5b9ea: hlt    
  0x0000000116b5b9eb: pop    %r10
  0x0000000116b5b9ed: mov    %r15,%rdi
  0x0000000116b5b9f0: mov    %rbp,0x290(%r15)
  0x0000000116b5b9f7: mov    %rax,0x280(%r15)
  0x0000000116b5b9fe: test   $0xf,%esp
  0x0000000116b5ba04: je     0x0000000116b5ba1c
  0x0000000116b5ba0a: sub    $0x8,%rsp
  0x0000000116b5ba0e: callq  0x000000010c58e1c0
  0x0000000116b5ba13: add    $0x8,%rsp
  0x0000000116b5ba17: jmpq   0x0000000116b5ba21
  0x0000000116b5ba1c: callq  0x000000010c58e1c0
  0x0000000116b5ba21: push   %rax
  0x0000000116b5ba22: push   %rdi
  0x0000000116b5ba23: push   %rsi
  0x0000000116b5ba24: push   %rdx
  0x0000000116b5ba25: push   %rcx
  0x0000000116b5ba26: push   %r8
  0x0000000116b5ba28: push   %r9
  0x0000000116b5ba2a: push   %r10
  0x0000000116b5ba2c: mov    %rsp,%r10
  0x0000000116b5ba2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ba33: push   %r10
  0x0000000116b5ba35: push   %r11
  0x0000000116b5ba37: mov    $0x109,%edi
  0x0000000116b5ba3c: movabs $0x7ff815049fd5,%r10
  0x0000000116b5ba46: callq  *%r10
  0x0000000116b5ba49: pop    %r11
  0x0000000116b5ba4b: pop    %rsp
  0x0000000116b5ba4c: pop    %r10
  0x0000000116b5ba4e: pop    %r9
  0x0000000116b5ba50: pop    %r8
  0x0000000116b5ba52: pop    %rcx
  0x0000000116b5ba53: pop    %rdx
  0x0000000116b5ba54: pop    %rsi
  0x0000000116b5ba55: pop    %rdi
  0x0000000116b5ba56: cmp    %rax,%r15
  0x0000000116b5ba59: je     0x0000000116b5bad6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5ba5f: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ba64: sub    $0x80,%rsp
  0x0000000116b5ba6b: mov    %rax,0x78(%rsp)
  0x0000000116b5ba70: mov    %rcx,0x70(%rsp)
  0x0000000116b5ba75: mov    %rdx,0x68(%rsp)
  0x0000000116b5ba7a: mov    %rbx,0x60(%rsp)
  0x0000000116b5ba7f: mov    %rbp,0x50(%rsp)
  0x0000000116b5ba84: mov    %rsi,0x48(%rsp)
  0x0000000116b5ba89: mov    %rdi,0x40(%rsp)
  0x0000000116b5ba8e: mov    %r8,0x38(%rsp)
  0x0000000116b5ba93: mov    %r9,0x30(%rsp)
  0x0000000116b5ba98: mov    %r10,0x28(%rsp)
  0x0000000116b5ba9d: mov    %r11,0x20(%rsp)
  0x0000000116b5baa2: mov    %r12,0x18(%rsp)
  0x0000000116b5baa7: mov    %r13,0x10(%rsp)
  0x0000000116b5baac: mov    %r14,0x8(%rsp)
  0x0000000116b5bab1: mov    %r15,(%rsp)
  0x0000000116b5bab5: movabs $0x10cc6405e,%rdi
  0x0000000116b5babf: movabs $0x116b5ba5f,%rsi
  0x0000000116b5bac9: mov    %rsp,%rdx
  0x0000000116b5bacc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5bad0: callq  0x000000010c7dd830
  0x0000000116b5bad5: hlt    
  0x0000000116b5bad6: pop    %rax
  0x0000000116b5bad7: movabs $0x0,%r10
  0x0000000116b5bae1: mov    %r10,0x280(%r15)
  0x0000000116b5bae8: movabs $0x0,%r10
  0x0000000116b5baf2: mov    %r10,0x290(%r15)
  0x0000000116b5baf9: movabs $0x0,%r10
  0x0000000116b5bb03: mov    %r10,0x288(%r15)
  0x0000000116b5bb0a: cmpq   $0x0,0x8(%r15)
  0x0000000116b5bb12: je     0x0000000116b5bb1d
  0x0000000116b5bb18: jmpq   0x0000000116b30420
  0x0000000116b5bb1d: mov    -0x38(%rbp),%r13
  0x0000000116b5bb21: mov    -0x30(%rbp),%r14
  0x0000000116b5bb25: retq   
  0x0000000116b5bb26: mov    -0x18(%rbp),%rbx
  0x0000000116b5bb2a: mov    0x68(%rbx),%rax
  0x0000000116b5bb2e: lea    0x2a0(%r15),%rdi
  0x0000000116b5bb35: mov    %rbp,0x290(%r15)
  0x0000000116b5bb3c: movabs $0x116b5bb35,%r10
  0x0000000116b5bb46: mov    %r10,0x288(%r15)
  0x0000000116b5bb4d: mov    %rsp,0x280(%r15)
  0x0000000116b5bb54: mov    0x318(%r15),%r11d
  0x0000000116b5bb5b: cmp    $0x8,%r11d
  0x0000000116b5bb5f: je     0x0000000116b5bbdc
  0x0000000116b5bb65: mov    %rsp,-0x28(%rsp)
  0x0000000116b5bb6a: sub    $0x80,%rsp
  0x0000000116b5bb71: mov    %rax,0x78(%rsp)
  0x0000000116b5bb76: mov    %rcx,0x70(%rsp)
  0x0000000116b5bb7b: mov    %rdx,0x68(%rsp)
  0x0000000116b5bb80: mov    %rbx,0x60(%rsp)
  0x0000000116b5bb85: mov    %rbp,0x50(%rsp)
  0x0000000116b5bb8a: mov    %rsi,0x48(%rsp)
  0x0000000116b5bb8f: mov    %rdi,0x40(%rsp)
  0x0000000116b5bb94: mov    %r8,0x38(%rsp)
  0x0000000116b5bb99: mov    %r9,0x30(%rsp)
  0x0000000116b5bb9e: mov    %r10,0x28(%rsp)
  0x0000000116b5bba3: mov    %r11,0x20(%rsp)
  0x0000000116b5bba8: mov    %r12,0x18(%rsp)
  0x0000000116b5bbad: mov    %r13,0x10(%rsp)
  0x0000000116b5bbb2: mov    %r14,0x8(%rsp)
  0x0000000116b5bbb7: mov    %r15,(%rsp)
  0x0000000116b5bbbb: movabs $0x10ccafca4,%rdi
  0x0000000116b5bbc5: movabs $0x116b5bb65,%rsi
  0x0000000116b5bbcf: mov    %rsp,%rdx
  0x0000000116b5bbd2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5bbd6: callq  0x000000010c7dd830
  0x0000000116b5bbdb: hlt    
  0x0000000116b5bbdc: movl   $0x4,0x318(%r15)
  0x0000000116b5bbe7: callq  *%rax
  0x0000000116b5bbe9: vzeroupper 
  0x0000000116b5bbec: sub    $0x10,%rsp
  0x0000000116b5bbf0: vmovsd %xmm0,(%rsp)
  0x0000000116b5bbf5: sub    $0x10,%rsp
  0x0000000116b5bbf9: mov    %rax,(%rsp)
  0x0000000116b5bbfd: movl   $0x5,0x318(%r15)
  0x0000000116b5bc08: lock addl $0x0,(%rsp)
  0x0000000116b5bc0d: cmpl   $0x0,-0x9d355d7(%rip)        # 0x000000010ce26640
  0x0000000116b5bc17: jne    0x0000000116b5bc2b
  0x0000000116b5bc1d: cmpl   $0x0,0x30(%r15)
  0x0000000116b5bc25: je     0x0000000116b5bc44
  0x0000000116b5bc2b: mov    %r15,%rdi
  0x0000000116b5bc2e: mov    %rsp,%r12
  0x0000000116b5bc31: sub    $0x0,%rsp
  0x0000000116b5bc35: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5bc39: callq  0x000000010ca7ea20
  0x0000000116b5bc3e: mov    %r12,%rsp
  0x0000000116b5bc41: xor    %r12,%r12
  0x0000000116b5bc44: movl   $0x8,0x318(%r15)
  0x0000000116b5bc4f: movabs $0x0,%r10
  0x0000000116b5bc59: mov    %r10,0x280(%r15)
  0x0000000116b5bc60: movabs $0x0,%r10
  0x0000000116b5bc6a: mov    %r10,0x290(%r15)
  0x0000000116b5bc71: movabs $0x0,%r10
  0x0000000116b5bc7b: mov    %r10,0x288(%r15)
  0x0000000116b5bc82: mov    0x38(%r15),%r11
  0x0000000116b5bc86: movl   $0x0,0x108(%r11)
  0x0000000116b5bc91: movabs $0x116b4ef3b,%r11
  0x0000000116b5bc9b: cmp    0x18(%rbp),%r11
  0x0000000116b5bc9f: jne    0x0000000116b5bcda
  0x0000000116b5bca5: mov    (%rsp),%rax
  0x0000000116b5bca9: add    $0x10,%rsp
  0x0000000116b5bcad: test   %rax,%rax
  0x0000000116b5bcb0: je     0x0000000116b5bcce
  0x0000000116b5bcb6: test   $0x1,%rax
  0x0000000116b5bcbc: je     0x0000000116b5bccb
  0x0000000116b5bcc2: mov    -0x1(%rax),%rax
  0x0000000116b5bcc6: jmpq   0x0000000116b5bcce
  0x0000000116b5bccb: mov    (%rax),%rax
  0x0000000116b5bcce: mov    %rax,0x10(%rbp)
  0x0000000116b5bcd2: sub    $0x10,%rsp
  0x0000000116b5bcd6: mov    %rax,(%rsp)
  0x0000000116b5bcda: cmpl   $0x1,0x344(%r15)
  0x0000000116b5bce5: jne    0x0000000116b5bda8
  0x0000000116b5bceb: mov    %rsp,-0x28(%rsp)
  0x0000000116b5bcf0: sub    $0x80,%rsp
  0x0000000116b5bcf7: mov    %rax,0x78(%rsp)
  0x0000000116b5bcfc: mov    %rcx,0x70(%rsp)
  0x0000000116b5bd01: mov    %rdx,0x68(%rsp)
  0x0000000116b5bd06: mov    %rbx,0x60(%rsp)
  0x0000000116b5bd0b: mov    %rbp,0x50(%rsp)
  0x0000000116b5bd10: mov    %rsi,0x48(%rsp)
  0x0000000116b5bd15: mov    %rdi,0x40(%rsp)
  0x0000000116b5bd1a: mov    %r8,0x38(%rsp)
  0x0000000116b5bd1f: mov    %r9,0x30(%rsp)
  0x0000000116b5bd24: mov    %r10,0x28(%rsp)
  0x0000000116b5bd29: mov    %r11,0x20(%rsp)
  0x0000000116b5bd2e: mov    %r12,0x18(%rsp)
  0x0000000116b5bd33: mov    %r13,0x10(%rsp)
  0x0000000116b5bd38: mov    %r14,0x8(%rsp)
  0x0000000116b5bd3d: mov    %r15,(%rsp)
  0x0000000116b5bd41: mov    %rsp,%r12
  0x0000000116b5bd44: sub    $0x0,%rsp
  0x0000000116b5bd48: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5bd4c: callq  0x000000010c9ccc30
  0x0000000116b5bd51: mov    %r12,%rsp
  0x0000000116b5bd54: mov    (%rsp),%r15
  0x0000000116b5bd58: mov    0x8(%rsp),%r14
  0x0000000116b5bd5d: mov    0x10(%rsp),%r13
  0x0000000116b5bd62: mov    0x18(%rsp),%r12
  0x0000000116b5bd67: mov    0x20(%rsp),%r11
  0x0000000116b5bd6c: mov    0x28(%rsp),%r10
  0x0000000116b5bd71: mov    0x30(%rsp),%r9
  0x0000000116b5bd76: mov    0x38(%rsp),%r8
  0x0000000116b5bd7b: mov    0x40(%rsp),%rdi
  0x0000000116b5bd80: mov    0x48(%rsp),%rsi
  0x0000000116b5bd85: mov    0x50(%rsp),%rbp
  0x0000000116b5bd8a: mov    0x60(%rsp),%rbx
  0x0000000116b5bd8f: mov    0x68(%rsp),%rdx
  0x0000000116b5bd94: mov    0x70(%rsp),%rcx
  0x0000000116b5bd99: mov    0x78(%rsp),%rax
  0x0000000116b5bd9e: add    $0x80,%rsp
  0x0000000116b5bda5: xor    %r12,%r12
  0x0000000116b5bda8: mov    -0x18(%rbp),%rbx
  0x0000000116b5bdac: mov    0x10(%rbx),%r13
  0x0000000116b5bdb0: lea    0x30(%r13),%r13
  0x0000000116b5bdb4: cmpq   $0x0,0x8(%r15)
  0x0000000116b5bdbc: je     0x0000000116b5c092
  0x0000000116b5bdc2: callq  0x0000000116b5bdcc
  0x0000000116b5bdc7: jmpq   0x0000000116b5c01b
  0x0000000116b5bdcc: lea    0x8(%rsp),%rax
  0x0000000116b5bdd1: mov    %r13,-0x38(%rbp)
  0x0000000116b5bdd5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5bddd: je     0x0000000116b5be5a
  0x0000000116b5bde3: mov    %rsp,-0x28(%rsp)
  0x0000000116b5bde8: sub    $0x80,%rsp
  0x0000000116b5bdef: mov    %rax,0x78(%rsp)
  0x0000000116b5bdf4: mov    %rcx,0x70(%rsp)
  0x0000000116b5bdf9: mov    %rdx,0x68(%rsp)
  0x0000000116b5bdfe: mov    %rbx,0x60(%rsp)
  0x0000000116b5be03: mov    %rbp,0x50(%rsp)
  0x0000000116b5be08: mov    %rsi,0x48(%rsp)
  0x0000000116b5be0d: mov    %rdi,0x40(%rsp)
  0x0000000116b5be12: mov    %r8,0x38(%rsp)
  0x0000000116b5be17: mov    %r9,0x30(%rsp)
  0x0000000116b5be1c: mov    %r10,0x28(%rsp)
  0x0000000116b5be21: mov    %r11,0x20(%rsp)
  0x0000000116b5be26: mov    %r12,0x18(%rsp)
  0x0000000116b5be2b: mov    %r13,0x10(%rsp)
  0x0000000116b5be30: mov    %r14,0x8(%rsp)
  0x0000000116b5be35: mov    %r15,(%rsp)
  0x0000000116b5be39: movabs $0x10cc2363b,%rdi
  0x0000000116b5be43: movabs $0x116b5bde3,%rsi
  0x0000000116b5be4d: mov    %rsp,%rdx
  0x0000000116b5be50: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5be54: callq  0x000000010c7dd830
  0x0000000116b5be59: hlt    
  0x0000000116b5be5a: push   %r10
  0x0000000116b5be5c: cmp    -0x9d155b3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5be63: je     0x0000000116b5bee0
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5be69: mov    %rsp,-0x28(%rsp)
  0x0000000116b5be6e: sub    $0x80,%rsp
  0x0000000116b5be75: mov    %rax,0x78(%rsp)
  0x0000000116b5be7a: mov    %rcx,0x70(%rsp)
  0x0000000116b5be7f: mov    %rdx,0x68(%rsp)
  0x0000000116b5be84: mov    %rbx,0x60(%rsp)
  0x0000000116b5be89: mov    %rbp,0x50(%rsp)
  0x0000000116b5be8e: mov    %rsi,0x48(%rsp)
  0x0000000116b5be93: mov    %rdi,0x40(%rsp)
  0x0000000116b5be98: mov    %r8,0x38(%rsp)
  0x0000000116b5be9d: mov    %r9,0x30(%rsp)
  0x0000000116b5bea2: mov    %r10,0x28(%rsp)
  0x0000000116b5bea7: mov    %r11,0x20(%rsp)
  0x0000000116b5beac: mov    %r12,0x18(%rsp)
  0x0000000116b5beb1: mov    %r13,0x10(%rsp)
  0x0000000116b5beb6: mov    %r14,0x8(%rsp)
  0x0000000116b5bebb: mov    %r15,(%rsp)
  0x0000000116b5bebf: movabs $0x10cc63f17,%rdi
  0x0000000116b5bec9: movabs $0x116b5be69,%rsi
  0x0000000116b5bed3: mov    %rsp,%rdx
  0x0000000116b5bed6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5beda: callq  0x000000010c7dd830
  0x0000000116b5bedf: hlt    
  0x0000000116b5bee0: pop    %r10
  0x0000000116b5bee2: mov    %r15,%rdi
  0x0000000116b5bee5: mov    %rbp,0x290(%r15)
  0x0000000116b5beec: mov    %rax,0x280(%r15)
  0x0000000116b5bef3: test   $0xf,%esp
  0x0000000116b5bef9: je     0x0000000116b5bf11
  0x0000000116b5beff: sub    $0x8,%rsp
  0x0000000116b5bf03: callq  0x000000010c5881a0
  0x0000000116b5bf08: add    $0x8,%rsp
  0x0000000116b5bf0c: jmpq   0x0000000116b5bf16
  0x0000000116b5bf11: callq  0x000000010c5881a0
  0x0000000116b5bf16: push   %rax
  0x0000000116b5bf17: push   %rdi
  0x0000000116b5bf18: push   %rsi
  0x0000000116b5bf19: push   %rdx
  0x0000000116b5bf1a: push   %rcx
  0x0000000116b5bf1b: push   %r8
  0x0000000116b5bf1d: push   %r9
  0x0000000116b5bf1f: push   %r10
  0x0000000116b5bf21: mov    %rsp,%r10
  0x0000000116b5bf24: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5bf28: push   %r10
  0x0000000116b5bf2a: push   %r11
  0x0000000116b5bf2c: mov    $0x109,%edi
  0x0000000116b5bf31: movabs $0x7ff815049fd5,%r10
  0x0000000116b5bf3b: callq  *%r10
  0x0000000116b5bf3e: pop    %r11
  0x0000000116b5bf40: pop    %rsp
  0x0000000116b5bf41: pop    %r10
  0x0000000116b5bf43: pop    %r9
  0x0000000116b5bf45: pop    %r8
  0x0000000116b5bf47: pop    %rcx
  0x0000000116b5bf48: pop    %rdx
  0x0000000116b5bf49: pop    %rsi
  0x0000000116b5bf4a: pop    %rdi
  0x0000000116b5bf4b: cmp    %rax,%r15
  0x0000000116b5bf4e: je     0x0000000116b5bfcb
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5bf54: mov    %rsp,-0x28(%rsp)
  0x0000000116b5bf59: sub    $0x80,%rsp
  0x0000000116b5bf60: mov    %rax,0x78(%rsp)
  0x0000000116b5bf65: mov    %rcx,0x70(%rsp)
  0x0000000116b5bf6a: mov    %rdx,0x68(%rsp)
  0x0000000116b5bf6f: mov    %rbx,0x60(%rsp)
  0x0000000116b5bf74: mov    %rbp,0x50(%rsp)
  0x0000000116b5bf79: mov    %rsi,0x48(%rsp)
  0x0000000116b5bf7e: mov    %rdi,0x40(%rsp)
  0x0000000116b5bf83: mov    %r8,0x38(%rsp)
  0x0000000116b5bf88: mov    %r9,0x30(%rsp)
  0x0000000116b5bf8d: mov    %r10,0x28(%rsp)
  0x0000000116b5bf92: mov    %r11,0x20(%rsp)
  0x0000000116b5bf97: mov    %r12,0x18(%rsp)
  0x0000000116b5bf9c: mov    %r13,0x10(%rsp)
  0x0000000116b5bfa1: mov    %r14,0x8(%rsp)
  0x0000000116b5bfa6: mov    %r15,(%rsp)
  0x0000000116b5bfaa: movabs $0x10cc6405e,%rdi
  0x0000000116b5bfb4: movabs $0x116b5bf54,%rsi
  0x0000000116b5bfbe: mov    %rsp,%rdx
  0x0000000116b5bfc1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5bfc5: callq  0x000000010c7dd830
  0x0000000116b5bfca: hlt    
  0x0000000116b5bfcb: pop    %rax
  0x0000000116b5bfcc: movabs $0x0,%r10
  0x0000000116b5bfd6: mov    %r10,0x280(%r15)
  0x0000000116b5bfdd: movabs $0x0,%r10
  0x0000000116b5bfe7: mov    %r10,0x290(%r15)
  0x0000000116b5bfee: movabs $0x0,%r10
  0x0000000116b5bff8: mov    %r10,0x288(%r15)
  0x0000000116b5bfff: cmpq   $0x0,0x8(%r15)
  0x0000000116b5c007: je     0x0000000116b5c012
  0x0000000116b5c00d: jmpq   0x0000000116b30420
  0x0000000116b5c012: mov    -0x38(%rbp),%r13
  0x0000000116b5c016: mov    -0x30(%rbp),%r14
  0x0000000116b5c01a: retq   
  0x0000000116b5c01b: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c020: sub    $0x80,%rsp
  0x0000000116b5c027: mov    %rax,0x78(%rsp)
  0x0000000116b5c02c: mov    %rcx,0x70(%rsp)
  0x0000000116b5c031: mov    %rdx,0x68(%rsp)
  0x0000000116b5c036: mov    %rbx,0x60(%rsp)
  0x0000000116b5c03b: mov    %rbp,0x50(%rsp)
  0x0000000116b5c040: mov    %rsi,0x48(%rsp)
  0x0000000116b5c045: mov    %rdi,0x40(%rsp)
  0x0000000116b5c04a: mov    %r8,0x38(%rsp)
  0x0000000116b5c04f: mov    %r9,0x30(%rsp)
  0x0000000116b5c054: mov    %r10,0x28(%rsp)
  0x0000000116b5c059: mov    %r11,0x20(%rsp)
  0x0000000116b5c05e: mov    %r12,0x18(%rsp)
  0x0000000116b5c063: mov    %r13,0x10(%rsp)
  0x0000000116b5c068: mov    %r14,0x8(%rsp)
  0x0000000116b5c06d: mov    %r15,(%rsp)
  0x0000000116b5c071: movabs $0x10cb763be,%rdi
  0x0000000116b5c07b: movabs $0x116b5c01b,%rsi
  0x0000000116b5c085: mov    %rsp,%rdx
  0x0000000116b5c088: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c08c: callq  0x000000010c7dd830
  0x0000000116b5c091: hlt    
  0x0000000116b5c092: mov    0x28(%rbx),%r11d
  0x0000000116b5c096: test   $0x20,%r11d
  0x0000000116b5c09d: je     0x0000000116b5c620
  0x0000000116b5c0a3: lea    -0x50(%rbp),%rsi
  0x0000000116b5c0a7: mov    0x8(%rsi),%r11
  0x0000000116b5c0ab: test   %r11,%r11
  0x0000000116b5c0ae: jne    0x0000000116b5c384
  0x0000000116b5c0b4: callq  0x0000000116b5c0be
  0x0000000116b5c0b9: jmpq   0x0000000116b5c30d
  0x0000000116b5c0be: lea    0x8(%rsp),%rax
  0x0000000116b5c0c3: mov    %r13,-0x38(%rbp)
  0x0000000116b5c0c7: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5c0cf: je     0x0000000116b5c14c
  0x0000000116b5c0d5: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c0da: sub    $0x80,%rsp
  0x0000000116b5c0e1: mov    %rax,0x78(%rsp)
  0x0000000116b5c0e6: mov    %rcx,0x70(%rsp)
  0x0000000116b5c0eb: mov    %rdx,0x68(%rsp)
  0x0000000116b5c0f0: mov    %rbx,0x60(%rsp)
  0x0000000116b5c0f5: mov    %rbp,0x50(%rsp)
  0x0000000116b5c0fa: mov    %rsi,0x48(%rsp)
  0x0000000116b5c0ff: mov    %rdi,0x40(%rsp)
  0x0000000116b5c104: mov    %r8,0x38(%rsp)
  0x0000000116b5c109: mov    %r9,0x30(%rsp)
  0x0000000116b5c10e: mov    %r10,0x28(%rsp)
  0x0000000116b5c113: mov    %r11,0x20(%rsp)
  0x0000000116b5c118: mov    %r12,0x18(%rsp)
  0x0000000116b5c11d: mov    %r13,0x10(%rsp)
  0x0000000116b5c122: mov    %r14,0x8(%rsp)
  0x0000000116b5c127: mov    %r15,(%rsp)
  0x0000000116b5c12b: movabs $0x10cc2363b,%rdi
  0x0000000116b5c135: movabs $0x116b5c0d5,%rsi
  0x0000000116b5c13f: mov    %rsp,%rdx
  0x0000000116b5c142: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c146: callq  0x000000010c7dd830
  0x0000000116b5c14b: hlt    
  0x0000000116b5c14c: push   %r10
  0x0000000116b5c14e: cmp    -0x9d158a5(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5c155: je     0x0000000116b5c1d2
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5c15b: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c160: sub    $0x80,%rsp
  0x0000000116b5c167: mov    %rax,0x78(%rsp)
  0x0000000116b5c16c: mov    %rcx,0x70(%rsp)
  0x0000000116b5c171: mov    %rdx,0x68(%rsp)
  0x0000000116b5c176: mov    %rbx,0x60(%rsp)
  0x0000000116b5c17b: mov    %rbp,0x50(%rsp)
  0x0000000116b5c180: mov    %rsi,0x48(%rsp)
  0x0000000116b5c185: mov    %rdi,0x40(%rsp)
  0x0000000116b5c18a: mov    %r8,0x38(%rsp)
  0x0000000116b5c18f: mov    %r9,0x30(%rsp)
  0x0000000116b5c194: mov    %r10,0x28(%rsp)
  0x0000000116b5c199: mov    %r11,0x20(%rsp)
  0x0000000116b5c19e: mov    %r12,0x18(%rsp)
  0x0000000116b5c1a3: mov    %r13,0x10(%rsp)
  0x0000000116b5c1a8: mov    %r14,0x8(%rsp)
  0x0000000116b5c1ad: mov    %r15,(%rsp)
  0x0000000116b5c1b1: movabs $0x10cc63f17,%rdi
  0x0000000116b5c1bb: movabs $0x116b5c15b,%rsi
  0x0000000116b5c1c5: mov    %rsp,%rdx
  0x0000000116b5c1c8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c1cc: callq  0x000000010c7dd830
  0x0000000116b5c1d1: hlt    
  0x0000000116b5c1d2: pop    %r10
  0x0000000116b5c1d4: mov    %r15,%rdi
  0x0000000116b5c1d7: mov    %rbp,0x290(%r15)
  0x0000000116b5c1de: mov    %rax,0x280(%r15)
  0x0000000116b5c1e5: test   $0xf,%esp
  0x0000000116b5c1eb: je     0x0000000116b5c203
  0x0000000116b5c1f1: sub    $0x8,%rsp
  0x0000000116b5c1f5: callq  0x000000010c5892a0
  0x0000000116b5c1fa: add    $0x8,%rsp
  0x0000000116b5c1fe: jmpq   0x0000000116b5c208
  0x0000000116b5c203: callq  0x000000010c5892a0
  0x0000000116b5c208: push   %rax
  0x0000000116b5c209: push   %rdi
  0x0000000116b5c20a: push   %rsi
  0x0000000116b5c20b: push   %rdx
  0x0000000116b5c20c: push   %rcx
  0x0000000116b5c20d: push   %r8
  0x0000000116b5c20f: push   %r9
  0x0000000116b5c211: push   %r10
  0x0000000116b5c213: mov    %rsp,%r10
  0x0000000116b5c216: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c21a: push   %r10
  0x0000000116b5c21c: push   %r11
  0x0000000116b5c21e: mov    $0x109,%edi
  0x0000000116b5c223: movabs $0x7ff815049fd5,%r10
  0x0000000116b5c22d: callq  *%r10
  0x0000000116b5c230: pop    %r11
  0x0000000116b5c232: pop    %rsp
  0x0000000116b5c233: pop    %r10
  0x0000000116b5c235: pop    %r9
  0x0000000116b5c237: pop    %r8
  0x0000000116b5c239: pop    %rcx
  0x0000000116b5c23a: pop    %rdx
  0x0000000116b5c23b: pop    %rsi
  0x0000000116b5c23c: pop    %rdi
  0x0000000116b5c23d: cmp    %rax,%r15
  0x0000000116b5c240: je     0x0000000116b5c2bd
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5c246: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c24b: sub    $0x80,%rsp
  0x0000000116b5c252: mov    %rax,0x78(%rsp)
  0x0000000116b5c257: mov    %rcx,0x70(%rsp)
  0x0000000116b5c25c: mov    %rdx,0x68(%rsp)
  0x0000000116b5c261: mov    %rbx,0x60(%rsp)
  0x0000000116b5c266: mov    %rbp,0x50(%rsp)
  0x0000000116b5c26b: mov    %rsi,0x48(%rsp)
  0x0000000116b5c270: mov    %rdi,0x40(%rsp)
  0x0000000116b5c275: mov    %r8,0x38(%rsp)
  0x0000000116b5c27a: mov    %r9,0x30(%rsp)
  0x0000000116b5c27f: mov    %r10,0x28(%rsp)
  0x0000000116b5c284: mov    %r11,0x20(%rsp)
  0x0000000116b5c289: mov    %r12,0x18(%rsp)
  0x0000000116b5c28e: mov    %r13,0x10(%rsp)
  0x0000000116b5c293: mov    %r14,0x8(%rsp)
  0x0000000116b5c298: mov    %r15,(%rsp)
  0x0000000116b5c29c: movabs $0x10cc6405e,%rdi
  0x0000000116b5c2a6: movabs $0x116b5c246,%rsi
  0x0000000116b5c2b0: mov    %rsp,%rdx
  0x0000000116b5c2b3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c2b7: callq  0x000000010c7dd830
  0x0000000116b5c2bc: hlt    
  0x0000000116b5c2bd: pop    %rax
  0x0000000116b5c2be: movabs $0x0,%r10
  0x0000000116b5c2c8: mov    %r10,0x280(%r15)
  0x0000000116b5c2cf: movabs $0x0,%r10
  0x0000000116b5c2d9: mov    %r10,0x290(%r15)
  0x0000000116b5c2e0: movabs $0x0,%r10
  0x0000000116b5c2ea: mov    %r10,0x288(%r15)
  0x0000000116b5c2f1: cmpq   $0x0,0x8(%r15)
  0x0000000116b5c2f9: je     0x0000000116b5c304
  0x0000000116b5c2ff: jmpq   0x0000000116b30420
  0x0000000116b5c304: mov    -0x38(%rbp),%r13
  0x0000000116b5c308: mov    -0x30(%rbp),%r14
  0x0000000116b5c30c: retq   
  0x0000000116b5c30d: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c312: sub    $0x80,%rsp
  0x0000000116b5c319: mov    %rax,0x78(%rsp)
  0x0000000116b5c31e: mov    %rcx,0x70(%rsp)
  0x0000000116b5c323: mov    %rdx,0x68(%rsp)
  0x0000000116b5c328: mov    %rbx,0x60(%rsp)
  0x0000000116b5c32d: mov    %rbp,0x50(%rsp)
  0x0000000116b5c332: mov    %rsi,0x48(%rsp)
  0x0000000116b5c337: mov    %rdi,0x40(%rsp)
  0x0000000116b5c33c: mov    %r8,0x38(%rsp)
  0x0000000116b5c341: mov    %r9,0x30(%rsp)
  0x0000000116b5c346: mov    %r10,0x28(%rsp)
  0x0000000116b5c34b: mov    %r11,0x20(%rsp)
  0x0000000116b5c350: mov    %r12,0x18(%rsp)
  0x0000000116b5c355: mov    %r13,0x10(%rsp)
  0x0000000116b5c35a: mov    %r14,0x8(%rsp)
  0x0000000116b5c35f: mov    %r15,(%rsp)
  0x0000000116b5c363: movabs $0x10cb763be,%rdi
  0x0000000116b5c36d: movabs $0x116b5c30d,%rsi
  0x0000000116b5c377: mov    %rsp,%rdx
  0x0000000116b5c37a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c37e: callq  0x000000010c7dd830
  0x0000000116b5c383: hlt    
  0x0000000116b5c384: mov    %r13,-0x38(%rbp)
  0x0000000116b5c388: lea    (%rsi),%rax
  0x0000000116b5c38b: mov    0x8(%rsi),%rcx
  0x0000000116b5c38f: movq   $0x0,0x8(%rsi)
  0x0000000116b5c397: mov    (%rcx),%rdx
  0x0000000116b5c39a: and    $0x7,%rdx
  0x0000000116b5c39e: cmp    $0x5,%rdx
  0x0000000116b5c3a2: je     0x0000000116b5c61c
  0x0000000116b5c3a8: mov    (%rax),%rdx
  0x0000000116b5c3ab: test   %rdx,%rdx
  0x0000000116b5c3ae: je     0x0000000116b5c61c
  0x0000000116b5c3b4: lock cmpxchg %rdx,(%rcx)
  0x0000000116b5c3b9: je     0x0000000116b5c61c
  0x0000000116b5c3bf: mov    %rcx,0x8(%rsi)
  0x0000000116b5c3c3: callq  0x0000000116b5c3cd
  0x0000000116b5c3c8: jmpq   0x0000000116b5c61c
  0x0000000116b5c3cd: lea    0x8(%rsp),%rax
  0x0000000116b5c3d2: mov    %r13,-0x38(%rbp)
  0x0000000116b5c3d6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5c3de: je     0x0000000116b5c45b
  0x0000000116b5c3e4: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c3e9: sub    $0x80,%rsp
  0x0000000116b5c3f0: mov    %rax,0x78(%rsp)
  0x0000000116b5c3f5: mov    %rcx,0x70(%rsp)
  0x0000000116b5c3fa: mov    %rdx,0x68(%rsp)
  0x0000000116b5c3ff: mov    %rbx,0x60(%rsp)
  0x0000000116b5c404: mov    %rbp,0x50(%rsp)
  0x0000000116b5c409: mov    %rsi,0x48(%rsp)
  0x0000000116b5c40e: mov    %rdi,0x40(%rsp)
  0x0000000116b5c413: mov    %r8,0x38(%rsp)
  0x0000000116b5c418: mov    %r9,0x30(%rsp)
  0x0000000116b5c41d: mov    %r10,0x28(%rsp)
  0x0000000116b5c422: mov    %r11,0x20(%rsp)
  0x0000000116b5c427: mov    %r12,0x18(%rsp)
  0x0000000116b5c42c: mov    %r13,0x10(%rsp)
  0x0000000116b5c431: mov    %r14,0x8(%rsp)
  0x0000000116b5c436: mov    %r15,(%rsp)
  0x0000000116b5c43a: movabs $0x10cc2363b,%rdi
  0x0000000116b5c444: movabs $0x116b5c3e4,%rsi
  0x0000000116b5c44e: mov    %rsp,%rdx
  0x0000000116b5c451: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c455: callq  0x000000010c7dd830
  0x0000000116b5c45a: hlt    
  0x0000000116b5c45b: push   %r10
  0x0000000116b5c45d: cmp    -0x9d15bb4(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5c464: je     0x0000000116b5c4e1
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5c46a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c46f: sub    $0x80,%rsp
  0x0000000116b5c476: mov    %rax,0x78(%rsp)
  0x0000000116b5c47b: mov    %rcx,0x70(%rsp)
  0x0000000116b5c480: mov    %rdx,0x68(%rsp)
  0x0000000116b5c485: mov    %rbx,0x60(%rsp)
  0x0000000116b5c48a: mov    %rbp,0x50(%rsp)
  0x0000000116b5c48f: mov    %rsi,0x48(%rsp)
  0x0000000116b5c494: mov    %rdi,0x40(%rsp)
  0x0000000116b5c499: mov    %r8,0x38(%rsp)
  0x0000000116b5c49e: mov    %r9,0x30(%rsp)
  0x0000000116b5c4a3: mov    %r10,0x28(%rsp)
  0x0000000116b5c4a8: mov    %r11,0x20(%rsp)
  0x0000000116b5c4ad: mov    %r12,0x18(%rsp)
  0x0000000116b5c4b2: mov    %r13,0x10(%rsp)
  0x0000000116b5c4b7: mov    %r14,0x8(%rsp)
  0x0000000116b5c4bc: mov    %r15,(%rsp)
  0x0000000116b5c4c0: movabs $0x10cc63f17,%rdi
  0x0000000116b5c4ca: movabs $0x116b5c46a,%rsi
  0x0000000116b5c4d4: mov    %rsp,%rdx
  0x0000000116b5c4d7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c4db: callq  0x000000010c7dd830
  0x0000000116b5c4e0: hlt    
  0x0000000116b5c4e1: pop    %r10
  0x0000000116b5c4e3: mov    %r15,%rdi
  0x0000000116b5c4e6: mov    %rbp,0x290(%r15)
  0x0000000116b5c4ed: mov    %rax,0x280(%r15)
  0x0000000116b5c4f4: test   $0xf,%esp
  0x0000000116b5c4fa: je     0x0000000116b5c512
  0x0000000116b5c500: sub    $0x8,%rsp
  0x0000000116b5c504: callq  0x000000010c588f80
  0x0000000116b5c509: add    $0x8,%rsp
  0x0000000116b5c50d: jmpq   0x0000000116b5c517
  0x0000000116b5c512: callq  0x000000010c588f80
  0x0000000116b5c517: push   %rax
  0x0000000116b5c518: push   %rdi
  0x0000000116b5c519: push   %rsi
  0x0000000116b5c51a: push   %rdx
  0x0000000116b5c51b: push   %rcx
  0x0000000116b5c51c: push   %r8
  0x0000000116b5c51e: push   %r9
  0x0000000116b5c520: push   %r10
  0x0000000116b5c522: mov    %rsp,%r10
  0x0000000116b5c525: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c529: push   %r10
  0x0000000116b5c52b: push   %r11
  0x0000000116b5c52d: mov    $0x109,%edi
  0x0000000116b5c532: movabs $0x7ff815049fd5,%r10
  0x0000000116b5c53c: callq  *%r10
  0x0000000116b5c53f: pop    %r11
  0x0000000116b5c541: pop    %rsp
  0x0000000116b5c542: pop    %r10
  0x0000000116b5c544: pop    %r9
  0x0000000116b5c546: pop    %r8
  0x0000000116b5c548: pop    %rcx
  0x0000000116b5c549: pop    %rdx
  0x0000000116b5c54a: pop    %rsi
  0x0000000116b5c54b: pop    %rdi
  0x0000000116b5c54c: cmp    %rax,%r15
  0x0000000116b5c54f: je     0x0000000116b5c5cc
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5c555: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c55a: sub    $0x80,%rsp
  0x0000000116b5c561: mov    %rax,0x78(%rsp)
  0x0000000116b5c566: mov    %rcx,0x70(%rsp)
  0x0000000116b5c56b: mov    %rdx,0x68(%rsp)
  0x0000000116b5c570: mov    %rbx,0x60(%rsp)
  0x0000000116b5c575: mov    %rbp,0x50(%rsp)
  0x0000000116b5c57a: mov    %rsi,0x48(%rsp)
  0x0000000116b5c57f: mov    %rdi,0x40(%rsp)
  0x0000000116b5c584: mov    %r8,0x38(%rsp)
  0x0000000116b5c589: mov    %r9,0x30(%rsp)
  0x0000000116b5c58e: mov    %r10,0x28(%rsp)
  0x0000000116b5c593: mov    %r11,0x20(%rsp)
  0x0000000116b5c598: mov    %r12,0x18(%rsp)
  0x0000000116b5c59d: mov    %r13,0x10(%rsp)
  0x0000000116b5c5a2: mov    %r14,0x8(%rsp)
  0x0000000116b5c5a7: mov    %r15,(%rsp)
  0x0000000116b5c5ab: movabs $0x10cc6405e,%rdi
  0x0000000116b5c5b5: movabs $0x116b5c555,%rsi
  0x0000000116b5c5bf: mov    %rsp,%rdx
  0x0000000116b5c5c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c5c6: callq  0x000000010c7dd830
  0x0000000116b5c5cb: hlt    
  0x0000000116b5c5cc: pop    %rax
  0x0000000116b5c5cd: movabs $0x0,%r10
  0x0000000116b5c5d7: mov    %r10,0x280(%r15)
  0x0000000116b5c5de: movabs $0x0,%r10
  0x0000000116b5c5e8: mov    %r10,0x290(%r15)
  0x0000000116b5c5ef: movabs $0x0,%r10
  0x0000000116b5c5f9: mov    %r10,0x288(%r15)
  0x0000000116b5c600: cmpq   $0x0,0x8(%r15)
  0x0000000116b5c608: je     0x0000000116b5c613
  0x0000000116b5c60e: jmpq   0x0000000116b30420
  0x0000000116b5c613: mov    -0x38(%rbp),%r13
  0x0000000116b5c617: mov    -0x30(%rbp),%r14
  0x0000000116b5c61b: retq   
  0x0000000116b5c61c: mov    -0x38(%rbp),%r13
  0x0000000116b5c620: cmpb   $0x0,-0x9d3f425(%rip)        # 0x000000010ce1d202
  0x0000000116b5c627: je     0x0000000116b5c6dc
  0x0000000116b5c62d: mov    -0x18(%rbp),%rsi
  0x0000000116b5c631: mov    %r15,%rdi
  0x0000000116b5c634: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5c63c: je     0x0000000116b5c6b9
  0x0000000116b5c642: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c647: sub    $0x80,%rsp
  0x0000000116b5c64e: mov    %rax,0x78(%rsp)
  0x0000000116b5c653: mov    %rcx,0x70(%rsp)
  0x0000000116b5c658: mov    %rdx,0x68(%rsp)
  0x0000000116b5c65d: mov    %rbx,0x60(%rsp)
  0x0000000116b5c662: mov    %rbp,0x50(%rsp)
  0x0000000116b5c667: mov    %rsi,0x48(%rsp)
  0x0000000116b5c66c: mov    %rdi,0x40(%rsp)
  0x0000000116b5c671: mov    %r8,0x38(%rsp)
  0x0000000116b5c676: mov    %r9,0x30(%rsp)
  0x0000000116b5c67b: mov    %r10,0x28(%rsp)
  0x0000000116b5c680: mov    %r11,0x20(%rsp)
  0x0000000116b5c685: mov    %r12,0x18(%rsp)
  0x0000000116b5c68a: mov    %r13,0x10(%rsp)
  0x0000000116b5c68f: mov    %r14,0x8(%rsp)
  0x0000000116b5c694: mov    %r15,(%rsp)
  0x0000000116b5c698: movabs $0x10cc2363b,%rdi
  0x0000000116b5c6a2: movabs $0x116b5c642,%rsi
  0x0000000116b5c6ac: mov    %rsp,%rdx
  0x0000000116b5c6af: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c6b3: callq  0x000000010c7dd830
  0x0000000116b5c6b8: hlt    
  0x0000000116b5c6b9: test   $0xf,%esp
  0x0000000116b5c6bf: je     0x0000000116b5c6d7
  0x0000000116b5c6c5: sub    $0x8,%rsp
  0x0000000116b5c6c9: callq  0x000000010c9c9850
  0x0000000116b5c6ce: add    $0x8,%rsp
  0x0000000116b5c6d2: jmpq   0x0000000116b5c6dc
  0x0000000116b5c6d7: callq  0x000000010c9c9850
  0x0000000116b5c6dc: mov    (%rsp),%rax
  0x0000000116b5c6e0: add    $0x10,%rsp
  0x0000000116b5c6e4: vmovsd (%rsp),%xmm0
  0x0000000116b5c6e9: add    $0x10,%rsp
  0x0000000116b5c6ed: mov    0x18(%rbp),%r11
  0x0000000116b5c6f1: callq  *%r11
  0x0000000116b5c6f4: mov    -0x8(%rbp),%r11
  0x0000000116b5c6f8: leaveq 
  0x0000000116b5c6f9: pop    %rdi
  0x0000000116b5c6fa: mov    %r11,%rsp
  0x0000000116b5c6fd: jmpq   *%rdi
  0x0000000116b5c6ff: nop

----------------------------------------------------------------------
method entry point (kind = native_synchronized)  [0x0000000116b5c740, 0x0000000116b5df60]  6176 bytes

  0x0000000116b5c740: mov    0x10(%rbx),%rcx
  0x0000000116b5c744: movzwl 0x2c(%rcx),%ecx
  0x0000000116b5c748: pop    %rax
  0x0000000116b5c749: lea    -0x8(%rsp,%rcx,8),%r14
  0x0000000116b5c74e: pushq  $0x0
  0x0000000116b5c753: pushq  $0x0
  0x0000000116b5c758: push   %rax
  0x0000000116b5c759: push   %rbp
  0x0000000116b5c75a: mov    %rsp,%rbp
  0x0000000116b5c75d: push   %r13
  0x0000000116b5c75f: pushq  $0x0
  0x0000000116b5c764: mov    0x10(%rbx),%r13
  0x0000000116b5c768: lea    0x30(%r13),%r13
  0x0000000116b5c76c: push   %rbx
  0x0000000116b5c76d: pushq  $0x0
  0x0000000116b5c772: mov    0x10(%rbx),%rdx
  0x0000000116b5c776: mov    0x8(%rdx),%rdx
  0x0000000116b5c77a: mov    0x18(%rdx),%rdx
  0x0000000116b5c77e: push   %rdx
  0x0000000116b5c77f: push   %r14
  0x0000000116b5c781: pushq  $0x0
  0x0000000116b5c786: pushq  $0x0
  0x0000000116b5c78b: mov    %rsp,(%rsp)
  0x0000000116b5c78f: mov    0x28(%rbx),%eax
  0x0000000116b5c792: test   $0x100,%eax
  0x0000000116b5c797: jne    0x0000000116b5c814
  0x0000000116b5c79d: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c7a2: sub    $0x80,%rsp
  0x0000000116b5c7a9: mov    %rax,0x78(%rsp)
  0x0000000116b5c7ae: mov    %rcx,0x70(%rsp)
  0x0000000116b5c7b3: mov    %rdx,0x68(%rsp)
  0x0000000116b5c7b8: mov    %rbx,0x60(%rsp)
  0x0000000116b5c7bd: mov    %rbp,0x50(%rsp)
  0x0000000116b5c7c2: mov    %rsi,0x48(%rsp)
  0x0000000116b5c7c7: mov    %rdi,0x40(%rsp)
  0x0000000116b5c7cc: mov    %r8,0x38(%rsp)
  0x0000000116b5c7d1: mov    %r9,0x30(%rsp)
  0x0000000116b5c7d6: mov    %r10,0x28(%rsp)
  0x0000000116b5c7db: mov    %r11,0x20(%rsp)
  0x0000000116b5c7e0: mov    %r12,0x18(%rsp)
  0x0000000116b5c7e5: mov    %r13,0x10(%rsp)
  0x0000000116b5c7ea: mov    %r14,0x8(%rsp)
  0x0000000116b5c7ef: mov    %r15,(%rsp)
  0x0000000116b5c7f3: movabs $0x10ccafb09,%rdi
  0x0000000116b5c7fd: movabs $0x116b5c79d,%rsi
  0x0000000116b5c807: mov    %rsp,%rdx
  0x0000000116b5c80a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c80e: callq  0x000000010c7dd830
  0x0000000116b5c813: hlt    
  0x0000000116b5c814: test   $0x400,%eax
  0x0000000116b5c819: je     0x0000000116b5c896
  0x0000000116b5c81f: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c824: sub    $0x80,%rsp
  0x0000000116b5c82b: mov    %rax,0x78(%rsp)
  0x0000000116b5c830: mov    %rcx,0x70(%rsp)
  0x0000000116b5c835: mov    %rdx,0x68(%rsp)
  0x0000000116b5c83a: mov    %rbx,0x60(%rsp)
  0x0000000116b5c83f: mov    %rbp,0x50(%rsp)
  0x0000000116b5c844: mov    %rsi,0x48(%rsp)
  0x0000000116b5c849: mov    %rdi,0x40(%rsp)
  0x0000000116b5c84e: mov    %r8,0x38(%rsp)
  0x0000000116b5c853: mov    %r9,0x30(%rsp)
  0x0000000116b5c858: mov    %r10,0x28(%rsp)
  0x0000000116b5c85d: mov    %r11,0x20(%rsp)
  0x0000000116b5c862: mov    %r12,0x18(%rsp)
  0x0000000116b5c867: mov    %r13,0x10(%rsp)
  0x0000000116b5c86c: mov    %r14,0x8(%rsp)
  0x0000000116b5c871: mov    %r15,(%rsp)
  0x0000000116b5c875: movabs $0x10ccafb36,%rdi
  0x0000000116b5c87f: movabs $0x116b5c81f,%rsi
  0x0000000116b5c889: mov    %rsp,%rdx
  0x0000000116b5c88c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c890: callq  0x000000010c7dd830
  0x0000000116b5c895: hlt    
  0x0000000116b5c896: movb   $0x1,0x33d(%r15)
  0x0000000116b5c89e: mov    %eax,-0x16000(%rsp)
  0x0000000116b5c8a5: movb   $0x0,0x33d(%r15)
  0x0000000116b5c8ad: mov    0x28(%rbx),%eax
  0x0000000116b5c8b0: test   $0x20,%eax
  0x0000000116b5c8b5: jne    0x0000000116b5c932
  0x0000000116b5c8bb: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c8c0: sub    $0x80,%rsp
  0x0000000116b5c8c7: mov    %rax,0x78(%rsp)
  0x0000000116b5c8cc: mov    %rcx,0x70(%rsp)
  0x0000000116b5c8d1: mov    %rdx,0x68(%rsp)
  0x0000000116b5c8d6: mov    %rbx,0x60(%rsp)
  0x0000000116b5c8db: mov    %rbp,0x50(%rsp)
  0x0000000116b5c8e0: mov    %rsi,0x48(%rsp)
  0x0000000116b5c8e5: mov    %rdi,0x40(%rsp)
  0x0000000116b5c8ea: mov    %r8,0x38(%rsp)
  0x0000000116b5c8ef: mov    %r9,0x30(%rsp)
  0x0000000116b5c8f4: mov    %r10,0x28(%rsp)
  0x0000000116b5c8f9: mov    %r11,0x20(%rsp)
  0x0000000116b5c8fe: mov    %r12,0x18(%rsp)
  0x0000000116b5c903: mov    %r13,0x10(%rsp)
  0x0000000116b5c908: mov    %r14,0x8(%rsp)
  0x0000000116b5c90d: mov    %r15,(%rsp)
  0x0000000116b5c911: movabs $0x10ccaf9c1,%rdi
  0x0000000116b5c91b: movabs $0x116b5c8bb,%rsi
  0x0000000116b5c925: mov    %rsp,%rdx
  0x0000000116b5c928: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c92c: callq  0x000000010c7dd830
  0x0000000116b5c931: hlt    
  0x0000000116b5c932: mov    0x28(%rbx),%eax
  0x0000000116b5c935: test   $0x8,%eax
  0x0000000116b5c93a: mov    (%r14),%rax
  0x0000000116b5c93d: je     0x0000000116b5c9d3
  0x0000000116b5c943: mov    0x10(%rbx),%rax
  0x0000000116b5c947: mov    0x8(%rax),%rax
  0x0000000116b5c94b: mov    0x20(%rax),%rax
  0x0000000116b5c94f: mov    0x70(%rax),%rax
  0x0000000116b5c953: test   %rax,%rax
  0x0000000116b5c956: jne    0x0000000116b5c9d3
  0x0000000116b5c95c: mov    %rsp,-0x28(%rsp)
  0x0000000116b5c961: sub    $0x80,%rsp
  0x0000000116b5c968: mov    %rax,0x78(%rsp)
  0x0000000116b5c96d: mov    %rcx,0x70(%rsp)
  0x0000000116b5c972: mov    %rdx,0x68(%rsp)
  0x0000000116b5c977: mov    %rbx,0x60(%rsp)
  0x0000000116b5c97c: mov    %rbp,0x50(%rsp)
  0x0000000116b5c981: mov    %rsi,0x48(%rsp)
  0x0000000116b5c986: mov    %rdi,0x40(%rsp)
  0x0000000116b5c98b: mov    %r8,0x38(%rsp)
  0x0000000116b5c990: mov    %r9,0x30(%rsp)
  0x0000000116b5c995: mov    %r10,0x28(%rsp)
  0x0000000116b5c99a: mov    %r11,0x20(%rsp)
  0x0000000116b5c99f: mov    %r12,0x18(%rsp)
  0x0000000116b5c9a4: mov    %r13,0x10(%rsp)
  0x0000000116b5c9a9: mov    %r14,0x8(%rsp)
  0x0000000116b5c9ae: mov    %r15,(%rsp)
  0x0000000116b5c9b2: movabs $0x10ccaf9e5,%rdi
  0x0000000116b5c9bc: movabs $0x116b5c95c,%rsi
  0x0000000116b5c9c6: mov    %rsp,%rdx
  0x0000000116b5c9c9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5c9cd: callq  0x000000010c7dd830
  0x0000000116b5c9d2: hlt    
  0x0000000116b5c9d3: sub    $0x10,%rsp
  0x0000000116b5c9d7: mov    %rsp,-0x40(%rbp)
  0x0000000116b5c9db: mov    %rax,0x8(%rsp)
  0x0000000116b5c9e0: mov    %rsp,%rsi
  0x0000000116b5c9e3: mov    0x8(%rsi),%rcx
  0x0000000116b5c9e7: mov    (%rcx),%rax
  0x0000000116b5c9ea: mov    %rax,%r10
  0x0000000116b5c9ed: and    $0x7,%r10
  0x0000000116b5c9f1: cmp    $0x5,%r10
  0x0000000116b5c9f5: jne    0x0000000116b5ca7f
  0x0000000116b5c9fb: mov    0x8(%rcx),%r10d
  0x0000000116b5c9ff: shl    $0x3,%r10
  0x0000000116b5ca03: mov    0xb0(%r10),%r10
  0x0000000116b5ca0a: or     %r15,%r10
  0x0000000116b5ca0d: xor    %rax,%r10
  0x0000000116b5ca10: and    $0xffffffffffffff87,%r10
  0x0000000116b5ca14: je     0x0000000116b5cd01
  0x0000000116b5ca1a: test   $0x7,%r10
  0x0000000116b5ca21: jne    0x0000000116b5ca6b
  0x0000000116b5ca23: test   $0x300,%r10
  0x0000000116b5ca2a: jne    0x0000000116b5ca49
  0x0000000116b5ca2c: and    $0x37f,%rax
  0x0000000116b5ca33: mov    %rax,%r10
  0x0000000116b5ca36: or     %r15,%r10
  0x0000000116b5ca39: lock cmpxchg %r10,(%rcx)
  0x0000000116b5ca3e: jne    0x0000000116b5caa8
  0x0000000116b5ca44: jmpq   0x0000000116b5cd01
  0x0000000116b5ca49: mov    0x8(%rcx),%r10d
  0x0000000116b5ca4d: shl    $0x3,%r10
  0x0000000116b5ca51: mov    0xb0(%r10),%r10
  0x0000000116b5ca58: or     %r15,%r10
  0x0000000116b5ca5b: lock cmpxchg %r10,(%rcx)
  0x0000000116b5ca60: jne    0x0000000116b5caa8
  0x0000000116b5ca66: jmpq   0x0000000116b5cd01
  0x0000000116b5ca6b: mov    0x8(%rcx),%r10d
  0x0000000116b5ca6f: shl    $0x3,%r10
  0x0000000116b5ca73: mov    0xb0(%r10),%r10
  0x0000000116b5ca7a: lock cmpxchg %r10,(%rcx)
  0x0000000116b5ca7f: mov    $0x1,%eax
  0x0000000116b5ca84: or     (%rcx),%rax
  0x0000000116b5ca87: mov    %rax,(%rsi)
  0x0000000116b5ca8a: lock cmpxchg %rsi,(%rcx)
  0x0000000116b5ca8f: je     0x0000000116b5cd01
  0x0000000116b5ca95: sub    %rsp,%rax
  0x0000000116b5ca98: and    $0xfffffffffffff007,%rax
  0x0000000116b5ca9f: mov    %rax,(%rsi)
  0x0000000116b5caa2: je     0x0000000116b5cd01
  0x0000000116b5caa8: callq  0x0000000116b5cab2
  0x0000000116b5caad: jmpq   0x0000000116b5cd01
  0x0000000116b5cab2: lea    0x8(%rsp),%rax
  0x0000000116b5cab7: mov    %r13,-0x38(%rbp)
  0x0000000116b5cabb: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5cac3: je     0x0000000116b5cb40
  0x0000000116b5cac9: mov    %rsp,-0x28(%rsp)
  0x0000000116b5cace: sub    $0x80,%rsp
  0x0000000116b5cad5: mov    %rax,0x78(%rsp)
  0x0000000116b5cada: mov    %rcx,0x70(%rsp)
  0x0000000116b5cadf: mov    %rdx,0x68(%rsp)
  0x0000000116b5cae4: mov    %rbx,0x60(%rsp)
  0x0000000116b5cae9: mov    %rbp,0x50(%rsp)
  0x0000000116b5caee: mov    %rsi,0x48(%rsp)
  0x0000000116b5caf3: mov    %rdi,0x40(%rsp)
  0x0000000116b5caf8: mov    %r8,0x38(%rsp)
  0x0000000116b5cafd: mov    %r9,0x30(%rsp)
  0x0000000116b5cb02: mov    %r10,0x28(%rsp)
  0x0000000116b5cb07: mov    %r11,0x20(%rsp)
  0x0000000116b5cb0c: mov    %r12,0x18(%rsp)
  0x0000000116b5cb11: mov    %r13,0x10(%rsp)
  0x0000000116b5cb16: mov    %r14,0x8(%rsp)
  0x0000000116b5cb1b: mov    %r15,(%rsp)
  0x0000000116b5cb1f: movabs $0x10cc2363b,%rdi
  0x0000000116b5cb29: movabs $0x116b5cac9,%rsi
  0x0000000116b5cb33: mov    %rsp,%rdx
  0x0000000116b5cb36: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5cb3a: callq  0x000000010c7dd830
  0x0000000116b5cb3f: hlt    
  0x0000000116b5cb40: push   %r10
  0x0000000116b5cb42: cmp    -0x9d16299(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5cb49: je     0x0000000116b5cbc6
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5cb4f: mov    %rsp,-0x28(%rsp)
  0x0000000116b5cb54: sub    $0x80,%rsp
  0x0000000116b5cb5b: mov    %rax,0x78(%rsp)
  0x0000000116b5cb60: mov    %rcx,0x70(%rsp)
  0x0000000116b5cb65: mov    %rdx,0x68(%rsp)
  0x0000000116b5cb6a: mov    %rbx,0x60(%rsp)
  0x0000000116b5cb6f: mov    %rbp,0x50(%rsp)
  0x0000000116b5cb74: mov    %rsi,0x48(%rsp)
  0x0000000116b5cb79: mov    %rdi,0x40(%rsp)
  0x0000000116b5cb7e: mov    %r8,0x38(%rsp)
  0x0000000116b5cb83: mov    %r9,0x30(%rsp)
  0x0000000116b5cb88: mov    %r10,0x28(%rsp)
  0x0000000116b5cb8d: mov    %r11,0x20(%rsp)
  0x0000000116b5cb92: mov    %r12,0x18(%rsp)
  0x0000000116b5cb97: mov    %r13,0x10(%rsp)
  0x0000000116b5cb9c: mov    %r14,0x8(%rsp)
  0x0000000116b5cba1: mov    %r15,(%rsp)
  0x0000000116b5cba5: movabs $0x10cc63f17,%rdi
  0x0000000116b5cbaf: movabs $0x116b5cb4f,%rsi
  0x0000000116b5cbb9: mov    %rsp,%rdx
  0x0000000116b5cbbc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5cbc0: callq  0x000000010c7dd830
  0x0000000116b5cbc5: hlt    
  0x0000000116b5cbc6: pop    %r10
  0x0000000116b5cbc8: mov    %r15,%rdi
  0x0000000116b5cbcb: mov    %rbp,0x290(%r15)
  0x0000000116b5cbd2: mov    %rax,0x280(%r15)
  0x0000000116b5cbd9: test   $0xf,%esp
  0x0000000116b5cbdf: je     0x0000000116b5cbf7
  0x0000000116b5cbe5: sub    $0x8,%rsp
  0x0000000116b5cbe9: callq  0x000000010c588c20
  0x0000000116b5cbee: add    $0x8,%rsp
  0x0000000116b5cbf2: jmpq   0x0000000116b5cbfc
  0x0000000116b5cbf7: callq  0x000000010c588c20
  0x0000000116b5cbfc: push   %rax
  0x0000000116b5cbfd: push   %rdi
  0x0000000116b5cbfe: push   %rsi
  0x0000000116b5cbff: push   %rdx
  0x0000000116b5cc00: push   %rcx
  0x0000000116b5cc01: push   %r8
  0x0000000116b5cc03: push   %r9
  0x0000000116b5cc05: push   %r10
  0x0000000116b5cc07: mov    %rsp,%r10
  0x0000000116b5cc0a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5cc0e: push   %r10
  0x0000000116b5cc10: push   %r11
  0x0000000116b5cc12: mov    $0x109,%edi
  0x0000000116b5cc17: movabs $0x7ff815049fd5,%r10
  0x0000000116b5cc21: callq  *%r10
  0x0000000116b5cc24: pop    %r11
  0x0000000116b5cc26: pop    %rsp
  0x0000000116b5cc27: pop    %r10
  0x0000000116b5cc29: pop    %r9
  0x0000000116b5cc2b: pop    %r8
  0x0000000116b5cc2d: pop    %rcx
  0x0000000116b5cc2e: pop    %rdx
  0x0000000116b5cc2f: pop    %rsi
  0x0000000116b5cc30: pop    %rdi
  0x0000000116b5cc31: cmp    %rax,%r15
  0x0000000116b5cc34: je     0x0000000116b5ccb1
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5cc3a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5cc3f: sub    $0x80,%rsp
  0x0000000116b5cc46: mov    %rax,0x78(%rsp)
  0x0000000116b5cc4b: mov    %rcx,0x70(%rsp)
  0x0000000116b5cc50: mov    %rdx,0x68(%rsp)
  0x0000000116b5cc55: mov    %rbx,0x60(%rsp)
  0x0000000116b5cc5a: mov    %rbp,0x50(%rsp)
  0x0000000116b5cc5f: mov    %rsi,0x48(%rsp)
  0x0000000116b5cc64: mov    %rdi,0x40(%rsp)
  0x0000000116b5cc69: mov    %r8,0x38(%rsp)
  0x0000000116b5cc6e: mov    %r9,0x30(%rsp)
  0x0000000116b5cc73: mov    %r10,0x28(%rsp)
  0x0000000116b5cc78: mov    %r11,0x20(%rsp)
  0x0000000116b5cc7d: mov    %r12,0x18(%rsp)
  0x0000000116b5cc82: mov    %r13,0x10(%rsp)
  0x0000000116b5cc87: mov    %r14,0x8(%rsp)
  0x0000000116b5cc8c: mov    %r15,(%rsp)
  0x0000000116b5cc90: movabs $0x10cc6405e,%rdi
  0x0000000116b5cc9a: movabs $0x116b5cc3a,%rsi
  0x0000000116b5cca4: mov    %rsp,%rdx
  0x0000000116b5cca7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ccab: callq  0x000000010c7dd830
  0x0000000116b5ccb0: hlt    
  0x0000000116b5ccb1: pop    %rax
  0x0000000116b5ccb2: movabs $0x0,%r10
  0x0000000116b5ccbc: mov    %r10,0x280(%r15)
  0x0000000116b5ccc3: movabs $0x0,%r10
  0x0000000116b5cccd: mov    %r10,0x290(%r15)
  0x0000000116b5ccd4: movabs $0x0,%r10
  0x0000000116b5ccde: mov    %r10,0x288(%r15)
  0x0000000116b5cce5: cmpq   $0x0,0x8(%r15)
  0x0000000116b5cced: je     0x0000000116b5ccf8
  0x0000000116b5ccf3: jmpq   0x0000000116b30420
  0x0000000116b5ccf8: mov    -0x38(%rbp),%r13
  0x0000000116b5ccfc: mov    -0x30(%rbp),%r14
  0x0000000116b5cd00: retq   
  0x0000000116b5cd01: mov    -0x40(%rbp),%rax
  0x0000000116b5cd05: cmp    %rsp,%rax
  0x0000000116b5cd08: je     0x0000000116b5cd85
  0x0000000116b5cd0e: mov    %rsp,-0x28(%rsp)
  0x0000000116b5cd13: sub    $0x80,%rsp
  0x0000000116b5cd1a: mov    %rax,0x78(%rsp)
  0x0000000116b5cd1f: mov    %rcx,0x70(%rsp)
  0x0000000116b5cd24: mov    %rdx,0x68(%rsp)
  0x0000000116b5cd29: mov    %rbx,0x60(%rsp)
  0x0000000116b5cd2e: mov    %rbp,0x50(%rsp)
  0x0000000116b5cd33: mov    %rsi,0x48(%rsp)
  0x0000000116b5cd38: mov    %rdi,0x40(%rsp)
  0x0000000116b5cd3d: mov    %r8,0x38(%rsp)
  0x0000000116b5cd42: mov    %r9,0x30(%rsp)
  0x0000000116b5cd47: mov    %r10,0x28(%rsp)
  0x0000000116b5cd4c: mov    %r11,0x20(%rsp)
  0x0000000116b5cd51: mov    %r12,0x18(%rsp)
  0x0000000116b5cd56: mov    %r13,0x10(%rsp)
  0x0000000116b5cd5b: mov    %r14,0x8(%rsp)
  0x0000000116b5cd60: mov    %r15,(%rsp)
  0x0000000116b5cd64: movabs $0x10ccafb83,%rdi
  0x0000000116b5cd6e: movabs $0x116b5cd0e,%rsi
  0x0000000116b5cd78: mov    %rsp,%rdx
  0x0000000116b5cd7b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5cd7f: callq  0x000000010c7dd830
  0x0000000116b5cd84: hlt    
  0x0000000116b5cd85: cmpb   $0x0,-0x9d3fb8a(%rip)        # 0x000000010ce1d202
  0x0000000116b5cd8c: je     0x0000000116b5ce41
  0x0000000116b5cd92: mov    -0x18(%rbp),%rsi
  0x0000000116b5cd96: mov    %r15,%rdi
  0x0000000116b5cd99: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5cda1: je     0x0000000116b5ce1e
  0x0000000116b5cda7: mov    %rsp,-0x28(%rsp)
  0x0000000116b5cdac: sub    $0x80,%rsp
  0x0000000116b5cdb3: mov    %rax,0x78(%rsp)
  0x0000000116b5cdb8: mov    %rcx,0x70(%rsp)
  0x0000000116b5cdbd: mov    %rdx,0x68(%rsp)
  0x0000000116b5cdc2: mov    %rbx,0x60(%rsp)
  0x0000000116b5cdc7: mov    %rbp,0x50(%rsp)
  0x0000000116b5cdcc: mov    %rsi,0x48(%rsp)
  0x0000000116b5cdd1: mov    %rdi,0x40(%rsp)
  0x0000000116b5cdd6: mov    %r8,0x38(%rsp)
  0x0000000116b5cddb: mov    %r9,0x30(%rsp)
  0x0000000116b5cde0: mov    %r10,0x28(%rsp)
  0x0000000116b5cde5: mov    %r11,0x20(%rsp)
  0x0000000116b5cdea: mov    %r12,0x18(%rsp)
  0x0000000116b5cdef: mov    %r13,0x10(%rsp)
  0x0000000116b5cdf4: mov    %r14,0x8(%rsp)
  0x0000000116b5cdf9: mov    %r15,(%rsp)
  0x0000000116b5cdfd: movabs $0x10cc2363b,%rdi
  0x0000000116b5ce07: movabs $0x116b5cda7,%rsi
  0x0000000116b5ce11: mov    %rsp,%rdx
  0x0000000116b5ce14: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ce18: callq  0x000000010c7dd830
  0x0000000116b5ce1d: hlt    
  0x0000000116b5ce1e: test   $0xf,%esp
  0x0000000116b5ce24: je     0x0000000116b5ce3c
  0x0000000116b5ce2a: sub    $0x8,%rsp
  0x0000000116b5ce2e: callq  0x000000010c9c9630
  0x0000000116b5ce33: add    $0x8,%rsp
  0x0000000116b5ce37: jmpq   0x0000000116b5ce41
  0x0000000116b5ce3c: callq  0x000000010c9c9630
  0x0000000116b5ce41: mov    -0x18(%rbp),%rbx
  0x0000000116b5ce45: mov    0x10(%rbx),%r11
  0x0000000116b5ce49: movzwl 0x2c(%r11),%r11d
  0x0000000116b5ce4e: shl    $0x3,%r11d
  0x0000000116b5ce52: sub    %r11,%rsp
  0x0000000116b5ce55: sub    $0x0,%rsp
  0x0000000116b5ce59: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ce5d: mov    0x70(%rbx),%r11
  0x0000000116b5ce61: test   %r11,%r11
  0x0000000116b5ce64: jne    0x0000000116b5d0ce
  0x0000000116b5ce6a: callq  0x0000000116b5ce74
  0x0000000116b5ce6f: jmpq   0x0000000116b5d0c6
  0x0000000116b5ce74: mov    %rbx,%rsi
  0x0000000116b5ce77: lea    0x8(%rsp),%rax
  0x0000000116b5ce7c: mov    %r13,-0x38(%rbp)
  0x0000000116b5ce80: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5ce88: je     0x0000000116b5cf05
  0x0000000116b5ce8e: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ce93: sub    $0x80,%rsp
  0x0000000116b5ce9a: mov    %rax,0x78(%rsp)
  0x0000000116b5ce9f: mov    %rcx,0x70(%rsp)
  0x0000000116b5cea4: mov    %rdx,0x68(%rsp)
  0x0000000116b5cea9: mov    %rbx,0x60(%rsp)
  0x0000000116b5ceae: mov    %rbp,0x50(%rsp)
  0x0000000116b5ceb3: mov    %rsi,0x48(%rsp)
  0x0000000116b5ceb8: mov    %rdi,0x40(%rsp)
  0x0000000116b5cebd: mov    %r8,0x38(%rsp)
  0x0000000116b5cec2: mov    %r9,0x30(%rsp)
  0x0000000116b5cec7: mov    %r10,0x28(%rsp)
  0x0000000116b5cecc: mov    %r11,0x20(%rsp)
  0x0000000116b5ced1: mov    %r12,0x18(%rsp)
  0x0000000116b5ced6: mov    %r13,0x10(%rsp)
  0x0000000116b5cedb: mov    %r14,0x8(%rsp)
  0x0000000116b5cee0: mov    %r15,(%rsp)
  0x0000000116b5cee4: movabs $0x10cc2363b,%rdi
  0x0000000116b5ceee: movabs $0x116b5ce8e,%rsi
  0x0000000116b5cef8: mov    %rsp,%rdx
  0x0000000116b5cefb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ceff: callq  0x000000010c7dd830
  0x0000000116b5cf04: hlt    
  0x0000000116b5cf05: push   %r10
  0x0000000116b5cf07: cmp    -0x9d1665e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5cf0e: je     0x0000000116b5cf8b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5cf14: mov    %rsp,-0x28(%rsp)
  0x0000000116b5cf19: sub    $0x80,%rsp
  0x0000000116b5cf20: mov    %rax,0x78(%rsp)
  0x0000000116b5cf25: mov    %rcx,0x70(%rsp)
  0x0000000116b5cf2a: mov    %rdx,0x68(%rsp)
  0x0000000116b5cf2f: mov    %rbx,0x60(%rsp)
  0x0000000116b5cf34: mov    %rbp,0x50(%rsp)
  0x0000000116b5cf39: mov    %rsi,0x48(%rsp)
  0x0000000116b5cf3e: mov    %rdi,0x40(%rsp)
  0x0000000116b5cf43: mov    %r8,0x38(%rsp)
  0x0000000116b5cf48: mov    %r9,0x30(%rsp)
  0x0000000116b5cf4d: mov    %r10,0x28(%rsp)
  0x0000000116b5cf52: mov    %r11,0x20(%rsp)
  0x0000000116b5cf57: mov    %r12,0x18(%rsp)
  0x0000000116b5cf5c: mov    %r13,0x10(%rsp)
  0x0000000116b5cf61: mov    %r14,0x8(%rsp)
  0x0000000116b5cf66: mov    %r15,(%rsp)
  0x0000000116b5cf6a: movabs $0x10cc63f17,%rdi
  0x0000000116b5cf74: movabs $0x116b5cf14,%rsi
  0x0000000116b5cf7e: mov    %rsp,%rdx
  0x0000000116b5cf81: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5cf85: callq  0x000000010c7dd830
  0x0000000116b5cf8a: hlt    
  0x0000000116b5cf8b: pop    %r10
  0x0000000116b5cf8d: mov    %r15,%rdi
  0x0000000116b5cf90: mov    %rbp,0x290(%r15)
  0x0000000116b5cf97: mov    %rax,0x280(%r15)
  0x0000000116b5cf9e: test   $0xf,%esp
  0x0000000116b5cfa4: je     0x0000000116b5cfbc
  0x0000000116b5cfaa: sub    $0x8,%rsp
  0x0000000116b5cfae: callq  0x000000010c58e1c0
  0x0000000116b5cfb3: add    $0x8,%rsp
  0x0000000116b5cfb7: jmpq   0x0000000116b5cfc1
  0x0000000116b5cfbc: callq  0x000000010c58e1c0
  0x0000000116b5cfc1: push   %rax
  0x0000000116b5cfc2: push   %rdi
  0x0000000116b5cfc3: push   %rsi
  0x0000000116b5cfc4: push   %rdx
  0x0000000116b5cfc5: push   %rcx
  0x0000000116b5cfc6: push   %r8
  0x0000000116b5cfc8: push   %r9
  0x0000000116b5cfca: push   %r10
  0x0000000116b5cfcc: mov    %rsp,%r10
  0x0000000116b5cfcf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5cfd3: push   %r10
  0x0000000116b5cfd5: push   %r11
  0x0000000116b5cfd7: mov    $0x109,%edi
  0x0000000116b5cfdc: movabs $0x7ff815049fd5,%r10
  0x0000000116b5cfe6: callq  *%r10
  0x0000000116b5cfe9: pop    %r11
  0x0000000116b5cfeb: pop    %rsp
  0x0000000116b5cfec: pop    %r10
  0x0000000116b5cfee: pop    %r9
  0x0000000116b5cff0: pop    %r8
  0x0000000116b5cff2: pop    %rcx
  0x0000000116b5cff3: pop    %rdx
  0x0000000116b5cff4: pop    %rsi
  0x0000000116b5cff5: pop    %rdi
  0x0000000116b5cff6: cmp    %rax,%r15
  0x0000000116b5cff9: je     0x0000000116b5d076
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5cfff: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d004: sub    $0x80,%rsp
  0x0000000116b5d00b: mov    %rax,0x78(%rsp)
  0x0000000116b5d010: mov    %rcx,0x70(%rsp)
  0x0000000116b5d015: mov    %rdx,0x68(%rsp)
  0x0000000116b5d01a: mov    %rbx,0x60(%rsp)
  0x0000000116b5d01f: mov    %rbp,0x50(%rsp)
  0x0000000116b5d024: mov    %rsi,0x48(%rsp)
  0x0000000116b5d029: mov    %rdi,0x40(%rsp)
  0x0000000116b5d02e: mov    %r8,0x38(%rsp)
  0x0000000116b5d033: mov    %r9,0x30(%rsp)
  0x0000000116b5d038: mov    %r10,0x28(%rsp)
  0x0000000116b5d03d: mov    %r11,0x20(%rsp)
  0x0000000116b5d042: mov    %r12,0x18(%rsp)
  0x0000000116b5d047: mov    %r13,0x10(%rsp)
  0x0000000116b5d04c: mov    %r14,0x8(%rsp)
  0x0000000116b5d051: mov    %r15,(%rsp)
  0x0000000116b5d055: movabs $0x10cc6405e,%rdi
  0x0000000116b5d05f: movabs $0x116b5cfff,%rsi
  0x0000000116b5d069: mov    %rsp,%rdx
  0x0000000116b5d06c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d070: callq  0x000000010c7dd830
  0x0000000116b5d075: hlt    
  0x0000000116b5d076: pop    %rax
  0x0000000116b5d077: movabs $0x0,%r10
  0x0000000116b5d081: mov    %r10,0x280(%r15)
  0x0000000116b5d088: movabs $0x0,%r10
  0x0000000116b5d092: mov    %r10,0x290(%r15)
  0x0000000116b5d099: movabs $0x0,%r10
  0x0000000116b5d0a3: mov    %r10,0x288(%r15)
  0x0000000116b5d0aa: cmpq   $0x0,0x8(%r15)
  0x0000000116b5d0b2: je     0x0000000116b5d0bd
  0x0000000116b5d0b8: jmpq   0x0000000116b30420
  0x0000000116b5d0bd: mov    -0x38(%rbp),%r13
  0x0000000116b5d0c1: mov    -0x30(%rbp),%r14
  0x0000000116b5d0c5: retq   
  0x0000000116b5d0c6: mov    -0x18(%rbp),%rbx
  0x0000000116b5d0ca: mov    0x70(%rbx),%r11
  0x0000000116b5d0ce: callq  *%r11
  0x0000000116b5d0d1: mov    -0x18(%rbp),%rbx
  0x0000000116b5d0d5: mov    %rax,0x18(%rbp)
  0x0000000116b5d0d9: mov    0x28(%rbx),%r11d
  0x0000000116b5d0dd: test   $0x8,%r11d
  0x0000000116b5d0e4: je     0x0000000116b5d102
  0x0000000116b5d0ea: mov    0x10(%rbx),%r11
  0x0000000116b5d0ee: mov    0x8(%r11),%r11
  0x0000000116b5d0f2: mov    0x20(%r11),%r11
  0x0000000116b5d0f6: mov    0x70(%r11),%r11
  0x0000000116b5d0fa: mov    %r11,0x10(%rbp)
  0x0000000116b5d0fe: lea    0x10(%rbp),%rsi
  0x0000000116b5d102: mov    0x68(%rbx),%rax
  0x0000000116b5d106: movabs $0x10c9c8cd0,%r11
  0x0000000116b5d110: cmp    %r11,%rax
  0x0000000116b5d113: jne    0x0000000116b5d37d
  0x0000000116b5d119: callq  0x0000000116b5d123
  0x0000000116b5d11e: jmpq   0x0000000116b5d375
  0x0000000116b5d123: mov    %rbx,%rsi
  0x0000000116b5d126: lea    0x8(%rsp),%rax
  0x0000000116b5d12b: mov    %r13,-0x38(%rbp)
  0x0000000116b5d12f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5d137: je     0x0000000116b5d1b4
  0x0000000116b5d13d: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d142: sub    $0x80,%rsp
  0x0000000116b5d149: mov    %rax,0x78(%rsp)
  0x0000000116b5d14e: mov    %rcx,0x70(%rsp)
  0x0000000116b5d153: mov    %rdx,0x68(%rsp)
  0x0000000116b5d158: mov    %rbx,0x60(%rsp)
  0x0000000116b5d15d: mov    %rbp,0x50(%rsp)
  0x0000000116b5d162: mov    %rsi,0x48(%rsp)
  0x0000000116b5d167: mov    %rdi,0x40(%rsp)
  0x0000000116b5d16c: mov    %r8,0x38(%rsp)
  0x0000000116b5d171: mov    %r9,0x30(%rsp)
  0x0000000116b5d176: mov    %r10,0x28(%rsp)
  0x0000000116b5d17b: mov    %r11,0x20(%rsp)
  0x0000000116b5d180: mov    %r12,0x18(%rsp)
  0x0000000116b5d185: mov    %r13,0x10(%rsp)
  0x0000000116b5d18a: mov    %r14,0x8(%rsp)
  0x0000000116b5d18f: mov    %r15,(%rsp)
  0x0000000116b5d193: movabs $0x10cc2363b,%rdi
  0x0000000116b5d19d: movabs $0x116b5d13d,%rsi
  0x0000000116b5d1a7: mov    %rsp,%rdx
  0x0000000116b5d1aa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d1ae: callq  0x000000010c7dd830
  0x0000000116b5d1b3: hlt    
  0x0000000116b5d1b4: push   %r10
  0x0000000116b5d1b6: cmp    -0x9d1690d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5d1bd: je     0x0000000116b5d23a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5d1c3: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d1c8: sub    $0x80,%rsp
  0x0000000116b5d1cf: mov    %rax,0x78(%rsp)
  0x0000000116b5d1d4: mov    %rcx,0x70(%rsp)
  0x0000000116b5d1d9: mov    %rdx,0x68(%rsp)
  0x0000000116b5d1de: mov    %rbx,0x60(%rsp)
  0x0000000116b5d1e3: mov    %rbp,0x50(%rsp)
  0x0000000116b5d1e8: mov    %rsi,0x48(%rsp)
  0x0000000116b5d1ed: mov    %rdi,0x40(%rsp)
  0x0000000116b5d1f2: mov    %r8,0x38(%rsp)
  0x0000000116b5d1f7: mov    %r9,0x30(%rsp)
  0x0000000116b5d1fc: mov    %r10,0x28(%rsp)
  0x0000000116b5d201: mov    %r11,0x20(%rsp)
  0x0000000116b5d206: mov    %r12,0x18(%rsp)
  0x0000000116b5d20b: mov    %r13,0x10(%rsp)
  0x0000000116b5d210: mov    %r14,0x8(%rsp)
  0x0000000116b5d215: mov    %r15,(%rsp)
  0x0000000116b5d219: movabs $0x10cc63f17,%rdi
  0x0000000116b5d223: movabs $0x116b5d1c3,%rsi
  0x0000000116b5d22d: mov    %rsp,%rdx
  0x0000000116b5d230: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d234: callq  0x000000010c7dd830
  0x0000000116b5d239: hlt    
  0x0000000116b5d23a: pop    %r10
  0x0000000116b5d23c: mov    %r15,%rdi
  0x0000000116b5d23f: mov    %rbp,0x290(%r15)
  0x0000000116b5d246: mov    %rax,0x280(%r15)
  0x0000000116b5d24d: test   $0xf,%esp
  0x0000000116b5d253: je     0x0000000116b5d26b
  0x0000000116b5d259: sub    $0x8,%rsp
  0x0000000116b5d25d: callq  0x000000010c58e1c0
  0x0000000116b5d262: add    $0x8,%rsp
  0x0000000116b5d266: jmpq   0x0000000116b5d270
  0x0000000116b5d26b: callq  0x000000010c58e1c0
  0x0000000116b5d270: push   %rax
  0x0000000116b5d271: push   %rdi
  0x0000000116b5d272: push   %rsi
  0x0000000116b5d273: push   %rdx
  0x0000000116b5d274: push   %rcx
  0x0000000116b5d275: push   %r8
  0x0000000116b5d277: push   %r9
  0x0000000116b5d279: push   %r10
  0x0000000116b5d27b: mov    %rsp,%r10
  0x0000000116b5d27e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d282: push   %r10
  0x0000000116b5d284: push   %r11
  0x0000000116b5d286: mov    $0x109,%edi
  0x0000000116b5d28b: movabs $0x7ff815049fd5,%r10
  0x0000000116b5d295: callq  *%r10
  0x0000000116b5d298: pop    %r11
  0x0000000116b5d29a: pop    %rsp
  0x0000000116b5d29b: pop    %r10
  0x0000000116b5d29d: pop    %r9
  0x0000000116b5d29f: pop    %r8
  0x0000000116b5d2a1: pop    %rcx
  0x0000000116b5d2a2: pop    %rdx
  0x0000000116b5d2a3: pop    %rsi
  0x0000000116b5d2a4: pop    %rdi
  0x0000000116b5d2a5: cmp    %rax,%r15
  0x0000000116b5d2a8: je     0x0000000116b5d325
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5d2ae: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d2b3: sub    $0x80,%rsp
  0x0000000116b5d2ba: mov    %rax,0x78(%rsp)
  0x0000000116b5d2bf: mov    %rcx,0x70(%rsp)
  0x0000000116b5d2c4: mov    %rdx,0x68(%rsp)
  0x0000000116b5d2c9: mov    %rbx,0x60(%rsp)
  0x0000000116b5d2ce: mov    %rbp,0x50(%rsp)
  0x0000000116b5d2d3: mov    %rsi,0x48(%rsp)
  0x0000000116b5d2d8: mov    %rdi,0x40(%rsp)
  0x0000000116b5d2dd: mov    %r8,0x38(%rsp)
  0x0000000116b5d2e2: mov    %r9,0x30(%rsp)
  0x0000000116b5d2e7: mov    %r10,0x28(%rsp)
  0x0000000116b5d2ec: mov    %r11,0x20(%rsp)
  0x0000000116b5d2f1: mov    %r12,0x18(%rsp)
  0x0000000116b5d2f6: mov    %r13,0x10(%rsp)
  0x0000000116b5d2fb: mov    %r14,0x8(%rsp)
  0x0000000116b5d300: mov    %r15,(%rsp)
  0x0000000116b5d304: movabs $0x10cc6405e,%rdi
  0x0000000116b5d30e: movabs $0x116b5d2ae,%rsi
  0x0000000116b5d318: mov    %rsp,%rdx
  0x0000000116b5d31b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d31f: callq  0x000000010c7dd830
  0x0000000116b5d324: hlt    
  0x0000000116b5d325: pop    %rax
  0x0000000116b5d326: movabs $0x0,%r10
  0x0000000116b5d330: mov    %r10,0x280(%r15)
  0x0000000116b5d337: movabs $0x0,%r10
  0x0000000116b5d341: mov    %r10,0x290(%r15)
  0x0000000116b5d348: movabs $0x0,%r10
  0x0000000116b5d352: mov    %r10,0x288(%r15)
  0x0000000116b5d359: cmpq   $0x0,0x8(%r15)
  0x0000000116b5d361: je     0x0000000116b5d36c
  0x0000000116b5d367: jmpq   0x0000000116b30420
  0x0000000116b5d36c: mov    -0x38(%rbp),%r13
  0x0000000116b5d370: mov    -0x30(%rbp),%r14
  0x0000000116b5d374: retq   
  0x0000000116b5d375: mov    -0x18(%rbp),%rbx
  0x0000000116b5d379: mov    0x68(%rbx),%rax
  0x0000000116b5d37d: lea    0x2a0(%r15),%rdi
  0x0000000116b5d384: mov    %rbp,0x290(%r15)
  0x0000000116b5d38b: movabs $0x116b5d384,%r10
  0x0000000116b5d395: mov    %r10,0x288(%r15)
  0x0000000116b5d39c: mov    %rsp,0x280(%r15)
  0x0000000116b5d3a3: mov    0x318(%r15),%r11d
  0x0000000116b5d3aa: cmp    $0x8,%r11d
  0x0000000116b5d3ae: je     0x0000000116b5d42b
  0x0000000116b5d3b4: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d3b9: sub    $0x80,%rsp
  0x0000000116b5d3c0: mov    %rax,0x78(%rsp)
  0x0000000116b5d3c5: mov    %rcx,0x70(%rsp)
  0x0000000116b5d3ca: mov    %rdx,0x68(%rsp)
  0x0000000116b5d3cf: mov    %rbx,0x60(%rsp)
  0x0000000116b5d3d4: mov    %rbp,0x50(%rsp)
  0x0000000116b5d3d9: mov    %rsi,0x48(%rsp)
  0x0000000116b5d3de: mov    %rdi,0x40(%rsp)
  0x0000000116b5d3e3: mov    %r8,0x38(%rsp)
  0x0000000116b5d3e8: mov    %r9,0x30(%rsp)
  0x0000000116b5d3ed: mov    %r10,0x28(%rsp)
  0x0000000116b5d3f2: mov    %r11,0x20(%rsp)
  0x0000000116b5d3f7: mov    %r12,0x18(%rsp)
  0x0000000116b5d3fc: mov    %r13,0x10(%rsp)
  0x0000000116b5d401: mov    %r14,0x8(%rsp)
  0x0000000116b5d406: mov    %r15,(%rsp)
  0x0000000116b5d40a: movabs $0x10ccafca4,%rdi
  0x0000000116b5d414: movabs $0x116b5d3b4,%rsi
  0x0000000116b5d41e: mov    %rsp,%rdx
  0x0000000116b5d421: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d425: callq  0x000000010c7dd830
  0x0000000116b5d42a: hlt    
  0x0000000116b5d42b: movl   $0x4,0x318(%r15)
  0x0000000116b5d436: callq  *%rax
  0x0000000116b5d438: vzeroupper 
  0x0000000116b5d43b: sub    $0x10,%rsp
  0x0000000116b5d43f: vmovsd %xmm0,(%rsp)
  0x0000000116b5d444: sub    $0x10,%rsp
  0x0000000116b5d448: mov    %rax,(%rsp)
  0x0000000116b5d44c: movl   $0x5,0x318(%r15)
  0x0000000116b5d457: lock addl $0x0,(%rsp)
  0x0000000116b5d45c: cmpl   $0x0,-0x9d36e26(%rip)        # 0x000000010ce26640
  0x0000000116b5d466: jne    0x0000000116b5d47a
  0x0000000116b5d46c: cmpl   $0x0,0x30(%r15)
  0x0000000116b5d474: je     0x0000000116b5d493
  0x0000000116b5d47a: mov    %r15,%rdi
  0x0000000116b5d47d: mov    %rsp,%r12
  0x0000000116b5d480: sub    $0x0,%rsp
  0x0000000116b5d484: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d488: callq  0x000000010ca7ea20
  0x0000000116b5d48d: mov    %r12,%rsp
  0x0000000116b5d490: xor    %r12,%r12
  0x0000000116b5d493: movl   $0x8,0x318(%r15)
  0x0000000116b5d49e: movabs $0x0,%r10
  0x0000000116b5d4a8: mov    %r10,0x280(%r15)
  0x0000000116b5d4af: movabs $0x0,%r10
  0x0000000116b5d4b9: mov    %r10,0x290(%r15)
  0x0000000116b5d4c0: movabs $0x0,%r10
  0x0000000116b5d4ca: mov    %r10,0x288(%r15)
  0x0000000116b5d4d1: mov    0x38(%r15),%r11
  0x0000000116b5d4d5: movl   $0x0,0x108(%r11)
  0x0000000116b5d4e0: movabs $0x116b4ef3b,%r11
  0x0000000116b5d4ea: cmp    0x18(%rbp),%r11
  0x0000000116b5d4ee: jne    0x0000000116b5d529
  0x0000000116b5d4f4: mov    (%rsp),%rax
  0x0000000116b5d4f8: add    $0x10,%rsp
  0x0000000116b5d4fc: test   %rax,%rax
  0x0000000116b5d4ff: je     0x0000000116b5d51d
  0x0000000116b5d505: test   $0x1,%rax
  0x0000000116b5d50b: je     0x0000000116b5d51a
  0x0000000116b5d511: mov    -0x1(%rax),%rax
  0x0000000116b5d515: jmpq   0x0000000116b5d51d
  0x0000000116b5d51a: mov    (%rax),%rax
  0x0000000116b5d51d: mov    %rax,0x10(%rbp)
  0x0000000116b5d521: sub    $0x10,%rsp
  0x0000000116b5d525: mov    %rax,(%rsp)
  0x0000000116b5d529: cmpl   $0x1,0x344(%r15)
  0x0000000116b5d534: jne    0x0000000116b5d5f7
  0x0000000116b5d53a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d53f: sub    $0x80,%rsp
  0x0000000116b5d546: mov    %rax,0x78(%rsp)
  0x0000000116b5d54b: mov    %rcx,0x70(%rsp)
  0x0000000116b5d550: mov    %rdx,0x68(%rsp)
  0x0000000116b5d555: mov    %rbx,0x60(%rsp)
  0x0000000116b5d55a: mov    %rbp,0x50(%rsp)
  0x0000000116b5d55f: mov    %rsi,0x48(%rsp)
  0x0000000116b5d564: mov    %rdi,0x40(%rsp)
  0x0000000116b5d569: mov    %r8,0x38(%rsp)
  0x0000000116b5d56e: mov    %r9,0x30(%rsp)
  0x0000000116b5d573: mov    %r10,0x28(%rsp)
  0x0000000116b5d578: mov    %r11,0x20(%rsp)
  0x0000000116b5d57d: mov    %r12,0x18(%rsp)
  0x0000000116b5d582: mov    %r13,0x10(%rsp)
  0x0000000116b5d587: mov    %r14,0x8(%rsp)
  0x0000000116b5d58c: mov    %r15,(%rsp)
  0x0000000116b5d590: mov    %rsp,%r12
  0x0000000116b5d593: sub    $0x0,%rsp
  0x0000000116b5d597: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d59b: callq  0x000000010c9ccc30
  0x0000000116b5d5a0: mov    %r12,%rsp
  0x0000000116b5d5a3: mov    (%rsp),%r15
  0x0000000116b5d5a7: mov    0x8(%rsp),%r14
  0x0000000116b5d5ac: mov    0x10(%rsp),%r13
  0x0000000116b5d5b1: mov    0x18(%rsp),%r12
  0x0000000116b5d5b6: mov    0x20(%rsp),%r11
  0x0000000116b5d5bb: mov    0x28(%rsp),%r10
  0x0000000116b5d5c0: mov    0x30(%rsp),%r9
  0x0000000116b5d5c5: mov    0x38(%rsp),%r8
  0x0000000116b5d5ca: mov    0x40(%rsp),%rdi
  0x0000000116b5d5cf: mov    0x48(%rsp),%rsi
  0x0000000116b5d5d4: mov    0x50(%rsp),%rbp
  0x0000000116b5d5d9: mov    0x60(%rsp),%rbx
  0x0000000116b5d5de: mov    0x68(%rsp),%rdx
  0x0000000116b5d5e3: mov    0x70(%rsp),%rcx
  0x0000000116b5d5e8: mov    0x78(%rsp),%rax
  0x0000000116b5d5ed: add    $0x80,%rsp
  0x0000000116b5d5f4: xor    %r12,%r12
  0x0000000116b5d5f7: mov    -0x18(%rbp),%rbx
  0x0000000116b5d5fb: mov    0x10(%rbx),%r13
  0x0000000116b5d5ff: lea    0x30(%r13),%r13
  0x0000000116b5d603: cmpq   $0x0,0x8(%r15)
  0x0000000116b5d60b: je     0x0000000116b5d8e1
  0x0000000116b5d611: callq  0x0000000116b5d61b
  0x0000000116b5d616: jmpq   0x0000000116b5d86a
  0x0000000116b5d61b: lea    0x8(%rsp),%rax
  0x0000000116b5d620: mov    %r13,-0x38(%rbp)
  0x0000000116b5d624: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5d62c: je     0x0000000116b5d6a9
  0x0000000116b5d632: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d637: sub    $0x80,%rsp
  0x0000000116b5d63e: mov    %rax,0x78(%rsp)
  0x0000000116b5d643: mov    %rcx,0x70(%rsp)
  0x0000000116b5d648: mov    %rdx,0x68(%rsp)
  0x0000000116b5d64d: mov    %rbx,0x60(%rsp)
  0x0000000116b5d652: mov    %rbp,0x50(%rsp)
  0x0000000116b5d657: mov    %rsi,0x48(%rsp)
  0x0000000116b5d65c: mov    %rdi,0x40(%rsp)
  0x0000000116b5d661: mov    %r8,0x38(%rsp)
  0x0000000116b5d666: mov    %r9,0x30(%rsp)
  0x0000000116b5d66b: mov    %r10,0x28(%rsp)
  0x0000000116b5d670: mov    %r11,0x20(%rsp)
  0x0000000116b5d675: mov    %r12,0x18(%rsp)
  0x0000000116b5d67a: mov    %r13,0x10(%rsp)
  0x0000000116b5d67f: mov    %r14,0x8(%rsp)
  0x0000000116b5d684: mov    %r15,(%rsp)
  0x0000000116b5d688: movabs $0x10cc2363b,%rdi
  0x0000000116b5d692: movabs $0x116b5d632,%rsi
  0x0000000116b5d69c: mov    %rsp,%rdx
  0x0000000116b5d69f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d6a3: callq  0x000000010c7dd830
  0x0000000116b5d6a8: hlt    
  0x0000000116b5d6a9: push   %r10
  0x0000000116b5d6ab: cmp    -0x9d16e02(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5d6b2: je     0x0000000116b5d72f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5d6b8: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d6bd: sub    $0x80,%rsp
  0x0000000116b5d6c4: mov    %rax,0x78(%rsp)
  0x0000000116b5d6c9: mov    %rcx,0x70(%rsp)
  0x0000000116b5d6ce: mov    %rdx,0x68(%rsp)
  0x0000000116b5d6d3: mov    %rbx,0x60(%rsp)
  0x0000000116b5d6d8: mov    %rbp,0x50(%rsp)
  0x0000000116b5d6dd: mov    %rsi,0x48(%rsp)
  0x0000000116b5d6e2: mov    %rdi,0x40(%rsp)
  0x0000000116b5d6e7: mov    %r8,0x38(%rsp)
  0x0000000116b5d6ec: mov    %r9,0x30(%rsp)
  0x0000000116b5d6f1: mov    %r10,0x28(%rsp)
  0x0000000116b5d6f6: mov    %r11,0x20(%rsp)
  0x0000000116b5d6fb: mov    %r12,0x18(%rsp)
  0x0000000116b5d700: mov    %r13,0x10(%rsp)
  0x0000000116b5d705: mov    %r14,0x8(%rsp)
  0x0000000116b5d70a: mov    %r15,(%rsp)
  0x0000000116b5d70e: movabs $0x10cc63f17,%rdi
  0x0000000116b5d718: movabs $0x116b5d6b8,%rsi
  0x0000000116b5d722: mov    %rsp,%rdx
  0x0000000116b5d725: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d729: callq  0x000000010c7dd830
  0x0000000116b5d72e: hlt    
  0x0000000116b5d72f: pop    %r10
  0x0000000116b5d731: mov    %r15,%rdi
  0x0000000116b5d734: mov    %rbp,0x290(%r15)
  0x0000000116b5d73b: mov    %rax,0x280(%r15)
  0x0000000116b5d742: test   $0xf,%esp
  0x0000000116b5d748: je     0x0000000116b5d760
  0x0000000116b5d74e: sub    $0x8,%rsp
  0x0000000116b5d752: callq  0x000000010c5881a0
  0x0000000116b5d757: add    $0x8,%rsp
  0x0000000116b5d75b: jmpq   0x0000000116b5d765
  0x0000000116b5d760: callq  0x000000010c5881a0
  0x0000000116b5d765: push   %rax
  0x0000000116b5d766: push   %rdi
  0x0000000116b5d767: push   %rsi
  0x0000000116b5d768: push   %rdx
  0x0000000116b5d769: push   %rcx
  0x0000000116b5d76a: push   %r8
  0x0000000116b5d76c: push   %r9
  0x0000000116b5d76e: push   %r10
  0x0000000116b5d770: mov    %rsp,%r10
  0x0000000116b5d773: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d777: push   %r10
  0x0000000116b5d779: push   %r11
  0x0000000116b5d77b: mov    $0x109,%edi
  0x0000000116b5d780: movabs $0x7ff815049fd5,%r10
  0x0000000116b5d78a: callq  *%r10
  0x0000000116b5d78d: pop    %r11
  0x0000000116b5d78f: pop    %rsp
  0x0000000116b5d790: pop    %r10
  0x0000000116b5d792: pop    %r9
  0x0000000116b5d794: pop    %r8
  0x0000000116b5d796: pop    %rcx
  0x0000000116b5d797: pop    %rdx
  0x0000000116b5d798: pop    %rsi
  0x0000000116b5d799: pop    %rdi
  0x0000000116b5d79a: cmp    %rax,%r15
  0x0000000116b5d79d: je     0x0000000116b5d81a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5d7a3: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d7a8: sub    $0x80,%rsp
  0x0000000116b5d7af: mov    %rax,0x78(%rsp)
  0x0000000116b5d7b4: mov    %rcx,0x70(%rsp)
  0x0000000116b5d7b9: mov    %rdx,0x68(%rsp)
  0x0000000116b5d7be: mov    %rbx,0x60(%rsp)
  0x0000000116b5d7c3: mov    %rbp,0x50(%rsp)
  0x0000000116b5d7c8: mov    %rsi,0x48(%rsp)
  0x0000000116b5d7cd: mov    %rdi,0x40(%rsp)
  0x0000000116b5d7d2: mov    %r8,0x38(%rsp)
  0x0000000116b5d7d7: mov    %r9,0x30(%rsp)
  0x0000000116b5d7dc: mov    %r10,0x28(%rsp)
  0x0000000116b5d7e1: mov    %r11,0x20(%rsp)
  0x0000000116b5d7e6: mov    %r12,0x18(%rsp)
  0x0000000116b5d7eb: mov    %r13,0x10(%rsp)
  0x0000000116b5d7f0: mov    %r14,0x8(%rsp)
  0x0000000116b5d7f5: mov    %r15,(%rsp)
  0x0000000116b5d7f9: movabs $0x10cc6405e,%rdi
  0x0000000116b5d803: movabs $0x116b5d7a3,%rsi
  0x0000000116b5d80d: mov    %rsp,%rdx
  0x0000000116b5d810: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d814: callq  0x000000010c7dd830
  0x0000000116b5d819: hlt    
  0x0000000116b5d81a: pop    %rax
  0x0000000116b5d81b: movabs $0x0,%r10
  0x0000000116b5d825: mov    %r10,0x280(%r15)
  0x0000000116b5d82c: movabs $0x0,%r10
  0x0000000116b5d836: mov    %r10,0x290(%r15)
  0x0000000116b5d83d: movabs $0x0,%r10
  0x0000000116b5d847: mov    %r10,0x288(%r15)
  0x0000000116b5d84e: cmpq   $0x0,0x8(%r15)
  0x0000000116b5d856: je     0x0000000116b5d861
  0x0000000116b5d85c: jmpq   0x0000000116b30420
  0x0000000116b5d861: mov    -0x38(%rbp),%r13
  0x0000000116b5d865: mov    -0x30(%rbp),%r14
  0x0000000116b5d869: retq   
  0x0000000116b5d86a: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d86f: sub    $0x80,%rsp
  0x0000000116b5d876: mov    %rax,0x78(%rsp)
  0x0000000116b5d87b: mov    %rcx,0x70(%rsp)
  0x0000000116b5d880: mov    %rdx,0x68(%rsp)
  0x0000000116b5d885: mov    %rbx,0x60(%rsp)
  0x0000000116b5d88a: mov    %rbp,0x50(%rsp)
  0x0000000116b5d88f: mov    %rsi,0x48(%rsp)
  0x0000000116b5d894: mov    %rdi,0x40(%rsp)
  0x0000000116b5d899: mov    %r8,0x38(%rsp)
  0x0000000116b5d89e: mov    %r9,0x30(%rsp)
  0x0000000116b5d8a3: mov    %r10,0x28(%rsp)
  0x0000000116b5d8a8: mov    %r11,0x20(%rsp)
  0x0000000116b5d8ad: mov    %r12,0x18(%rsp)
  0x0000000116b5d8b2: mov    %r13,0x10(%rsp)
  0x0000000116b5d8b7: mov    %r14,0x8(%rsp)
  0x0000000116b5d8bc: mov    %r15,(%rsp)
  0x0000000116b5d8c0: movabs $0x10cb763be,%rdi
  0x0000000116b5d8ca: movabs $0x116b5d86a,%rsi
  0x0000000116b5d8d4: mov    %rsp,%rdx
  0x0000000116b5d8d7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d8db: callq  0x000000010c7dd830
  0x0000000116b5d8e0: hlt    
  0x0000000116b5d8e1: mov    0x28(%rbx),%r11d
  0x0000000116b5d8e5: test   $0x20,%r11d
  0x0000000116b5d8ec: je     0x0000000116b5de6f
  0x0000000116b5d8f2: lea    -0x50(%rbp),%rsi
  0x0000000116b5d8f6: mov    0x8(%rsi),%r11
  0x0000000116b5d8fa: test   %r11,%r11
  0x0000000116b5d8fd: jne    0x0000000116b5dbd3
  0x0000000116b5d903: callq  0x0000000116b5d90d
  0x0000000116b5d908: jmpq   0x0000000116b5db5c
  0x0000000116b5d90d: lea    0x8(%rsp),%rax
  0x0000000116b5d912: mov    %r13,-0x38(%rbp)
  0x0000000116b5d916: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5d91e: je     0x0000000116b5d99b
  0x0000000116b5d924: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d929: sub    $0x80,%rsp
  0x0000000116b5d930: mov    %rax,0x78(%rsp)
  0x0000000116b5d935: mov    %rcx,0x70(%rsp)
  0x0000000116b5d93a: mov    %rdx,0x68(%rsp)
  0x0000000116b5d93f: mov    %rbx,0x60(%rsp)
  0x0000000116b5d944: mov    %rbp,0x50(%rsp)
  0x0000000116b5d949: mov    %rsi,0x48(%rsp)
  0x0000000116b5d94e: mov    %rdi,0x40(%rsp)
  0x0000000116b5d953: mov    %r8,0x38(%rsp)
  0x0000000116b5d958: mov    %r9,0x30(%rsp)
  0x0000000116b5d95d: mov    %r10,0x28(%rsp)
  0x0000000116b5d962: mov    %r11,0x20(%rsp)
  0x0000000116b5d967: mov    %r12,0x18(%rsp)
  0x0000000116b5d96c: mov    %r13,0x10(%rsp)
  0x0000000116b5d971: mov    %r14,0x8(%rsp)
  0x0000000116b5d976: mov    %r15,(%rsp)
  0x0000000116b5d97a: movabs $0x10cc2363b,%rdi
  0x0000000116b5d984: movabs $0x116b5d924,%rsi
  0x0000000116b5d98e: mov    %rsp,%rdx
  0x0000000116b5d991: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5d995: callq  0x000000010c7dd830
  0x0000000116b5d99a: hlt    
  0x0000000116b5d99b: push   %r10
  0x0000000116b5d99d: cmp    -0x9d170f4(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5d9a4: je     0x0000000116b5da21
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5d9aa: mov    %rsp,-0x28(%rsp)
  0x0000000116b5d9af: sub    $0x80,%rsp
  0x0000000116b5d9b6: mov    %rax,0x78(%rsp)
  0x0000000116b5d9bb: mov    %rcx,0x70(%rsp)
  0x0000000116b5d9c0: mov    %rdx,0x68(%rsp)
  0x0000000116b5d9c5: mov    %rbx,0x60(%rsp)
  0x0000000116b5d9ca: mov    %rbp,0x50(%rsp)
  0x0000000116b5d9cf: mov    %rsi,0x48(%rsp)
  0x0000000116b5d9d4: mov    %rdi,0x40(%rsp)
  0x0000000116b5d9d9: mov    %r8,0x38(%rsp)
  0x0000000116b5d9de: mov    %r9,0x30(%rsp)
  0x0000000116b5d9e3: mov    %r10,0x28(%rsp)
  0x0000000116b5d9e8: mov    %r11,0x20(%rsp)
  0x0000000116b5d9ed: mov    %r12,0x18(%rsp)
  0x0000000116b5d9f2: mov    %r13,0x10(%rsp)
  0x0000000116b5d9f7: mov    %r14,0x8(%rsp)
  0x0000000116b5d9fc: mov    %r15,(%rsp)
  0x0000000116b5da00: movabs $0x10cc63f17,%rdi
  0x0000000116b5da0a: movabs $0x116b5d9aa,%rsi
  0x0000000116b5da14: mov    %rsp,%rdx
  0x0000000116b5da17: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5da1b: callq  0x000000010c7dd830
  0x0000000116b5da20: hlt    
  0x0000000116b5da21: pop    %r10
  0x0000000116b5da23: mov    %r15,%rdi
  0x0000000116b5da26: mov    %rbp,0x290(%r15)
  0x0000000116b5da2d: mov    %rax,0x280(%r15)
  0x0000000116b5da34: test   $0xf,%esp
  0x0000000116b5da3a: je     0x0000000116b5da52
  0x0000000116b5da40: sub    $0x8,%rsp
  0x0000000116b5da44: callq  0x000000010c5892a0
  0x0000000116b5da49: add    $0x8,%rsp
  0x0000000116b5da4d: jmpq   0x0000000116b5da57
  0x0000000116b5da52: callq  0x000000010c5892a0
  0x0000000116b5da57: push   %rax
  0x0000000116b5da58: push   %rdi
  0x0000000116b5da59: push   %rsi
  0x0000000116b5da5a: push   %rdx
  0x0000000116b5da5b: push   %rcx
  0x0000000116b5da5c: push   %r8
  0x0000000116b5da5e: push   %r9
  0x0000000116b5da60: push   %r10
  0x0000000116b5da62: mov    %rsp,%r10
  0x0000000116b5da65: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5da69: push   %r10
  0x0000000116b5da6b: push   %r11
  0x0000000116b5da6d: mov    $0x109,%edi
  0x0000000116b5da72: movabs $0x7ff815049fd5,%r10
  0x0000000116b5da7c: callq  *%r10
  0x0000000116b5da7f: pop    %r11
  0x0000000116b5da81: pop    %rsp
  0x0000000116b5da82: pop    %r10
  0x0000000116b5da84: pop    %r9
  0x0000000116b5da86: pop    %r8
  0x0000000116b5da88: pop    %rcx
  0x0000000116b5da89: pop    %rdx
  0x0000000116b5da8a: pop    %rsi
  0x0000000116b5da8b: pop    %rdi
  0x0000000116b5da8c: cmp    %rax,%r15
  0x0000000116b5da8f: je     0x0000000116b5db0c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5da95: mov    %rsp,-0x28(%rsp)
  0x0000000116b5da9a: sub    $0x80,%rsp
  0x0000000116b5daa1: mov    %rax,0x78(%rsp)
  0x0000000116b5daa6: mov    %rcx,0x70(%rsp)
  0x0000000116b5daab: mov    %rdx,0x68(%rsp)
  0x0000000116b5dab0: mov    %rbx,0x60(%rsp)
  0x0000000116b5dab5: mov    %rbp,0x50(%rsp)
  0x0000000116b5daba: mov    %rsi,0x48(%rsp)
  0x0000000116b5dabf: mov    %rdi,0x40(%rsp)
  0x0000000116b5dac4: mov    %r8,0x38(%rsp)
  0x0000000116b5dac9: mov    %r9,0x30(%rsp)
  0x0000000116b5dace: mov    %r10,0x28(%rsp)
  0x0000000116b5dad3: mov    %r11,0x20(%rsp)
  0x0000000116b5dad8: mov    %r12,0x18(%rsp)
  0x0000000116b5dadd: mov    %r13,0x10(%rsp)
  0x0000000116b5dae2: mov    %r14,0x8(%rsp)
  0x0000000116b5dae7: mov    %r15,(%rsp)
  0x0000000116b5daeb: movabs $0x10cc6405e,%rdi
  0x0000000116b5daf5: movabs $0x116b5da95,%rsi
  0x0000000116b5daff: mov    %rsp,%rdx
  0x0000000116b5db02: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5db06: callq  0x000000010c7dd830
  0x0000000116b5db0b: hlt    
  0x0000000116b5db0c: pop    %rax
  0x0000000116b5db0d: movabs $0x0,%r10
  0x0000000116b5db17: mov    %r10,0x280(%r15)
  0x0000000116b5db1e: movabs $0x0,%r10
  0x0000000116b5db28: mov    %r10,0x290(%r15)
  0x0000000116b5db2f: movabs $0x0,%r10
  0x0000000116b5db39: mov    %r10,0x288(%r15)
  0x0000000116b5db40: cmpq   $0x0,0x8(%r15)
  0x0000000116b5db48: je     0x0000000116b5db53
  0x0000000116b5db4e: jmpq   0x0000000116b30420
  0x0000000116b5db53: mov    -0x38(%rbp),%r13
  0x0000000116b5db57: mov    -0x30(%rbp),%r14
  0x0000000116b5db5b: retq   
  0x0000000116b5db5c: mov    %rsp,-0x28(%rsp)
  0x0000000116b5db61: sub    $0x80,%rsp
  0x0000000116b5db68: mov    %rax,0x78(%rsp)
  0x0000000116b5db6d: mov    %rcx,0x70(%rsp)
  0x0000000116b5db72: mov    %rdx,0x68(%rsp)
  0x0000000116b5db77: mov    %rbx,0x60(%rsp)
  0x0000000116b5db7c: mov    %rbp,0x50(%rsp)
  0x0000000116b5db81: mov    %rsi,0x48(%rsp)
  0x0000000116b5db86: mov    %rdi,0x40(%rsp)
  0x0000000116b5db8b: mov    %r8,0x38(%rsp)
  0x0000000116b5db90: mov    %r9,0x30(%rsp)
  0x0000000116b5db95: mov    %r10,0x28(%rsp)
  0x0000000116b5db9a: mov    %r11,0x20(%rsp)
  0x0000000116b5db9f: mov    %r12,0x18(%rsp)
  0x0000000116b5dba4: mov    %r13,0x10(%rsp)
  0x0000000116b5dba9: mov    %r14,0x8(%rsp)
  0x0000000116b5dbae: mov    %r15,(%rsp)
  0x0000000116b5dbb2: movabs $0x10cb763be,%rdi
  0x0000000116b5dbbc: movabs $0x116b5db5c,%rsi
  0x0000000116b5dbc6: mov    %rsp,%rdx
  0x0000000116b5dbc9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5dbcd: callq  0x000000010c7dd830
  0x0000000116b5dbd2: hlt    
  0x0000000116b5dbd3: mov    %r13,-0x38(%rbp)
  0x0000000116b5dbd7: lea    (%rsi),%rax
  0x0000000116b5dbda: mov    0x8(%rsi),%rcx
  0x0000000116b5dbde: movq   $0x0,0x8(%rsi)
  0x0000000116b5dbe6: mov    (%rcx),%rdx
  0x0000000116b5dbe9: and    $0x7,%rdx
  0x0000000116b5dbed: cmp    $0x5,%rdx
  0x0000000116b5dbf1: je     0x0000000116b5de6b
  0x0000000116b5dbf7: mov    (%rax),%rdx
  0x0000000116b5dbfa: test   %rdx,%rdx
  0x0000000116b5dbfd: je     0x0000000116b5de6b
  0x0000000116b5dc03: lock cmpxchg %rdx,(%rcx)
  0x0000000116b5dc08: je     0x0000000116b5de6b
  0x0000000116b5dc0e: mov    %rcx,0x8(%rsi)
  0x0000000116b5dc12: callq  0x0000000116b5dc1c
  0x0000000116b5dc17: jmpq   0x0000000116b5de6b
  0x0000000116b5dc1c: lea    0x8(%rsp),%rax
  0x0000000116b5dc21: mov    %r13,-0x38(%rbp)
  0x0000000116b5dc25: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5dc2d: je     0x0000000116b5dcaa
  0x0000000116b5dc33: mov    %rsp,-0x28(%rsp)
  0x0000000116b5dc38: sub    $0x80,%rsp
  0x0000000116b5dc3f: mov    %rax,0x78(%rsp)
  0x0000000116b5dc44: mov    %rcx,0x70(%rsp)
  0x0000000116b5dc49: mov    %rdx,0x68(%rsp)
  0x0000000116b5dc4e: mov    %rbx,0x60(%rsp)
  0x0000000116b5dc53: mov    %rbp,0x50(%rsp)
  0x0000000116b5dc58: mov    %rsi,0x48(%rsp)
  0x0000000116b5dc5d: mov    %rdi,0x40(%rsp)
  0x0000000116b5dc62: mov    %r8,0x38(%rsp)
  0x0000000116b5dc67: mov    %r9,0x30(%rsp)
  0x0000000116b5dc6c: mov    %r10,0x28(%rsp)
  0x0000000116b5dc71: mov    %r11,0x20(%rsp)
  0x0000000116b5dc76: mov    %r12,0x18(%rsp)
  0x0000000116b5dc7b: mov    %r13,0x10(%rsp)
  0x0000000116b5dc80: mov    %r14,0x8(%rsp)
  0x0000000116b5dc85: mov    %r15,(%rsp)
  0x0000000116b5dc89: movabs $0x10cc2363b,%rdi
  0x0000000116b5dc93: movabs $0x116b5dc33,%rsi
  0x0000000116b5dc9d: mov    %rsp,%rdx
  0x0000000116b5dca0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5dca4: callq  0x000000010c7dd830
  0x0000000116b5dca9: hlt    
  0x0000000116b5dcaa: push   %r10
  0x0000000116b5dcac: cmp    -0x9d17403(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5dcb3: je     0x0000000116b5dd30
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5dcb9: mov    %rsp,-0x28(%rsp)
  0x0000000116b5dcbe: sub    $0x80,%rsp
  0x0000000116b5dcc5: mov    %rax,0x78(%rsp)
  0x0000000116b5dcca: mov    %rcx,0x70(%rsp)
  0x0000000116b5dccf: mov    %rdx,0x68(%rsp)
  0x0000000116b5dcd4: mov    %rbx,0x60(%rsp)
  0x0000000116b5dcd9: mov    %rbp,0x50(%rsp)
  0x0000000116b5dcde: mov    %rsi,0x48(%rsp)
  0x0000000116b5dce3: mov    %rdi,0x40(%rsp)
  0x0000000116b5dce8: mov    %r8,0x38(%rsp)
  0x0000000116b5dced: mov    %r9,0x30(%rsp)
  0x0000000116b5dcf2: mov    %r10,0x28(%rsp)
  0x0000000116b5dcf7: mov    %r11,0x20(%rsp)
  0x0000000116b5dcfc: mov    %r12,0x18(%rsp)
  0x0000000116b5dd01: mov    %r13,0x10(%rsp)
  0x0000000116b5dd06: mov    %r14,0x8(%rsp)
  0x0000000116b5dd0b: mov    %r15,(%rsp)
  0x0000000116b5dd0f: movabs $0x10cc63f17,%rdi
  0x0000000116b5dd19: movabs $0x116b5dcb9,%rsi
  0x0000000116b5dd23: mov    %rsp,%rdx
  0x0000000116b5dd26: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5dd2a: callq  0x000000010c7dd830
  0x0000000116b5dd2f: hlt    
  0x0000000116b5dd30: pop    %r10
  0x0000000116b5dd32: mov    %r15,%rdi
  0x0000000116b5dd35: mov    %rbp,0x290(%r15)
  0x0000000116b5dd3c: mov    %rax,0x280(%r15)
  0x0000000116b5dd43: test   $0xf,%esp
  0x0000000116b5dd49: je     0x0000000116b5dd61
  0x0000000116b5dd4f: sub    $0x8,%rsp
  0x0000000116b5dd53: callq  0x000000010c588f80
  0x0000000116b5dd58: add    $0x8,%rsp
  0x0000000116b5dd5c: jmpq   0x0000000116b5dd66
  0x0000000116b5dd61: callq  0x000000010c588f80
  0x0000000116b5dd66: push   %rax
  0x0000000116b5dd67: push   %rdi
  0x0000000116b5dd68: push   %rsi
  0x0000000116b5dd69: push   %rdx
  0x0000000116b5dd6a: push   %rcx
  0x0000000116b5dd6b: push   %r8
  0x0000000116b5dd6d: push   %r9
  0x0000000116b5dd6f: push   %r10
  0x0000000116b5dd71: mov    %rsp,%r10
  0x0000000116b5dd74: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5dd78: push   %r10
  0x0000000116b5dd7a: push   %r11
  0x0000000116b5dd7c: mov    $0x109,%edi
  0x0000000116b5dd81: movabs $0x7ff815049fd5,%r10
  0x0000000116b5dd8b: callq  *%r10
  0x0000000116b5dd8e: pop    %r11
  0x0000000116b5dd90: pop    %rsp
  0x0000000116b5dd91: pop    %r10
  0x0000000116b5dd93: pop    %r9
  0x0000000116b5dd95: pop    %r8
  0x0000000116b5dd97: pop    %rcx
  0x0000000116b5dd98: pop    %rdx
  0x0000000116b5dd99: pop    %rsi
  0x0000000116b5dd9a: pop    %rdi
  0x0000000116b5dd9b: cmp    %rax,%r15
  0x0000000116b5dd9e: je     0x0000000116b5de1b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5dda4: mov    %rsp,-0x28(%rsp)
  0x0000000116b5dda9: sub    $0x80,%rsp
  0x0000000116b5ddb0: mov    %rax,0x78(%rsp)
  0x0000000116b5ddb5: mov    %rcx,0x70(%rsp)
  0x0000000116b5ddba: mov    %rdx,0x68(%rsp)
  0x0000000116b5ddbf: mov    %rbx,0x60(%rsp)
  0x0000000116b5ddc4: mov    %rbp,0x50(%rsp)
  0x0000000116b5ddc9: mov    %rsi,0x48(%rsp)
  0x0000000116b5ddce: mov    %rdi,0x40(%rsp)
  0x0000000116b5ddd3: mov    %r8,0x38(%rsp)
  0x0000000116b5ddd8: mov    %r9,0x30(%rsp)
  0x0000000116b5dddd: mov    %r10,0x28(%rsp)
  0x0000000116b5dde2: mov    %r11,0x20(%rsp)
  0x0000000116b5dde7: mov    %r12,0x18(%rsp)
  0x0000000116b5ddec: mov    %r13,0x10(%rsp)
  0x0000000116b5ddf1: mov    %r14,0x8(%rsp)
  0x0000000116b5ddf6: mov    %r15,(%rsp)
  0x0000000116b5ddfa: movabs $0x10cc6405e,%rdi
  0x0000000116b5de04: movabs $0x116b5dda4,%rsi
  0x0000000116b5de0e: mov    %rsp,%rdx
  0x0000000116b5de11: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5de15: callq  0x000000010c7dd830
  0x0000000116b5de1a: hlt    
  0x0000000116b5de1b: pop    %rax
  0x0000000116b5de1c: movabs $0x0,%r10
  0x0000000116b5de26: mov    %r10,0x280(%r15)
  0x0000000116b5de2d: movabs $0x0,%r10
  0x0000000116b5de37: mov    %r10,0x290(%r15)
  0x0000000116b5de3e: movabs $0x0,%r10
  0x0000000116b5de48: mov    %r10,0x288(%r15)
  0x0000000116b5de4f: cmpq   $0x0,0x8(%r15)
  0x0000000116b5de57: je     0x0000000116b5de62
  0x0000000116b5de5d: jmpq   0x0000000116b30420
  0x0000000116b5de62: mov    -0x38(%rbp),%r13
  0x0000000116b5de66: mov    -0x30(%rbp),%r14
  0x0000000116b5de6a: retq   
  0x0000000116b5de6b: mov    -0x38(%rbp),%r13
  0x0000000116b5de6f: cmpb   $0x0,-0x9d40c74(%rip)        # 0x000000010ce1d202
  0x0000000116b5de76: je     0x0000000116b5df2b
  0x0000000116b5de7c: mov    -0x18(%rbp),%rsi
  0x0000000116b5de80: mov    %r15,%rdi
  0x0000000116b5de83: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5de8b: je     0x0000000116b5df08
  0x0000000116b5de91: mov    %rsp,-0x28(%rsp)
  0x0000000116b5de96: sub    $0x80,%rsp
  0x0000000116b5de9d: mov    %rax,0x78(%rsp)
  0x0000000116b5dea2: mov    %rcx,0x70(%rsp)
  0x0000000116b5dea7: mov    %rdx,0x68(%rsp)
  0x0000000116b5deac: mov    %rbx,0x60(%rsp)
  0x0000000116b5deb1: mov    %rbp,0x50(%rsp)
  0x0000000116b5deb6: mov    %rsi,0x48(%rsp)
  0x0000000116b5debb: mov    %rdi,0x40(%rsp)
  0x0000000116b5dec0: mov    %r8,0x38(%rsp)
  0x0000000116b5dec5: mov    %r9,0x30(%rsp)
  0x0000000116b5deca: mov    %r10,0x28(%rsp)
  0x0000000116b5decf: mov    %r11,0x20(%rsp)
  0x0000000116b5ded4: mov    %r12,0x18(%rsp)
  0x0000000116b5ded9: mov    %r13,0x10(%rsp)
  0x0000000116b5dede: mov    %r14,0x8(%rsp)
  0x0000000116b5dee3: mov    %r15,(%rsp)
  0x0000000116b5dee7: movabs $0x10cc2363b,%rdi
  0x0000000116b5def1: movabs $0x116b5de91,%rsi
  0x0000000116b5defb: mov    %rsp,%rdx
  0x0000000116b5defe: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5df02: callq  0x000000010c7dd830
  0x0000000116b5df07: hlt    
  0x0000000116b5df08: test   $0xf,%esp
  0x0000000116b5df0e: je     0x0000000116b5df26
  0x0000000116b5df14: sub    $0x8,%rsp
  0x0000000116b5df18: callq  0x000000010c9c9850
  0x0000000116b5df1d: add    $0x8,%rsp
  0x0000000116b5df21: jmpq   0x0000000116b5df2b
  0x0000000116b5df26: callq  0x000000010c9c9850
  0x0000000116b5df2b: mov    (%rsp),%rax
  0x0000000116b5df2f: add    $0x10,%rsp
  0x0000000116b5df33: vmovsd (%rsp),%xmm0
  0x0000000116b5df38: add    $0x10,%rsp
  0x0000000116b5df3c: mov    0x18(%rbp),%r11
  0x0000000116b5df40: callq  *%r11
  0x0000000116b5df43: mov    -0x8(%rbp),%r11
  0x0000000116b5df47: leaveq 
  0x0000000116b5df48: pop    %rdi
  0x0000000116b5df49: mov    %r11,%rsp
  0x0000000116b5df4c: jmpq   *%rdi
  0x0000000116b5df4e: nop
  0x0000000116b5df4f: nop
  0x0000000116b5df50: int3   
  0x0000000116b5df51: int3   
  0x0000000116b5df52: int3   
  0x0000000116b5df53: int3   
  0x0000000116b5df54: int3   
  0x0000000116b5df55: int3   
  0x0000000116b5df56: int3   
  0x0000000116b5df57: int3   
  0x0000000116b5df58: int3   
  0x0000000116b5df59: int3   
  0x0000000116b5df5a: int3   
  0x0000000116b5df5b: int3   
  0x0000000116b5df5c: int3   
  0x0000000116b5df5d: int3   
  0x0000000116b5df5e: int3   
  0x0000000116b5df5f: int3   

----------------------------------------------------------------------
nop  0 nop  [0x0000000116b5dfa0, 0x0000000116b5e000]  96 bytes

  0x0000000116b5dfa0: push   %rax
  0x0000000116b5dfa1: jmpq   0x0000000116b5dfd0
  0x0000000116b5dfa6: sub    $0x8,%rsp
  0x0000000116b5dfaa: vmovss %xmm0,(%rsp)
  0x0000000116b5dfaf: jmpq   0x0000000116b5dfd0
  0x0000000116b5dfb4: sub    $0x10,%rsp
  0x0000000116b5dfb8: vmovsd %xmm0,(%rsp)
  0x0000000116b5dfbd: jmpq   0x0000000116b5dfd0
  0x0000000116b5dfc2: sub    $0x10,%rsp
  0x0000000116b5dfc6: mov    %rax,(%rsp)
  0x0000000116b5dfca: jmpq   0x0000000116b5dfd0
  0x0000000116b5dfcf: push   %rax
  0x0000000116b5dfd0: movzbl 0x1(%r13),%ebx
  0x0000000116b5dfd5: inc    %r13
  0x0000000116b5dfd8: movabs $0x10ce3b680,%r10
  0x0000000116b5dfe2: jmpq   *(%r10,%rbx,8)
  0x0000000116b5dfe6: nop
  0x0000000116b5dfe7: nop
  0x0000000116b5dfe8: int3   
  0x0000000116b5dfe9: int3   
  0x0000000116b5dfea: int3   
  0x0000000116b5dfeb: int3   
  0x0000000116b5dfec: int3   
  0x0000000116b5dfed: int3   
  0x0000000116b5dfee: int3   
  0x0000000116b5dfef: int3   
  0x0000000116b5dff0: int3   
  0x0000000116b5dff1: int3   
  0x0000000116b5dff2: int3   
  0x0000000116b5dff3: int3   
  0x0000000116b5dff4: int3   
  0x0000000116b5dff5: int3   
  0x0000000116b5dff6: int3   
  0x0000000116b5dff7: int3   
  0x0000000116b5dff8: int3   
  0x0000000116b5dff9: int3   
  0x0000000116b5dffa: int3   
  0x0000000116b5dffb: int3   
  0x0000000116b5dffc: int3   
  0x0000000116b5dffd: int3   
  0x0000000116b5dffe: int3   
  0x0000000116b5dfff: int3   

----------------------------------------------------------------------
aconst_null  1 aconst_null  [0x0000000116b5e040, 0x0000000116b5e0a0]  96 bytes

  0x0000000116b5e040: push   %rax
  0x0000000116b5e041: jmpq   0x0000000116b5e070
  0x0000000116b5e046: sub    $0x8,%rsp
  0x0000000116b5e04a: vmovss %xmm0,(%rsp)
  0x0000000116b5e04f: jmpq   0x0000000116b5e070
  0x0000000116b5e054: sub    $0x10,%rsp
  0x0000000116b5e058: vmovsd %xmm0,(%rsp)
  0x0000000116b5e05d: jmpq   0x0000000116b5e070
  0x0000000116b5e062: sub    $0x10,%rsp
  0x0000000116b5e066: mov    %rax,(%rsp)
  0x0000000116b5e06a: jmpq   0x0000000116b5e070
  0x0000000116b5e06f: push   %rax
  0x0000000116b5e070: xor    %eax,%eax
  0x0000000116b5e072: movzbl 0x1(%r13),%ebx
  0x0000000116b5e077: inc    %r13
  0x0000000116b5e07a: movabs $0x10ce3ae80,%r10
  0x0000000116b5e084: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e088: int3   
  0x0000000116b5e089: int3   
  0x0000000116b5e08a: int3   
  0x0000000116b5e08b: int3   
  0x0000000116b5e08c: int3   
  0x0000000116b5e08d: int3   
  0x0000000116b5e08e: int3   
  0x0000000116b5e08f: int3   
  0x0000000116b5e090: int3   
  0x0000000116b5e091: int3   
  0x0000000116b5e092: int3   
  0x0000000116b5e093: int3   
  0x0000000116b5e094: int3   
  0x0000000116b5e095: int3   
  0x0000000116b5e096: int3   
  0x0000000116b5e097: int3   
  0x0000000116b5e098: int3   
  0x0000000116b5e099: int3   
  0x0000000116b5e09a: int3   
  0x0000000116b5e09b: int3   
  0x0000000116b5e09c: int3   
  0x0000000116b5e09d: int3   
  0x0000000116b5e09e: int3   
  0x0000000116b5e09f: int3   

----------------------------------------------------------------------
iconst_m1  2 iconst_m1  [0x0000000116b5e0e0, 0x0000000116b5e140]  96 bytes

  0x0000000116b5e0e0: push   %rax
  0x0000000116b5e0e1: jmpq   0x0000000116b5e110
  0x0000000116b5e0e6: sub    $0x8,%rsp
  0x0000000116b5e0ea: vmovss %xmm0,(%rsp)
  0x0000000116b5e0ef: jmpq   0x0000000116b5e110
  0x0000000116b5e0f4: sub    $0x10,%rsp
  0x0000000116b5e0f8: vmovsd %xmm0,(%rsp)
  0x0000000116b5e0fd: jmpq   0x0000000116b5e110
  0x0000000116b5e102: sub    $0x10,%rsp
  0x0000000116b5e106: mov    %rax,(%rsp)
  0x0000000116b5e10a: jmpq   0x0000000116b5e110
  0x0000000116b5e10f: push   %rax
  0x0000000116b5e110: mov    $0xffffffff,%eax
  0x0000000116b5e115: movzbl 0x1(%r13),%ebx
  0x0000000116b5e11a: inc    %r13
  0x0000000116b5e11d: movabs $0x10ce38e80,%r10
  0x0000000116b5e127: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e12b: nop
  0x0000000116b5e12c: nop
  0x0000000116b5e12d: nop
  0x0000000116b5e12e: nop
  0x0000000116b5e12f: nop
  0x0000000116b5e130: int3   
  0x0000000116b5e131: int3   
  0x0000000116b5e132: int3   
  0x0000000116b5e133: int3   
  0x0000000116b5e134: int3   
  0x0000000116b5e135: int3   
  0x0000000116b5e136: int3   
  0x0000000116b5e137: int3   
  0x0000000116b5e138: int3   
  0x0000000116b5e139: int3   
  0x0000000116b5e13a: int3   
  0x0000000116b5e13b: int3   
  0x0000000116b5e13c: int3   
  0x0000000116b5e13d: int3   
  0x0000000116b5e13e: int3   
  0x0000000116b5e13f: int3   

----------------------------------------------------------------------
iconst_0  3 iconst_0  [0x0000000116b5e180, 0x0000000116b5e1e0]  96 bytes

  0x0000000116b5e180: push   %rax
  0x0000000116b5e181: jmpq   0x0000000116b5e1b0
  0x0000000116b5e186: sub    $0x8,%rsp
  0x0000000116b5e18a: vmovss %xmm0,(%rsp)
  0x0000000116b5e18f: jmpq   0x0000000116b5e1b0
  0x0000000116b5e194: sub    $0x10,%rsp
  0x0000000116b5e198: vmovsd %xmm0,(%rsp)
  0x0000000116b5e19d: jmpq   0x0000000116b5e1b0
  0x0000000116b5e1a2: sub    $0x10,%rsp
  0x0000000116b5e1a6: mov    %rax,(%rsp)
  0x0000000116b5e1aa: jmpq   0x0000000116b5e1b0
  0x0000000116b5e1af: push   %rax
  0x0000000116b5e1b0: xor    %eax,%eax
  0x0000000116b5e1b2: movzbl 0x1(%r13),%ebx
  0x0000000116b5e1b7: inc    %r13
  0x0000000116b5e1ba: movabs $0x10ce38e80,%r10
  0x0000000116b5e1c4: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e1c8: int3   
  0x0000000116b5e1c9: int3   
  0x0000000116b5e1ca: int3   
  0x0000000116b5e1cb: int3   
  0x0000000116b5e1cc: int3   
  0x0000000116b5e1cd: int3   
  0x0000000116b5e1ce: int3   
  0x0000000116b5e1cf: int3   
  0x0000000116b5e1d0: int3   
  0x0000000116b5e1d1: int3   
  0x0000000116b5e1d2: int3   
  0x0000000116b5e1d3: int3   
  0x0000000116b5e1d4: int3   
  0x0000000116b5e1d5: int3   
  0x0000000116b5e1d6: int3   
  0x0000000116b5e1d7: int3   
  0x0000000116b5e1d8: int3   
  0x0000000116b5e1d9: int3   
  0x0000000116b5e1da: int3   
  0x0000000116b5e1db: int3   
  0x0000000116b5e1dc: int3   
  0x0000000116b5e1dd: int3   
  0x0000000116b5e1de: int3   
  0x0000000116b5e1df: int3   

----------------------------------------------------------------------
iconst_1  4 iconst_1  [0x0000000116b5e220, 0x0000000116b5e280]  96 bytes

  0x0000000116b5e220: push   %rax
  0x0000000116b5e221: jmpq   0x0000000116b5e250
  0x0000000116b5e226: sub    $0x8,%rsp
  0x0000000116b5e22a: vmovss %xmm0,(%rsp)
  0x0000000116b5e22f: jmpq   0x0000000116b5e250
  0x0000000116b5e234: sub    $0x10,%rsp
  0x0000000116b5e238: vmovsd %xmm0,(%rsp)
  0x0000000116b5e23d: jmpq   0x0000000116b5e250
  0x0000000116b5e242: sub    $0x10,%rsp
  0x0000000116b5e246: mov    %rax,(%rsp)
  0x0000000116b5e24a: jmpq   0x0000000116b5e250
  0x0000000116b5e24f: push   %rax
  0x0000000116b5e250: mov    $0x1,%eax
  0x0000000116b5e255: movzbl 0x1(%r13),%ebx
  0x0000000116b5e25a: inc    %r13
  0x0000000116b5e25d: movabs $0x10ce38e80,%r10
  0x0000000116b5e267: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e26b: nop
  0x0000000116b5e26c: nop
  0x0000000116b5e26d: nop
  0x0000000116b5e26e: nop
  0x0000000116b5e26f: nop
  0x0000000116b5e270: int3   
  0x0000000116b5e271: int3   
  0x0000000116b5e272: int3   
  0x0000000116b5e273: int3   
  0x0000000116b5e274: int3   
  0x0000000116b5e275: int3   
  0x0000000116b5e276: int3   
  0x0000000116b5e277: int3   
  0x0000000116b5e278: int3   
  0x0000000116b5e279: int3   
  0x0000000116b5e27a: int3   
  0x0000000116b5e27b: int3   
  0x0000000116b5e27c: int3   
  0x0000000116b5e27d: int3   
  0x0000000116b5e27e: int3   
  0x0000000116b5e27f: int3   

----------------------------------------------------------------------
iconst_2  5 iconst_2  [0x0000000116b5e2c0, 0x0000000116b5e320]  96 bytes

  0x0000000116b5e2c0: push   %rax
  0x0000000116b5e2c1: jmpq   0x0000000116b5e2f0
  0x0000000116b5e2c6: sub    $0x8,%rsp
  0x0000000116b5e2ca: vmovss %xmm0,(%rsp)
  0x0000000116b5e2cf: jmpq   0x0000000116b5e2f0
  0x0000000116b5e2d4: sub    $0x10,%rsp
  0x0000000116b5e2d8: vmovsd %xmm0,(%rsp)
  0x0000000116b5e2dd: jmpq   0x0000000116b5e2f0
  0x0000000116b5e2e2: sub    $0x10,%rsp
  0x0000000116b5e2e6: mov    %rax,(%rsp)
  0x0000000116b5e2ea: jmpq   0x0000000116b5e2f0
  0x0000000116b5e2ef: push   %rax
  0x0000000116b5e2f0: mov    $0x2,%eax
  0x0000000116b5e2f5: movzbl 0x1(%r13),%ebx
  0x0000000116b5e2fa: inc    %r13
  0x0000000116b5e2fd: movabs $0x10ce38e80,%r10
  0x0000000116b5e307: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e30b: nop
  0x0000000116b5e30c: nop
  0x0000000116b5e30d: nop
  0x0000000116b5e30e: nop
  0x0000000116b5e30f: nop
  0x0000000116b5e310: int3   
  0x0000000116b5e311: int3   
  0x0000000116b5e312: int3   
  0x0000000116b5e313: int3   
  0x0000000116b5e314: int3   
  0x0000000116b5e315: int3   
  0x0000000116b5e316: int3   
  0x0000000116b5e317: int3   
  0x0000000116b5e318: int3   
  0x0000000116b5e319: int3   
  0x0000000116b5e31a: int3   
  0x0000000116b5e31b: int3   
  0x0000000116b5e31c: int3   
  0x0000000116b5e31d: int3   
  0x0000000116b5e31e: int3   
  0x0000000116b5e31f: int3   

----------------------------------------------------------------------
iconst_3  6 iconst_3  [0x0000000116b5e360, 0x0000000116b5e3c0]  96 bytes

  0x0000000116b5e360: push   %rax
  0x0000000116b5e361: jmpq   0x0000000116b5e390
  0x0000000116b5e366: sub    $0x8,%rsp
  0x0000000116b5e36a: vmovss %xmm0,(%rsp)
  0x0000000116b5e36f: jmpq   0x0000000116b5e390
  0x0000000116b5e374: sub    $0x10,%rsp
  0x0000000116b5e378: vmovsd %xmm0,(%rsp)
  0x0000000116b5e37d: jmpq   0x0000000116b5e390
  0x0000000116b5e382: sub    $0x10,%rsp
  0x0000000116b5e386: mov    %rax,(%rsp)
  0x0000000116b5e38a: jmpq   0x0000000116b5e390
  0x0000000116b5e38f: push   %rax
  0x0000000116b5e390: mov    $0x3,%eax
  0x0000000116b5e395: movzbl 0x1(%r13),%ebx
  0x0000000116b5e39a: inc    %r13
  0x0000000116b5e39d: movabs $0x10ce38e80,%r10
  0x0000000116b5e3a7: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e3ab: nop
  0x0000000116b5e3ac: nop
  0x0000000116b5e3ad: nop
  0x0000000116b5e3ae: nop
  0x0000000116b5e3af: nop
  0x0000000116b5e3b0: int3   
  0x0000000116b5e3b1: int3   
  0x0000000116b5e3b2: int3   
  0x0000000116b5e3b3: int3   
  0x0000000116b5e3b4: int3   
  0x0000000116b5e3b5: int3   
  0x0000000116b5e3b6: int3   
  0x0000000116b5e3b7: int3   
  0x0000000116b5e3b8: int3   
  0x0000000116b5e3b9: int3   
  0x0000000116b5e3ba: int3   
  0x0000000116b5e3bb: int3   
  0x0000000116b5e3bc: int3   
  0x0000000116b5e3bd: int3   
  0x0000000116b5e3be: int3   
  0x0000000116b5e3bf: int3   

----------------------------------------------------------------------
iconst_4  7 iconst_4  [0x0000000116b5e400, 0x0000000116b5e460]  96 bytes

  0x0000000116b5e400: push   %rax
  0x0000000116b5e401: jmpq   0x0000000116b5e430
  0x0000000116b5e406: sub    $0x8,%rsp
  0x0000000116b5e40a: vmovss %xmm0,(%rsp)
  0x0000000116b5e40f: jmpq   0x0000000116b5e430
  0x0000000116b5e414: sub    $0x10,%rsp
  0x0000000116b5e418: vmovsd %xmm0,(%rsp)
  0x0000000116b5e41d: jmpq   0x0000000116b5e430
  0x0000000116b5e422: sub    $0x10,%rsp
  0x0000000116b5e426: mov    %rax,(%rsp)
  0x0000000116b5e42a: jmpq   0x0000000116b5e430
  0x0000000116b5e42f: push   %rax
  0x0000000116b5e430: mov    $0x4,%eax
  0x0000000116b5e435: movzbl 0x1(%r13),%ebx
  0x0000000116b5e43a: inc    %r13
  0x0000000116b5e43d: movabs $0x10ce38e80,%r10
  0x0000000116b5e447: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e44b: nop
  0x0000000116b5e44c: nop
  0x0000000116b5e44d: nop
  0x0000000116b5e44e: nop
  0x0000000116b5e44f: nop
  0x0000000116b5e450: int3   
  0x0000000116b5e451: int3   
  0x0000000116b5e452: int3   
  0x0000000116b5e453: int3   
  0x0000000116b5e454: int3   
  0x0000000116b5e455: int3   
  0x0000000116b5e456: int3   
  0x0000000116b5e457: int3   
  0x0000000116b5e458: int3   
  0x0000000116b5e459: int3   
  0x0000000116b5e45a: int3   
  0x0000000116b5e45b: int3   
  0x0000000116b5e45c: int3   
  0x0000000116b5e45d: int3   
  0x0000000116b5e45e: int3   
  0x0000000116b5e45f: int3   

----------------------------------------------------------------------
iconst_5  8 iconst_5  [0x0000000116b5e4a0, 0x0000000116b5e500]  96 bytes

  0x0000000116b5e4a0: push   %rax
  0x0000000116b5e4a1: jmpq   0x0000000116b5e4d0
  0x0000000116b5e4a6: sub    $0x8,%rsp
  0x0000000116b5e4aa: vmovss %xmm0,(%rsp)
  0x0000000116b5e4af: jmpq   0x0000000116b5e4d0
  0x0000000116b5e4b4: sub    $0x10,%rsp
  0x0000000116b5e4b8: vmovsd %xmm0,(%rsp)
  0x0000000116b5e4bd: jmpq   0x0000000116b5e4d0
  0x0000000116b5e4c2: sub    $0x10,%rsp
  0x0000000116b5e4c6: mov    %rax,(%rsp)
  0x0000000116b5e4ca: jmpq   0x0000000116b5e4d0
  0x0000000116b5e4cf: push   %rax
  0x0000000116b5e4d0: mov    $0x5,%eax
  0x0000000116b5e4d5: movzbl 0x1(%r13),%ebx
  0x0000000116b5e4da: inc    %r13
  0x0000000116b5e4dd: movabs $0x10ce38e80,%r10
  0x0000000116b5e4e7: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e4eb: nop
  0x0000000116b5e4ec: nop
  0x0000000116b5e4ed: nop
  0x0000000116b5e4ee: nop
  0x0000000116b5e4ef: nop
  0x0000000116b5e4f0: int3   
  0x0000000116b5e4f1: int3   
  0x0000000116b5e4f2: int3   
  0x0000000116b5e4f3: int3   
  0x0000000116b5e4f4: int3   
  0x0000000116b5e4f5: int3   
  0x0000000116b5e4f6: int3   
  0x0000000116b5e4f7: int3   
  0x0000000116b5e4f8: int3   
  0x0000000116b5e4f9: int3   
  0x0000000116b5e4fa: int3   
  0x0000000116b5e4fb: int3   
  0x0000000116b5e4fc: int3   
  0x0000000116b5e4fd: int3   
  0x0000000116b5e4fe: int3   
  0x0000000116b5e4ff: int3   

----------------------------------------------------------------------
lconst_0  9 lconst_0  [0x0000000116b5e540, 0x0000000116b5e5a0]  96 bytes

  0x0000000116b5e540: push   %rax
  0x0000000116b5e541: jmpq   0x0000000116b5e570
  0x0000000116b5e546: sub    $0x8,%rsp
  0x0000000116b5e54a: vmovss %xmm0,(%rsp)
  0x0000000116b5e54f: jmpq   0x0000000116b5e570
  0x0000000116b5e554: sub    $0x10,%rsp
  0x0000000116b5e558: vmovsd %xmm0,(%rsp)
  0x0000000116b5e55d: jmpq   0x0000000116b5e570
  0x0000000116b5e562: sub    $0x10,%rsp
  0x0000000116b5e566: mov    %rax,(%rsp)
  0x0000000116b5e56a: jmpq   0x0000000116b5e570
  0x0000000116b5e56f: push   %rax
  0x0000000116b5e570: xor    %eax,%eax
  0x0000000116b5e572: movzbl 0x1(%r13),%ebx
  0x0000000116b5e577: inc    %r13
  0x0000000116b5e57a: movabs $0x10ce39680,%r10
  0x0000000116b5e584: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e588: int3   
  0x0000000116b5e589: int3   
  0x0000000116b5e58a: int3   
  0x0000000116b5e58b: int3   
  0x0000000116b5e58c: int3   
  0x0000000116b5e58d: int3   
  0x0000000116b5e58e: int3   
  0x0000000116b5e58f: int3   
  0x0000000116b5e590: int3   
  0x0000000116b5e591: int3   
  0x0000000116b5e592: int3   
  0x0000000116b5e593: int3   
  0x0000000116b5e594: int3   
  0x0000000116b5e595: int3   
  0x0000000116b5e596: int3   
  0x0000000116b5e597: int3   
  0x0000000116b5e598: int3   
  0x0000000116b5e599: int3   
  0x0000000116b5e59a: int3   
  0x0000000116b5e59b: int3   
  0x0000000116b5e59c: int3   
  0x0000000116b5e59d: int3   
  0x0000000116b5e59e: int3   
  0x0000000116b5e59f: int3   

----------------------------------------------------------------------
lconst_1  10 lconst_1  [0x0000000116b5e5e0, 0x0000000116b5e640]  96 bytes

  0x0000000116b5e5e0: push   %rax
  0x0000000116b5e5e1: jmpq   0x0000000116b5e610
  0x0000000116b5e5e6: sub    $0x8,%rsp
  0x0000000116b5e5ea: vmovss %xmm0,(%rsp)
  0x0000000116b5e5ef: jmpq   0x0000000116b5e610
  0x0000000116b5e5f4: sub    $0x10,%rsp
  0x0000000116b5e5f8: vmovsd %xmm0,(%rsp)
  0x0000000116b5e5fd: jmpq   0x0000000116b5e610
  0x0000000116b5e602: sub    $0x10,%rsp
  0x0000000116b5e606: mov    %rax,(%rsp)
  0x0000000116b5e60a: jmpq   0x0000000116b5e610
  0x0000000116b5e60f: push   %rax
  0x0000000116b5e610: mov    $0x1,%eax
  0x0000000116b5e615: movzbl 0x1(%r13),%ebx
  0x0000000116b5e61a: inc    %r13
  0x0000000116b5e61d: movabs $0x10ce39680,%r10
  0x0000000116b5e627: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e62b: nop
  0x0000000116b5e62c: nop
  0x0000000116b5e62d: nop
  0x0000000116b5e62e: nop
  0x0000000116b5e62f: nop
  0x0000000116b5e630: int3   
  0x0000000116b5e631: int3   
  0x0000000116b5e632: int3   
  0x0000000116b5e633: int3   
  0x0000000116b5e634: int3   
  0x0000000116b5e635: int3   
  0x0000000116b5e636: int3   
  0x0000000116b5e637: int3   
  0x0000000116b5e638: int3   
  0x0000000116b5e639: int3   
  0x0000000116b5e63a: int3   
  0x0000000116b5e63b: int3   
  0x0000000116b5e63c: int3   
  0x0000000116b5e63d: int3   
  0x0000000116b5e63e: int3   
  0x0000000116b5e63f: int3   

----------------------------------------------------------------------
fconst_0  11 fconst_0  [0x0000000116b5e680, 0x0000000116b5e6e0]  96 bytes

  0x0000000116b5e680: push   %rax
  0x0000000116b5e681: jmpq   0x0000000116b5e6b0
  0x0000000116b5e686: sub    $0x8,%rsp
  0x0000000116b5e68a: vmovss %xmm0,(%rsp)
  0x0000000116b5e68f: jmpq   0x0000000116b5e6b0
  0x0000000116b5e694: sub    $0x10,%rsp
  0x0000000116b5e698: vmovsd %xmm0,(%rsp)
  0x0000000116b5e69d: jmpq   0x0000000116b5e6b0
  0x0000000116b5e6a2: sub    $0x10,%rsp
  0x0000000116b5e6a6: mov    %rax,(%rsp)
  0x0000000116b5e6aa: jmpq   0x0000000116b5e6b0
  0x0000000116b5e6af: push   %rax
  0x0000000116b5e6b0: vxorps %xmm0,%xmm0,%xmm0
  0x0000000116b5e6b4: movzbl 0x1(%r13),%ebx
  0x0000000116b5e6b9: inc    %r13
  0x0000000116b5e6bc: movabs $0x10ce39e80,%r10
  0x0000000116b5e6c6: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e6ca: nop
  0x0000000116b5e6cb: nop
  0x0000000116b5e6cc: nop
  0x0000000116b5e6cd: nop
  0x0000000116b5e6ce: nop
  0x0000000116b5e6cf: nop
  0x0000000116b5e6d0: int3   
  0x0000000116b5e6d1: int3   
  0x0000000116b5e6d2: int3   
  0x0000000116b5e6d3: int3   
  0x0000000116b5e6d4: int3   
  0x0000000116b5e6d5: int3   
  0x0000000116b5e6d6: int3   
  0x0000000116b5e6d7: int3   
  0x0000000116b5e6d8: int3   
  0x0000000116b5e6d9: int3   
  0x0000000116b5e6da: int3   
  0x0000000116b5e6db: int3   
  0x0000000116b5e6dc: int3   
  0x0000000116b5e6dd: int3   
  0x0000000116b5e6de: int3   
  0x0000000116b5e6df: int3   

----------------------------------------------------------------------
fconst_1  12 fconst_1  [0x0000000116b5e720, 0x0000000116b5e780]  96 bytes

  0x0000000116b5e720: push   %rax
  0x0000000116b5e721: jmpq   0x0000000116b5e750
  0x0000000116b5e726: sub    $0x8,%rsp
  0x0000000116b5e72a: vmovss %xmm0,(%rsp)
  0x0000000116b5e72f: jmpq   0x0000000116b5e750
  0x0000000116b5e734: sub    $0x10,%rsp
  0x0000000116b5e738: vmovsd %xmm0,(%rsp)
  0x0000000116b5e73d: jmpq   0x0000000116b5e750
  0x0000000116b5e742: sub    $0x10,%rsp
  0x0000000116b5e746: mov    %rax,(%rsp)
  0x0000000116b5e74a: jmpq   0x0000000116b5e750
  0x0000000116b5e74f: push   %rax
  0x0000000116b5e750: vmovss -0x9d94250(%rip),%xmm0        # 0x000000010cdca508
  0x0000000116b5e758: movzbl 0x1(%r13),%ebx
  0x0000000116b5e75d: inc    %r13
  0x0000000116b5e760: movabs $0x10ce39e80,%r10
  0x0000000116b5e76a: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e76e: nop
  0x0000000116b5e76f: nop
  0x0000000116b5e770: int3   
  0x0000000116b5e771: int3   
  0x0000000116b5e772: int3   
  0x0000000116b5e773: int3   
  0x0000000116b5e774: int3   
  0x0000000116b5e775: int3   
  0x0000000116b5e776: int3   
  0x0000000116b5e777: int3   
  0x0000000116b5e778: int3   
  0x0000000116b5e779: int3   
  0x0000000116b5e77a: int3   
  0x0000000116b5e77b: int3   
  0x0000000116b5e77c: int3   
  0x0000000116b5e77d: int3   
  0x0000000116b5e77e: int3   
  0x0000000116b5e77f: int3   

----------------------------------------------------------------------
fconst_2  13 fconst_2  [0x0000000116b5e7c0, 0x0000000116b5e820]  96 bytes

  0x0000000116b5e7c0: push   %rax
  0x0000000116b5e7c1: jmpq   0x0000000116b5e7f0
  0x0000000116b5e7c6: sub    $0x8,%rsp
  0x0000000116b5e7ca: vmovss %xmm0,(%rsp)
  0x0000000116b5e7cf: jmpq   0x0000000116b5e7f0
  0x0000000116b5e7d4: sub    $0x10,%rsp
  0x0000000116b5e7d8: vmovsd %xmm0,(%rsp)
  0x0000000116b5e7dd: jmpq   0x0000000116b5e7f0
  0x0000000116b5e7e2: sub    $0x10,%rsp
  0x0000000116b5e7e6: mov    %rax,(%rsp)
  0x0000000116b5e7ea: jmpq   0x0000000116b5e7f0
  0x0000000116b5e7ef: push   %rax
  0x0000000116b5e7f0: vmovss -0x9d942ec(%rip),%xmm0        # 0x000000010cdca50c
  0x0000000116b5e7f8: movzbl 0x1(%r13),%ebx
  0x0000000116b5e7fd: inc    %r13
  0x0000000116b5e800: movabs $0x10ce39e80,%r10
  0x0000000116b5e80a: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e80e: nop
  0x0000000116b5e80f: nop
  0x0000000116b5e810: int3   
  0x0000000116b5e811: int3   
  0x0000000116b5e812: int3   
  0x0000000116b5e813: int3   
  0x0000000116b5e814: int3   
  0x0000000116b5e815: int3   
  0x0000000116b5e816: int3   
  0x0000000116b5e817: int3   
  0x0000000116b5e818: int3   
  0x0000000116b5e819: int3   
  0x0000000116b5e81a: int3   
  0x0000000116b5e81b: int3   
  0x0000000116b5e81c: int3   
  0x0000000116b5e81d: int3   
  0x0000000116b5e81e: int3   
  0x0000000116b5e81f: int3   

----------------------------------------------------------------------
dconst_0  14 dconst_0  [0x0000000116b5e860, 0x0000000116b5e8c0]  96 bytes

  0x0000000116b5e860: push   %rax
  0x0000000116b5e861: jmpq   0x0000000116b5e890
  0x0000000116b5e866: sub    $0x8,%rsp
  0x0000000116b5e86a: vmovss %xmm0,(%rsp)
  0x0000000116b5e86f: jmpq   0x0000000116b5e890
  0x0000000116b5e874: sub    $0x10,%rsp
  0x0000000116b5e878: vmovsd %xmm0,(%rsp)
  0x0000000116b5e87d: jmpq   0x0000000116b5e890
  0x0000000116b5e882: sub    $0x10,%rsp
  0x0000000116b5e886: mov    %rax,(%rsp)
  0x0000000116b5e88a: jmpq   0x0000000116b5e890
  0x0000000116b5e88f: push   %rax
  0x0000000116b5e890: vxorpd %xmm0,%xmm0,%xmm0
  0x0000000116b5e894: movzbl 0x1(%r13),%ebx
  0x0000000116b5e899: inc    %r13
  0x0000000116b5e89c: movabs $0x10ce3a680,%r10
  0x0000000116b5e8a6: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e8aa: nop
  0x0000000116b5e8ab: nop
  0x0000000116b5e8ac: nop
  0x0000000116b5e8ad: nop
  0x0000000116b5e8ae: nop
  0x0000000116b5e8af: nop
  0x0000000116b5e8b0: int3   
  0x0000000116b5e8b1: int3   
  0x0000000116b5e8b2: int3   
  0x0000000116b5e8b3: int3   
  0x0000000116b5e8b4: int3   
  0x0000000116b5e8b5: int3   
  0x0000000116b5e8b6: int3   
  0x0000000116b5e8b7: int3   
  0x0000000116b5e8b8: int3   
  0x0000000116b5e8b9: int3   
  0x0000000116b5e8ba: int3   
  0x0000000116b5e8bb: int3   
  0x0000000116b5e8bc: int3   
  0x0000000116b5e8bd: int3   
  0x0000000116b5e8be: int3   
  0x0000000116b5e8bf: int3   

----------------------------------------------------------------------
dconst_1  15 dconst_1  [0x0000000116b5e900, 0x0000000116b5e960]  96 bytes

  0x0000000116b5e900: push   %rax
  0x0000000116b5e901: jmpq   0x0000000116b5e930
  0x0000000116b5e906: sub    $0x8,%rsp
  0x0000000116b5e90a: vmovss %xmm0,(%rsp)
  0x0000000116b5e90f: jmpq   0x0000000116b5e930
  0x0000000116b5e914: sub    $0x10,%rsp
  0x0000000116b5e918: vmovsd %xmm0,(%rsp)
  0x0000000116b5e91d: jmpq   0x0000000116b5e930
  0x0000000116b5e922: sub    $0x10,%rsp
  0x0000000116b5e926: mov    %rax,(%rsp)
  0x0000000116b5e92a: jmpq   0x0000000116b5e930
  0x0000000116b5e92f: push   %rax
  0x0000000116b5e930: vmovsd -0x9d94428(%rip),%xmm0        # 0x000000010cdca510
  0x0000000116b5e938: movzbl 0x1(%r13),%ebx
  0x0000000116b5e93d: inc    %r13
  0x0000000116b5e940: movabs $0x10ce3a680,%r10
  0x0000000116b5e94a: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e94e: nop
  0x0000000116b5e94f: nop
  0x0000000116b5e950: int3   
  0x0000000116b5e951: int3   
  0x0000000116b5e952: int3   
  0x0000000116b5e953: int3   
  0x0000000116b5e954: int3   
  0x0000000116b5e955: int3   
  0x0000000116b5e956: int3   
  0x0000000116b5e957: int3   
  0x0000000116b5e958: int3   
  0x0000000116b5e959: int3   
  0x0000000116b5e95a: int3   
  0x0000000116b5e95b: int3   
  0x0000000116b5e95c: int3   
  0x0000000116b5e95d: int3   
  0x0000000116b5e95e: int3   
  0x0000000116b5e95f: int3   

----------------------------------------------------------------------
bipush  16 bipush  [0x0000000116b5e9a0, 0x0000000116b5ea00]  96 bytes

  0x0000000116b5e9a0: push   %rax
  0x0000000116b5e9a1: jmpq   0x0000000116b5e9d0
  0x0000000116b5e9a6: sub    $0x8,%rsp
  0x0000000116b5e9aa: vmovss %xmm0,(%rsp)
  0x0000000116b5e9af: jmpq   0x0000000116b5e9d0
  0x0000000116b5e9b4: sub    $0x10,%rsp
  0x0000000116b5e9b8: vmovsd %xmm0,(%rsp)
  0x0000000116b5e9bd: jmpq   0x0000000116b5e9d0
  0x0000000116b5e9c2: sub    $0x10,%rsp
  0x0000000116b5e9c6: mov    %rax,(%rsp)
  0x0000000116b5e9ca: jmpq   0x0000000116b5e9d0
  0x0000000116b5e9cf: push   %rax
  0x0000000116b5e9d0: movsbl 0x1(%r13),%eax
  0x0000000116b5e9d5: movzbl 0x2(%r13),%ebx
  0x0000000116b5e9da: add    $0x2,%r13
  0x0000000116b5e9de: movabs $0x10ce38e80,%r10
  0x0000000116b5e9e8: jmpq   *(%r10,%rbx,8)
  0x0000000116b5e9ec: nop
  0x0000000116b5e9ed: nop
  0x0000000116b5e9ee: nop
  0x0000000116b5e9ef: nop
  0x0000000116b5e9f0: int3   
  0x0000000116b5e9f1: int3   
  0x0000000116b5e9f2: int3   
  0x0000000116b5e9f3: int3   
  0x0000000116b5e9f4: int3   
  0x0000000116b5e9f5: int3   
  0x0000000116b5e9f6: int3   
  0x0000000116b5e9f7: int3   
  0x0000000116b5e9f8: int3   
  0x0000000116b5e9f9: int3   
  0x0000000116b5e9fa: int3   
  0x0000000116b5e9fb: int3   
  0x0000000116b5e9fc: int3   
  0x0000000116b5e9fd: int3   
  0x0000000116b5e9fe: int3   
  0x0000000116b5e9ff: int3   

----------------------------------------------------------------------
sipush  17 sipush  [0x0000000116b5ea40, 0x0000000116b5eaa0]  96 bytes

  0x0000000116b5ea40: push   %rax
  0x0000000116b5ea41: jmpq   0x0000000116b5ea70
  0x0000000116b5ea46: sub    $0x8,%rsp
  0x0000000116b5ea4a: vmovss %xmm0,(%rsp)
  0x0000000116b5ea4f: jmpq   0x0000000116b5ea70
  0x0000000116b5ea54: sub    $0x10,%rsp
  0x0000000116b5ea58: vmovsd %xmm0,(%rsp)
  0x0000000116b5ea5d: jmpq   0x0000000116b5ea70
  0x0000000116b5ea62: sub    $0x10,%rsp
  0x0000000116b5ea66: mov    %rax,(%rsp)
  0x0000000116b5ea6a: jmpq   0x0000000116b5ea70
  0x0000000116b5ea6f: push   %rax
  0x0000000116b5ea70: movzwl 0x1(%r13),%eax
  0x0000000116b5ea75: bswap  %eax
  0x0000000116b5ea77: sar    $0x10,%eax
  0x0000000116b5ea7a: movzbl 0x3(%r13),%ebx
  0x0000000116b5ea7f: add    $0x3,%r13
  0x0000000116b5ea83: movabs $0x10ce38e80,%r10
  0x0000000116b5ea8d: jmpq   *(%r10,%rbx,8)
  0x0000000116b5ea91: nop
  0x0000000116b5ea92: nop
  0x0000000116b5ea93: nop
  0x0000000116b5ea94: nop
  0x0000000116b5ea95: nop
  0x0000000116b5ea96: nop
  0x0000000116b5ea97: nop
  0x0000000116b5ea98: int3   
  0x0000000116b5ea99: int3   
  0x0000000116b5ea9a: int3   
  0x0000000116b5ea9b: int3   
  0x0000000116b5ea9c: int3   
  0x0000000116b5ea9d: int3   
  0x0000000116b5ea9e: int3   
  0x0000000116b5ea9f: int3   

----------------------------------------------------------------------
ldc  18 ldc  [0x0000000116b5eae0, 0x0000000116b5ee80]  928 bytes

  0x0000000116b5eae0: push   %rax
  0x0000000116b5eae1: jmpq   0x0000000116b5eb10
  0x0000000116b5eae6: sub    $0x8,%rsp
  0x0000000116b5eaea: vmovss %xmm0,(%rsp)
  0x0000000116b5eaef: jmpq   0x0000000116b5eb10
  0x0000000116b5eaf4: sub    $0x10,%rsp
  0x0000000116b5eaf8: vmovsd %xmm0,(%rsp)
  0x0000000116b5eafd: jmpq   0x0000000116b5eb10
  0x0000000116b5eb02: sub    $0x10,%rsp
  0x0000000116b5eb06: mov    %rax,(%rsp)
  0x0000000116b5eb0a: jmpq   0x0000000116b5eb10
  0x0000000116b5eb0f: push   %rax
  0x0000000116b5eb10: movzbl 0x1(%r13),%ebx
  0x0000000116b5eb15: mov    -0x18(%rbp),%rcx
  0x0000000116b5eb19: mov    0x10(%rcx),%rcx
  0x0000000116b5eb1d: mov    0x8(%rcx),%rcx
  0x0000000116b5eb21: mov    0x10(%rcx),%rax
  0x0000000116b5eb25: movzbl 0x4(%rax,%rbx,1),%edx
  0x0000000116b5eb2a: cmp    $0x64,%edx
  0x0000000116b5eb2d: je     0x0000000116b5eb3d
  0x0000000116b5eb2f: cmp    $0x67,%edx
  0x0000000116b5eb32: je     0x0000000116b5eb3d
  0x0000000116b5eb34: cmp    $0x7,%edx
  0x0000000116b5eb37: jne    0x0000000116b5edb9
  0x0000000116b5eb3d: mov    $0x0,%esi
  0x0000000116b5eb42: callq  0x0000000116b5eb4c
  0x0000000116b5eb47: jmpq   0x0000000116b5edb3
  0x0000000116b5eb4c: lea    0x8(%rsp),%rax
  0x0000000116b5eb51: mov    %r13,-0x38(%rbp)
  0x0000000116b5eb55: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5eb5d: je     0x0000000116b5ebda
  0x0000000116b5eb63: mov    %rsp,-0x28(%rsp)
  0x0000000116b5eb68: sub    $0x80,%rsp
  0x0000000116b5eb6f: mov    %rax,0x78(%rsp)
  0x0000000116b5eb74: mov    %rcx,0x70(%rsp)
  0x0000000116b5eb79: mov    %rdx,0x68(%rsp)
  0x0000000116b5eb7e: mov    %rbx,0x60(%rsp)
  0x0000000116b5eb83: mov    %rbp,0x50(%rsp)
  0x0000000116b5eb88: mov    %rsi,0x48(%rsp)
  0x0000000116b5eb8d: mov    %rdi,0x40(%rsp)
  0x0000000116b5eb92: mov    %r8,0x38(%rsp)
  0x0000000116b5eb97: mov    %r9,0x30(%rsp)
  0x0000000116b5eb9c: mov    %r10,0x28(%rsp)
  0x0000000116b5eba1: mov    %r11,0x20(%rsp)
  0x0000000116b5eba6: mov    %r12,0x18(%rsp)
  0x0000000116b5ebab: mov    %r13,0x10(%rsp)
  0x0000000116b5ebb0: mov    %r14,0x8(%rsp)
  0x0000000116b5ebb5: mov    %r15,(%rsp)
  0x0000000116b5ebb9: movabs $0x10cc2363b,%rdi
  0x0000000116b5ebc3: movabs $0x116b5eb63,%rsi
  0x0000000116b5ebcd: mov    %rsp,%rdx
  0x0000000116b5ebd0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ebd4: callq  0x000000010c7dd830
  0x0000000116b5ebd9: hlt    
  0x0000000116b5ebda: push   %r10
  0x0000000116b5ebdc: cmp    -0x9d18333(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5ebe3: je     0x0000000116b5ec60
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5ebe9: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ebee: sub    $0x80,%rsp
  0x0000000116b5ebf5: mov    %rax,0x78(%rsp)
  0x0000000116b5ebfa: mov    %rcx,0x70(%rsp)
  0x0000000116b5ebff: mov    %rdx,0x68(%rsp)
  0x0000000116b5ec04: mov    %rbx,0x60(%rsp)
  0x0000000116b5ec09: mov    %rbp,0x50(%rsp)
  0x0000000116b5ec0e: mov    %rsi,0x48(%rsp)
  0x0000000116b5ec13: mov    %rdi,0x40(%rsp)
  0x0000000116b5ec18: mov    %r8,0x38(%rsp)
  0x0000000116b5ec1d: mov    %r9,0x30(%rsp)
  0x0000000116b5ec22: mov    %r10,0x28(%rsp)
  0x0000000116b5ec27: mov    %r11,0x20(%rsp)
  0x0000000116b5ec2c: mov    %r12,0x18(%rsp)
  0x0000000116b5ec31: mov    %r13,0x10(%rsp)
  0x0000000116b5ec36: mov    %r14,0x8(%rsp)
  0x0000000116b5ec3b: mov    %r15,(%rsp)
  0x0000000116b5ec3f: movabs $0x10cc63f17,%rdi
  0x0000000116b5ec49: movabs $0x116b5ebe9,%rsi
  0x0000000116b5ec53: mov    %rsp,%rdx
  0x0000000116b5ec56: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ec5a: callq  0x000000010c7dd830
  0x0000000116b5ec5f: hlt    
  0x0000000116b5ec60: pop    %r10
  0x0000000116b5ec62: mov    %r15,%rdi
  0x0000000116b5ec65: mov    %rbp,0x290(%r15)
  0x0000000116b5ec6c: mov    %rax,0x280(%r15)
  0x0000000116b5ec73: test   $0xf,%esp
  0x0000000116b5ec79: je     0x0000000116b5ec91
  0x0000000116b5ec7f: sub    $0x8,%rsp
  0x0000000116b5ec83: callq  0x000000010c5854a0
  0x0000000116b5ec88: add    $0x8,%rsp
  0x0000000116b5ec8c: jmpq   0x0000000116b5ec96
  0x0000000116b5ec91: callq  0x000000010c5854a0
  0x0000000116b5ec96: push   %rax
  0x0000000116b5ec97: push   %rdi
  0x0000000116b5ec98: push   %rsi
  0x0000000116b5ec99: push   %rdx
  0x0000000116b5ec9a: push   %rcx
  0x0000000116b5ec9b: push   %r8
  0x0000000116b5ec9d: push   %r9
  0x0000000116b5ec9f: push   %r10
  0x0000000116b5eca1: mov    %rsp,%r10
  0x0000000116b5eca4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5eca8: push   %r10
  0x0000000116b5ecaa: push   %r11
  0x0000000116b5ecac: mov    $0x109,%edi
  0x0000000116b5ecb1: movabs $0x7ff815049fd5,%r10
  0x0000000116b5ecbb: callq  *%r10
  0x0000000116b5ecbe: pop    %r11
  0x0000000116b5ecc0: pop    %rsp
  0x0000000116b5ecc1: pop    %r10
  0x0000000116b5ecc3: pop    %r9
  0x0000000116b5ecc5: pop    %r8
  0x0000000116b5ecc7: pop    %rcx
  0x0000000116b5ecc8: pop    %rdx
  0x0000000116b5ecc9: pop    %rsi
  0x0000000116b5ecca: pop    %rdi
  0x0000000116b5eccb: cmp    %rax,%r15
  0x0000000116b5ecce: je     0x0000000116b5ed4b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5ecd4: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ecd9: sub    $0x80,%rsp
  0x0000000116b5ece0: mov    %rax,0x78(%rsp)
  0x0000000116b5ece5: mov    %rcx,0x70(%rsp)
  0x0000000116b5ecea: mov    %rdx,0x68(%rsp)
  0x0000000116b5ecef: mov    %rbx,0x60(%rsp)
  0x0000000116b5ecf4: mov    %rbp,0x50(%rsp)
  0x0000000116b5ecf9: mov    %rsi,0x48(%rsp)
  0x0000000116b5ecfe: mov    %rdi,0x40(%rsp)
  0x0000000116b5ed03: mov    %r8,0x38(%rsp)
  0x0000000116b5ed08: mov    %r9,0x30(%rsp)
  0x0000000116b5ed0d: mov    %r10,0x28(%rsp)
  0x0000000116b5ed12: mov    %r11,0x20(%rsp)
  0x0000000116b5ed17: mov    %r12,0x18(%rsp)
  0x0000000116b5ed1c: mov    %r13,0x10(%rsp)
  0x0000000116b5ed21: mov    %r14,0x8(%rsp)
  0x0000000116b5ed26: mov    %r15,(%rsp)
  0x0000000116b5ed2a: movabs $0x10cc6405e,%rdi
  0x0000000116b5ed34: movabs $0x116b5ecd4,%rsi
  0x0000000116b5ed3e: mov    %rsp,%rdx
  0x0000000116b5ed41: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ed45: callq  0x000000010c7dd830
  0x0000000116b5ed4a: hlt    
  0x0000000116b5ed4b: pop    %rax
  0x0000000116b5ed4c: movabs $0x0,%r10
  0x0000000116b5ed56: mov    %r10,0x280(%r15)
  0x0000000116b5ed5d: movabs $0x0,%r10
  0x0000000116b5ed67: mov    %r10,0x290(%r15)
  0x0000000116b5ed6e: movabs $0x0,%r10
  0x0000000116b5ed78: mov    %r10,0x288(%r15)
  0x0000000116b5ed7f: cmpq   $0x0,0x8(%r15)
  0x0000000116b5ed87: je     0x0000000116b5ed92
  0x0000000116b5ed8d: jmpq   0x0000000116b30420
  0x0000000116b5ed92: mov    0x2e0(%r15),%rax
  0x0000000116b5ed99: movabs $0x0,%r10
  0x0000000116b5eda3: mov    %r10,0x2e0(%r15)
  0x0000000116b5edaa: mov    -0x38(%rbp),%r13
  0x0000000116b5edae: mov    -0x30(%rbp),%r14
  0x0000000116b5edb2: retq   
  0x0000000116b5edb3: push   %rax
  0x0000000116b5edb4: jmpq   0x0000000116b5ee57
  0x0000000116b5edb9: cmp    $0x4,%edx
  0x0000000116b5edbc: jne    0x0000000116b5edd2
  0x0000000116b5edbe: vmovss 0x58(%rcx,%rbx,8),%xmm0
  0x0000000116b5edc4: sub    $0x8,%rsp
  0x0000000116b5edc8: vmovss %xmm0,(%rsp)
  0x0000000116b5edcd: jmpq   0x0000000116b5ee57
  0x0000000116b5edd2: cmp    $0x3,%edx
  0x0000000116b5edd5: je     0x0000000116b5ee52
  0x0000000116b5eddb: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ede0: sub    $0x80,%rsp
  0x0000000116b5ede7: mov    %rax,0x78(%rsp)
  0x0000000116b5edec: mov    %rcx,0x70(%rsp)
  0x0000000116b5edf1: mov    %rdx,0x68(%rsp)
  0x0000000116b5edf6: mov    %rbx,0x60(%rsp)
  0x0000000116b5edfb: mov    %rbp,0x50(%rsp)
  0x0000000116b5ee00: mov    %rsi,0x48(%rsp)
  0x0000000116b5ee05: mov    %rdi,0x40(%rsp)
  0x0000000116b5ee0a: mov    %r8,0x38(%rsp)
  0x0000000116b5ee0f: mov    %r9,0x30(%rsp)
  0x0000000116b5ee14: mov    %r10,0x28(%rsp)
  0x0000000116b5ee19: mov    %r11,0x20(%rsp)
  0x0000000116b5ee1e: mov    %r12,0x18(%rsp)
  0x0000000116b5ee23: mov    %r13,0x10(%rsp)
  0x0000000116b5ee28: mov    %r14,0x8(%rsp)
  0x0000000116b5ee2d: mov    %r15,(%rsp)
  0x0000000116b5ee31: movabs $0x10ccb0445,%rdi
  0x0000000116b5ee3b: movabs $0x116b5eddb,%rsi
  0x0000000116b5ee45: mov    %rsp,%rdx
  0x0000000116b5ee48: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5ee4c: callq  0x000000010c7dd830
  0x0000000116b5ee51: hlt    
  0x0000000116b5ee52: mov    0x58(%rcx,%rbx,8),%eax
  0x0000000116b5ee56: push   %rax
  0x0000000116b5ee57: movzbl 0x2(%r13),%ebx
  0x0000000116b5ee5c: add    $0x2,%r13
  0x0000000116b5ee60: movabs $0x10ce3b680,%r10
  0x0000000116b5ee6a: jmpq   *(%r10,%rbx,8)
  0x0000000116b5ee6e: nop
  0x0000000116b5ee6f: nop
  0x0000000116b5ee70: int3   
  0x0000000116b5ee71: int3   
  0x0000000116b5ee72: int3   
  0x0000000116b5ee73: int3   
  0x0000000116b5ee74: int3   
  0x0000000116b5ee75: int3   
  0x0000000116b5ee76: int3   
  0x0000000116b5ee77: int3   
  0x0000000116b5ee78: int3   
  0x0000000116b5ee79: int3   
  0x0000000116b5ee7a: int3   
  0x0000000116b5ee7b: int3   
  0x0000000116b5ee7c: int3   
  0x0000000116b5ee7d: int3   
  0x0000000116b5ee7e: int3   
  0x0000000116b5ee7f: int3   

----------------------------------------------------------------------
ldc_w  19 ldc_w  [0x0000000116b5eec0, 0x0000000116b5f260]  928 bytes

  0x0000000116b5eec0: push   %rax
  0x0000000116b5eec1: jmpq   0x0000000116b5eef0
  0x0000000116b5eec6: sub    $0x8,%rsp
  0x0000000116b5eeca: vmovss %xmm0,(%rsp)
  0x0000000116b5eecf: jmpq   0x0000000116b5eef0
  0x0000000116b5eed4: sub    $0x10,%rsp
  0x0000000116b5eed8: vmovsd %xmm0,(%rsp)
  0x0000000116b5eedd: jmpq   0x0000000116b5eef0
  0x0000000116b5eee2: sub    $0x10,%rsp
  0x0000000116b5eee6: mov    %rax,(%rsp)
  0x0000000116b5eeea: jmpq   0x0000000116b5eef0
  0x0000000116b5eeef: push   %rax
  0x0000000116b5eef0: movzwl 0x1(%r13),%ebx
  0x0000000116b5eef5: bswap  %ebx
  0x0000000116b5eef7: shr    $0x10,%ebx
  0x0000000116b5eefa: mov    -0x18(%rbp),%rcx
  0x0000000116b5eefe: mov    0x10(%rcx),%rcx
  0x0000000116b5ef02: mov    0x8(%rcx),%rcx
  0x0000000116b5ef06: mov    0x10(%rcx),%rax
  0x0000000116b5ef0a: movzbl 0x4(%rax,%rbx,1),%edx
  0x0000000116b5ef0f: cmp    $0x64,%edx
  0x0000000116b5ef12: je     0x0000000116b5ef22
  0x0000000116b5ef14: cmp    $0x67,%edx
  0x0000000116b5ef17: je     0x0000000116b5ef22
  0x0000000116b5ef19: cmp    $0x7,%edx
  0x0000000116b5ef1c: jne    0x0000000116b5f19e
  0x0000000116b5ef22: mov    $0x1,%esi
  0x0000000116b5ef27: callq  0x0000000116b5ef31
  0x0000000116b5ef2c: jmpq   0x0000000116b5f198
  0x0000000116b5ef31: lea    0x8(%rsp),%rax
  0x0000000116b5ef36: mov    %r13,-0x38(%rbp)
  0x0000000116b5ef3a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b5ef42: je     0x0000000116b5efbf
  0x0000000116b5ef48: mov    %rsp,-0x28(%rsp)
  0x0000000116b5ef4d: sub    $0x80,%rsp
  0x0000000116b5ef54: mov    %rax,0x78(%rsp)
  0x0000000116b5ef59: mov    %rcx,0x70(%rsp)
  0x0000000116b5ef5e: mov    %rdx,0x68(%rsp)
  0x0000000116b5ef63: mov    %rbx,0x60(%rsp)
  0x0000000116b5ef68: mov    %rbp,0x50(%rsp)
  0x0000000116b5ef6d: mov    %rsi,0x48(%rsp)
  0x0000000116b5ef72: mov    %rdi,0x40(%rsp)
  0x0000000116b5ef77: mov    %r8,0x38(%rsp)
  0x0000000116b5ef7c: mov    %r9,0x30(%rsp)
  0x0000000116b5ef81: mov    %r10,0x28(%rsp)
  0x0000000116b5ef86: mov    %r11,0x20(%rsp)
  0x0000000116b5ef8b: mov    %r12,0x18(%rsp)
  0x0000000116b5ef90: mov    %r13,0x10(%rsp)
  0x0000000116b5ef95: mov    %r14,0x8(%rsp)
  0x0000000116b5ef9a: mov    %r15,(%rsp)
  0x0000000116b5ef9e: movabs $0x10cc2363b,%rdi
  0x0000000116b5efa8: movabs $0x116b5ef48,%rsi
  0x0000000116b5efb2: mov    %rsp,%rdx
  0x0000000116b5efb5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5efb9: callq  0x000000010c7dd830
  0x0000000116b5efbe: hlt    
  0x0000000116b5efbf: push   %r10
  0x0000000116b5efc1: cmp    -0x9d18718(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b5efc8: je     0x0000000116b5f045
  ;; call_VM_base: heap base corrupted?
  0x0000000116b5efce: mov    %rsp,-0x28(%rsp)
  0x0000000116b5efd3: sub    $0x80,%rsp
  0x0000000116b5efda: mov    %rax,0x78(%rsp)
  0x0000000116b5efdf: mov    %rcx,0x70(%rsp)
  0x0000000116b5efe4: mov    %rdx,0x68(%rsp)
  0x0000000116b5efe9: mov    %rbx,0x60(%rsp)
  0x0000000116b5efee: mov    %rbp,0x50(%rsp)
  0x0000000116b5eff3: mov    %rsi,0x48(%rsp)
  0x0000000116b5eff8: mov    %rdi,0x40(%rsp)
  0x0000000116b5effd: mov    %r8,0x38(%rsp)
  0x0000000116b5f002: mov    %r9,0x30(%rsp)
  0x0000000116b5f007: mov    %r10,0x28(%rsp)
  0x0000000116b5f00c: mov    %r11,0x20(%rsp)
  0x0000000116b5f011: mov    %r12,0x18(%rsp)
  0x0000000116b5f016: mov    %r13,0x10(%rsp)
  0x0000000116b5f01b: mov    %r14,0x8(%rsp)
  0x0000000116b5f020: mov    %r15,(%rsp)
  0x0000000116b5f024: movabs $0x10cc63f17,%rdi
  0x0000000116b5f02e: movabs $0x116b5efce,%rsi
  0x0000000116b5f038: mov    %rsp,%rdx
  0x0000000116b5f03b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5f03f: callq  0x000000010c7dd830
  0x0000000116b5f044: hlt    
  0x0000000116b5f045: pop    %r10
  0x0000000116b5f047: mov    %r15,%rdi
  0x0000000116b5f04a: mov    %rbp,0x290(%r15)
  0x0000000116b5f051: mov    %rax,0x280(%r15)
  0x0000000116b5f058: test   $0xf,%esp
  0x0000000116b5f05e: je     0x0000000116b5f076
  0x0000000116b5f064: sub    $0x8,%rsp
  0x0000000116b5f068: callq  0x000000010c5854a0
  0x0000000116b5f06d: add    $0x8,%rsp
  0x0000000116b5f071: jmpq   0x0000000116b5f07b
  0x0000000116b5f076: callq  0x000000010c5854a0
  0x0000000116b5f07b: push   %rax
  0x0000000116b5f07c: push   %rdi
  0x0000000116b5f07d: push   %rsi
  0x0000000116b5f07e: push   %rdx
  0x0000000116b5f07f: push   %rcx
  0x0000000116b5f080: push   %r8
  0x0000000116b5f082: push   %r9
  0x0000000116b5f084: push   %r10
  0x0000000116b5f086: mov    %rsp,%r10
  0x0000000116b5f089: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5f08d: push   %r10
  0x0000000116b5f08f: push   %r11
  0x0000000116b5f091: mov    $0x109,%edi
  0x0000000116b5f096: movabs $0x7ff815049fd5,%r10
  0x0000000116b5f0a0: callq  *%r10
  0x0000000116b5f0a3: pop    %r11
  0x0000000116b5f0a5: pop    %rsp
  0x0000000116b5f0a6: pop    %r10
  0x0000000116b5f0a8: pop    %r9
  0x0000000116b5f0aa: pop    %r8
  0x0000000116b5f0ac: pop    %rcx
  0x0000000116b5f0ad: pop    %rdx
  0x0000000116b5f0ae: pop    %rsi
  0x0000000116b5f0af: pop    %rdi
  0x0000000116b5f0b0: cmp    %rax,%r15
  0x0000000116b5f0b3: je     0x0000000116b5f130
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b5f0b9: mov    %rsp,-0x28(%rsp)
  0x0000000116b5f0be: sub    $0x80,%rsp
  0x0000000116b5f0c5: mov    %rax,0x78(%rsp)
  0x0000000116b5f0ca: mov    %rcx,0x70(%rsp)
  0x0000000116b5f0cf: mov    %rdx,0x68(%rsp)
  0x0000000116b5f0d4: mov    %rbx,0x60(%rsp)
  0x0000000116b5f0d9: mov    %rbp,0x50(%rsp)
  0x0000000116b5f0de: mov    %rsi,0x48(%rsp)
  0x0000000116b5f0e3: mov    %rdi,0x40(%rsp)
  0x0000000116b5f0e8: mov    %r8,0x38(%rsp)
  0x0000000116b5f0ed: mov    %r9,0x30(%rsp)
  0x0000000116b5f0f2: mov    %r10,0x28(%rsp)
  0x0000000116b5f0f7: mov    %r11,0x20(%rsp)
  0x0000000116b5f0fc: mov    %r12,0x18(%rsp)
  0x0000000116b5f101: mov    %r13,0x10(%rsp)
  0x0000000116b5f106: mov    %r14,0x8(%rsp)
  0x0000000116b5f10b: mov    %r15,(%rsp)
  0x0000000116b5f10f: movabs $0x10cc6405e,%rdi
  0x0000000116b5f119: movabs $0x116b5f0b9,%rsi
  0x0000000116b5f123: mov    %rsp,%rdx
  0x0000000116b5f126: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5f12a: callq  0x000000010c7dd830
  0x0000000116b5f12f: hlt    
  0x0000000116b5f130: pop    %rax
  0x0000000116b5f131: movabs $0x0,%r10
  0x0000000116b5f13b: mov    %r10,0x280(%r15)
  0x0000000116b5f142: movabs $0x0,%r10
  0x0000000116b5f14c: mov    %r10,0x290(%r15)
  0x0000000116b5f153: movabs $0x0,%r10
  0x0000000116b5f15d: mov    %r10,0x288(%r15)
  0x0000000116b5f164: cmpq   $0x0,0x8(%r15)
  0x0000000116b5f16c: je     0x0000000116b5f177
  0x0000000116b5f172: jmpq   0x0000000116b30420
  0x0000000116b5f177: mov    0x2e0(%r15),%rax
  0x0000000116b5f17e: movabs $0x0,%r10
  0x0000000116b5f188: mov    %r10,0x2e0(%r15)
  0x0000000116b5f18f: mov    -0x38(%rbp),%r13
  0x0000000116b5f193: mov    -0x30(%rbp),%r14
  0x0000000116b5f197: retq   
  0x0000000116b5f198: push   %rax
  0x0000000116b5f199: jmpq   0x0000000116b5f23c
  0x0000000116b5f19e: cmp    $0x4,%edx
  0x0000000116b5f1a1: jne    0x0000000116b5f1b7
  0x0000000116b5f1a3: vmovss 0x58(%rcx,%rbx,8),%xmm0
  0x0000000116b5f1a9: sub    $0x8,%rsp
  0x0000000116b5f1ad: vmovss %xmm0,(%rsp)
  0x0000000116b5f1b2: jmpq   0x0000000116b5f23c
  0x0000000116b5f1b7: cmp    $0x3,%edx
  0x0000000116b5f1ba: je     0x0000000116b5f237
  0x0000000116b5f1c0: mov    %rsp,-0x28(%rsp)
  0x0000000116b5f1c5: sub    $0x80,%rsp
  0x0000000116b5f1cc: mov    %rax,0x78(%rsp)
  0x0000000116b5f1d1: mov    %rcx,0x70(%rsp)
  0x0000000116b5f1d6: mov    %rdx,0x68(%rsp)
  0x0000000116b5f1db: mov    %rbx,0x60(%rsp)
  0x0000000116b5f1e0: mov    %rbp,0x50(%rsp)
  0x0000000116b5f1e5: mov    %rsi,0x48(%rsp)
  0x0000000116b5f1ea: mov    %rdi,0x40(%rsp)
  0x0000000116b5f1ef: mov    %r8,0x38(%rsp)
  0x0000000116b5f1f4: mov    %r9,0x30(%rsp)
  0x0000000116b5f1f9: mov    %r10,0x28(%rsp)
  0x0000000116b5f1fe: mov    %r11,0x20(%rsp)
  0x0000000116b5f203: mov    %r12,0x18(%rsp)
  0x0000000116b5f208: mov    %r13,0x10(%rsp)
  0x0000000116b5f20d: mov    %r14,0x8(%rsp)
  0x0000000116b5f212: mov    %r15,(%rsp)
  0x0000000116b5f216: movabs $0x10ccb0445,%rdi
  0x0000000116b5f220: movabs $0x116b5f1c0,%rsi
  0x0000000116b5f22a: mov    %rsp,%rdx
  0x0000000116b5f22d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5f231: callq  0x000000010c7dd830
  0x0000000116b5f236: hlt    
  0x0000000116b5f237: mov    0x58(%rcx,%rbx,8),%eax
  0x0000000116b5f23b: push   %rax
  0x0000000116b5f23c: movzbl 0x3(%r13),%ebx
  0x0000000116b5f241: add    $0x3,%r13
  0x0000000116b5f245: movabs $0x10ce3b680,%r10
  0x0000000116b5f24f: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f253: nop
  0x0000000116b5f254: nop
  0x0000000116b5f255: nop
  0x0000000116b5f256: nop
  0x0000000116b5f257: nop
  0x0000000116b5f258: int3   
  0x0000000116b5f259: int3   
  0x0000000116b5f25a: int3   
  0x0000000116b5f25b: int3   
  0x0000000116b5f25c: int3   
  0x0000000116b5f25d: int3   
  0x0000000116b5f25e: int3   
  0x0000000116b5f25f: int3   

----------------------------------------------------------------------
ldc2_w  20 ldc2_w  [0x0000000116b5f2a0, 0x0000000116b5f340]  160 bytes

  0x0000000116b5f2a0: push   %rax
  0x0000000116b5f2a1: jmpq   0x0000000116b5f2d0
  0x0000000116b5f2a6: sub    $0x8,%rsp
  0x0000000116b5f2aa: vmovss %xmm0,(%rsp)
  0x0000000116b5f2af: jmpq   0x0000000116b5f2d0
  0x0000000116b5f2b4: sub    $0x10,%rsp
  0x0000000116b5f2b8: vmovsd %xmm0,(%rsp)
  0x0000000116b5f2bd: jmpq   0x0000000116b5f2d0
  0x0000000116b5f2c2: sub    $0x10,%rsp
  0x0000000116b5f2c6: mov    %rax,(%rsp)
  0x0000000116b5f2ca: jmpq   0x0000000116b5f2d0
  0x0000000116b5f2cf: push   %rax
  0x0000000116b5f2d0: movzwl 0x1(%r13),%ebx
  0x0000000116b5f2d5: bswap  %ebx
  0x0000000116b5f2d7: shr    $0x10,%ebx
  0x0000000116b5f2da: mov    -0x18(%rbp),%rcx
  0x0000000116b5f2de: mov    0x10(%rcx),%rcx
  0x0000000116b5f2e2: mov    0x8(%rcx),%rcx
  0x0000000116b5f2e6: mov    0x10(%rcx),%rax
  0x0000000116b5f2ea: cmpb   $0x6,0x4(%rax,%rbx,1)
  0x0000000116b5f2ef: jne    0x0000000116b5f302
  0x0000000116b5f2f1: vmovsd 0x58(%rcx,%rbx,8),%xmm0
  0x0000000116b5f2f7: sub    $0x10,%rsp
  0x0000000116b5f2fb: vmovsd %xmm0,(%rsp)
  0x0000000116b5f300: jmp    0x0000000116b5f30f
  0x0000000116b5f302: mov    0x58(%rcx,%rbx,8),%rax
  0x0000000116b5f307: sub    $0x10,%rsp
  0x0000000116b5f30b: mov    %rax,(%rsp)
  0x0000000116b5f30f: movzbl 0x3(%r13),%ebx
  0x0000000116b5f314: add    $0x3,%r13
  0x0000000116b5f318: movabs $0x10ce3b680,%r10
  0x0000000116b5f322: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f326: nop
  0x0000000116b5f327: nop
  0x0000000116b5f328: int3   
  0x0000000116b5f329: int3   
  0x0000000116b5f32a: int3   
  0x0000000116b5f32b: int3   
  0x0000000116b5f32c: int3   
  0x0000000116b5f32d: int3   
  0x0000000116b5f32e: int3   
  0x0000000116b5f32f: int3   
  0x0000000116b5f330: int3   
  0x0000000116b5f331: int3   
  0x0000000116b5f332: int3   
  0x0000000116b5f333: int3   
  0x0000000116b5f334: int3   
  0x0000000116b5f335: int3   
  0x0000000116b5f336: int3   
  0x0000000116b5f337: int3   
  0x0000000116b5f338: int3   
  0x0000000116b5f339: int3   
  0x0000000116b5f33a: int3   
  0x0000000116b5f33b: int3   
  0x0000000116b5f33c: int3   
  0x0000000116b5f33d: int3   
  0x0000000116b5f33e: int3   
  0x0000000116b5f33f: int3   

----------------------------------------------------------------------
iload  21 iload  [0x0000000116b5f380, 0x0000000116b5f4c0]  320 bytes

  0x0000000116b5f380: push   %rax
  0x0000000116b5f381: jmpq   0x0000000116b5f3b0
  0x0000000116b5f386: sub    $0x8,%rsp
  0x0000000116b5f38a: vmovss %xmm0,(%rsp)
  0x0000000116b5f38f: jmpq   0x0000000116b5f3b0
  0x0000000116b5f394: sub    $0x10,%rsp
  0x0000000116b5f398: vmovsd %xmm0,(%rsp)
  0x0000000116b5f39d: jmpq   0x0000000116b5f3b0
  0x0000000116b5f3a2: sub    $0x10,%rsp
  0x0000000116b5f3a6: mov    %rax,(%rsp)
  0x0000000116b5f3aa: jmpq   0x0000000116b5f3b0
  0x0000000116b5f3af: push   %rax
  0x0000000116b5f3b0: movzbl 0x2(%r13),%ebx
  0x0000000116b5f3b5: cmp    $0x15,%ebx
  0x0000000116b5f3b8: je     0x0000000116b5f46b
  0x0000000116b5f3be: cmp    $0xe0,%ebx
  0x0000000116b5f3c4: mov    $0xe1,%ecx
  0x0000000116b5f3c9: je     0x0000000116b5f3da
  0x0000000116b5f3cb: cmp    $0x34,%ebx
  0x0000000116b5f3ce: mov    $0xe2,%ecx
  0x0000000116b5f3d3: je     0x0000000116b5f3da
  0x0000000116b5f3d5: mov    $0xe0,%ecx
  0x0000000116b5f3da: movzbl 0x0(%r13),%ebx
  0x0000000116b5f3df: cmp    $0x15,%ebx
  0x0000000116b5f3e2: je     0x0000000116b5f467
  0x0000000116b5f3e8: cmp    %ecx,%ebx
  0x0000000116b5f3ea: je     0x0000000116b5f467
  0x0000000116b5f3f0: mov    %rsp,-0x28(%rsp)
  0x0000000116b5f3f5: sub    $0x80,%rsp
  0x0000000116b5f3fc: mov    %rax,0x78(%rsp)
  0x0000000116b5f401: mov    %rcx,0x70(%rsp)
  0x0000000116b5f406: mov    %rdx,0x68(%rsp)
  0x0000000116b5f40b: mov    %rbx,0x60(%rsp)
  0x0000000116b5f410: mov    %rbp,0x50(%rsp)
  0x0000000116b5f415: mov    %rsi,0x48(%rsp)
  0x0000000116b5f41a: mov    %rdi,0x40(%rsp)
  0x0000000116b5f41f: mov    %r8,0x38(%rsp)
  0x0000000116b5f424: mov    %r9,0x30(%rsp)
  0x0000000116b5f429: mov    %r10,0x28(%rsp)
  0x0000000116b5f42e: mov    %r11,0x20(%rsp)
  0x0000000116b5f433: mov    %r12,0x18(%rsp)
  0x0000000116b5f438: mov    %r13,0x10(%rsp)
  0x0000000116b5f43d: mov    %r14,0x8(%rsp)
  0x0000000116b5f442: mov    %r15,(%rsp)
  0x0000000116b5f446: movabs $0x10ccb040d,%rdi
  0x0000000116b5f450: movabs $0x116b5f3f0,%rsi
  0x0000000116b5f45a: mov    %rsp,%rdx
  0x0000000116b5f45d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b5f461: callq  0x000000010c7dd830
  0x0000000116b5f466: hlt    
  0x0000000116b5f467: mov    %cl,0x0(%r13)
  0x0000000116b5f46b: movzbl 0x1(%r13),%ebx
  0x0000000116b5f470: neg    %rbx
  0x0000000116b5f473: mov    (%r14,%rbx,8),%eax
  0x0000000116b5f477: movzbl 0x2(%r13),%ebx
  0x0000000116b5f47c: add    $0x2,%r13
  0x0000000116b5f480: movabs $0x10ce38e80,%r10
  0x0000000116b5f48a: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f48e: movzwl 0x2(%r13),%ebx
  0x0000000116b5f493: bswap  %ebx
  0x0000000116b5f495: shr    $0x10,%ebx
  0x0000000116b5f498: neg    %rbx
  0x0000000116b5f49b: mov    (%r14,%rbx,8),%eax
  0x0000000116b5f49f: movzbl 0x4(%r13),%ebx
  0x0000000116b5f4a4: add    $0x4,%r13
  0x0000000116b5f4a8: movabs $0x10ce38e80,%r10
  0x0000000116b5f4b2: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f4b6: nop
  0x0000000116b5f4b7: nop
  0x0000000116b5f4b8: int3   
  0x0000000116b5f4b9: int3   
  0x0000000116b5f4ba: int3   
  0x0000000116b5f4bb: int3   
  0x0000000116b5f4bc: int3   
  0x0000000116b5f4bd: int3   
  0x0000000116b5f4be: int3   
  0x0000000116b5f4bf: int3   

----------------------------------------------------------------------
lload  22 lload  [0x0000000116b5f500, 0x0000000116b5f580]  128 bytes

  0x0000000116b5f500: push   %rax
  0x0000000116b5f501: jmpq   0x0000000116b5f530
  0x0000000116b5f506: sub    $0x8,%rsp
  0x0000000116b5f50a: vmovss %xmm0,(%rsp)
  0x0000000116b5f50f: jmpq   0x0000000116b5f530
  0x0000000116b5f514: sub    $0x10,%rsp
  0x0000000116b5f518: vmovsd %xmm0,(%rsp)
  0x0000000116b5f51d: jmpq   0x0000000116b5f530
  0x0000000116b5f522: sub    $0x10,%rsp
  0x0000000116b5f526: mov    %rax,(%rsp)
  0x0000000116b5f52a: jmpq   0x0000000116b5f530
  0x0000000116b5f52f: push   %rax
  0x0000000116b5f530: movzbl 0x1(%r13),%ebx
  0x0000000116b5f535: neg    %rbx
  0x0000000116b5f538: mov    -0x8(%r14,%rbx,8),%rax
  0x0000000116b5f53d: movzbl 0x2(%r13),%ebx
  0x0000000116b5f542: add    $0x2,%r13
  0x0000000116b5f546: movabs $0x10ce39680,%r10
  0x0000000116b5f550: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f554: movzwl 0x2(%r13),%ebx
  0x0000000116b5f559: bswap  %ebx
  0x0000000116b5f55b: shr    $0x10,%ebx
  0x0000000116b5f55e: neg    %rbx
  0x0000000116b5f561: mov    -0x8(%r14,%rbx,8),%rax
  0x0000000116b5f566: movzbl 0x4(%r13),%ebx
  0x0000000116b5f56b: add    $0x4,%r13
  0x0000000116b5f56f: movabs $0x10ce39680,%r10
  0x0000000116b5f579: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f57d: nop
  0x0000000116b5f57e: nop
  0x0000000116b5f57f: nop

----------------------------------------------------------------------
fload  23 fload  [0x0000000116b5f5c0, 0x0000000116b5f640]  128 bytes

  0x0000000116b5f5c0: push   %rax
  0x0000000116b5f5c1: jmpq   0x0000000116b5f5f0
  0x0000000116b5f5c6: sub    $0x8,%rsp
  0x0000000116b5f5ca: vmovss %xmm0,(%rsp)
  0x0000000116b5f5cf: jmpq   0x0000000116b5f5f0
  0x0000000116b5f5d4: sub    $0x10,%rsp
  0x0000000116b5f5d8: vmovsd %xmm0,(%rsp)
  0x0000000116b5f5dd: jmpq   0x0000000116b5f5f0
  0x0000000116b5f5e2: sub    $0x10,%rsp
  0x0000000116b5f5e6: mov    %rax,(%rsp)
  0x0000000116b5f5ea: jmpq   0x0000000116b5f5f0
  0x0000000116b5f5ef: push   %rax
  0x0000000116b5f5f0: movzbl 0x1(%r13),%ebx
  0x0000000116b5f5f5: neg    %rbx
  0x0000000116b5f5f8: vmovss (%r14,%rbx,8),%xmm0
  0x0000000116b5f5fe: movzbl 0x2(%r13),%ebx
  0x0000000116b5f603: add    $0x2,%r13
  0x0000000116b5f607: movabs $0x10ce39e80,%r10
  0x0000000116b5f611: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f615: movzwl 0x2(%r13),%ebx
  0x0000000116b5f61a: bswap  %ebx
  0x0000000116b5f61c: shr    $0x10,%ebx
  0x0000000116b5f61f: neg    %rbx
  0x0000000116b5f622: vmovss (%r14,%rbx,8),%xmm0
  0x0000000116b5f628: movzbl 0x4(%r13),%ebx
  0x0000000116b5f62d: add    $0x4,%r13
  0x0000000116b5f631: movabs $0x10ce39e80,%r10
  0x0000000116b5f63b: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f63f: nop

----------------------------------------------------------------------
dload  24 dload  [0x0000000116b5f680, 0x0000000116b5f720]  160 bytes

  0x0000000116b5f680: push   %rax
  0x0000000116b5f681: jmpq   0x0000000116b5f6b0
  0x0000000116b5f686: sub    $0x8,%rsp
  0x0000000116b5f68a: vmovss %xmm0,(%rsp)
  0x0000000116b5f68f: jmpq   0x0000000116b5f6b0
  0x0000000116b5f694: sub    $0x10,%rsp
  0x0000000116b5f698: vmovsd %xmm0,(%rsp)
  0x0000000116b5f69d: jmpq   0x0000000116b5f6b0
  0x0000000116b5f6a2: sub    $0x10,%rsp
  0x0000000116b5f6a6: mov    %rax,(%rsp)
  0x0000000116b5f6aa: jmpq   0x0000000116b5f6b0
  0x0000000116b5f6af: push   %rax
  0x0000000116b5f6b0: movzbl 0x1(%r13),%ebx
  0x0000000116b5f6b5: neg    %rbx
  0x0000000116b5f6b8: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x0000000116b5f6bf: movzbl 0x2(%r13),%ebx
  0x0000000116b5f6c4: add    $0x2,%r13
  0x0000000116b5f6c8: movabs $0x10ce3a680,%r10
  0x0000000116b5f6d2: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f6d6: movzwl 0x2(%r13),%ebx
  0x0000000116b5f6db: bswap  %ebx
  0x0000000116b5f6dd: shr    $0x10,%ebx
  0x0000000116b5f6e0: neg    %rbx
  0x0000000116b5f6e3: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x0000000116b5f6ea: movzbl 0x4(%r13),%ebx
  0x0000000116b5f6ef: add    $0x4,%r13
  0x0000000116b5f6f3: movabs $0x10ce3a680,%r10
  0x0000000116b5f6fd: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f701: nop
  0x0000000116b5f702: nop
  0x0000000116b5f703: nop
  0x0000000116b5f704: nop
  0x0000000116b5f705: nop
  0x0000000116b5f706: nop
  0x0000000116b5f707: nop
  0x0000000116b5f708: int3   
  0x0000000116b5f709: int3   
  0x0000000116b5f70a: int3   
  0x0000000116b5f70b: int3   
  0x0000000116b5f70c: int3   
  0x0000000116b5f70d: int3   
  0x0000000116b5f70e: int3   
  0x0000000116b5f70f: int3   
  0x0000000116b5f710: int3   
  0x0000000116b5f711: int3   
  0x0000000116b5f712: int3   
  0x0000000116b5f713: int3   
  0x0000000116b5f714: int3   
  0x0000000116b5f715: int3   
  0x0000000116b5f716: int3   
  0x0000000116b5f717: int3   
  0x0000000116b5f718: int3   
  0x0000000116b5f719: int3   
  0x0000000116b5f71a: int3   
  0x0000000116b5f71b: int3   
  0x0000000116b5f71c: int3   
  0x0000000116b5f71d: int3   
  0x0000000116b5f71e: int3   
  0x0000000116b5f71f: int3   

----------------------------------------------------------------------
aload  25 aload  [0x0000000116b5f760, 0x0000000116b5f7e0]  128 bytes

  0x0000000116b5f760: push   %rax
  0x0000000116b5f761: jmpq   0x0000000116b5f790
  0x0000000116b5f766: sub    $0x8,%rsp
  0x0000000116b5f76a: vmovss %xmm0,(%rsp)
  0x0000000116b5f76f: jmpq   0x0000000116b5f790
  0x0000000116b5f774: sub    $0x10,%rsp
  0x0000000116b5f778: vmovsd %xmm0,(%rsp)
  0x0000000116b5f77d: jmpq   0x0000000116b5f790
  0x0000000116b5f782: sub    $0x10,%rsp
  0x0000000116b5f786: mov    %rax,(%rsp)
  0x0000000116b5f78a: jmpq   0x0000000116b5f790
  0x0000000116b5f78f: push   %rax
  0x0000000116b5f790: movzbl 0x1(%r13),%ebx
  0x0000000116b5f795: neg    %rbx
  0x0000000116b5f798: mov    (%r14,%rbx,8),%rax
  0x0000000116b5f79c: movzbl 0x2(%r13),%ebx
  0x0000000116b5f7a1: add    $0x2,%r13
  0x0000000116b5f7a5: movabs $0x10ce3ae80,%r10
  0x0000000116b5f7af: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f7b3: movzwl 0x2(%r13),%ebx
  0x0000000116b5f7b8: bswap  %ebx
  0x0000000116b5f7ba: shr    $0x10,%ebx
  0x0000000116b5f7bd: neg    %rbx
  0x0000000116b5f7c0: mov    (%r14,%rbx,8),%rax
  0x0000000116b5f7c4: movzbl 0x4(%r13),%ebx
  0x0000000116b5f7c9: add    $0x4,%r13
  0x0000000116b5f7cd: movabs $0x10ce3ae80,%r10
  0x0000000116b5f7d7: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f7db: nop
  0x0000000116b5f7dc: nop
  0x0000000116b5f7dd: nop
  0x0000000116b5f7de: nop
  0x0000000116b5f7df: nop

----------------------------------------------------------------------
iload_0  26 iload_0  [0x0000000116b5f820, 0x0000000116b5f880]  96 bytes

  0x0000000116b5f820: push   %rax
  0x0000000116b5f821: jmpq   0x0000000116b5f850
  0x0000000116b5f826: sub    $0x8,%rsp
  0x0000000116b5f82a: vmovss %xmm0,(%rsp)
  0x0000000116b5f82f: jmpq   0x0000000116b5f850
  0x0000000116b5f834: sub    $0x10,%rsp
  0x0000000116b5f838: vmovsd %xmm0,(%rsp)
  0x0000000116b5f83d: jmpq   0x0000000116b5f850
  0x0000000116b5f842: sub    $0x10,%rsp
  0x0000000116b5f846: mov    %rax,(%rsp)
  0x0000000116b5f84a: jmpq   0x0000000116b5f850
  0x0000000116b5f84f: push   %rax
  0x0000000116b5f850: mov    (%r14),%eax
  0x0000000116b5f853: movzbl 0x1(%r13),%ebx
  0x0000000116b5f858: inc    %r13
  0x0000000116b5f85b: movabs $0x10ce38e80,%r10
  0x0000000116b5f865: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f869: nop
  0x0000000116b5f86a: nop
  0x0000000116b5f86b: nop
  0x0000000116b5f86c: nop
  0x0000000116b5f86d: nop
  0x0000000116b5f86e: nop
  0x0000000116b5f86f: nop
  0x0000000116b5f870: int3   
  0x0000000116b5f871: int3   
  0x0000000116b5f872: int3   
  0x0000000116b5f873: int3   
  0x0000000116b5f874: int3   
  0x0000000116b5f875: int3   
  0x0000000116b5f876: int3   
  0x0000000116b5f877: int3   
  0x0000000116b5f878: int3   
  0x0000000116b5f879: int3   
  0x0000000116b5f87a: int3   
  0x0000000116b5f87b: int3   
  0x0000000116b5f87c: int3   
  0x0000000116b5f87d: int3   
  0x0000000116b5f87e: int3   
  0x0000000116b5f87f: int3   

----------------------------------------------------------------------
iload_1  27 iload_1  [0x0000000116b5f8c0, 0x0000000116b5f920]  96 bytes

  0x0000000116b5f8c0: push   %rax
  0x0000000116b5f8c1: jmpq   0x0000000116b5f8f0
  0x0000000116b5f8c6: sub    $0x8,%rsp
  0x0000000116b5f8ca: vmovss %xmm0,(%rsp)
  0x0000000116b5f8cf: jmpq   0x0000000116b5f8f0
  0x0000000116b5f8d4: sub    $0x10,%rsp
  0x0000000116b5f8d8: vmovsd %xmm0,(%rsp)
  0x0000000116b5f8dd: jmpq   0x0000000116b5f8f0
  0x0000000116b5f8e2: sub    $0x10,%rsp
  0x0000000116b5f8e6: mov    %rax,(%rsp)
  0x0000000116b5f8ea: jmpq   0x0000000116b5f8f0
  0x0000000116b5f8ef: push   %rax
  0x0000000116b5f8f0: mov    -0x8(%r14),%eax
  0x0000000116b5f8f4: movzbl 0x1(%r13),%ebx
  0x0000000116b5f8f9: inc    %r13
  0x0000000116b5f8fc: movabs $0x10ce38e80,%r10
  0x0000000116b5f906: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f90a: nop
  0x0000000116b5f90b: nop
  0x0000000116b5f90c: nop
  0x0000000116b5f90d: nop
  0x0000000116b5f90e: nop
  0x0000000116b5f90f: nop
  0x0000000116b5f910: int3   
  0x0000000116b5f911: int3   
  0x0000000116b5f912: int3   
  0x0000000116b5f913: int3   
  0x0000000116b5f914: int3   
  0x0000000116b5f915: int3   
  0x0000000116b5f916: int3   
  0x0000000116b5f917: int3   
  0x0000000116b5f918: int3   
  0x0000000116b5f919: int3   
  0x0000000116b5f91a: int3   
  0x0000000116b5f91b: int3   
  0x0000000116b5f91c: int3   
  0x0000000116b5f91d: int3   
  0x0000000116b5f91e: int3   
  0x0000000116b5f91f: int3   

----------------------------------------------------------------------
iload_2  28 iload_2  [0x0000000116b5f960, 0x0000000116b5f9c0]  96 bytes

  0x0000000116b5f960: push   %rax
  0x0000000116b5f961: jmpq   0x0000000116b5f990
  0x0000000116b5f966: sub    $0x8,%rsp
  0x0000000116b5f96a: vmovss %xmm0,(%rsp)
  0x0000000116b5f96f: jmpq   0x0000000116b5f990
  0x0000000116b5f974: sub    $0x10,%rsp
  0x0000000116b5f978: vmovsd %xmm0,(%rsp)
  0x0000000116b5f97d: jmpq   0x0000000116b5f990
  0x0000000116b5f982: sub    $0x10,%rsp
  0x0000000116b5f986: mov    %rax,(%rsp)
  0x0000000116b5f98a: jmpq   0x0000000116b5f990
  0x0000000116b5f98f: push   %rax
  0x0000000116b5f990: mov    -0x10(%r14),%eax
  0x0000000116b5f994: movzbl 0x1(%r13),%ebx
  0x0000000116b5f999: inc    %r13
  0x0000000116b5f99c: movabs $0x10ce38e80,%r10
  0x0000000116b5f9a6: jmpq   *(%r10,%rbx,8)
  0x0000000116b5f9aa: nop
  0x0000000116b5f9ab: nop
  0x0000000116b5f9ac: nop
  0x0000000116b5f9ad: nop
  0x0000000116b5f9ae: nop
  0x0000000116b5f9af: nop
  0x0000000116b5f9b0: int3   
  0x0000000116b5f9b1: int3   
  0x0000000116b5f9b2: int3   
  0x0000000116b5f9b3: int3   
  0x0000000116b5f9b4: int3   
  0x0000000116b5f9b5: int3   
  0x0000000116b5f9b6: int3   
  0x0000000116b5f9b7: int3   
  0x0000000116b5f9b8: int3   
  0x0000000116b5f9b9: int3   
  0x0000000116b5f9ba: int3   
  0x0000000116b5f9bb: int3   
  0x0000000116b5f9bc: int3   
  0x0000000116b5f9bd: int3   
  0x0000000116b5f9be: int3   
  0x0000000116b5f9bf: int3   

----------------------------------------------------------------------
iload_3  29 iload_3  [0x0000000116b5fa00, 0x0000000116b5fa60]  96 bytes

  0x0000000116b5fa00: push   %rax
  0x0000000116b5fa01: jmpq   0x0000000116b5fa30
  0x0000000116b5fa06: sub    $0x8,%rsp
  0x0000000116b5fa0a: vmovss %xmm0,(%rsp)
  0x0000000116b5fa0f: jmpq   0x0000000116b5fa30
  0x0000000116b5fa14: sub    $0x10,%rsp
  0x0000000116b5fa18: vmovsd %xmm0,(%rsp)
  0x0000000116b5fa1d: jmpq   0x0000000116b5fa30
  0x0000000116b5fa22: sub    $0x10,%rsp
  0x0000000116b5fa26: mov    %rax,(%rsp)
  0x0000000116b5fa2a: jmpq   0x0000000116b5fa30
  0x0000000116b5fa2f: push   %rax
  0x0000000116b5fa30: mov    -0x18(%r14),%eax
  0x0000000116b5fa34: movzbl 0x1(%r13),%ebx
  0x0000000116b5fa39: inc    %r13
  0x0000000116b5fa3c: movabs $0x10ce38e80,%r10
  0x0000000116b5fa46: jmpq   *(%r10,%rbx,8)
  0x0000000116b5fa4a: nop
  0x0000000116b5fa4b: nop
  0x0000000116b5fa4c: nop
  0x0000000116b5fa4d: nop
  0x0000000116b5fa4e: nop
  0x0000000116b5fa4f: nop
  0x0000000116b5fa50: int3   
  0x0000000116b5fa51: int3   
  0x0000000116b5fa52: int3   
  0x0000000116b5fa53: int3   
  0x0000000116b5fa54: int3   
  0x0000000116b5fa55: int3   
  0x0000000116b5fa56: int3   
  0x0000000116b5fa57: int3   
  0x0000000116b5fa58: int3   
  0x0000000116b5fa59: int3   
  0x0000000116b5fa5a: int3   
  0x0000000116b5fa5b: int3   
  0x0000000116b5fa5c: int3   
  0x0000000116b5fa5d: int3   
  0x0000000116b5fa5e: int3   
  0x0000000116b5fa5f: int3   

----------------------------------------------------------------------
lload_0  30 lload_0  [0x0000000116b5faa0, 0x0000000116b5fb00]  96 bytes

  0x0000000116b5faa0: push   %rax
  0x0000000116b5faa1: jmpq   0x0000000116b5fad0
  0x0000000116b5faa6: sub    $0x8,%rsp
  0x0000000116b5faaa: vmovss %xmm0,(%rsp)
  0x0000000116b5faaf: jmpq   0x0000000116b5fad0
  0x0000000116b5fab4: sub    $0x10,%rsp
  0x0000000116b5fab8: vmovsd %xmm0,(%rsp)
  0x0000000116b5fabd: jmpq   0x0000000116b5fad0
  0x0000000116b5fac2: sub    $0x10,%rsp
  0x0000000116b5fac6: mov    %rax,(%rsp)
  0x0000000116b5faca: jmpq   0x0000000116b5fad0
  0x0000000116b5facf: push   %rax
  0x0000000116b5fad0: mov    -0x8(%r14),%rax
  0x0000000116b5fad4: movzbl 0x1(%r13),%ebx
  0x0000000116b5fad9: inc    %r13
  0x0000000116b5fadc: movabs $0x10ce39680,%r10
  0x0000000116b5fae6: jmpq   *(%r10,%rbx,8)
  0x0000000116b5faea: nop
  0x0000000116b5faeb: nop
  0x0000000116b5faec: nop
  0x0000000116b5faed: nop
  0x0000000116b5faee: nop
  0x0000000116b5faef: nop
  0x0000000116b5faf0: int3   
  0x0000000116b5faf1: int3   
  0x0000000116b5faf2: int3   
  0x0000000116b5faf3: int3   
  0x0000000116b5faf4: int3   
  0x0000000116b5faf5: int3   
  0x0000000116b5faf6: int3   
  0x0000000116b5faf7: int3   
  0x0000000116b5faf8: int3   
  0x0000000116b5faf9: int3   
  0x0000000116b5fafa: int3   
  0x0000000116b5fafb: int3   
  0x0000000116b5fafc: int3   
  0x0000000116b5fafd: int3   
  0x0000000116b5fafe: int3   
  0x0000000116b5faff: int3   

----------------------------------------------------------------------
lload_1  31 lload_1  [0x0000000116b5fb40, 0x0000000116b5fba0]  96 bytes

  0x0000000116b5fb40: push   %rax
  0x0000000116b5fb41: jmpq   0x0000000116b5fb70
  0x0000000116b5fb46: sub    $0x8,%rsp
  0x0000000116b5fb4a: vmovss %xmm0,(%rsp)
  0x0000000116b5fb4f: jmpq   0x0000000116b5fb70
  0x0000000116b5fb54: sub    $0x10,%rsp
  0x0000000116b5fb58: vmovsd %xmm0,(%rsp)
  0x0000000116b5fb5d: jmpq   0x0000000116b5fb70
  0x0000000116b5fb62: sub    $0x10,%rsp
  0x0000000116b5fb66: mov    %rax,(%rsp)
  0x0000000116b5fb6a: jmpq   0x0000000116b5fb70
  0x0000000116b5fb6f: push   %rax
  0x0000000116b5fb70: mov    -0x10(%r14),%rax
  0x0000000116b5fb74: movzbl 0x1(%r13),%ebx
  0x0000000116b5fb79: inc    %r13
  0x0000000116b5fb7c: movabs $0x10ce39680,%r10
  0x0000000116b5fb86: jmpq   *(%r10,%rbx,8)
  0x0000000116b5fb8a: nop
  0x0000000116b5fb8b: nop
  0x0000000116b5fb8c: nop
  0x0000000116b5fb8d: nop
  0x0000000116b5fb8e: nop
  0x0000000116b5fb8f: nop
  0x0000000116b5fb90: int3   
  0x0000000116b5fb91: int3   
  0x0000000116b5fb92: int3   
  0x0000000116b5fb93: int3   
  0x0000000116b5fb94: int3   
  0x0000000116b5fb95: int3   
  0x0000000116b5fb96: int3   
  0x0000000116b5fb97: int3   
  0x0000000116b5fb98: int3   
  0x0000000116b5fb99: int3   
  0x0000000116b5fb9a: int3   
  0x0000000116b5fb9b: int3   
  0x0000000116b5fb9c: int3   
  0x0000000116b5fb9d: int3   
  0x0000000116b5fb9e: int3   
  0x0000000116b5fb9f: int3   

----------------------------------------------------------------------
lload_2  32 lload_2  [0x0000000116b5fbe0, 0x0000000116b5fc40]  96 bytes

  0x0000000116b5fbe0: push   %rax
  0x0000000116b5fbe1: jmpq   0x0000000116b5fc10
  0x0000000116b5fbe6: sub    $0x8,%rsp
  0x0000000116b5fbea: vmovss %xmm0,(%rsp)
  0x0000000116b5fbef: jmpq   0x0000000116b5fc10
  0x0000000116b5fbf4: sub    $0x10,%rsp
  0x0000000116b5fbf8: vmovsd %xmm0,(%rsp)
  0x0000000116b5fbfd: jmpq   0x0000000116b5fc10
  0x0000000116b5fc02: sub    $0x10,%rsp
  0x0000000116b5fc06: mov    %rax,(%rsp)
  0x0000000116b5fc0a: jmpq   0x0000000116b5fc10
  0x0000000116b5fc0f: push   %rax
  0x0000000116b5fc10: mov    -0x18(%r14),%rax
  0x0000000116b5fc14: movzbl 0x1(%r13),%ebx
  0x0000000116b5fc19: inc    %r13
  0x0000000116b5fc1c: movabs $0x10ce39680,%r10
  0x0000000116b5fc26: jmpq   *(%r10,%rbx,8)
  0x0000000116b5fc2a: nop
  0x0000000116b5fc2b: nop
  0x0000000116b5fc2c: nop
  0x0000000116b5fc2d: nop
  0x0000000116b5fc2e: nop
  0x0000000116b5fc2f: nop
  0x0000000116b5fc30: int3   
  0x0000000116b5fc31: int3   
  0x0000000116b5fc32: int3   
  0x0000000116b5fc33: int3   
  0x0000000116b5fc34: int3   
  0x0000000116b5fc35: int3   
  0x0000000116b5fc36: int3   
  0x0000000116b5fc37: int3   
  0x0000000116b5fc38: int3   
  0x0000000116b5fc39: int3   
  0x0000000116b5fc3a: int3   
  0x0000000116b5fc3b: int3   
  0x0000000116b5fc3c: int3   
  0x0000000116b5fc3d: int3   
  0x0000000116b5fc3e: int3   
  0x0000000116b5fc3f: int3   

----------------------------------------------------------------------
lload_3  33 lload_3  [0x0000000116b5fc80, 0x0000000116b5fce0]  96 bytes

  0x0000000116b5fc80: push   %rax
  0x0000000116b5fc81: jmpq   0x0000000116b5fcb0
  0x0000000116b5fc86: sub    $0x8,%rsp
  0x0000000116b5fc8a: vmovss %xmm0,(%rsp)
  0x0000000116b5fc8f: jmpq   0x0000000116b5fcb0
  0x0000000116b5fc94: sub    $0x10,%rsp
  0x0000000116b5fc98: vmovsd %xmm0,(%rsp)
  0x0000000116b5fc9d: jmpq   0x0000000116b5fcb0
  0x0000000116b5fca2: sub    $0x10,%rsp
  0x0000000116b5fca6: mov    %rax,(%rsp)
  0x0000000116b5fcaa: jmpq   0x0000000116b5fcb0
  0x0000000116b5fcaf: push   %rax
  0x0000000116b5fcb0: mov    -0x20(%r14),%rax
  0x0000000116b5fcb4: movzbl 0x1(%r13),%ebx
  0x0000000116b5fcb9: inc    %r13
  0x0000000116b5fcbc: movabs $0x10ce39680,%r10
  0x0000000116b5fcc6: jmpq   *(%r10,%rbx,8)
  0x0000000116b5fcca: nop
  0x0000000116b5fccb: nop
  0x0000000116b5fccc: nop
  0x0000000116b5fccd: nop
  0x0000000116b5fcce: nop
  0x0000000116b5fccf: nop
  0x0000000116b5fcd0: int3   
  0x0000000116b5fcd1: int3   
  0x0000000116b5fcd2: int3   
  0x0000000116b5fcd3: int3   
  0x0000000116b5fcd4: int3   
  0x0000000116b5fcd5: int3   
  0x0000000116b5fcd6: int3   
  0x0000000116b5fcd7: int3   
  0x0000000116b5fcd8: int3   
  0x0000000116b5fcd9: int3   
  0x0000000116b5fcda: int3   
  0x0000000116b5fcdb: int3   
  0x0000000116b5fcdc: int3   
  0x0000000116b5fcdd: int3   
  0x0000000116b5fcde: int3   
  0x0000000116b5fcdf: int3   

----------------------------------------------------------------------
fload_0  34 fload_0  [0x0000000116b5fd20, 0x0000000116b5fd80]  96 bytes

  0x0000000116b5fd20: push   %rax
  0x0000000116b5fd21: jmpq   0x0000000116b5fd50
  0x0000000116b5fd26: sub    $0x8,%rsp
  0x0000000116b5fd2a: vmovss %xmm0,(%rsp)
  0x0000000116b5fd2f: jmpq   0x0000000116b5fd50
  0x0000000116b5fd34: sub    $0x10,%rsp
  0x0000000116b5fd38: vmovsd %xmm0,(%rsp)
  0x0000000116b5fd3d: jmpq   0x0000000116b5fd50
  0x0000000116b5fd42: sub    $0x10,%rsp
  0x0000000116b5fd46: mov    %rax,(%rsp)
  0x0000000116b5fd4a: jmpq   0x0000000116b5fd50
  0x0000000116b5fd4f: push   %rax
  0x0000000116b5fd50: vmovss (%r14),%xmm0
  0x0000000116b5fd55: movzbl 0x1(%r13),%ebx
  0x0000000116b5fd5a: inc    %r13
  0x0000000116b5fd5d: movabs $0x10ce39e80,%r10
  0x0000000116b5fd67: jmpq   *(%r10,%rbx,8)
  0x0000000116b5fd6b: nop
  0x0000000116b5fd6c: nop
  0x0000000116b5fd6d: nop
  0x0000000116b5fd6e: nop
  0x0000000116b5fd6f: nop
  0x0000000116b5fd70: int3   
  0x0000000116b5fd71: int3   
  0x0000000116b5fd72: int3   
  0x0000000116b5fd73: int3   
  0x0000000116b5fd74: int3   
  0x0000000116b5fd75: int3   
  0x0000000116b5fd76: int3   
  0x0000000116b5fd77: int3   
  0x0000000116b5fd78: int3   
  0x0000000116b5fd79: int3   
  0x0000000116b5fd7a: int3   
  0x0000000116b5fd7b: int3   
  0x0000000116b5fd7c: int3   
  0x0000000116b5fd7d: int3   
  0x0000000116b5fd7e: int3   
  0x0000000116b5fd7f: int3   

----------------------------------------------------------------------
fload_1  35 fload_1  [0x0000000116b5fdc0, 0x0000000116b5fe20]  96 bytes

  0x0000000116b5fdc0: push   %rax
  0x0000000116b5fdc1: jmpq   0x0000000116b5fdf0
  0x0000000116b5fdc6: sub    $0x8,%rsp
  0x0000000116b5fdca: vmovss %xmm0,(%rsp)
  0x0000000116b5fdcf: jmpq   0x0000000116b5fdf0
  0x0000000116b5fdd4: sub    $0x10,%rsp
  0x0000000116b5fdd8: vmovsd %xmm0,(%rsp)
  0x0000000116b5fddd: jmpq   0x0000000116b5fdf0
  0x0000000116b5fde2: sub    $0x10,%rsp
  0x0000000116b5fde6: mov    %rax,(%rsp)
  0x0000000116b5fdea: jmpq   0x0000000116b5fdf0
  0x0000000116b5fdef: push   %rax
  0x0000000116b5fdf0: vmovss -0x8(%r14),%xmm0
  0x0000000116b5fdf6: movzbl 0x1(%r13),%ebx
  0x0000000116b5fdfb: inc    %r13
  0x0000000116b5fdfe: movabs $0x10ce39e80,%r10
  0x0000000116b5fe08: jmpq   *(%r10,%rbx,8)
  0x0000000116b5fe0c: nop
  0x0000000116b5fe0d: nop
  0x0000000116b5fe0e: nop
  0x0000000116b5fe0f: nop
  0x0000000116b5fe10: int3   
  0x0000000116b5fe11: int3   
  0x0000000116b5fe12: int3   
  0x0000000116b5fe13: int3   
  0x0000000116b5fe14: int3   
  0x0000000116b5fe15: int3   
  0x0000000116b5fe16: int3   
  0x0000000116b5fe17: int3   
  0x0000000116b5fe18: int3   
  0x0000000116b5fe19: int3   
  0x0000000116b5fe1a: int3   
  0x0000000116b5fe1b: int3   
  0x0000000116b5fe1c: int3   
  0x0000000116b5fe1d: int3   
  0x0000000116b5fe1e: int3   
  0x0000000116b5fe1f: int3   

----------------------------------------------------------------------
fload_2  36 fload_2  [0x0000000116b5fe60, 0x0000000116b5fec0]  96 bytes

  0x0000000116b5fe60: push   %rax
  0x0000000116b5fe61: jmpq   0x0000000116b5fe90
  0x0000000116b5fe66: sub    $0x8,%rsp
  0x0000000116b5fe6a: vmovss %xmm0,(%rsp)
  0x0000000116b5fe6f: jmpq   0x0000000116b5fe90
  0x0000000116b5fe74: sub    $0x10,%rsp
  0x0000000116b5fe78: vmovsd %xmm0,(%rsp)
  0x0000000116b5fe7d: jmpq   0x0000000116b5fe90
  0x0000000116b5fe82: sub    $0x10,%rsp
  0x0000000116b5fe86: mov    %rax,(%rsp)
  0x0000000116b5fe8a: jmpq   0x0000000116b5fe90
  0x0000000116b5fe8f: push   %rax
  0x0000000116b5fe90: vmovss -0x10(%r14),%xmm0
  0x0000000116b5fe96: movzbl 0x1(%r13),%ebx
  0x0000000116b5fe9b: inc    %r13
  0x0000000116b5fe9e: movabs $0x10ce39e80,%r10
  0x0000000116b5fea8: jmpq   *(%r10,%rbx,8)
  0x0000000116b5feac: nop
  0x0000000116b5fead: nop
  0x0000000116b5feae: nop
  0x0000000116b5feaf: nop
  0x0000000116b5feb0: int3   
  0x0000000116b5feb1: int3   
  0x0000000116b5feb2: int3   
  0x0000000116b5feb3: int3   
  0x0000000116b5feb4: int3   
  0x0000000116b5feb5: int3   
  0x0000000116b5feb6: int3   
  0x0000000116b5feb7: int3   
  0x0000000116b5feb8: int3   
  0x0000000116b5feb9: int3   
  0x0000000116b5feba: int3   
  0x0000000116b5febb: int3   
  0x0000000116b5febc: int3   
  0x0000000116b5febd: int3   
  0x0000000116b5febe: int3   
  0x0000000116b5febf: int3   

----------------------------------------------------------------------
fload_3  37 fload_3  [0x0000000116b5ff00, 0x0000000116b5ff60]  96 bytes

  0x0000000116b5ff00: push   %rax
  0x0000000116b5ff01: jmpq   0x0000000116b5ff30
  0x0000000116b5ff06: sub    $0x8,%rsp
  0x0000000116b5ff0a: vmovss %xmm0,(%rsp)
  0x0000000116b5ff0f: jmpq   0x0000000116b5ff30
  0x0000000116b5ff14: sub    $0x10,%rsp
  0x0000000116b5ff18: vmovsd %xmm0,(%rsp)
  0x0000000116b5ff1d: jmpq   0x0000000116b5ff30
  0x0000000116b5ff22: sub    $0x10,%rsp
  0x0000000116b5ff26: mov    %rax,(%rsp)
  0x0000000116b5ff2a: jmpq   0x0000000116b5ff30
  0x0000000116b5ff2f: push   %rax
  0x0000000116b5ff30: vmovss -0x18(%r14),%xmm0
  0x0000000116b5ff36: movzbl 0x1(%r13),%ebx
  0x0000000116b5ff3b: inc    %r13
  0x0000000116b5ff3e: movabs $0x10ce39e80,%r10
  0x0000000116b5ff48: jmpq   *(%r10,%rbx,8)
  0x0000000116b5ff4c: nop
  0x0000000116b5ff4d: nop
  0x0000000116b5ff4e: nop
  0x0000000116b5ff4f: nop
  0x0000000116b5ff50: int3   
  0x0000000116b5ff51: int3   
  0x0000000116b5ff52: int3   
  0x0000000116b5ff53: int3   
  0x0000000116b5ff54: int3   
  0x0000000116b5ff55: int3   
  0x0000000116b5ff56: int3   
  0x0000000116b5ff57: int3   
  0x0000000116b5ff58: int3   
  0x0000000116b5ff59: int3   
  0x0000000116b5ff5a: int3   
  0x0000000116b5ff5b: int3   
  0x0000000116b5ff5c: int3   
  0x0000000116b5ff5d: int3   
  0x0000000116b5ff5e: int3   
  0x0000000116b5ff5f: int3   

----------------------------------------------------------------------
dload_0  38 dload_0  [0x0000000116b5ffa0, 0x0000000116b60000]  96 bytes

  0x0000000116b5ffa0: push   %rax
  0x0000000116b5ffa1: jmpq   0x0000000116b5ffd0
  0x0000000116b5ffa6: sub    $0x8,%rsp
  0x0000000116b5ffaa: vmovss %xmm0,(%rsp)
  0x0000000116b5ffaf: jmpq   0x0000000116b5ffd0
  0x0000000116b5ffb4: sub    $0x10,%rsp
  0x0000000116b5ffb8: vmovsd %xmm0,(%rsp)
  0x0000000116b5ffbd: jmpq   0x0000000116b5ffd0
  0x0000000116b5ffc2: sub    $0x10,%rsp
  0x0000000116b5ffc6: mov    %rax,(%rsp)
  0x0000000116b5ffca: jmpq   0x0000000116b5ffd0
  0x0000000116b5ffcf: push   %rax
  0x0000000116b5ffd0: vmovsd -0x8(%r14),%xmm0
  0x0000000116b5ffd6: movzbl 0x1(%r13),%ebx
  0x0000000116b5ffdb: inc    %r13
  0x0000000116b5ffde: movabs $0x10ce3a680,%r10
  0x0000000116b5ffe8: jmpq   *(%r10,%rbx,8)
  0x0000000116b5ffec: nop
  0x0000000116b5ffed: nop
  0x0000000116b5ffee: nop
  0x0000000116b5ffef: nop
  0x0000000116b5fff0: int3   
  0x0000000116b5fff1: int3   
  0x0000000116b5fff2: int3   
  0x0000000116b5fff3: int3   
  0x0000000116b5fff4: int3   
  0x0000000116b5fff5: int3   
  0x0000000116b5fff6: int3   
  0x0000000116b5fff7: int3   
  0x0000000116b5fff8: int3   
  0x0000000116b5fff9: int3   
  0x0000000116b5fffa: int3   
  0x0000000116b5fffb: int3   
  0x0000000116b5fffc: int3   
  0x0000000116b5fffd: int3   
  0x0000000116b5fffe: int3   
  0x0000000116b5ffff: int3   

----------------------------------------------------------------------
dload_1  39 dload_1  [0x0000000116b60040, 0x0000000116b600a0]  96 bytes

  0x0000000116b60040: push   %rax
  0x0000000116b60041: jmpq   0x0000000116b60070
  0x0000000116b60046: sub    $0x8,%rsp
  0x0000000116b6004a: vmovss %xmm0,(%rsp)
  0x0000000116b6004f: jmpq   0x0000000116b60070
  0x0000000116b60054: sub    $0x10,%rsp
  0x0000000116b60058: vmovsd %xmm0,(%rsp)
  0x0000000116b6005d: jmpq   0x0000000116b60070
  0x0000000116b60062: sub    $0x10,%rsp
  0x0000000116b60066: mov    %rax,(%rsp)
  0x0000000116b6006a: jmpq   0x0000000116b60070
  0x0000000116b6006f: push   %rax
  0x0000000116b60070: vmovsd -0x10(%r14),%xmm0
  0x0000000116b60076: movzbl 0x1(%r13),%ebx
  0x0000000116b6007b: inc    %r13
  0x0000000116b6007e: movabs $0x10ce3a680,%r10
  0x0000000116b60088: jmpq   *(%r10,%rbx,8)
  0x0000000116b6008c: nop
  0x0000000116b6008d: nop
  0x0000000116b6008e: nop
  0x0000000116b6008f: nop
  0x0000000116b60090: int3   
  0x0000000116b60091: int3   
  0x0000000116b60092: int3   
  0x0000000116b60093: int3   
  0x0000000116b60094: int3   
  0x0000000116b60095: int3   
  0x0000000116b60096: int3   
  0x0000000116b60097: int3   
  0x0000000116b60098: int3   
  0x0000000116b60099: int3   
  0x0000000116b6009a: int3   
  0x0000000116b6009b: int3   
  0x0000000116b6009c: int3   
  0x0000000116b6009d: int3   
  0x0000000116b6009e: int3   
  0x0000000116b6009f: int3   

----------------------------------------------------------------------
dload_2  40 dload_2  [0x0000000116b600e0, 0x0000000116b60140]  96 bytes

  0x0000000116b600e0: push   %rax
  0x0000000116b600e1: jmpq   0x0000000116b60110
  0x0000000116b600e6: sub    $0x8,%rsp
  0x0000000116b600ea: vmovss %xmm0,(%rsp)
  0x0000000116b600ef: jmpq   0x0000000116b60110
  0x0000000116b600f4: sub    $0x10,%rsp
  0x0000000116b600f8: vmovsd %xmm0,(%rsp)
  0x0000000116b600fd: jmpq   0x0000000116b60110
  0x0000000116b60102: sub    $0x10,%rsp
  0x0000000116b60106: mov    %rax,(%rsp)
  0x0000000116b6010a: jmpq   0x0000000116b60110
  0x0000000116b6010f: push   %rax
  0x0000000116b60110: vmovsd -0x18(%r14),%xmm0
  0x0000000116b60116: movzbl 0x1(%r13),%ebx
  0x0000000116b6011b: inc    %r13
  0x0000000116b6011e: movabs $0x10ce3a680,%r10
  0x0000000116b60128: jmpq   *(%r10,%rbx,8)
  0x0000000116b6012c: nop
  0x0000000116b6012d: nop
  0x0000000116b6012e: nop
  0x0000000116b6012f: nop
  0x0000000116b60130: int3   
  0x0000000116b60131: int3   
  0x0000000116b60132: int3   
  0x0000000116b60133: int3   
  0x0000000116b60134: int3   
  0x0000000116b60135: int3   
  0x0000000116b60136: int3   
  0x0000000116b60137: int3   
  0x0000000116b60138: int3   
  0x0000000116b60139: int3   
  0x0000000116b6013a: int3   
  0x0000000116b6013b: int3   
  0x0000000116b6013c: int3   
  0x0000000116b6013d: int3   
  0x0000000116b6013e: int3   
  0x0000000116b6013f: int3   

----------------------------------------------------------------------
dload_3  41 dload_3  [0x0000000116b60180, 0x0000000116b601e0]  96 bytes

  0x0000000116b60180: push   %rax
  0x0000000116b60181: jmpq   0x0000000116b601b0
  0x0000000116b60186: sub    $0x8,%rsp
  0x0000000116b6018a: vmovss %xmm0,(%rsp)
  0x0000000116b6018f: jmpq   0x0000000116b601b0
  0x0000000116b60194: sub    $0x10,%rsp
  0x0000000116b60198: vmovsd %xmm0,(%rsp)
  0x0000000116b6019d: jmpq   0x0000000116b601b0
  0x0000000116b601a2: sub    $0x10,%rsp
  0x0000000116b601a6: mov    %rax,(%rsp)
  0x0000000116b601aa: jmpq   0x0000000116b601b0
  0x0000000116b601af: push   %rax
  0x0000000116b601b0: vmovsd -0x20(%r14),%xmm0
  0x0000000116b601b6: movzbl 0x1(%r13),%ebx
  0x0000000116b601bb: inc    %r13
  0x0000000116b601be: movabs $0x10ce3a680,%r10
  0x0000000116b601c8: jmpq   *(%r10,%rbx,8)
  0x0000000116b601cc: nop
  0x0000000116b601cd: nop
  0x0000000116b601ce: nop
  0x0000000116b601cf: nop
  0x0000000116b601d0: int3   
  0x0000000116b601d1: int3   
  0x0000000116b601d2: int3   
  0x0000000116b601d3: int3   
  0x0000000116b601d4: int3   
  0x0000000116b601d5: int3   
  0x0000000116b601d6: int3   
  0x0000000116b601d7: int3   
  0x0000000116b601d8: int3   
  0x0000000116b601d9: int3   
  0x0000000116b601da: int3   
  0x0000000116b601db: int3   
  0x0000000116b601dc: int3   
  0x0000000116b601dd: int3   
  0x0000000116b601de: int3   
  0x0000000116b601df: int3   

----------------------------------------------------------------------
aload_0  42 aload_0  [0x0000000116b60220, 0x0000000116b60340]  288 bytes

  0x0000000116b60220: push   %rax
  0x0000000116b60221: jmpq   0x0000000116b60250
  0x0000000116b60226: sub    $0x8,%rsp
  0x0000000116b6022a: vmovss %xmm0,(%rsp)
  0x0000000116b6022f: jmpq   0x0000000116b60250
  0x0000000116b60234: sub    $0x10,%rsp
  0x0000000116b60238: vmovsd %xmm0,(%rsp)
  0x0000000116b6023d: jmpq   0x0000000116b60250
  0x0000000116b60242: sub    $0x10,%rsp
  0x0000000116b60246: mov    %rax,(%rsp)
  0x0000000116b6024a: jmpq   0x0000000116b60250
  0x0000000116b6024f: push   %rax
  0x0000000116b60250: movzbl 0x1(%r13),%ebx
  0x0000000116b60255: mov    (%r14),%rax
  0x0000000116b60258: cmp    $0xb4,%ebx
  0x0000000116b6025e: je     0x0000000116b60321
  0x0000000116b60264: cmp    $0xd0,%ebx
  0x0000000116b6026a: mov    $0xdd,%ecx
  0x0000000116b6026f: je     0x0000000116b60290
  0x0000000116b60271: cmp    $0xcb,%ebx
  0x0000000116b60277: mov    $0xde,%ecx
  0x0000000116b6027c: je     0x0000000116b60290
  0x0000000116b6027e: cmp    $0xcf,%ebx
  0x0000000116b60284: mov    $0xdf,%ecx
  0x0000000116b60289: je     0x0000000116b60290
  0x0000000116b6028b: mov    $0xdc,%ecx
  0x0000000116b60290: movzbl 0x0(%r13),%ebx
  0x0000000116b60295: cmp    $0x2a,%ebx
  0x0000000116b60298: je     0x0000000116b6031d
  0x0000000116b6029e: cmp    %ecx,%ebx
  0x0000000116b602a0: je     0x0000000116b6031d
  0x0000000116b602a6: mov    %rsp,-0x28(%rsp)
  0x0000000116b602ab: sub    $0x80,%rsp
  0x0000000116b602b2: mov    %rax,0x78(%rsp)
  0x0000000116b602b7: mov    %rcx,0x70(%rsp)
  0x0000000116b602bc: mov    %rdx,0x68(%rsp)
  0x0000000116b602c1: mov    %rbx,0x60(%rsp)
  0x0000000116b602c6: mov    %rbp,0x50(%rsp)
  0x0000000116b602cb: mov    %rsi,0x48(%rsp)
  0x0000000116b602d0: mov    %rdi,0x40(%rsp)
  0x0000000116b602d5: mov    %r8,0x38(%rsp)
  0x0000000116b602da: mov    %r9,0x30(%rsp)
  0x0000000116b602df: mov    %r10,0x28(%rsp)
  0x0000000116b602e4: mov    %r11,0x20(%rsp)
  0x0000000116b602e9: mov    %r12,0x18(%rsp)
  0x0000000116b602ee: mov    %r13,0x10(%rsp)
  0x0000000116b602f3: mov    %r14,0x8(%rsp)
  0x0000000116b602f8: mov    %r15,(%rsp)
  0x0000000116b602fc: movabs $0x10ccb040d,%rdi
  0x0000000116b60306: movabs $0x116b602a6,%rsi
  0x0000000116b60310: mov    %rsp,%rdx
  0x0000000116b60313: and    $0xfffffffffffffff0,%rsp
  0x0000000116b60317: callq  0x000000010c7dd830
  0x0000000116b6031c: hlt    
  0x0000000116b6031d: mov    %cl,0x0(%r13)
  0x0000000116b60321: movzbl 0x1(%r13),%ebx
  0x0000000116b60326: inc    %r13
  0x0000000116b60329: movabs $0x10ce3ae80,%r10
  0x0000000116b60333: jmpq   *(%r10,%rbx,8)
  0x0000000116b60337: nop
  0x0000000116b60338: int3   
  0x0000000116b60339: int3   
  0x0000000116b6033a: int3   
  0x0000000116b6033b: int3   
  0x0000000116b6033c: int3   
  0x0000000116b6033d: int3   
  0x0000000116b6033e: int3   
  0x0000000116b6033f: int3   

----------------------------------------------------------------------
aload_1  43 aload_1  [0x0000000116b60380, 0x0000000116b603e0]  96 bytes

  0x0000000116b60380: push   %rax
  0x0000000116b60381: jmpq   0x0000000116b603b0
  0x0000000116b60386: sub    $0x8,%rsp
  0x0000000116b6038a: vmovss %xmm0,(%rsp)
  0x0000000116b6038f: jmpq   0x0000000116b603b0
  0x0000000116b60394: sub    $0x10,%rsp
  0x0000000116b60398: vmovsd %xmm0,(%rsp)
  0x0000000116b6039d: jmpq   0x0000000116b603b0
  0x0000000116b603a2: sub    $0x10,%rsp
  0x0000000116b603a6: mov    %rax,(%rsp)
  0x0000000116b603aa: jmpq   0x0000000116b603b0
  0x0000000116b603af: push   %rax
  0x0000000116b603b0: mov    -0x8(%r14),%rax
  0x0000000116b603b4: movzbl 0x1(%r13),%ebx
  0x0000000116b603b9: inc    %r13
  0x0000000116b603bc: movabs $0x10ce3ae80,%r10
  0x0000000116b603c6: jmpq   *(%r10,%rbx,8)
  0x0000000116b603ca: nop
  0x0000000116b603cb: nop
  0x0000000116b603cc: nop
  0x0000000116b603cd: nop
  0x0000000116b603ce: nop
  0x0000000116b603cf: nop
  0x0000000116b603d0: int3   
  0x0000000116b603d1: int3   
  0x0000000116b603d2: int3   
  0x0000000116b603d3: int3   
  0x0000000116b603d4: int3   
  0x0000000116b603d5: int3   
  0x0000000116b603d6: int3   
  0x0000000116b603d7: int3   
  0x0000000116b603d8: int3   
  0x0000000116b603d9: int3   
  0x0000000116b603da: int3   
  0x0000000116b603db: int3   
  0x0000000116b603dc: int3   
  0x0000000116b603dd: int3   
  0x0000000116b603de: int3   
  0x0000000116b603df: int3   

----------------------------------------------------------------------
aload_2  44 aload_2  [0x0000000116b60420, 0x0000000116b60480]  96 bytes

  0x0000000116b60420: push   %rax
  0x0000000116b60421: jmpq   0x0000000116b60450
  0x0000000116b60426: sub    $0x8,%rsp
  0x0000000116b6042a: vmovss %xmm0,(%rsp)
  0x0000000116b6042f: jmpq   0x0000000116b60450
  0x0000000116b60434: sub    $0x10,%rsp
  0x0000000116b60438: vmovsd %xmm0,(%rsp)
  0x0000000116b6043d: jmpq   0x0000000116b60450
  0x0000000116b60442: sub    $0x10,%rsp
  0x0000000116b60446: mov    %rax,(%rsp)
  0x0000000116b6044a: jmpq   0x0000000116b60450
  0x0000000116b6044f: push   %rax
  0x0000000116b60450: mov    -0x10(%r14),%rax
  0x0000000116b60454: movzbl 0x1(%r13),%ebx
  0x0000000116b60459: inc    %r13
  0x0000000116b6045c: movabs $0x10ce3ae80,%r10
  0x0000000116b60466: jmpq   *(%r10,%rbx,8)
  0x0000000116b6046a: nop
  0x0000000116b6046b: nop
  0x0000000116b6046c: nop
  0x0000000116b6046d: nop
  0x0000000116b6046e: nop
  0x0000000116b6046f: nop
  0x0000000116b60470: int3   
  0x0000000116b60471: int3   
  0x0000000116b60472: int3   
  0x0000000116b60473: int3   
  0x0000000116b60474: int3   
  0x0000000116b60475: int3   
  0x0000000116b60476: int3   
  0x0000000116b60477: int3   
  0x0000000116b60478: int3   
  0x0000000116b60479: int3   
  0x0000000116b6047a: int3   
  0x0000000116b6047b: int3   
  0x0000000116b6047c: int3   
  0x0000000116b6047d: int3   
  0x0000000116b6047e: int3   
  0x0000000116b6047f: int3   

----------------------------------------------------------------------
aload_3  45 aload_3  [0x0000000116b604c0, 0x0000000116b60520]  96 bytes

  0x0000000116b604c0: push   %rax
  0x0000000116b604c1: jmpq   0x0000000116b604f0
  0x0000000116b604c6: sub    $0x8,%rsp
  0x0000000116b604ca: vmovss %xmm0,(%rsp)
  0x0000000116b604cf: jmpq   0x0000000116b604f0
  0x0000000116b604d4: sub    $0x10,%rsp
  0x0000000116b604d8: vmovsd %xmm0,(%rsp)
  0x0000000116b604dd: jmpq   0x0000000116b604f0
  0x0000000116b604e2: sub    $0x10,%rsp
  0x0000000116b604e6: mov    %rax,(%rsp)
  0x0000000116b604ea: jmpq   0x0000000116b604f0
  0x0000000116b604ef: push   %rax
  0x0000000116b604f0: mov    -0x18(%r14),%rax
  0x0000000116b604f4: movzbl 0x1(%r13),%ebx
  0x0000000116b604f9: inc    %r13
  0x0000000116b604fc: movabs $0x10ce3ae80,%r10
  0x0000000116b60506: jmpq   *(%r10,%rbx,8)
  0x0000000116b6050a: nop
  0x0000000116b6050b: nop
  0x0000000116b6050c: nop
  0x0000000116b6050d: nop
  0x0000000116b6050e: nop
  0x0000000116b6050f: nop
  0x0000000116b60510: int3   
  0x0000000116b60511: int3   
  0x0000000116b60512: int3   
  0x0000000116b60513: int3   
  0x0000000116b60514: int3   
  0x0000000116b60515: int3   
  0x0000000116b60516: int3   
  0x0000000116b60517: int3   
  0x0000000116b60518: int3   
  0x0000000116b60519: int3   
  0x0000000116b6051a: int3   
  0x0000000116b6051b: int3   
  0x0000000116b6051c: int3   
  0x0000000116b6051d: int3   
  0x0000000116b6051e: int3   
  0x0000000116b6051f: int3   

----------------------------------------------------------------------
iaload  46 iaload  [0x0000000116b60560, 0x0000000116b605a0]  64 bytes

  0x0000000116b60560: mov    (%rsp),%eax
  0x0000000116b60563: add    $0x8,%rsp
  0x0000000116b60567: pop    %rdx
  0x0000000116b60568: movslq %eax,%rax
  0x0000000116b6056b: cmp    0xc(%rdx),%eax
  0x0000000116b6056e: mov    %eax,%ebx
  0x0000000116b60570: jae    0x0000000116b52880
  0x0000000116b60576: mov    0x10(%rdx,%rax,4),%eax
  0x0000000116b6057a: movzbl 0x1(%r13),%ebx
  0x0000000116b6057f: inc    %r13
  0x0000000116b60582: movabs $0x10ce38e80,%r10
  0x0000000116b6058c: jmpq   *(%r10,%rbx,8)
  0x0000000116b60590: int3   
  0x0000000116b60591: int3   
  0x0000000116b60592: int3   
  0x0000000116b60593: int3   
  0x0000000116b60594: int3   
  0x0000000116b60595: int3   
  0x0000000116b60596: int3   
  0x0000000116b60597: int3   
  0x0000000116b60598: int3   
  0x0000000116b60599: int3   
  0x0000000116b6059a: int3   
  0x0000000116b6059b: int3   
  0x0000000116b6059c: int3   
  0x0000000116b6059d: int3   
  0x0000000116b6059e: int3   
  0x0000000116b6059f: int3   

----------------------------------------------------------------------
laload  47 laload  [0x0000000116b605e0, 0x0000000116b60620]  64 bytes

  0x0000000116b605e0: mov    (%rsp),%eax
  0x0000000116b605e3: add    $0x8,%rsp
  0x0000000116b605e7: pop    %rdx
  0x0000000116b605e8: movslq %eax,%rax
  0x0000000116b605eb: cmp    0xc(%rdx),%eax
  0x0000000116b605ee: mov    %eax,%ebx
  0x0000000116b605f0: jae    0x0000000116b52880
  0x0000000116b605f6: mov    0x10(%rdx,%rbx,8),%rax
  0x0000000116b605fb: movzbl 0x1(%r13),%ebx
  0x0000000116b60600: inc    %r13
  0x0000000116b60603: movabs $0x10ce39680,%r10
  0x0000000116b6060d: jmpq   *(%r10,%rbx,8)
  0x0000000116b60611: nop
  0x0000000116b60612: nop
  0x0000000116b60613: nop
  0x0000000116b60614: nop
  0x0000000116b60615: nop
  0x0000000116b60616: nop
  0x0000000116b60617: nop
  0x0000000116b60618: int3   
  0x0000000116b60619: int3   
  0x0000000116b6061a: int3   
  0x0000000116b6061b: int3   
  0x0000000116b6061c: int3   
  0x0000000116b6061d: int3   
  0x0000000116b6061e: int3   
  0x0000000116b6061f: int3   

----------------------------------------------------------------------
faload  48 faload  [0x0000000116b60660, 0x0000000116b606a0]  64 bytes

  0x0000000116b60660: mov    (%rsp),%eax
  0x0000000116b60663: add    $0x8,%rsp
  0x0000000116b60667: pop    %rdx
  0x0000000116b60668: movslq %eax,%rax
  0x0000000116b6066b: cmp    0xc(%rdx),%eax
  0x0000000116b6066e: mov    %eax,%ebx
  0x0000000116b60670: jae    0x0000000116b52880
  0x0000000116b60676: vmovss 0x10(%rdx,%rax,4),%xmm0
  0x0000000116b6067c: movzbl 0x1(%r13),%ebx
  0x0000000116b60681: inc    %r13
  0x0000000116b60684: movabs $0x10ce39e80,%r10
  0x0000000116b6068e: jmpq   *(%r10,%rbx,8)
  0x0000000116b60692: nop
  0x0000000116b60693: nop
  0x0000000116b60694: nop
  0x0000000116b60695: nop
  0x0000000116b60696: nop
  0x0000000116b60697: nop
  0x0000000116b60698: int3   
  0x0000000116b60699: int3   
  0x0000000116b6069a: int3   
  0x0000000116b6069b: int3   
  0x0000000116b6069c: int3   
  0x0000000116b6069d: int3   
  0x0000000116b6069e: int3   
  0x0000000116b6069f: int3   

----------------------------------------------------------------------
daload  49 daload  [0x0000000116b606e0, 0x0000000116b60720]  64 bytes

  0x0000000116b606e0: mov    (%rsp),%eax
  0x0000000116b606e3: add    $0x8,%rsp
  0x0000000116b606e7: pop    %rdx
  0x0000000116b606e8: movslq %eax,%rax
  0x0000000116b606eb: cmp    0xc(%rdx),%eax
  0x0000000116b606ee: mov    %eax,%ebx
  0x0000000116b606f0: jae    0x0000000116b52880
  0x0000000116b606f6: vmovsd 0x10(%rdx,%rax,8),%xmm0
  0x0000000116b606fc: movzbl 0x1(%r13),%ebx
  0x0000000116b60701: inc    %r13
  0x0000000116b60704: movabs $0x10ce3a680,%r10
  0x0000000116b6070e: jmpq   *(%r10,%rbx,8)
  0x0000000116b60712: nop
  0x0000000116b60713: nop
  0x0000000116b60714: nop
  0x0000000116b60715: nop
  0x0000000116b60716: nop
  0x0000000116b60717: nop
  0x0000000116b60718: int3   
  0x0000000116b60719: int3   
  0x0000000116b6071a: int3   
  0x0000000116b6071b: int3   
  0x0000000116b6071c: int3   
  0x0000000116b6071d: int3   
  0x0000000116b6071e: int3   
  0x0000000116b6071f: int3   

----------------------------------------------------------------------
aaload  50 aaload  [0x0000000116b60760, 0x0000000116b60820]  192 bytes

  0x0000000116b60760: mov    (%rsp),%eax
  0x0000000116b60763: add    $0x8,%rsp
  0x0000000116b60767: pop    %rdx
  0x0000000116b60768: movslq %eax,%rax
  0x0000000116b6076b: cmp    0xc(%rdx),%eax
  0x0000000116b6076e: mov    %eax,%ebx
  0x0000000116b60770: jae    0x0000000116b52880
  0x0000000116b60776: mov    0x10(%rdx,%rax,4),%eax
  0x0000000116b6077a: push   %r10
  0x0000000116b6077c: cmp    -0x9d19ed3(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b60783: je     0x0000000116b60800
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b60789: mov    %rsp,-0x28(%rsp)
  0x0000000116b6078e: sub    $0x80,%rsp
  0x0000000116b60795: mov    %rax,0x78(%rsp)
  0x0000000116b6079a: mov    %rcx,0x70(%rsp)
  0x0000000116b6079f: mov    %rdx,0x68(%rsp)
  0x0000000116b607a4: mov    %rbx,0x60(%rsp)
  0x0000000116b607a9: mov    %rbp,0x50(%rsp)
  0x0000000116b607ae: mov    %rsi,0x48(%rsp)
  0x0000000116b607b3: mov    %rdi,0x40(%rsp)
  0x0000000116b607b8: mov    %r8,0x38(%rsp)
  0x0000000116b607bd: mov    %r9,0x30(%rsp)
  0x0000000116b607c2: mov    %r10,0x28(%rsp)
  0x0000000116b607c7: mov    %r11,0x20(%rsp)
  0x0000000116b607cc: mov    %r12,0x18(%rsp)
  0x0000000116b607d1: mov    %r13,0x10(%rsp)
  0x0000000116b607d6: mov    %r14,0x8(%rsp)
  0x0000000116b607db: mov    %r15,(%rsp)
  0x0000000116b607df: movabs $0x10cc64abb,%rdi
  0x0000000116b607e9: movabs $0x116b60789,%rsi
  0x0000000116b607f3: mov    %rsp,%rdx
  0x0000000116b607f6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b607fa: callq  0x000000010c7dd830
  0x0000000116b607ff: hlt    
  0x0000000116b60800: pop    %r10
  0x0000000116b60802: shl    $0x3,%rax
  0x0000000116b60806: movzbl 0x1(%r13),%ebx
  0x0000000116b6080b: inc    %r13
  0x0000000116b6080e: movabs $0x10ce3ae80,%r10
  0x0000000116b60818: jmpq   *(%r10,%rbx,8)
  0x0000000116b6081c: nop
  0x0000000116b6081d: nop
  0x0000000116b6081e: nop
  0x0000000116b6081f: nop

----------------------------------------------------------------------
baload  51 baload  [0x0000000116b60860, 0x0000000116b608a0]  64 bytes

  0x0000000116b60860: mov    (%rsp),%eax
  0x0000000116b60863: add    $0x8,%rsp
  0x0000000116b60867: pop    %rdx
  0x0000000116b60868: movslq %eax,%rax
  0x0000000116b6086b: cmp    0xc(%rdx),%eax
  0x0000000116b6086e: mov    %eax,%ebx
  0x0000000116b60870: jae    0x0000000116b52880
  0x0000000116b60876: movsbl 0x10(%rdx,%rax,1),%eax
  0x0000000116b6087b: movzbl 0x1(%r13),%ebx
  0x0000000116b60880: inc    %r13
  0x0000000116b60883: movabs $0x10ce38e80,%r10
  0x0000000116b6088d: jmpq   *(%r10,%rbx,8)
  0x0000000116b60891: nop
  0x0000000116b60892: nop
  0x0000000116b60893: nop
  0x0000000116b60894: nop
  0x0000000116b60895: nop
  0x0000000116b60896: nop
  0x0000000116b60897: nop
  0x0000000116b60898: int3   
  0x0000000116b60899: int3   
  0x0000000116b6089a: int3   
  0x0000000116b6089b: int3   
  0x0000000116b6089c: int3   
  0x0000000116b6089d: int3   
  0x0000000116b6089e: int3   
  0x0000000116b6089f: int3   

----------------------------------------------------------------------
caload  52 caload  [0x0000000116b608e0, 0x0000000116b60920]  64 bytes

  0x0000000116b608e0: mov    (%rsp),%eax
  0x0000000116b608e3: add    $0x8,%rsp
  0x0000000116b608e7: pop    %rdx
  0x0000000116b608e8: movslq %eax,%rax
  0x0000000116b608eb: cmp    0xc(%rdx),%eax
  0x0000000116b608ee: mov    %eax,%ebx
  0x0000000116b608f0: jae    0x0000000116b52880
  0x0000000116b608f6: movzwl 0x10(%rdx,%rax,2),%eax
  0x0000000116b608fb: movzbl 0x1(%r13),%ebx
  0x0000000116b60900: inc    %r13
  0x0000000116b60903: movabs $0x10ce38e80,%r10
  0x0000000116b6090d: jmpq   *(%r10,%rbx,8)
  0x0000000116b60911: nop
  0x0000000116b60912: nop
  0x0000000116b60913: nop
  0x0000000116b60914: nop
  0x0000000116b60915: nop
  0x0000000116b60916: nop
  0x0000000116b60917: nop
  0x0000000116b60918: int3   
  0x0000000116b60919: int3   
  0x0000000116b6091a: int3   
  0x0000000116b6091b: int3   
  0x0000000116b6091c: int3   
  0x0000000116b6091d: int3   
  0x0000000116b6091e: int3   
  0x0000000116b6091f: int3   

----------------------------------------------------------------------
saload  53 saload  [0x0000000116b60960, 0x0000000116b609a0]  64 bytes

  0x0000000116b60960: mov    (%rsp),%eax
  0x0000000116b60963: add    $0x8,%rsp
  0x0000000116b60967: pop    %rdx
  0x0000000116b60968: movslq %eax,%rax
  0x0000000116b6096b: cmp    0xc(%rdx),%eax
  0x0000000116b6096e: mov    %eax,%ebx
  0x0000000116b60970: jae    0x0000000116b52880
  0x0000000116b60976: movswl 0x10(%rdx,%rax,2),%eax
  0x0000000116b6097b: movzbl 0x1(%r13),%ebx
  0x0000000116b60980: inc    %r13
  0x0000000116b60983: movabs $0x10ce38e80,%r10
  0x0000000116b6098d: jmpq   *(%r10,%rbx,8)
  0x0000000116b60991: nop
  0x0000000116b60992: nop
  0x0000000116b60993: nop
  0x0000000116b60994: nop
  0x0000000116b60995: nop
  0x0000000116b60996: nop
  0x0000000116b60997: nop
  0x0000000116b60998: int3   
  0x0000000116b60999: int3   
  0x0000000116b6099a: int3   
  0x0000000116b6099b: int3   
  0x0000000116b6099c: int3   
  0x0000000116b6099d: int3   
  0x0000000116b6099e: int3   
  0x0000000116b6099f: int3   

----------------------------------------------------------------------
istore  54 istore  [0x0000000116b609e0, 0x0000000116b60a40]  96 bytes

  0x0000000116b609e0: mov    (%rsp),%eax
  0x0000000116b609e3: add    $0x8,%rsp
  0x0000000116b609e7: movzbl 0x1(%r13),%ebx
  0x0000000116b609ec: neg    %rbx
  0x0000000116b609ef: mov    %eax,(%r14,%rbx,8)
  0x0000000116b609f3: movzbl 0x2(%r13),%ebx
  0x0000000116b609f8: add    $0x2,%r13
  0x0000000116b609fc: movabs $0x10ce3b680,%r10
  0x0000000116b60a06: jmpq   *(%r10,%rbx,8)
  0x0000000116b60a0a: mov    (%rsp),%eax
  0x0000000116b60a0d: add    $0x8,%rsp
  0x0000000116b60a11: movzwl 0x2(%r13),%ebx
  0x0000000116b60a16: bswap  %ebx
  0x0000000116b60a18: shr    $0x10,%ebx
  0x0000000116b60a1b: neg    %rbx
  0x0000000116b60a1e: mov    %eax,(%r14,%rbx,8)
  0x0000000116b60a22: movzbl 0x4(%r13),%ebx
  0x0000000116b60a27: add    $0x4,%r13
  0x0000000116b60a2b: movabs $0x10ce3b680,%r10
  0x0000000116b60a35: jmpq   *(%r10,%rbx,8)
  0x0000000116b60a39: nop
  0x0000000116b60a3a: nop
  0x0000000116b60a3b: nop
  0x0000000116b60a3c: nop
  0x0000000116b60a3d: nop
  0x0000000116b60a3e: nop
  0x0000000116b60a3f: nop

----------------------------------------------------------------------
lstore  55 lstore  [0x0000000116b60a80, 0x0000000116b60ae0]  96 bytes

  0x0000000116b60a80: mov    (%rsp),%rax
  0x0000000116b60a84: add    $0x10,%rsp
  0x0000000116b60a88: movzbl 0x1(%r13),%ebx
  0x0000000116b60a8d: neg    %rbx
  0x0000000116b60a90: mov    %rax,-0x8(%r14,%rbx,8)
  0x0000000116b60a95: movzbl 0x2(%r13),%ebx
  0x0000000116b60a9a: add    $0x2,%r13
  0x0000000116b60a9e: movabs $0x10ce3b680,%r10
  0x0000000116b60aa8: jmpq   *(%r10,%rbx,8)
  0x0000000116b60aac: mov    (%rsp),%rax
  0x0000000116b60ab0: add    $0x10,%rsp
  0x0000000116b60ab4: movzwl 0x2(%r13),%ebx
  0x0000000116b60ab9: bswap  %ebx
  0x0000000116b60abb: shr    $0x10,%ebx
  0x0000000116b60abe: neg    %rbx
  0x0000000116b60ac1: mov    %rax,-0x8(%r14,%rbx,8)
  0x0000000116b60ac6: movzbl 0x4(%r13),%ebx
  0x0000000116b60acb: add    $0x4,%r13
  0x0000000116b60acf: movabs $0x10ce3b680,%r10
  0x0000000116b60ad9: jmpq   *(%r10,%rbx,8)
  0x0000000116b60add: nop
  0x0000000116b60ade: nop
  0x0000000116b60adf: nop

----------------------------------------------------------------------
fstore  56 fstore  [0x0000000116b60b20, 0x0000000116b60ba0]  128 bytes

  0x0000000116b60b20: vmovss (%rsp),%xmm0
  0x0000000116b60b25: add    $0x8,%rsp
  0x0000000116b60b29: movzbl 0x1(%r13),%ebx
  0x0000000116b60b2e: neg    %rbx
  0x0000000116b60b31: vmovss %xmm0,(%r14,%rbx,8)
  0x0000000116b60b37: movzbl 0x2(%r13),%ebx
  0x0000000116b60b3c: add    $0x2,%r13
  0x0000000116b60b40: movabs $0x10ce3b680,%r10
  0x0000000116b60b4a: jmpq   *(%r10,%rbx,8)
  0x0000000116b60b4e: vmovss (%rsp),%xmm0
  0x0000000116b60b53: add    $0x8,%rsp
  0x0000000116b60b57: movzwl 0x2(%r13),%ebx
  0x0000000116b60b5c: bswap  %ebx
  0x0000000116b60b5e: shr    $0x10,%ebx
  0x0000000116b60b61: neg    %rbx
  0x0000000116b60b64: vmovss %xmm0,(%r14,%rbx,8)
  0x0000000116b60b6a: movzbl 0x4(%r13),%ebx
  0x0000000116b60b6f: add    $0x4,%r13
  0x0000000116b60b73: movabs $0x10ce3b680,%r10
  0x0000000116b60b7d: jmpq   *(%r10,%rbx,8)
  0x0000000116b60b81: nop
  0x0000000116b60b82: nop
  0x0000000116b60b83: nop
  0x0000000116b60b84: nop
  0x0000000116b60b85: nop
  0x0000000116b60b86: nop
  0x0000000116b60b87: nop
  0x0000000116b60b88: int3   
  0x0000000116b60b89: int3   
  0x0000000116b60b8a: int3   
  0x0000000116b60b8b: int3   
  0x0000000116b60b8c: int3   
  0x0000000116b60b8d: int3   
  0x0000000116b60b8e: int3   
  0x0000000116b60b8f: int3   
  0x0000000116b60b90: int3   
  0x0000000116b60b91: int3   
  0x0000000116b60b92: int3   
  0x0000000116b60b93: int3   
  0x0000000116b60b94: int3   
  0x0000000116b60b95: int3   
  0x0000000116b60b96: int3   
  0x0000000116b60b97: int3   
  0x0000000116b60b98: int3   
  0x0000000116b60b99: int3   
  0x0000000116b60b9a: int3   
  0x0000000116b60b9b: int3   
  0x0000000116b60b9c: int3   
  0x0000000116b60b9d: int3   
  0x0000000116b60b9e: int3   
  0x0000000116b60b9f: int3   

----------------------------------------------------------------------
dstore  57 dstore  [0x0000000116b60be0, 0x0000000116b60c60]  128 bytes

  0x0000000116b60be0: vmovsd (%rsp),%xmm0
  0x0000000116b60be5: add    $0x10,%rsp
  0x0000000116b60be9: movzbl 0x1(%r13),%ebx
  0x0000000116b60bee: neg    %rbx
  0x0000000116b60bf1: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x0000000116b60bf8: movzbl 0x2(%r13),%ebx
  0x0000000116b60bfd: add    $0x2,%r13
  0x0000000116b60c01: movabs $0x10ce3b680,%r10
  0x0000000116b60c0b: jmpq   *(%r10,%rbx,8)
  0x0000000116b60c0f: vmovsd (%rsp),%xmm0
  0x0000000116b60c14: add    $0x10,%rsp
  0x0000000116b60c18: movzwl 0x2(%r13),%ebx
  0x0000000116b60c1d: bswap  %ebx
  0x0000000116b60c1f: shr    $0x10,%ebx
  0x0000000116b60c22: neg    %rbx
  0x0000000116b60c25: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x0000000116b60c2c: movzbl 0x4(%r13),%ebx
  0x0000000116b60c31: add    $0x4,%r13
  0x0000000116b60c35: movabs $0x10ce3b680,%r10
  0x0000000116b60c3f: jmpq   *(%r10,%rbx,8)
  0x0000000116b60c43: nop
  0x0000000116b60c44: nop
  0x0000000116b60c45: nop
  0x0000000116b60c46: nop
  0x0000000116b60c47: nop
  0x0000000116b60c48: int3   
  0x0000000116b60c49: int3   
  0x0000000116b60c4a: int3   
  0x0000000116b60c4b: int3   
  0x0000000116b60c4c: int3   
  0x0000000116b60c4d: int3   
  0x0000000116b60c4e: int3   
  0x0000000116b60c4f: int3   
  0x0000000116b60c50: int3   
  0x0000000116b60c51: int3   
  0x0000000116b60c52: int3   
  0x0000000116b60c53: int3   
  0x0000000116b60c54: int3   
  0x0000000116b60c55: int3   
  0x0000000116b60c56: int3   
  0x0000000116b60c57: int3   
  0x0000000116b60c58: int3   
  0x0000000116b60c59: int3   
  0x0000000116b60c5a: int3   
  0x0000000116b60c5b: int3   
  0x0000000116b60c5c: int3   
  0x0000000116b60c5d: int3   
  0x0000000116b60c5e: int3   
  0x0000000116b60c5f: int3   

----------------------------------------------------------------------
astore  58 astore  [0x0000000116b60ca0, 0x0000000116b60d20]  128 bytes

  0x0000000116b60ca0: push   %rax
  0x0000000116b60ca1: jmpq   0x0000000116b60cd0
  0x0000000116b60ca6: sub    $0x8,%rsp
  0x0000000116b60caa: vmovss %xmm0,(%rsp)
  0x0000000116b60caf: jmpq   0x0000000116b60cd0
  0x0000000116b60cb4: sub    $0x10,%rsp
  0x0000000116b60cb8: vmovsd %xmm0,(%rsp)
  0x0000000116b60cbd: jmpq   0x0000000116b60cd0
  0x0000000116b60cc2: sub    $0x10,%rsp
  0x0000000116b60cc6: mov    %rax,(%rsp)
  0x0000000116b60cca: jmpq   0x0000000116b60cd0
  0x0000000116b60ccf: push   %rax
  0x0000000116b60cd0: pop    %rax
  0x0000000116b60cd1: movzbl 0x1(%r13),%ebx
  0x0000000116b60cd6: neg    %rbx
  0x0000000116b60cd9: mov    %rax,(%r14,%rbx,8)
  0x0000000116b60cdd: movzbl 0x2(%r13),%ebx
  0x0000000116b60ce2: add    $0x2,%r13
  0x0000000116b60ce6: movabs $0x10ce3b680,%r10
  0x0000000116b60cf0: jmpq   *(%r10,%rbx,8)
  0x0000000116b60cf4: pop    %rax
  0x0000000116b60cf5: movzwl 0x2(%r13),%ebx
  0x0000000116b60cfa: bswap  %ebx
  0x0000000116b60cfc: shr    $0x10,%ebx
  0x0000000116b60cff: neg    %rbx
  0x0000000116b60d02: mov    %rax,(%r14,%rbx,8)
  0x0000000116b60d06: movzbl 0x4(%r13),%ebx
  0x0000000116b60d0b: add    $0x4,%r13
  0x0000000116b60d0f: movabs $0x10ce3b680,%r10
  0x0000000116b60d19: jmpq   *(%r10,%rbx,8)
  0x0000000116b60d1d: nop
  0x0000000116b60d1e: nop
  0x0000000116b60d1f: nop

----------------------------------------------------------------------
istore_0  59 istore_0  [0x0000000116b60d60, 0x0000000116b60d80]  32 bytes

  0x0000000116b60d60: mov    (%rsp),%eax
  0x0000000116b60d63: add    $0x8,%rsp
  0x0000000116b60d67: mov    %eax,(%r14)
  0x0000000116b60d6a: movzbl 0x1(%r13),%ebx
  0x0000000116b60d6f: inc    %r13
  0x0000000116b60d72: movabs $0x10ce3b680,%r10
  0x0000000116b60d7c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
istore_1  60 istore_1  [0x0000000116b60dc0, 0x0000000116b60e00]  64 bytes

  0x0000000116b60dc0: mov    (%rsp),%eax
  0x0000000116b60dc3: add    $0x8,%rsp
  0x0000000116b60dc7: mov    %eax,-0x8(%r14)
  0x0000000116b60dcb: movzbl 0x1(%r13),%ebx
  0x0000000116b60dd0: inc    %r13
  0x0000000116b60dd3: movabs $0x10ce3b680,%r10
  0x0000000116b60ddd: jmpq   *(%r10,%rbx,8)
  0x0000000116b60de1: nop
  0x0000000116b60de2: nop
  0x0000000116b60de3: nop
  0x0000000116b60de4: nop
  0x0000000116b60de5: nop
  0x0000000116b60de6: nop
  0x0000000116b60de7: nop
  0x0000000116b60de8: int3   
  0x0000000116b60de9: int3   
  0x0000000116b60dea: int3   
  0x0000000116b60deb: int3   
  0x0000000116b60dec: int3   
  0x0000000116b60ded: int3   
  0x0000000116b60dee: int3   
  0x0000000116b60def: int3   
  0x0000000116b60df0: int3   
  0x0000000116b60df1: int3   
  0x0000000116b60df2: int3   
  0x0000000116b60df3: int3   
  0x0000000116b60df4: int3   
  0x0000000116b60df5: int3   
  0x0000000116b60df6: int3   
  0x0000000116b60df7: int3   
  0x0000000116b60df8: int3   
  0x0000000116b60df9: int3   
  0x0000000116b60dfa: int3   
  0x0000000116b60dfb: int3   
  0x0000000116b60dfc: int3   
  0x0000000116b60dfd: int3   
  0x0000000116b60dfe: int3   
  0x0000000116b60dff: int3   

----------------------------------------------------------------------
istore_2  61 istore_2  [0x0000000116b60e40, 0x0000000116b60e80]  64 bytes

  0x0000000116b60e40: mov    (%rsp),%eax
  0x0000000116b60e43: add    $0x8,%rsp
  0x0000000116b60e47: mov    %eax,-0x10(%r14)
  0x0000000116b60e4b: movzbl 0x1(%r13),%ebx
  0x0000000116b60e50: inc    %r13
  0x0000000116b60e53: movabs $0x10ce3b680,%r10
  0x0000000116b60e5d: jmpq   *(%r10,%rbx,8)
  0x0000000116b60e61: nop
  0x0000000116b60e62: nop
  0x0000000116b60e63: nop
  0x0000000116b60e64: nop
  0x0000000116b60e65: nop
  0x0000000116b60e66: nop
  0x0000000116b60e67: nop
  0x0000000116b60e68: int3   
  0x0000000116b60e69: int3   
  0x0000000116b60e6a: int3   
  0x0000000116b60e6b: int3   
  0x0000000116b60e6c: int3   
  0x0000000116b60e6d: int3   
  0x0000000116b60e6e: int3   
  0x0000000116b60e6f: int3   
  0x0000000116b60e70: int3   
  0x0000000116b60e71: int3   
  0x0000000116b60e72: int3   
  0x0000000116b60e73: int3   
  0x0000000116b60e74: int3   
  0x0000000116b60e75: int3   
  0x0000000116b60e76: int3   
  0x0000000116b60e77: int3   
  0x0000000116b60e78: int3   
  0x0000000116b60e79: int3   
  0x0000000116b60e7a: int3   
  0x0000000116b60e7b: int3   
  0x0000000116b60e7c: int3   
  0x0000000116b60e7d: int3   
  0x0000000116b60e7e: int3   
  0x0000000116b60e7f: int3   

----------------------------------------------------------------------
istore_3  62 istore_3  [0x0000000116b60ec0, 0x0000000116b60f00]  64 bytes

  0x0000000116b60ec0: mov    (%rsp),%eax
  0x0000000116b60ec3: add    $0x8,%rsp
  0x0000000116b60ec7: mov    %eax,-0x18(%r14)
  0x0000000116b60ecb: movzbl 0x1(%r13),%ebx
  0x0000000116b60ed0: inc    %r13
  0x0000000116b60ed3: movabs $0x10ce3b680,%r10
  0x0000000116b60edd: jmpq   *(%r10,%rbx,8)
  0x0000000116b60ee1: nop
  0x0000000116b60ee2: nop
  0x0000000116b60ee3: nop
  0x0000000116b60ee4: nop
  0x0000000116b60ee5: nop
  0x0000000116b60ee6: nop
  0x0000000116b60ee7: nop
  0x0000000116b60ee8: int3   
  0x0000000116b60ee9: int3   
  0x0000000116b60eea: int3   
  0x0000000116b60eeb: int3   
  0x0000000116b60eec: int3   
  0x0000000116b60eed: int3   
  0x0000000116b60eee: int3   
  0x0000000116b60eef: int3   
  0x0000000116b60ef0: int3   
  0x0000000116b60ef1: int3   
  0x0000000116b60ef2: int3   
  0x0000000116b60ef3: int3   
  0x0000000116b60ef4: int3   
  0x0000000116b60ef5: int3   
  0x0000000116b60ef6: int3   
  0x0000000116b60ef7: int3   
  0x0000000116b60ef8: int3   
  0x0000000116b60ef9: int3   
  0x0000000116b60efa: int3   
  0x0000000116b60efb: int3   
  0x0000000116b60efc: int3   
  0x0000000116b60efd: int3   
  0x0000000116b60efe: int3   
  0x0000000116b60eff: int3   

----------------------------------------------------------------------
lstore_0  63 lstore_0  [0x0000000116b60f40, 0x0000000116b60f80]  64 bytes

  0x0000000116b60f40: mov    (%rsp),%rax
  0x0000000116b60f44: add    $0x10,%rsp
  0x0000000116b60f48: mov    %rax,-0x8(%r14)
  0x0000000116b60f4c: movzbl 0x1(%r13),%ebx
  0x0000000116b60f51: inc    %r13
  0x0000000116b60f54: movabs $0x10ce3b680,%r10
  0x0000000116b60f5e: jmpq   *(%r10,%rbx,8)
  0x0000000116b60f62: nop
  0x0000000116b60f63: nop
  0x0000000116b60f64: nop
  0x0000000116b60f65: nop
  0x0000000116b60f66: nop
  0x0000000116b60f67: nop
  0x0000000116b60f68: int3   
  0x0000000116b60f69: int3   
  0x0000000116b60f6a: int3   
  0x0000000116b60f6b: int3   
  0x0000000116b60f6c: int3   
  0x0000000116b60f6d: int3   
  0x0000000116b60f6e: int3   
  0x0000000116b60f6f: int3   
  0x0000000116b60f70: int3   
  0x0000000116b60f71: int3   
  0x0000000116b60f72: int3   
  0x0000000116b60f73: int3   
  0x0000000116b60f74: int3   
  0x0000000116b60f75: int3   
  0x0000000116b60f76: int3   
  0x0000000116b60f77: int3   
  0x0000000116b60f78: int3   
  0x0000000116b60f79: int3   
  0x0000000116b60f7a: int3   
  0x0000000116b60f7b: int3   
  0x0000000116b60f7c: int3   
  0x0000000116b60f7d: int3   
  0x0000000116b60f7e: int3   
  0x0000000116b60f7f: int3   

----------------------------------------------------------------------
lstore_1  64 lstore_1  [0x0000000116b60fc0, 0x0000000116b61000]  64 bytes

  0x0000000116b60fc0: mov    (%rsp),%rax
  0x0000000116b60fc4: add    $0x10,%rsp
  0x0000000116b60fc8: mov    %rax,-0x10(%r14)
  0x0000000116b60fcc: movzbl 0x1(%r13),%ebx
  0x0000000116b60fd1: inc    %r13
  0x0000000116b60fd4: movabs $0x10ce3b680,%r10
  0x0000000116b60fde: jmpq   *(%r10,%rbx,8)
  0x0000000116b60fe2: nop
  0x0000000116b60fe3: nop
  0x0000000116b60fe4: nop
  0x0000000116b60fe5: nop
  0x0000000116b60fe6: nop
  0x0000000116b60fe7: nop
  0x0000000116b60fe8: int3   
  0x0000000116b60fe9: int3   
  0x0000000116b60fea: int3   
  0x0000000116b60feb: int3   
  0x0000000116b60fec: int3   
  0x0000000116b60fed: int3   
  0x0000000116b60fee: int3   
  0x0000000116b60fef: int3   
  0x0000000116b60ff0: int3   
  0x0000000116b60ff1: int3   
  0x0000000116b60ff2: int3   
  0x0000000116b60ff3: int3   
  0x0000000116b60ff4: int3   
  0x0000000116b60ff5: int3   
  0x0000000116b60ff6: int3   
  0x0000000116b60ff7: int3   
  0x0000000116b60ff8: int3   
  0x0000000116b60ff9: int3   
  0x0000000116b60ffa: int3   
  0x0000000116b60ffb: int3   
  0x0000000116b60ffc: int3   
  0x0000000116b60ffd: int3   
  0x0000000116b60ffe: int3   
  0x0000000116b60fff: int3   

----------------------------------------------------------------------
lstore_2  65 lstore_2  [0x0000000116b61040, 0x0000000116b61080]  64 bytes

  0x0000000116b61040: mov    (%rsp),%rax
  0x0000000116b61044: add    $0x10,%rsp
  0x0000000116b61048: mov    %rax,-0x18(%r14)
  0x0000000116b6104c: movzbl 0x1(%r13),%ebx
  0x0000000116b61051: inc    %r13
  0x0000000116b61054: movabs $0x10ce3b680,%r10
  0x0000000116b6105e: jmpq   *(%r10,%rbx,8)
  0x0000000116b61062: nop
  0x0000000116b61063: nop
  0x0000000116b61064: nop
  0x0000000116b61065: nop
  0x0000000116b61066: nop
  0x0000000116b61067: nop
  0x0000000116b61068: int3   
  0x0000000116b61069: int3   
  0x0000000116b6106a: int3   
  0x0000000116b6106b: int3   
  0x0000000116b6106c: int3   
  0x0000000116b6106d: int3   
  0x0000000116b6106e: int3   
  0x0000000116b6106f: int3   
  0x0000000116b61070: int3   
  0x0000000116b61071: int3   
  0x0000000116b61072: int3   
  0x0000000116b61073: int3   
  0x0000000116b61074: int3   
  0x0000000116b61075: int3   
  0x0000000116b61076: int3   
  0x0000000116b61077: int3   
  0x0000000116b61078: int3   
  0x0000000116b61079: int3   
  0x0000000116b6107a: int3   
  0x0000000116b6107b: int3   
  0x0000000116b6107c: int3   
  0x0000000116b6107d: int3   
  0x0000000116b6107e: int3   
  0x0000000116b6107f: int3   

----------------------------------------------------------------------
lstore_3  66 lstore_3  [0x0000000116b610c0, 0x0000000116b61100]  64 bytes

  0x0000000116b610c0: mov    (%rsp),%rax
  0x0000000116b610c4: add    $0x10,%rsp
  0x0000000116b610c8: mov    %rax,-0x20(%r14)
  0x0000000116b610cc: movzbl 0x1(%r13),%ebx
  0x0000000116b610d1: inc    %r13
  0x0000000116b610d4: movabs $0x10ce3b680,%r10
  0x0000000116b610de: jmpq   *(%r10,%rbx,8)
  0x0000000116b610e2: nop
  0x0000000116b610e3: nop
  0x0000000116b610e4: nop
  0x0000000116b610e5: nop
  0x0000000116b610e6: nop
  0x0000000116b610e7: nop
  0x0000000116b610e8: int3   
  0x0000000116b610e9: int3   
  0x0000000116b610ea: int3   
  0x0000000116b610eb: int3   
  0x0000000116b610ec: int3   
  0x0000000116b610ed: int3   
  0x0000000116b610ee: int3   
  0x0000000116b610ef: int3   
  0x0000000116b610f0: int3   
  0x0000000116b610f1: int3   
  0x0000000116b610f2: int3   
  0x0000000116b610f3: int3   
  0x0000000116b610f4: int3   
  0x0000000116b610f5: int3   
  0x0000000116b610f6: int3   
  0x0000000116b610f7: int3   
  0x0000000116b610f8: int3   
  0x0000000116b610f9: int3   
  0x0000000116b610fa: int3   
  0x0000000116b610fb: int3   
  0x0000000116b610fc: int3   
  0x0000000116b610fd: int3   
  0x0000000116b610fe: int3   
  0x0000000116b610ff: int3   

----------------------------------------------------------------------
fstore_0  67 fstore_0  [0x0000000116b61140, 0x0000000116b61180]  64 bytes

  0x0000000116b61140: vmovss (%rsp),%xmm0
  0x0000000116b61145: add    $0x8,%rsp
  0x0000000116b61149: vmovss %xmm0,(%r14)
  0x0000000116b6114e: movzbl 0x1(%r13),%ebx
  0x0000000116b61153: inc    %r13
  0x0000000116b61156: movabs $0x10ce3b680,%r10
  0x0000000116b61160: jmpq   *(%r10,%rbx,8)
  0x0000000116b61164: nop
  0x0000000116b61165: nop
  0x0000000116b61166: nop
  0x0000000116b61167: nop
  0x0000000116b61168: int3   
  0x0000000116b61169: int3   
  0x0000000116b6116a: int3   
  0x0000000116b6116b: int3   
  0x0000000116b6116c: int3   
  0x0000000116b6116d: int3   
  0x0000000116b6116e: int3   
  0x0000000116b6116f: int3   
  0x0000000116b61170: int3   
  0x0000000116b61171: int3   
  0x0000000116b61172: int3   
  0x0000000116b61173: int3   
  0x0000000116b61174: int3   
  0x0000000116b61175: int3   
  0x0000000116b61176: int3   
  0x0000000116b61177: int3   
  0x0000000116b61178: int3   
  0x0000000116b61179: int3   
  0x0000000116b6117a: int3   
  0x0000000116b6117b: int3   
  0x0000000116b6117c: int3   
  0x0000000116b6117d: int3   
  0x0000000116b6117e: int3   
  0x0000000116b6117f: int3   

----------------------------------------------------------------------
fstore_1  68 fstore_1  [0x0000000116b611c0, 0x0000000116b61200]  64 bytes

  0x0000000116b611c0: vmovss (%rsp),%xmm0
  0x0000000116b611c5: add    $0x8,%rsp
  0x0000000116b611c9: vmovss %xmm0,-0x8(%r14)
  0x0000000116b611cf: movzbl 0x1(%r13),%ebx
  0x0000000116b611d4: inc    %r13
  0x0000000116b611d7: movabs $0x10ce3b680,%r10
  0x0000000116b611e1: jmpq   *(%r10,%rbx,8)
  0x0000000116b611e5: nop
  0x0000000116b611e6: nop
  0x0000000116b611e7: nop
  0x0000000116b611e8: int3   
  0x0000000116b611e9: int3   
  0x0000000116b611ea: int3   
  0x0000000116b611eb: int3   
  0x0000000116b611ec: int3   
  0x0000000116b611ed: int3   
  0x0000000116b611ee: int3   
  0x0000000116b611ef: int3   
  0x0000000116b611f0: int3   
  0x0000000116b611f1: int3   
  0x0000000116b611f2: int3   
  0x0000000116b611f3: int3   
  0x0000000116b611f4: int3   
  0x0000000116b611f5: int3   
  0x0000000116b611f6: int3   
  0x0000000116b611f7: int3   
  0x0000000116b611f8: int3   
  0x0000000116b611f9: int3   
  0x0000000116b611fa: int3   
  0x0000000116b611fb: int3   
  0x0000000116b611fc: int3   
  0x0000000116b611fd: int3   
  0x0000000116b611fe: int3   
  0x0000000116b611ff: int3   

----------------------------------------------------------------------
fstore_2  69 fstore_2  [0x0000000116b61240, 0x0000000116b61280]  64 bytes

  0x0000000116b61240: vmovss (%rsp),%xmm0
  0x0000000116b61245: add    $0x8,%rsp
  0x0000000116b61249: vmovss %xmm0,-0x10(%r14)
  0x0000000116b6124f: movzbl 0x1(%r13),%ebx
  0x0000000116b61254: inc    %r13
  0x0000000116b61257: movabs $0x10ce3b680,%r10
  0x0000000116b61261: jmpq   *(%r10,%rbx,8)
  0x0000000116b61265: nop
  0x0000000116b61266: nop
  0x0000000116b61267: nop
  0x0000000116b61268: int3   
  0x0000000116b61269: int3   
  0x0000000116b6126a: int3   
  0x0000000116b6126b: int3   
  0x0000000116b6126c: int3   
  0x0000000116b6126d: int3   
  0x0000000116b6126e: int3   
  0x0000000116b6126f: int3   
  0x0000000116b61270: int3   
  0x0000000116b61271: int3   
  0x0000000116b61272: int3   
  0x0000000116b61273: int3   
  0x0000000116b61274: int3   
  0x0000000116b61275: int3   
  0x0000000116b61276: int3   
  0x0000000116b61277: int3   
  0x0000000116b61278: int3   
  0x0000000116b61279: int3   
  0x0000000116b6127a: int3   
  0x0000000116b6127b: int3   
  0x0000000116b6127c: int3   
  0x0000000116b6127d: int3   
  0x0000000116b6127e: int3   
  0x0000000116b6127f: int3   

----------------------------------------------------------------------
fstore_3  70 fstore_3  [0x0000000116b612c0, 0x0000000116b61300]  64 bytes

  0x0000000116b612c0: vmovss (%rsp),%xmm0
  0x0000000116b612c5: add    $0x8,%rsp
  0x0000000116b612c9: vmovss %xmm0,-0x18(%r14)
  0x0000000116b612cf: movzbl 0x1(%r13),%ebx
  0x0000000116b612d4: inc    %r13
  0x0000000116b612d7: movabs $0x10ce3b680,%r10
  0x0000000116b612e1: jmpq   *(%r10,%rbx,8)
  0x0000000116b612e5: nop
  0x0000000116b612e6: nop
  0x0000000116b612e7: nop
  0x0000000116b612e8: int3   
  0x0000000116b612e9: int3   
  0x0000000116b612ea: int3   
  0x0000000116b612eb: int3   
  0x0000000116b612ec: int3   
  0x0000000116b612ed: int3   
  0x0000000116b612ee: int3   
  0x0000000116b612ef: int3   
  0x0000000116b612f0: int3   
  0x0000000116b612f1: int3   
  0x0000000116b612f2: int3   
  0x0000000116b612f3: int3   
  0x0000000116b612f4: int3   
  0x0000000116b612f5: int3   
  0x0000000116b612f6: int3   
  0x0000000116b612f7: int3   
  0x0000000116b612f8: int3   
  0x0000000116b612f9: int3   
  0x0000000116b612fa: int3   
  0x0000000116b612fb: int3   
  0x0000000116b612fc: int3   
  0x0000000116b612fd: int3   
  0x0000000116b612fe: int3   
  0x0000000116b612ff: int3   

----------------------------------------------------------------------
dstore_0  71 dstore_0  [0x0000000116b61340, 0x0000000116b61380]  64 bytes

  0x0000000116b61340: vmovsd (%rsp),%xmm0
  0x0000000116b61345: add    $0x10,%rsp
  0x0000000116b61349: vmovsd %xmm0,-0x8(%r14)
  0x0000000116b6134f: movzbl 0x1(%r13),%ebx
  0x0000000116b61354: inc    %r13
  0x0000000116b61357: movabs $0x10ce3b680,%r10
  0x0000000116b61361: jmpq   *(%r10,%rbx,8)
  0x0000000116b61365: nop
  0x0000000116b61366: nop
  0x0000000116b61367: nop
  0x0000000116b61368: int3   
  0x0000000116b61369: int3   
  0x0000000116b6136a: int3   
  0x0000000116b6136b: int3   
  0x0000000116b6136c: int3   
  0x0000000116b6136d: int3   
  0x0000000116b6136e: int3   
  0x0000000116b6136f: int3   
  0x0000000116b61370: int3   
  0x0000000116b61371: int3   
  0x0000000116b61372: int3   
  0x0000000116b61373: int3   
  0x0000000116b61374: int3   
  0x0000000116b61375: int3   
  0x0000000116b61376: int3   
  0x0000000116b61377: int3   
  0x0000000116b61378: int3   
  0x0000000116b61379: int3   
  0x0000000116b6137a: int3   
  0x0000000116b6137b: int3   
  0x0000000116b6137c: int3   
  0x0000000116b6137d: int3   
  0x0000000116b6137e: int3   
  0x0000000116b6137f: int3   

----------------------------------------------------------------------
dstore_1  72 dstore_1  [0x0000000116b613c0, 0x0000000116b61400]  64 bytes

  0x0000000116b613c0: vmovsd (%rsp),%xmm0
  0x0000000116b613c5: add    $0x10,%rsp
  0x0000000116b613c9: vmovsd %xmm0,-0x10(%r14)
  0x0000000116b613cf: movzbl 0x1(%r13),%ebx
  0x0000000116b613d4: inc    %r13
  0x0000000116b613d7: movabs $0x10ce3b680,%r10
  0x0000000116b613e1: jmpq   *(%r10,%rbx,8)
  0x0000000116b613e5: nop
  0x0000000116b613e6: nop
  0x0000000116b613e7: nop
  0x0000000116b613e8: int3   
  0x0000000116b613e9: int3   
  0x0000000116b613ea: int3   
  0x0000000116b613eb: int3   
  0x0000000116b613ec: int3   
  0x0000000116b613ed: int3   
  0x0000000116b613ee: int3   
  0x0000000116b613ef: int3   
  0x0000000116b613f0: int3   
  0x0000000116b613f1: int3   
  0x0000000116b613f2: int3   
  0x0000000116b613f3: int3   
  0x0000000116b613f4: int3   
  0x0000000116b613f5: int3   
  0x0000000116b613f6: int3   
  0x0000000116b613f7: int3   
  0x0000000116b613f8: int3   
  0x0000000116b613f9: int3   
  0x0000000116b613fa: int3   
  0x0000000116b613fb: int3   
  0x0000000116b613fc: int3   
  0x0000000116b613fd: int3   
  0x0000000116b613fe: int3   
  0x0000000116b613ff: int3   

----------------------------------------------------------------------
dstore_2  73 dstore_2  [0x0000000116b61440, 0x0000000116b61480]  64 bytes

  0x0000000116b61440: vmovsd (%rsp),%xmm0
  0x0000000116b61445: add    $0x10,%rsp
  0x0000000116b61449: vmovsd %xmm0,-0x18(%r14)
  0x0000000116b6144f: movzbl 0x1(%r13),%ebx
  0x0000000116b61454: inc    %r13
  0x0000000116b61457: movabs $0x10ce3b680,%r10
  0x0000000116b61461: jmpq   *(%r10,%rbx,8)
  0x0000000116b61465: nop
  0x0000000116b61466: nop
  0x0000000116b61467: nop
  0x0000000116b61468: int3   
  0x0000000116b61469: int3   
  0x0000000116b6146a: int3   
  0x0000000116b6146b: int3   
  0x0000000116b6146c: int3   
  0x0000000116b6146d: int3   
  0x0000000116b6146e: int3   
  0x0000000116b6146f: int3   
  0x0000000116b61470: int3   
  0x0000000116b61471: int3   
  0x0000000116b61472: int3   
  0x0000000116b61473: int3   
  0x0000000116b61474: int3   
  0x0000000116b61475: int3   
  0x0000000116b61476: int3   
  0x0000000116b61477: int3   
  0x0000000116b61478: int3   
  0x0000000116b61479: int3   
  0x0000000116b6147a: int3   
  0x0000000116b6147b: int3   
  0x0000000116b6147c: int3   
  0x0000000116b6147d: int3   
  0x0000000116b6147e: int3   
  0x0000000116b6147f: int3   

----------------------------------------------------------------------
dstore_3  74 dstore_3  [0x0000000116b614c0, 0x0000000116b61500]  64 bytes

  0x0000000116b614c0: vmovsd (%rsp),%xmm0
  0x0000000116b614c5: add    $0x10,%rsp
  0x0000000116b614c9: vmovsd %xmm0,-0x20(%r14)
  0x0000000116b614cf: movzbl 0x1(%r13),%ebx
  0x0000000116b614d4: inc    %r13
  0x0000000116b614d7: movabs $0x10ce3b680,%r10
  0x0000000116b614e1: jmpq   *(%r10,%rbx,8)
  0x0000000116b614e5: nop
  0x0000000116b614e6: nop
  0x0000000116b614e7: nop
  0x0000000116b614e8: int3   
  0x0000000116b614e9: int3   
  0x0000000116b614ea: int3   
  0x0000000116b614eb: int3   
  0x0000000116b614ec: int3   
  0x0000000116b614ed: int3   
  0x0000000116b614ee: int3   
  0x0000000116b614ef: int3   
  0x0000000116b614f0: int3   
  0x0000000116b614f1: int3   
  0x0000000116b614f2: int3   
  0x0000000116b614f3: int3   
  0x0000000116b614f4: int3   
  0x0000000116b614f5: int3   
  0x0000000116b614f6: int3   
  0x0000000116b614f7: int3   
  0x0000000116b614f8: int3   
  0x0000000116b614f9: int3   
  0x0000000116b614fa: int3   
  0x0000000116b614fb: int3   
  0x0000000116b614fc: int3   
  0x0000000116b614fd: int3   
  0x0000000116b614fe: int3   
  0x0000000116b614ff: int3   

----------------------------------------------------------------------
astore_0  75 astore_0  [0x0000000116b61540, 0x0000000116b615a0]  96 bytes

  0x0000000116b61540: push   %rax
  0x0000000116b61541: jmpq   0x0000000116b61570
  0x0000000116b61546: sub    $0x8,%rsp
  0x0000000116b6154a: vmovss %xmm0,(%rsp)
  0x0000000116b6154f: jmpq   0x0000000116b61570
  0x0000000116b61554: sub    $0x10,%rsp
  0x0000000116b61558: vmovsd %xmm0,(%rsp)
  0x0000000116b6155d: jmpq   0x0000000116b61570
  0x0000000116b61562: sub    $0x10,%rsp
  0x0000000116b61566: mov    %rax,(%rsp)
  0x0000000116b6156a: jmpq   0x0000000116b61570
  0x0000000116b6156f: push   %rax
  0x0000000116b61570: pop    %rax
  0x0000000116b61571: mov    %rax,(%r14)
  0x0000000116b61574: movzbl 0x1(%r13),%ebx
  0x0000000116b61579: inc    %r13
  0x0000000116b6157c: movabs $0x10ce3b680,%r10
  0x0000000116b61586: jmpq   *(%r10,%rbx,8)
  0x0000000116b6158a: nop
  0x0000000116b6158b: nop
  0x0000000116b6158c: nop
  0x0000000116b6158d: nop
  0x0000000116b6158e: nop
  0x0000000116b6158f: nop
  0x0000000116b61590: int3   
  0x0000000116b61591: int3   
  0x0000000116b61592: int3   
  0x0000000116b61593: int3   
  0x0000000116b61594: int3   
  0x0000000116b61595: int3   
  0x0000000116b61596: int3   
  0x0000000116b61597: int3   
  0x0000000116b61598: int3   
  0x0000000116b61599: int3   
  0x0000000116b6159a: int3   
  0x0000000116b6159b: int3   
  0x0000000116b6159c: int3   
  0x0000000116b6159d: int3   
  0x0000000116b6159e: int3   
  0x0000000116b6159f: int3   

----------------------------------------------------------------------
astore_1  76 astore_1  [0x0000000116b615e0, 0x0000000116b61640]  96 bytes

  0x0000000116b615e0: push   %rax
  0x0000000116b615e1: jmpq   0x0000000116b61610
  0x0000000116b615e6: sub    $0x8,%rsp
  0x0000000116b615ea: vmovss %xmm0,(%rsp)
  0x0000000116b615ef: jmpq   0x0000000116b61610
  0x0000000116b615f4: sub    $0x10,%rsp
  0x0000000116b615f8: vmovsd %xmm0,(%rsp)
  0x0000000116b615fd: jmpq   0x0000000116b61610
  0x0000000116b61602: sub    $0x10,%rsp
  0x0000000116b61606: mov    %rax,(%rsp)
  0x0000000116b6160a: jmpq   0x0000000116b61610
  0x0000000116b6160f: push   %rax
  0x0000000116b61610: pop    %rax
  0x0000000116b61611: mov    %rax,-0x8(%r14)
  0x0000000116b61615: movzbl 0x1(%r13),%ebx
  0x0000000116b6161a: inc    %r13
  0x0000000116b6161d: movabs $0x10ce3b680,%r10
  0x0000000116b61627: jmpq   *(%r10,%rbx,8)
  0x0000000116b6162b: nop
  0x0000000116b6162c: nop
  0x0000000116b6162d: nop
  0x0000000116b6162e: nop
  0x0000000116b6162f: nop
  0x0000000116b61630: int3   
  0x0000000116b61631: int3   
  0x0000000116b61632: int3   
  0x0000000116b61633: int3   
  0x0000000116b61634: int3   
  0x0000000116b61635: int3   
  0x0000000116b61636: int3   
  0x0000000116b61637: int3   
  0x0000000116b61638: int3   
  0x0000000116b61639: int3   
  0x0000000116b6163a: int3   
  0x0000000116b6163b: int3   
  0x0000000116b6163c: int3   
  0x0000000116b6163d: int3   
  0x0000000116b6163e: int3   
  0x0000000116b6163f: int3   

----------------------------------------------------------------------
astore_2  77 astore_2  [0x0000000116b61680, 0x0000000116b616e0]  96 bytes

  0x0000000116b61680: push   %rax
  0x0000000116b61681: jmpq   0x0000000116b616b0
  0x0000000116b61686: sub    $0x8,%rsp
  0x0000000116b6168a: vmovss %xmm0,(%rsp)
  0x0000000116b6168f: jmpq   0x0000000116b616b0
  0x0000000116b61694: sub    $0x10,%rsp
  0x0000000116b61698: vmovsd %xmm0,(%rsp)
  0x0000000116b6169d: jmpq   0x0000000116b616b0
  0x0000000116b616a2: sub    $0x10,%rsp
  0x0000000116b616a6: mov    %rax,(%rsp)
  0x0000000116b616aa: jmpq   0x0000000116b616b0
  0x0000000116b616af: push   %rax
  0x0000000116b616b0: pop    %rax
  0x0000000116b616b1: mov    %rax,-0x10(%r14)
  0x0000000116b616b5: movzbl 0x1(%r13),%ebx
  0x0000000116b616ba: inc    %r13
  0x0000000116b616bd: movabs $0x10ce3b680,%r10
  0x0000000116b616c7: jmpq   *(%r10,%rbx,8)
  0x0000000116b616cb: nop
  0x0000000116b616cc: nop
  0x0000000116b616cd: nop
  0x0000000116b616ce: nop
  0x0000000116b616cf: nop
  0x0000000116b616d0: int3   
  0x0000000116b616d1: int3   
  0x0000000116b616d2: int3   
  0x0000000116b616d3: int3   
  0x0000000116b616d4: int3   
  0x0000000116b616d5: int3   
  0x0000000116b616d6: int3   
  0x0000000116b616d7: int3   
  0x0000000116b616d8: int3   
  0x0000000116b616d9: int3   
  0x0000000116b616da: int3   
  0x0000000116b616db: int3   
  0x0000000116b616dc: int3   
  0x0000000116b616dd: int3   
  0x0000000116b616de: int3   
  0x0000000116b616df: int3   

----------------------------------------------------------------------
astore_3  78 astore_3  [0x0000000116b61720, 0x0000000116b61780]  96 bytes

  0x0000000116b61720: push   %rax
  0x0000000116b61721: jmpq   0x0000000116b61750
  0x0000000116b61726: sub    $0x8,%rsp
  0x0000000116b6172a: vmovss %xmm0,(%rsp)
  0x0000000116b6172f: jmpq   0x0000000116b61750
  0x0000000116b61734: sub    $0x10,%rsp
  0x0000000116b61738: vmovsd %xmm0,(%rsp)
  0x0000000116b6173d: jmpq   0x0000000116b61750
  0x0000000116b61742: sub    $0x10,%rsp
  0x0000000116b61746: mov    %rax,(%rsp)
  0x0000000116b6174a: jmpq   0x0000000116b61750
  0x0000000116b6174f: push   %rax
  0x0000000116b61750: pop    %rax
  0x0000000116b61751: mov    %rax,-0x18(%r14)
  0x0000000116b61755: movzbl 0x1(%r13),%ebx
  0x0000000116b6175a: inc    %r13
  0x0000000116b6175d: movabs $0x10ce3b680,%r10
  0x0000000116b61767: jmpq   *(%r10,%rbx,8)
  0x0000000116b6176b: nop
  0x0000000116b6176c: nop
  0x0000000116b6176d: nop
  0x0000000116b6176e: nop
  0x0000000116b6176f: nop
  0x0000000116b61770: int3   
  0x0000000116b61771: int3   
  0x0000000116b61772: int3   
  0x0000000116b61773: int3   
  0x0000000116b61774: int3   
  0x0000000116b61775: int3   
  0x0000000116b61776: int3   
  0x0000000116b61777: int3   
  0x0000000116b61778: int3   
  0x0000000116b61779: int3   
  0x0000000116b6177a: int3   
  0x0000000116b6177b: int3   
  0x0000000116b6177c: int3   
  0x0000000116b6177d: int3   
  0x0000000116b6177e: int3   
  0x0000000116b6177f: int3   

----------------------------------------------------------------------
iastore  79 iastore  [0x0000000116b617c0, 0x0000000116b61800]  64 bytes

  0x0000000116b617c0: mov    (%rsp),%eax
  0x0000000116b617c3: add    $0x8,%rsp
  0x0000000116b617c7: mov    (%rsp),%ebx
  0x0000000116b617ca: add    $0x8,%rsp
  0x0000000116b617ce: pop    %rdx
  0x0000000116b617cf: movslq %ebx,%rbx
  0x0000000116b617d2: cmp    0xc(%rdx),%ebx
  0x0000000116b617d5: jae    0x0000000116b52880
  0x0000000116b617db: mov    %eax,0x10(%rdx,%rbx,4)
  0x0000000116b617df: movzbl 0x1(%r13),%ebx
  0x0000000116b617e4: inc    %r13
  0x0000000116b617e7: movabs $0x10ce3b680,%r10
  0x0000000116b617f1: jmpq   *(%r10,%rbx,8)
  0x0000000116b617f5: nop
  0x0000000116b617f6: nop
  0x0000000116b617f7: nop
  0x0000000116b617f8: int3   
  0x0000000116b617f9: int3   
  0x0000000116b617fa: int3   
  0x0000000116b617fb: int3   
  0x0000000116b617fc: int3   
  0x0000000116b617fd: int3   
  0x0000000116b617fe: int3   
  0x0000000116b617ff: int3   

----------------------------------------------------------------------
lastore  80 lastore  [0x0000000116b61840, 0x0000000116b61880]  64 bytes

  0x0000000116b61840: mov    (%rsp),%rax
  0x0000000116b61844: add    $0x10,%rsp
  0x0000000116b61848: mov    (%rsp),%ebx
  0x0000000116b6184b: add    $0x8,%rsp
  0x0000000116b6184f: pop    %rdx
  0x0000000116b61850: movslq %ebx,%rbx
  0x0000000116b61853: cmp    0xc(%rdx),%ebx
  0x0000000116b61856: jae    0x0000000116b52880
  0x0000000116b6185c: mov    %rax,0x10(%rdx,%rbx,8)
  0x0000000116b61861: movzbl 0x1(%r13),%ebx
  0x0000000116b61866: inc    %r13
  0x0000000116b61869: movabs $0x10ce3b680,%r10
  0x0000000116b61873: jmpq   *(%r10,%rbx,8)
  0x0000000116b61877: nop
  0x0000000116b61878: int3   
  0x0000000116b61879: int3   
  0x0000000116b6187a: int3   
  0x0000000116b6187b: int3   
  0x0000000116b6187c: int3   
  0x0000000116b6187d: int3   
  0x0000000116b6187e: int3   
  0x0000000116b6187f: int3   

----------------------------------------------------------------------
fastore  81 fastore  [0x0000000116b618c0, 0x0000000116b61900]  64 bytes

  0x0000000116b618c0: vmovss (%rsp),%xmm0
  0x0000000116b618c5: add    $0x8,%rsp
  0x0000000116b618c9: mov    (%rsp),%ebx
  0x0000000116b618cc: add    $0x8,%rsp
  0x0000000116b618d0: pop    %rdx
  0x0000000116b618d1: movslq %ebx,%rbx
  0x0000000116b618d4: cmp    0xc(%rdx),%ebx
  0x0000000116b618d7: jae    0x0000000116b52880
  0x0000000116b618dd: vmovss %xmm0,0x10(%rdx,%rbx,4)
  0x0000000116b618e3: movzbl 0x1(%r13),%ebx
  0x0000000116b618e8: inc    %r13
  0x0000000116b618eb: movabs $0x10ce3b680,%r10
  0x0000000116b618f5: jmpq   *(%r10,%rbx,8)
  0x0000000116b618f9: nop
  0x0000000116b618fa: nop
  0x0000000116b618fb: nop
  0x0000000116b618fc: nop
  0x0000000116b618fd: nop
  0x0000000116b618fe: nop
  0x0000000116b618ff: nop

----------------------------------------------------------------------
dastore  82 dastore  [0x0000000116b61940, 0x0000000116b61980]  64 bytes

  0x0000000116b61940: vmovsd (%rsp),%xmm0
  0x0000000116b61945: add    $0x10,%rsp
  0x0000000116b61949: mov    (%rsp),%ebx
  0x0000000116b6194c: add    $0x8,%rsp
  0x0000000116b61950: pop    %rdx
  0x0000000116b61951: movslq %ebx,%rbx
  0x0000000116b61954: cmp    0xc(%rdx),%ebx
  0x0000000116b61957: jae    0x0000000116b52880
  0x0000000116b6195d: vmovsd %xmm0,0x10(%rdx,%rbx,8)
  0x0000000116b61963: movzbl 0x1(%r13),%ebx
  0x0000000116b61968: inc    %r13
  0x0000000116b6196b: movabs $0x10ce3b680,%r10
  0x0000000116b61975: jmpq   *(%r10,%rbx,8)
  0x0000000116b61979: nop
  0x0000000116b6197a: nop
  0x0000000116b6197b: nop
  0x0000000116b6197c: nop
  0x0000000116b6197d: nop
  0x0000000116b6197e: nop
  0x0000000116b6197f: nop

----------------------------------------------------------------------
aastore  83 aastore  [0x0000000116b619c0, 0x0000000116b61b60]  416 bytes

  0x0000000116b619c0: push   %rax
  0x0000000116b619c1: jmpq   0x0000000116b619f0
  0x0000000116b619c6: sub    $0x8,%rsp
  0x0000000116b619ca: vmovss %xmm0,(%rsp)
  0x0000000116b619cf: jmpq   0x0000000116b619f0
  0x0000000116b619d4: sub    $0x10,%rsp
  0x0000000116b619d8: vmovsd %xmm0,(%rsp)
  0x0000000116b619dd: jmpq   0x0000000116b619f0
  0x0000000116b619e2: sub    $0x10,%rsp
  0x0000000116b619e6: mov    %rax,(%rsp)
  0x0000000116b619ea: jmpq   0x0000000116b619f0
  0x0000000116b619ef: push   %rax
  0x0000000116b619f0: mov    (%rsp),%rax
  0x0000000116b619f4: mov    0x8(%rsp),%ecx
  0x0000000116b619f8: mov    0x10(%rsp),%rdx
  0x0000000116b619fd: movslq %ecx,%rcx
  0x0000000116b61a00: cmp    0xc(%rdx),%ecx
  0x0000000116b61a03: mov    %ecx,%ebx
  0x0000000116b61a05: jae    0x0000000116b52880
  0x0000000116b61a0b: test   %rax,%rax
  0x0000000116b61a0e: je     0x0000000116b61b2a
  0x0000000116b61a14: mov    0x8(%rax),%ebx
  0x0000000116b61a17: shl    $0x3,%rbx
  0x0000000116b61a1b: mov    0x8(%rdx),%eax
  0x0000000116b61a1e: shl    $0x3,%rax
  0x0000000116b61a22: mov    0xf0(%rax),%rax
  0x0000000116b61a29: lea    0x10(%rdx,%rcx,4),%rdx
  0x0000000116b61a2e: cmp    %rax,%rbx
  0x0000000116b61a31: je     0x0000000116b61a80
  0x0000000116b61a37: mov    0x10(%rax),%ecx
  0x0000000116b61a3a: cmp    (%rbx,%rcx,1),%rax
  0x0000000116b61a3e: je     0x0000000116b61a80
  0x0000000116b61a44: cmp    $0x20,%ecx
  0x0000000116b61a47: jne    0x0000000116b61a7b
  0x0000000116b61a4d: push   %rax
  0x0000000116b61a4e: mov    %rax,%rax
  0x0000000116b61a51: push   %rdi
  0x0000000116b61a52: movabs $0x10ce26960,%rcx
  0x0000000116b61a5c: incl   (%rcx)
  0x0000000116b61a5e: mov    0x28(%rbx),%rdi
  0x0000000116b61a62: mov    (%rdi),%ecx
  0x0000000116b61a64: add    $0x8,%rdi
  0x0000000116b61a68: test   %rax,%rax
  0x0000000116b61a6b: repnz scas %es:(%rdi),%rax
  0x0000000116b61a6e: pop    %rdi
  0x0000000116b61a6f: pop    %rax
  0x0000000116b61a70: jne    0x0000000116b61a7b
  0x0000000116b61a72: mov    %rax,0x20(%rbx)
  0x0000000116b61a76: jmpq   0x0000000116b61a80
  0x0000000116b61a7b: jmpq   0x0000000116b52af2
  0x0000000116b61a80: mov    (%rsp),%rax
  0x0000000116b61a84: push   %r10
  0x0000000116b61a86: cmp    -0x9d1b1dd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b61a8d: je     0x0000000116b61b0a
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x0000000116b61a93: mov    %rsp,-0x28(%rsp)
  0x0000000116b61a98: sub    $0x80,%rsp
  0x0000000116b61a9f: mov    %rax,0x78(%rsp)
  0x0000000116b61aa4: mov    %rcx,0x70(%rsp)
  0x0000000116b61aa9: mov    %rdx,0x68(%rsp)
  0x0000000116b61aae: mov    %rbx,0x60(%rsp)
  0x0000000116b61ab3: mov    %rbp,0x50(%rsp)
  0x0000000116b61ab8: mov    %rsi,0x48(%rsp)
  0x0000000116b61abd: mov    %rdi,0x40(%rsp)
  0x0000000116b61ac2: mov    %r8,0x38(%rsp)
  0x0000000116b61ac7: mov    %r9,0x30(%rsp)
  0x0000000116b61acc: mov    %r10,0x28(%rsp)
  0x0000000116b61ad1: mov    %r11,0x20(%rsp)
  0x0000000116b61ad6: mov    %r12,0x18(%rsp)
  0x0000000116b61adb: mov    %r13,0x10(%rsp)
  0x0000000116b61ae0: mov    %r14,0x8(%rsp)
  0x0000000116b61ae5: mov    %r15,(%rsp)
  0x0000000116b61ae9: movabs $0x10cc648e6,%rdi
  0x0000000116b61af3: movabs $0x116b61a93,%rsi
  0x0000000116b61afd: mov    %rsp,%rdx
  0x0000000116b61b00: and    $0xfffffffffffffff0,%rsp
  0x0000000116b61b04: callq  0x000000010c7dd830
  0x0000000116b61b09: hlt    
  0x0000000116b61b0a: pop    %r10
  0x0000000116b61b0c: shr    $0x3,%rax
  0x0000000116b61b10: mov    %eax,(%rdx)
  0x0000000116b61b12: shr    $0x9,%rdx
  0x0000000116b61b16: movabs $0x1071e1000,%r10
  0x0000000116b61b20: movb   $0x0,(%r10,%rdx,1)
  0x0000000116b61b25: jmpq   0x0000000116b61b32
  0x0000000116b61b2a: movl   $0x0,0x10(%rdx,%rcx,4)
  0x0000000116b61b32: add    $0x18,%rsp
  0x0000000116b61b36: movzbl 0x1(%r13),%ebx
  0x0000000116b61b3b: inc    %r13
  0x0000000116b61b3e: movabs $0x10ce3b680,%r10
  0x0000000116b61b48: jmpq   *(%r10,%rbx,8)
  0x0000000116b61b4c: nop
  0x0000000116b61b4d: nop
  0x0000000116b61b4e: nop
  0x0000000116b61b4f: nop
  0x0000000116b61b50: int3   
  0x0000000116b61b51: int3   
  0x0000000116b61b52: int3   
  0x0000000116b61b53: int3   
  0x0000000116b61b54: int3   
  0x0000000116b61b55: int3   
  0x0000000116b61b56: int3   
  0x0000000116b61b57: int3   
  0x0000000116b61b58: int3   
  0x0000000116b61b59: int3   
  0x0000000116b61b5a: int3   
  0x0000000116b61b5b: int3   
  0x0000000116b61b5c: int3   
  0x0000000116b61b5d: int3   
  0x0000000116b61b5e: int3   
  0x0000000116b61b5f: int3   

----------------------------------------------------------------------
bastore  84 bastore  [0x0000000116b61ba0, 0x0000000116b61c00]  96 bytes

  0x0000000116b61ba0: mov    (%rsp),%eax
  0x0000000116b61ba3: add    $0x8,%rsp
  0x0000000116b61ba7: mov    (%rsp),%ebx
  0x0000000116b61baa: add    $0x8,%rsp
  0x0000000116b61bae: pop    %rdx
  0x0000000116b61baf: movslq %ebx,%rbx
  0x0000000116b61bb2: cmp    0xc(%rdx),%ebx
  0x0000000116b61bb5: jae    0x0000000116b52880
  0x0000000116b61bbb: mov    0x8(%rdx),%ecx
  0x0000000116b61bbe: shl    $0x3,%rcx
  0x0000000116b61bc2: mov    0xc(%rcx),%ecx
  0x0000000116b61bc5: test   $0x400,%ecx
  0x0000000116b61bcb: je     0x0000000116b61bd0
  0x0000000116b61bcd: and    $0x1,%eax
  0x0000000116b61bd0: mov    %al,0x10(%rdx,%rbx,1)
  0x0000000116b61bd4: movzbl 0x1(%r13),%ebx
  0x0000000116b61bd9: inc    %r13
  0x0000000116b61bdc: movabs $0x10ce3b680,%r10
  0x0000000116b61be6: jmpq   *(%r10,%rbx,8)
  0x0000000116b61bea: nop
  0x0000000116b61beb: nop
  0x0000000116b61bec: nop
  0x0000000116b61bed: nop
  0x0000000116b61bee: nop
  0x0000000116b61bef: nop
  0x0000000116b61bf0: int3   
  0x0000000116b61bf1: int3   
  0x0000000116b61bf2: int3   
  0x0000000116b61bf3: int3   
  0x0000000116b61bf4: int3   
  0x0000000116b61bf5: int3   
  0x0000000116b61bf6: int3   
  0x0000000116b61bf7: int3   
  0x0000000116b61bf8: int3   
  0x0000000116b61bf9: int3   
  0x0000000116b61bfa: int3   
  0x0000000116b61bfb: int3   
  0x0000000116b61bfc: int3   
  0x0000000116b61bfd: int3   
  0x0000000116b61bfe: int3   
  0x0000000116b61bff: int3   

----------------------------------------------------------------------
castore  85 castore  [0x0000000116b61c40, 0x0000000116b61c80]  64 bytes

  0x0000000116b61c40: mov    (%rsp),%eax
  0x0000000116b61c43: add    $0x8,%rsp
  0x0000000116b61c47: mov    (%rsp),%ebx
  0x0000000116b61c4a: add    $0x8,%rsp
  0x0000000116b61c4e: pop    %rdx
  0x0000000116b61c4f: movslq %ebx,%rbx
  0x0000000116b61c52: cmp    0xc(%rdx),%ebx
  0x0000000116b61c55: jae    0x0000000116b52880
  0x0000000116b61c5b: mov    %ax,0x10(%rdx,%rbx,2)
  0x0000000116b61c60: movzbl 0x1(%r13),%ebx
  0x0000000116b61c65: inc    %r13
  0x0000000116b61c68: movabs $0x10ce3b680,%r10
  0x0000000116b61c72: jmpq   *(%r10,%rbx,8)
  0x0000000116b61c76: nop
  0x0000000116b61c77: nop
  0x0000000116b61c78: int3   
  0x0000000116b61c79: int3   
  0x0000000116b61c7a: int3   
  0x0000000116b61c7b: int3   
  0x0000000116b61c7c: int3   
  0x0000000116b61c7d: int3   
  0x0000000116b61c7e: int3   
  0x0000000116b61c7f: int3   

----------------------------------------------------------------------
sastore  86 sastore  [0x0000000116b61cc0, 0x0000000116b61d00]  64 bytes

  0x0000000116b61cc0: mov    (%rsp),%eax
  0x0000000116b61cc3: add    $0x8,%rsp
  0x0000000116b61cc7: mov    (%rsp),%ebx
  0x0000000116b61cca: add    $0x8,%rsp
  0x0000000116b61cce: pop    %rdx
  0x0000000116b61ccf: movslq %ebx,%rbx
  0x0000000116b61cd2: cmp    0xc(%rdx),%ebx
  0x0000000116b61cd5: jae    0x0000000116b52880
  0x0000000116b61cdb: mov    %ax,0x10(%rdx,%rbx,2)
  0x0000000116b61ce0: movzbl 0x1(%r13),%ebx
  0x0000000116b61ce5: inc    %r13
  0x0000000116b61ce8: movabs $0x10ce3b680,%r10
  0x0000000116b61cf2: jmpq   *(%r10,%rbx,8)
  0x0000000116b61cf6: nop
  0x0000000116b61cf7: nop
  0x0000000116b61cf8: int3   
  0x0000000116b61cf9: int3   
  0x0000000116b61cfa: int3   
  0x0000000116b61cfb: int3   
  0x0000000116b61cfc: int3   
  0x0000000116b61cfd: int3   
  0x0000000116b61cfe: int3   
  0x0000000116b61cff: int3   

----------------------------------------------------------------------
pop  87 pop  [0x0000000116b61d40, 0x0000000116b61da0]  96 bytes

  0x0000000116b61d40: push   %rax
  0x0000000116b61d41: jmpq   0x0000000116b61d70
  0x0000000116b61d46: sub    $0x8,%rsp
  0x0000000116b61d4a: vmovss %xmm0,(%rsp)
  0x0000000116b61d4f: jmpq   0x0000000116b61d70
  0x0000000116b61d54: sub    $0x10,%rsp
  0x0000000116b61d58: vmovsd %xmm0,(%rsp)
  0x0000000116b61d5d: jmpq   0x0000000116b61d70
  0x0000000116b61d62: sub    $0x10,%rsp
  0x0000000116b61d66: mov    %rax,(%rsp)
  0x0000000116b61d6a: jmpq   0x0000000116b61d70
  0x0000000116b61d6f: push   %rax
  0x0000000116b61d70: add    $0x8,%rsp
  0x0000000116b61d74: movzbl 0x1(%r13),%ebx
  0x0000000116b61d79: inc    %r13
  0x0000000116b61d7c: movabs $0x10ce3b680,%r10
  0x0000000116b61d86: jmpq   *(%r10,%rbx,8)
  0x0000000116b61d8a: nop
  0x0000000116b61d8b: nop
  0x0000000116b61d8c: nop
  0x0000000116b61d8d: nop
  0x0000000116b61d8e: nop
  0x0000000116b61d8f: nop
  0x0000000116b61d90: int3   
  0x0000000116b61d91: int3   
  0x0000000116b61d92: int3   
  0x0000000116b61d93: int3   
  0x0000000116b61d94: int3   
  0x0000000116b61d95: int3   
  0x0000000116b61d96: int3   
  0x0000000116b61d97: int3   
  0x0000000116b61d98: int3   
  0x0000000116b61d99: int3   
  0x0000000116b61d9a: int3   
  0x0000000116b61d9b: int3   
  0x0000000116b61d9c: int3   
  0x0000000116b61d9d: int3   
  0x0000000116b61d9e: int3   
  0x0000000116b61d9f: int3   

----------------------------------------------------------------------
pop2  88 pop2  [0x0000000116b61de0, 0x0000000116b61e40]  96 bytes

  0x0000000116b61de0: push   %rax
  0x0000000116b61de1: jmpq   0x0000000116b61e10
  0x0000000116b61de6: sub    $0x8,%rsp
  0x0000000116b61dea: vmovss %xmm0,(%rsp)
  0x0000000116b61def: jmpq   0x0000000116b61e10
  0x0000000116b61df4: sub    $0x10,%rsp
  0x0000000116b61df8: vmovsd %xmm0,(%rsp)
  0x0000000116b61dfd: jmpq   0x0000000116b61e10
  0x0000000116b61e02: sub    $0x10,%rsp
  0x0000000116b61e06: mov    %rax,(%rsp)
  0x0000000116b61e0a: jmpq   0x0000000116b61e10
  0x0000000116b61e0f: push   %rax
  0x0000000116b61e10: add    $0x10,%rsp
  0x0000000116b61e14: movzbl 0x1(%r13),%ebx
  0x0000000116b61e19: inc    %r13
  0x0000000116b61e1c: movabs $0x10ce3b680,%r10
  0x0000000116b61e26: jmpq   *(%r10,%rbx,8)
  0x0000000116b61e2a: nop
  0x0000000116b61e2b: nop
  0x0000000116b61e2c: nop
  0x0000000116b61e2d: nop
  0x0000000116b61e2e: nop
  0x0000000116b61e2f: nop
  0x0000000116b61e30: int3   
  0x0000000116b61e31: int3   
  0x0000000116b61e32: int3   
  0x0000000116b61e33: int3   
  0x0000000116b61e34: int3   
  0x0000000116b61e35: int3   
  0x0000000116b61e36: int3   
  0x0000000116b61e37: int3   
  0x0000000116b61e38: int3   
  0x0000000116b61e39: int3   
  0x0000000116b61e3a: int3   
  0x0000000116b61e3b: int3   
  0x0000000116b61e3c: int3   
  0x0000000116b61e3d: int3   
  0x0000000116b61e3e: int3   
  0x0000000116b61e3f: int3   

----------------------------------------------------------------------
dup  89 dup  [0x0000000116b61e80, 0x0000000116b61ee0]  96 bytes

  0x0000000116b61e80: push   %rax
  0x0000000116b61e81: jmpq   0x0000000116b61eb0
  0x0000000116b61e86: sub    $0x8,%rsp
  0x0000000116b61e8a: vmovss %xmm0,(%rsp)
  0x0000000116b61e8f: jmpq   0x0000000116b61eb0
  0x0000000116b61e94: sub    $0x10,%rsp
  0x0000000116b61e98: vmovsd %xmm0,(%rsp)
  0x0000000116b61e9d: jmpq   0x0000000116b61eb0
  0x0000000116b61ea2: sub    $0x10,%rsp
  0x0000000116b61ea6: mov    %rax,(%rsp)
  0x0000000116b61eaa: jmpq   0x0000000116b61eb0
  0x0000000116b61eaf: push   %rax
  0x0000000116b61eb0: mov    (%rsp),%rax
  0x0000000116b61eb4: push   %rax
  0x0000000116b61eb5: movzbl 0x1(%r13),%ebx
  0x0000000116b61eba: inc    %r13
  0x0000000116b61ebd: movabs $0x10ce3b680,%r10
  0x0000000116b61ec7: jmpq   *(%r10,%rbx,8)
  0x0000000116b61ecb: nop
  0x0000000116b61ecc: nop
  0x0000000116b61ecd: nop
  0x0000000116b61ece: nop
  0x0000000116b61ecf: nop
  0x0000000116b61ed0: int3   
  0x0000000116b61ed1: int3   
  0x0000000116b61ed2: int3   
  0x0000000116b61ed3: int3   
  0x0000000116b61ed4: int3   
  0x0000000116b61ed5: int3   
  0x0000000116b61ed6: int3   
  0x0000000116b61ed7: int3   
  0x0000000116b61ed8: int3   
  0x0000000116b61ed9: int3   
  0x0000000116b61eda: int3   
  0x0000000116b61edb: int3   
  0x0000000116b61edc: int3   
  0x0000000116b61edd: int3   
  0x0000000116b61ede: int3   
  0x0000000116b61edf: int3   

----------------------------------------------------------------------
dup_x1  90 dup_x1  [0x0000000116b61f20, 0x0000000116b61f80]  96 bytes

  0x0000000116b61f20: push   %rax
  0x0000000116b61f21: jmpq   0x0000000116b61f50
  0x0000000116b61f26: sub    $0x8,%rsp
  0x0000000116b61f2a: vmovss %xmm0,(%rsp)
  0x0000000116b61f2f: jmpq   0x0000000116b61f50
  0x0000000116b61f34: sub    $0x10,%rsp
  0x0000000116b61f38: vmovsd %xmm0,(%rsp)
  0x0000000116b61f3d: jmpq   0x0000000116b61f50
  0x0000000116b61f42: sub    $0x10,%rsp
  0x0000000116b61f46: mov    %rax,(%rsp)
  0x0000000116b61f4a: jmpq   0x0000000116b61f50
  0x0000000116b61f4f: push   %rax
  0x0000000116b61f50: mov    (%rsp),%rax
  0x0000000116b61f54: mov    0x8(%rsp),%rcx
  0x0000000116b61f59: mov    %rax,0x8(%rsp)
  0x0000000116b61f5e: mov    %rcx,(%rsp)
  0x0000000116b61f62: push   %rax
  0x0000000116b61f63: movzbl 0x1(%r13),%ebx
  0x0000000116b61f68: inc    %r13
  0x0000000116b61f6b: movabs $0x10ce3b680,%r10
  0x0000000116b61f75: jmpq   *(%r10,%rbx,8)
  0x0000000116b61f79: nop
  0x0000000116b61f7a: nop
  0x0000000116b61f7b: nop
  0x0000000116b61f7c: nop
  0x0000000116b61f7d: nop
  0x0000000116b61f7e: nop
  0x0000000116b61f7f: nop

----------------------------------------------------------------------
dup_x2  91 dup_x2  [0x0000000116b61fc0, 0x0000000116b62040]  128 bytes

  0x0000000116b61fc0: push   %rax
  0x0000000116b61fc1: jmpq   0x0000000116b61ff0
  0x0000000116b61fc6: sub    $0x8,%rsp
  0x0000000116b61fca: vmovss %xmm0,(%rsp)
  0x0000000116b61fcf: jmpq   0x0000000116b61ff0
  0x0000000116b61fd4: sub    $0x10,%rsp
  0x0000000116b61fd8: vmovsd %xmm0,(%rsp)
  0x0000000116b61fdd: jmpq   0x0000000116b61ff0
  0x0000000116b61fe2: sub    $0x10,%rsp
  0x0000000116b61fe6: mov    %rax,(%rsp)
  0x0000000116b61fea: jmpq   0x0000000116b61ff0
  0x0000000116b61fef: push   %rax
  0x0000000116b61ff0: mov    (%rsp),%rax
  0x0000000116b61ff4: mov    0x10(%rsp),%rcx
  0x0000000116b61ff9: mov    %rax,0x10(%rsp)
  0x0000000116b61ffe: push   %rax
  0x0000000116b61fff: mov    0x10(%rsp),%rax
  0x0000000116b62004: mov    %rcx,0x10(%rsp)
  0x0000000116b62009: mov    %rax,0x8(%rsp)
  0x0000000116b6200e: movzbl 0x1(%r13),%ebx
  0x0000000116b62013: inc    %r13
  0x0000000116b62016: movabs $0x10ce3b680,%r10
  0x0000000116b62020: jmpq   *(%r10,%rbx,8)
  0x0000000116b62024: nop
  0x0000000116b62025: nop
  0x0000000116b62026: nop
  0x0000000116b62027: nop
  0x0000000116b62028: int3   
  0x0000000116b62029: int3   
  0x0000000116b6202a: int3   
  0x0000000116b6202b: int3   
  0x0000000116b6202c: int3   
  0x0000000116b6202d: int3   
  0x0000000116b6202e: int3   
  0x0000000116b6202f: int3   
  0x0000000116b62030: int3   
  0x0000000116b62031: int3   
  0x0000000116b62032: int3   
  0x0000000116b62033: int3   
  0x0000000116b62034: int3   
  0x0000000116b62035: int3   
  0x0000000116b62036: int3   
  0x0000000116b62037: int3   
  0x0000000116b62038: int3   
  0x0000000116b62039: int3   
  0x0000000116b6203a: int3   
  0x0000000116b6203b: int3   
  0x0000000116b6203c: int3   
  0x0000000116b6203d: int3   
  0x0000000116b6203e: int3   
  0x0000000116b6203f: int3   

----------------------------------------------------------------------
dup2  92 dup2  [0x0000000116b62080, 0x0000000116b620e0]  96 bytes

  0x0000000116b62080: push   %rax
  0x0000000116b62081: jmpq   0x0000000116b620b0
  0x0000000116b62086: sub    $0x8,%rsp
  0x0000000116b6208a: vmovss %xmm0,(%rsp)
  0x0000000116b6208f: jmpq   0x0000000116b620b0
  0x0000000116b62094: sub    $0x10,%rsp
  0x0000000116b62098: vmovsd %xmm0,(%rsp)
  0x0000000116b6209d: jmpq   0x0000000116b620b0
  0x0000000116b620a2: sub    $0x10,%rsp
  0x0000000116b620a6: mov    %rax,(%rsp)
  0x0000000116b620aa: jmpq   0x0000000116b620b0
  0x0000000116b620af: push   %rax
  0x0000000116b620b0: mov    0x8(%rsp),%rax
  0x0000000116b620b5: push   %rax
  0x0000000116b620b6: mov    0x8(%rsp),%rax
  0x0000000116b620bb: push   %rax
  0x0000000116b620bc: movzbl 0x1(%r13),%ebx
  0x0000000116b620c1: inc    %r13
  0x0000000116b620c4: movabs $0x10ce3b680,%r10
  0x0000000116b620ce: jmpq   *(%r10,%rbx,8)
  0x0000000116b620d2: nop
  0x0000000116b620d3: nop
  0x0000000116b620d4: nop
  0x0000000116b620d5: nop
  0x0000000116b620d6: nop
  0x0000000116b620d7: nop
  0x0000000116b620d8: int3   
  0x0000000116b620d9: int3   
  0x0000000116b620da: int3   
  0x0000000116b620db: int3   
  0x0000000116b620dc: int3   
  0x0000000116b620dd: int3   
  0x0000000116b620de: int3   
  0x0000000116b620df: int3   

----------------------------------------------------------------------
dup2_x1  93 dup2_x1  [0x0000000116b62120, 0x0000000116b621a0]  128 bytes

  0x0000000116b62120: push   %rax
  0x0000000116b62121: jmpq   0x0000000116b62150
  0x0000000116b62126: sub    $0x8,%rsp
  0x0000000116b6212a: vmovss %xmm0,(%rsp)
  0x0000000116b6212f: jmpq   0x0000000116b62150
  0x0000000116b62134: sub    $0x10,%rsp
  0x0000000116b62138: vmovsd %xmm0,(%rsp)
  0x0000000116b6213d: jmpq   0x0000000116b62150
  0x0000000116b62142: sub    $0x10,%rsp
  0x0000000116b62146: mov    %rax,(%rsp)
  0x0000000116b6214a: jmpq   0x0000000116b62150
  0x0000000116b6214f: push   %rax
  0x0000000116b62150: mov    (%rsp),%rcx
  0x0000000116b62154: mov    0x8(%rsp),%rax
  0x0000000116b62159: push   %rax
  0x0000000116b6215a: push   %rcx
  0x0000000116b6215b: mov    %rcx,0x18(%rsp)
  0x0000000116b62160: mov    0x20(%rsp),%rcx
  0x0000000116b62165: mov    %rcx,0x10(%rsp)
  0x0000000116b6216a: mov    %rax,0x20(%rsp)
  0x0000000116b6216f: movzbl 0x1(%r13),%ebx
  0x0000000116b62174: inc    %r13
  0x0000000116b62177: movabs $0x10ce3b680,%r10
  0x0000000116b62181: jmpq   *(%r10,%rbx,8)
  0x0000000116b62185: nop
  0x0000000116b62186: nop
  0x0000000116b62187: nop
  0x0000000116b62188: int3   
  0x0000000116b62189: int3   
  0x0000000116b6218a: int3   
  0x0000000116b6218b: int3   
  0x0000000116b6218c: int3   
  0x0000000116b6218d: int3   
  0x0000000116b6218e: int3   
  0x0000000116b6218f: int3   
  0x0000000116b62190: int3   
  0x0000000116b62191: int3   
  0x0000000116b62192: int3   
  0x0000000116b62193: int3   
  0x0000000116b62194: int3   
  0x0000000116b62195: int3   
  0x0000000116b62196: int3   
  0x0000000116b62197: int3   
  0x0000000116b62198: int3   
  0x0000000116b62199: int3   
  0x0000000116b6219a: int3   
  0x0000000116b6219b: int3   
  0x0000000116b6219c: int3   
  0x0000000116b6219d: int3   
  0x0000000116b6219e: int3   
  0x0000000116b6219f: int3   

----------------------------------------------------------------------
dup2_x2  94 dup2_x2  [0x0000000116b621e0, 0x0000000116b62260]  128 bytes

  0x0000000116b621e0: push   %rax
  0x0000000116b621e1: jmpq   0x0000000116b62210
  0x0000000116b621e6: sub    $0x8,%rsp
  0x0000000116b621ea: vmovss %xmm0,(%rsp)
  0x0000000116b621ef: jmpq   0x0000000116b62210
  0x0000000116b621f4: sub    $0x10,%rsp
  0x0000000116b621f8: vmovsd %xmm0,(%rsp)
  0x0000000116b621fd: jmpq   0x0000000116b62210
  0x0000000116b62202: sub    $0x10,%rsp
  0x0000000116b62206: mov    %rax,(%rsp)
  0x0000000116b6220a: jmpq   0x0000000116b62210
  0x0000000116b6220f: push   %rax
  0x0000000116b62210: mov    (%rsp),%rcx
  0x0000000116b62214: mov    0x8(%rsp),%rax
  0x0000000116b62219: push   %rax
  0x0000000116b6221a: push   %rcx
  0x0000000116b6221b: mov    0x20(%rsp),%rax
  0x0000000116b62220: mov    %rax,0x10(%rsp)
  0x0000000116b62225: mov    %rcx,0x20(%rsp)
  0x0000000116b6222a: mov    0x28(%rsp),%rcx
  0x0000000116b6222f: mov    0x18(%rsp),%rax
  0x0000000116b62234: mov    %rcx,0x18(%rsp)
  0x0000000116b62239: mov    %rax,0x28(%rsp)
  0x0000000116b6223e: movzbl 0x1(%r13),%ebx
  0x0000000116b62243: inc    %r13
  0x0000000116b62246: movabs $0x10ce3b680,%r10
  0x0000000116b62250: jmpq   *(%r10,%rbx,8)
  0x0000000116b62254: nop
  0x0000000116b62255: nop
  0x0000000116b62256: nop
  0x0000000116b62257: nop
  0x0000000116b62258: int3   
  0x0000000116b62259: int3   
  0x0000000116b6225a: int3   
  0x0000000116b6225b: int3   
  0x0000000116b6225c: int3   
  0x0000000116b6225d: int3   
  0x0000000116b6225e: int3   
  0x0000000116b6225f: int3   

----------------------------------------------------------------------
swap  95 swap  [0x0000000116b622a0, 0x0000000116b62300]  96 bytes

  0x0000000116b622a0: push   %rax
  0x0000000116b622a1: jmpq   0x0000000116b622d0
  0x0000000116b622a6: sub    $0x8,%rsp
  0x0000000116b622aa: vmovss %xmm0,(%rsp)
  0x0000000116b622af: jmpq   0x0000000116b622d0
  0x0000000116b622b4: sub    $0x10,%rsp
  0x0000000116b622b8: vmovsd %xmm0,(%rsp)
  0x0000000116b622bd: jmpq   0x0000000116b622d0
  0x0000000116b622c2: sub    $0x10,%rsp
  0x0000000116b622c6: mov    %rax,(%rsp)
  0x0000000116b622ca: jmpq   0x0000000116b622d0
  0x0000000116b622cf: push   %rax
  0x0000000116b622d0: mov    0x8(%rsp),%rcx
  0x0000000116b622d5: mov    (%rsp),%rax
  0x0000000116b622d9: mov    %rcx,(%rsp)
  0x0000000116b622dd: mov    %rax,0x8(%rsp)
  0x0000000116b622e2: movzbl 0x1(%r13),%ebx
  0x0000000116b622e7: inc    %r13
  0x0000000116b622ea: movabs $0x10ce3b680,%r10
  0x0000000116b622f4: jmpq   *(%r10,%rbx,8)
  0x0000000116b622f8: int3   
  0x0000000116b622f9: int3   
  0x0000000116b622fa: int3   
  0x0000000116b622fb: int3   
  0x0000000116b622fc: int3   
  0x0000000116b622fd: int3   
  0x0000000116b622fe: int3   
  0x0000000116b622ff: int3   

----------------------------------------------------------------------
iadd  96 iadd  [0x0000000116b62340, 0x0000000116b62380]  64 bytes

  0x0000000116b62340: mov    (%rsp),%eax
  0x0000000116b62343: add    $0x8,%rsp
  0x0000000116b62347: mov    (%rsp),%edx
  0x0000000116b6234a: add    $0x8,%rsp
  0x0000000116b6234e: add    %edx,%eax
  0x0000000116b62350: movzbl 0x1(%r13),%ebx
  0x0000000116b62355: inc    %r13
  0x0000000116b62358: movabs $0x10ce38e80,%r10
  0x0000000116b62362: jmpq   *(%r10,%rbx,8)
  0x0000000116b62366: nop
  0x0000000116b62367: nop
  0x0000000116b62368: int3   
  0x0000000116b62369: int3   
  0x0000000116b6236a: int3   
  0x0000000116b6236b: int3   
  0x0000000116b6236c: int3   
  0x0000000116b6236d: int3   
  0x0000000116b6236e: int3   
  0x0000000116b6236f: int3   
  0x0000000116b62370: int3   
  0x0000000116b62371: int3   
  0x0000000116b62372: int3   
  0x0000000116b62373: int3   
  0x0000000116b62374: int3   
  0x0000000116b62375: int3   
  0x0000000116b62376: int3   
  0x0000000116b62377: int3   
  0x0000000116b62378: int3   
  0x0000000116b62379: int3   
  0x0000000116b6237a: int3   
  0x0000000116b6237b: int3   
  0x0000000116b6237c: int3   
  0x0000000116b6237d: int3   
  0x0000000116b6237e: int3   
  0x0000000116b6237f: int3   

----------------------------------------------------------------------
ladd  97 ladd  [0x0000000116b623c0, 0x0000000116b62400]  64 bytes

  0x0000000116b623c0: mov    (%rsp),%rax
  0x0000000116b623c4: add    $0x10,%rsp
  0x0000000116b623c8: mov    (%rsp),%rdx
  0x0000000116b623cc: add    $0x10,%rsp
  0x0000000116b623d0: add    %rdx,%rax
  0x0000000116b623d3: movzbl 0x1(%r13),%ebx
  0x0000000116b623d8: inc    %r13
  0x0000000116b623db: movabs $0x10ce39680,%r10
  0x0000000116b623e5: jmpq   *(%r10,%rbx,8)
  0x0000000116b623e9: nop
  0x0000000116b623ea: nop
  0x0000000116b623eb: nop
  0x0000000116b623ec: nop
  0x0000000116b623ed: nop
  0x0000000116b623ee: nop
  0x0000000116b623ef: nop
  0x0000000116b623f0: int3   
  0x0000000116b623f1: int3   
  0x0000000116b623f2: int3   
  0x0000000116b623f3: int3   
  0x0000000116b623f4: int3   
  0x0000000116b623f5: int3   
  0x0000000116b623f6: int3   
  0x0000000116b623f7: int3   
  0x0000000116b623f8: int3   
  0x0000000116b623f9: int3   
  0x0000000116b623fa: int3   
  0x0000000116b623fb: int3   
  0x0000000116b623fc: int3   
  0x0000000116b623fd: int3   
  0x0000000116b623fe: int3   
  0x0000000116b623ff: int3   

----------------------------------------------------------------------
fadd  98 fadd  [0x0000000116b62440, 0x0000000116b62480]  64 bytes

  0x0000000116b62440: vmovss (%rsp),%xmm0
  0x0000000116b62445: add    $0x8,%rsp
  0x0000000116b62449: vaddss (%rsp),%xmm0,%xmm0
  0x0000000116b6244e: add    $0x8,%rsp
  0x0000000116b62452: movzbl 0x1(%r13),%ebx
  0x0000000116b62457: inc    %r13
  0x0000000116b6245a: movabs $0x10ce39e80,%r10
  0x0000000116b62464: jmpq   *(%r10,%rbx,8)
  0x0000000116b62468: int3   
  0x0000000116b62469: int3   
  0x0000000116b6246a: int3   
  0x0000000116b6246b: int3   
  0x0000000116b6246c: int3   
  0x0000000116b6246d: int3   
  0x0000000116b6246e: int3   
  0x0000000116b6246f: int3   
  0x0000000116b62470: int3   
  0x0000000116b62471: int3   
  0x0000000116b62472: int3   
  0x0000000116b62473: int3   
  0x0000000116b62474: int3   
  0x0000000116b62475: int3   
  0x0000000116b62476: int3   
  0x0000000116b62477: int3   
  0x0000000116b62478: int3   
  0x0000000116b62479: int3   
  0x0000000116b6247a: int3   
  0x0000000116b6247b: int3   
  0x0000000116b6247c: int3   
  0x0000000116b6247d: int3   
  0x0000000116b6247e: int3   
  0x0000000116b6247f: int3   

----------------------------------------------------------------------
dadd  99 dadd  [0x0000000116b624c0, 0x0000000116b62500]  64 bytes

  0x0000000116b624c0: vmovsd (%rsp),%xmm0
  0x0000000116b624c5: add    $0x10,%rsp
  0x0000000116b624c9: vaddsd (%rsp),%xmm0,%xmm0
  0x0000000116b624ce: add    $0x10,%rsp
  0x0000000116b624d2: movzbl 0x1(%r13),%ebx
  0x0000000116b624d7: inc    %r13
  0x0000000116b624da: movabs $0x10ce3a680,%r10
  0x0000000116b624e4: jmpq   *(%r10,%rbx,8)
  0x0000000116b624e8: int3   
  0x0000000116b624e9: int3   
  0x0000000116b624ea: int3   
  0x0000000116b624eb: int3   
  0x0000000116b624ec: int3   
  0x0000000116b624ed: int3   
  0x0000000116b624ee: int3   
  0x0000000116b624ef: int3   
  0x0000000116b624f0: int3   
  0x0000000116b624f1: int3   
  0x0000000116b624f2: int3   
  0x0000000116b624f3: int3   
  0x0000000116b624f4: int3   
  0x0000000116b624f5: int3   
  0x0000000116b624f6: int3   
  0x0000000116b624f7: int3   
  0x0000000116b624f8: int3   
  0x0000000116b624f9: int3   
  0x0000000116b624fa: int3   
  0x0000000116b624fb: int3   
  0x0000000116b624fc: int3   
  0x0000000116b624fd: int3   
  0x0000000116b624fe: int3   
  0x0000000116b624ff: int3   

----------------------------------------------------------------------
isub  100 isub  [0x0000000116b62540, 0x0000000116b62580]  64 bytes

  0x0000000116b62540: mov    (%rsp),%eax
  0x0000000116b62543: add    $0x8,%rsp
  0x0000000116b62547: mov    %eax,%edx
  0x0000000116b62549: mov    (%rsp),%eax
  0x0000000116b6254c: add    $0x8,%rsp
  0x0000000116b62550: sub    %edx,%eax
  0x0000000116b62552: movzbl 0x1(%r13),%ebx
  0x0000000116b62557: inc    %r13
  0x0000000116b6255a: movabs $0x10ce38e80,%r10
  0x0000000116b62564: jmpq   *(%r10,%rbx,8)
  0x0000000116b62568: int3   
  0x0000000116b62569: int3   
  0x0000000116b6256a: int3   
  0x0000000116b6256b: int3   
  0x0000000116b6256c: int3   
  0x0000000116b6256d: int3   
  0x0000000116b6256e: int3   
  0x0000000116b6256f: int3   
  0x0000000116b62570: int3   
  0x0000000116b62571: int3   
  0x0000000116b62572: int3   
  0x0000000116b62573: int3   
  0x0000000116b62574: int3   
  0x0000000116b62575: int3   
  0x0000000116b62576: int3   
  0x0000000116b62577: int3   
  0x0000000116b62578: int3   
  0x0000000116b62579: int3   
  0x0000000116b6257a: int3   
  0x0000000116b6257b: int3   
  0x0000000116b6257c: int3   
  0x0000000116b6257d: int3   
  0x0000000116b6257e: int3   
  0x0000000116b6257f: int3   

----------------------------------------------------------------------
lsub  101 lsub  [0x0000000116b625c0, 0x0000000116b62600]  64 bytes

  0x0000000116b625c0: mov    (%rsp),%rax
  0x0000000116b625c4: add    $0x10,%rsp
  0x0000000116b625c8: mov    %rax,%rdx
  0x0000000116b625cb: mov    (%rsp),%rax
  0x0000000116b625cf: add    $0x10,%rsp
  0x0000000116b625d3: sub    %rdx,%rax
  0x0000000116b625d6: movzbl 0x1(%r13),%ebx
  0x0000000116b625db: inc    %r13
  0x0000000116b625de: movabs $0x10ce39680,%r10
  0x0000000116b625e8: jmpq   *(%r10,%rbx,8)
  0x0000000116b625ec: nop
  0x0000000116b625ed: nop
  0x0000000116b625ee: nop
  0x0000000116b625ef: nop
  0x0000000116b625f0: int3   
  0x0000000116b625f1: int3   
  0x0000000116b625f2: int3   
  0x0000000116b625f3: int3   
  0x0000000116b625f4: int3   
  0x0000000116b625f5: int3   
  0x0000000116b625f6: int3   
  0x0000000116b625f7: int3   
  0x0000000116b625f8: int3   
  0x0000000116b625f9: int3   
  0x0000000116b625fa: int3   
  0x0000000116b625fb: int3   
  0x0000000116b625fc: int3   
  0x0000000116b625fd: int3   
  0x0000000116b625fe: int3   
  0x0000000116b625ff: int3   

----------------------------------------------------------------------
fsub  102 fsub  [0x0000000116b62640, 0x0000000116b62680]  64 bytes

  0x0000000116b62640: vmovss (%rsp),%xmm0
  0x0000000116b62645: add    $0x8,%rsp
  0x0000000116b62649: vmovaps %xmm0,%xmm1
  0x0000000116b6264d: vmovss (%rsp),%xmm0
  0x0000000116b62652: add    $0x8,%rsp
  0x0000000116b62656: vsubss %xmm1,%xmm0,%xmm0
  0x0000000116b6265a: movzbl 0x1(%r13),%ebx
  0x0000000116b6265f: inc    %r13
  0x0000000116b62662: movabs $0x10ce39e80,%r10
  0x0000000116b6266c: jmpq   *(%r10,%rbx,8)
  0x0000000116b62670: int3   
  0x0000000116b62671: int3   
  0x0000000116b62672: int3   
  0x0000000116b62673: int3   
  0x0000000116b62674: int3   
  0x0000000116b62675: int3   
  0x0000000116b62676: int3   
  0x0000000116b62677: int3   
  0x0000000116b62678: int3   
  0x0000000116b62679: int3   
  0x0000000116b6267a: int3   
  0x0000000116b6267b: int3   
  0x0000000116b6267c: int3   
  0x0000000116b6267d: int3   
  0x0000000116b6267e: int3   
  0x0000000116b6267f: int3   

----------------------------------------------------------------------
dsub  103 dsub  [0x0000000116b626c0, 0x0000000116b62700]  64 bytes

  0x0000000116b626c0: vmovsd (%rsp),%xmm0
  0x0000000116b626c5: add    $0x10,%rsp
  0x0000000116b626c9: vmovapd %xmm0,%xmm1
  0x0000000116b626cd: vmovsd (%rsp),%xmm0
  0x0000000116b626d2: add    $0x10,%rsp
  0x0000000116b626d6: vsubsd %xmm1,%xmm0,%xmm0
  0x0000000116b626da: movzbl 0x1(%r13),%ebx
  0x0000000116b626df: inc    %r13
  0x0000000116b626e2: movabs $0x10ce3a680,%r10
  0x0000000116b626ec: jmpq   *(%r10,%rbx,8)
  0x0000000116b626f0: int3   
  0x0000000116b626f1: int3   
  0x0000000116b626f2: int3   
  0x0000000116b626f3: int3   
  0x0000000116b626f4: int3   
  0x0000000116b626f5: int3   
  0x0000000116b626f6: int3   
  0x0000000116b626f7: int3   
  0x0000000116b626f8: int3   
  0x0000000116b626f9: int3   
  0x0000000116b626fa: int3   
  0x0000000116b626fb: int3   
  0x0000000116b626fc: int3   
  0x0000000116b626fd: int3   
  0x0000000116b626fe: int3   
  0x0000000116b626ff: int3   

----------------------------------------------------------------------
imul  104 imul  [0x0000000116b62740, 0x0000000116b62780]  64 bytes

  0x0000000116b62740: mov    (%rsp),%eax
  0x0000000116b62743: add    $0x8,%rsp
  0x0000000116b62747: mov    (%rsp),%edx
  0x0000000116b6274a: add    $0x8,%rsp
  0x0000000116b6274e: imul   %edx,%eax
  0x0000000116b62751: movzbl 0x1(%r13),%ebx
  0x0000000116b62756: inc    %r13
  0x0000000116b62759: movabs $0x10ce38e80,%r10
  0x0000000116b62763: jmpq   *(%r10,%rbx,8)
  0x0000000116b62767: nop
  0x0000000116b62768: int3   
  0x0000000116b62769: int3   
  0x0000000116b6276a: int3   
  0x0000000116b6276b: int3   
  0x0000000116b6276c: int3   
  0x0000000116b6276d: int3   
  0x0000000116b6276e: int3   
  0x0000000116b6276f: int3   
  0x0000000116b62770: int3   
  0x0000000116b62771: int3   
  0x0000000116b62772: int3   
  0x0000000116b62773: int3   
  0x0000000116b62774: int3   
  0x0000000116b62775: int3   
  0x0000000116b62776: int3   
  0x0000000116b62777: int3   
  0x0000000116b62778: int3   
  0x0000000116b62779: int3   
  0x0000000116b6277a: int3   
  0x0000000116b6277b: int3   
  0x0000000116b6277c: int3   
  0x0000000116b6277d: int3   
  0x0000000116b6277e: int3   
  0x0000000116b6277f: int3   

----------------------------------------------------------------------
lmul  105 lmul  [0x0000000116b627c0, 0x0000000116b62800]  64 bytes

  0x0000000116b627c0: mov    (%rsp),%rax
  0x0000000116b627c4: add    $0x10,%rsp
  0x0000000116b627c8: mov    (%rsp),%rdx
  0x0000000116b627cc: add    $0x10,%rsp
  0x0000000116b627d0: imul   %rdx,%rax
  0x0000000116b627d4: movzbl 0x1(%r13),%ebx
  0x0000000116b627d9: inc    %r13
  0x0000000116b627dc: movabs $0x10ce39680,%r10
  0x0000000116b627e6: jmpq   *(%r10,%rbx,8)
  0x0000000116b627ea: nop
  0x0000000116b627eb: nop
  0x0000000116b627ec: nop
  0x0000000116b627ed: nop
  0x0000000116b627ee: nop
  0x0000000116b627ef: nop
  0x0000000116b627f0: int3   
  0x0000000116b627f1: int3   
  0x0000000116b627f2: int3   
  0x0000000116b627f3: int3   
  0x0000000116b627f4: int3   
  0x0000000116b627f5: int3   
  0x0000000116b627f6: int3   
  0x0000000116b627f7: int3   
  0x0000000116b627f8: int3   
  0x0000000116b627f9: int3   
  0x0000000116b627fa: int3   
  0x0000000116b627fb: int3   
  0x0000000116b627fc: int3   
  0x0000000116b627fd: int3   
  0x0000000116b627fe: int3   
  0x0000000116b627ff: int3   

----------------------------------------------------------------------
fmul  106 fmul  [0x0000000116b62840, 0x0000000116b62880]  64 bytes

  0x0000000116b62840: vmovss (%rsp),%xmm0
  0x0000000116b62845: add    $0x8,%rsp
  0x0000000116b62849: vmulss (%rsp),%xmm0,%xmm0
  0x0000000116b6284e: add    $0x8,%rsp
  0x0000000116b62852: movzbl 0x1(%r13),%ebx
  0x0000000116b62857: inc    %r13
  0x0000000116b6285a: movabs $0x10ce39e80,%r10
  0x0000000116b62864: jmpq   *(%r10,%rbx,8)
  0x0000000116b62868: int3   
  0x0000000116b62869: int3   
  0x0000000116b6286a: int3   
  0x0000000116b6286b: int3   
  0x0000000116b6286c: int3   
  0x0000000116b6286d: int3   
  0x0000000116b6286e: int3   
  0x0000000116b6286f: int3   
  0x0000000116b62870: int3   
  0x0000000116b62871: int3   
  0x0000000116b62872: int3   
  0x0000000116b62873: int3   
  0x0000000116b62874: int3   
  0x0000000116b62875: int3   
  0x0000000116b62876: int3   
  0x0000000116b62877: int3   
  0x0000000116b62878: int3   
  0x0000000116b62879: int3   
  0x0000000116b6287a: int3   
  0x0000000116b6287b: int3   
  0x0000000116b6287c: int3   
  0x0000000116b6287d: int3   
  0x0000000116b6287e: int3   
  0x0000000116b6287f: int3   

----------------------------------------------------------------------
dmul  107 dmul  [0x0000000116b628c0, 0x0000000116b62900]  64 bytes

  0x0000000116b628c0: vmovsd (%rsp),%xmm0
  0x0000000116b628c5: add    $0x10,%rsp
  0x0000000116b628c9: vmulsd (%rsp),%xmm0,%xmm0
  0x0000000116b628ce: add    $0x10,%rsp
  0x0000000116b628d2: movzbl 0x1(%r13),%ebx
  0x0000000116b628d7: inc    %r13
  0x0000000116b628da: movabs $0x10ce3a680,%r10
  0x0000000116b628e4: jmpq   *(%r10,%rbx,8)
  0x0000000116b628e8: int3   
  0x0000000116b628e9: int3   
  0x0000000116b628ea: int3   
  0x0000000116b628eb: int3   
  0x0000000116b628ec: int3   
  0x0000000116b628ed: int3   
  0x0000000116b628ee: int3   
  0x0000000116b628ef: int3   
  0x0000000116b628f0: int3   
  0x0000000116b628f1: int3   
  0x0000000116b628f2: int3   
  0x0000000116b628f3: int3   
  0x0000000116b628f4: int3   
  0x0000000116b628f5: int3   
  0x0000000116b628f6: int3   
  0x0000000116b628f7: int3   
  0x0000000116b628f8: int3   
  0x0000000116b628f9: int3   
  0x0000000116b628fa: int3   
  0x0000000116b628fb: int3   
  0x0000000116b628fc: int3   
  0x0000000116b628fd: int3   
  0x0000000116b628fe: int3   
  0x0000000116b628ff: int3   

----------------------------------------------------------------------
idiv  108 idiv  [0x0000000116b62940, 0x0000000116b62980]  64 bytes

  0x0000000116b62940: mov    (%rsp),%eax
  0x0000000116b62943: add    $0x8,%rsp
  0x0000000116b62947: mov    %eax,%ecx
  0x0000000116b62949: mov    (%rsp),%eax
  0x0000000116b6294c: add    $0x8,%rsp
  0x0000000116b62950: cmp    $0x80000000,%eax
  0x0000000116b62956: jne    0x0000000116b62967
  0x0000000116b6295c: xor    %edx,%edx
  0x0000000116b6295e: cmp    $0xffffffff,%ecx
  0x0000000116b62961: je     0x0000000116b6296a
  0x0000000116b62967: cltd   
  0x0000000116b62968: idiv   %ecx
  0x0000000116b6296a: movzbl 0x1(%r13),%ebx
  0x0000000116b6296f: inc    %r13
  0x0000000116b62972: movabs $0x10ce38e80,%r10
  0x0000000116b6297c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldiv  109 ldiv  [0x0000000116b629c0, 0x0000000116b62a20]  96 bytes

  0x0000000116b629c0: mov    (%rsp),%rax
  0x0000000116b629c4: add    $0x10,%rsp
  0x0000000116b629c8: mov    %rax,%rcx
  0x0000000116b629cb: mov    (%rsp),%rax
  0x0000000116b629cf: add    $0x10,%rsp
  0x0000000116b629d3: test   %rcx,%rcx
  0x0000000116b629d6: je     0x0000000116b52d7f
  0x0000000116b629dc: cmp    -0x9e87093(%rip),%rax        # 0x000000010ccdb950
  0x0000000116b629e3: jne    0x0000000116b629f5
  0x0000000116b629e9: xor    %edx,%edx
  0x0000000116b629eb: cmp    $0xffffffffffffffff,%rcx
  0x0000000116b629ef: je     0x0000000116b629fa
  0x0000000116b629f5: cqto   
  0x0000000116b629f7: idiv   %rcx
  0x0000000116b629fa: movzbl 0x1(%r13),%ebx
  0x0000000116b629ff: inc    %r13
  0x0000000116b62a02: movabs $0x10ce39680,%r10
  0x0000000116b62a0c: jmpq   *(%r10,%rbx,8)
  0x0000000116b62a10: int3   
  0x0000000116b62a11: int3   
  0x0000000116b62a12: int3   
  0x0000000116b62a13: int3   
  0x0000000116b62a14: int3   
  0x0000000116b62a15: int3   
  0x0000000116b62a16: int3   
  0x0000000116b62a17: int3   
  0x0000000116b62a18: int3   
  0x0000000116b62a19: int3   
  0x0000000116b62a1a: int3   
  0x0000000116b62a1b: int3   
  0x0000000116b62a1c: int3   
  0x0000000116b62a1d: int3   
  0x0000000116b62a1e: int3   
  0x0000000116b62a1f: int3   

----------------------------------------------------------------------
fdiv  110 fdiv  [0x0000000116b62a60, 0x0000000116b62aa0]  64 bytes

  0x0000000116b62a60: vmovss (%rsp),%xmm0
  0x0000000116b62a65: add    $0x8,%rsp
  0x0000000116b62a69: vmovaps %xmm0,%xmm1
  0x0000000116b62a6d: vmovss (%rsp),%xmm0
  0x0000000116b62a72: add    $0x8,%rsp
  0x0000000116b62a76: vdivss %xmm1,%xmm0,%xmm0
  0x0000000116b62a7a: movzbl 0x1(%r13),%ebx
  0x0000000116b62a7f: inc    %r13
  0x0000000116b62a82: movabs $0x10ce39e80,%r10
  0x0000000116b62a8c: jmpq   *(%r10,%rbx,8)
  0x0000000116b62a90: int3   
  0x0000000116b62a91: int3   
  0x0000000116b62a92: int3   
  0x0000000116b62a93: int3   
  0x0000000116b62a94: int3   
  0x0000000116b62a95: int3   
  0x0000000116b62a96: int3   
  0x0000000116b62a97: int3   
  0x0000000116b62a98: int3   
  0x0000000116b62a99: int3   
  0x0000000116b62a9a: int3   
  0x0000000116b62a9b: int3   
  0x0000000116b62a9c: int3   
  0x0000000116b62a9d: int3   
  0x0000000116b62a9e: int3   
  0x0000000116b62a9f: int3   

----------------------------------------------------------------------
ddiv  111 ddiv  [0x0000000116b62ae0, 0x0000000116b62b20]  64 bytes

  0x0000000116b62ae0: vmovsd (%rsp),%xmm0
  0x0000000116b62ae5: add    $0x10,%rsp
  0x0000000116b62ae9: vmovapd %xmm0,%xmm1
  0x0000000116b62aed: vmovsd (%rsp),%xmm0
  0x0000000116b62af2: add    $0x10,%rsp
  0x0000000116b62af6: vdivsd %xmm1,%xmm0,%xmm0
  0x0000000116b62afa: movzbl 0x1(%r13),%ebx
  0x0000000116b62aff: inc    %r13
  0x0000000116b62b02: movabs $0x10ce3a680,%r10
  0x0000000116b62b0c: jmpq   *(%r10,%rbx,8)
  0x0000000116b62b10: int3   
  0x0000000116b62b11: int3   
  0x0000000116b62b12: int3   
  0x0000000116b62b13: int3   
  0x0000000116b62b14: int3   
  0x0000000116b62b15: int3   
  0x0000000116b62b16: int3   
  0x0000000116b62b17: int3   
  0x0000000116b62b18: int3   
  0x0000000116b62b19: int3   
  0x0000000116b62b1a: int3   
  0x0000000116b62b1b: int3   
  0x0000000116b62b1c: int3   
  0x0000000116b62b1d: int3   
  0x0000000116b62b1e: int3   
  0x0000000116b62b1f: int3   

----------------------------------------------------------------------
irem  112 irem  [0x0000000116b62b60, 0x0000000116b62bc0]  96 bytes

  0x0000000116b62b60: mov    (%rsp),%eax
  0x0000000116b62b63: add    $0x8,%rsp
  0x0000000116b62b67: mov    %eax,%ecx
  0x0000000116b62b69: mov    (%rsp),%eax
  0x0000000116b62b6c: add    $0x8,%rsp
  0x0000000116b62b70: cmp    $0x80000000,%eax
  0x0000000116b62b76: jne    0x0000000116b62b87
  0x0000000116b62b7c: xor    %edx,%edx
  0x0000000116b62b7e: cmp    $0xffffffff,%ecx
  0x0000000116b62b81: je     0x0000000116b62b8a
  0x0000000116b62b87: cltd   
  0x0000000116b62b88: idiv   %ecx
  0x0000000116b62b8a: mov    %edx,%eax
  0x0000000116b62b8c: movzbl 0x1(%r13),%ebx
  0x0000000116b62b91: inc    %r13
  0x0000000116b62b94: movabs $0x10ce38e80,%r10
  0x0000000116b62b9e: jmpq   *(%r10,%rbx,8)
  0x0000000116b62ba2: nop
  0x0000000116b62ba3: nop
  0x0000000116b62ba4: nop
  0x0000000116b62ba5: nop
  0x0000000116b62ba6: nop
  0x0000000116b62ba7: nop
  0x0000000116b62ba8: int3   
  0x0000000116b62ba9: int3   
  0x0000000116b62baa: int3   
  0x0000000116b62bab: int3   
  0x0000000116b62bac: int3   
  0x0000000116b62bad: int3   
  0x0000000116b62bae: int3   
  0x0000000116b62baf: int3   
  0x0000000116b62bb0: int3   
  0x0000000116b62bb1: int3   
  0x0000000116b62bb2: int3   
  0x0000000116b62bb3: int3   
  0x0000000116b62bb4: int3   
  0x0000000116b62bb5: int3   
  0x0000000116b62bb6: int3   
  0x0000000116b62bb7: int3   
  0x0000000116b62bb8: int3   
  0x0000000116b62bb9: int3   
  0x0000000116b62bba: int3   
  0x0000000116b62bbb: int3   
  0x0000000116b62bbc: int3   
  0x0000000116b62bbd: int3   
  0x0000000116b62bbe: int3   
  0x0000000116b62bbf: int3   

----------------------------------------------------------------------
lrem  113 lrem  [0x0000000116b62c00, 0x0000000116b62c60]  96 bytes

  0x0000000116b62c00: mov    (%rsp),%rax
  0x0000000116b62c04: add    $0x10,%rsp
  0x0000000116b62c08: mov    %rax,%rcx
  0x0000000116b62c0b: mov    (%rsp),%rax
  0x0000000116b62c0f: add    $0x10,%rsp
  0x0000000116b62c13: test   %rcx,%rcx
  0x0000000116b62c16: je     0x0000000116b52d7f
  0x0000000116b62c1c: cmp    -0x9e872d3(%rip),%rax        # 0x000000010ccdb950
  0x0000000116b62c23: jne    0x0000000116b62c35
  0x0000000116b62c29: xor    %edx,%edx
  0x0000000116b62c2b: cmp    $0xffffffffffffffff,%rcx
  0x0000000116b62c2f: je     0x0000000116b62c3a
  0x0000000116b62c35: cqto   
  0x0000000116b62c37: idiv   %rcx
  0x0000000116b62c3a: mov    %rdx,%rax
  0x0000000116b62c3d: movzbl 0x1(%r13),%ebx
  0x0000000116b62c42: inc    %r13
  0x0000000116b62c45: movabs $0x10ce39680,%r10
  0x0000000116b62c4f: jmpq   *(%r10,%rbx,8)
  0x0000000116b62c53: nop
  0x0000000116b62c54: nop
  0x0000000116b62c55: nop
  0x0000000116b62c56: nop
  0x0000000116b62c57: nop
  0x0000000116b62c58: int3   
  0x0000000116b62c59: int3   
  0x0000000116b62c5a: int3   
  0x0000000116b62c5b: int3   
  0x0000000116b62c5c: int3   
  0x0000000116b62c5d: int3   
  0x0000000116b62c5e: int3   
  0x0000000116b62c5f: int3   

----------------------------------------------------------------------
frem  114 frem  [0x0000000116b62ca0, 0x0000000116b62d80]  224 bytes

  0x0000000116b62ca0: vmovss (%rsp),%xmm0
  0x0000000116b62ca5: add    $0x8,%rsp
  0x0000000116b62ca9: vmovaps %xmm0,%xmm1
  0x0000000116b62cad: vmovss (%rsp),%xmm0
  0x0000000116b62cb2: add    $0x8,%rsp
  0x0000000116b62cb6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b62cbe: je     0x0000000116b62d3b
  0x0000000116b62cc4: mov    %rsp,-0x28(%rsp)
  0x0000000116b62cc9: sub    $0x80,%rsp
  0x0000000116b62cd0: mov    %rax,0x78(%rsp)
  0x0000000116b62cd5: mov    %rcx,0x70(%rsp)
  0x0000000116b62cda: mov    %rdx,0x68(%rsp)
  0x0000000116b62cdf: mov    %rbx,0x60(%rsp)
  0x0000000116b62ce4: mov    %rbp,0x50(%rsp)
  0x0000000116b62ce9: mov    %rsi,0x48(%rsp)
  0x0000000116b62cee: mov    %rdi,0x40(%rsp)
  0x0000000116b62cf3: mov    %r8,0x38(%rsp)
  0x0000000116b62cf8: mov    %r9,0x30(%rsp)
  0x0000000116b62cfd: mov    %r10,0x28(%rsp)
  0x0000000116b62d02: mov    %r11,0x20(%rsp)
  0x0000000116b62d07: mov    %r12,0x18(%rsp)
  0x0000000116b62d0c: mov    %r13,0x10(%rsp)
  0x0000000116b62d11: mov    %r14,0x8(%rsp)
  0x0000000116b62d16: mov    %r15,(%rsp)
  0x0000000116b62d1a: movabs $0x10cc2363b,%rdi
  0x0000000116b62d24: movabs $0x116b62cc4,%rsi
  0x0000000116b62d2e: mov    %rsp,%rdx
  0x0000000116b62d31: and    $0xfffffffffffffff0,%rsp
  0x0000000116b62d35: callq  0x000000010c7dd830
  0x0000000116b62d3a: hlt    
  0x0000000116b62d3b: test   $0xf,%esp
  0x0000000116b62d41: je     0x0000000116b62d59
  0x0000000116b62d47: sub    $0x8,%rsp
  0x0000000116b62d4b: callq  0x000000010c9c5990
  0x0000000116b62d50: add    $0x8,%rsp
  0x0000000116b62d54: jmpq   0x0000000116b62d5e
  0x0000000116b62d59: callq  0x000000010c9c5990
  0x0000000116b62d5e: movzbl 0x1(%r13),%ebx
  0x0000000116b62d63: inc    %r13
  0x0000000116b62d66: movabs $0x10ce39e80,%r10
  0x0000000116b62d70: jmpq   *(%r10,%rbx,8)
  0x0000000116b62d74: nop
  0x0000000116b62d75: nop
  0x0000000116b62d76: nop
  0x0000000116b62d77: nop
  0x0000000116b62d78: int3   
  0x0000000116b62d79: int3   
  0x0000000116b62d7a: int3   
  0x0000000116b62d7b: int3   
  0x0000000116b62d7c: int3   
  0x0000000116b62d7d: int3   
  0x0000000116b62d7e: int3   
  0x0000000116b62d7f: int3   

----------------------------------------------------------------------
drem  115 drem  [0x0000000116b62dc0, 0x0000000116b62ea0]  224 bytes

  0x0000000116b62dc0: vmovsd (%rsp),%xmm0
  0x0000000116b62dc5: add    $0x10,%rsp
  0x0000000116b62dc9: vmovapd %xmm0,%xmm1
  0x0000000116b62dcd: vmovsd (%rsp),%xmm0
  0x0000000116b62dd2: add    $0x10,%rsp
  0x0000000116b62dd6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b62dde: je     0x0000000116b62e5b
  0x0000000116b62de4: mov    %rsp,-0x28(%rsp)
  0x0000000116b62de9: sub    $0x80,%rsp
  0x0000000116b62df0: mov    %rax,0x78(%rsp)
  0x0000000116b62df5: mov    %rcx,0x70(%rsp)
  0x0000000116b62dfa: mov    %rdx,0x68(%rsp)
  0x0000000116b62dff: mov    %rbx,0x60(%rsp)
  0x0000000116b62e04: mov    %rbp,0x50(%rsp)
  0x0000000116b62e09: mov    %rsi,0x48(%rsp)
  0x0000000116b62e0e: mov    %rdi,0x40(%rsp)
  0x0000000116b62e13: mov    %r8,0x38(%rsp)
  0x0000000116b62e18: mov    %r9,0x30(%rsp)
  0x0000000116b62e1d: mov    %r10,0x28(%rsp)
  0x0000000116b62e22: mov    %r11,0x20(%rsp)
  0x0000000116b62e27: mov    %r12,0x18(%rsp)
  0x0000000116b62e2c: mov    %r13,0x10(%rsp)
  0x0000000116b62e31: mov    %r14,0x8(%rsp)
  0x0000000116b62e36: mov    %r15,(%rsp)
  0x0000000116b62e3a: movabs $0x10cc2363b,%rdi
  0x0000000116b62e44: movabs $0x116b62de4,%rsi
  0x0000000116b62e4e: mov    %rsp,%rdx
  0x0000000116b62e51: and    $0xfffffffffffffff0,%rsp
  0x0000000116b62e55: callq  0x000000010c7dd830
  0x0000000116b62e5a: hlt    
  0x0000000116b62e5b: test   $0xf,%esp
  0x0000000116b62e61: je     0x0000000116b62e79
  0x0000000116b62e67: sub    $0x8,%rsp
  0x0000000116b62e6b: callq  0x000000010c9c5ae0
  0x0000000116b62e70: add    $0x8,%rsp
  0x0000000116b62e74: jmpq   0x0000000116b62e7e
  0x0000000116b62e79: callq  0x000000010c9c5ae0
  0x0000000116b62e7e: movzbl 0x1(%r13),%ebx
  0x0000000116b62e83: inc    %r13
  0x0000000116b62e86: movabs $0x10ce3a680,%r10
  0x0000000116b62e90: jmpq   *(%r10,%rbx,8)
  0x0000000116b62e94: nop
  0x0000000116b62e95: nop
  0x0000000116b62e96: nop
  0x0000000116b62e97: nop
  0x0000000116b62e98: int3   
  0x0000000116b62e99: int3   
  0x0000000116b62e9a: int3   
  0x0000000116b62e9b: int3   
  0x0000000116b62e9c: int3   
  0x0000000116b62e9d: int3   
  0x0000000116b62e9e: int3   
  0x0000000116b62e9f: int3   

----------------------------------------------------------------------
ineg  116 ineg  [0x0000000116b62ee0, 0x0000000116b62f00]  32 bytes

  0x0000000116b62ee0: mov    (%rsp),%eax
  0x0000000116b62ee3: add    $0x8,%rsp
  0x0000000116b62ee7: neg    %eax
  0x0000000116b62ee9: movzbl 0x1(%r13),%ebx
  0x0000000116b62eee: inc    %r13
  0x0000000116b62ef1: movabs $0x10ce38e80,%r10
  0x0000000116b62efb: jmpq   *(%r10,%rbx,8)
  0x0000000116b62eff: nop

----------------------------------------------------------------------
lneg  117 lneg  [0x0000000116b62f40, 0x0000000116b62f80]  64 bytes

  0x0000000116b62f40: mov    (%rsp),%rax
  0x0000000116b62f44: add    $0x10,%rsp
  0x0000000116b62f48: neg    %rax
  0x0000000116b62f4b: movzbl 0x1(%r13),%ebx
  0x0000000116b62f50: inc    %r13
  0x0000000116b62f53: movabs $0x10ce39680,%r10
  0x0000000116b62f5d: jmpq   *(%r10,%rbx,8)
  0x0000000116b62f61: nop
  0x0000000116b62f62: nop
  0x0000000116b62f63: nop
  0x0000000116b62f64: nop
  0x0000000116b62f65: nop
  0x0000000116b62f66: nop
  0x0000000116b62f67: nop
  0x0000000116b62f68: int3   
  0x0000000116b62f69: int3   
  0x0000000116b62f6a: int3   
  0x0000000116b62f6b: int3   
  0x0000000116b62f6c: int3   
  0x0000000116b62f6d: int3   
  0x0000000116b62f6e: int3   
  0x0000000116b62f6f: int3   
  0x0000000116b62f70: int3   
  0x0000000116b62f71: int3   
  0x0000000116b62f72: int3   
  0x0000000116b62f73: int3   
  0x0000000116b62f74: int3   
  0x0000000116b62f75: int3   
  0x0000000116b62f76: int3   
  0x0000000116b62f77: int3   
  0x0000000116b62f78: int3   
  0x0000000116b62f79: int3   
  0x0000000116b62f7a: int3   
  0x0000000116b62f7b: int3   
  0x0000000116b62f7c: int3   
  0x0000000116b62f7d: int3   
  0x0000000116b62f7e: int3   
  0x0000000116b62f7f: int3   

----------------------------------------------------------------------
fneg  118 fneg  [0x0000000116b62fc0, 0x0000000116b63000]  64 bytes

  0x0000000116b62fc0: vmovss (%rsp),%xmm0
  0x0000000116b62fc5: add    $0x8,%rsp
  0x0000000116b62fc9: vxorps -0x9d025b1(%rip),%xmm0,%xmm0        # 0x000000010ce60a20
  0x0000000116b62fd1: movzbl 0x1(%r13),%ebx
  0x0000000116b62fd6: inc    %r13
  0x0000000116b62fd9: movabs $0x10ce39e80,%r10
  0x0000000116b62fe3: jmpq   *(%r10,%rbx,8)
  0x0000000116b62fe7: nop
  0x0000000116b62fe8: int3   
  0x0000000116b62fe9: int3   
  0x0000000116b62fea: int3   
  0x0000000116b62feb: int3   
  0x0000000116b62fec: int3   
  0x0000000116b62fed: int3   
  0x0000000116b62fee: int3   
  0x0000000116b62fef: int3   
  0x0000000116b62ff0: int3   
  0x0000000116b62ff1: int3   
  0x0000000116b62ff2: int3   
  0x0000000116b62ff3: int3   
  0x0000000116b62ff4: int3   
  0x0000000116b62ff5: int3   
  0x0000000116b62ff6: int3   
  0x0000000116b62ff7: int3   
  0x0000000116b62ff8: int3   
  0x0000000116b62ff9: int3   
  0x0000000116b62ffa: int3   
  0x0000000116b62ffb: int3   
  0x0000000116b62ffc: int3   
  0x0000000116b62ffd: int3   
  0x0000000116b62ffe: int3   
  0x0000000116b62fff: int3   

----------------------------------------------------------------------
dneg  119 dneg  [0x0000000116b63040, 0x0000000116b63080]  64 bytes

  0x0000000116b63040: vmovsd (%rsp),%xmm0
  0x0000000116b63045: add    $0x10,%rsp
  0x0000000116b63049: vxorpd -0x9d02601(%rip),%xmm0,%xmm0        # 0x000000010ce60a50
  0x0000000116b63051: movzbl 0x1(%r13),%ebx
  0x0000000116b63056: inc    %r13
  0x0000000116b63059: movabs $0x10ce3a680,%r10
  0x0000000116b63063: jmpq   *(%r10,%rbx,8)
  0x0000000116b63067: nop
  0x0000000116b63068: int3   
  0x0000000116b63069: int3   
  0x0000000116b6306a: int3   
  0x0000000116b6306b: int3   
  0x0000000116b6306c: int3   
  0x0000000116b6306d: int3   
  0x0000000116b6306e: int3   
  0x0000000116b6306f: int3   
  0x0000000116b63070: int3   
  0x0000000116b63071: int3   
  0x0000000116b63072: int3   
  0x0000000116b63073: int3   
  0x0000000116b63074: int3   
  0x0000000116b63075: int3   
  0x0000000116b63076: int3   
  0x0000000116b63077: int3   
  0x0000000116b63078: int3   
  0x0000000116b63079: int3   
  0x0000000116b6307a: int3   
  0x0000000116b6307b: int3   
  0x0000000116b6307c: int3   
  0x0000000116b6307d: int3   
  0x0000000116b6307e: int3   
  0x0000000116b6307f: int3   

----------------------------------------------------------------------
ishl  120 ishl  [0x0000000116b630c0, 0x0000000116b63100]  64 bytes

  0x0000000116b630c0: mov    (%rsp),%eax
  0x0000000116b630c3: add    $0x8,%rsp
  0x0000000116b630c7: mov    %eax,%ecx
  0x0000000116b630c9: mov    (%rsp),%eax
  0x0000000116b630cc: add    $0x8,%rsp
  0x0000000116b630d0: shl    %cl,%eax
  0x0000000116b630d2: movzbl 0x1(%r13),%ebx
  0x0000000116b630d7: inc    %r13
  0x0000000116b630da: movabs $0x10ce38e80,%r10
  0x0000000116b630e4: jmpq   *(%r10,%rbx,8)
  0x0000000116b630e8: int3   
  0x0000000116b630e9: int3   
  0x0000000116b630ea: int3   
  0x0000000116b630eb: int3   
  0x0000000116b630ec: int3   
  0x0000000116b630ed: int3   
  0x0000000116b630ee: int3   
  0x0000000116b630ef: int3   
  0x0000000116b630f0: int3   
  0x0000000116b630f1: int3   
  0x0000000116b630f2: int3   
  0x0000000116b630f3: int3   
  0x0000000116b630f4: int3   
  0x0000000116b630f5: int3   
  0x0000000116b630f6: int3   
  0x0000000116b630f7: int3   
  0x0000000116b630f8: int3   
  0x0000000116b630f9: int3   
  0x0000000116b630fa: int3   
  0x0000000116b630fb: int3   
  0x0000000116b630fc: int3   
  0x0000000116b630fd: int3   
  0x0000000116b630fe: int3   
  0x0000000116b630ff: int3   

----------------------------------------------------------------------
lshl  121 lshl  [0x0000000116b63140, 0x0000000116b63180]  64 bytes

  0x0000000116b63140: mov    (%rsp),%eax
  0x0000000116b63143: add    $0x8,%rsp
  0x0000000116b63147: mov    %eax,%ecx
  0x0000000116b63149: mov    (%rsp),%rax
  0x0000000116b6314d: add    $0x10,%rsp
  0x0000000116b63151: shl    %cl,%rax
  0x0000000116b63154: movzbl 0x1(%r13),%ebx
  0x0000000116b63159: inc    %r13
  0x0000000116b6315c: movabs $0x10ce39680,%r10
  0x0000000116b63166: jmpq   *(%r10,%rbx,8)
  0x0000000116b6316a: nop
  0x0000000116b6316b: nop
  0x0000000116b6316c: nop
  0x0000000116b6316d: nop
  0x0000000116b6316e: nop
  0x0000000116b6316f: nop
  0x0000000116b63170: int3   
  0x0000000116b63171: int3   
  0x0000000116b63172: int3   
  0x0000000116b63173: int3   
  0x0000000116b63174: int3   
  0x0000000116b63175: int3   
  0x0000000116b63176: int3   
  0x0000000116b63177: int3   
  0x0000000116b63178: int3   
  0x0000000116b63179: int3   
  0x0000000116b6317a: int3   
  0x0000000116b6317b: int3   
  0x0000000116b6317c: int3   
  0x0000000116b6317d: int3   
  0x0000000116b6317e: int3   
  0x0000000116b6317f: int3   

----------------------------------------------------------------------
ishr  122 ishr  [0x0000000116b631c0, 0x0000000116b63200]  64 bytes

  0x0000000116b631c0: mov    (%rsp),%eax
  0x0000000116b631c3: add    $0x8,%rsp
  0x0000000116b631c7: mov    %eax,%ecx
  0x0000000116b631c9: mov    (%rsp),%eax
  0x0000000116b631cc: add    $0x8,%rsp
  0x0000000116b631d0: sar    %cl,%eax
  0x0000000116b631d2: movzbl 0x1(%r13),%ebx
  0x0000000116b631d7: inc    %r13
  0x0000000116b631da: movabs $0x10ce38e80,%r10
  0x0000000116b631e4: jmpq   *(%r10,%rbx,8)
  0x0000000116b631e8: int3   
  0x0000000116b631e9: int3   
  0x0000000116b631ea: int3   
  0x0000000116b631eb: int3   
  0x0000000116b631ec: int3   
  0x0000000116b631ed: int3   
  0x0000000116b631ee: int3   
  0x0000000116b631ef: int3   
  0x0000000116b631f0: int3   
  0x0000000116b631f1: int3   
  0x0000000116b631f2: int3   
  0x0000000116b631f3: int3   
  0x0000000116b631f4: int3   
  0x0000000116b631f5: int3   
  0x0000000116b631f6: int3   
  0x0000000116b631f7: int3   
  0x0000000116b631f8: int3   
  0x0000000116b631f9: int3   
  0x0000000116b631fa: int3   
  0x0000000116b631fb: int3   
  0x0000000116b631fc: int3   
  0x0000000116b631fd: int3   
  0x0000000116b631fe: int3   
  0x0000000116b631ff: int3   

----------------------------------------------------------------------
lshr  123 lshr  [0x0000000116b63240, 0x0000000116b63280]  64 bytes

  0x0000000116b63240: mov    (%rsp),%eax
  0x0000000116b63243: add    $0x8,%rsp
  0x0000000116b63247: mov    %eax,%ecx
  0x0000000116b63249: mov    (%rsp),%rax
  0x0000000116b6324d: add    $0x10,%rsp
  0x0000000116b63251: sar    %cl,%rax
  0x0000000116b63254: movzbl 0x1(%r13),%ebx
  0x0000000116b63259: inc    %r13
  0x0000000116b6325c: movabs $0x10ce39680,%r10
  0x0000000116b63266: jmpq   *(%r10,%rbx,8)
  0x0000000116b6326a: nop
  0x0000000116b6326b: nop
  0x0000000116b6326c: nop
  0x0000000116b6326d: nop
  0x0000000116b6326e: nop
  0x0000000116b6326f: nop
  0x0000000116b63270: int3   
  0x0000000116b63271: int3   
  0x0000000116b63272: int3   
  0x0000000116b63273: int3   
  0x0000000116b63274: int3   
  0x0000000116b63275: int3   
  0x0000000116b63276: int3   
  0x0000000116b63277: int3   
  0x0000000116b63278: int3   
  0x0000000116b63279: int3   
  0x0000000116b6327a: int3   
  0x0000000116b6327b: int3   
  0x0000000116b6327c: int3   
  0x0000000116b6327d: int3   
  0x0000000116b6327e: int3   
  0x0000000116b6327f: int3   

----------------------------------------------------------------------
iushr  124 iushr  [0x0000000116b632c0, 0x0000000116b63300]  64 bytes

  0x0000000116b632c0: mov    (%rsp),%eax
  0x0000000116b632c3: add    $0x8,%rsp
  0x0000000116b632c7: mov    %eax,%ecx
  0x0000000116b632c9: mov    (%rsp),%eax
  0x0000000116b632cc: add    $0x8,%rsp
  0x0000000116b632d0: shr    %cl,%eax
  0x0000000116b632d2: movzbl 0x1(%r13),%ebx
  0x0000000116b632d7: inc    %r13
  0x0000000116b632da: movabs $0x10ce38e80,%r10
  0x0000000116b632e4: jmpq   *(%r10,%rbx,8)
  0x0000000116b632e8: int3   
  0x0000000116b632e9: int3   
  0x0000000116b632ea: int3   
  0x0000000116b632eb: int3   
  0x0000000116b632ec: int3   
  0x0000000116b632ed: int3   
  0x0000000116b632ee: int3   
  0x0000000116b632ef: int3   
  0x0000000116b632f0: int3   
  0x0000000116b632f1: int3   
  0x0000000116b632f2: int3   
  0x0000000116b632f3: int3   
  0x0000000116b632f4: int3   
  0x0000000116b632f5: int3   
  0x0000000116b632f6: int3   
  0x0000000116b632f7: int3   
  0x0000000116b632f8: int3   
  0x0000000116b632f9: int3   
  0x0000000116b632fa: int3   
  0x0000000116b632fb: int3   
  0x0000000116b632fc: int3   
  0x0000000116b632fd: int3   
  0x0000000116b632fe: int3   
  0x0000000116b632ff: int3   

----------------------------------------------------------------------
lushr  125 lushr  [0x0000000116b63340, 0x0000000116b63380]  64 bytes

  0x0000000116b63340: mov    (%rsp),%eax
  0x0000000116b63343: add    $0x8,%rsp
  0x0000000116b63347: mov    %eax,%ecx
  0x0000000116b63349: mov    (%rsp),%rax
  0x0000000116b6334d: add    $0x10,%rsp
  0x0000000116b63351: shr    %cl,%rax
  0x0000000116b63354: movzbl 0x1(%r13),%ebx
  0x0000000116b63359: inc    %r13
  0x0000000116b6335c: movabs $0x10ce39680,%r10
  0x0000000116b63366: jmpq   *(%r10,%rbx,8)
  0x0000000116b6336a: nop
  0x0000000116b6336b: nop
  0x0000000116b6336c: nop
  0x0000000116b6336d: nop
  0x0000000116b6336e: nop
  0x0000000116b6336f: nop
  0x0000000116b63370: int3   
  0x0000000116b63371: int3   
  0x0000000116b63372: int3   
  0x0000000116b63373: int3   
  0x0000000116b63374: int3   
  0x0000000116b63375: int3   
  0x0000000116b63376: int3   
  0x0000000116b63377: int3   
  0x0000000116b63378: int3   
  0x0000000116b63379: int3   
  0x0000000116b6337a: int3   
  0x0000000116b6337b: int3   
  0x0000000116b6337c: int3   
  0x0000000116b6337d: int3   
  0x0000000116b6337e: int3   
  0x0000000116b6337f: int3   

----------------------------------------------------------------------
iand  126 iand  [0x0000000116b633c0, 0x0000000116b63400]  64 bytes

  0x0000000116b633c0: mov    (%rsp),%eax
  0x0000000116b633c3: add    $0x8,%rsp
  0x0000000116b633c7: mov    (%rsp),%edx
  0x0000000116b633ca: add    $0x8,%rsp
  0x0000000116b633ce: and    %edx,%eax
  0x0000000116b633d0: movzbl 0x1(%r13),%ebx
  0x0000000116b633d5: inc    %r13
  0x0000000116b633d8: movabs $0x10ce38e80,%r10
  0x0000000116b633e2: jmpq   *(%r10,%rbx,8)
  0x0000000116b633e6: nop
  0x0000000116b633e7: nop
  0x0000000116b633e8: int3   
  0x0000000116b633e9: int3   
  0x0000000116b633ea: int3   
  0x0000000116b633eb: int3   
  0x0000000116b633ec: int3   
  0x0000000116b633ed: int3   
  0x0000000116b633ee: int3   
  0x0000000116b633ef: int3   
  0x0000000116b633f0: int3   
  0x0000000116b633f1: int3   
  0x0000000116b633f2: int3   
  0x0000000116b633f3: int3   
  0x0000000116b633f4: int3   
  0x0000000116b633f5: int3   
  0x0000000116b633f6: int3   
  0x0000000116b633f7: int3   
  0x0000000116b633f8: int3   
  0x0000000116b633f9: int3   
  0x0000000116b633fa: int3   
  0x0000000116b633fb: int3   
  0x0000000116b633fc: int3   
  0x0000000116b633fd: int3   
  0x0000000116b633fe: int3   
  0x0000000116b633ff: int3   

----------------------------------------------------------------------
land  127 land  [0x0000000116b63440, 0x0000000116b63480]  64 bytes

  0x0000000116b63440: mov    (%rsp),%rax
  0x0000000116b63444: add    $0x10,%rsp
  0x0000000116b63448: mov    (%rsp),%rdx
  0x0000000116b6344c: add    $0x10,%rsp
  0x0000000116b63450: and    %rdx,%rax
  0x0000000116b63453: movzbl 0x1(%r13),%ebx
  0x0000000116b63458: inc    %r13
  0x0000000116b6345b: movabs $0x10ce39680,%r10
  0x0000000116b63465: jmpq   *(%r10,%rbx,8)
  0x0000000116b63469: nop
  0x0000000116b6346a: nop
  0x0000000116b6346b: nop
  0x0000000116b6346c: nop
  0x0000000116b6346d: nop
  0x0000000116b6346e: nop
  0x0000000116b6346f: nop
  0x0000000116b63470: int3   
  0x0000000116b63471: int3   
  0x0000000116b63472: int3   
  0x0000000116b63473: int3   
  0x0000000116b63474: int3   
  0x0000000116b63475: int3   
  0x0000000116b63476: int3   
  0x0000000116b63477: int3   
  0x0000000116b63478: int3   
  0x0000000116b63479: int3   
  0x0000000116b6347a: int3   
  0x0000000116b6347b: int3   
  0x0000000116b6347c: int3   
  0x0000000116b6347d: int3   
  0x0000000116b6347e: int3   
  0x0000000116b6347f: int3   

----------------------------------------------------------------------
ior  128 ior  [0x0000000116b634c0, 0x0000000116b63500]  64 bytes

  0x0000000116b634c0: mov    (%rsp),%eax
  0x0000000116b634c3: add    $0x8,%rsp
  0x0000000116b634c7: mov    (%rsp),%edx
  0x0000000116b634ca: add    $0x8,%rsp
  0x0000000116b634ce: or     %edx,%eax
  0x0000000116b634d0: movzbl 0x1(%r13),%ebx
  0x0000000116b634d5: inc    %r13
  0x0000000116b634d8: movabs $0x10ce38e80,%r10
  0x0000000116b634e2: jmpq   *(%r10,%rbx,8)
  0x0000000116b634e6: nop
  0x0000000116b634e7: nop
  0x0000000116b634e8: int3   
  0x0000000116b634e9: int3   
  0x0000000116b634ea: int3   
  0x0000000116b634eb: int3   
  0x0000000116b634ec: int3   
  0x0000000116b634ed: int3   
  0x0000000116b634ee: int3   
  0x0000000116b634ef: int3   
  0x0000000116b634f0: int3   
  0x0000000116b634f1: int3   
  0x0000000116b634f2: int3   
  0x0000000116b634f3: int3   
  0x0000000116b634f4: int3   
  0x0000000116b634f5: int3   
  0x0000000116b634f6: int3   
  0x0000000116b634f7: int3   
  0x0000000116b634f8: int3   
  0x0000000116b634f9: int3   
  0x0000000116b634fa: int3   
  0x0000000116b634fb: int3   
  0x0000000116b634fc: int3   
  0x0000000116b634fd: int3   
  0x0000000116b634fe: int3   
  0x0000000116b634ff: int3   

----------------------------------------------------------------------
lor  129 lor  [0x0000000116b63540, 0x0000000116b63580]  64 bytes

  0x0000000116b63540: mov    (%rsp),%rax
  0x0000000116b63544: add    $0x10,%rsp
  0x0000000116b63548: mov    (%rsp),%rdx
  0x0000000116b6354c: add    $0x10,%rsp
  0x0000000116b63550: or     %rdx,%rax
  0x0000000116b63553: movzbl 0x1(%r13),%ebx
  0x0000000116b63558: inc    %r13
  0x0000000116b6355b: movabs $0x10ce39680,%r10
  0x0000000116b63565: jmpq   *(%r10,%rbx,8)
  0x0000000116b63569: nop
  0x0000000116b6356a: nop
  0x0000000116b6356b: nop
  0x0000000116b6356c: nop
  0x0000000116b6356d: nop
  0x0000000116b6356e: nop
  0x0000000116b6356f: nop
  0x0000000116b63570: int3   
  0x0000000116b63571: int3   
  0x0000000116b63572: int3   
  0x0000000116b63573: int3   
  0x0000000116b63574: int3   
  0x0000000116b63575: int3   
  0x0000000116b63576: int3   
  0x0000000116b63577: int3   
  0x0000000116b63578: int3   
  0x0000000116b63579: int3   
  0x0000000116b6357a: int3   
  0x0000000116b6357b: int3   
  0x0000000116b6357c: int3   
  0x0000000116b6357d: int3   
  0x0000000116b6357e: int3   
  0x0000000116b6357f: int3   

----------------------------------------------------------------------
ixor  130 ixor  [0x0000000116b635c0, 0x0000000116b63600]  64 bytes

  0x0000000116b635c0: mov    (%rsp),%eax
  0x0000000116b635c3: add    $0x8,%rsp
  0x0000000116b635c7: mov    (%rsp),%edx
  0x0000000116b635ca: add    $0x8,%rsp
  0x0000000116b635ce: xor    %edx,%eax
  0x0000000116b635d0: movzbl 0x1(%r13),%ebx
  0x0000000116b635d5: inc    %r13
  0x0000000116b635d8: movabs $0x10ce38e80,%r10
  0x0000000116b635e2: jmpq   *(%r10,%rbx,8)
  0x0000000116b635e6: nop
  0x0000000116b635e7: nop
  0x0000000116b635e8: int3   
  0x0000000116b635e9: int3   
  0x0000000116b635ea: int3   
  0x0000000116b635eb: int3   
  0x0000000116b635ec: int3   
  0x0000000116b635ed: int3   
  0x0000000116b635ee: int3   
  0x0000000116b635ef: int3   
  0x0000000116b635f0: int3   
  0x0000000116b635f1: int3   
  0x0000000116b635f2: int3   
  0x0000000116b635f3: int3   
  0x0000000116b635f4: int3   
  0x0000000116b635f5: int3   
  0x0000000116b635f6: int3   
  0x0000000116b635f7: int3   
  0x0000000116b635f8: int3   
  0x0000000116b635f9: int3   
  0x0000000116b635fa: int3   
  0x0000000116b635fb: int3   
  0x0000000116b635fc: int3   
  0x0000000116b635fd: int3   
  0x0000000116b635fe: int3   
  0x0000000116b635ff: int3   

----------------------------------------------------------------------
lxor  131 lxor  [0x0000000116b63640, 0x0000000116b63680]  64 bytes

  0x0000000116b63640: mov    (%rsp),%rax
  0x0000000116b63644: add    $0x10,%rsp
  0x0000000116b63648: mov    (%rsp),%rdx
  0x0000000116b6364c: add    $0x10,%rsp
  0x0000000116b63650: xor    %rdx,%rax
  0x0000000116b63653: movzbl 0x1(%r13),%ebx
  0x0000000116b63658: inc    %r13
  0x0000000116b6365b: movabs $0x10ce39680,%r10
  0x0000000116b63665: jmpq   *(%r10,%rbx,8)
  0x0000000116b63669: nop
  0x0000000116b6366a: nop
  0x0000000116b6366b: nop
  0x0000000116b6366c: nop
  0x0000000116b6366d: nop
  0x0000000116b6366e: nop
  0x0000000116b6366f: nop
  0x0000000116b63670: int3   
  0x0000000116b63671: int3   
  0x0000000116b63672: int3   
  0x0000000116b63673: int3   
  0x0000000116b63674: int3   
  0x0000000116b63675: int3   
  0x0000000116b63676: int3   
  0x0000000116b63677: int3   
  0x0000000116b63678: int3   
  0x0000000116b63679: int3   
  0x0000000116b6367a: int3   
  0x0000000116b6367b: int3   
  0x0000000116b6367c: int3   
  0x0000000116b6367d: int3   
  0x0000000116b6367e: int3   
  0x0000000116b6367f: int3   

----------------------------------------------------------------------
iinc  132 iinc  [0x0000000116b636c0, 0x0000000116b63760]  160 bytes

  0x0000000116b636c0: push   %rax
  0x0000000116b636c1: jmpq   0x0000000116b636f0
  0x0000000116b636c6: sub    $0x8,%rsp
  0x0000000116b636ca: vmovss %xmm0,(%rsp)
  0x0000000116b636cf: jmpq   0x0000000116b636f0
  0x0000000116b636d4: sub    $0x10,%rsp
  0x0000000116b636d8: vmovsd %xmm0,(%rsp)
  0x0000000116b636dd: jmpq   0x0000000116b636f0
  0x0000000116b636e2: sub    $0x10,%rsp
  0x0000000116b636e6: mov    %rax,(%rsp)
  0x0000000116b636ea: jmpq   0x0000000116b636f0
  0x0000000116b636ef: push   %rax
  0x0000000116b636f0: movsbl 0x2(%r13),%edx
  0x0000000116b636f5: movzbl 0x1(%r13),%ebx
  0x0000000116b636fa: neg    %rbx
  0x0000000116b636fd: add    %edx,(%r14,%rbx,8)
  0x0000000116b63701: movzbl 0x3(%r13),%ebx
  0x0000000116b63706: add    $0x3,%r13
  0x0000000116b6370a: movabs $0x10ce3b680,%r10
  0x0000000116b63714: jmpq   *(%r10,%rbx,8)
  0x0000000116b63718: mov    0x4(%r13),%edx
  0x0000000116b6371c: movzwl 0x2(%r13),%ebx
  0x0000000116b63721: bswap  %ebx
  0x0000000116b63723: shr    $0x10,%ebx
  0x0000000116b63726: neg    %rbx
  0x0000000116b63729: bswap  %edx
  0x0000000116b6372b: sar    $0x10,%edx
  0x0000000116b6372e: add    %edx,(%r14,%rbx,8)
  0x0000000116b63732: movzbl 0x6(%r13),%ebx
  0x0000000116b63737: add    $0x6,%r13
  0x0000000116b6373b: movabs $0x10ce3b680,%r10
  0x0000000116b63745: jmpq   *(%r10,%rbx,8)
  0x0000000116b63749: nop
  0x0000000116b6374a: nop
  0x0000000116b6374b: nop
  0x0000000116b6374c: nop
  0x0000000116b6374d: nop
  0x0000000116b6374e: nop
  0x0000000116b6374f: nop
  0x0000000116b63750: int3   
  0x0000000116b63751: int3   
  0x0000000116b63752: int3   
  0x0000000116b63753: int3   
  0x0000000116b63754: int3   
  0x0000000116b63755: int3   
  0x0000000116b63756: int3   
  0x0000000116b63757: int3   
  0x0000000116b63758: int3   
  0x0000000116b63759: int3   
  0x0000000116b6375a: int3   
  0x0000000116b6375b: int3   
  0x0000000116b6375c: int3   
  0x0000000116b6375d: int3   
  0x0000000116b6375e: int3   
  0x0000000116b6375f: int3   

----------------------------------------------------------------------
i2l  133 i2l  [0x0000000116b637a0, 0x0000000116b637c0]  32 bytes

  0x0000000116b637a0: mov    (%rsp),%eax
  0x0000000116b637a3: add    $0x8,%rsp
  0x0000000116b637a7: movslq %eax,%rax
  0x0000000116b637aa: movzbl 0x1(%r13),%ebx
  0x0000000116b637af: inc    %r13
  0x0000000116b637b2: movabs $0x10ce39680,%r10
  0x0000000116b637bc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2f  134 i2f  [0x0000000116b63800, 0x0000000116b63840]  64 bytes

  0x0000000116b63800: mov    (%rsp),%eax
  0x0000000116b63803: add    $0x8,%rsp
  0x0000000116b63807: vcvtsi2ss %eax,%xmm0,%xmm0
  0x0000000116b6380b: movzbl 0x1(%r13),%ebx
  0x0000000116b63810: inc    %r13
  0x0000000116b63813: movabs $0x10ce39e80,%r10
  0x0000000116b6381d: jmpq   *(%r10,%rbx,8)
  0x0000000116b63821: nop
  0x0000000116b63822: nop
  0x0000000116b63823: nop
  0x0000000116b63824: nop
  0x0000000116b63825: nop
  0x0000000116b63826: nop
  0x0000000116b63827: nop
  0x0000000116b63828: int3   
  0x0000000116b63829: int3   
  0x0000000116b6382a: int3   
  0x0000000116b6382b: int3   
  0x0000000116b6382c: int3   
  0x0000000116b6382d: int3   
  0x0000000116b6382e: int3   
  0x0000000116b6382f: int3   
  0x0000000116b63830: int3   
  0x0000000116b63831: int3   
  0x0000000116b63832: int3   
  0x0000000116b63833: int3   
  0x0000000116b63834: int3   
  0x0000000116b63835: int3   
  0x0000000116b63836: int3   
  0x0000000116b63837: int3   
  0x0000000116b63838: int3   
  0x0000000116b63839: int3   
  0x0000000116b6383a: int3   
  0x0000000116b6383b: int3   
  0x0000000116b6383c: int3   
  0x0000000116b6383d: int3   
  0x0000000116b6383e: int3   
  0x0000000116b6383f: int3   

----------------------------------------------------------------------
i2d  135 i2d  [0x0000000116b63880, 0x0000000116b638c0]  64 bytes

  0x0000000116b63880: mov    (%rsp),%eax
  0x0000000116b63883: add    $0x8,%rsp
  0x0000000116b63887: vcvtsi2sd %eax,%xmm0,%xmm0
  0x0000000116b6388b: movzbl 0x1(%r13),%ebx
  0x0000000116b63890: inc    %r13
  0x0000000116b63893: movabs $0x10ce3a680,%r10
  0x0000000116b6389d: jmpq   *(%r10,%rbx,8)
  0x0000000116b638a1: nop
  0x0000000116b638a2: nop
  0x0000000116b638a3: nop
  0x0000000116b638a4: nop
  0x0000000116b638a5: nop
  0x0000000116b638a6: nop
  0x0000000116b638a7: nop
  0x0000000116b638a8: int3   
  0x0000000116b638a9: int3   
  0x0000000116b638aa: int3   
  0x0000000116b638ab: int3   
  0x0000000116b638ac: int3   
  0x0000000116b638ad: int3   
  0x0000000116b638ae: int3   
  0x0000000116b638af: int3   
  0x0000000116b638b0: int3   
  0x0000000116b638b1: int3   
  0x0000000116b638b2: int3   
  0x0000000116b638b3: int3   
  0x0000000116b638b4: int3   
  0x0000000116b638b5: int3   
  0x0000000116b638b6: int3   
  0x0000000116b638b7: int3   
  0x0000000116b638b8: int3   
  0x0000000116b638b9: int3   
  0x0000000116b638ba: int3   
  0x0000000116b638bb: int3   
  0x0000000116b638bc: int3   
  0x0000000116b638bd: int3   
  0x0000000116b638be: int3   
  0x0000000116b638bf: int3   

----------------------------------------------------------------------
l2i  136 l2i  [0x0000000116b63900, 0x0000000116b63920]  32 bytes

  0x0000000116b63900: mov    (%rsp),%rax
  0x0000000116b63904: add    $0x10,%rsp
  0x0000000116b63908: mov    %eax,%eax
  0x0000000116b6390a: movzbl 0x1(%r13),%ebx
  0x0000000116b6390f: inc    %r13
  0x0000000116b63912: movabs $0x10ce38e80,%r10
  0x0000000116b6391c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
l2f  137 l2f  [0x0000000116b63960, 0x0000000116b639a0]  64 bytes

  0x0000000116b63960: mov    (%rsp),%rax
  0x0000000116b63964: add    $0x10,%rsp
  0x0000000116b63968: vcvtsi2ss %rax,%xmm0,%xmm0
  0x0000000116b6396d: movzbl 0x1(%r13),%ebx
  0x0000000116b63972: inc    %r13
  0x0000000116b63975: movabs $0x10ce39e80,%r10
  0x0000000116b6397f: jmpq   *(%r10,%rbx,8)
  0x0000000116b63983: nop
  0x0000000116b63984: nop
  0x0000000116b63985: nop
  0x0000000116b63986: nop
  0x0000000116b63987: nop
  0x0000000116b63988: int3   
  0x0000000116b63989: int3   
  0x0000000116b6398a: int3   
  0x0000000116b6398b: int3   
  0x0000000116b6398c: int3   
  0x0000000116b6398d: int3   
  0x0000000116b6398e: int3   
  0x0000000116b6398f: int3   
  0x0000000116b63990: int3   
  0x0000000116b63991: int3   
  0x0000000116b63992: int3   
  0x0000000116b63993: int3   
  0x0000000116b63994: int3   
  0x0000000116b63995: int3   
  0x0000000116b63996: int3   
  0x0000000116b63997: int3   
  0x0000000116b63998: int3   
  0x0000000116b63999: int3   
  0x0000000116b6399a: int3   
  0x0000000116b6399b: int3   
  0x0000000116b6399c: int3   
  0x0000000116b6399d: int3   
  0x0000000116b6399e: int3   
  0x0000000116b6399f: int3   

----------------------------------------------------------------------
l2d  138 l2d  [0x0000000116b639e0, 0x0000000116b63a20]  64 bytes

  0x0000000116b639e0: mov    (%rsp),%rax
  0x0000000116b639e4: add    $0x10,%rsp
  0x0000000116b639e8: vcvtsi2sd %rax,%xmm0,%xmm0
  0x0000000116b639ed: movzbl 0x1(%r13),%ebx
  0x0000000116b639f2: inc    %r13
  0x0000000116b639f5: movabs $0x10ce3a680,%r10
  0x0000000116b639ff: jmpq   *(%r10,%rbx,8)
  0x0000000116b63a03: nop
  0x0000000116b63a04: nop
  0x0000000116b63a05: nop
  0x0000000116b63a06: nop
  0x0000000116b63a07: nop
  0x0000000116b63a08: int3   
  0x0000000116b63a09: int3   
  0x0000000116b63a0a: int3   
  0x0000000116b63a0b: int3   
  0x0000000116b63a0c: int3   
  0x0000000116b63a0d: int3   
  0x0000000116b63a0e: int3   
  0x0000000116b63a0f: int3   
  0x0000000116b63a10: int3   
  0x0000000116b63a11: int3   
  0x0000000116b63a12: int3   
  0x0000000116b63a13: int3   
  0x0000000116b63a14: int3   
  0x0000000116b63a15: int3   
  0x0000000116b63a16: int3   
  0x0000000116b63a17: int3   
  0x0000000116b63a18: int3   
  0x0000000116b63a19: int3   
  0x0000000116b63a1a: int3   
  0x0000000116b63a1b: int3   
  0x0000000116b63a1c: int3   
  0x0000000116b63a1d: int3   
  0x0000000116b63a1e: int3   
  0x0000000116b63a1f: int3   

----------------------------------------------------------------------
f2i  139 f2i  [0x0000000116b63a60, 0x0000000116b63b40]  224 bytes

  0x0000000116b63a60: vmovss (%rsp),%xmm0
  0x0000000116b63a65: add    $0x8,%rsp
  0x0000000116b63a69: vcvttss2si %xmm0,%eax
  0x0000000116b63a6d: cmp    $0x80000000,%eax
  0x0000000116b63a73: jne    0x0000000116b63b21
  0x0000000116b63a79: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b63a81: je     0x0000000116b63afe
  0x0000000116b63a87: mov    %rsp,-0x28(%rsp)
  0x0000000116b63a8c: sub    $0x80,%rsp
  0x0000000116b63a93: mov    %rax,0x78(%rsp)
  0x0000000116b63a98: mov    %rcx,0x70(%rsp)
  0x0000000116b63a9d: mov    %rdx,0x68(%rsp)
  0x0000000116b63aa2: mov    %rbx,0x60(%rsp)
  0x0000000116b63aa7: mov    %rbp,0x50(%rsp)
  0x0000000116b63aac: mov    %rsi,0x48(%rsp)
  0x0000000116b63ab1: mov    %rdi,0x40(%rsp)
  0x0000000116b63ab6: mov    %r8,0x38(%rsp)
  0x0000000116b63abb: mov    %r9,0x30(%rsp)
  0x0000000116b63ac0: mov    %r10,0x28(%rsp)
  0x0000000116b63ac5: mov    %r11,0x20(%rsp)
  0x0000000116b63aca: mov    %r12,0x18(%rsp)
  0x0000000116b63acf: mov    %r13,0x10(%rsp)
  0x0000000116b63ad4: mov    %r14,0x8(%rsp)
  0x0000000116b63ad9: mov    %r15,(%rsp)
  0x0000000116b63add: movabs $0x10cc2363b,%rdi
  0x0000000116b63ae7: movabs $0x116b63a87,%rsi
  0x0000000116b63af1: mov    %rsp,%rdx
  0x0000000116b63af4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b63af8: callq  0x000000010c7dd830
  0x0000000116b63afd: hlt    
  0x0000000116b63afe: test   $0xf,%esp
  0x0000000116b63b04: je     0x0000000116b63b1c
  0x0000000116b63b0a: sub    $0x8,%rsp
  0x0000000116b63b0e: callq  0x000000010c9c5c20
  0x0000000116b63b13: add    $0x8,%rsp
  0x0000000116b63b17: jmpq   0x0000000116b63b21
  0x0000000116b63b1c: callq  0x000000010c9c5c20
  0x0000000116b63b21: movzbl 0x1(%r13),%ebx
  0x0000000116b63b26: inc    %r13
  0x0000000116b63b29: movabs $0x10ce38e80,%r10
  0x0000000116b63b33: jmpq   *(%r10,%rbx,8)
  0x0000000116b63b37: nop
  0x0000000116b63b38: int3   
  0x0000000116b63b39: int3   
  0x0000000116b63b3a: int3   
  0x0000000116b63b3b: int3   
  0x0000000116b63b3c: int3   
  0x0000000116b63b3d: int3   
  0x0000000116b63b3e: int3   
  0x0000000116b63b3f: int3   

----------------------------------------------------------------------
f2l  140 f2l  [0x0000000116b63b80, 0x0000000116b63c60]  224 bytes

  0x0000000116b63b80: vmovss (%rsp),%xmm0
  0x0000000116b63b85: add    $0x8,%rsp
  0x0000000116b63b89: vcvttss2si %xmm0,%rax
  0x0000000116b63b8e: cmp    -0x9e8716d(%rip),%rax        # 0x000000010ccdca28
  0x0000000116b63b95: jne    0x0000000116b63c43
  0x0000000116b63b9b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b63ba3: je     0x0000000116b63c20
  0x0000000116b63ba9: mov    %rsp,-0x28(%rsp)
  0x0000000116b63bae: sub    $0x80,%rsp
  0x0000000116b63bb5: mov    %rax,0x78(%rsp)
  0x0000000116b63bba: mov    %rcx,0x70(%rsp)
  0x0000000116b63bbf: mov    %rdx,0x68(%rsp)
  0x0000000116b63bc4: mov    %rbx,0x60(%rsp)
  0x0000000116b63bc9: mov    %rbp,0x50(%rsp)
  0x0000000116b63bce: mov    %rsi,0x48(%rsp)
  0x0000000116b63bd3: mov    %rdi,0x40(%rsp)
  0x0000000116b63bd8: mov    %r8,0x38(%rsp)
  0x0000000116b63bdd: mov    %r9,0x30(%rsp)
  0x0000000116b63be2: mov    %r10,0x28(%rsp)
  0x0000000116b63be7: mov    %r11,0x20(%rsp)
  0x0000000116b63bec: mov    %r12,0x18(%rsp)
  0x0000000116b63bf1: mov    %r13,0x10(%rsp)
  0x0000000116b63bf6: mov    %r14,0x8(%rsp)
  0x0000000116b63bfb: mov    %r15,(%rsp)
  0x0000000116b63bff: movabs $0x10cc2363b,%rdi
  0x0000000116b63c09: movabs $0x116b63ba9,%rsi
  0x0000000116b63c13: mov    %rsp,%rdx
  0x0000000116b63c16: and    $0xfffffffffffffff0,%rsp
  0x0000000116b63c1a: callq  0x000000010c7dd830
  0x0000000116b63c1f: hlt    
  0x0000000116b63c20: test   $0xf,%esp
  0x0000000116b63c26: je     0x0000000116b63c3e
  0x0000000116b63c2c: sub    $0x8,%rsp
  0x0000000116b63c30: callq  0x000000010c9c5dd0
  0x0000000116b63c35: add    $0x8,%rsp
  0x0000000116b63c39: jmpq   0x0000000116b63c43
  0x0000000116b63c3e: callq  0x000000010c9c5dd0
  0x0000000116b63c43: movzbl 0x1(%r13),%ebx
  0x0000000116b63c48: inc    %r13
  0x0000000116b63c4b: movabs $0x10ce39680,%r10
  0x0000000116b63c55: jmpq   *(%r10,%rbx,8)
  0x0000000116b63c59: nop
  0x0000000116b63c5a: nop
  0x0000000116b63c5b: nop
  0x0000000116b63c5c: nop
  0x0000000116b63c5d: nop
  0x0000000116b63c5e: nop
  0x0000000116b63c5f: nop

----------------------------------------------------------------------
f2d  141 f2d  [0x0000000116b63ca0, 0x0000000116b63ce0]  64 bytes

  0x0000000116b63ca0: vmovss (%rsp),%xmm0
  0x0000000116b63ca5: add    $0x8,%rsp
  0x0000000116b63ca9: vcvtss2sd %xmm0,%xmm0,%xmm0
  0x0000000116b63cad: movzbl 0x1(%r13),%ebx
  0x0000000116b63cb2: inc    %r13
  0x0000000116b63cb5: movabs $0x10ce3a680,%r10
  0x0000000116b63cbf: jmpq   *(%r10,%rbx,8)
  0x0000000116b63cc3: nop
  0x0000000116b63cc4: nop
  0x0000000116b63cc5: nop
  0x0000000116b63cc6: nop
  0x0000000116b63cc7: nop
  0x0000000116b63cc8: int3   
  0x0000000116b63cc9: int3   
  0x0000000116b63cca: int3   
  0x0000000116b63ccb: int3   
  0x0000000116b63ccc: int3   
  0x0000000116b63ccd: int3   
  0x0000000116b63cce: int3   
  0x0000000116b63ccf: int3   
  0x0000000116b63cd0: int3   
  0x0000000116b63cd1: int3   
  0x0000000116b63cd2: int3   
  0x0000000116b63cd3: int3   
  0x0000000116b63cd4: int3   
  0x0000000116b63cd5: int3   
  0x0000000116b63cd6: int3   
  0x0000000116b63cd7: int3   
  0x0000000116b63cd8: int3   
  0x0000000116b63cd9: int3   
  0x0000000116b63cda: int3   
  0x0000000116b63cdb: int3   
  0x0000000116b63cdc: int3   
  0x0000000116b63cdd: int3   
  0x0000000116b63cde: int3   
  0x0000000116b63cdf: int3   

----------------------------------------------------------------------
d2i  142 d2i  [0x0000000116b63d20, 0x0000000116b63e00]  224 bytes

  0x0000000116b63d20: vmovsd (%rsp),%xmm0
  0x0000000116b63d25: add    $0x10,%rsp
  0x0000000116b63d29: vcvttsd2si %xmm0,%eax
  0x0000000116b63d2d: cmp    $0x80000000,%eax
  0x0000000116b63d33: jne    0x0000000116b63de1
  0x0000000116b63d39: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b63d41: je     0x0000000116b63dbe
  0x0000000116b63d47: mov    %rsp,-0x28(%rsp)
  0x0000000116b63d4c: sub    $0x80,%rsp
  0x0000000116b63d53: mov    %rax,0x78(%rsp)
  0x0000000116b63d58: mov    %rcx,0x70(%rsp)
  0x0000000116b63d5d: mov    %rdx,0x68(%rsp)
  0x0000000116b63d62: mov    %rbx,0x60(%rsp)
  0x0000000116b63d67: mov    %rbp,0x50(%rsp)
  0x0000000116b63d6c: mov    %rsi,0x48(%rsp)
  0x0000000116b63d71: mov    %rdi,0x40(%rsp)
  0x0000000116b63d76: mov    %r8,0x38(%rsp)
  0x0000000116b63d7b: mov    %r9,0x30(%rsp)
  0x0000000116b63d80: mov    %r10,0x28(%rsp)
  0x0000000116b63d85: mov    %r11,0x20(%rsp)
  0x0000000116b63d8a: mov    %r12,0x18(%rsp)
  0x0000000116b63d8f: mov    %r13,0x10(%rsp)
  0x0000000116b63d94: mov    %r14,0x8(%rsp)
  0x0000000116b63d99: mov    %r15,(%rsp)
  0x0000000116b63d9d: movabs $0x10cc2363b,%rdi
  0x0000000116b63da7: movabs $0x116b63d47,%rsi
  0x0000000116b63db1: mov    %rsp,%rdx
  0x0000000116b63db4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b63db8: callq  0x000000010c7dd830
  0x0000000116b63dbd: hlt    
  0x0000000116b63dbe: test   $0xf,%esp
  0x0000000116b63dc4: je     0x0000000116b63ddc
  0x0000000116b63dca: sub    $0x8,%rsp
  0x0000000116b63dce: callq  0x000000010c9c5f90
  0x0000000116b63dd3: add    $0x8,%rsp
  0x0000000116b63dd7: jmpq   0x0000000116b63de1
  0x0000000116b63ddc: callq  0x000000010c9c5f90
  0x0000000116b63de1: movzbl 0x1(%r13),%ebx
  0x0000000116b63de6: inc    %r13
  0x0000000116b63de9: movabs $0x10ce38e80,%r10
  0x0000000116b63df3: jmpq   *(%r10,%rbx,8)
  0x0000000116b63df7: nop
  0x0000000116b63df8: int3   
  0x0000000116b63df9: int3   
  0x0000000116b63dfa: int3   
  0x0000000116b63dfb: int3   
  0x0000000116b63dfc: int3   
  0x0000000116b63dfd: int3   
  0x0000000116b63dfe: int3   
  0x0000000116b63dff: int3   

----------------------------------------------------------------------
d2l  143 d2l  [0x0000000116b63e40, 0x0000000116b63f20]  224 bytes

  0x0000000116b63e40: vmovsd (%rsp),%xmm0
  0x0000000116b63e45: add    $0x10,%rsp
  0x0000000116b63e49: vcvttsd2si %xmm0,%rax
  0x0000000116b63e4e: cmp    -0x9e8742d(%rip),%rax        # 0x000000010ccdca28
  0x0000000116b63e55: jne    0x0000000116b63f03
  0x0000000116b63e5b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b63e63: je     0x0000000116b63ee0
  0x0000000116b63e69: mov    %rsp,-0x28(%rsp)
  0x0000000116b63e6e: sub    $0x80,%rsp
  0x0000000116b63e75: mov    %rax,0x78(%rsp)
  0x0000000116b63e7a: mov    %rcx,0x70(%rsp)
  0x0000000116b63e7f: mov    %rdx,0x68(%rsp)
  0x0000000116b63e84: mov    %rbx,0x60(%rsp)
  0x0000000116b63e89: mov    %rbp,0x50(%rsp)
  0x0000000116b63e8e: mov    %rsi,0x48(%rsp)
  0x0000000116b63e93: mov    %rdi,0x40(%rsp)
  0x0000000116b63e98: mov    %r8,0x38(%rsp)
  0x0000000116b63e9d: mov    %r9,0x30(%rsp)
  0x0000000116b63ea2: mov    %r10,0x28(%rsp)
  0x0000000116b63ea7: mov    %r11,0x20(%rsp)
  0x0000000116b63eac: mov    %r12,0x18(%rsp)
  0x0000000116b63eb1: mov    %r13,0x10(%rsp)
  0x0000000116b63eb6: mov    %r14,0x8(%rsp)
  0x0000000116b63ebb: mov    %r15,(%rsp)
  0x0000000116b63ebf: movabs $0x10cc2363b,%rdi
  0x0000000116b63ec9: movabs $0x116b63e69,%rsi
  0x0000000116b63ed3: mov    %rsp,%rdx
  0x0000000116b63ed6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b63eda: callq  0x000000010c7dd830
  0x0000000116b63edf: hlt    
  0x0000000116b63ee0: test   $0xf,%esp
  0x0000000116b63ee6: je     0x0000000116b63efe
  0x0000000116b63eec: sub    $0x8,%rsp
  0x0000000116b63ef0: callq  0x000000010c9c6140
  0x0000000116b63ef5: add    $0x8,%rsp
  0x0000000116b63ef9: jmpq   0x0000000116b63f03
  0x0000000116b63efe: callq  0x000000010c9c6140
  0x0000000116b63f03: movzbl 0x1(%r13),%ebx
  0x0000000116b63f08: inc    %r13
  0x0000000116b63f0b: movabs $0x10ce39680,%r10
  0x0000000116b63f15: jmpq   *(%r10,%rbx,8)
  0x0000000116b63f19: nop
  0x0000000116b63f1a: nop
  0x0000000116b63f1b: nop
  0x0000000116b63f1c: nop
  0x0000000116b63f1d: nop
  0x0000000116b63f1e: nop
  0x0000000116b63f1f: nop

----------------------------------------------------------------------
d2f  144 d2f  [0x0000000116b63f60, 0x0000000116b63fa0]  64 bytes

  0x0000000116b63f60: vmovsd (%rsp),%xmm0
  0x0000000116b63f65: add    $0x10,%rsp
  0x0000000116b63f69: vcvtsd2ss %xmm0,%xmm0,%xmm0
  0x0000000116b63f6d: movzbl 0x1(%r13),%ebx
  0x0000000116b63f72: inc    %r13
  0x0000000116b63f75: movabs $0x10ce39e80,%r10
  0x0000000116b63f7f: jmpq   *(%r10,%rbx,8)
  0x0000000116b63f83: nop
  0x0000000116b63f84: nop
  0x0000000116b63f85: nop
  0x0000000116b63f86: nop
  0x0000000116b63f87: nop
  0x0000000116b63f88: int3   
  0x0000000116b63f89: int3   
  0x0000000116b63f8a: int3   
  0x0000000116b63f8b: int3   
  0x0000000116b63f8c: int3   
  0x0000000116b63f8d: int3   
  0x0000000116b63f8e: int3   
  0x0000000116b63f8f: int3   
  0x0000000116b63f90: int3   
  0x0000000116b63f91: int3   
  0x0000000116b63f92: int3   
  0x0000000116b63f93: int3   
  0x0000000116b63f94: int3   
  0x0000000116b63f95: int3   
  0x0000000116b63f96: int3   
  0x0000000116b63f97: int3   
  0x0000000116b63f98: int3   
  0x0000000116b63f99: int3   
  0x0000000116b63f9a: int3   
  0x0000000116b63f9b: int3   
  0x0000000116b63f9c: int3   
  0x0000000116b63f9d: int3   
  0x0000000116b63f9e: int3   
  0x0000000116b63f9f: int3   

----------------------------------------------------------------------
i2b  145 i2b  [0x0000000116b63fe0, 0x0000000116b64000]  32 bytes

  0x0000000116b63fe0: mov    (%rsp),%eax
  0x0000000116b63fe3: add    $0x8,%rsp
  0x0000000116b63fe7: movsbl %al,%eax
  0x0000000116b63fea: movzbl 0x1(%r13),%ebx
  0x0000000116b63fef: inc    %r13
  0x0000000116b63ff2: movabs $0x10ce38e80,%r10
  0x0000000116b63ffc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2c  146 i2c  [0x0000000116b64040, 0x0000000116b64060]  32 bytes

  0x0000000116b64040: mov    (%rsp),%eax
  0x0000000116b64043: add    $0x8,%rsp
  0x0000000116b64047: movzwl %ax,%eax
  0x0000000116b6404a: movzbl 0x1(%r13),%ebx
  0x0000000116b6404f: inc    %r13
  0x0000000116b64052: movabs $0x10ce38e80,%r10
  0x0000000116b6405c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2s  147 i2s  [0x0000000116b640a0, 0x0000000116b640c0]  32 bytes

  0x0000000116b640a0: mov    (%rsp),%eax
  0x0000000116b640a3: add    $0x8,%rsp
  0x0000000116b640a7: movswl %ax,%eax
  0x0000000116b640aa: movzbl 0x1(%r13),%ebx
  0x0000000116b640af: inc    %r13
  0x0000000116b640b2: movabs $0x10ce38e80,%r10
  0x0000000116b640bc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
lcmp  148 lcmp  [0x0000000116b64100, 0x0000000116b64140]  64 bytes

  0x0000000116b64100: mov    (%rsp),%rax
  0x0000000116b64104: add    $0x10,%rsp
  0x0000000116b64108: mov    (%rsp),%rdx
  0x0000000116b6410c: add    $0x10,%rsp
  0x0000000116b64110: cmp    %rax,%rdx
  0x0000000116b64113: mov    $0xffffffff,%eax
  0x0000000116b64118: jl     0x0000000116b64120
  0x0000000116b6411a: setne  %al
  0x0000000116b6411d: movzbl %al,%eax
  0x0000000116b64120: movzbl 0x1(%r13),%ebx
  0x0000000116b64125: inc    %r13
  0x0000000116b64128: movabs $0x10ce38e80,%r10
  0x0000000116b64132: jmpq   *(%r10,%rbx,8)
  0x0000000116b64136: nop
  0x0000000116b64137: nop
  0x0000000116b64138: int3   
  0x0000000116b64139: int3   
  0x0000000116b6413a: int3   
  0x0000000116b6413b: int3   
  0x0000000116b6413c: int3   
  0x0000000116b6413d: int3   
  0x0000000116b6413e: int3   
  0x0000000116b6413f: int3   

----------------------------------------------------------------------
fcmpl  149 fcmpl  [0x0000000116b64180, 0x0000000116b641c0]  64 bytes

  0x0000000116b64180: vmovss (%rsp),%xmm0
  0x0000000116b64185: add    $0x8,%rsp
  0x0000000116b64189: vmovss (%rsp),%xmm1
  0x0000000116b6418e: add    $0x8,%rsp
  0x0000000116b64192: vucomiss %xmm0,%xmm1
  0x0000000116b64196: mov    $0xffffffff,%eax
  0x0000000116b6419b: jp     0x0000000116b641a5
  0x0000000116b6419d: jb     0x0000000116b641a5
  0x0000000116b6419f: setne  %dl
  0x0000000116b641a2: movzbl %dl,%eax
  0x0000000116b641a5: movzbl 0x1(%r13),%ebx
  0x0000000116b641aa: inc    %r13
  0x0000000116b641ad: movabs $0x10ce38e80,%r10
  0x0000000116b641b7: jmpq   *(%r10,%rbx,8)
  0x0000000116b641bb: nop
  0x0000000116b641bc: nop
  0x0000000116b641bd: nop
  0x0000000116b641be: nop
  0x0000000116b641bf: nop

----------------------------------------------------------------------
fcmpg  150 fcmpg  [0x0000000116b64200, 0x0000000116b64240]  64 bytes

  0x0000000116b64200: vmovss (%rsp),%xmm0
  0x0000000116b64205: add    $0x8,%rsp
  0x0000000116b64209: vmovss (%rsp),%xmm1
  0x0000000116b6420e: add    $0x8,%rsp
  0x0000000116b64212: vucomiss %xmm0,%xmm1
  0x0000000116b64216: mov    $0x1,%eax
  0x0000000116b6421b: jp     0x0000000116b64228
  0x0000000116b6421d: ja     0x0000000116b64228
  0x0000000116b6421f: mov    $0x0,%eax
  0x0000000116b64224: je     0x0000000116b64228
  0x0000000116b64226: dec    %eax
  0x0000000116b64228: movzbl 0x1(%r13),%ebx
  0x0000000116b6422d: inc    %r13
  0x0000000116b64230: movabs $0x10ce38e80,%r10
  0x0000000116b6423a: jmpq   *(%r10,%rbx,8)
  0x0000000116b6423e: nop
  0x0000000116b6423f: nop

----------------------------------------------------------------------
dcmpl  151 dcmpl  [0x0000000116b64280, 0x0000000116b642c0]  64 bytes

  0x0000000116b64280: vmovsd (%rsp),%xmm0
  0x0000000116b64285: add    $0x10,%rsp
  0x0000000116b64289: vmovsd (%rsp),%xmm1
  0x0000000116b6428e: add    $0x10,%rsp
  0x0000000116b64292: vucomisd %xmm0,%xmm1
  0x0000000116b64296: mov    $0xffffffff,%eax
  0x0000000116b6429b: jp     0x0000000116b642a5
  0x0000000116b6429d: jb     0x0000000116b642a5
  0x0000000116b6429f: setne  %dl
  0x0000000116b642a2: movzbl %dl,%eax
  0x0000000116b642a5: movzbl 0x1(%r13),%ebx
  0x0000000116b642aa: inc    %r13
  0x0000000116b642ad: movabs $0x10ce38e80,%r10
  0x0000000116b642b7: jmpq   *(%r10,%rbx,8)
  0x0000000116b642bb: nop
  0x0000000116b642bc: nop
  0x0000000116b642bd: nop
  0x0000000116b642be: nop
  0x0000000116b642bf: nop

----------------------------------------------------------------------
dcmpg  152 dcmpg  [0x0000000116b64300, 0x0000000116b64340]  64 bytes

  0x0000000116b64300: vmovsd (%rsp),%xmm0
  0x0000000116b64305: add    $0x10,%rsp
  0x0000000116b64309: vmovsd (%rsp),%xmm1
  0x0000000116b6430e: add    $0x10,%rsp
  0x0000000116b64312: vucomisd %xmm0,%xmm1
  0x0000000116b64316: mov    $0x1,%eax
  0x0000000116b6431b: jp     0x0000000116b64328
  0x0000000116b6431d: ja     0x0000000116b64328
  0x0000000116b6431f: mov    $0x0,%eax
  0x0000000116b64324: je     0x0000000116b64328
  0x0000000116b64326: dec    %eax
  0x0000000116b64328: movzbl 0x1(%r13),%ebx
  0x0000000116b6432d: inc    %r13
  0x0000000116b64330: movabs $0x10ce38e80,%r10
  0x0000000116b6433a: jmpq   *(%r10,%rbx,8)
  0x0000000116b6433e: nop
  0x0000000116b6433f: nop

----------------------------------------------------------------------
ifeq  153 ifeq  [0x0000000116b64380, 0x0000000116b643e0]  96 bytes

  0x0000000116b64380: mov    (%rsp),%eax
  0x0000000116b64383: add    $0x8,%rsp
  0x0000000116b64387: test   %eax,%eax
  0x0000000116b64389: jne    0x0000000116b643b6
  0x0000000116b6438f: mov    -0x18(%rbp),%rcx
  0x0000000116b64393: movswl 0x1(%r13),%edx
  0x0000000116b64398: bswap  %edx
  0x0000000116b6439a: sar    $0x10,%edx
  0x0000000116b6439d: movslq %edx,%rdx
  0x0000000116b643a0: add    %rdx,%r13
  0x0000000116b643a3: movzbl 0x0(%r13),%ebx
  0x0000000116b643a8: movabs $0x10ce3b680,%r10
  0x0000000116b643b2: jmpq   *(%r10,%rbx,8)
  0x0000000116b643b6: movzbl 0x3(%r13),%ebx
  0x0000000116b643bb: add    $0x3,%r13
  0x0000000116b643bf: movabs $0x10ce3b680,%r10
  0x0000000116b643c9: jmpq   *(%r10,%rbx,8)
  0x0000000116b643cd: nop
  0x0000000116b643ce: nop
  0x0000000116b643cf: nop
  0x0000000116b643d0: int3   
  0x0000000116b643d1: int3   
  0x0000000116b643d2: int3   
  0x0000000116b643d3: int3   
  0x0000000116b643d4: int3   
  0x0000000116b643d5: int3   
  0x0000000116b643d6: int3   
  0x0000000116b643d7: int3   
  0x0000000116b643d8: int3   
  0x0000000116b643d9: int3   
  0x0000000116b643da: int3   
  0x0000000116b643db: int3   
  0x0000000116b643dc: int3   
  0x0000000116b643dd: int3   
  0x0000000116b643de: int3   
  0x0000000116b643df: int3   

----------------------------------------------------------------------
ifne  154 ifne  [0x0000000116b64420, 0x0000000116b64480]  96 bytes

  0x0000000116b64420: mov    (%rsp),%eax
  0x0000000116b64423: add    $0x8,%rsp
  0x0000000116b64427: test   %eax,%eax
  0x0000000116b64429: je     0x0000000116b64456
  0x0000000116b6442f: mov    -0x18(%rbp),%rcx
  0x0000000116b64433: movswl 0x1(%r13),%edx
  0x0000000116b64438: bswap  %edx
  0x0000000116b6443a: sar    $0x10,%edx
  0x0000000116b6443d: movslq %edx,%rdx
  0x0000000116b64440: add    %rdx,%r13
  0x0000000116b64443: movzbl 0x0(%r13),%ebx
  0x0000000116b64448: movabs $0x10ce3b680,%r10
  0x0000000116b64452: jmpq   *(%r10,%rbx,8)
  0x0000000116b64456: movzbl 0x3(%r13),%ebx
  0x0000000116b6445b: add    $0x3,%r13
  0x0000000116b6445f: movabs $0x10ce3b680,%r10
  0x0000000116b64469: jmpq   *(%r10,%rbx,8)
  0x0000000116b6446d: nop
  0x0000000116b6446e: nop
  0x0000000116b6446f: nop
  0x0000000116b64470: int3   
  0x0000000116b64471: int3   
  0x0000000116b64472: int3   
  0x0000000116b64473: int3   
  0x0000000116b64474: int3   
  0x0000000116b64475: int3   
  0x0000000116b64476: int3   
  0x0000000116b64477: int3   
  0x0000000116b64478: int3   
  0x0000000116b64479: int3   
  0x0000000116b6447a: int3   
  0x0000000116b6447b: int3   
  0x0000000116b6447c: int3   
  0x0000000116b6447d: int3   
  0x0000000116b6447e: int3   
  0x0000000116b6447f: int3   

----------------------------------------------------------------------
iflt  155 iflt  [0x0000000116b644c0, 0x0000000116b64520]  96 bytes

  0x0000000116b644c0: mov    (%rsp),%eax
  0x0000000116b644c3: add    $0x8,%rsp
  0x0000000116b644c7: test   %eax,%eax
  0x0000000116b644c9: jge    0x0000000116b644f6
  0x0000000116b644cf: mov    -0x18(%rbp),%rcx
  0x0000000116b644d3: movswl 0x1(%r13),%edx
  0x0000000116b644d8: bswap  %edx
  0x0000000116b644da: sar    $0x10,%edx
  0x0000000116b644dd: movslq %edx,%rdx
  0x0000000116b644e0: add    %rdx,%r13
  0x0000000116b644e3: movzbl 0x0(%r13),%ebx
  0x0000000116b644e8: movabs $0x10ce3b680,%r10
  0x0000000116b644f2: jmpq   *(%r10,%rbx,8)
  0x0000000116b644f6: movzbl 0x3(%r13),%ebx
  0x0000000116b644fb: add    $0x3,%r13
  0x0000000116b644ff: movabs $0x10ce3b680,%r10
  0x0000000116b64509: jmpq   *(%r10,%rbx,8)
  0x0000000116b6450d: nop
  0x0000000116b6450e: nop
  0x0000000116b6450f: nop
  0x0000000116b64510: int3   
  0x0000000116b64511: int3   
  0x0000000116b64512: int3   
  0x0000000116b64513: int3   
  0x0000000116b64514: int3   
  0x0000000116b64515: int3   
  0x0000000116b64516: int3   
  0x0000000116b64517: int3   
  0x0000000116b64518: int3   
  0x0000000116b64519: int3   
  0x0000000116b6451a: int3   
  0x0000000116b6451b: int3   
  0x0000000116b6451c: int3   
  0x0000000116b6451d: int3   
  0x0000000116b6451e: int3   
  0x0000000116b6451f: int3   

----------------------------------------------------------------------
ifge  156 ifge  [0x0000000116b64560, 0x0000000116b645c0]  96 bytes

  0x0000000116b64560: mov    (%rsp),%eax
  0x0000000116b64563: add    $0x8,%rsp
  0x0000000116b64567: test   %eax,%eax
  0x0000000116b64569: jl     0x0000000116b64596
  0x0000000116b6456f: mov    -0x18(%rbp),%rcx
  0x0000000116b64573: movswl 0x1(%r13),%edx
  0x0000000116b64578: bswap  %edx
  0x0000000116b6457a: sar    $0x10,%edx
  0x0000000116b6457d: movslq %edx,%rdx
  0x0000000116b64580: add    %rdx,%r13
  0x0000000116b64583: movzbl 0x0(%r13),%ebx
  0x0000000116b64588: movabs $0x10ce3b680,%r10
  0x0000000116b64592: jmpq   *(%r10,%rbx,8)
  0x0000000116b64596: movzbl 0x3(%r13),%ebx
  0x0000000116b6459b: add    $0x3,%r13
  0x0000000116b6459f: movabs $0x10ce3b680,%r10
  0x0000000116b645a9: jmpq   *(%r10,%rbx,8)
  0x0000000116b645ad: nop
  0x0000000116b645ae: nop
  0x0000000116b645af: nop
  0x0000000116b645b0: int3   
  0x0000000116b645b1: int3   
  0x0000000116b645b2: int3   
  0x0000000116b645b3: int3   
  0x0000000116b645b4: int3   
  0x0000000116b645b5: int3   
  0x0000000116b645b6: int3   
  0x0000000116b645b7: int3   
  0x0000000116b645b8: int3   
  0x0000000116b645b9: int3   
  0x0000000116b645ba: int3   
  0x0000000116b645bb: int3   
  0x0000000116b645bc: int3   
  0x0000000116b645bd: int3   
  0x0000000116b645be: int3   
  0x0000000116b645bf: int3   

----------------------------------------------------------------------
ifgt  157 ifgt  [0x0000000116b64600, 0x0000000116b64660]  96 bytes

  0x0000000116b64600: mov    (%rsp),%eax
  0x0000000116b64603: add    $0x8,%rsp
  0x0000000116b64607: test   %eax,%eax
  0x0000000116b64609: jle    0x0000000116b64636
  0x0000000116b6460f: mov    -0x18(%rbp),%rcx
  0x0000000116b64613: movswl 0x1(%r13),%edx
  0x0000000116b64618: bswap  %edx
  0x0000000116b6461a: sar    $0x10,%edx
  0x0000000116b6461d: movslq %edx,%rdx
  0x0000000116b64620: add    %rdx,%r13
  0x0000000116b64623: movzbl 0x0(%r13),%ebx
  0x0000000116b64628: movabs $0x10ce3b680,%r10
  0x0000000116b64632: jmpq   *(%r10,%rbx,8)
  0x0000000116b64636: movzbl 0x3(%r13),%ebx
  0x0000000116b6463b: add    $0x3,%r13
  0x0000000116b6463f: movabs $0x10ce3b680,%r10
  0x0000000116b64649: jmpq   *(%r10,%rbx,8)
  0x0000000116b6464d: nop
  0x0000000116b6464e: nop
  0x0000000116b6464f: nop
  0x0000000116b64650: int3   
  0x0000000116b64651: int3   
  0x0000000116b64652: int3   
  0x0000000116b64653: int3   
  0x0000000116b64654: int3   
  0x0000000116b64655: int3   
  0x0000000116b64656: int3   
  0x0000000116b64657: int3   
  0x0000000116b64658: int3   
  0x0000000116b64659: int3   
  0x0000000116b6465a: int3   
  0x0000000116b6465b: int3   
  0x0000000116b6465c: int3   
  0x0000000116b6465d: int3   
  0x0000000116b6465e: int3   
  0x0000000116b6465f: int3   

----------------------------------------------------------------------
ifle  158 ifle  [0x0000000116b646a0, 0x0000000116b64700]  96 bytes

  0x0000000116b646a0: mov    (%rsp),%eax
  0x0000000116b646a3: add    $0x8,%rsp
  0x0000000116b646a7: test   %eax,%eax
  0x0000000116b646a9: jg     0x0000000116b646d6
  0x0000000116b646af: mov    -0x18(%rbp),%rcx
  0x0000000116b646b3: movswl 0x1(%r13),%edx
  0x0000000116b646b8: bswap  %edx
  0x0000000116b646ba: sar    $0x10,%edx
  0x0000000116b646bd: movslq %edx,%rdx
  0x0000000116b646c0: add    %rdx,%r13
  0x0000000116b646c3: movzbl 0x0(%r13),%ebx
  0x0000000116b646c8: movabs $0x10ce3b680,%r10
  0x0000000116b646d2: jmpq   *(%r10,%rbx,8)
  0x0000000116b646d6: movzbl 0x3(%r13),%ebx
  0x0000000116b646db: add    $0x3,%r13
  0x0000000116b646df: movabs $0x10ce3b680,%r10
  0x0000000116b646e9: jmpq   *(%r10,%rbx,8)
  0x0000000116b646ed: nop
  0x0000000116b646ee: nop
  0x0000000116b646ef: nop
  0x0000000116b646f0: int3   
  0x0000000116b646f1: int3   
  0x0000000116b646f2: int3   
  0x0000000116b646f3: int3   
  0x0000000116b646f4: int3   
  0x0000000116b646f5: int3   
  0x0000000116b646f6: int3   
  0x0000000116b646f7: int3   
  0x0000000116b646f8: int3   
  0x0000000116b646f9: int3   
  0x0000000116b646fa: int3   
  0x0000000116b646fb: int3   
  0x0000000116b646fc: int3   
  0x0000000116b646fd: int3   
  0x0000000116b646fe: int3   
  0x0000000116b646ff: int3   

----------------------------------------------------------------------
if_icmpeq  159 if_icmpeq  [0x0000000116b64740, 0x0000000116b647a0]  96 bytes

  0x0000000116b64740: mov    (%rsp),%eax
  0x0000000116b64743: add    $0x8,%rsp
  0x0000000116b64747: mov    (%rsp),%edx
  0x0000000116b6474a: add    $0x8,%rsp
  0x0000000116b6474e: cmp    %eax,%edx
  0x0000000116b64750: jne    0x0000000116b6477d
  0x0000000116b64756: mov    -0x18(%rbp),%rcx
  0x0000000116b6475a: movswl 0x1(%r13),%edx
  0x0000000116b6475f: bswap  %edx
  0x0000000116b64761: sar    $0x10,%edx
  0x0000000116b64764: movslq %edx,%rdx
  0x0000000116b64767: add    %rdx,%r13
  0x0000000116b6476a: movzbl 0x0(%r13),%ebx
  0x0000000116b6476f: movabs $0x10ce3b680,%r10
  0x0000000116b64779: jmpq   *(%r10,%rbx,8)
  0x0000000116b6477d: movzbl 0x3(%r13),%ebx
  0x0000000116b64782: add    $0x3,%r13
  0x0000000116b64786: movabs $0x10ce3b680,%r10
  0x0000000116b64790: jmpq   *(%r10,%rbx,8)
  0x0000000116b64794: nop
  0x0000000116b64795: nop
  0x0000000116b64796: nop
  0x0000000116b64797: nop
  0x0000000116b64798: int3   
  0x0000000116b64799: int3   
  0x0000000116b6479a: int3   
  0x0000000116b6479b: int3   
  0x0000000116b6479c: int3   
  0x0000000116b6479d: int3   
  0x0000000116b6479e: int3   
  0x0000000116b6479f: int3   

----------------------------------------------------------------------
if_icmpne  160 if_icmpne  [0x0000000116b647e0, 0x0000000116b64840]  96 bytes

  0x0000000116b647e0: mov    (%rsp),%eax
  0x0000000116b647e3: add    $0x8,%rsp
  0x0000000116b647e7: mov    (%rsp),%edx
  0x0000000116b647ea: add    $0x8,%rsp
  0x0000000116b647ee: cmp    %eax,%edx
  0x0000000116b647f0: je     0x0000000116b6481d
  0x0000000116b647f6: mov    -0x18(%rbp),%rcx
  0x0000000116b647fa: movswl 0x1(%r13),%edx
  0x0000000116b647ff: bswap  %edx
  0x0000000116b64801: sar    $0x10,%edx
  0x0000000116b64804: movslq %edx,%rdx
  0x0000000116b64807: add    %rdx,%r13
  0x0000000116b6480a: movzbl 0x0(%r13),%ebx
  0x0000000116b6480f: movabs $0x10ce3b680,%r10
  0x0000000116b64819: jmpq   *(%r10,%rbx,8)
  0x0000000116b6481d: movzbl 0x3(%r13),%ebx
  0x0000000116b64822: add    $0x3,%r13
  0x0000000116b64826: movabs $0x10ce3b680,%r10
  0x0000000116b64830: jmpq   *(%r10,%rbx,8)
  0x0000000116b64834: nop
  0x0000000116b64835: nop
  0x0000000116b64836: nop
  0x0000000116b64837: nop
  0x0000000116b64838: int3   
  0x0000000116b64839: int3   
  0x0000000116b6483a: int3   
  0x0000000116b6483b: int3   
  0x0000000116b6483c: int3   
  0x0000000116b6483d: int3   
  0x0000000116b6483e: int3   
  0x0000000116b6483f: int3   

----------------------------------------------------------------------
if_icmplt  161 if_icmplt  [0x0000000116b64880, 0x0000000116b648e0]  96 bytes

  0x0000000116b64880: mov    (%rsp),%eax
  0x0000000116b64883: add    $0x8,%rsp
  0x0000000116b64887: mov    (%rsp),%edx
  0x0000000116b6488a: add    $0x8,%rsp
  0x0000000116b6488e: cmp    %eax,%edx
  0x0000000116b64890: jge    0x0000000116b648bd
  0x0000000116b64896: mov    -0x18(%rbp),%rcx
  0x0000000116b6489a: movswl 0x1(%r13),%edx
  0x0000000116b6489f: bswap  %edx
  0x0000000116b648a1: sar    $0x10,%edx
  0x0000000116b648a4: movslq %edx,%rdx
  0x0000000116b648a7: add    %rdx,%r13
  0x0000000116b648aa: movzbl 0x0(%r13),%ebx
  0x0000000116b648af: movabs $0x10ce3b680,%r10
  0x0000000116b648b9: jmpq   *(%r10,%rbx,8)
  0x0000000116b648bd: movzbl 0x3(%r13),%ebx
  0x0000000116b648c2: add    $0x3,%r13
  0x0000000116b648c6: movabs $0x10ce3b680,%r10
  0x0000000116b648d0: jmpq   *(%r10,%rbx,8)
  0x0000000116b648d4: nop
  0x0000000116b648d5: nop
  0x0000000116b648d6: nop
  0x0000000116b648d7: nop
  0x0000000116b648d8: int3   
  0x0000000116b648d9: int3   
  0x0000000116b648da: int3   
  0x0000000116b648db: int3   
  0x0000000116b648dc: int3   
  0x0000000116b648dd: int3   
  0x0000000116b648de: int3   
  0x0000000116b648df: int3   

----------------------------------------------------------------------
if_icmpge  162 if_icmpge  [0x0000000116b64920, 0x0000000116b64980]  96 bytes

  0x0000000116b64920: mov    (%rsp),%eax
  0x0000000116b64923: add    $0x8,%rsp
  0x0000000116b64927: mov    (%rsp),%edx
  0x0000000116b6492a: add    $0x8,%rsp
  0x0000000116b6492e: cmp    %eax,%edx
  0x0000000116b64930: jl     0x0000000116b6495d
  0x0000000116b64936: mov    -0x18(%rbp),%rcx
  0x0000000116b6493a: movswl 0x1(%r13),%edx
  0x0000000116b6493f: bswap  %edx
  0x0000000116b64941: sar    $0x10,%edx
  0x0000000116b64944: movslq %edx,%rdx
  0x0000000116b64947: add    %rdx,%r13
  0x0000000116b6494a: movzbl 0x0(%r13),%ebx
  0x0000000116b6494f: movabs $0x10ce3b680,%r10
  0x0000000116b64959: jmpq   *(%r10,%rbx,8)
  0x0000000116b6495d: movzbl 0x3(%r13),%ebx
  0x0000000116b64962: add    $0x3,%r13
  0x0000000116b64966: movabs $0x10ce3b680,%r10
  0x0000000116b64970: jmpq   *(%r10,%rbx,8)
  0x0000000116b64974: nop
  0x0000000116b64975: nop
  0x0000000116b64976: nop
  0x0000000116b64977: nop
  0x0000000116b64978: int3   
  0x0000000116b64979: int3   
  0x0000000116b6497a: int3   
  0x0000000116b6497b: int3   
  0x0000000116b6497c: int3   
  0x0000000116b6497d: int3   
  0x0000000116b6497e: int3   
  0x0000000116b6497f: int3   

----------------------------------------------------------------------
if_icmpgt  163 if_icmpgt  [0x0000000116b649c0, 0x0000000116b64a20]  96 bytes

  0x0000000116b649c0: mov    (%rsp),%eax
  0x0000000116b649c3: add    $0x8,%rsp
  0x0000000116b649c7: mov    (%rsp),%edx
  0x0000000116b649ca: add    $0x8,%rsp
  0x0000000116b649ce: cmp    %eax,%edx
  0x0000000116b649d0: jle    0x0000000116b649fd
  0x0000000116b649d6: mov    -0x18(%rbp),%rcx
  0x0000000116b649da: movswl 0x1(%r13),%edx
  0x0000000116b649df: bswap  %edx
  0x0000000116b649e1: sar    $0x10,%edx
  0x0000000116b649e4: movslq %edx,%rdx
  0x0000000116b649e7: add    %rdx,%r13
  0x0000000116b649ea: movzbl 0x0(%r13),%ebx
  0x0000000116b649ef: movabs $0x10ce3b680,%r10
  0x0000000116b649f9: jmpq   *(%r10,%rbx,8)
  0x0000000116b649fd: movzbl 0x3(%r13),%ebx
  0x0000000116b64a02: add    $0x3,%r13
  0x0000000116b64a06: movabs $0x10ce3b680,%r10
  0x0000000116b64a10: jmpq   *(%r10,%rbx,8)
  0x0000000116b64a14: nop
  0x0000000116b64a15: nop
  0x0000000116b64a16: nop
  0x0000000116b64a17: nop
  0x0000000116b64a18: int3   
  0x0000000116b64a19: int3   
  0x0000000116b64a1a: int3   
  0x0000000116b64a1b: int3   
  0x0000000116b64a1c: int3   
  0x0000000116b64a1d: int3   
  0x0000000116b64a1e: int3   
  0x0000000116b64a1f: int3   

----------------------------------------------------------------------
if_icmple  164 if_icmple  [0x0000000116b64a60, 0x0000000116b64ac0]  96 bytes

  0x0000000116b64a60: mov    (%rsp),%eax
  0x0000000116b64a63: add    $0x8,%rsp
  0x0000000116b64a67: mov    (%rsp),%edx
  0x0000000116b64a6a: add    $0x8,%rsp
  0x0000000116b64a6e: cmp    %eax,%edx
  0x0000000116b64a70: jg     0x0000000116b64a9d
  0x0000000116b64a76: mov    -0x18(%rbp),%rcx
  0x0000000116b64a7a: movswl 0x1(%r13),%edx
  0x0000000116b64a7f: bswap  %edx
  0x0000000116b64a81: sar    $0x10,%edx
  0x0000000116b64a84: movslq %edx,%rdx
  0x0000000116b64a87: add    %rdx,%r13
  0x0000000116b64a8a: movzbl 0x0(%r13),%ebx
  0x0000000116b64a8f: movabs $0x10ce3b680,%r10
  0x0000000116b64a99: jmpq   *(%r10,%rbx,8)
  0x0000000116b64a9d: movzbl 0x3(%r13),%ebx
  0x0000000116b64aa2: add    $0x3,%r13
  0x0000000116b64aa6: movabs $0x10ce3b680,%r10
  0x0000000116b64ab0: jmpq   *(%r10,%rbx,8)
  0x0000000116b64ab4: nop
  0x0000000116b64ab5: nop
  0x0000000116b64ab6: nop
  0x0000000116b64ab7: nop
  0x0000000116b64ab8: int3   
  0x0000000116b64ab9: int3   
  0x0000000116b64aba: int3   
  0x0000000116b64abb: int3   
  0x0000000116b64abc: int3   
  0x0000000116b64abd: int3   
  0x0000000116b64abe: int3   
  0x0000000116b64abf: int3   

----------------------------------------------------------------------
if_acmpeq  165 if_acmpeq  [0x0000000116b64b00, 0x0000000116b64b60]  96 bytes

  0x0000000116b64b00: pop    %rax
  0x0000000116b64b01: pop    %rdx
  0x0000000116b64b02: cmp    %rax,%rdx
  0x0000000116b64b05: jne    0x0000000116b64b32
  0x0000000116b64b0b: mov    -0x18(%rbp),%rcx
  0x0000000116b64b0f: movswl 0x1(%r13),%edx
  0x0000000116b64b14: bswap  %edx
  0x0000000116b64b16: sar    $0x10,%edx
  0x0000000116b64b19: movslq %edx,%rdx
  0x0000000116b64b1c: add    %rdx,%r13
  0x0000000116b64b1f: movzbl 0x0(%r13),%ebx
  0x0000000116b64b24: movabs $0x10ce3b680,%r10
  0x0000000116b64b2e: jmpq   *(%r10,%rbx,8)
  0x0000000116b64b32: movzbl 0x3(%r13),%ebx
  0x0000000116b64b37: add    $0x3,%r13
  0x0000000116b64b3b: movabs $0x10ce3b680,%r10
  0x0000000116b64b45: jmpq   *(%r10,%rbx,8)
  0x0000000116b64b49: nop
  0x0000000116b64b4a: nop
  0x0000000116b64b4b: nop
  0x0000000116b64b4c: nop
  0x0000000116b64b4d: nop
  0x0000000116b64b4e: nop
  0x0000000116b64b4f: nop
  0x0000000116b64b50: int3   
  0x0000000116b64b51: int3   
  0x0000000116b64b52: int3   
  0x0000000116b64b53: int3   
  0x0000000116b64b54: int3   
  0x0000000116b64b55: int3   
  0x0000000116b64b56: int3   
  0x0000000116b64b57: int3   
  0x0000000116b64b58: int3   
  0x0000000116b64b59: int3   
  0x0000000116b64b5a: int3   
  0x0000000116b64b5b: int3   
  0x0000000116b64b5c: int3   
  0x0000000116b64b5d: int3   
  0x0000000116b64b5e: int3   
  0x0000000116b64b5f: int3   

----------------------------------------------------------------------
if_acmpne  166 if_acmpne  [0x0000000116b64ba0, 0x0000000116b64c00]  96 bytes

  0x0000000116b64ba0: pop    %rax
  0x0000000116b64ba1: pop    %rdx
  0x0000000116b64ba2: cmp    %rax,%rdx
  0x0000000116b64ba5: je     0x0000000116b64bd2
  0x0000000116b64bab: mov    -0x18(%rbp),%rcx
  0x0000000116b64baf: movswl 0x1(%r13),%edx
  0x0000000116b64bb4: bswap  %edx
  0x0000000116b64bb6: sar    $0x10,%edx
  0x0000000116b64bb9: movslq %edx,%rdx
  0x0000000116b64bbc: add    %rdx,%r13
  0x0000000116b64bbf: movzbl 0x0(%r13),%ebx
  0x0000000116b64bc4: movabs $0x10ce3b680,%r10
  0x0000000116b64bce: jmpq   *(%r10,%rbx,8)
  0x0000000116b64bd2: movzbl 0x3(%r13),%ebx
  0x0000000116b64bd7: add    $0x3,%r13
  0x0000000116b64bdb: movabs $0x10ce3b680,%r10
  0x0000000116b64be5: jmpq   *(%r10,%rbx,8)
  0x0000000116b64be9: nop
  0x0000000116b64bea: nop
  0x0000000116b64beb: nop
  0x0000000116b64bec: nop
  0x0000000116b64bed: nop
  0x0000000116b64bee: nop
  0x0000000116b64bef: nop
  0x0000000116b64bf0: int3   
  0x0000000116b64bf1: int3   
  0x0000000116b64bf2: int3   
  0x0000000116b64bf3: int3   
  0x0000000116b64bf4: int3   
  0x0000000116b64bf5: int3   
  0x0000000116b64bf6: int3   
  0x0000000116b64bf7: int3   
  0x0000000116b64bf8: int3   
  0x0000000116b64bf9: int3   
  0x0000000116b64bfa: int3   
  0x0000000116b64bfb: int3   
  0x0000000116b64bfc: int3   
  0x0000000116b64bfd: int3   
  0x0000000116b64bfe: int3   
  0x0000000116b64bff: int3   

----------------------------------------------------------------------
goto  167 goto  [0x0000000116b64c40, 0x0000000116b64d20]  224 bytes

  0x0000000116b64c40: push   %rax
  0x0000000116b64c41: jmpq   0x0000000116b64c70
  0x0000000116b64c46: sub    $0x8,%rsp
  0x0000000116b64c4a: vmovss %xmm0,(%rsp)
  0x0000000116b64c4f: jmpq   0x0000000116b64c70
  0x0000000116b64c54: sub    $0x10,%rsp
  0x0000000116b64c58: vmovsd %xmm0,(%rsp)
  0x0000000116b64c5d: jmpq   0x0000000116b64c70
  0x0000000116b64c62: sub    $0x10,%rsp
  0x0000000116b64c66: mov    %rax,(%rsp)
  0x0000000116b64c6a: jmpq   0x0000000116b64c70
  0x0000000116b64c6f: push   %rax
  0x0000000116b64c70: mov    -0x18(%rbp),%rcx
  0x0000000116b64c74: movswl 0x1(%r13),%edx
  0x0000000116b64c79: bswap  %edx
  0x0000000116b64c7b: sar    $0x10,%edx
  0x0000000116b64c7e: movslq %edx,%rdx
  0x0000000116b64c81: add    %rdx,%r13
  0x0000000116b64c84: movzbl 0x0(%r13),%ebx
  0x0000000116b64c89: movabs $0x10ce3b680,%r10
  0x0000000116b64c93: jmpq   *(%r10,%rbx,8)
  0x0000000116b64c97: mov    %rsp,-0x28(%rsp)
  0x0000000116b64c9c: sub    $0x80,%rsp
  0x0000000116b64ca3: mov    %rax,0x78(%rsp)
  0x0000000116b64ca8: mov    %rcx,0x70(%rsp)
  0x0000000116b64cad: mov    %rdx,0x68(%rsp)
  0x0000000116b64cb2: mov    %rbx,0x60(%rsp)
  0x0000000116b64cb7: mov    %rbp,0x50(%rsp)
  0x0000000116b64cbc: mov    %rsi,0x48(%rsp)
  0x0000000116b64cc1: mov    %rdi,0x40(%rsp)
  0x0000000116b64cc6: mov    %r8,0x38(%rsp)
  0x0000000116b64ccb: mov    %r9,0x30(%rsp)
  0x0000000116b64cd0: mov    %r10,0x28(%rsp)
  0x0000000116b64cd5: mov    %r11,0x20(%rsp)
  0x0000000116b64cda: mov    %r12,0x18(%rsp)
  0x0000000116b64cdf: mov    %r13,0x10(%rsp)
  0x0000000116b64ce4: mov    %r14,0x8(%rsp)
  0x0000000116b64ce9: mov    %r15,(%rsp)
  0x0000000116b64ced: movabs $0x10cb763be,%rdi
  0x0000000116b64cf7: movabs $0x116b64c97,%rsi
  0x0000000116b64d01: mov    %rsp,%rdx
  0x0000000116b64d04: and    $0xfffffffffffffff0,%rsp
  0x0000000116b64d08: callq  0x000000010c7dd830
  0x0000000116b64d0d: hlt    
  0x0000000116b64d0e: nop
  0x0000000116b64d0f: nop
  0x0000000116b64d10: int3   
  0x0000000116b64d11: int3   
  0x0000000116b64d12: int3   
  0x0000000116b64d13: int3   
  0x0000000116b64d14: int3   
  0x0000000116b64d15: int3   
  0x0000000116b64d16: int3   
  0x0000000116b64d17: int3   
  0x0000000116b64d18: int3   
  0x0000000116b64d19: int3   
  0x0000000116b64d1a: int3   
  0x0000000116b64d1b: int3   
  0x0000000116b64d1c: int3   
  0x0000000116b64d1d: int3   
  0x0000000116b64d1e: int3   
  0x0000000116b64d1f: int3   

----------------------------------------------------------------------
jsr  168 jsr  [0x0000000116b64d60, 0x0000000116b64e40]  224 bytes

  0x0000000116b64d60: push   %rax
  0x0000000116b64d61: jmpq   0x0000000116b64d90
  0x0000000116b64d66: sub    $0x8,%rsp
  0x0000000116b64d6a: vmovss %xmm0,(%rsp)
  0x0000000116b64d6f: jmpq   0x0000000116b64d90
  0x0000000116b64d74: sub    $0x10,%rsp
  0x0000000116b64d78: vmovsd %xmm0,(%rsp)
  0x0000000116b64d7d: jmpq   0x0000000116b64d90
  0x0000000116b64d82: sub    $0x10,%rsp
  0x0000000116b64d86: mov    %rax,(%rsp)
  0x0000000116b64d8a: jmpq   0x0000000116b64d90
  0x0000000116b64d8f: push   %rax
  0x0000000116b64d90: mov    -0x18(%rbp),%rcx
  0x0000000116b64d94: movswl 0x1(%r13),%edx
  0x0000000116b64d99: bswap  %edx
  0x0000000116b64d9b: sar    $0x10,%edx
  0x0000000116b64d9e: movslq %edx,%rdx
  0x0000000116b64da1: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000116b64da7: lea    -0x2d(%r13),%rax
  0x0000000116b64dab: sub    0x10(%rcx),%rax
  0x0000000116b64daf: add    %rdx,%r13
  0x0000000116b64db2: push   %rax
  0x0000000116b64db3: movabs $0x10ce3b680,%r10
  0x0000000116b64dbd: jmpq   *(%r10,%rbx,8)
  0x0000000116b64dc1: mov    %rsp,-0x28(%rsp)
  0x0000000116b64dc6: sub    $0x80,%rsp
  0x0000000116b64dcd: mov    %rax,0x78(%rsp)
  0x0000000116b64dd2: mov    %rcx,0x70(%rsp)
  0x0000000116b64dd7: mov    %rdx,0x68(%rsp)
  0x0000000116b64ddc: mov    %rbx,0x60(%rsp)
  0x0000000116b64de1: mov    %rbp,0x50(%rsp)
  0x0000000116b64de6: mov    %rsi,0x48(%rsp)
  0x0000000116b64deb: mov    %rdi,0x40(%rsp)
  0x0000000116b64df0: mov    %r8,0x38(%rsp)
  0x0000000116b64df5: mov    %r9,0x30(%rsp)
  0x0000000116b64dfa: mov    %r10,0x28(%rsp)
  0x0000000116b64dff: mov    %r11,0x20(%rsp)
  0x0000000116b64e04: mov    %r12,0x18(%rsp)
  0x0000000116b64e09: mov    %r13,0x10(%rsp)
  0x0000000116b64e0e: mov    %r14,0x8(%rsp)
  0x0000000116b64e13: mov    %r15,(%rsp)
  0x0000000116b64e17: movabs $0x10cb763be,%rdi
  0x0000000116b64e21: movabs $0x116b64dc1,%rsi
  0x0000000116b64e2b: mov    %rsp,%rdx
  0x0000000116b64e2e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b64e32: callq  0x000000010c7dd830
  0x0000000116b64e37: hlt    
  0x0000000116b64e38: int3   
  0x0000000116b64e39: int3   
  0x0000000116b64e3a: int3   
  0x0000000116b64e3b: int3   
  0x0000000116b64e3c: int3   
  0x0000000116b64e3d: int3   
  0x0000000116b64e3e: int3   
  0x0000000116b64e3f: int3   

----------------------------------------------------------------------
ret  169 ret  [0x0000000116b64e80, 0x0000000116b65000]  384 bytes

  0x0000000116b64e80: push   %rax
  0x0000000116b64e81: jmpq   0x0000000116b64eb0
  0x0000000116b64e86: sub    $0x8,%rsp
  0x0000000116b64e8a: vmovss %xmm0,(%rsp)
  0x0000000116b64e8f: jmpq   0x0000000116b64eb0
  0x0000000116b64e94: sub    $0x10,%rsp
  0x0000000116b64e98: vmovsd %xmm0,(%rsp)
  0x0000000116b64e9d: jmpq   0x0000000116b64eb0
  0x0000000116b64ea2: sub    $0x10,%rsp
  0x0000000116b64ea6: mov    %rax,(%rsp)
  0x0000000116b64eaa: jmpq   0x0000000116b64eb0
  0x0000000116b64eaf: push   %rax
  0x0000000116b64eb0: movzbl 0x1(%r13),%ebx
  0x0000000116b64eb5: neg    %rbx
  0x0000000116b64eb8: movslq (%r14,%rbx,8),%rbx
  0x0000000116b64ebc: mov    -0x18(%rbp),%rax
  0x0000000116b64ec0: mov    0x10(%rax),%r13
  0x0000000116b64ec4: lea    0x30(%r13,%rbx,1),%r13
  0x0000000116b64ec9: movzbl 0x0(%r13),%ebx
  0x0000000116b64ece: movabs $0x10ce3b680,%r10
  0x0000000116b64ed8: jmpq   *(%r10,%rbx,8)
  0x0000000116b64edc: mov    %rsp,-0x28(%rsp)
  0x0000000116b64ee1: sub    $0x80,%rsp
  0x0000000116b64ee8: mov    %rax,0x78(%rsp)
  0x0000000116b64eed: mov    %rcx,0x70(%rsp)
  0x0000000116b64ef2: mov    %rdx,0x68(%rsp)
  0x0000000116b64ef7: mov    %rbx,0x60(%rsp)
  0x0000000116b64efc: mov    %rbp,0x50(%rsp)
  0x0000000116b64f01: mov    %rsi,0x48(%rsp)
  0x0000000116b64f06: mov    %rdi,0x40(%rsp)
  0x0000000116b64f0b: mov    %r8,0x38(%rsp)
  0x0000000116b64f10: mov    %r9,0x30(%rsp)
  0x0000000116b64f15: mov    %r10,0x28(%rsp)
  0x0000000116b64f1a: mov    %r11,0x20(%rsp)
  0x0000000116b64f1f: mov    %r12,0x18(%rsp)
  0x0000000116b64f24: mov    %r13,0x10(%rsp)
  0x0000000116b64f29: mov    %r14,0x8(%rsp)
  0x0000000116b64f2e: mov    %r15,(%rsp)
  0x0000000116b64f32: movabs $0x10cb763be,%rdi
  0x0000000116b64f3c: movabs $0x116b64edc,%rsi
  0x0000000116b64f46: mov    %rsp,%rdx
  0x0000000116b64f49: and    $0xfffffffffffffff0,%rsp
  0x0000000116b64f4d: callq  0x000000010c7dd830
  0x0000000116b64f52: hlt    
  0x0000000116b64f53: movzwl 0x2(%r13),%ebx
  0x0000000116b64f58: bswap  %ebx
  0x0000000116b64f5a: shr    $0x10,%ebx
  0x0000000116b64f5d: neg    %rbx
  0x0000000116b64f60: mov    (%r14,%rbx,8),%rbx
  0x0000000116b64f64: mov    -0x18(%rbp),%rax
  0x0000000116b64f68: mov    0x10(%rax),%r13
  0x0000000116b64f6c: lea    0x30(%r13,%rbx,1),%r13
  0x0000000116b64f71: movzbl 0x0(%r13),%ebx
  0x0000000116b64f76: movabs $0x10ce3b680,%r10
  0x0000000116b64f80: jmpq   *(%r10,%rbx,8)
  0x0000000116b64f84: mov    %rsp,-0x28(%rsp)
  0x0000000116b64f89: sub    $0x80,%rsp
  0x0000000116b64f90: mov    %rax,0x78(%rsp)
  0x0000000116b64f95: mov    %rcx,0x70(%rsp)
  0x0000000116b64f9a: mov    %rdx,0x68(%rsp)
  0x0000000116b64f9f: mov    %rbx,0x60(%rsp)
  0x0000000116b64fa4: mov    %rbp,0x50(%rsp)
  0x0000000116b64fa9: mov    %rsi,0x48(%rsp)
  0x0000000116b64fae: mov    %rdi,0x40(%rsp)
  0x0000000116b64fb3: mov    %r8,0x38(%rsp)
  0x0000000116b64fb8: mov    %r9,0x30(%rsp)
  0x0000000116b64fbd: mov    %r10,0x28(%rsp)
  0x0000000116b64fc2: mov    %r11,0x20(%rsp)
  0x0000000116b64fc7: mov    %r12,0x18(%rsp)
  0x0000000116b64fcc: mov    %r13,0x10(%rsp)
  0x0000000116b64fd1: mov    %r14,0x8(%rsp)
  0x0000000116b64fd6: mov    %r15,(%rsp)
  0x0000000116b64fda: movabs $0x10cb763be,%rdi
  0x0000000116b64fe4: movabs $0x116b64f84,%rsi
  0x0000000116b64fee: mov    %rsp,%rdx
  0x0000000116b64ff1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b64ff5: callq  0x000000010c7dd830
  0x0000000116b64ffa: hlt    
  0x0000000116b64ffb: nop
  0x0000000116b64ffc: nop
  0x0000000116b64ffd: nop
  0x0000000116b64ffe: nop
  0x0000000116b64fff: nop

----------------------------------------------------------------------
tableswitch  170 tableswitch  [0x0000000116b65040, 0x0000000116b65120]  224 bytes

  0x0000000116b65040: mov    (%rsp),%eax
  0x0000000116b65043: add    $0x8,%rsp
  0x0000000116b65047: lea    0x4(%r13),%rbx
  0x0000000116b6504b: and    $0xfffffffffffffffc,%rbx
  0x0000000116b6504f: mov    0x4(%rbx),%ecx
  0x0000000116b65052: mov    0x8(%rbx),%edx
  0x0000000116b65055: bswap  %ecx
  0x0000000116b65057: bswap  %edx
  0x0000000116b65059: cmp    %ecx,%eax
  0x0000000116b6505b: jl     0x0000000116b6508b
  0x0000000116b65061: cmp    %edx,%eax
  0x0000000116b65063: jg     0x0000000116b6508b
  0x0000000116b65069: sub    %ecx,%eax
  0x0000000116b6506b: mov    0xc(%rbx,%rax,4),%edx
  0x0000000116b6506f: bswap  %edx
  0x0000000116b65071: movslq %edx,%rdx
  0x0000000116b65074: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000116b6507a: add    %rdx,%r13
  0x0000000116b6507d: movabs $0x10ce3b680,%r10
  0x0000000116b65087: jmpq   *(%r10,%rbx,8)
  0x0000000116b6508b: mov    (%rbx),%edx
  0x0000000116b6508d: jmp    0x0000000116b6506f
  0x0000000116b6508f: mov    %rsp,-0x28(%rsp)
  0x0000000116b65094: sub    $0x80,%rsp
  0x0000000116b6509b: mov    %rax,0x78(%rsp)
  0x0000000116b650a0: mov    %rcx,0x70(%rsp)
  0x0000000116b650a5: mov    %rdx,0x68(%rsp)
  0x0000000116b650aa: mov    %rbx,0x60(%rsp)
  0x0000000116b650af: mov    %rbp,0x50(%rsp)
  0x0000000116b650b4: mov    %rsi,0x48(%rsp)
  0x0000000116b650b9: mov    %rdi,0x40(%rsp)
  0x0000000116b650be: mov    %r8,0x38(%rsp)
  0x0000000116b650c3: mov    %r9,0x30(%rsp)
  0x0000000116b650c8: mov    %r10,0x28(%rsp)
  0x0000000116b650cd: mov    %r11,0x20(%rsp)
  0x0000000116b650d2: mov    %r12,0x18(%rsp)
  0x0000000116b650d7: mov    %r13,0x10(%rsp)
  0x0000000116b650dc: mov    %r14,0x8(%rsp)
  0x0000000116b650e1: mov    %r15,(%rsp)
  0x0000000116b650e5: movabs $0x10cb763be,%rdi
  0x0000000116b650ef: movabs $0x116b6508f,%rsi
  0x0000000116b650f9: mov    %rsp,%rdx
  0x0000000116b650fc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65100: callq  0x000000010c7dd830
  0x0000000116b65105: hlt    
  0x0000000116b65106: nop
  0x0000000116b65107: nop
  0x0000000116b65108: int3   
  0x0000000116b65109: int3   
  0x0000000116b6510a: int3   
  0x0000000116b6510b: int3   
  0x0000000116b6510c: int3   
  0x0000000116b6510d: int3   
  0x0000000116b6510e: int3   
  0x0000000116b6510f: int3   
  0x0000000116b65110: int3   
  0x0000000116b65111: int3   
  0x0000000116b65112: int3   
  0x0000000116b65113: int3   
  0x0000000116b65114: int3   
  0x0000000116b65115: int3   
  0x0000000116b65116: int3   
  0x0000000116b65117: int3   
  0x0000000116b65118: int3   
  0x0000000116b65119: int3   
  0x0000000116b6511a: int3   
  0x0000000116b6511b: int3   
  0x0000000116b6511c: int3   
  0x0000000116b6511d: int3   
  0x0000000116b6511e: int3   
  0x0000000116b6511f: int3   

----------------------------------------------------------------------
lookupswitch  171 lookupswitch  [0x0000000116b65160, 0x0000000116b65260]  256 bytes

  0x0000000116b65160: mov    (%rsp),%eax
  0x0000000116b65163: add    $0x8,%rsp
  0x0000000116b65167: mov    %rsp,-0x28(%rsp)
  0x0000000116b6516c: sub    $0x80,%rsp
  0x0000000116b65173: mov    %rax,0x78(%rsp)
  0x0000000116b65178: mov    %rcx,0x70(%rsp)
  0x0000000116b6517d: mov    %rdx,0x68(%rsp)
  0x0000000116b65182: mov    %rbx,0x60(%rsp)
  0x0000000116b65187: mov    %rbp,0x50(%rsp)
  0x0000000116b6518c: mov    %rsi,0x48(%rsp)
  0x0000000116b65191: mov    %rdi,0x40(%rsp)
  0x0000000116b65196: mov    %r8,0x38(%rsp)
  0x0000000116b6519b: mov    %r9,0x30(%rsp)
  0x0000000116b651a0: mov    %r10,0x28(%rsp)
  0x0000000116b651a5: mov    %r11,0x20(%rsp)
  0x0000000116b651aa: mov    %r12,0x18(%rsp)
  0x0000000116b651af: mov    %r13,0x10(%rsp)
  0x0000000116b651b4: mov    %r14,0x8(%rsp)
  0x0000000116b651b9: mov    %r15,(%rsp)
  0x0000000116b651bd: movabs $0x10ccb06fa,%rdi
  0x0000000116b651c7: movabs $0x116b65167,%rsi
  0x0000000116b651d1: mov    %rsp,%rdx
  0x0000000116b651d4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b651d8: callq  0x000000010c7dd830
  0x0000000116b651dd: hlt    
  0x0000000116b651de: mov    %rsp,-0x28(%rsp)
  0x0000000116b651e3: sub    $0x80,%rsp
  0x0000000116b651ea: mov    %rax,0x78(%rsp)
  0x0000000116b651ef: mov    %rcx,0x70(%rsp)
  0x0000000116b651f4: mov    %rdx,0x68(%rsp)
  0x0000000116b651f9: mov    %rbx,0x60(%rsp)
  0x0000000116b651fe: mov    %rbp,0x50(%rsp)
  0x0000000116b65203: mov    %rsi,0x48(%rsp)
  0x0000000116b65208: mov    %rdi,0x40(%rsp)
  0x0000000116b6520d: mov    %r8,0x38(%rsp)
  0x0000000116b65212: mov    %r9,0x30(%rsp)
  0x0000000116b65217: mov    %r10,0x28(%rsp)
  0x0000000116b6521c: mov    %r11,0x20(%rsp)
  0x0000000116b65221: mov    %r12,0x18(%rsp)
  0x0000000116b65226: mov    %r13,0x10(%rsp)
  0x0000000116b6522b: mov    %r14,0x8(%rsp)
  0x0000000116b65230: mov    %r15,(%rsp)
  0x0000000116b65234: movabs $0x10cb763be,%rdi
  0x0000000116b6523e: movabs $0x116b651de,%rsi
  0x0000000116b65248: mov    %rsp,%rdx
  0x0000000116b6524b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6524f: callq  0x000000010c7dd830
  0x0000000116b65254: hlt    
  0x0000000116b65255: nop
  0x0000000116b65256: nop
  0x0000000116b65257: nop
  0x0000000116b65258: int3   
  0x0000000116b65259: int3   
  0x0000000116b6525a: int3   
  0x0000000116b6525b: int3   
  0x0000000116b6525c: int3   
  0x0000000116b6525d: int3   
  0x0000000116b6525e: int3   
  0x0000000116b6525f: int3   

----------------------------------------------------------------------
ireturn  172 ireturn  [0x0000000116b652a0, 0x0000000116b65d00]  2656 bytes

  0x0000000116b652a0: mov    (%rsp),%eax
  0x0000000116b652a3: add    $0x8,%rsp
  0x0000000116b652a7: mov    -0x18(%rbp),%rcx
  0x0000000116b652ab: mov    0x10(%rcx),%rcx
  0x0000000116b652af: movzbl 0x1e(%rcx),%ecx
  0x0000000116b652b3: cmp    $0xa,%ecx
  0x0000000116b652b6: je     0x0000000116b652f2
  0x0000000116b652bc: cmp    $0x4,%ecx
  0x0000000116b652bf: jne    0x0000000116b652cd
  0x0000000116b652c5: and    $0x1,%eax
  0x0000000116b652c8: jmpq   0x0000000116b652f2
  0x0000000116b652cd: cmp    $0x8,%ecx
  0x0000000116b652d0: jne    0x0000000116b652de
  0x0000000116b652d6: movsbl %al,%eax
  0x0000000116b652d9: jmpq   0x0000000116b652f2
  0x0000000116b652de: cmp    $0x5,%ecx
  0x0000000116b652e1: jne    0x0000000116b652ef
  0x0000000116b652e7: movzwl %ax,%eax
  0x0000000116b652ea: jmpq   0x0000000116b652f2
  0x0000000116b652ef: movswl %ax,%eax
  0x0000000116b652f2: mov    0x33d(%r15),%dl
  0x0000000116b652f9: movb   $0x0,0x33d(%r15)
  0x0000000116b65301: mov    -0x18(%rbp),%rbx
  0x0000000116b65305: mov    0x28(%rbx),%ecx
  0x0000000116b65308: test   $0x20,%ecx
  0x0000000116b6530e: je     0x0000000116b658a9
  0x0000000116b65314: test   $0xff,%dl
  0x0000000116b65317: jne    0x0000000116b65b9d
  0x0000000116b6531d: push   %rax
  0x0000000116b6531e: lea    -0x50(%rbp),%rsi
  0x0000000116b65322: mov    0x8(%rsi),%rax
  0x0000000116b65326: test   %rax,%rax
  0x0000000116b65329: jne    0x0000000116b65606
  0x0000000116b6532f: mov    (%rsp),%eax
  0x0000000116b65332: add    $0x8,%rsp
  0x0000000116b65336: callq  0x0000000116b65340
  0x0000000116b6533b: jmpq   0x0000000116b6558f
  0x0000000116b65340: lea    0x8(%rsp),%rax
  0x0000000116b65345: mov    %r13,-0x38(%rbp)
  0x0000000116b65349: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b65351: je     0x0000000116b653ce
  0x0000000116b65357: mov    %rsp,-0x28(%rsp)
  0x0000000116b6535c: sub    $0x80,%rsp
  0x0000000116b65363: mov    %rax,0x78(%rsp)
  0x0000000116b65368: mov    %rcx,0x70(%rsp)
  0x0000000116b6536d: mov    %rdx,0x68(%rsp)
  0x0000000116b65372: mov    %rbx,0x60(%rsp)
  0x0000000116b65377: mov    %rbp,0x50(%rsp)
  0x0000000116b6537c: mov    %rsi,0x48(%rsp)
  0x0000000116b65381: mov    %rdi,0x40(%rsp)
  0x0000000116b65386: mov    %r8,0x38(%rsp)
  0x0000000116b6538b: mov    %r9,0x30(%rsp)
  0x0000000116b65390: mov    %r10,0x28(%rsp)
  0x0000000116b65395: mov    %r11,0x20(%rsp)
  0x0000000116b6539a: mov    %r12,0x18(%rsp)
  0x0000000116b6539f: mov    %r13,0x10(%rsp)
  0x0000000116b653a4: mov    %r14,0x8(%rsp)
  0x0000000116b653a9: mov    %r15,(%rsp)
  0x0000000116b653ad: movabs $0x10cc2363b,%rdi
  0x0000000116b653b7: movabs $0x116b65357,%rsi
  0x0000000116b653c1: mov    %rsp,%rdx
  0x0000000116b653c4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b653c8: callq  0x000000010c7dd830
  0x0000000116b653cd: hlt    
  0x0000000116b653ce: push   %r10
  0x0000000116b653d0: cmp    -0x9d1eb27(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b653d7: je     0x0000000116b65454
  ;; call_VM_base: heap base corrupted?
  0x0000000116b653dd: mov    %rsp,-0x28(%rsp)
  0x0000000116b653e2: sub    $0x80,%rsp
  0x0000000116b653e9: mov    %rax,0x78(%rsp)
  0x0000000116b653ee: mov    %rcx,0x70(%rsp)
  0x0000000116b653f3: mov    %rdx,0x68(%rsp)
  0x0000000116b653f8: mov    %rbx,0x60(%rsp)
  0x0000000116b653fd: mov    %rbp,0x50(%rsp)
  0x0000000116b65402: mov    %rsi,0x48(%rsp)
  0x0000000116b65407: mov    %rdi,0x40(%rsp)
  0x0000000116b6540c: mov    %r8,0x38(%rsp)
  0x0000000116b65411: mov    %r9,0x30(%rsp)
  0x0000000116b65416: mov    %r10,0x28(%rsp)
  0x0000000116b6541b: mov    %r11,0x20(%rsp)
  0x0000000116b65420: mov    %r12,0x18(%rsp)
  0x0000000116b65425: mov    %r13,0x10(%rsp)
  0x0000000116b6542a: mov    %r14,0x8(%rsp)
  0x0000000116b6542f: mov    %r15,(%rsp)
  0x0000000116b65433: movabs $0x10cc63f17,%rdi
  0x0000000116b6543d: movabs $0x116b653dd,%rsi
  0x0000000116b65447: mov    %rsp,%rdx
  0x0000000116b6544a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6544e: callq  0x000000010c7dd830
  0x0000000116b65453: hlt    
  0x0000000116b65454: pop    %r10
  0x0000000116b65456: mov    %r15,%rdi
  0x0000000116b65459: mov    %rbp,0x290(%r15)
  0x0000000116b65460: mov    %rax,0x280(%r15)
  0x0000000116b65467: test   $0xf,%esp
  0x0000000116b6546d: je     0x0000000116b65485
  0x0000000116b65473: sub    $0x8,%rsp
  0x0000000116b65477: callq  0x000000010c5892a0
  0x0000000116b6547c: add    $0x8,%rsp
  0x0000000116b65480: jmpq   0x0000000116b6548a
  0x0000000116b65485: callq  0x000000010c5892a0
  0x0000000116b6548a: push   %rax
  0x0000000116b6548b: push   %rdi
  0x0000000116b6548c: push   %rsi
  0x0000000116b6548d: push   %rdx
  0x0000000116b6548e: push   %rcx
  0x0000000116b6548f: push   %r8
  0x0000000116b65491: push   %r9
  0x0000000116b65493: push   %r10
  0x0000000116b65495: mov    %rsp,%r10
  0x0000000116b65498: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6549c: push   %r10
  0x0000000116b6549e: push   %r11
  0x0000000116b654a0: mov    $0x109,%edi
  0x0000000116b654a5: movabs $0x7ff815049fd5,%r10
  0x0000000116b654af: callq  *%r10
  0x0000000116b654b2: pop    %r11
  0x0000000116b654b4: pop    %rsp
  0x0000000116b654b5: pop    %r10
  0x0000000116b654b7: pop    %r9
  0x0000000116b654b9: pop    %r8
  0x0000000116b654bb: pop    %rcx
  0x0000000116b654bc: pop    %rdx
  0x0000000116b654bd: pop    %rsi
  0x0000000116b654be: pop    %rdi
  0x0000000116b654bf: cmp    %rax,%r15
  0x0000000116b654c2: je     0x0000000116b6553f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b654c8: mov    %rsp,-0x28(%rsp)
  0x0000000116b654cd: sub    $0x80,%rsp
  0x0000000116b654d4: mov    %rax,0x78(%rsp)
  0x0000000116b654d9: mov    %rcx,0x70(%rsp)
  0x0000000116b654de: mov    %rdx,0x68(%rsp)
  0x0000000116b654e3: mov    %rbx,0x60(%rsp)
  0x0000000116b654e8: mov    %rbp,0x50(%rsp)
  0x0000000116b654ed: mov    %rsi,0x48(%rsp)
  0x0000000116b654f2: mov    %rdi,0x40(%rsp)
  0x0000000116b654f7: mov    %r8,0x38(%rsp)
  0x0000000116b654fc: mov    %r9,0x30(%rsp)
  0x0000000116b65501: mov    %r10,0x28(%rsp)
  0x0000000116b65506: mov    %r11,0x20(%rsp)
  0x0000000116b6550b: mov    %r12,0x18(%rsp)
  0x0000000116b65510: mov    %r13,0x10(%rsp)
  0x0000000116b65515: mov    %r14,0x8(%rsp)
  0x0000000116b6551a: mov    %r15,(%rsp)
  0x0000000116b6551e: movabs $0x10cc6405e,%rdi
  0x0000000116b65528: movabs $0x116b654c8,%rsi
  0x0000000116b65532: mov    %rsp,%rdx
  0x0000000116b65535: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65539: callq  0x000000010c7dd830
  0x0000000116b6553e: hlt    
  0x0000000116b6553f: pop    %rax
  0x0000000116b65540: movabs $0x0,%r10
  0x0000000116b6554a: mov    %r10,0x280(%r15)
  0x0000000116b65551: movabs $0x0,%r10
  0x0000000116b6555b: mov    %r10,0x290(%r15)
  0x0000000116b65562: movabs $0x0,%r10
  0x0000000116b6556c: mov    %r10,0x288(%r15)
  0x0000000116b65573: cmpq   $0x0,0x8(%r15)
  0x0000000116b6557b: je     0x0000000116b65586
  0x0000000116b65581: jmpq   0x0000000116b30420
  0x0000000116b65586: mov    -0x38(%rbp),%r13
  0x0000000116b6558a: mov    -0x30(%rbp),%r14
  0x0000000116b6558e: retq   
  0x0000000116b6558f: mov    %rsp,-0x28(%rsp)
  0x0000000116b65594: sub    $0x80,%rsp
  0x0000000116b6559b: mov    %rax,0x78(%rsp)
  0x0000000116b655a0: mov    %rcx,0x70(%rsp)
  0x0000000116b655a5: mov    %rdx,0x68(%rsp)
  0x0000000116b655aa: mov    %rbx,0x60(%rsp)
  0x0000000116b655af: mov    %rbp,0x50(%rsp)
  0x0000000116b655b4: mov    %rsi,0x48(%rsp)
  0x0000000116b655b9: mov    %rdi,0x40(%rsp)
  0x0000000116b655be: mov    %r8,0x38(%rsp)
  0x0000000116b655c3: mov    %r9,0x30(%rsp)
  0x0000000116b655c8: mov    %r10,0x28(%rsp)
  0x0000000116b655cd: mov    %r11,0x20(%rsp)
  0x0000000116b655d2: mov    %r12,0x18(%rsp)
  0x0000000116b655d7: mov    %r13,0x10(%rsp)
  0x0000000116b655dc: mov    %r14,0x8(%rsp)
  0x0000000116b655e1: mov    %r15,(%rsp)
  0x0000000116b655e5: movabs $0x10cb763be,%rdi
  0x0000000116b655ef: movabs $0x116b6558f,%rsi
  0x0000000116b655f9: mov    %rsp,%rdx
  0x0000000116b655fc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65600: callq  0x000000010c7dd830
  0x0000000116b65605: hlt    
  0x0000000116b65606: mov    %r13,-0x38(%rbp)
  0x0000000116b6560a: lea    (%rsi),%rax
  0x0000000116b6560d: mov    0x8(%rsi),%rcx
  0x0000000116b65611: movq   $0x0,0x8(%rsi)
  0x0000000116b65619: mov    (%rcx),%rdx
  0x0000000116b6561c: and    $0x7,%rdx
  0x0000000116b65620: cmp    $0x5,%rdx
  0x0000000116b65624: je     0x0000000116b6589e
  0x0000000116b6562a: mov    (%rax),%rdx
  0x0000000116b6562d: test   %rdx,%rdx
  0x0000000116b65630: je     0x0000000116b6589e
  0x0000000116b65636: lock cmpxchg %rdx,(%rcx)
  0x0000000116b6563b: je     0x0000000116b6589e
  0x0000000116b65641: mov    %rcx,0x8(%rsi)
  0x0000000116b65645: callq  0x0000000116b6564f
  0x0000000116b6564a: jmpq   0x0000000116b6589e
  0x0000000116b6564f: lea    0x8(%rsp),%rax
  0x0000000116b65654: mov    %r13,-0x38(%rbp)
  0x0000000116b65658: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b65660: je     0x0000000116b656dd
  0x0000000116b65666: mov    %rsp,-0x28(%rsp)
  0x0000000116b6566b: sub    $0x80,%rsp
  0x0000000116b65672: mov    %rax,0x78(%rsp)
  0x0000000116b65677: mov    %rcx,0x70(%rsp)
  0x0000000116b6567c: mov    %rdx,0x68(%rsp)
  0x0000000116b65681: mov    %rbx,0x60(%rsp)
  0x0000000116b65686: mov    %rbp,0x50(%rsp)
  0x0000000116b6568b: mov    %rsi,0x48(%rsp)
  0x0000000116b65690: mov    %rdi,0x40(%rsp)
  0x0000000116b65695: mov    %r8,0x38(%rsp)
  0x0000000116b6569a: mov    %r9,0x30(%rsp)
  0x0000000116b6569f: mov    %r10,0x28(%rsp)
  0x0000000116b656a4: mov    %r11,0x20(%rsp)
  0x0000000116b656a9: mov    %r12,0x18(%rsp)
  0x0000000116b656ae: mov    %r13,0x10(%rsp)
  0x0000000116b656b3: mov    %r14,0x8(%rsp)
  0x0000000116b656b8: mov    %r15,(%rsp)
  0x0000000116b656bc: movabs $0x10cc2363b,%rdi
  0x0000000116b656c6: movabs $0x116b65666,%rsi
  0x0000000116b656d0: mov    %rsp,%rdx
  0x0000000116b656d3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b656d7: callq  0x000000010c7dd830
  0x0000000116b656dc: hlt    
  0x0000000116b656dd: push   %r10
  0x0000000116b656df: cmp    -0x9d1ee36(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b656e6: je     0x0000000116b65763
  ;; call_VM_base: heap base corrupted?
  0x0000000116b656ec: mov    %rsp,-0x28(%rsp)
  0x0000000116b656f1: sub    $0x80,%rsp
  0x0000000116b656f8: mov    %rax,0x78(%rsp)
  0x0000000116b656fd: mov    %rcx,0x70(%rsp)
  0x0000000116b65702: mov    %rdx,0x68(%rsp)
  0x0000000116b65707: mov    %rbx,0x60(%rsp)
  0x0000000116b6570c: mov    %rbp,0x50(%rsp)
  0x0000000116b65711: mov    %rsi,0x48(%rsp)
  0x0000000116b65716: mov    %rdi,0x40(%rsp)
  0x0000000116b6571b: mov    %r8,0x38(%rsp)
  0x0000000116b65720: mov    %r9,0x30(%rsp)
  0x0000000116b65725: mov    %r10,0x28(%rsp)
  0x0000000116b6572a: mov    %r11,0x20(%rsp)
  0x0000000116b6572f: mov    %r12,0x18(%rsp)
  0x0000000116b65734: mov    %r13,0x10(%rsp)
  0x0000000116b65739: mov    %r14,0x8(%rsp)
  0x0000000116b6573e: mov    %r15,(%rsp)
  0x0000000116b65742: movabs $0x10cc63f17,%rdi
  0x0000000116b6574c: movabs $0x116b656ec,%rsi
  0x0000000116b65756: mov    %rsp,%rdx
  0x0000000116b65759: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6575d: callq  0x000000010c7dd830
  0x0000000116b65762: hlt    
  0x0000000116b65763: pop    %r10
  0x0000000116b65765: mov    %r15,%rdi
  0x0000000116b65768: mov    %rbp,0x290(%r15)
  0x0000000116b6576f: mov    %rax,0x280(%r15)
  0x0000000116b65776: test   $0xf,%esp
  0x0000000116b6577c: je     0x0000000116b65794
  0x0000000116b65782: sub    $0x8,%rsp
  0x0000000116b65786: callq  0x000000010c588f80
  0x0000000116b6578b: add    $0x8,%rsp
  0x0000000116b6578f: jmpq   0x0000000116b65799
  0x0000000116b65794: callq  0x000000010c588f80
  0x0000000116b65799: push   %rax
  0x0000000116b6579a: push   %rdi
  0x0000000116b6579b: push   %rsi
  0x0000000116b6579c: push   %rdx
  0x0000000116b6579d: push   %rcx
  0x0000000116b6579e: push   %r8
  0x0000000116b657a0: push   %r9
  0x0000000116b657a2: push   %r10
  0x0000000116b657a4: mov    %rsp,%r10
  0x0000000116b657a7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b657ab: push   %r10
  0x0000000116b657ad: push   %r11
  0x0000000116b657af: mov    $0x109,%edi
  0x0000000116b657b4: movabs $0x7ff815049fd5,%r10
  0x0000000116b657be: callq  *%r10
  0x0000000116b657c1: pop    %r11
  0x0000000116b657c3: pop    %rsp
  0x0000000116b657c4: pop    %r10
  0x0000000116b657c6: pop    %r9
  0x0000000116b657c8: pop    %r8
  0x0000000116b657ca: pop    %rcx
  0x0000000116b657cb: pop    %rdx
  0x0000000116b657cc: pop    %rsi
  0x0000000116b657cd: pop    %rdi
  0x0000000116b657ce: cmp    %rax,%r15
  0x0000000116b657d1: je     0x0000000116b6584e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b657d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b657dc: sub    $0x80,%rsp
  0x0000000116b657e3: mov    %rax,0x78(%rsp)
  0x0000000116b657e8: mov    %rcx,0x70(%rsp)
  0x0000000116b657ed: mov    %rdx,0x68(%rsp)
  0x0000000116b657f2: mov    %rbx,0x60(%rsp)
  0x0000000116b657f7: mov    %rbp,0x50(%rsp)
  0x0000000116b657fc: mov    %rsi,0x48(%rsp)
  0x0000000116b65801: mov    %rdi,0x40(%rsp)
  0x0000000116b65806: mov    %r8,0x38(%rsp)
  0x0000000116b6580b: mov    %r9,0x30(%rsp)
  0x0000000116b65810: mov    %r10,0x28(%rsp)
  0x0000000116b65815: mov    %r11,0x20(%rsp)
  0x0000000116b6581a: mov    %r12,0x18(%rsp)
  0x0000000116b6581f: mov    %r13,0x10(%rsp)
  0x0000000116b65824: mov    %r14,0x8(%rsp)
  0x0000000116b65829: mov    %r15,(%rsp)
  0x0000000116b6582d: movabs $0x10cc6405e,%rdi
  0x0000000116b65837: movabs $0x116b657d7,%rsi
  0x0000000116b65841: mov    %rsp,%rdx
  0x0000000116b65844: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65848: callq  0x000000010c7dd830
  0x0000000116b6584d: hlt    
  0x0000000116b6584e: pop    %rax
  0x0000000116b6584f: movabs $0x0,%r10
  0x0000000116b65859: mov    %r10,0x280(%r15)
  0x0000000116b65860: movabs $0x0,%r10
  0x0000000116b6586a: mov    %r10,0x290(%r15)
  0x0000000116b65871: movabs $0x0,%r10
  0x0000000116b6587b: mov    %r10,0x288(%r15)
  0x0000000116b65882: cmpq   $0x0,0x8(%r15)
  0x0000000116b6588a: je     0x0000000116b65895
  0x0000000116b65890: jmpq   0x0000000116b30420
  0x0000000116b65895: mov    -0x38(%rbp),%r13
  0x0000000116b65899: mov    -0x30(%rbp),%r14
  0x0000000116b6589d: retq   
  0x0000000116b6589e: mov    -0x38(%rbp),%r13
  0x0000000116b658a2: mov    (%rsp),%eax
  0x0000000116b658a5: add    $0x8,%rsp
  0x0000000116b658a9: mov    -0x40(%rbp),%rsi
  0x0000000116b658ad: lea    -0x40(%rbp),%rbx
  0x0000000116b658b1: jmpq   0x0000000116b65b98
  0x0000000116b658b6: callq  0x0000000116b658c0
  0x0000000116b658bb: jmpq   0x0000000116b65b0f
  0x0000000116b658c0: lea    0x8(%rsp),%rax
  0x0000000116b658c5: mov    %r13,-0x38(%rbp)
  0x0000000116b658c9: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b658d1: je     0x0000000116b6594e
  0x0000000116b658d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b658dc: sub    $0x80,%rsp
  0x0000000116b658e3: mov    %rax,0x78(%rsp)
  0x0000000116b658e8: mov    %rcx,0x70(%rsp)
  0x0000000116b658ed: mov    %rdx,0x68(%rsp)
  0x0000000116b658f2: mov    %rbx,0x60(%rsp)
  0x0000000116b658f7: mov    %rbp,0x50(%rsp)
  0x0000000116b658fc: mov    %rsi,0x48(%rsp)
  0x0000000116b65901: mov    %rdi,0x40(%rsp)
  0x0000000116b65906: mov    %r8,0x38(%rsp)
  0x0000000116b6590b: mov    %r9,0x30(%rsp)
  0x0000000116b65910: mov    %r10,0x28(%rsp)
  0x0000000116b65915: mov    %r11,0x20(%rsp)
  0x0000000116b6591a: mov    %r12,0x18(%rsp)
  0x0000000116b6591f: mov    %r13,0x10(%rsp)
  0x0000000116b65924: mov    %r14,0x8(%rsp)
  0x0000000116b65929: mov    %r15,(%rsp)
  0x0000000116b6592d: movabs $0x10cc2363b,%rdi
  0x0000000116b65937: movabs $0x116b658d7,%rsi
  0x0000000116b65941: mov    %rsp,%rdx
  0x0000000116b65944: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65948: callq  0x000000010c7dd830
  0x0000000116b6594d: hlt    
  0x0000000116b6594e: push   %r10
  0x0000000116b65950: cmp    -0x9d1f0a7(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b65957: je     0x0000000116b659d4
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6595d: mov    %rsp,-0x28(%rsp)
  0x0000000116b65962: sub    $0x80,%rsp
  0x0000000116b65969: mov    %rax,0x78(%rsp)
  0x0000000116b6596e: mov    %rcx,0x70(%rsp)
  0x0000000116b65973: mov    %rdx,0x68(%rsp)
  0x0000000116b65978: mov    %rbx,0x60(%rsp)
  0x0000000116b6597d: mov    %rbp,0x50(%rsp)
  0x0000000116b65982: mov    %rsi,0x48(%rsp)
  0x0000000116b65987: mov    %rdi,0x40(%rsp)
  0x0000000116b6598c: mov    %r8,0x38(%rsp)
  0x0000000116b65991: mov    %r9,0x30(%rsp)
  0x0000000116b65996: mov    %r10,0x28(%rsp)
  0x0000000116b6599b: mov    %r11,0x20(%rsp)
  0x0000000116b659a0: mov    %r12,0x18(%rsp)
  0x0000000116b659a5: mov    %r13,0x10(%rsp)
  0x0000000116b659aa: mov    %r14,0x8(%rsp)
  0x0000000116b659af: mov    %r15,(%rsp)
  0x0000000116b659b3: movabs $0x10cc63f17,%rdi
  0x0000000116b659bd: movabs $0x116b6595d,%rsi
  0x0000000116b659c7: mov    %rsp,%rdx
  0x0000000116b659ca: and    $0xfffffffffffffff0,%rsp
  0x0000000116b659ce: callq  0x000000010c7dd830
  0x0000000116b659d3: hlt    
  0x0000000116b659d4: pop    %r10
  0x0000000116b659d6: mov    %r15,%rdi
  0x0000000116b659d9: mov    %rbp,0x290(%r15)
  0x0000000116b659e0: mov    %rax,0x280(%r15)
  0x0000000116b659e7: test   $0xf,%esp
  0x0000000116b659ed: je     0x0000000116b65a05
  0x0000000116b659f3: sub    $0x8,%rsp
  0x0000000116b659f7: callq  0x000000010c5892a0
  0x0000000116b659fc: add    $0x8,%rsp
  0x0000000116b65a00: jmpq   0x0000000116b65a0a
  0x0000000116b65a05: callq  0x000000010c5892a0
  0x0000000116b65a0a: push   %rax
  0x0000000116b65a0b: push   %rdi
  0x0000000116b65a0c: push   %rsi
  0x0000000116b65a0d: push   %rdx
  0x0000000116b65a0e: push   %rcx
  0x0000000116b65a0f: push   %r8
  0x0000000116b65a11: push   %r9
  0x0000000116b65a13: push   %r10
  0x0000000116b65a15: mov    %rsp,%r10
  0x0000000116b65a18: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65a1c: push   %r10
  0x0000000116b65a1e: push   %r11
  0x0000000116b65a20: mov    $0x109,%edi
  0x0000000116b65a25: movabs $0x7ff815049fd5,%r10
  0x0000000116b65a2f: callq  *%r10
  0x0000000116b65a32: pop    %r11
  0x0000000116b65a34: pop    %rsp
  0x0000000116b65a35: pop    %r10
  0x0000000116b65a37: pop    %r9
  0x0000000116b65a39: pop    %r8
  0x0000000116b65a3b: pop    %rcx
  0x0000000116b65a3c: pop    %rdx
  0x0000000116b65a3d: pop    %rsi
  0x0000000116b65a3e: pop    %rdi
  0x0000000116b65a3f: cmp    %rax,%r15
  0x0000000116b65a42: je     0x0000000116b65abf
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b65a48: mov    %rsp,-0x28(%rsp)
  0x0000000116b65a4d: sub    $0x80,%rsp
  0x0000000116b65a54: mov    %rax,0x78(%rsp)
  0x0000000116b65a59: mov    %rcx,0x70(%rsp)
  0x0000000116b65a5e: mov    %rdx,0x68(%rsp)
  0x0000000116b65a63: mov    %rbx,0x60(%rsp)
  0x0000000116b65a68: mov    %rbp,0x50(%rsp)
  0x0000000116b65a6d: mov    %rsi,0x48(%rsp)
  0x0000000116b65a72: mov    %rdi,0x40(%rsp)
  0x0000000116b65a77: mov    %r8,0x38(%rsp)
  0x0000000116b65a7c: mov    %r9,0x30(%rsp)
  0x0000000116b65a81: mov    %r10,0x28(%rsp)
  0x0000000116b65a86: mov    %r11,0x20(%rsp)
  0x0000000116b65a8b: mov    %r12,0x18(%rsp)
  0x0000000116b65a90: mov    %r13,0x10(%rsp)
  0x0000000116b65a95: mov    %r14,0x8(%rsp)
  0x0000000116b65a9a: mov    %r15,(%rsp)
  0x0000000116b65a9e: movabs $0x10cc6405e,%rdi
  0x0000000116b65aa8: movabs $0x116b65a48,%rsi
  0x0000000116b65ab2: mov    %rsp,%rdx
  0x0000000116b65ab5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65ab9: callq  0x000000010c7dd830
  0x0000000116b65abe: hlt    
  0x0000000116b65abf: pop    %rax
  0x0000000116b65ac0: movabs $0x0,%r10
  0x0000000116b65aca: mov    %r10,0x280(%r15)
  0x0000000116b65ad1: movabs $0x0,%r10
  0x0000000116b65adb: mov    %r10,0x290(%r15)
  0x0000000116b65ae2: movabs $0x0,%r10
  0x0000000116b65aec: mov    %r10,0x288(%r15)
  0x0000000116b65af3: cmpq   $0x0,0x8(%r15)
  0x0000000116b65afb: je     0x0000000116b65b06
  0x0000000116b65b01: jmpq   0x0000000116b30420
  0x0000000116b65b06: mov    -0x38(%rbp),%r13
  0x0000000116b65b0a: mov    -0x30(%rbp),%r14
  0x0000000116b65b0e: retq   
  0x0000000116b65b0f: mov    %rsp,-0x28(%rsp)
  0x0000000116b65b14: sub    $0x80,%rsp
  0x0000000116b65b1b: mov    %rax,0x78(%rsp)
  0x0000000116b65b20: mov    %rcx,0x70(%rsp)
  0x0000000116b65b25: mov    %rdx,0x68(%rsp)
  0x0000000116b65b2a: mov    %rbx,0x60(%rsp)
  0x0000000116b65b2f: mov    %rbp,0x50(%rsp)
  0x0000000116b65b34: mov    %rsi,0x48(%rsp)
  0x0000000116b65b39: mov    %rdi,0x40(%rsp)
  0x0000000116b65b3e: mov    %r8,0x38(%rsp)
  0x0000000116b65b43: mov    %r9,0x30(%rsp)
  0x0000000116b65b48: mov    %r10,0x28(%rsp)
  0x0000000116b65b4d: mov    %r11,0x20(%rsp)
  0x0000000116b65b52: mov    %r12,0x18(%rsp)
  0x0000000116b65b57: mov    %r13,0x10(%rsp)
  0x0000000116b65b5c: mov    %r14,0x8(%rsp)
  0x0000000116b65b61: mov    %r15,(%rsp)
  0x0000000116b65b65: movabs $0x10cb763be,%rdi
  0x0000000116b65b6f: movabs $0x116b65b0f,%rsi
  0x0000000116b65b79: mov    %rsp,%rdx
  0x0000000116b65b7c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65b80: callq  0x000000010c7dd830
  0x0000000116b65b85: hlt    
  0x0000000116b65b86: cmpq   $0x0,0x8(%rsi)
  0x0000000116b65b8e: jne    0x0000000116b658b6
  0x0000000116b65b94: add    $0x10,%rsi
  0x0000000116b65b98: cmp    %rbx,%rsi
  0x0000000116b65b9b: jne    0x0000000116b65b86
  0x0000000116b65b9d: cmpb   $0x0,-0x9d489a2(%rip)        # 0x000000010ce1d202
  0x0000000116b65ba4: je     0x0000000116b65c61
  0x0000000116b65baa: push   %rax
  0x0000000116b65bab: mov    -0x18(%rbp),%rsi
  0x0000000116b65baf: mov    %r15,%rdi
  0x0000000116b65bb2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b65bba: je     0x0000000116b65c37
  0x0000000116b65bc0: mov    %rsp,-0x28(%rsp)
  0x0000000116b65bc5: sub    $0x80,%rsp
  0x0000000116b65bcc: mov    %rax,0x78(%rsp)
  0x0000000116b65bd1: mov    %rcx,0x70(%rsp)
  0x0000000116b65bd6: mov    %rdx,0x68(%rsp)
  0x0000000116b65bdb: mov    %rbx,0x60(%rsp)
  0x0000000116b65be0: mov    %rbp,0x50(%rsp)
  0x0000000116b65be5: mov    %rsi,0x48(%rsp)
  0x0000000116b65bea: mov    %rdi,0x40(%rsp)
  0x0000000116b65bef: mov    %r8,0x38(%rsp)
  0x0000000116b65bf4: mov    %r9,0x30(%rsp)
  0x0000000116b65bf9: mov    %r10,0x28(%rsp)
  0x0000000116b65bfe: mov    %r11,0x20(%rsp)
  0x0000000116b65c03: mov    %r12,0x18(%rsp)
  0x0000000116b65c08: mov    %r13,0x10(%rsp)
  0x0000000116b65c0d: mov    %r14,0x8(%rsp)
  0x0000000116b65c12: mov    %r15,(%rsp)
  0x0000000116b65c16: movabs $0x10cc2363b,%rdi
  0x0000000116b65c20: movabs $0x116b65bc0,%rsi
  0x0000000116b65c2a: mov    %rsp,%rdx
  0x0000000116b65c2d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65c31: callq  0x000000010c7dd830
  0x0000000116b65c36: hlt    
  0x0000000116b65c37: test   $0xf,%esp
  0x0000000116b65c3d: je     0x0000000116b65c55
  0x0000000116b65c43: sub    $0x8,%rsp
  0x0000000116b65c47: callq  0x000000010c9c9850
  0x0000000116b65c4c: add    $0x8,%rsp
  0x0000000116b65c50: jmpq   0x0000000116b65c5a
  0x0000000116b65c55: callq  0x000000010c9c9850
  0x0000000116b65c5a: mov    (%rsp),%eax
  0x0000000116b65c5d: add    $0x8,%rsp
  0x0000000116b65c61: mov    -0x8(%rbp),%rbx
  0x0000000116b65c65: leaveq 
  0x0000000116b65c66: pop    %r13
  0x0000000116b65c68: mov    %rbx,%rsp
  0x0000000116b65c6b: jmpq   *%r13
  0x0000000116b65c6e: mov    %rsp,-0x28(%rsp)
  0x0000000116b65c73: sub    $0x80,%rsp
  0x0000000116b65c7a: mov    %rax,0x78(%rsp)
  0x0000000116b65c7f: mov    %rcx,0x70(%rsp)
  0x0000000116b65c84: mov    %rdx,0x68(%rsp)
  0x0000000116b65c89: mov    %rbx,0x60(%rsp)
  0x0000000116b65c8e: mov    %rbp,0x50(%rsp)
  0x0000000116b65c93: mov    %rsi,0x48(%rsp)
  0x0000000116b65c98: mov    %rdi,0x40(%rsp)
  0x0000000116b65c9d: mov    %r8,0x38(%rsp)
  0x0000000116b65ca2: mov    %r9,0x30(%rsp)
  0x0000000116b65ca7: mov    %r10,0x28(%rsp)
  0x0000000116b65cac: mov    %r11,0x20(%rsp)
  0x0000000116b65cb1: mov    %r12,0x18(%rsp)
  0x0000000116b65cb6: mov    %r13,0x10(%rsp)
  0x0000000116b65cbb: mov    %r14,0x8(%rsp)
  0x0000000116b65cc0: mov    %r15,(%rsp)
  0x0000000116b65cc4: movabs $0x10cb763be,%rdi
  0x0000000116b65cce: movabs $0x116b65c6e,%rsi
  0x0000000116b65cd8: mov    %rsp,%rdx
  0x0000000116b65cdb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65cdf: callq  0x000000010c7dd830
  0x0000000116b65ce4: hlt    
  0x0000000116b65ce5: nop
  0x0000000116b65ce6: nop
  0x0000000116b65ce7: nop
  0x0000000116b65ce8: int3   
  0x0000000116b65ce9: int3   
  0x0000000116b65cea: int3   
  0x0000000116b65ceb: int3   
  0x0000000116b65cec: int3   
  0x0000000116b65ced: int3   
  0x0000000116b65cee: int3   
  0x0000000116b65cef: int3   
  0x0000000116b65cf0: int3   
  0x0000000116b65cf1: int3   
  0x0000000116b65cf2: int3   
  0x0000000116b65cf3: int3   
  0x0000000116b65cf4: int3   
  0x0000000116b65cf5: int3   
  0x0000000116b65cf6: int3   
  0x0000000116b65cf7: int3   
  0x0000000116b65cf8: int3   
  0x0000000116b65cf9: int3   
  0x0000000116b65cfa: int3   
  0x0000000116b65cfb: int3   
  0x0000000116b65cfc: int3   
  0x0000000116b65cfd: int3   
  0x0000000116b65cfe: int3   
  0x0000000116b65cff: int3   

----------------------------------------------------------------------
lreturn  173 lreturn  [0x0000000116b65d40, 0x0000000116b66760]  2592 bytes

  0x0000000116b65d40: mov    (%rsp),%rax
  0x0000000116b65d44: add    $0x10,%rsp
  0x0000000116b65d48: mov    0x33d(%r15),%dl
  0x0000000116b65d4f: movb   $0x0,0x33d(%r15)
  0x0000000116b65d57: mov    -0x18(%rbp),%rbx
  0x0000000116b65d5b: mov    0x28(%rbx),%ecx
  0x0000000116b65d5e: test   $0x20,%ecx
  0x0000000116b65d64: je     0x0000000116b66308
  0x0000000116b65d6a: test   $0xff,%dl
  0x0000000116b65d6d: jne    0x0000000116b665fc
  0x0000000116b65d73: sub    $0x10,%rsp
  0x0000000116b65d77: mov    %rax,(%rsp)
  0x0000000116b65d7b: lea    -0x50(%rbp),%rsi
  0x0000000116b65d7f: mov    0x8(%rsi),%rax
  0x0000000116b65d83: test   %rax,%rax
  0x0000000116b65d86: jne    0x0000000116b66064
  0x0000000116b65d8c: mov    (%rsp),%rax
  0x0000000116b65d90: add    $0x10,%rsp
  0x0000000116b65d94: callq  0x0000000116b65d9e
  0x0000000116b65d99: jmpq   0x0000000116b65fed
  0x0000000116b65d9e: lea    0x8(%rsp),%rax
  0x0000000116b65da3: mov    %r13,-0x38(%rbp)
  0x0000000116b65da7: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b65daf: je     0x0000000116b65e2c
  0x0000000116b65db5: mov    %rsp,-0x28(%rsp)
  0x0000000116b65dba: sub    $0x80,%rsp
  0x0000000116b65dc1: mov    %rax,0x78(%rsp)
  0x0000000116b65dc6: mov    %rcx,0x70(%rsp)
  0x0000000116b65dcb: mov    %rdx,0x68(%rsp)
  0x0000000116b65dd0: mov    %rbx,0x60(%rsp)
  0x0000000116b65dd5: mov    %rbp,0x50(%rsp)
  0x0000000116b65dda: mov    %rsi,0x48(%rsp)
  0x0000000116b65ddf: mov    %rdi,0x40(%rsp)
  0x0000000116b65de4: mov    %r8,0x38(%rsp)
  0x0000000116b65de9: mov    %r9,0x30(%rsp)
  0x0000000116b65dee: mov    %r10,0x28(%rsp)
  0x0000000116b65df3: mov    %r11,0x20(%rsp)
  0x0000000116b65df8: mov    %r12,0x18(%rsp)
  0x0000000116b65dfd: mov    %r13,0x10(%rsp)
  0x0000000116b65e02: mov    %r14,0x8(%rsp)
  0x0000000116b65e07: mov    %r15,(%rsp)
  0x0000000116b65e0b: movabs $0x10cc2363b,%rdi
  0x0000000116b65e15: movabs $0x116b65db5,%rsi
  0x0000000116b65e1f: mov    %rsp,%rdx
  0x0000000116b65e22: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65e26: callq  0x000000010c7dd830
  0x0000000116b65e2b: hlt    
  0x0000000116b65e2c: push   %r10
  0x0000000116b65e2e: cmp    -0x9d1f585(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b65e35: je     0x0000000116b65eb2
  ;; call_VM_base: heap base corrupted?
  0x0000000116b65e3b: mov    %rsp,-0x28(%rsp)
  0x0000000116b65e40: sub    $0x80,%rsp
  0x0000000116b65e47: mov    %rax,0x78(%rsp)
  0x0000000116b65e4c: mov    %rcx,0x70(%rsp)
  0x0000000116b65e51: mov    %rdx,0x68(%rsp)
  0x0000000116b65e56: mov    %rbx,0x60(%rsp)
  0x0000000116b65e5b: mov    %rbp,0x50(%rsp)
  0x0000000116b65e60: mov    %rsi,0x48(%rsp)
  0x0000000116b65e65: mov    %rdi,0x40(%rsp)
  0x0000000116b65e6a: mov    %r8,0x38(%rsp)
  0x0000000116b65e6f: mov    %r9,0x30(%rsp)
  0x0000000116b65e74: mov    %r10,0x28(%rsp)
  0x0000000116b65e79: mov    %r11,0x20(%rsp)
  0x0000000116b65e7e: mov    %r12,0x18(%rsp)
  0x0000000116b65e83: mov    %r13,0x10(%rsp)
  0x0000000116b65e88: mov    %r14,0x8(%rsp)
  0x0000000116b65e8d: mov    %r15,(%rsp)
  0x0000000116b65e91: movabs $0x10cc63f17,%rdi
  0x0000000116b65e9b: movabs $0x116b65e3b,%rsi
  0x0000000116b65ea5: mov    %rsp,%rdx
  0x0000000116b65ea8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65eac: callq  0x000000010c7dd830
  0x0000000116b65eb1: hlt    
  0x0000000116b65eb2: pop    %r10
  0x0000000116b65eb4: mov    %r15,%rdi
  0x0000000116b65eb7: mov    %rbp,0x290(%r15)
  0x0000000116b65ebe: mov    %rax,0x280(%r15)
  0x0000000116b65ec5: test   $0xf,%esp
  0x0000000116b65ecb: je     0x0000000116b65ee3
  0x0000000116b65ed1: sub    $0x8,%rsp
  0x0000000116b65ed5: callq  0x000000010c5892a0
  0x0000000116b65eda: add    $0x8,%rsp
  0x0000000116b65ede: jmpq   0x0000000116b65ee8
  0x0000000116b65ee3: callq  0x000000010c5892a0
  0x0000000116b65ee8: push   %rax
  0x0000000116b65ee9: push   %rdi
  0x0000000116b65eea: push   %rsi
  0x0000000116b65eeb: push   %rdx
  0x0000000116b65eec: push   %rcx
  0x0000000116b65eed: push   %r8
  0x0000000116b65eef: push   %r9
  0x0000000116b65ef1: push   %r10
  0x0000000116b65ef3: mov    %rsp,%r10
  0x0000000116b65ef6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65efa: push   %r10
  0x0000000116b65efc: push   %r11
  0x0000000116b65efe: mov    $0x109,%edi
  0x0000000116b65f03: movabs $0x7ff815049fd5,%r10
  0x0000000116b65f0d: callq  *%r10
  0x0000000116b65f10: pop    %r11
  0x0000000116b65f12: pop    %rsp
  0x0000000116b65f13: pop    %r10
  0x0000000116b65f15: pop    %r9
  0x0000000116b65f17: pop    %r8
  0x0000000116b65f19: pop    %rcx
  0x0000000116b65f1a: pop    %rdx
  0x0000000116b65f1b: pop    %rsi
  0x0000000116b65f1c: pop    %rdi
  0x0000000116b65f1d: cmp    %rax,%r15
  0x0000000116b65f20: je     0x0000000116b65f9d
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b65f26: mov    %rsp,-0x28(%rsp)
  0x0000000116b65f2b: sub    $0x80,%rsp
  0x0000000116b65f32: mov    %rax,0x78(%rsp)
  0x0000000116b65f37: mov    %rcx,0x70(%rsp)
  0x0000000116b65f3c: mov    %rdx,0x68(%rsp)
  0x0000000116b65f41: mov    %rbx,0x60(%rsp)
  0x0000000116b65f46: mov    %rbp,0x50(%rsp)
  0x0000000116b65f4b: mov    %rsi,0x48(%rsp)
  0x0000000116b65f50: mov    %rdi,0x40(%rsp)
  0x0000000116b65f55: mov    %r8,0x38(%rsp)
  0x0000000116b65f5a: mov    %r9,0x30(%rsp)
  0x0000000116b65f5f: mov    %r10,0x28(%rsp)
  0x0000000116b65f64: mov    %r11,0x20(%rsp)
  0x0000000116b65f69: mov    %r12,0x18(%rsp)
  0x0000000116b65f6e: mov    %r13,0x10(%rsp)
  0x0000000116b65f73: mov    %r14,0x8(%rsp)
  0x0000000116b65f78: mov    %r15,(%rsp)
  0x0000000116b65f7c: movabs $0x10cc6405e,%rdi
  0x0000000116b65f86: movabs $0x116b65f26,%rsi
  0x0000000116b65f90: mov    %rsp,%rdx
  0x0000000116b65f93: and    $0xfffffffffffffff0,%rsp
  0x0000000116b65f97: callq  0x000000010c7dd830
  0x0000000116b65f9c: hlt    
  0x0000000116b65f9d: pop    %rax
  0x0000000116b65f9e: movabs $0x0,%r10
  0x0000000116b65fa8: mov    %r10,0x280(%r15)
  0x0000000116b65faf: movabs $0x0,%r10
  0x0000000116b65fb9: mov    %r10,0x290(%r15)
  0x0000000116b65fc0: movabs $0x0,%r10
  0x0000000116b65fca: mov    %r10,0x288(%r15)
  0x0000000116b65fd1: cmpq   $0x0,0x8(%r15)
  0x0000000116b65fd9: je     0x0000000116b65fe4
  0x0000000116b65fdf: jmpq   0x0000000116b30420
  0x0000000116b65fe4: mov    -0x38(%rbp),%r13
  0x0000000116b65fe8: mov    -0x30(%rbp),%r14
  0x0000000116b65fec: retq   
  0x0000000116b65fed: mov    %rsp,-0x28(%rsp)
  0x0000000116b65ff2: sub    $0x80,%rsp
  0x0000000116b65ff9: mov    %rax,0x78(%rsp)
  0x0000000116b65ffe: mov    %rcx,0x70(%rsp)
  0x0000000116b66003: mov    %rdx,0x68(%rsp)
  0x0000000116b66008: mov    %rbx,0x60(%rsp)
  0x0000000116b6600d: mov    %rbp,0x50(%rsp)
  0x0000000116b66012: mov    %rsi,0x48(%rsp)
  0x0000000116b66017: mov    %rdi,0x40(%rsp)
  0x0000000116b6601c: mov    %r8,0x38(%rsp)
  0x0000000116b66021: mov    %r9,0x30(%rsp)
  0x0000000116b66026: mov    %r10,0x28(%rsp)
  0x0000000116b6602b: mov    %r11,0x20(%rsp)
  0x0000000116b66030: mov    %r12,0x18(%rsp)
  0x0000000116b66035: mov    %r13,0x10(%rsp)
  0x0000000116b6603a: mov    %r14,0x8(%rsp)
  0x0000000116b6603f: mov    %r15,(%rsp)
  0x0000000116b66043: movabs $0x10cb763be,%rdi
  0x0000000116b6604d: movabs $0x116b65fed,%rsi
  0x0000000116b66057: mov    %rsp,%rdx
  0x0000000116b6605a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6605e: callq  0x000000010c7dd830
  0x0000000116b66063: hlt    
  0x0000000116b66064: mov    %r13,-0x38(%rbp)
  0x0000000116b66068: lea    (%rsi),%rax
  0x0000000116b6606b: mov    0x8(%rsi),%rcx
  0x0000000116b6606f: movq   $0x0,0x8(%rsi)
  0x0000000116b66077: mov    (%rcx),%rdx
  0x0000000116b6607a: and    $0x7,%rdx
  0x0000000116b6607e: cmp    $0x5,%rdx
  0x0000000116b66082: je     0x0000000116b662fc
  0x0000000116b66088: mov    (%rax),%rdx
  0x0000000116b6608b: test   %rdx,%rdx
  0x0000000116b6608e: je     0x0000000116b662fc
  0x0000000116b66094: lock cmpxchg %rdx,(%rcx)
  0x0000000116b66099: je     0x0000000116b662fc
  0x0000000116b6609f: mov    %rcx,0x8(%rsi)
  0x0000000116b660a3: callq  0x0000000116b660ad
  0x0000000116b660a8: jmpq   0x0000000116b662fc
  0x0000000116b660ad: lea    0x8(%rsp),%rax
  0x0000000116b660b2: mov    %r13,-0x38(%rbp)
  0x0000000116b660b6: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b660be: je     0x0000000116b6613b
  0x0000000116b660c4: mov    %rsp,-0x28(%rsp)
  0x0000000116b660c9: sub    $0x80,%rsp
  0x0000000116b660d0: mov    %rax,0x78(%rsp)
  0x0000000116b660d5: mov    %rcx,0x70(%rsp)
  0x0000000116b660da: mov    %rdx,0x68(%rsp)
  0x0000000116b660df: mov    %rbx,0x60(%rsp)
  0x0000000116b660e4: mov    %rbp,0x50(%rsp)
  0x0000000116b660e9: mov    %rsi,0x48(%rsp)
  0x0000000116b660ee: mov    %rdi,0x40(%rsp)
  0x0000000116b660f3: mov    %r8,0x38(%rsp)
  0x0000000116b660f8: mov    %r9,0x30(%rsp)
  0x0000000116b660fd: mov    %r10,0x28(%rsp)
  0x0000000116b66102: mov    %r11,0x20(%rsp)
  0x0000000116b66107: mov    %r12,0x18(%rsp)
  0x0000000116b6610c: mov    %r13,0x10(%rsp)
  0x0000000116b66111: mov    %r14,0x8(%rsp)
  0x0000000116b66116: mov    %r15,(%rsp)
  0x0000000116b6611a: movabs $0x10cc2363b,%rdi
  0x0000000116b66124: movabs $0x116b660c4,%rsi
  0x0000000116b6612e: mov    %rsp,%rdx
  0x0000000116b66131: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66135: callq  0x000000010c7dd830
  0x0000000116b6613a: hlt    
  0x0000000116b6613b: push   %r10
  0x0000000116b6613d: cmp    -0x9d1f894(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b66144: je     0x0000000116b661c1
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6614a: mov    %rsp,-0x28(%rsp)
  0x0000000116b6614f: sub    $0x80,%rsp
  0x0000000116b66156: mov    %rax,0x78(%rsp)
  0x0000000116b6615b: mov    %rcx,0x70(%rsp)
  0x0000000116b66160: mov    %rdx,0x68(%rsp)
  0x0000000116b66165: mov    %rbx,0x60(%rsp)
  0x0000000116b6616a: mov    %rbp,0x50(%rsp)
  0x0000000116b6616f: mov    %rsi,0x48(%rsp)
  0x0000000116b66174: mov    %rdi,0x40(%rsp)
  0x0000000116b66179: mov    %r8,0x38(%rsp)
  0x0000000116b6617e: mov    %r9,0x30(%rsp)
  0x0000000116b66183: mov    %r10,0x28(%rsp)
  0x0000000116b66188: mov    %r11,0x20(%rsp)
  0x0000000116b6618d: mov    %r12,0x18(%rsp)
  0x0000000116b66192: mov    %r13,0x10(%rsp)
  0x0000000116b66197: mov    %r14,0x8(%rsp)
  0x0000000116b6619c: mov    %r15,(%rsp)
  0x0000000116b661a0: movabs $0x10cc63f17,%rdi
  0x0000000116b661aa: movabs $0x116b6614a,%rsi
  0x0000000116b661b4: mov    %rsp,%rdx
  0x0000000116b661b7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b661bb: callq  0x000000010c7dd830
  0x0000000116b661c0: hlt    
  0x0000000116b661c1: pop    %r10
  0x0000000116b661c3: mov    %r15,%rdi
  0x0000000116b661c6: mov    %rbp,0x290(%r15)
  0x0000000116b661cd: mov    %rax,0x280(%r15)
  0x0000000116b661d4: test   $0xf,%esp
  0x0000000116b661da: je     0x0000000116b661f2
  0x0000000116b661e0: sub    $0x8,%rsp
  0x0000000116b661e4: callq  0x000000010c588f80
  0x0000000116b661e9: add    $0x8,%rsp
  0x0000000116b661ed: jmpq   0x0000000116b661f7
  0x0000000116b661f2: callq  0x000000010c588f80
  0x0000000116b661f7: push   %rax
  0x0000000116b661f8: push   %rdi
  0x0000000116b661f9: push   %rsi
  0x0000000116b661fa: push   %rdx
  0x0000000116b661fb: push   %rcx
  0x0000000116b661fc: push   %r8
  0x0000000116b661fe: push   %r9
  0x0000000116b66200: push   %r10
  0x0000000116b66202: mov    %rsp,%r10
  0x0000000116b66205: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66209: push   %r10
  0x0000000116b6620b: push   %r11
  0x0000000116b6620d: mov    $0x109,%edi
  0x0000000116b66212: movabs $0x7ff815049fd5,%r10
  0x0000000116b6621c: callq  *%r10
  0x0000000116b6621f: pop    %r11
  0x0000000116b66221: pop    %rsp
  0x0000000116b66222: pop    %r10
  0x0000000116b66224: pop    %r9
  0x0000000116b66226: pop    %r8
  0x0000000116b66228: pop    %rcx
  0x0000000116b66229: pop    %rdx
  0x0000000116b6622a: pop    %rsi
  0x0000000116b6622b: pop    %rdi
  0x0000000116b6622c: cmp    %rax,%r15
  0x0000000116b6622f: je     0x0000000116b662ac
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b66235: mov    %rsp,-0x28(%rsp)
  0x0000000116b6623a: sub    $0x80,%rsp
  0x0000000116b66241: mov    %rax,0x78(%rsp)
  0x0000000116b66246: mov    %rcx,0x70(%rsp)
  0x0000000116b6624b: mov    %rdx,0x68(%rsp)
  0x0000000116b66250: mov    %rbx,0x60(%rsp)
  0x0000000116b66255: mov    %rbp,0x50(%rsp)
  0x0000000116b6625a: mov    %rsi,0x48(%rsp)
  0x0000000116b6625f: mov    %rdi,0x40(%rsp)
  0x0000000116b66264: mov    %r8,0x38(%rsp)
  0x0000000116b66269: mov    %r9,0x30(%rsp)
  0x0000000116b6626e: mov    %r10,0x28(%rsp)
  0x0000000116b66273: mov    %r11,0x20(%rsp)
  0x0000000116b66278: mov    %r12,0x18(%rsp)
  0x0000000116b6627d: mov    %r13,0x10(%rsp)
  0x0000000116b66282: mov    %r14,0x8(%rsp)
  0x0000000116b66287: mov    %r15,(%rsp)
  0x0000000116b6628b: movabs $0x10cc6405e,%rdi
  0x0000000116b66295: movabs $0x116b66235,%rsi
  0x0000000116b6629f: mov    %rsp,%rdx
  0x0000000116b662a2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b662a6: callq  0x000000010c7dd830
  0x0000000116b662ab: hlt    
  0x0000000116b662ac: pop    %rax
  0x0000000116b662ad: movabs $0x0,%r10
  0x0000000116b662b7: mov    %r10,0x280(%r15)
  0x0000000116b662be: movabs $0x0,%r10
  0x0000000116b662c8: mov    %r10,0x290(%r15)
  0x0000000116b662cf: movabs $0x0,%r10
  0x0000000116b662d9: mov    %r10,0x288(%r15)
  0x0000000116b662e0: cmpq   $0x0,0x8(%r15)
  0x0000000116b662e8: je     0x0000000116b662f3
  0x0000000116b662ee: jmpq   0x0000000116b30420
  0x0000000116b662f3: mov    -0x38(%rbp),%r13
  0x0000000116b662f7: mov    -0x30(%rbp),%r14
  0x0000000116b662fb: retq   
  0x0000000116b662fc: mov    -0x38(%rbp),%r13
  0x0000000116b66300: mov    (%rsp),%rax
  0x0000000116b66304: add    $0x10,%rsp
  0x0000000116b66308: mov    -0x40(%rbp),%rsi
  0x0000000116b6630c: lea    -0x40(%rbp),%rbx
  0x0000000116b66310: jmpq   0x0000000116b665f7
  0x0000000116b66315: callq  0x0000000116b6631f
  0x0000000116b6631a: jmpq   0x0000000116b6656e
  0x0000000116b6631f: lea    0x8(%rsp),%rax
  0x0000000116b66324: mov    %r13,-0x38(%rbp)
  0x0000000116b66328: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b66330: je     0x0000000116b663ad
  0x0000000116b66336: mov    %rsp,-0x28(%rsp)
  0x0000000116b6633b: sub    $0x80,%rsp
  0x0000000116b66342: mov    %rax,0x78(%rsp)
  0x0000000116b66347: mov    %rcx,0x70(%rsp)
  0x0000000116b6634c: mov    %rdx,0x68(%rsp)
  0x0000000116b66351: mov    %rbx,0x60(%rsp)
  0x0000000116b66356: mov    %rbp,0x50(%rsp)
  0x0000000116b6635b: mov    %rsi,0x48(%rsp)
  0x0000000116b66360: mov    %rdi,0x40(%rsp)
  0x0000000116b66365: mov    %r8,0x38(%rsp)
  0x0000000116b6636a: mov    %r9,0x30(%rsp)
  0x0000000116b6636f: mov    %r10,0x28(%rsp)
  0x0000000116b66374: mov    %r11,0x20(%rsp)
  0x0000000116b66379: mov    %r12,0x18(%rsp)
  0x0000000116b6637e: mov    %r13,0x10(%rsp)
  0x0000000116b66383: mov    %r14,0x8(%rsp)
  0x0000000116b66388: mov    %r15,(%rsp)
  0x0000000116b6638c: movabs $0x10cc2363b,%rdi
  0x0000000116b66396: movabs $0x116b66336,%rsi
  0x0000000116b663a0: mov    %rsp,%rdx
  0x0000000116b663a3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b663a7: callq  0x000000010c7dd830
  0x0000000116b663ac: hlt    
  0x0000000116b663ad: push   %r10
  0x0000000116b663af: cmp    -0x9d1fb06(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b663b6: je     0x0000000116b66433
  ;; call_VM_base: heap base corrupted?
  0x0000000116b663bc: mov    %rsp,-0x28(%rsp)
  0x0000000116b663c1: sub    $0x80,%rsp
  0x0000000116b663c8: mov    %rax,0x78(%rsp)
  0x0000000116b663cd: mov    %rcx,0x70(%rsp)
  0x0000000116b663d2: mov    %rdx,0x68(%rsp)
  0x0000000116b663d7: mov    %rbx,0x60(%rsp)
  0x0000000116b663dc: mov    %rbp,0x50(%rsp)
  0x0000000116b663e1: mov    %rsi,0x48(%rsp)
  0x0000000116b663e6: mov    %rdi,0x40(%rsp)
  0x0000000116b663eb: mov    %r8,0x38(%rsp)
  0x0000000116b663f0: mov    %r9,0x30(%rsp)
  0x0000000116b663f5: mov    %r10,0x28(%rsp)
  0x0000000116b663fa: mov    %r11,0x20(%rsp)
  0x0000000116b663ff: mov    %r12,0x18(%rsp)
  0x0000000116b66404: mov    %r13,0x10(%rsp)
  0x0000000116b66409: mov    %r14,0x8(%rsp)
  0x0000000116b6640e: mov    %r15,(%rsp)
  0x0000000116b66412: movabs $0x10cc63f17,%rdi
  0x0000000116b6641c: movabs $0x116b663bc,%rsi
  0x0000000116b66426: mov    %rsp,%rdx
  0x0000000116b66429: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6642d: callq  0x000000010c7dd830
  0x0000000116b66432: hlt    
  0x0000000116b66433: pop    %r10
  0x0000000116b66435: mov    %r15,%rdi
  0x0000000116b66438: mov    %rbp,0x290(%r15)
  0x0000000116b6643f: mov    %rax,0x280(%r15)
  0x0000000116b66446: test   $0xf,%esp
  0x0000000116b6644c: je     0x0000000116b66464
  0x0000000116b66452: sub    $0x8,%rsp
  0x0000000116b66456: callq  0x000000010c5892a0
  0x0000000116b6645b: add    $0x8,%rsp
  0x0000000116b6645f: jmpq   0x0000000116b66469
  0x0000000116b66464: callq  0x000000010c5892a0
  0x0000000116b66469: push   %rax
  0x0000000116b6646a: push   %rdi
  0x0000000116b6646b: push   %rsi
  0x0000000116b6646c: push   %rdx
  0x0000000116b6646d: push   %rcx
  0x0000000116b6646e: push   %r8
  0x0000000116b66470: push   %r9
  0x0000000116b66472: push   %r10
  0x0000000116b66474: mov    %rsp,%r10
  0x0000000116b66477: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6647b: push   %r10
  0x0000000116b6647d: push   %r11
  0x0000000116b6647f: mov    $0x109,%edi
  0x0000000116b66484: movabs $0x7ff815049fd5,%r10
  0x0000000116b6648e: callq  *%r10
  0x0000000116b66491: pop    %r11
  0x0000000116b66493: pop    %rsp
  0x0000000116b66494: pop    %r10
  0x0000000116b66496: pop    %r9
  0x0000000116b66498: pop    %r8
  0x0000000116b6649a: pop    %rcx
  0x0000000116b6649b: pop    %rdx
  0x0000000116b6649c: pop    %rsi
  0x0000000116b6649d: pop    %rdi
  0x0000000116b6649e: cmp    %rax,%r15
  0x0000000116b664a1: je     0x0000000116b6651e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b664a7: mov    %rsp,-0x28(%rsp)
  0x0000000116b664ac: sub    $0x80,%rsp
  0x0000000116b664b3: mov    %rax,0x78(%rsp)
  0x0000000116b664b8: mov    %rcx,0x70(%rsp)
  0x0000000116b664bd: mov    %rdx,0x68(%rsp)
  0x0000000116b664c2: mov    %rbx,0x60(%rsp)
  0x0000000116b664c7: mov    %rbp,0x50(%rsp)
  0x0000000116b664cc: mov    %rsi,0x48(%rsp)
  0x0000000116b664d1: mov    %rdi,0x40(%rsp)
  0x0000000116b664d6: mov    %r8,0x38(%rsp)
  0x0000000116b664db: mov    %r9,0x30(%rsp)
  0x0000000116b664e0: mov    %r10,0x28(%rsp)
  0x0000000116b664e5: mov    %r11,0x20(%rsp)
  0x0000000116b664ea: mov    %r12,0x18(%rsp)
  0x0000000116b664ef: mov    %r13,0x10(%rsp)
  0x0000000116b664f4: mov    %r14,0x8(%rsp)
  0x0000000116b664f9: mov    %r15,(%rsp)
  0x0000000116b664fd: movabs $0x10cc6405e,%rdi
  0x0000000116b66507: movabs $0x116b664a7,%rsi
  0x0000000116b66511: mov    %rsp,%rdx
  0x0000000116b66514: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66518: callq  0x000000010c7dd830
  0x0000000116b6651d: hlt    
  0x0000000116b6651e: pop    %rax
  0x0000000116b6651f: movabs $0x0,%r10
  0x0000000116b66529: mov    %r10,0x280(%r15)
  0x0000000116b66530: movabs $0x0,%r10
  0x0000000116b6653a: mov    %r10,0x290(%r15)
  0x0000000116b66541: movabs $0x0,%r10
  0x0000000116b6654b: mov    %r10,0x288(%r15)
  0x0000000116b66552: cmpq   $0x0,0x8(%r15)
  0x0000000116b6655a: je     0x0000000116b66565
  0x0000000116b66560: jmpq   0x0000000116b30420
  0x0000000116b66565: mov    -0x38(%rbp),%r13
  0x0000000116b66569: mov    -0x30(%rbp),%r14
  0x0000000116b6656d: retq   
  0x0000000116b6656e: mov    %rsp,-0x28(%rsp)
  0x0000000116b66573: sub    $0x80,%rsp
  0x0000000116b6657a: mov    %rax,0x78(%rsp)
  0x0000000116b6657f: mov    %rcx,0x70(%rsp)
  0x0000000116b66584: mov    %rdx,0x68(%rsp)
  0x0000000116b66589: mov    %rbx,0x60(%rsp)
  0x0000000116b6658e: mov    %rbp,0x50(%rsp)
  0x0000000116b66593: mov    %rsi,0x48(%rsp)
  0x0000000116b66598: mov    %rdi,0x40(%rsp)
  0x0000000116b6659d: mov    %r8,0x38(%rsp)
  0x0000000116b665a2: mov    %r9,0x30(%rsp)
  0x0000000116b665a7: mov    %r10,0x28(%rsp)
  0x0000000116b665ac: mov    %r11,0x20(%rsp)
  0x0000000116b665b1: mov    %r12,0x18(%rsp)
  0x0000000116b665b6: mov    %r13,0x10(%rsp)
  0x0000000116b665bb: mov    %r14,0x8(%rsp)
  0x0000000116b665c0: mov    %r15,(%rsp)
  0x0000000116b665c4: movabs $0x10cb763be,%rdi
  0x0000000116b665ce: movabs $0x116b6656e,%rsi
  0x0000000116b665d8: mov    %rsp,%rdx
  0x0000000116b665db: and    $0xfffffffffffffff0,%rsp
  0x0000000116b665df: callq  0x000000010c7dd830
  0x0000000116b665e4: hlt    
  0x0000000116b665e5: cmpq   $0x0,0x8(%rsi)
  0x0000000116b665ed: jne    0x0000000116b66315
  0x0000000116b665f3: add    $0x10,%rsi
  0x0000000116b665f7: cmp    %rbx,%rsi
  0x0000000116b665fa: jne    0x0000000116b665e5
  0x0000000116b665fc: cmpb   $0x0,-0x9d49401(%rip)        # 0x000000010ce1d202
  0x0000000116b66603: je     0x0000000116b666c8
  0x0000000116b66609: sub    $0x10,%rsp
  0x0000000116b6660d: mov    %rax,(%rsp)
  0x0000000116b66611: mov    -0x18(%rbp),%rsi
  0x0000000116b66615: mov    %r15,%rdi
  0x0000000116b66618: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b66620: je     0x0000000116b6669d
  0x0000000116b66626: mov    %rsp,-0x28(%rsp)
  0x0000000116b6662b: sub    $0x80,%rsp
  0x0000000116b66632: mov    %rax,0x78(%rsp)
  0x0000000116b66637: mov    %rcx,0x70(%rsp)
  0x0000000116b6663c: mov    %rdx,0x68(%rsp)
  0x0000000116b66641: mov    %rbx,0x60(%rsp)
  0x0000000116b66646: mov    %rbp,0x50(%rsp)
  0x0000000116b6664b: mov    %rsi,0x48(%rsp)
  0x0000000116b66650: mov    %rdi,0x40(%rsp)
  0x0000000116b66655: mov    %r8,0x38(%rsp)
  0x0000000116b6665a: mov    %r9,0x30(%rsp)
  0x0000000116b6665f: mov    %r10,0x28(%rsp)
  0x0000000116b66664: mov    %r11,0x20(%rsp)
  0x0000000116b66669: mov    %r12,0x18(%rsp)
  0x0000000116b6666e: mov    %r13,0x10(%rsp)
  0x0000000116b66673: mov    %r14,0x8(%rsp)
  0x0000000116b66678: mov    %r15,(%rsp)
  0x0000000116b6667c: movabs $0x10cc2363b,%rdi
  0x0000000116b66686: movabs $0x116b66626,%rsi
  0x0000000116b66690: mov    %rsp,%rdx
  0x0000000116b66693: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66697: callq  0x000000010c7dd830
  0x0000000116b6669c: hlt    
  0x0000000116b6669d: test   $0xf,%esp
  0x0000000116b666a3: je     0x0000000116b666bb
  0x0000000116b666a9: sub    $0x8,%rsp
  0x0000000116b666ad: callq  0x000000010c9c9850
  0x0000000116b666b2: add    $0x8,%rsp
  0x0000000116b666b6: jmpq   0x0000000116b666c0
  0x0000000116b666bb: callq  0x000000010c9c9850
  0x0000000116b666c0: mov    (%rsp),%rax
  0x0000000116b666c4: add    $0x10,%rsp
  0x0000000116b666c8: mov    -0x8(%rbp),%rbx
  0x0000000116b666cc: leaveq 
  0x0000000116b666cd: pop    %r13
  0x0000000116b666cf: mov    %rbx,%rsp
  0x0000000116b666d2: jmpq   *%r13
  0x0000000116b666d5: mov    %rsp,-0x28(%rsp)
  0x0000000116b666da: sub    $0x80,%rsp
  0x0000000116b666e1: mov    %rax,0x78(%rsp)
  0x0000000116b666e6: mov    %rcx,0x70(%rsp)
  0x0000000116b666eb: mov    %rdx,0x68(%rsp)
  0x0000000116b666f0: mov    %rbx,0x60(%rsp)
  0x0000000116b666f5: mov    %rbp,0x50(%rsp)
  0x0000000116b666fa: mov    %rsi,0x48(%rsp)
  0x0000000116b666ff: mov    %rdi,0x40(%rsp)
  0x0000000116b66704: mov    %r8,0x38(%rsp)
  0x0000000116b66709: mov    %r9,0x30(%rsp)
  0x0000000116b6670e: mov    %r10,0x28(%rsp)
  0x0000000116b66713: mov    %r11,0x20(%rsp)
  0x0000000116b66718: mov    %r12,0x18(%rsp)
  0x0000000116b6671d: mov    %r13,0x10(%rsp)
  0x0000000116b66722: mov    %r14,0x8(%rsp)
  0x0000000116b66727: mov    %r15,(%rsp)
  0x0000000116b6672b: movabs $0x10cb763be,%rdi
  0x0000000116b66735: movabs $0x116b666d5,%rsi
  0x0000000116b6673f: mov    %rsp,%rdx
  0x0000000116b66742: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66746: callq  0x000000010c7dd830
  0x0000000116b6674b: hlt    
  0x0000000116b6674c: nop
  0x0000000116b6674d: nop
  0x0000000116b6674e: nop
  0x0000000116b6674f: nop
  0x0000000116b66750: int3   
  0x0000000116b66751: int3   
  0x0000000116b66752: int3   
  0x0000000116b66753: int3   
  0x0000000116b66754: int3   
  0x0000000116b66755: int3   
  0x0000000116b66756: int3   
  0x0000000116b66757: int3   
  0x0000000116b66758: int3   
  0x0000000116b66759: int3   
  0x0000000116b6675a: int3   
  0x0000000116b6675b: int3   
  0x0000000116b6675c: int3   
  0x0000000116b6675d: int3   
  0x0000000116b6675e: int3   
  0x0000000116b6675f: int3   

----------------------------------------------------------------------
freturn  174 freturn  [0x0000000116b667a0, 0x0000000116b671c0]  2592 bytes

  0x0000000116b667a0: vmovss (%rsp),%xmm0
  0x0000000116b667a5: add    $0x8,%rsp
  0x0000000116b667a9: mov    0x33d(%r15),%dl
  0x0000000116b667b0: movb   $0x0,0x33d(%r15)
  0x0000000116b667b8: mov    -0x18(%rbp),%rbx
  0x0000000116b667bc: mov    0x28(%rbx),%ecx
  0x0000000116b667bf: test   $0x20,%ecx
  0x0000000116b667c5: je     0x0000000116b66d6c
  0x0000000116b667cb: test   $0xff,%dl
  0x0000000116b667ce: jne    0x0000000116b67060
  0x0000000116b667d4: sub    $0x8,%rsp
  0x0000000116b667d8: vmovss %xmm0,(%rsp)
  0x0000000116b667dd: lea    -0x50(%rbp),%rsi
  0x0000000116b667e1: mov    0x8(%rsi),%rax
  0x0000000116b667e5: test   %rax,%rax
  0x0000000116b667e8: jne    0x0000000116b66ac7
  0x0000000116b667ee: vmovss (%rsp),%xmm0
  0x0000000116b667f3: add    $0x8,%rsp
  0x0000000116b667f7: callq  0x0000000116b66801
  0x0000000116b667fc: jmpq   0x0000000116b66a50
  0x0000000116b66801: lea    0x8(%rsp),%rax
  0x0000000116b66806: mov    %r13,-0x38(%rbp)
  0x0000000116b6680a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b66812: je     0x0000000116b6688f
  0x0000000116b66818: mov    %rsp,-0x28(%rsp)
  0x0000000116b6681d: sub    $0x80,%rsp
  0x0000000116b66824: mov    %rax,0x78(%rsp)
  0x0000000116b66829: mov    %rcx,0x70(%rsp)
  0x0000000116b6682e: mov    %rdx,0x68(%rsp)
  0x0000000116b66833: mov    %rbx,0x60(%rsp)
  0x0000000116b66838: mov    %rbp,0x50(%rsp)
  0x0000000116b6683d: mov    %rsi,0x48(%rsp)
  0x0000000116b66842: mov    %rdi,0x40(%rsp)
  0x0000000116b66847: mov    %r8,0x38(%rsp)
  0x0000000116b6684c: mov    %r9,0x30(%rsp)
  0x0000000116b66851: mov    %r10,0x28(%rsp)
  0x0000000116b66856: mov    %r11,0x20(%rsp)
  0x0000000116b6685b: mov    %r12,0x18(%rsp)
  0x0000000116b66860: mov    %r13,0x10(%rsp)
  0x0000000116b66865: mov    %r14,0x8(%rsp)
  0x0000000116b6686a: mov    %r15,(%rsp)
  0x0000000116b6686e: movabs $0x10cc2363b,%rdi
  0x0000000116b66878: movabs $0x116b66818,%rsi
  0x0000000116b66882: mov    %rsp,%rdx
  0x0000000116b66885: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66889: callq  0x000000010c7dd830
  0x0000000116b6688e: hlt    
  0x0000000116b6688f: push   %r10
  0x0000000116b66891: cmp    -0x9d1ffe8(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b66898: je     0x0000000116b66915
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6689e: mov    %rsp,-0x28(%rsp)
  0x0000000116b668a3: sub    $0x80,%rsp
  0x0000000116b668aa: mov    %rax,0x78(%rsp)
  0x0000000116b668af: mov    %rcx,0x70(%rsp)
  0x0000000116b668b4: mov    %rdx,0x68(%rsp)
  0x0000000116b668b9: mov    %rbx,0x60(%rsp)
  0x0000000116b668be: mov    %rbp,0x50(%rsp)
  0x0000000116b668c3: mov    %rsi,0x48(%rsp)
  0x0000000116b668c8: mov    %rdi,0x40(%rsp)
  0x0000000116b668cd: mov    %r8,0x38(%rsp)
  0x0000000116b668d2: mov    %r9,0x30(%rsp)
  0x0000000116b668d7: mov    %r10,0x28(%rsp)
  0x0000000116b668dc: mov    %r11,0x20(%rsp)
  0x0000000116b668e1: mov    %r12,0x18(%rsp)
  0x0000000116b668e6: mov    %r13,0x10(%rsp)
  0x0000000116b668eb: mov    %r14,0x8(%rsp)
  0x0000000116b668f0: mov    %r15,(%rsp)
  0x0000000116b668f4: movabs $0x10cc63f17,%rdi
  0x0000000116b668fe: movabs $0x116b6689e,%rsi
  0x0000000116b66908: mov    %rsp,%rdx
  0x0000000116b6690b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6690f: callq  0x000000010c7dd830
  0x0000000116b66914: hlt    
  0x0000000116b66915: pop    %r10
  0x0000000116b66917: mov    %r15,%rdi
  0x0000000116b6691a: mov    %rbp,0x290(%r15)
  0x0000000116b66921: mov    %rax,0x280(%r15)
  0x0000000116b66928: test   $0xf,%esp
  0x0000000116b6692e: je     0x0000000116b66946
  0x0000000116b66934: sub    $0x8,%rsp
  0x0000000116b66938: callq  0x000000010c5892a0
  0x0000000116b6693d: add    $0x8,%rsp
  0x0000000116b66941: jmpq   0x0000000116b6694b
  0x0000000116b66946: callq  0x000000010c5892a0
  0x0000000116b6694b: push   %rax
  0x0000000116b6694c: push   %rdi
  0x0000000116b6694d: push   %rsi
  0x0000000116b6694e: push   %rdx
  0x0000000116b6694f: push   %rcx
  0x0000000116b66950: push   %r8
  0x0000000116b66952: push   %r9
  0x0000000116b66954: push   %r10
  0x0000000116b66956: mov    %rsp,%r10
  0x0000000116b66959: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6695d: push   %r10
  0x0000000116b6695f: push   %r11
  0x0000000116b66961: mov    $0x109,%edi
  0x0000000116b66966: movabs $0x7ff815049fd5,%r10
  0x0000000116b66970: callq  *%r10
  0x0000000116b66973: pop    %r11
  0x0000000116b66975: pop    %rsp
  0x0000000116b66976: pop    %r10
  0x0000000116b66978: pop    %r9
  0x0000000116b6697a: pop    %r8
  0x0000000116b6697c: pop    %rcx
  0x0000000116b6697d: pop    %rdx
  0x0000000116b6697e: pop    %rsi
  0x0000000116b6697f: pop    %rdi
  0x0000000116b66980: cmp    %rax,%r15
  0x0000000116b66983: je     0x0000000116b66a00
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b66989: mov    %rsp,-0x28(%rsp)
  0x0000000116b6698e: sub    $0x80,%rsp
  0x0000000116b66995: mov    %rax,0x78(%rsp)
  0x0000000116b6699a: mov    %rcx,0x70(%rsp)
  0x0000000116b6699f: mov    %rdx,0x68(%rsp)
  0x0000000116b669a4: mov    %rbx,0x60(%rsp)
  0x0000000116b669a9: mov    %rbp,0x50(%rsp)
  0x0000000116b669ae: mov    %rsi,0x48(%rsp)
  0x0000000116b669b3: mov    %rdi,0x40(%rsp)
  0x0000000116b669b8: mov    %r8,0x38(%rsp)
  0x0000000116b669bd: mov    %r9,0x30(%rsp)
  0x0000000116b669c2: mov    %r10,0x28(%rsp)
  0x0000000116b669c7: mov    %r11,0x20(%rsp)
  0x0000000116b669cc: mov    %r12,0x18(%rsp)
  0x0000000116b669d1: mov    %r13,0x10(%rsp)
  0x0000000116b669d6: mov    %r14,0x8(%rsp)
  0x0000000116b669db: mov    %r15,(%rsp)
  0x0000000116b669df: movabs $0x10cc6405e,%rdi
  0x0000000116b669e9: movabs $0x116b66989,%rsi
  0x0000000116b669f3: mov    %rsp,%rdx
  0x0000000116b669f6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b669fa: callq  0x000000010c7dd830
  0x0000000116b669ff: hlt    
  0x0000000116b66a00: pop    %rax
  0x0000000116b66a01: movabs $0x0,%r10
  0x0000000116b66a0b: mov    %r10,0x280(%r15)
  0x0000000116b66a12: movabs $0x0,%r10
  0x0000000116b66a1c: mov    %r10,0x290(%r15)
  0x0000000116b66a23: movabs $0x0,%r10
  0x0000000116b66a2d: mov    %r10,0x288(%r15)
  0x0000000116b66a34: cmpq   $0x0,0x8(%r15)
  0x0000000116b66a3c: je     0x0000000116b66a47
  0x0000000116b66a42: jmpq   0x0000000116b30420
  0x0000000116b66a47: mov    -0x38(%rbp),%r13
  0x0000000116b66a4b: mov    -0x30(%rbp),%r14
  0x0000000116b66a4f: retq   
  0x0000000116b66a50: mov    %rsp,-0x28(%rsp)
  0x0000000116b66a55: sub    $0x80,%rsp
  0x0000000116b66a5c: mov    %rax,0x78(%rsp)
  0x0000000116b66a61: mov    %rcx,0x70(%rsp)
  0x0000000116b66a66: mov    %rdx,0x68(%rsp)
  0x0000000116b66a6b: mov    %rbx,0x60(%rsp)
  0x0000000116b66a70: mov    %rbp,0x50(%rsp)
  0x0000000116b66a75: mov    %rsi,0x48(%rsp)
  0x0000000116b66a7a: mov    %rdi,0x40(%rsp)
  0x0000000116b66a7f: mov    %r8,0x38(%rsp)
  0x0000000116b66a84: mov    %r9,0x30(%rsp)
  0x0000000116b66a89: mov    %r10,0x28(%rsp)
  0x0000000116b66a8e: mov    %r11,0x20(%rsp)
  0x0000000116b66a93: mov    %r12,0x18(%rsp)
  0x0000000116b66a98: mov    %r13,0x10(%rsp)
  0x0000000116b66a9d: mov    %r14,0x8(%rsp)
  0x0000000116b66aa2: mov    %r15,(%rsp)
  0x0000000116b66aa6: movabs $0x10cb763be,%rdi
  0x0000000116b66ab0: movabs $0x116b66a50,%rsi
  0x0000000116b66aba: mov    %rsp,%rdx
  0x0000000116b66abd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66ac1: callq  0x000000010c7dd830
  0x0000000116b66ac6: hlt    
  0x0000000116b66ac7: mov    %r13,-0x38(%rbp)
  0x0000000116b66acb: lea    (%rsi),%rax
  0x0000000116b66ace: mov    0x8(%rsi),%rcx
  0x0000000116b66ad2: movq   $0x0,0x8(%rsi)
  0x0000000116b66ada: mov    (%rcx),%rdx
  0x0000000116b66add: and    $0x7,%rdx
  0x0000000116b66ae1: cmp    $0x5,%rdx
  0x0000000116b66ae5: je     0x0000000116b66d5f
  0x0000000116b66aeb: mov    (%rax),%rdx
  0x0000000116b66aee: test   %rdx,%rdx
  0x0000000116b66af1: je     0x0000000116b66d5f
  0x0000000116b66af7: lock cmpxchg %rdx,(%rcx)
  0x0000000116b66afc: je     0x0000000116b66d5f
  0x0000000116b66b02: mov    %rcx,0x8(%rsi)
  0x0000000116b66b06: callq  0x0000000116b66b10
  0x0000000116b66b0b: jmpq   0x0000000116b66d5f
  0x0000000116b66b10: lea    0x8(%rsp),%rax
  0x0000000116b66b15: mov    %r13,-0x38(%rbp)
  0x0000000116b66b19: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b66b21: je     0x0000000116b66b9e
  0x0000000116b66b27: mov    %rsp,-0x28(%rsp)
  0x0000000116b66b2c: sub    $0x80,%rsp
  0x0000000116b66b33: mov    %rax,0x78(%rsp)
  0x0000000116b66b38: mov    %rcx,0x70(%rsp)
  0x0000000116b66b3d: mov    %rdx,0x68(%rsp)
  0x0000000116b66b42: mov    %rbx,0x60(%rsp)
  0x0000000116b66b47: mov    %rbp,0x50(%rsp)
  0x0000000116b66b4c: mov    %rsi,0x48(%rsp)
  0x0000000116b66b51: mov    %rdi,0x40(%rsp)
  0x0000000116b66b56: mov    %r8,0x38(%rsp)
  0x0000000116b66b5b: mov    %r9,0x30(%rsp)
  0x0000000116b66b60: mov    %r10,0x28(%rsp)
  0x0000000116b66b65: mov    %r11,0x20(%rsp)
  0x0000000116b66b6a: mov    %r12,0x18(%rsp)
  0x0000000116b66b6f: mov    %r13,0x10(%rsp)
  0x0000000116b66b74: mov    %r14,0x8(%rsp)
  0x0000000116b66b79: mov    %r15,(%rsp)
  0x0000000116b66b7d: movabs $0x10cc2363b,%rdi
  0x0000000116b66b87: movabs $0x116b66b27,%rsi
  0x0000000116b66b91: mov    %rsp,%rdx
  0x0000000116b66b94: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66b98: callq  0x000000010c7dd830
  0x0000000116b66b9d: hlt    
  0x0000000116b66b9e: push   %r10
  0x0000000116b66ba0: cmp    -0x9d202f7(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b66ba7: je     0x0000000116b66c24
  ;; call_VM_base: heap base corrupted?
  0x0000000116b66bad: mov    %rsp,-0x28(%rsp)
  0x0000000116b66bb2: sub    $0x80,%rsp
  0x0000000116b66bb9: mov    %rax,0x78(%rsp)
  0x0000000116b66bbe: mov    %rcx,0x70(%rsp)
  0x0000000116b66bc3: mov    %rdx,0x68(%rsp)
  0x0000000116b66bc8: mov    %rbx,0x60(%rsp)
  0x0000000116b66bcd: mov    %rbp,0x50(%rsp)
  0x0000000116b66bd2: mov    %rsi,0x48(%rsp)
  0x0000000116b66bd7: mov    %rdi,0x40(%rsp)
  0x0000000116b66bdc: mov    %r8,0x38(%rsp)
  0x0000000116b66be1: mov    %r9,0x30(%rsp)
  0x0000000116b66be6: mov    %r10,0x28(%rsp)
  0x0000000116b66beb: mov    %r11,0x20(%rsp)
  0x0000000116b66bf0: mov    %r12,0x18(%rsp)
  0x0000000116b66bf5: mov    %r13,0x10(%rsp)
  0x0000000116b66bfa: mov    %r14,0x8(%rsp)
  0x0000000116b66bff: mov    %r15,(%rsp)
  0x0000000116b66c03: movabs $0x10cc63f17,%rdi
  0x0000000116b66c0d: movabs $0x116b66bad,%rsi
  0x0000000116b66c17: mov    %rsp,%rdx
  0x0000000116b66c1a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66c1e: callq  0x000000010c7dd830
  0x0000000116b66c23: hlt    
  0x0000000116b66c24: pop    %r10
  0x0000000116b66c26: mov    %r15,%rdi
  0x0000000116b66c29: mov    %rbp,0x290(%r15)
  0x0000000116b66c30: mov    %rax,0x280(%r15)
  0x0000000116b66c37: test   $0xf,%esp
  0x0000000116b66c3d: je     0x0000000116b66c55
  0x0000000116b66c43: sub    $0x8,%rsp
  0x0000000116b66c47: callq  0x000000010c588f80
  0x0000000116b66c4c: add    $0x8,%rsp
  0x0000000116b66c50: jmpq   0x0000000116b66c5a
  0x0000000116b66c55: callq  0x000000010c588f80
  0x0000000116b66c5a: push   %rax
  0x0000000116b66c5b: push   %rdi
  0x0000000116b66c5c: push   %rsi
  0x0000000116b66c5d: push   %rdx
  0x0000000116b66c5e: push   %rcx
  0x0000000116b66c5f: push   %r8
  0x0000000116b66c61: push   %r9
  0x0000000116b66c63: push   %r10
  0x0000000116b66c65: mov    %rsp,%r10
  0x0000000116b66c68: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66c6c: push   %r10
  0x0000000116b66c6e: push   %r11
  0x0000000116b66c70: mov    $0x109,%edi
  0x0000000116b66c75: movabs $0x7ff815049fd5,%r10
  0x0000000116b66c7f: callq  *%r10
  0x0000000116b66c82: pop    %r11
  0x0000000116b66c84: pop    %rsp
  0x0000000116b66c85: pop    %r10
  0x0000000116b66c87: pop    %r9
  0x0000000116b66c89: pop    %r8
  0x0000000116b66c8b: pop    %rcx
  0x0000000116b66c8c: pop    %rdx
  0x0000000116b66c8d: pop    %rsi
  0x0000000116b66c8e: pop    %rdi
  0x0000000116b66c8f: cmp    %rax,%r15
  0x0000000116b66c92: je     0x0000000116b66d0f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b66c98: mov    %rsp,-0x28(%rsp)
  0x0000000116b66c9d: sub    $0x80,%rsp
  0x0000000116b66ca4: mov    %rax,0x78(%rsp)
  0x0000000116b66ca9: mov    %rcx,0x70(%rsp)
  0x0000000116b66cae: mov    %rdx,0x68(%rsp)
  0x0000000116b66cb3: mov    %rbx,0x60(%rsp)
  0x0000000116b66cb8: mov    %rbp,0x50(%rsp)
  0x0000000116b66cbd: mov    %rsi,0x48(%rsp)
  0x0000000116b66cc2: mov    %rdi,0x40(%rsp)
  0x0000000116b66cc7: mov    %r8,0x38(%rsp)
  0x0000000116b66ccc: mov    %r9,0x30(%rsp)
  0x0000000116b66cd1: mov    %r10,0x28(%rsp)
  0x0000000116b66cd6: mov    %r11,0x20(%rsp)
  0x0000000116b66cdb: mov    %r12,0x18(%rsp)
  0x0000000116b66ce0: mov    %r13,0x10(%rsp)
  0x0000000116b66ce5: mov    %r14,0x8(%rsp)
  0x0000000116b66cea: mov    %r15,(%rsp)
  0x0000000116b66cee: movabs $0x10cc6405e,%rdi
  0x0000000116b66cf8: movabs $0x116b66c98,%rsi
  0x0000000116b66d02: mov    %rsp,%rdx
  0x0000000116b66d05: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66d09: callq  0x000000010c7dd830
  0x0000000116b66d0e: hlt    
  0x0000000116b66d0f: pop    %rax
  0x0000000116b66d10: movabs $0x0,%r10
  0x0000000116b66d1a: mov    %r10,0x280(%r15)
  0x0000000116b66d21: movabs $0x0,%r10
  0x0000000116b66d2b: mov    %r10,0x290(%r15)
  0x0000000116b66d32: movabs $0x0,%r10
  0x0000000116b66d3c: mov    %r10,0x288(%r15)
  0x0000000116b66d43: cmpq   $0x0,0x8(%r15)
  0x0000000116b66d4b: je     0x0000000116b66d56
  0x0000000116b66d51: jmpq   0x0000000116b30420
  0x0000000116b66d56: mov    -0x38(%rbp),%r13
  0x0000000116b66d5a: mov    -0x30(%rbp),%r14
  0x0000000116b66d5e: retq   
  0x0000000116b66d5f: mov    -0x38(%rbp),%r13
  0x0000000116b66d63: vmovss (%rsp),%xmm0
  0x0000000116b66d68: add    $0x8,%rsp
  0x0000000116b66d6c: mov    -0x40(%rbp),%rsi
  0x0000000116b66d70: lea    -0x40(%rbp),%rbx
  0x0000000116b66d74: jmpq   0x0000000116b6705b
  0x0000000116b66d79: callq  0x0000000116b66d83
  0x0000000116b66d7e: jmpq   0x0000000116b66fd2
  0x0000000116b66d83: lea    0x8(%rsp),%rax
  0x0000000116b66d88: mov    %r13,-0x38(%rbp)
  0x0000000116b66d8c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b66d94: je     0x0000000116b66e11
  0x0000000116b66d9a: mov    %rsp,-0x28(%rsp)
  0x0000000116b66d9f: sub    $0x80,%rsp
  0x0000000116b66da6: mov    %rax,0x78(%rsp)
  0x0000000116b66dab: mov    %rcx,0x70(%rsp)
  0x0000000116b66db0: mov    %rdx,0x68(%rsp)
  0x0000000116b66db5: mov    %rbx,0x60(%rsp)
  0x0000000116b66dba: mov    %rbp,0x50(%rsp)
  0x0000000116b66dbf: mov    %rsi,0x48(%rsp)
  0x0000000116b66dc4: mov    %rdi,0x40(%rsp)
  0x0000000116b66dc9: mov    %r8,0x38(%rsp)
  0x0000000116b66dce: mov    %r9,0x30(%rsp)
  0x0000000116b66dd3: mov    %r10,0x28(%rsp)
  0x0000000116b66dd8: mov    %r11,0x20(%rsp)
  0x0000000116b66ddd: mov    %r12,0x18(%rsp)
  0x0000000116b66de2: mov    %r13,0x10(%rsp)
  0x0000000116b66de7: mov    %r14,0x8(%rsp)
  0x0000000116b66dec: mov    %r15,(%rsp)
  0x0000000116b66df0: movabs $0x10cc2363b,%rdi
  0x0000000116b66dfa: movabs $0x116b66d9a,%rsi
  0x0000000116b66e04: mov    %rsp,%rdx
  0x0000000116b66e07: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66e0b: callq  0x000000010c7dd830
  0x0000000116b66e10: hlt    
  0x0000000116b66e11: push   %r10
  0x0000000116b66e13: cmp    -0x9d2056a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b66e1a: je     0x0000000116b66e97
  ;; call_VM_base: heap base corrupted?
  0x0000000116b66e20: mov    %rsp,-0x28(%rsp)
  0x0000000116b66e25: sub    $0x80,%rsp
  0x0000000116b66e2c: mov    %rax,0x78(%rsp)
  0x0000000116b66e31: mov    %rcx,0x70(%rsp)
  0x0000000116b66e36: mov    %rdx,0x68(%rsp)
  0x0000000116b66e3b: mov    %rbx,0x60(%rsp)
  0x0000000116b66e40: mov    %rbp,0x50(%rsp)
  0x0000000116b66e45: mov    %rsi,0x48(%rsp)
  0x0000000116b66e4a: mov    %rdi,0x40(%rsp)
  0x0000000116b66e4f: mov    %r8,0x38(%rsp)
  0x0000000116b66e54: mov    %r9,0x30(%rsp)
  0x0000000116b66e59: mov    %r10,0x28(%rsp)
  0x0000000116b66e5e: mov    %r11,0x20(%rsp)
  0x0000000116b66e63: mov    %r12,0x18(%rsp)
  0x0000000116b66e68: mov    %r13,0x10(%rsp)
  0x0000000116b66e6d: mov    %r14,0x8(%rsp)
  0x0000000116b66e72: mov    %r15,(%rsp)
  0x0000000116b66e76: movabs $0x10cc63f17,%rdi
  0x0000000116b66e80: movabs $0x116b66e20,%rsi
  0x0000000116b66e8a: mov    %rsp,%rdx
  0x0000000116b66e8d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66e91: callq  0x000000010c7dd830
  0x0000000116b66e96: hlt    
  0x0000000116b66e97: pop    %r10
  0x0000000116b66e99: mov    %r15,%rdi
  0x0000000116b66e9c: mov    %rbp,0x290(%r15)
  0x0000000116b66ea3: mov    %rax,0x280(%r15)
  0x0000000116b66eaa: test   $0xf,%esp
  0x0000000116b66eb0: je     0x0000000116b66ec8
  0x0000000116b66eb6: sub    $0x8,%rsp
  0x0000000116b66eba: callq  0x000000010c5892a0
  0x0000000116b66ebf: add    $0x8,%rsp
  0x0000000116b66ec3: jmpq   0x0000000116b66ecd
  0x0000000116b66ec8: callq  0x000000010c5892a0
  0x0000000116b66ecd: push   %rax
  0x0000000116b66ece: push   %rdi
  0x0000000116b66ecf: push   %rsi
  0x0000000116b66ed0: push   %rdx
  0x0000000116b66ed1: push   %rcx
  0x0000000116b66ed2: push   %r8
  0x0000000116b66ed4: push   %r9
  0x0000000116b66ed6: push   %r10
  0x0000000116b66ed8: mov    %rsp,%r10
  0x0000000116b66edb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66edf: push   %r10
  0x0000000116b66ee1: push   %r11
  0x0000000116b66ee3: mov    $0x109,%edi
  0x0000000116b66ee8: movabs $0x7ff815049fd5,%r10
  0x0000000116b66ef2: callq  *%r10
  0x0000000116b66ef5: pop    %r11
  0x0000000116b66ef7: pop    %rsp
  0x0000000116b66ef8: pop    %r10
  0x0000000116b66efa: pop    %r9
  0x0000000116b66efc: pop    %r8
  0x0000000116b66efe: pop    %rcx
  0x0000000116b66eff: pop    %rdx
  0x0000000116b66f00: pop    %rsi
  0x0000000116b66f01: pop    %rdi
  0x0000000116b66f02: cmp    %rax,%r15
  0x0000000116b66f05: je     0x0000000116b66f82
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b66f0b: mov    %rsp,-0x28(%rsp)
  0x0000000116b66f10: sub    $0x80,%rsp
  0x0000000116b66f17: mov    %rax,0x78(%rsp)
  0x0000000116b66f1c: mov    %rcx,0x70(%rsp)
  0x0000000116b66f21: mov    %rdx,0x68(%rsp)
  0x0000000116b66f26: mov    %rbx,0x60(%rsp)
  0x0000000116b66f2b: mov    %rbp,0x50(%rsp)
  0x0000000116b66f30: mov    %rsi,0x48(%rsp)
  0x0000000116b66f35: mov    %rdi,0x40(%rsp)
  0x0000000116b66f3a: mov    %r8,0x38(%rsp)
  0x0000000116b66f3f: mov    %r9,0x30(%rsp)
  0x0000000116b66f44: mov    %r10,0x28(%rsp)
  0x0000000116b66f49: mov    %r11,0x20(%rsp)
  0x0000000116b66f4e: mov    %r12,0x18(%rsp)
  0x0000000116b66f53: mov    %r13,0x10(%rsp)
  0x0000000116b66f58: mov    %r14,0x8(%rsp)
  0x0000000116b66f5d: mov    %r15,(%rsp)
  0x0000000116b66f61: movabs $0x10cc6405e,%rdi
  0x0000000116b66f6b: movabs $0x116b66f0b,%rsi
  0x0000000116b66f75: mov    %rsp,%rdx
  0x0000000116b66f78: and    $0xfffffffffffffff0,%rsp
  0x0000000116b66f7c: callq  0x000000010c7dd830
  0x0000000116b66f81: hlt    
  0x0000000116b66f82: pop    %rax
  0x0000000116b66f83: movabs $0x0,%r10
  0x0000000116b66f8d: mov    %r10,0x280(%r15)
  0x0000000116b66f94: movabs $0x0,%r10
  0x0000000116b66f9e: mov    %r10,0x290(%r15)
  0x0000000116b66fa5: movabs $0x0,%r10
  0x0000000116b66faf: mov    %r10,0x288(%r15)
  0x0000000116b66fb6: cmpq   $0x0,0x8(%r15)
  0x0000000116b66fbe: je     0x0000000116b66fc9
  0x0000000116b66fc4: jmpq   0x0000000116b30420
  0x0000000116b66fc9: mov    -0x38(%rbp),%r13
  0x0000000116b66fcd: mov    -0x30(%rbp),%r14
  0x0000000116b66fd1: retq   
  0x0000000116b66fd2: mov    %rsp,-0x28(%rsp)
  0x0000000116b66fd7: sub    $0x80,%rsp
  0x0000000116b66fde: mov    %rax,0x78(%rsp)
  0x0000000116b66fe3: mov    %rcx,0x70(%rsp)
  0x0000000116b66fe8: mov    %rdx,0x68(%rsp)
  0x0000000116b66fed: mov    %rbx,0x60(%rsp)
  0x0000000116b66ff2: mov    %rbp,0x50(%rsp)
  0x0000000116b66ff7: mov    %rsi,0x48(%rsp)
  0x0000000116b66ffc: mov    %rdi,0x40(%rsp)
  0x0000000116b67001: mov    %r8,0x38(%rsp)
  0x0000000116b67006: mov    %r9,0x30(%rsp)
  0x0000000116b6700b: mov    %r10,0x28(%rsp)
  0x0000000116b67010: mov    %r11,0x20(%rsp)
  0x0000000116b67015: mov    %r12,0x18(%rsp)
  0x0000000116b6701a: mov    %r13,0x10(%rsp)
  0x0000000116b6701f: mov    %r14,0x8(%rsp)
  0x0000000116b67024: mov    %r15,(%rsp)
  0x0000000116b67028: movabs $0x10cb763be,%rdi
  0x0000000116b67032: movabs $0x116b66fd2,%rsi
  0x0000000116b6703c: mov    %rsp,%rdx
  0x0000000116b6703f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67043: callq  0x000000010c7dd830
  0x0000000116b67048: hlt    
  0x0000000116b67049: cmpq   $0x0,0x8(%rsi)
  0x0000000116b67051: jne    0x0000000116b66d79
  0x0000000116b67057: add    $0x10,%rsi
  0x0000000116b6705b: cmp    %rbx,%rsi
  0x0000000116b6705e: jne    0x0000000116b67049
  0x0000000116b67060: cmpb   $0x0,-0x9d49e65(%rip)        # 0x000000010ce1d202
  0x0000000116b67067: je     0x0000000116b6712e
  0x0000000116b6706d: sub    $0x8,%rsp
  0x0000000116b67071: vmovss %xmm0,(%rsp)
  0x0000000116b67076: mov    -0x18(%rbp),%rsi
  0x0000000116b6707a: mov    %r15,%rdi
  0x0000000116b6707d: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b67085: je     0x0000000116b67102
  0x0000000116b6708b: mov    %rsp,-0x28(%rsp)
  0x0000000116b67090: sub    $0x80,%rsp
  0x0000000116b67097: mov    %rax,0x78(%rsp)
  0x0000000116b6709c: mov    %rcx,0x70(%rsp)
  0x0000000116b670a1: mov    %rdx,0x68(%rsp)
  0x0000000116b670a6: mov    %rbx,0x60(%rsp)
  0x0000000116b670ab: mov    %rbp,0x50(%rsp)
  0x0000000116b670b0: mov    %rsi,0x48(%rsp)
  0x0000000116b670b5: mov    %rdi,0x40(%rsp)
  0x0000000116b670ba: mov    %r8,0x38(%rsp)
  0x0000000116b670bf: mov    %r9,0x30(%rsp)
  0x0000000116b670c4: mov    %r10,0x28(%rsp)
  0x0000000116b670c9: mov    %r11,0x20(%rsp)
  0x0000000116b670ce: mov    %r12,0x18(%rsp)
  0x0000000116b670d3: mov    %r13,0x10(%rsp)
  0x0000000116b670d8: mov    %r14,0x8(%rsp)
  0x0000000116b670dd: mov    %r15,(%rsp)
  0x0000000116b670e1: movabs $0x10cc2363b,%rdi
  0x0000000116b670eb: movabs $0x116b6708b,%rsi
  0x0000000116b670f5: mov    %rsp,%rdx
  0x0000000116b670f8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b670fc: callq  0x000000010c7dd830
  0x0000000116b67101: hlt    
  0x0000000116b67102: test   $0xf,%esp
  0x0000000116b67108: je     0x0000000116b67120
  0x0000000116b6710e: sub    $0x8,%rsp
  0x0000000116b67112: callq  0x000000010c9c9850
  0x0000000116b67117: add    $0x8,%rsp
  0x0000000116b6711b: jmpq   0x0000000116b67125
  0x0000000116b67120: callq  0x000000010c9c9850
  0x0000000116b67125: vmovss (%rsp),%xmm0
  0x0000000116b6712a: add    $0x8,%rsp
  0x0000000116b6712e: mov    -0x8(%rbp),%rbx
  0x0000000116b67132: leaveq 
  0x0000000116b67133: pop    %r13
  0x0000000116b67135: mov    %rbx,%rsp
  0x0000000116b67138: jmpq   *%r13
  0x0000000116b6713b: mov    %rsp,-0x28(%rsp)
  0x0000000116b67140: sub    $0x80,%rsp
  0x0000000116b67147: mov    %rax,0x78(%rsp)
  0x0000000116b6714c: mov    %rcx,0x70(%rsp)
  0x0000000116b67151: mov    %rdx,0x68(%rsp)
  0x0000000116b67156: mov    %rbx,0x60(%rsp)
  0x0000000116b6715b: mov    %rbp,0x50(%rsp)
  0x0000000116b67160: mov    %rsi,0x48(%rsp)
  0x0000000116b67165: mov    %rdi,0x40(%rsp)
  0x0000000116b6716a: mov    %r8,0x38(%rsp)
  0x0000000116b6716f: mov    %r9,0x30(%rsp)
  0x0000000116b67174: mov    %r10,0x28(%rsp)
  0x0000000116b67179: mov    %r11,0x20(%rsp)
  0x0000000116b6717e: mov    %r12,0x18(%rsp)
  0x0000000116b67183: mov    %r13,0x10(%rsp)
  0x0000000116b67188: mov    %r14,0x8(%rsp)
  0x0000000116b6718d: mov    %r15,(%rsp)
  0x0000000116b67191: movabs $0x10cb763be,%rdi
  0x0000000116b6719b: movabs $0x116b6713b,%rsi
  0x0000000116b671a5: mov    %rsp,%rdx
  0x0000000116b671a8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b671ac: callq  0x000000010c7dd830
  0x0000000116b671b1: hlt    
  0x0000000116b671b2: nop
  0x0000000116b671b3: nop
  0x0000000116b671b4: nop
  0x0000000116b671b5: nop
  0x0000000116b671b6: nop
  0x0000000116b671b7: nop
  0x0000000116b671b8: int3   
  0x0000000116b671b9: int3   
  0x0000000116b671ba: int3   
  0x0000000116b671bb: int3   
  0x0000000116b671bc: int3   
  0x0000000116b671bd: int3   
  0x0000000116b671be: int3   
  0x0000000116b671bf: int3   

----------------------------------------------------------------------
dreturn  175 dreturn  [0x0000000116b67200, 0x0000000116b67c20]  2592 bytes

  0x0000000116b67200: vmovsd (%rsp),%xmm0
  0x0000000116b67205: add    $0x10,%rsp
  0x0000000116b67209: mov    0x33d(%r15),%dl
  0x0000000116b67210: movb   $0x0,0x33d(%r15)
  0x0000000116b67218: mov    -0x18(%rbp),%rbx
  0x0000000116b6721c: mov    0x28(%rbx),%ecx
  0x0000000116b6721f: test   $0x20,%ecx
  0x0000000116b67225: je     0x0000000116b677cc
  0x0000000116b6722b: test   $0xff,%dl
  0x0000000116b6722e: jne    0x0000000116b67ac0
  0x0000000116b67234: sub    $0x10,%rsp
  0x0000000116b67238: vmovsd %xmm0,(%rsp)
  0x0000000116b6723d: lea    -0x50(%rbp),%rsi
  0x0000000116b67241: mov    0x8(%rsi),%rax
  0x0000000116b67245: test   %rax,%rax
  0x0000000116b67248: jne    0x0000000116b67527
  0x0000000116b6724e: vmovsd (%rsp),%xmm0
  0x0000000116b67253: add    $0x10,%rsp
  0x0000000116b67257: callq  0x0000000116b67261
  0x0000000116b6725c: jmpq   0x0000000116b674b0
  0x0000000116b67261: lea    0x8(%rsp),%rax
  0x0000000116b67266: mov    %r13,-0x38(%rbp)
  0x0000000116b6726a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b67272: je     0x0000000116b672ef
  0x0000000116b67278: mov    %rsp,-0x28(%rsp)
  0x0000000116b6727d: sub    $0x80,%rsp
  0x0000000116b67284: mov    %rax,0x78(%rsp)
  0x0000000116b67289: mov    %rcx,0x70(%rsp)
  0x0000000116b6728e: mov    %rdx,0x68(%rsp)
  0x0000000116b67293: mov    %rbx,0x60(%rsp)
  0x0000000116b67298: mov    %rbp,0x50(%rsp)
  0x0000000116b6729d: mov    %rsi,0x48(%rsp)
  0x0000000116b672a2: mov    %rdi,0x40(%rsp)
  0x0000000116b672a7: mov    %r8,0x38(%rsp)
  0x0000000116b672ac: mov    %r9,0x30(%rsp)
  0x0000000116b672b1: mov    %r10,0x28(%rsp)
  0x0000000116b672b6: mov    %r11,0x20(%rsp)
  0x0000000116b672bb: mov    %r12,0x18(%rsp)
  0x0000000116b672c0: mov    %r13,0x10(%rsp)
  0x0000000116b672c5: mov    %r14,0x8(%rsp)
  0x0000000116b672ca: mov    %r15,(%rsp)
  0x0000000116b672ce: movabs $0x10cc2363b,%rdi
  0x0000000116b672d8: movabs $0x116b67278,%rsi
  0x0000000116b672e2: mov    %rsp,%rdx
  0x0000000116b672e5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b672e9: callq  0x000000010c7dd830
  0x0000000116b672ee: hlt    
  0x0000000116b672ef: push   %r10
  0x0000000116b672f1: cmp    -0x9d20a48(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b672f8: je     0x0000000116b67375
  ;; call_VM_base: heap base corrupted?
  0x0000000116b672fe: mov    %rsp,-0x28(%rsp)
  0x0000000116b67303: sub    $0x80,%rsp
  0x0000000116b6730a: mov    %rax,0x78(%rsp)
  0x0000000116b6730f: mov    %rcx,0x70(%rsp)
  0x0000000116b67314: mov    %rdx,0x68(%rsp)
  0x0000000116b67319: mov    %rbx,0x60(%rsp)
  0x0000000116b6731e: mov    %rbp,0x50(%rsp)
  0x0000000116b67323: mov    %rsi,0x48(%rsp)
  0x0000000116b67328: mov    %rdi,0x40(%rsp)
  0x0000000116b6732d: mov    %r8,0x38(%rsp)
  0x0000000116b67332: mov    %r9,0x30(%rsp)
  0x0000000116b67337: mov    %r10,0x28(%rsp)
  0x0000000116b6733c: mov    %r11,0x20(%rsp)
  0x0000000116b67341: mov    %r12,0x18(%rsp)
  0x0000000116b67346: mov    %r13,0x10(%rsp)
  0x0000000116b6734b: mov    %r14,0x8(%rsp)
  0x0000000116b67350: mov    %r15,(%rsp)
  0x0000000116b67354: movabs $0x10cc63f17,%rdi
  0x0000000116b6735e: movabs $0x116b672fe,%rsi
  0x0000000116b67368: mov    %rsp,%rdx
  0x0000000116b6736b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6736f: callq  0x000000010c7dd830
  0x0000000116b67374: hlt    
  0x0000000116b67375: pop    %r10
  0x0000000116b67377: mov    %r15,%rdi
  0x0000000116b6737a: mov    %rbp,0x290(%r15)
  0x0000000116b67381: mov    %rax,0x280(%r15)
  0x0000000116b67388: test   $0xf,%esp
  0x0000000116b6738e: je     0x0000000116b673a6
  0x0000000116b67394: sub    $0x8,%rsp
  0x0000000116b67398: callq  0x000000010c5892a0
  0x0000000116b6739d: add    $0x8,%rsp
  0x0000000116b673a1: jmpq   0x0000000116b673ab
  0x0000000116b673a6: callq  0x000000010c5892a0
  0x0000000116b673ab: push   %rax
  0x0000000116b673ac: push   %rdi
  0x0000000116b673ad: push   %rsi
  0x0000000116b673ae: push   %rdx
  0x0000000116b673af: push   %rcx
  0x0000000116b673b0: push   %r8
  0x0000000116b673b2: push   %r9
  0x0000000116b673b4: push   %r10
  0x0000000116b673b6: mov    %rsp,%r10
  0x0000000116b673b9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b673bd: push   %r10
  0x0000000116b673bf: push   %r11
  0x0000000116b673c1: mov    $0x109,%edi
  0x0000000116b673c6: movabs $0x7ff815049fd5,%r10
  0x0000000116b673d0: callq  *%r10
  0x0000000116b673d3: pop    %r11
  0x0000000116b673d5: pop    %rsp
  0x0000000116b673d6: pop    %r10
  0x0000000116b673d8: pop    %r9
  0x0000000116b673da: pop    %r8
  0x0000000116b673dc: pop    %rcx
  0x0000000116b673dd: pop    %rdx
  0x0000000116b673de: pop    %rsi
  0x0000000116b673df: pop    %rdi
  0x0000000116b673e0: cmp    %rax,%r15
  0x0000000116b673e3: je     0x0000000116b67460
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b673e9: mov    %rsp,-0x28(%rsp)
  0x0000000116b673ee: sub    $0x80,%rsp
  0x0000000116b673f5: mov    %rax,0x78(%rsp)
  0x0000000116b673fa: mov    %rcx,0x70(%rsp)
  0x0000000116b673ff: mov    %rdx,0x68(%rsp)
  0x0000000116b67404: mov    %rbx,0x60(%rsp)
  0x0000000116b67409: mov    %rbp,0x50(%rsp)
  0x0000000116b6740e: mov    %rsi,0x48(%rsp)
  0x0000000116b67413: mov    %rdi,0x40(%rsp)
  0x0000000116b67418: mov    %r8,0x38(%rsp)
  0x0000000116b6741d: mov    %r9,0x30(%rsp)
  0x0000000116b67422: mov    %r10,0x28(%rsp)
  0x0000000116b67427: mov    %r11,0x20(%rsp)
  0x0000000116b6742c: mov    %r12,0x18(%rsp)
  0x0000000116b67431: mov    %r13,0x10(%rsp)
  0x0000000116b67436: mov    %r14,0x8(%rsp)
  0x0000000116b6743b: mov    %r15,(%rsp)
  0x0000000116b6743f: movabs $0x10cc6405e,%rdi
  0x0000000116b67449: movabs $0x116b673e9,%rsi
  0x0000000116b67453: mov    %rsp,%rdx
  0x0000000116b67456: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6745a: callq  0x000000010c7dd830
  0x0000000116b6745f: hlt    
  0x0000000116b67460: pop    %rax
  0x0000000116b67461: movabs $0x0,%r10
  0x0000000116b6746b: mov    %r10,0x280(%r15)
  0x0000000116b67472: movabs $0x0,%r10
  0x0000000116b6747c: mov    %r10,0x290(%r15)
  0x0000000116b67483: movabs $0x0,%r10
  0x0000000116b6748d: mov    %r10,0x288(%r15)
  0x0000000116b67494: cmpq   $0x0,0x8(%r15)
  0x0000000116b6749c: je     0x0000000116b674a7
  0x0000000116b674a2: jmpq   0x0000000116b30420
  0x0000000116b674a7: mov    -0x38(%rbp),%r13
  0x0000000116b674ab: mov    -0x30(%rbp),%r14
  0x0000000116b674af: retq   
  0x0000000116b674b0: mov    %rsp,-0x28(%rsp)
  0x0000000116b674b5: sub    $0x80,%rsp
  0x0000000116b674bc: mov    %rax,0x78(%rsp)
  0x0000000116b674c1: mov    %rcx,0x70(%rsp)
  0x0000000116b674c6: mov    %rdx,0x68(%rsp)
  0x0000000116b674cb: mov    %rbx,0x60(%rsp)
  0x0000000116b674d0: mov    %rbp,0x50(%rsp)
  0x0000000116b674d5: mov    %rsi,0x48(%rsp)
  0x0000000116b674da: mov    %rdi,0x40(%rsp)
  0x0000000116b674df: mov    %r8,0x38(%rsp)
  0x0000000116b674e4: mov    %r9,0x30(%rsp)
  0x0000000116b674e9: mov    %r10,0x28(%rsp)
  0x0000000116b674ee: mov    %r11,0x20(%rsp)
  0x0000000116b674f3: mov    %r12,0x18(%rsp)
  0x0000000116b674f8: mov    %r13,0x10(%rsp)
  0x0000000116b674fd: mov    %r14,0x8(%rsp)
  0x0000000116b67502: mov    %r15,(%rsp)
  0x0000000116b67506: movabs $0x10cb763be,%rdi
  0x0000000116b67510: movabs $0x116b674b0,%rsi
  0x0000000116b6751a: mov    %rsp,%rdx
  0x0000000116b6751d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67521: callq  0x000000010c7dd830
  0x0000000116b67526: hlt    
  0x0000000116b67527: mov    %r13,-0x38(%rbp)
  0x0000000116b6752b: lea    (%rsi),%rax
  0x0000000116b6752e: mov    0x8(%rsi),%rcx
  0x0000000116b67532: movq   $0x0,0x8(%rsi)
  0x0000000116b6753a: mov    (%rcx),%rdx
  0x0000000116b6753d: and    $0x7,%rdx
  0x0000000116b67541: cmp    $0x5,%rdx
  0x0000000116b67545: je     0x0000000116b677bf
  0x0000000116b6754b: mov    (%rax),%rdx
  0x0000000116b6754e: test   %rdx,%rdx
  0x0000000116b67551: je     0x0000000116b677bf
  0x0000000116b67557: lock cmpxchg %rdx,(%rcx)
  0x0000000116b6755c: je     0x0000000116b677bf
  0x0000000116b67562: mov    %rcx,0x8(%rsi)
  0x0000000116b67566: callq  0x0000000116b67570
  0x0000000116b6756b: jmpq   0x0000000116b677bf
  0x0000000116b67570: lea    0x8(%rsp),%rax
  0x0000000116b67575: mov    %r13,-0x38(%rbp)
  0x0000000116b67579: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b67581: je     0x0000000116b675fe
  0x0000000116b67587: mov    %rsp,-0x28(%rsp)
  0x0000000116b6758c: sub    $0x80,%rsp
  0x0000000116b67593: mov    %rax,0x78(%rsp)
  0x0000000116b67598: mov    %rcx,0x70(%rsp)
  0x0000000116b6759d: mov    %rdx,0x68(%rsp)
  0x0000000116b675a2: mov    %rbx,0x60(%rsp)
  0x0000000116b675a7: mov    %rbp,0x50(%rsp)
  0x0000000116b675ac: mov    %rsi,0x48(%rsp)
  0x0000000116b675b1: mov    %rdi,0x40(%rsp)
  0x0000000116b675b6: mov    %r8,0x38(%rsp)
  0x0000000116b675bb: mov    %r9,0x30(%rsp)
  0x0000000116b675c0: mov    %r10,0x28(%rsp)
  0x0000000116b675c5: mov    %r11,0x20(%rsp)
  0x0000000116b675ca: mov    %r12,0x18(%rsp)
  0x0000000116b675cf: mov    %r13,0x10(%rsp)
  0x0000000116b675d4: mov    %r14,0x8(%rsp)
  0x0000000116b675d9: mov    %r15,(%rsp)
  0x0000000116b675dd: movabs $0x10cc2363b,%rdi
  0x0000000116b675e7: movabs $0x116b67587,%rsi
  0x0000000116b675f1: mov    %rsp,%rdx
  0x0000000116b675f4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b675f8: callq  0x000000010c7dd830
  0x0000000116b675fd: hlt    
  0x0000000116b675fe: push   %r10
  0x0000000116b67600: cmp    -0x9d20d57(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b67607: je     0x0000000116b67684
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6760d: mov    %rsp,-0x28(%rsp)
  0x0000000116b67612: sub    $0x80,%rsp
  0x0000000116b67619: mov    %rax,0x78(%rsp)
  0x0000000116b6761e: mov    %rcx,0x70(%rsp)
  0x0000000116b67623: mov    %rdx,0x68(%rsp)
  0x0000000116b67628: mov    %rbx,0x60(%rsp)
  0x0000000116b6762d: mov    %rbp,0x50(%rsp)
  0x0000000116b67632: mov    %rsi,0x48(%rsp)
  0x0000000116b67637: mov    %rdi,0x40(%rsp)
  0x0000000116b6763c: mov    %r8,0x38(%rsp)
  0x0000000116b67641: mov    %r9,0x30(%rsp)
  0x0000000116b67646: mov    %r10,0x28(%rsp)
  0x0000000116b6764b: mov    %r11,0x20(%rsp)
  0x0000000116b67650: mov    %r12,0x18(%rsp)
  0x0000000116b67655: mov    %r13,0x10(%rsp)
  0x0000000116b6765a: mov    %r14,0x8(%rsp)
  0x0000000116b6765f: mov    %r15,(%rsp)
  0x0000000116b67663: movabs $0x10cc63f17,%rdi
  0x0000000116b6766d: movabs $0x116b6760d,%rsi
  0x0000000116b67677: mov    %rsp,%rdx
  0x0000000116b6767a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6767e: callq  0x000000010c7dd830
  0x0000000116b67683: hlt    
  0x0000000116b67684: pop    %r10
  0x0000000116b67686: mov    %r15,%rdi
  0x0000000116b67689: mov    %rbp,0x290(%r15)
  0x0000000116b67690: mov    %rax,0x280(%r15)
  0x0000000116b67697: test   $0xf,%esp
  0x0000000116b6769d: je     0x0000000116b676b5
  0x0000000116b676a3: sub    $0x8,%rsp
  0x0000000116b676a7: callq  0x000000010c588f80
  0x0000000116b676ac: add    $0x8,%rsp
  0x0000000116b676b0: jmpq   0x0000000116b676ba
  0x0000000116b676b5: callq  0x000000010c588f80
  0x0000000116b676ba: push   %rax
  0x0000000116b676bb: push   %rdi
  0x0000000116b676bc: push   %rsi
  0x0000000116b676bd: push   %rdx
  0x0000000116b676be: push   %rcx
  0x0000000116b676bf: push   %r8
  0x0000000116b676c1: push   %r9
  0x0000000116b676c3: push   %r10
  0x0000000116b676c5: mov    %rsp,%r10
  0x0000000116b676c8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b676cc: push   %r10
  0x0000000116b676ce: push   %r11
  0x0000000116b676d0: mov    $0x109,%edi
  0x0000000116b676d5: movabs $0x7ff815049fd5,%r10
  0x0000000116b676df: callq  *%r10
  0x0000000116b676e2: pop    %r11
  0x0000000116b676e4: pop    %rsp
  0x0000000116b676e5: pop    %r10
  0x0000000116b676e7: pop    %r9
  0x0000000116b676e9: pop    %r8
  0x0000000116b676eb: pop    %rcx
  0x0000000116b676ec: pop    %rdx
  0x0000000116b676ed: pop    %rsi
  0x0000000116b676ee: pop    %rdi
  0x0000000116b676ef: cmp    %rax,%r15
  0x0000000116b676f2: je     0x0000000116b6776f
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b676f8: mov    %rsp,-0x28(%rsp)
  0x0000000116b676fd: sub    $0x80,%rsp
  0x0000000116b67704: mov    %rax,0x78(%rsp)
  0x0000000116b67709: mov    %rcx,0x70(%rsp)
  0x0000000116b6770e: mov    %rdx,0x68(%rsp)
  0x0000000116b67713: mov    %rbx,0x60(%rsp)
  0x0000000116b67718: mov    %rbp,0x50(%rsp)
  0x0000000116b6771d: mov    %rsi,0x48(%rsp)
  0x0000000116b67722: mov    %rdi,0x40(%rsp)
  0x0000000116b67727: mov    %r8,0x38(%rsp)
  0x0000000116b6772c: mov    %r9,0x30(%rsp)
  0x0000000116b67731: mov    %r10,0x28(%rsp)
  0x0000000116b67736: mov    %r11,0x20(%rsp)
  0x0000000116b6773b: mov    %r12,0x18(%rsp)
  0x0000000116b67740: mov    %r13,0x10(%rsp)
  0x0000000116b67745: mov    %r14,0x8(%rsp)
  0x0000000116b6774a: mov    %r15,(%rsp)
  0x0000000116b6774e: movabs $0x10cc6405e,%rdi
  0x0000000116b67758: movabs $0x116b676f8,%rsi
  0x0000000116b67762: mov    %rsp,%rdx
  0x0000000116b67765: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67769: callq  0x000000010c7dd830
  0x0000000116b6776e: hlt    
  0x0000000116b6776f: pop    %rax
  0x0000000116b67770: movabs $0x0,%r10
  0x0000000116b6777a: mov    %r10,0x280(%r15)
  0x0000000116b67781: movabs $0x0,%r10
  0x0000000116b6778b: mov    %r10,0x290(%r15)
  0x0000000116b67792: movabs $0x0,%r10
  0x0000000116b6779c: mov    %r10,0x288(%r15)
  0x0000000116b677a3: cmpq   $0x0,0x8(%r15)
  0x0000000116b677ab: je     0x0000000116b677b6
  0x0000000116b677b1: jmpq   0x0000000116b30420
  0x0000000116b677b6: mov    -0x38(%rbp),%r13
  0x0000000116b677ba: mov    -0x30(%rbp),%r14
  0x0000000116b677be: retq   
  0x0000000116b677bf: mov    -0x38(%rbp),%r13
  0x0000000116b677c3: vmovsd (%rsp),%xmm0
  0x0000000116b677c8: add    $0x10,%rsp
  0x0000000116b677cc: mov    -0x40(%rbp),%rsi
  0x0000000116b677d0: lea    -0x40(%rbp),%rbx
  0x0000000116b677d4: jmpq   0x0000000116b67abb
  0x0000000116b677d9: callq  0x0000000116b677e3
  0x0000000116b677de: jmpq   0x0000000116b67a32
  0x0000000116b677e3: lea    0x8(%rsp),%rax
  0x0000000116b677e8: mov    %r13,-0x38(%rbp)
  0x0000000116b677ec: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b677f4: je     0x0000000116b67871
  0x0000000116b677fa: mov    %rsp,-0x28(%rsp)
  0x0000000116b677ff: sub    $0x80,%rsp
  0x0000000116b67806: mov    %rax,0x78(%rsp)
  0x0000000116b6780b: mov    %rcx,0x70(%rsp)
  0x0000000116b67810: mov    %rdx,0x68(%rsp)
  0x0000000116b67815: mov    %rbx,0x60(%rsp)
  0x0000000116b6781a: mov    %rbp,0x50(%rsp)
  0x0000000116b6781f: mov    %rsi,0x48(%rsp)
  0x0000000116b67824: mov    %rdi,0x40(%rsp)
  0x0000000116b67829: mov    %r8,0x38(%rsp)
  0x0000000116b6782e: mov    %r9,0x30(%rsp)
  0x0000000116b67833: mov    %r10,0x28(%rsp)
  0x0000000116b67838: mov    %r11,0x20(%rsp)
  0x0000000116b6783d: mov    %r12,0x18(%rsp)
  0x0000000116b67842: mov    %r13,0x10(%rsp)
  0x0000000116b67847: mov    %r14,0x8(%rsp)
  0x0000000116b6784c: mov    %r15,(%rsp)
  0x0000000116b67850: movabs $0x10cc2363b,%rdi
  0x0000000116b6785a: movabs $0x116b677fa,%rsi
  0x0000000116b67864: mov    %rsp,%rdx
  0x0000000116b67867: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6786b: callq  0x000000010c7dd830
  0x0000000116b67870: hlt    
  0x0000000116b67871: push   %r10
  0x0000000116b67873: cmp    -0x9d20fca(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6787a: je     0x0000000116b678f7
  ;; call_VM_base: heap base corrupted?
  0x0000000116b67880: mov    %rsp,-0x28(%rsp)
  0x0000000116b67885: sub    $0x80,%rsp
  0x0000000116b6788c: mov    %rax,0x78(%rsp)
  0x0000000116b67891: mov    %rcx,0x70(%rsp)
  0x0000000116b67896: mov    %rdx,0x68(%rsp)
  0x0000000116b6789b: mov    %rbx,0x60(%rsp)
  0x0000000116b678a0: mov    %rbp,0x50(%rsp)
  0x0000000116b678a5: mov    %rsi,0x48(%rsp)
  0x0000000116b678aa: mov    %rdi,0x40(%rsp)
  0x0000000116b678af: mov    %r8,0x38(%rsp)
  0x0000000116b678b4: mov    %r9,0x30(%rsp)
  0x0000000116b678b9: mov    %r10,0x28(%rsp)
  0x0000000116b678be: mov    %r11,0x20(%rsp)
  0x0000000116b678c3: mov    %r12,0x18(%rsp)
  0x0000000116b678c8: mov    %r13,0x10(%rsp)
  0x0000000116b678cd: mov    %r14,0x8(%rsp)
  0x0000000116b678d2: mov    %r15,(%rsp)
  0x0000000116b678d6: movabs $0x10cc63f17,%rdi
  0x0000000116b678e0: movabs $0x116b67880,%rsi
  0x0000000116b678ea: mov    %rsp,%rdx
  0x0000000116b678ed: and    $0xfffffffffffffff0,%rsp
  0x0000000116b678f1: callq  0x000000010c7dd830
  0x0000000116b678f6: hlt    
  0x0000000116b678f7: pop    %r10
  0x0000000116b678f9: mov    %r15,%rdi
  0x0000000116b678fc: mov    %rbp,0x290(%r15)
  0x0000000116b67903: mov    %rax,0x280(%r15)
  0x0000000116b6790a: test   $0xf,%esp
  0x0000000116b67910: je     0x0000000116b67928
  0x0000000116b67916: sub    $0x8,%rsp
  0x0000000116b6791a: callq  0x000000010c5892a0
  0x0000000116b6791f: add    $0x8,%rsp
  0x0000000116b67923: jmpq   0x0000000116b6792d
  0x0000000116b67928: callq  0x000000010c5892a0
  0x0000000116b6792d: push   %rax
  0x0000000116b6792e: push   %rdi
  0x0000000116b6792f: push   %rsi
  0x0000000116b67930: push   %rdx
  0x0000000116b67931: push   %rcx
  0x0000000116b67932: push   %r8
  0x0000000116b67934: push   %r9
  0x0000000116b67936: push   %r10
  0x0000000116b67938: mov    %rsp,%r10
  0x0000000116b6793b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6793f: push   %r10
  0x0000000116b67941: push   %r11
  0x0000000116b67943: mov    $0x109,%edi
  0x0000000116b67948: movabs $0x7ff815049fd5,%r10
  0x0000000116b67952: callq  *%r10
  0x0000000116b67955: pop    %r11
  0x0000000116b67957: pop    %rsp
  0x0000000116b67958: pop    %r10
  0x0000000116b6795a: pop    %r9
  0x0000000116b6795c: pop    %r8
  0x0000000116b6795e: pop    %rcx
  0x0000000116b6795f: pop    %rdx
  0x0000000116b67960: pop    %rsi
  0x0000000116b67961: pop    %rdi
  0x0000000116b67962: cmp    %rax,%r15
  0x0000000116b67965: je     0x0000000116b679e2
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6796b: mov    %rsp,-0x28(%rsp)
  0x0000000116b67970: sub    $0x80,%rsp
  0x0000000116b67977: mov    %rax,0x78(%rsp)
  0x0000000116b6797c: mov    %rcx,0x70(%rsp)
  0x0000000116b67981: mov    %rdx,0x68(%rsp)
  0x0000000116b67986: mov    %rbx,0x60(%rsp)
  0x0000000116b6798b: mov    %rbp,0x50(%rsp)
  0x0000000116b67990: mov    %rsi,0x48(%rsp)
  0x0000000116b67995: mov    %rdi,0x40(%rsp)
  0x0000000116b6799a: mov    %r8,0x38(%rsp)
  0x0000000116b6799f: mov    %r9,0x30(%rsp)
  0x0000000116b679a4: mov    %r10,0x28(%rsp)
  0x0000000116b679a9: mov    %r11,0x20(%rsp)
  0x0000000116b679ae: mov    %r12,0x18(%rsp)
  0x0000000116b679b3: mov    %r13,0x10(%rsp)
  0x0000000116b679b8: mov    %r14,0x8(%rsp)
  0x0000000116b679bd: mov    %r15,(%rsp)
  0x0000000116b679c1: movabs $0x10cc6405e,%rdi
  0x0000000116b679cb: movabs $0x116b6796b,%rsi
  0x0000000116b679d5: mov    %rsp,%rdx
  0x0000000116b679d8: and    $0xfffffffffffffff0,%rsp
  0x0000000116b679dc: callq  0x000000010c7dd830
  0x0000000116b679e1: hlt    
  0x0000000116b679e2: pop    %rax
  0x0000000116b679e3: movabs $0x0,%r10
  0x0000000116b679ed: mov    %r10,0x280(%r15)
  0x0000000116b679f4: movabs $0x0,%r10
  0x0000000116b679fe: mov    %r10,0x290(%r15)
  0x0000000116b67a05: movabs $0x0,%r10
  0x0000000116b67a0f: mov    %r10,0x288(%r15)
  0x0000000116b67a16: cmpq   $0x0,0x8(%r15)
  0x0000000116b67a1e: je     0x0000000116b67a29
  0x0000000116b67a24: jmpq   0x0000000116b30420
  0x0000000116b67a29: mov    -0x38(%rbp),%r13
  0x0000000116b67a2d: mov    -0x30(%rbp),%r14
  0x0000000116b67a31: retq   
  0x0000000116b67a32: mov    %rsp,-0x28(%rsp)
  0x0000000116b67a37: sub    $0x80,%rsp
  0x0000000116b67a3e: mov    %rax,0x78(%rsp)
  0x0000000116b67a43: mov    %rcx,0x70(%rsp)
  0x0000000116b67a48: mov    %rdx,0x68(%rsp)
  0x0000000116b67a4d: mov    %rbx,0x60(%rsp)
  0x0000000116b67a52: mov    %rbp,0x50(%rsp)
  0x0000000116b67a57: mov    %rsi,0x48(%rsp)
  0x0000000116b67a5c: mov    %rdi,0x40(%rsp)
  0x0000000116b67a61: mov    %r8,0x38(%rsp)
  0x0000000116b67a66: mov    %r9,0x30(%rsp)
  0x0000000116b67a6b: mov    %r10,0x28(%rsp)
  0x0000000116b67a70: mov    %r11,0x20(%rsp)
  0x0000000116b67a75: mov    %r12,0x18(%rsp)
  0x0000000116b67a7a: mov    %r13,0x10(%rsp)
  0x0000000116b67a7f: mov    %r14,0x8(%rsp)
  0x0000000116b67a84: mov    %r15,(%rsp)
  0x0000000116b67a88: movabs $0x10cb763be,%rdi
  0x0000000116b67a92: movabs $0x116b67a32,%rsi
  0x0000000116b67a9c: mov    %rsp,%rdx
  0x0000000116b67a9f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67aa3: callq  0x000000010c7dd830
  0x0000000116b67aa8: hlt    
  0x0000000116b67aa9: cmpq   $0x0,0x8(%rsi)
  0x0000000116b67ab1: jne    0x0000000116b677d9
  0x0000000116b67ab7: add    $0x10,%rsi
  0x0000000116b67abb: cmp    %rbx,%rsi
  0x0000000116b67abe: jne    0x0000000116b67aa9
  0x0000000116b67ac0: cmpb   $0x0,-0x9d4a8c5(%rip)        # 0x000000010ce1d202
  0x0000000116b67ac7: je     0x0000000116b67b8e
  0x0000000116b67acd: sub    $0x10,%rsp
  0x0000000116b67ad1: vmovsd %xmm0,(%rsp)
  0x0000000116b67ad6: mov    -0x18(%rbp),%rsi
  0x0000000116b67ada: mov    %r15,%rdi
  0x0000000116b67add: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b67ae5: je     0x0000000116b67b62
  0x0000000116b67aeb: mov    %rsp,-0x28(%rsp)
  0x0000000116b67af0: sub    $0x80,%rsp
  0x0000000116b67af7: mov    %rax,0x78(%rsp)
  0x0000000116b67afc: mov    %rcx,0x70(%rsp)
  0x0000000116b67b01: mov    %rdx,0x68(%rsp)
  0x0000000116b67b06: mov    %rbx,0x60(%rsp)
  0x0000000116b67b0b: mov    %rbp,0x50(%rsp)
  0x0000000116b67b10: mov    %rsi,0x48(%rsp)
  0x0000000116b67b15: mov    %rdi,0x40(%rsp)
  0x0000000116b67b1a: mov    %r8,0x38(%rsp)
  0x0000000116b67b1f: mov    %r9,0x30(%rsp)
  0x0000000116b67b24: mov    %r10,0x28(%rsp)
  0x0000000116b67b29: mov    %r11,0x20(%rsp)
  0x0000000116b67b2e: mov    %r12,0x18(%rsp)
  0x0000000116b67b33: mov    %r13,0x10(%rsp)
  0x0000000116b67b38: mov    %r14,0x8(%rsp)
  0x0000000116b67b3d: mov    %r15,(%rsp)
  0x0000000116b67b41: movabs $0x10cc2363b,%rdi
  0x0000000116b67b4b: movabs $0x116b67aeb,%rsi
  0x0000000116b67b55: mov    %rsp,%rdx
  0x0000000116b67b58: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67b5c: callq  0x000000010c7dd830
  0x0000000116b67b61: hlt    
  0x0000000116b67b62: test   $0xf,%esp
  0x0000000116b67b68: je     0x0000000116b67b80
  0x0000000116b67b6e: sub    $0x8,%rsp
  0x0000000116b67b72: callq  0x000000010c9c9850
  0x0000000116b67b77: add    $0x8,%rsp
  0x0000000116b67b7b: jmpq   0x0000000116b67b85
  0x0000000116b67b80: callq  0x000000010c9c9850
  0x0000000116b67b85: vmovsd (%rsp),%xmm0
  0x0000000116b67b8a: add    $0x10,%rsp
  0x0000000116b67b8e: mov    -0x8(%rbp),%rbx
  0x0000000116b67b92: leaveq 
  0x0000000116b67b93: pop    %r13
  0x0000000116b67b95: mov    %rbx,%rsp
  0x0000000116b67b98: jmpq   *%r13
  0x0000000116b67b9b: mov    %rsp,-0x28(%rsp)
  0x0000000116b67ba0: sub    $0x80,%rsp
  0x0000000116b67ba7: mov    %rax,0x78(%rsp)
  0x0000000116b67bac: mov    %rcx,0x70(%rsp)
  0x0000000116b67bb1: mov    %rdx,0x68(%rsp)
  0x0000000116b67bb6: mov    %rbx,0x60(%rsp)
  0x0000000116b67bbb: mov    %rbp,0x50(%rsp)
  0x0000000116b67bc0: mov    %rsi,0x48(%rsp)
  0x0000000116b67bc5: mov    %rdi,0x40(%rsp)
  0x0000000116b67bca: mov    %r8,0x38(%rsp)
  0x0000000116b67bcf: mov    %r9,0x30(%rsp)
  0x0000000116b67bd4: mov    %r10,0x28(%rsp)
  0x0000000116b67bd9: mov    %r11,0x20(%rsp)
  0x0000000116b67bde: mov    %r12,0x18(%rsp)
  0x0000000116b67be3: mov    %r13,0x10(%rsp)
  0x0000000116b67be8: mov    %r14,0x8(%rsp)
  0x0000000116b67bed: mov    %r15,(%rsp)
  0x0000000116b67bf1: movabs $0x10cb763be,%rdi
  0x0000000116b67bfb: movabs $0x116b67b9b,%rsi
  0x0000000116b67c05: mov    %rsp,%rdx
  0x0000000116b67c08: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67c0c: callq  0x000000010c7dd830
  0x0000000116b67c11: hlt    
  0x0000000116b67c12: nop
  0x0000000116b67c13: nop
  0x0000000116b67c14: nop
  0x0000000116b67c15: nop
  0x0000000116b67c16: nop
  0x0000000116b67c17: nop
  0x0000000116b67c18: int3   
  0x0000000116b67c19: int3   
  0x0000000116b67c1a: int3   
  0x0000000116b67c1b: int3   
  0x0000000116b67c1c: int3   
  0x0000000116b67c1d: int3   
  0x0000000116b67c1e: int3   
  0x0000000116b67c1f: int3   

----------------------------------------------------------------------
areturn  176 areturn  [0x0000000116b67c60, 0x0000000116b68660]  2560 bytes

  0x0000000116b67c60: pop    %rax
  0x0000000116b67c61: mov    0x33d(%r15),%dl
  0x0000000116b67c68: movb   $0x0,0x33d(%r15)
  0x0000000116b67c70: mov    -0x18(%rbp),%rbx
  0x0000000116b67c74: mov    0x28(%rbx),%ecx
  0x0000000116b67c77: test   $0x20,%ecx
  0x0000000116b67c7d: je     0x0000000116b6820c
  0x0000000116b67c83: test   $0xff,%dl
  0x0000000116b67c86: jne    0x0000000116b68500
  0x0000000116b67c8c: push   %rax
  0x0000000116b67c8d: lea    -0x50(%rbp),%rsi
  0x0000000116b67c91: mov    0x8(%rsi),%rax
  0x0000000116b67c95: test   %rax,%rax
  0x0000000116b67c98: jne    0x0000000116b67f6f
  0x0000000116b67c9e: pop    %rax
  0x0000000116b67c9f: callq  0x0000000116b67ca9
  0x0000000116b67ca4: jmpq   0x0000000116b67ef8
  0x0000000116b67ca9: lea    0x8(%rsp),%rax
  0x0000000116b67cae: mov    %r13,-0x38(%rbp)
  0x0000000116b67cb2: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b67cba: je     0x0000000116b67d37
  0x0000000116b67cc0: mov    %rsp,-0x28(%rsp)
  0x0000000116b67cc5: sub    $0x80,%rsp
  0x0000000116b67ccc: mov    %rax,0x78(%rsp)
  0x0000000116b67cd1: mov    %rcx,0x70(%rsp)
  0x0000000116b67cd6: mov    %rdx,0x68(%rsp)
  0x0000000116b67cdb: mov    %rbx,0x60(%rsp)
  0x0000000116b67ce0: mov    %rbp,0x50(%rsp)
  0x0000000116b67ce5: mov    %rsi,0x48(%rsp)
  0x0000000116b67cea: mov    %rdi,0x40(%rsp)
  0x0000000116b67cef: mov    %r8,0x38(%rsp)
  0x0000000116b67cf4: mov    %r9,0x30(%rsp)
  0x0000000116b67cf9: mov    %r10,0x28(%rsp)
  0x0000000116b67cfe: mov    %r11,0x20(%rsp)
  0x0000000116b67d03: mov    %r12,0x18(%rsp)
  0x0000000116b67d08: mov    %r13,0x10(%rsp)
  0x0000000116b67d0d: mov    %r14,0x8(%rsp)
  0x0000000116b67d12: mov    %r15,(%rsp)
  0x0000000116b67d16: movabs $0x10cc2363b,%rdi
  0x0000000116b67d20: movabs $0x116b67cc0,%rsi
  0x0000000116b67d2a: mov    %rsp,%rdx
  0x0000000116b67d2d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67d31: callq  0x000000010c7dd830
  0x0000000116b67d36: hlt    
  0x0000000116b67d37: push   %r10
  0x0000000116b67d39: cmp    -0x9d21490(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b67d40: je     0x0000000116b67dbd
  ;; call_VM_base: heap base corrupted?
  0x0000000116b67d46: mov    %rsp,-0x28(%rsp)
  0x0000000116b67d4b: sub    $0x80,%rsp
  0x0000000116b67d52: mov    %rax,0x78(%rsp)
  0x0000000116b67d57: mov    %rcx,0x70(%rsp)
  0x0000000116b67d5c: mov    %rdx,0x68(%rsp)
  0x0000000116b67d61: mov    %rbx,0x60(%rsp)
  0x0000000116b67d66: mov    %rbp,0x50(%rsp)
  0x0000000116b67d6b: mov    %rsi,0x48(%rsp)
  0x0000000116b67d70: mov    %rdi,0x40(%rsp)
  0x0000000116b67d75: mov    %r8,0x38(%rsp)
  0x0000000116b67d7a: mov    %r9,0x30(%rsp)
  0x0000000116b67d7f: mov    %r10,0x28(%rsp)
  0x0000000116b67d84: mov    %r11,0x20(%rsp)
  0x0000000116b67d89: mov    %r12,0x18(%rsp)
  0x0000000116b67d8e: mov    %r13,0x10(%rsp)
  0x0000000116b67d93: mov    %r14,0x8(%rsp)
  0x0000000116b67d98: mov    %r15,(%rsp)
  0x0000000116b67d9c: movabs $0x10cc63f17,%rdi
  0x0000000116b67da6: movabs $0x116b67d46,%rsi
  0x0000000116b67db0: mov    %rsp,%rdx
  0x0000000116b67db3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67db7: callq  0x000000010c7dd830
  0x0000000116b67dbc: hlt    
  0x0000000116b67dbd: pop    %r10
  0x0000000116b67dbf: mov    %r15,%rdi
  0x0000000116b67dc2: mov    %rbp,0x290(%r15)
  0x0000000116b67dc9: mov    %rax,0x280(%r15)
  0x0000000116b67dd0: test   $0xf,%esp
  0x0000000116b67dd6: je     0x0000000116b67dee
  0x0000000116b67ddc: sub    $0x8,%rsp
  0x0000000116b67de0: callq  0x000000010c5892a0
  0x0000000116b67de5: add    $0x8,%rsp
  0x0000000116b67de9: jmpq   0x0000000116b67df3
  0x0000000116b67dee: callq  0x000000010c5892a0
  0x0000000116b67df3: push   %rax
  0x0000000116b67df4: push   %rdi
  0x0000000116b67df5: push   %rsi
  0x0000000116b67df6: push   %rdx
  0x0000000116b67df7: push   %rcx
  0x0000000116b67df8: push   %r8
  0x0000000116b67dfa: push   %r9
  0x0000000116b67dfc: push   %r10
  0x0000000116b67dfe: mov    %rsp,%r10
  0x0000000116b67e01: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67e05: push   %r10
  0x0000000116b67e07: push   %r11
  0x0000000116b67e09: mov    $0x109,%edi
  0x0000000116b67e0e: movabs $0x7ff815049fd5,%r10
  0x0000000116b67e18: callq  *%r10
  0x0000000116b67e1b: pop    %r11
  0x0000000116b67e1d: pop    %rsp
  0x0000000116b67e1e: pop    %r10
  0x0000000116b67e20: pop    %r9
  0x0000000116b67e22: pop    %r8
  0x0000000116b67e24: pop    %rcx
  0x0000000116b67e25: pop    %rdx
  0x0000000116b67e26: pop    %rsi
  0x0000000116b67e27: pop    %rdi
  0x0000000116b67e28: cmp    %rax,%r15
  0x0000000116b67e2b: je     0x0000000116b67ea8
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b67e31: mov    %rsp,-0x28(%rsp)
  0x0000000116b67e36: sub    $0x80,%rsp
  0x0000000116b67e3d: mov    %rax,0x78(%rsp)
  0x0000000116b67e42: mov    %rcx,0x70(%rsp)
  0x0000000116b67e47: mov    %rdx,0x68(%rsp)
  0x0000000116b67e4c: mov    %rbx,0x60(%rsp)
  0x0000000116b67e51: mov    %rbp,0x50(%rsp)
  0x0000000116b67e56: mov    %rsi,0x48(%rsp)
  0x0000000116b67e5b: mov    %rdi,0x40(%rsp)
  0x0000000116b67e60: mov    %r8,0x38(%rsp)
  0x0000000116b67e65: mov    %r9,0x30(%rsp)
  0x0000000116b67e6a: mov    %r10,0x28(%rsp)
  0x0000000116b67e6f: mov    %r11,0x20(%rsp)
  0x0000000116b67e74: mov    %r12,0x18(%rsp)
  0x0000000116b67e79: mov    %r13,0x10(%rsp)
  0x0000000116b67e7e: mov    %r14,0x8(%rsp)
  0x0000000116b67e83: mov    %r15,(%rsp)
  0x0000000116b67e87: movabs $0x10cc6405e,%rdi
  0x0000000116b67e91: movabs $0x116b67e31,%rsi
  0x0000000116b67e9b: mov    %rsp,%rdx
  0x0000000116b67e9e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67ea2: callq  0x000000010c7dd830
  0x0000000116b67ea7: hlt    
  0x0000000116b67ea8: pop    %rax
  0x0000000116b67ea9: movabs $0x0,%r10
  0x0000000116b67eb3: mov    %r10,0x280(%r15)
  0x0000000116b67eba: movabs $0x0,%r10
  0x0000000116b67ec4: mov    %r10,0x290(%r15)
  0x0000000116b67ecb: movabs $0x0,%r10
  0x0000000116b67ed5: mov    %r10,0x288(%r15)
  0x0000000116b67edc: cmpq   $0x0,0x8(%r15)
  0x0000000116b67ee4: je     0x0000000116b67eef
  0x0000000116b67eea: jmpq   0x0000000116b30420
  0x0000000116b67eef: mov    -0x38(%rbp),%r13
  0x0000000116b67ef3: mov    -0x30(%rbp),%r14
  0x0000000116b67ef7: retq   
  0x0000000116b67ef8: mov    %rsp,-0x28(%rsp)
  0x0000000116b67efd: sub    $0x80,%rsp
  0x0000000116b67f04: mov    %rax,0x78(%rsp)
  0x0000000116b67f09: mov    %rcx,0x70(%rsp)
  0x0000000116b67f0e: mov    %rdx,0x68(%rsp)
  0x0000000116b67f13: mov    %rbx,0x60(%rsp)
  0x0000000116b67f18: mov    %rbp,0x50(%rsp)
  0x0000000116b67f1d: mov    %rsi,0x48(%rsp)
  0x0000000116b67f22: mov    %rdi,0x40(%rsp)
  0x0000000116b67f27: mov    %r8,0x38(%rsp)
  0x0000000116b67f2c: mov    %r9,0x30(%rsp)
  0x0000000116b67f31: mov    %r10,0x28(%rsp)
  0x0000000116b67f36: mov    %r11,0x20(%rsp)
  0x0000000116b67f3b: mov    %r12,0x18(%rsp)
  0x0000000116b67f40: mov    %r13,0x10(%rsp)
  0x0000000116b67f45: mov    %r14,0x8(%rsp)
  0x0000000116b67f4a: mov    %r15,(%rsp)
  0x0000000116b67f4e: movabs $0x10cb763be,%rdi
  0x0000000116b67f58: movabs $0x116b67ef8,%rsi
  0x0000000116b67f62: mov    %rsp,%rdx
  0x0000000116b67f65: and    $0xfffffffffffffff0,%rsp
  0x0000000116b67f69: callq  0x000000010c7dd830
  0x0000000116b67f6e: hlt    
  0x0000000116b67f6f: mov    %r13,-0x38(%rbp)
  0x0000000116b67f73: lea    (%rsi),%rax
  0x0000000116b67f76: mov    0x8(%rsi),%rcx
  0x0000000116b67f7a: movq   $0x0,0x8(%rsi)
  0x0000000116b67f82: mov    (%rcx),%rdx
  0x0000000116b67f85: and    $0x7,%rdx
  0x0000000116b67f89: cmp    $0x5,%rdx
  0x0000000116b67f8d: je     0x0000000116b68207
  0x0000000116b67f93: mov    (%rax),%rdx
  0x0000000116b67f96: test   %rdx,%rdx
  0x0000000116b67f99: je     0x0000000116b68207
  0x0000000116b67f9f: lock cmpxchg %rdx,(%rcx)
  0x0000000116b67fa4: je     0x0000000116b68207
  0x0000000116b67faa: mov    %rcx,0x8(%rsi)
  0x0000000116b67fae: callq  0x0000000116b67fb8
  0x0000000116b67fb3: jmpq   0x0000000116b68207
  0x0000000116b67fb8: lea    0x8(%rsp),%rax
  0x0000000116b67fbd: mov    %r13,-0x38(%rbp)
  0x0000000116b67fc1: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b67fc9: je     0x0000000116b68046
  0x0000000116b67fcf: mov    %rsp,-0x28(%rsp)
  0x0000000116b67fd4: sub    $0x80,%rsp
  0x0000000116b67fdb: mov    %rax,0x78(%rsp)
  0x0000000116b67fe0: mov    %rcx,0x70(%rsp)
  0x0000000116b67fe5: mov    %rdx,0x68(%rsp)
  0x0000000116b67fea: mov    %rbx,0x60(%rsp)
  0x0000000116b67fef: mov    %rbp,0x50(%rsp)
  0x0000000116b67ff4: mov    %rsi,0x48(%rsp)
  0x0000000116b67ff9: mov    %rdi,0x40(%rsp)
  0x0000000116b67ffe: mov    %r8,0x38(%rsp)
  0x0000000116b68003: mov    %r9,0x30(%rsp)
  0x0000000116b68008: mov    %r10,0x28(%rsp)
  0x0000000116b6800d: mov    %r11,0x20(%rsp)
  0x0000000116b68012: mov    %r12,0x18(%rsp)
  0x0000000116b68017: mov    %r13,0x10(%rsp)
  0x0000000116b6801c: mov    %r14,0x8(%rsp)
  0x0000000116b68021: mov    %r15,(%rsp)
  0x0000000116b68025: movabs $0x10cc2363b,%rdi
  0x0000000116b6802f: movabs $0x116b67fcf,%rsi
  0x0000000116b68039: mov    %rsp,%rdx
  0x0000000116b6803c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68040: callq  0x000000010c7dd830
  0x0000000116b68045: hlt    
  0x0000000116b68046: push   %r10
  0x0000000116b68048: cmp    -0x9d2179f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6804f: je     0x0000000116b680cc
  ;; call_VM_base: heap base corrupted?
  0x0000000116b68055: mov    %rsp,-0x28(%rsp)
  0x0000000116b6805a: sub    $0x80,%rsp
  0x0000000116b68061: mov    %rax,0x78(%rsp)
  0x0000000116b68066: mov    %rcx,0x70(%rsp)
  0x0000000116b6806b: mov    %rdx,0x68(%rsp)
  0x0000000116b68070: mov    %rbx,0x60(%rsp)
  0x0000000116b68075: mov    %rbp,0x50(%rsp)
  0x0000000116b6807a: mov    %rsi,0x48(%rsp)
  0x0000000116b6807f: mov    %rdi,0x40(%rsp)
  0x0000000116b68084: mov    %r8,0x38(%rsp)
  0x0000000116b68089: mov    %r9,0x30(%rsp)
  0x0000000116b6808e: mov    %r10,0x28(%rsp)
  0x0000000116b68093: mov    %r11,0x20(%rsp)
  0x0000000116b68098: mov    %r12,0x18(%rsp)
  0x0000000116b6809d: mov    %r13,0x10(%rsp)
  0x0000000116b680a2: mov    %r14,0x8(%rsp)
  0x0000000116b680a7: mov    %r15,(%rsp)
  0x0000000116b680ab: movabs $0x10cc63f17,%rdi
  0x0000000116b680b5: movabs $0x116b68055,%rsi
  0x0000000116b680bf: mov    %rsp,%rdx
  0x0000000116b680c2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b680c6: callq  0x000000010c7dd830
  0x0000000116b680cb: hlt    
  0x0000000116b680cc: pop    %r10
  0x0000000116b680ce: mov    %r15,%rdi
  0x0000000116b680d1: mov    %rbp,0x290(%r15)
  0x0000000116b680d8: mov    %rax,0x280(%r15)
  0x0000000116b680df: test   $0xf,%esp
  0x0000000116b680e5: je     0x0000000116b680fd
  0x0000000116b680eb: sub    $0x8,%rsp
  0x0000000116b680ef: callq  0x000000010c588f80
  0x0000000116b680f4: add    $0x8,%rsp
  0x0000000116b680f8: jmpq   0x0000000116b68102
  0x0000000116b680fd: callq  0x000000010c588f80
  0x0000000116b68102: push   %rax
  0x0000000116b68103: push   %rdi
  0x0000000116b68104: push   %rsi
  0x0000000116b68105: push   %rdx
  0x0000000116b68106: push   %rcx
  0x0000000116b68107: push   %r8
  0x0000000116b68109: push   %r9
  0x0000000116b6810b: push   %r10
  0x0000000116b6810d: mov    %rsp,%r10
  0x0000000116b68110: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68114: push   %r10
  0x0000000116b68116: push   %r11
  0x0000000116b68118: mov    $0x109,%edi
  0x0000000116b6811d: movabs $0x7ff815049fd5,%r10
  0x0000000116b68127: callq  *%r10
  0x0000000116b6812a: pop    %r11
  0x0000000116b6812c: pop    %rsp
  0x0000000116b6812d: pop    %r10
  0x0000000116b6812f: pop    %r9
  0x0000000116b68131: pop    %r8
  0x0000000116b68133: pop    %rcx
  0x0000000116b68134: pop    %rdx
  0x0000000116b68135: pop    %rsi
  0x0000000116b68136: pop    %rdi
  0x0000000116b68137: cmp    %rax,%r15
  0x0000000116b6813a: je     0x0000000116b681b7
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b68140: mov    %rsp,-0x28(%rsp)
  0x0000000116b68145: sub    $0x80,%rsp
  0x0000000116b6814c: mov    %rax,0x78(%rsp)
  0x0000000116b68151: mov    %rcx,0x70(%rsp)
  0x0000000116b68156: mov    %rdx,0x68(%rsp)
  0x0000000116b6815b: mov    %rbx,0x60(%rsp)
  0x0000000116b68160: mov    %rbp,0x50(%rsp)
  0x0000000116b68165: mov    %rsi,0x48(%rsp)
  0x0000000116b6816a: mov    %rdi,0x40(%rsp)
  0x0000000116b6816f: mov    %r8,0x38(%rsp)
  0x0000000116b68174: mov    %r9,0x30(%rsp)
  0x0000000116b68179: mov    %r10,0x28(%rsp)
  0x0000000116b6817e: mov    %r11,0x20(%rsp)
  0x0000000116b68183: mov    %r12,0x18(%rsp)
  0x0000000116b68188: mov    %r13,0x10(%rsp)
  0x0000000116b6818d: mov    %r14,0x8(%rsp)
  0x0000000116b68192: mov    %r15,(%rsp)
  0x0000000116b68196: movabs $0x10cc6405e,%rdi
  0x0000000116b681a0: movabs $0x116b68140,%rsi
  0x0000000116b681aa: mov    %rsp,%rdx
  0x0000000116b681ad: and    $0xfffffffffffffff0,%rsp
  0x0000000116b681b1: callq  0x000000010c7dd830
  0x0000000116b681b6: hlt    
  0x0000000116b681b7: pop    %rax
  0x0000000116b681b8: movabs $0x0,%r10
  0x0000000116b681c2: mov    %r10,0x280(%r15)
  0x0000000116b681c9: movabs $0x0,%r10
  0x0000000116b681d3: mov    %r10,0x290(%r15)
  0x0000000116b681da: movabs $0x0,%r10
  0x0000000116b681e4: mov    %r10,0x288(%r15)
  0x0000000116b681eb: cmpq   $0x0,0x8(%r15)
  0x0000000116b681f3: je     0x0000000116b681fe
  0x0000000116b681f9: jmpq   0x0000000116b30420
  0x0000000116b681fe: mov    -0x38(%rbp),%r13
  0x0000000116b68202: mov    -0x30(%rbp),%r14
  0x0000000116b68206: retq   
  0x0000000116b68207: mov    -0x38(%rbp),%r13
  0x0000000116b6820b: pop    %rax
  0x0000000116b6820c: mov    -0x40(%rbp),%rsi
  0x0000000116b68210: lea    -0x40(%rbp),%rbx
  0x0000000116b68214: jmpq   0x0000000116b684fb
  0x0000000116b68219: callq  0x0000000116b68223
  0x0000000116b6821e: jmpq   0x0000000116b68472
  0x0000000116b68223: lea    0x8(%rsp),%rax
  0x0000000116b68228: mov    %r13,-0x38(%rbp)
  0x0000000116b6822c: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b68234: je     0x0000000116b682b1
  0x0000000116b6823a: mov    %rsp,-0x28(%rsp)
  0x0000000116b6823f: sub    $0x80,%rsp
  0x0000000116b68246: mov    %rax,0x78(%rsp)
  0x0000000116b6824b: mov    %rcx,0x70(%rsp)
  0x0000000116b68250: mov    %rdx,0x68(%rsp)
  0x0000000116b68255: mov    %rbx,0x60(%rsp)
  0x0000000116b6825a: mov    %rbp,0x50(%rsp)
  0x0000000116b6825f: mov    %rsi,0x48(%rsp)
  0x0000000116b68264: mov    %rdi,0x40(%rsp)
  0x0000000116b68269: mov    %r8,0x38(%rsp)
  0x0000000116b6826e: mov    %r9,0x30(%rsp)
  0x0000000116b68273: mov    %r10,0x28(%rsp)
  0x0000000116b68278: mov    %r11,0x20(%rsp)
  0x0000000116b6827d: mov    %r12,0x18(%rsp)
  0x0000000116b68282: mov    %r13,0x10(%rsp)
  0x0000000116b68287: mov    %r14,0x8(%rsp)
  0x0000000116b6828c: mov    %r15,(%rsp)
  0x0000000116b68290: movabs $0x10cc2363b,%rdi
  0x0000000116b6829a: movabs $0x116b6823a,%rsi
  0x0000000116b682a4: mov    %rsp,%rdx
  0x0000000116b682a7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b682ab: callq  0x000000010c7dd830
  0x0000000116b682b0: hlt    
  0x0000000116b682b1: push   %r10
  0x0000000116b682b3: cmp    -0x9d21a0a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b682ba: je     0x0000000116b68337
  ;; call_VM_base: heap base corrupted?
  0x0000000116b682c0: mov    %rsp,-0x28(%rsp)
  0x0000000116b682c5: sub    $0x80,%rsp
  0x0000000116b682cc: mov    %rax,0x78(%rsp)
  0x0000000116b682d1: mov    %rcx,0x70(%rsp)
  0x0000000116b682d6: mov    %rdx,0x68(%rsp)
  0x0000000116b682db: mov    %rbx,0x60(%rsp)
  0x0000000116b682e0: mov    %rbp,0x50(%rsp)
  0x0000000116b682e5: mov    %rsi,0x48(%rsp)
  0x0000000116b682ea: mov    %rdi,0x40(%rsp)
  0x0000000116b682ef: mov    %r8,0x38(%rsp)
  0x0000000116b682f4: mov    %r9,0x30(%rsp)
  0x0000000116b682f9: mov    %r10,0x28(%rsp)
  0x0000000116b682fe: mov    %r11,0x20(%rsp)
  0x0000000116b68303: mov    %r12,0x18(%rsp)
  0x0000000116b68308: mov    %r13,0x10(%rsp)
  0x0000000116b6830d: mov    %r14,0x8(%rsp)
  0x0000000116b68312: mov    %r15,(%rsp)
  0x0000000116b68316: movabs $0x10cc63f17,%rdi
  0x0000000116b68320: movabs $0x116b682c0,%rsi
  0x0000000116b6832a: mov    %rsp,%rdx
  0x0000000116b6832d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68331: callq  0x000000010c7dd830
  0x0000000116b68336: hlt    
  0x0000000116b68337: pop    %r10
  0x0000000116b68339: mov    %r15,%rdi
  0x0000000116b6833c: mov    %rbp,0x290(%r15)
  0x0000000116b68343: mov    %rax,0x280(%r15)
  0x0000000116b6834a: test   $0xf,%esp
  0x0000000116b68350: je     0x0000000116b68368
  0x0000000116b68356: sub    $0x8,%rsp
  0x0000000116b6835a: callq  0x000000010c5892a0
  0x0000000116b6835f: add    $0x8,%rsp
  0x0000000116b68363: jmpq   0x0000000116b6836d
  0x0000000116b68368: callq  0x000000010c5892a0
  0x0000000116b6836d: push   %rax
  0x0000000116b6836e: push   %rdi
  0x0000000116b6836f: push   %rsi
  0x0000000116b68370: push   %rdx
  0x0000000116b68371: push   %rcx
  0x0000000116b68372: push   %r8
  0x0000000116b68374: push   %r9
  0x0000000116b68376: push   %r10
  0x0000000116b68378: mov    %rsp,%r10
  0x0000000116b6837b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6837f: push   %r10
  0x0000000116b68381: push   %r11
  0x0000000116b68383: mov    $0x109,%edi
  0x0000000116b68388: movabs $0x7ff815049fd5,%r10
  0x0000000116b68392: callq  *%r10
  0x0000000116b68395: pop    %r11
  0x0000000116b68397: pop    %rsp
  0x0000000116b68398: pop    %r10
  0x0000000116b6839a: pop    %r9
  0x0000000116b6839c: pop    %r8
  0x0000000116b6839e: pop    %rcx
  0x0000000116b6839f: pop    %rdx
  0x0000000116b683a0: pop    %rsi
  0x0000000116b683a1: pop    %rdi
  0x0000000116b683a2: cmp    %rax,%r15
  0x0000000116b683a5: je     0x0000000116b68422
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b683ab: mov    %rsp,-0x28(%rsp)
  0x0000000116b683b0: sub    $0x80,%rsp
  0x0000000116b683b7: mov    %rax,0x78(%rsp)
  0x0000000116b683bc: mov    %rcx,0x70(%rsp)
  0x0000000116b683c1: mov    %rdx,0x68(%rsp)
  0x0000000116b683c6: mov    %rbx,0x60(%rsp)
  0x0000000116b683cb: mov    %rbp,0x50(%rsp)
  0x0000000116b683d0: mov    %rsi,0x48(%rsp)
  0x0000000116b683d5: mov    %rdi,0x40(%rsp)
  0x0000000116b683da: mov    %r8,0x38(%rsp)
  0x0000000116b683df: mov    %r9,0x30(%rsp)
  0x0000000116b683e4: mov    %r10,0x28(%rsp)
  0x0000000116b683e9: mov    %r11,0x20(%rsp)
  0x0000000116b683ee: mov    %r12,0x18(%rsp)
  0x0000000116b683f3: mov    %r13,0x10(%rsp)
  0x0000000116b683f8: mov    %r14,0x8(%rsp)
  0x0000000116b683fd: mov    %r15,(%rsp)
  0x0000000116b68401: movabs $0x10cc6405e,%rdi
  0x0000000116b6840b: movabs $0x116b683ab,%rsi
  0x0000000116b68415: mov    %rsp,%rdx
  0x0000000116b68418: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6841c: callq  0x000000010c7dd830
  0x0000000116b68421: hlt    
  0x0000000116b68422: pop    %rax
  0x0000000116b68423: movabs $0x0,%r10
  0x0000000116b6842d: mov    %r10,0x280(%r15)
  0x0000000116b68434: movabs $0x0,%r10
  0x0000000116b6843e: mov    %r10,0x290(%r15)
  0x0000000116b68445: movabs $0x0,%r10
  0x0000000116b6844f: mov    %r10,0x288(%r15)
  0x0000000116b68456: cmpq   $0x0,0x8(%r15)
  0x0000000116b6845e: je     0x0000000116b68469
  0x0000000116b68464: jmpq   0x0000000116b30420
  0x0000000116b68469: mov    -0x38(%rbp),%r13
  0x0000000116b6846d: mov    -0x30(%rbp),%r14
  0x0000000116b68471: retq   
  0x0000000116b68472: mov    %rsp,-0x28(%rsp)
  0x0000000116b68477: sub    $0x80,%rsp
  0x0000000116b6847e: mov    %rax,0x78(%rsp)
  0x0000000116b68483: mov    %rcx,0x70(%rsp)
  0x0000000116b68488: mov    %rdx,0x68(%rsp)
  0x0000000116b6848d: mov    %rbx,0x60(%rsp)
  0x0000000116b68492: mov    %rbp,0x50(%rsp)
  0x0000000116b68497: mov    %rsi,0x48(%rsp)
  0x0000000116b6849c: mov    %rdi,0x40(%rsp)
  0x0000000116b684a1: mov    %r8,0x38(%rsp)
  0x0000000116b684a6: mov    %r9,0x30(%rsp)
  0x0000000116b684ab: mov    %r10,0x28(%rsp)
  0x0000000116b684b0: mov    %r11,0x20(%rsp)
  0x0000000116b684b5: mov    %r12,0x18(%rsp)
  0x0000000116b684ba: mov    %r13,0x10(%rsp)
  0x0000000116b684bf: mov    %r14,0x8(%rsp)
  0x0000000116b684c4: mov    %r15,(%rsp)
  0x0000000116b684c8: movabs $0x10cb763be,%rdi
  0x0000000116b684d2: movabs $0x116b68472,%rsi
  0x0000000116b684dc: mov    %rsp,%rdx
  0x0000000116b684df: and    $0xfffffffffffffff0,%rsp
  0x0000000116b684e3: callq  0x000000010c7dd830
  0x0000000116b684e8: hlt    
  0x0000000116b684e9: cmpq   $0x0,0x8(%rsi)
  0x0000000116b684f1: jne    0x0000000116b68219
  0x0000000116b684f7: add    $0x10,%rsi
  0x0000000116b684fb: cmp    %rbx,%rsi
  0x0000000116b684fe: jne    0x0000000116b684e9
  0x0000000116b68500: cmpb   $0x0,-0x9d4b305(%rip)        # 0x000000010ce1d202
  0x0000000116b68507: je     0x0000000116b685be
  0x0000000116b6850d: push   %rax
  0x0000000116b6850e: mov    -0x18(%rbp),%rsi
  0x0000000116b68512: mov    %r15,%rdi
  0x0000000116b68515: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6851d: je     0x0000000116b6859a
  0x0000000116b68523: mov    %rsp,-0x28(%rsp)
  0x0000000116b68528: sub    $0x80,%rsp
  0x0000000116b6852f: mov    %rax,0x78(%rsp)
  0x0000000116b68534: mov    %rcx,0x70(%rsp)
  0x0000000116b68539: mov    %rdx,0x68(%rsp)
  0x0000000116b6853e: mov    %rbx,0x60(%rsp)
  0x0000000116b68543: mov    %rbp,0x50(%rsp)
  0x0000000116b68548: mov    %rsi,0x48(%rsp)
  0x0000000116b6854d: mov    %rdi,0x40(%rsp)
  0x0000000116b68552: mov    %r8,0x38(%rsp)
  0x0000000116b68557: mov    %r9,0x30(%rsp)
  0x0000000116b6855c: mov    %r10,0x28(%rsp)
  0x0000000116b68561: mov    %r11,0x20(%rsp)
  0x0000000116b68566: mov    %r12,0x18(%rsp)
  0x0000000116b6856b: mov    %r13,0x10(%rsp)
  0x0000000116b68570: mov    %r14,0x8(%rsp)
  0x0000000116b68575: mov    %r15,(%rsp)
  0x0000000116b68579: movabs $0x10cc2363b,%rdi
  0x0000000116b68583: movabs $0x116b68523,%rsi
  0x0000000116b6858d: mov    %rsp,%rdx
  0x0000000116b68590: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68594: callq  0x000000010c7dd830
  0x0000000116b68599: hlt    
  0x0000000116b6859a: test   $0xf,%esp
  0x0000000116b685a0: je     0x0000000116b685b8
  0x0000000116b685a6: sub    $0x8,%rsp
  0x0000000116b685aa: callq  0x000000010c9c9850
  0x0000000116b685af: add    $0x8,%rsp
  0x0000000116b685b3: jmpq   0x0000000116b685bd
  0x0000000116b685b8: callq  0x000000010c9c9850
  0x0000000116b685bd: pop    %rax
  0x0000000116b685be: mov    -0x8(%rbp),%rbx
  0x0000000116b685c2: leaveq 
  0x0000000116b685c3: pop    %r13
  0x0000000116b685c5: mov    %rbx,%rsp
  0x0000000116b685c8: jmpq   *%r13
  0x0000000116b685cb: mov    %rsp,-0x28(%rsp)
  0x0000000116b685d0: sub    $0x80,%rsp
  0x0000000116b685d7: mov    %rax,0x78(%rsp)
  0x0000000116b685dc: mov    %rcx,0x70(%rsp)
  0x0000000116b685e1: mov    %rdx,0x68(%rsp)
  0x0000000116b685e6: mov    %rbx,0x60(%rsp)
  0x0000000116b685eb: mov    %rbp,0x50(%rsp)
  0x0000000116b685f0: mov    %rsi,0x48(%rsp)
  0x0000000116b685f5: mov    %rdi,0x40(%rsp)
  0x0000000116b685fa: mov    %r8,0x38(%rsp)
  0x0000000116b685ff: mov    %r9,0x30(%rsp)
  0x0000000116b68604: mov    %r10,0x28(%rsp)
  0x0000000116b68609: mov    %r11,0x20(%rsp)
  0x0000000116b6860e: mov    %r12,0x18(%rsp)
  0x0000000116b68613: mov    %r13,0x10(%rsp)
  0x0000000116b68618: mov    %r14,0x8(%rsp)
  0x0000000116b6861d: mov    %r15,(%rsp)
  0x0000000116b68621: movabs $0x10cb763be,%rdi
  0x0000000116b6862b: movabs $0x116b685cb,%rsi
  0x0000000116b68635: mov    %rsp,%rdx
  0x0000000116b68638: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6863c: callq  0x000000010c7dd830
  0x0000000116b68641: hlt    
  0x0000000116b68642: nop
  0x0000000116b68643: nop
  0x0000000116b68644: nop
  0x0000000116b68645: nop
  0x0000000116b68646: nop
  0x0000000116b68647: nop
  0x0000000116b68648: int3   
  0x0000000116b68649: int3   
  0x0000000116b6864a: int3   
  0x0000000116b6864b: int3   
  0x0000000116b6864c: int3   
  0x0000000116b6864d: int3   
  0x0000000116b6864e: int3   
  0x0000000116b6864f: int3   
  0x0000000116b68650: int3   
  0x0000000116b68651: int3   
  0x0000000116b68652: int3   
  0x0000000116b68653: int3   
  0x0000000116b68654: int3   
  0x0000000116b68655: int3   
  0x0000000116b68656: int3   
  0x0000000116b68657: int3   
  0x0000000116b68658: int3   
  0x0000000116b68659: int3   
  0x0000000116b6865a: int3   
  0x0000000116b6865b: int3   
  0x0000000116b6865c: int3   
  0x0000000116b6865d: int3   
  0x0000000116b6865e: int3   
  0x0000000116b6865f: int3   

----------------------------------------------------------------------
return  177 return  [0x0000000116b686a0, 0x0000000116b690c0]  2592 bytes

  0x0000000116b686a0: push   %rax
  0x0000000116b686a1: jmpq   0x0000000116b686d0
  0x0000000116b686a6: sub    $0x8,%rsp
  0x0000000116b686aa: vmovss %xmm0,(%rsp)
  0x0000000116b686af: jmpq   0x0000000116b686d0
  0x0000000116b686b4: sub    $0x10,%rsp
  0x0000000116b686b8: vmovsd %xmm0,(%rsp)
  0x0000000116b686bd: jmpq   0x0000000116b686d0
  0x0000000116b686c2: sub    $0x10,%rsp
  0x0000000116b686c6: mov    %rax,(%rsp)
  0x0000000116b686ca: jmpq   0x0000000116b686d0
  0x0000000116b686cf: push   %rax
  0x0000000116b686d0: mov    0x33d(%r15),%dl
  0x0000000116b686d7: movb   $0x0,0x33d(%r15)
  0x0000000116b686df: mov    -0x18(%rbp),%rbx
  0x0000000116b686e3: mov    0x28(%rbx),%ecx
  0x0000000116b686e6: test   $0x20,%ecx
  0x0000000116b686ec: je     0x0000000116b68c78
  0x0000000116b686f2: test   $0xff,%dl
  0x0000000116b686f5: jne    0x0000000116b68f6c
  0x0000000116b686fb: lea    -0x50(%rbp),%rsi
  0x0000000116b686ff: mov    0x8(%rsi),%rax
  0x0000000116b68703: test   %rax,%rax
  0x0000000116b68706: jne    0x0000000116b689dc
  0x0000000116b6870c: callq  0x0000000116b68716
  0x0000000116b68711: jmpq   0x0000000116b68965
  0x0000000116b68716: lea    0x8(%rsp),%rax
  0x0000000116b6871b: mov    %r13,-0x38(%rbp)
  0x0000000116b6871f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b68727: je     0x0000000116b687a4
  0x0000000116b6872d: mov    %rsp,-0x28(%rsp)
  0x0000000116b68732: sub    $0x80,%rsp
  0x0000000116b68739: mov    %rax,0x78(%rsp)
  0x0000000116b6873e: mov    %rcx,0x70(%rsp)
  0x0000000116b68743: mov    %rdx,0x68(%rsp)
  0x0000000116b68748: mov    %rbx,0x60(%rsp)
  0x0000000116b6874d: mov    %rbp,0x50(%rsp)
  0x0000000116b68752: mov    %rsi,0x48(%rsp)
  0x0000000116b68757: mov    %rdi,0x40(%rsp)
  0x0000000116b6875c: mov    %r8,0x38(%rsp)
  0x0000000116b68761: mov    %r9,0x30(%rsp)
  0x0000000116b68766: mov    %r10,0x28(%rsp)
  0x0000000116b6876b: mov    %r11,0x20(%rsp)
  0x0000000116b68770: mov    %r12,0x18(%rsp)
  0x0000000116b68775: mov    %r13,0x10(%rsp)
  0x0000000116b6877a: mov    %r14,0x8(%rsp)
  0x0000000116b6877f: mov    %r15,(%rsp)
  0x0000000116b68783: movabs $0x10cc2363b,%rdi
  0x0000000116b6878d: movabs $0x116b6872d,%rsi
  0x0000000116b68797: mov    %rsp,%rdx
  0x0000000116b6879a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6879e: callq  0x000000010c7dd830
  0x0000000116b687a3: hlt    
  0x0000000116b687a4: push   %r10
  0x0000000116b687a6: cmp    -0x9d21efd(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b687ad: je     0x0000000116b6882a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b687b3: mov    %rsp,-0x28(%rsp)
  0x0000000116b687b8: sub    $0x80,%rsp
  0x0000000116b687bf: mov    %rax,0x78(%rsp)
  0x0000000116b687c4: mov    %rcx,0x70(%rsp)
  0x0000000116b687c9: mov    %rdx,0x68(%rsp)
  0x0000000116b687ce: mov    %rbx,0x60(%rsp)
  0x0000000116b687d3: mov    %rbp,0x50(%rsp)
  0x0000000116b687d8: mov    %rsi,0x48(%rsp)
  0x0000000116b687dd: mov    %rdi,0x40(%rsp)
  0x0000000116b687e2: mov    %r8,0x38(%rsp)
  0x0000000116b687e7: mov    %r9,0x30(%rsp)
  0x0000000116b687ec: mov    %r10,0x28(%rsp)
  0x0000000116b687f1: mov    %r11,0x20(%rsp)
  0x0000000116b687f6: mov    %r12,0x18(%rsp)
  0x0000000116b687fb: mov    %r13,0x10(%rsp)
  0x0000000116b68800: mov    %r14,0x8(%rsp)
  0x0000000116b68805: mov    %r15,(%rsp)
  0x0000000116b68809: movabs $0x10cc63f17,%rdi
  0x0000000116b68813: movabs $0x116b687b3,%rsi
  0x0000000116b6881d: mov    %rsp,%rdx
  0x0000000116b68820: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68824: callq  0x000000010c7dd830
  0x0000000116b68829: hlt    
  0x0000000116b6882a: pop    %r10
  0x0000000116b6882c: mov    %r15,%rdi
  0x0000000116b6882f: mov    %rbp,0x290(%r15)
  0x0000000116b68836: mov    %rax,0x280(%r15)
  0x0000000116b6883d: test   $0xf,%esp
  0x0000000116b68843: je     0x0000000116b6885b
  0x0000000116b68849: sub    $0x8,%rsp
  0x0000000116b6884d: callq  0x000000010c5892a0
  0x0000000116b68852: add    $0x8,%rsp
  0x0000000116b68856: jmpq   0x0000000116b68860
  0x0000000116b6885b: callq  0x000000010c5892a0
  0x0000000116b68860: push   %rax
  0x0000000116b68861: push   %rdi
  0x0000000116b68862: push   %rsi
  0x0000000116b68863: push   %rdx
  0x0000000116b68864: push   %rcx
  0x0000000116b68865: push   %r8
  0x0000000116b68867: push   %r9
  0x0000000116b68869: push   %r10
  0x0000000116b6886b: mov    %rsp,%r10
  0x0000000116b6886e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68872: push   %r10
  0x0000000116b68874: push   %r11
  0x0000000116b68876: mov    $0x109,%edi
  0x0000000116b6887b: movabs $0x7ff815049fd5,%r10
  0x0000000116b68885: callq  *%r10
  0x0000000116b68888: pop    %r11
  0x0000000116b6888a: pop    %rsp
  0x0000000116b6888b: pop    %r10
  0x0000000116b6888d: pop    %r9
  0x0000000116b6888f: pop    %r8
  0x0000000116b68891: pop    %rcx
  0x0000000116b68892: pop    %rdx
  0x0000000116b68893: pop    %rsi
  0x0000000116b68894: pop    %rdi
  0x0000000116b68895: cmp    %rax,%r15
  0x0000000116b68898: je     0x0000000116b68915
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6889e: mov    %rsp,-0x28(%rsp)
  0x0000000116b688a3: sub    $0x80,%rsp
  0x0000000116b688aa: mov    %rax,0x78(%rsp)
  0x0000000116b688af: mov    %rcx,0x70(%rsp)
  0x0000000116b688b4: mov    %rdx,0x68(%rsp)
  0x0000000116b688b9: mov    %rbx,0x60(%rsp)
  0x0000000116b688be: mov    %rbp,0x50(%rsp)
  0x0000000116b688c3: mov    %rsi,0x48(%rsp)
  0x0000000116b688c8: mov    %rdi,0x40(%rsp)
  0x0000000116b688cd: mov    %r8,0x38(%rsp)
  0x0000000116b688d2: mov    %r9,0x30(%rsp)
  0x0000000116b688d7: mov    %r10,0x28(%rsp)
  0x0000000116b688dc: mov    %r11,0x20(%rsp)
  0x0000000116b688e1: mov    %r12,0x18(%rsp)
  0x0000000116b688e6: mov    %r13,0x10(%rsp)
  0x0000000116b688eb: mov    %r14,0x8(%rsp)
  0x0000000116b688f0: mov    %r15,(%rsp)
  0x0000000116b688f4: movabs $0x10cc6405e,%rdi
  0x0000000116b688fe: movabs $0x116b6889e,%rsi
  0x0000000116b68908: mov    %rsp,%rdx
  0x0000000116b6890b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6890f: callq  0x000000010c7dd830
  0x0000000116b68914: hlt    
  0x0000000116b68915: pop    %rax
  0x0000000116b68916: movabs $0x0,%r10
  0x0000000116b68920: mov    %r10,0x280(%r15)
  0x0000000116b68927: movabs $0x0,%r10
  0x0000000116b68931: mov    %r10,0x290(%r15)
  0x0000000116b68938: movabs $0x0,%r10
  0x0000000116b68942: mov    %r10,0x288(%r15)
  0x0000000116b68949: cmpq   $0x0,0x8(%r15)
  0x0000000116b68951: je     0x0000000116b6895c
  0x0000000116b68957: jmpq   0x0000000116b30420
  0x0000000116b6895c: mov    -0x38(%rbp),%r13
  0x0000000116b68960: mov    -0x30(%rbp),%r14
  0x0000000116b68964: retq   
  0x0000000116b68965: mov    %rsp,-0x28(%rsp)
  0x0000000116b6896a: sub    $0x80,%rsp
  0x0000000116b68971: mov    %rax,0x78(%rsp)
  0x0000000116b68976: mov    %rcx,0x70(%rsp)
  0x0000000116b6897b: mov    %rdx,0x68(%rsp)
  0x0000000116b68980: mov    %rbx,0x60(%rsp)
  0x0000000116b68985: mov    %rbp,0x50(%rsp)
  0x0000000116b6898a: mov    %rsi,0x48(%rsp)
  0x0000000116b6898f: mov    %rdi,0x40(%rsp)
  0x0000000116b68994: mov    %r8,0x38(%rsp)
  0x0000000116b68999: mov    %r9,0x30(%rsp)
  0x0000000116b6899e: mov    %r10,0x28(%rsp)
  0x0000000116b689a3: mov    %r11,0x20(%rsp)
  0x0000000116b689a8: mov    %r12,0x18(%rsp)
  0x0000000116b689ad: mov    %r13,0x10(%rsp)
  0x0000000116b689b2: mov    %r14,0x8(%rsp)
  0x0000000116b689b7: mov    %r15,(%rsp)
  0x0000000116b689bb: movabs $0x10cb763be,%rdi
  0x0000000116b689c5: movabs $0x116b68965,%rsi
  0x0000000116b689cf: mov    %rsp,%rdx
  0x0000000116b689d2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b689d6: callq  0x000000010c7dd830
  0x0000000116b689db: hlt    
  0x0000000116b689dc: mov    %r13,-0x38(%rbp)
  0x0000000116b689e0: lea    (%rsi),%rax
  0x0000000116b689e3: mov    0x8(%rsi),%rcx
  0x0000000116b689e7: movq   $0x0,0x8(%rsi)
  0x0000000116b689ef: mov    (%rcx),%rdx
  0x0000000116b689f2: and    $0x7,%rdx
  0x0000000116b689f6: cmp    $0x5,%rdx
  0x0000000116b689fa: je     0x0000000116b68c74
  0x0000000116b68a00: mov    (%rax),%rdx
  0x0000000116b68a03: test   %rdx,%rdx
  0x0000000116b68a06: je     0x0000000116b68c74
  0x0000000116b68a0c: lock cmpxchg %rdx,(%rcx)
  0x0000000116b68a11: je     0x0000000116b68c74
  0x0000000116b68a17: mov    %rcx,0x8(%rsi)
  0x0000000116b68a1b: callq  0x0000000116b68a25
  0x0000000116b68a20: jmpq   0x0000000116b68c74
  0x0000000116b68a25: lea    0x8(%rsp),%rax
  0x0000000116b68a2a: mov    %r13,-0x38(%rbp)
  0x0000000116b68a2e: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b68a36: je     0x0000000116b68ab3
  0x0000000116b68a3c: mov    %rsp,-0x28(%rsp)
  0x0000000116b68a41: sub    $0x80,%rsp
  0x0000000116b68a48: mov    %rax,0x78(%rsp)
  0x0000000116b68a4d: mov    %rcx,0x70(%rsp)
  0x0000000116b68a52: mov    %rdx,0x68(%rsp)
  0x0000000116b68a57: mov    %rbx,0x60(%rsp)
  0x0000000116b68a5c: mov    %rbp,0x50(%rsp)
  0x0000000116b68a61: mov    %rsi,0x48(%rsp)
  0x0000000116b68a66: mov    %rdi,0x40(%rsp)
  0x0000000116b68a6b: mov    %r8,0x38(%rsp)
  0x0000000116b68a70: mov    %r9,0x30(%rsp)
  0x0000000116b68a75: mov    %r10,0x28(%rsp)
  0x0000000116b68a7a: mov    %r11,0x20(%rsp)
  0x0000000116b68a7f: mov    %r12,0x18(%rsp)
  0x0000000116b68a84: mov    %r13,0x10(%rsp)
  0x0000000116b68a89: mov    %r14,0x8(%rsp)
  0x0000000116b68a8e: mov    %r15,(%rsp)
  0x0000000116b68a92: movabs $0x10cc2363b,%rdi
  0x0000000116b68a9c: movabs $0x116b68a3c,%rsi
  0x0000000116b68aa6: mov    %rsp,%rdx
  0x0000000116b68aa9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68aad: callq  0x000000010c7dd830
  0x0000000116b68ab2: hlt    
  0x0000000116b68ab3: push   %r10
  0x0000000116b68ab5: cmp    -0x9d2220c(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b68abc: je     0x0000000116b68b39
  ;; call_VM_base: heap base corrupted?
  0x0000000116b68ac2: mov    %rsp,-0x28(%rsp)
  0x0000000116b68ac7: sub    $0x80,%rsp
  0x0000000116b68ace: mov    %rax,0x78(%rsp)
  0x0000000116b68ad3: mov    %rcx,0x70(%rsp)
  0x0000000116b68ad8: mov    %rdx,0x68(%rsp)
  0x0000000116b68add: mov    %rbx,0x60(%rsp)
  0x0000000116b68ae2: mov    %rbp,0x50(%rsp)
  0x0000000116b68ae7: mov    %rsi,0x48(%rsp)
  0x0000000116b68aec: mov    %rdi,0x40(%rsp)
  0x0000000116b68af1: mov    %r8,0x38(%rsp)
  0x0000000116b68af6: mov    %r9,0x30(%rsp)
  0x0000000116b68afb: mov    %r10,0x28(%rsp)
  0x0000000116b68b00: mov    %r11,0x20(%rsp)
  0x0000000116b68b05: mov    %r12,0x18(%rsp)
  0x0000000116b68b0a: mov    %r13,0x10(%rsp)
  0x0000000116b68b0f: mov    %r14,0x8(%rsp)
  0x0000000116b68b14: mov    %r15,(%rsp)
  0x0000000116b68b18: movabs $0x10cc63f17,%rdi
  0x0000000116b68b22: movabs $0x116b68ac2,%rsi
  0x0000000116b68b2c: mov    %rsp,%rdx
  0x0000000116b68b2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68b33: callq  0x000000010c7dd830
  0x0000000116b68b38: hlt    
  0x0000000116b68b39: pop    %r10
  0x0000000116b68b3b: mov    %r15,%rdi
  0x0000000116b68b3e: mov    %rbp,0x290(%r15)
  0x0000000116b68b45: mov    %rax,0x280(%r15)
  0x0000000116b68b4c: test   $0xf,%esp
  0x0000000116b68b52: je     0x0000000116b68b6a
  0x0000000116b68b58: sub    $0x8,%rsp
  0x0000000116b68b5c: callq  0x000000010c588f80
  0x0000000116b68b61: add    $0x8,%rsp
  0x0000000116b68b65: jmpq   0x0000000116b68b6f
  0x0000000116b68b6a: callq  0x000000010c588f80
  0x0000000116b68b6f: push   %rax
  0x0000000116b68b70: push   %rdi
  0x0000000116b68b71: push   %rsi
  0x0000000116b68b72: push   %rdx
  0x0000000116b68b73: push   %rcx
  0x0000000116b68b74: push   %r8
  0x0000000116b68b76: push   %r9
  0x0000000116b68b78: push   %r10
  0x0000000116b68b7a: mov    %rsp,%r10
  0x0000000116b68b7d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68b81: push   %r10
  0x0000000116b68b83: push   %r11
  0x0000000116b68b85: mov    $0x109,%edi
  0x0000000116b68b8a: movabs $0x7ff815049fd5,%r10
  0x0000000116b68b94: callq  *%r10
  0x0000000116b68b97: pop    %r11
  0x0000000116b68b99: pop    %rsp
  0x0000000116b68b9a: pop    %r10
  0x0000000116b68b9c: pop    %r9
  0x0000000116b68b9e: pop    %r8
  0x0000000116b68ba0: pop    %rcx
  0x0000000116b68ba1: pop    %rdx
  0x0000000116b68ba2: pop    %rsi
  0x0000000116b68ba3: pop    %rdi
  0x0000000116b68ba4: cmp    %rax,%r15
  0x0000000116b68ba7: je     0x0000000116b68c24
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b68bad: mov    %rsp,-0x28(%rsp)
  0x0000000116b68bb2: sub    $0x80,%rsp
  0x0000000116b68bb9: mov    %rax,0x78(%rsp)
  0x0000000116b68bbe: mov    %rcx,0x70(%rsp)
  0x0000000116b68bc3: mov    %rdx,0x68(%rsp)
  0x0000000116b68bc8: mov    %rbx,0x60(%rsp)
  0x0000000116b68bcd: mov    %rbp,0x50(%rsp)
  0x0000000116b68bd2: mov    %rsi,0x48(%rsp)
  0x0000000116b68bd7: mov    %rdi,0x40(%rsp)
  0x0000000116b68bdc: mov    %r8,0x38(%rsp)
  0x0000000116b68be1: mov    %r9,0x30(%rsp)
  0x0000000116b68be6: mov    %r10,0x28(%rsp)
  0x0000000116b68beb: mov    %r11,0x20(%rsp)
  0x0000000116b68bf0: mov    %r12,0x18(%rsp)
  0x0000000116b68bf5: mov    %r13,0x10(%rsp)
  0x0000000116b68bfa: mov    %r14,0x8(%rsp)
  0x0000000116b68bff: mov    %r15,(%rsp)
  0x0000000116b68c03: movabs $0x10cc6405e,%rdi
  0x0000000116b68c0d: movabs $0x116b68bad,%rsi
  0x0000000116b68c17: mov    %rsp,%rdx
  0x0000000116b68c1a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68c1e: callq  0x000000010c7dd830
  0x0000000116b68c23: hlt    
  0x0000000116b68c24: pop    %rax
  0x0000000116b68c25: movabs $0x0,%r10
  0x0000000116b68c2f: mov    %r10,0x280(%r15)
  0x0000000116b68c36: movabs $0x0,%r10
  0x0000000116b68c40: mov    %r10,0x290(%r15)
  0x0000000116b68c47: movabs $0x0,%r10
  0x0000000116b68c51: mov    %r10,0x288(%r15)
  0x0000000116b68c58: cmpq   $0x0,0x8(%r15)
  0x0000000116b68c60: je     0x0000000116b68c6b
  0x0000000116b68c66: jmpq   0x0000000116b30420
  0x0000000116b68c6b: mov    -0x38(%rbp),%r13
  0x0000000116b68c6f: mov    -0x30(%rbp),%r14
  0x0000000116b68c73: retq   
  0x0000000116b68c74: mov    -0x38(%rbp),%r13
  0x0000000116b68c78: mov    -0x40(%rbp),%rsi
  0x0000000116b68c7c: lea    -0x40(%rbp),%rbx
  0x0000000116b68c80: jmpq   0x0000000116b68f67
  0x0000000116b68c85: callq  0x0000000116b68c8f
  0x0000000116b68c8a: jmpq   0x0000000116b68ede
  0x0000000116b68c8f: lea    0x8(%rsp),%rax
  0x0000000116b68c94: mov    %r13,-0x38(%rbp)
  0x0000000116b68c98: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b68ca0: je     0x0000000116b68d1d
  0x0000000116b68ca6: mov    %rsp,-0x28(%rsp)
  0x0000000116b68cab: sub    $0x80,%rsp
  0x0000000116b68cb2: mov    %rax,0x78(%rsp)
  0x0000000116b68cb7: mov    %rcx,0x70(%rsp)
  0x0000000116b68cbc: mov    %rdx,0x68(%rsp)
  0x0000000116b68cc1: mov    %rbx,0x60(%rsp)
  0x0000000116b68cc6: mov    %rbp,0x50(%rsp)
  0x0000000116b68ccb: mov    %rsi,0x48(%rsp)
  0x0000000116b68cd0: mov    %rdi,0x40(%rsp)
  0x0000000116b68cd5: mov    %r8,0x38(%rsp)
  0x0000000116b68cda: mov    %r9,0x30(%rsp)
  0x0000000116b68cdf: mov    %r10,0x28(%rsp)
  0x0000000116b68ce4: mov    %r11,0x20(%rsp)
  0x0000000116b68ce9: mov    %r12,0x18(%rsp)
  0x0000000116b68cee: mov    %r13,0x10(%rsp)
  0x0000000116b68cf3: mov    %r14,0x8(%rsp)
  0x0000000116b68cf8: mov    %r15,(%rsp)
  0x0000000116b68cfc: movabs $0x10cc2363b,%rdi
  0x0000000116b68d06: movabs $0x116b68ca6,%rsi
  0x0000000116b68d10: mov    %rsp,%rdx
  0x0000000116b68d13: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68d17: callq  0x000000010c7dd830
  0x0000000116b68d1c: hlt    
  0x0000000116b68d1d: push   %r10
  0x0000000116b68d1f: cmp    -0x9d22476(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b68d26: je     0x0000000116b68da3
  ;; call_VM_base: heap base corrupted?
  0x0000000116b68d2c: mov    %rsp,-0x28(%rsp)
  0x0000000116b68d31: sub    $0x80,%rsp
  0x0000000116b68d38: mov    %rax,0x78(%rsp)
  0x0000000116b68d3d: mov    %rcx,0x70(%rsp)
  0x0000000116b68d42: mov    %rdx,0x68(%rsp)
  0x0000000116b68d47: mov    %rbx,0x60(%rsp)
  0x0000000116b68d4c: mov    %rbp,0x50(%rsp)
  0x0000000116b68d51: mov    %rsi,0x48(%rsp)
  0x0000000116b68d56: mov    %rdi,0x40(%rsp)
  0x0000000116b68d5b: mov    %r8,0x38(%rsp)
  0x0000000116b68d60: mov    %r9,0x30(%rsp)
  0x0000000116b68d65: mov    %r10,0x28(%rsp)
  0x0000000116b68d6a: mov    %r11,0x20(%rsp)
  0x0000000116b68d6f: mov    %r12,0x18(%rsp)
  0x0000000116b68d74: mov    %r13,0x10(%rsp)
  0x0000000116b68d79: mov    %r14,0x8(%rsp)
  0x0000000116b68d7e: mov    %r15,(%rsp)
  0x0000000116b68d82: movabs $0x10cc63f17,%rdi
  0x0000000116b68d8c: movabs $0x116b68d2c,%rsi
  0x0000000116b68d96: mov    %rsp,%rdx
  0x0000000116b68d99: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68d9d: callq  0x000000010c7dd830
  0x0000000116b68da2: hlt    
  0x0000000116b68da3: pop    %r10
  0x0000000116b68da5: mov    %r15,%rdi
  0x0000000116b68da8: mov    %rbp,0x290(%r15)
  0x0000000116b68daf: mov    %rax,0x280(%r15)
  0x0000000116b68db6: test   $0xf,%esp
  0x0000000116b68dbc: je     0x0000000116b68dd4
  0x0000000116b68dc2: sub    $0x8,%rsp
  0x0000000116b68dc6: callq  0x000000010c5892a0
  0x0000000116b68dcb: add    $0x8,%rsp
  0x0000000116b68dcf: jmpq   0x0000000116b68dd9
  0x0000000116b68dd4: callq  0x000000010c5892a0
  0x0000000116b68dd9: push   %rax
  0x0000000116b68dda: push   %rdi
  0x0000000116b68ddb: push   %rsi
  0x0000000116b68ddc: push   %rdx
  0x0000000116b68ddd: push   %rcx
  0x0000000116b68dde: push   %r8
  0x0000000116b68de0: push   %r9
  0x0000000116b68de2: push   %r10
  0x0000000116b68de4: mov    %rsp,%r10
  0x0000000116b68de7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68deb: push   %r10
  0x0000000116b68ded: push   %r11
  0x0000000116b68def: mov    $0x109,%edi
  0x0000000116b68df4: movabs $0x7ff815049fd5,%r10
  0x0000000116b68dfe: callq  *%r10
  0x0000000116b68e01: pop    %r11
  0x0000000116b68e03: pop    %rsp
  0x0000000116b68e04: pop    %r10
  0x0000000116b68e06: pop    %r9
  0x0000000116b68e08: pop    %r8
  0x0000000116b68e0a: pop    %rcx
  0x0000000116b68e0b: pop    %rdx
  0x0000000116b68e0c: pop    %rsi
  0x0000000116b68e0d: pop    %rdi
  0x0000000116b68e0e: cmp    %rax,%r15
  0x0000000116b68e11: je     0x0000000116b68e8e
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b68e17: mov    %rsp,-0x28(%rsp)
  0x0000000116b68e1c: sub    $0x80,%rsp
  0x0000000116b68e23: mov    %rax,0x78(%rsp)
  0x0000000116b68e28: mov    %rcx,0x70(%rsp)
  0x0000000116b68e2d: mov    %rdx,0x68(%rsp)
  0x0000000116b68e32: mov    %rbx,0x60(%rsp)
  0x0000000116b68e37: mov    %rbp,0x50(%rsp)
  0x0000000116b68e3c: mov    %rsi,0x48(%rsp)
  0x0000000116b68e41: mov    %rdi,0x40(%rsp)
  0x0000000116b68e46: mov    %r8,0x38(%rsp)
  0x0000000116b68e4b: mov    %r9,0x30(%rsp)
  0x0000000116b68e50: mov    %r10,0x28(%rsp)
  0x0000000116b68e55: mov    %r11,0x20(%rsp)
  0x0000000116b68e5a: mov    %r12,0x18(%rsp)
  0x0000000116b68e5f: mov    %r13,0x10(%rsp)
  0x0000000116b68e64: mov    %r14,0x8(%rsp)
  0x0000000116b68e69: mov    %r15,(%rsp)
  0x0000000116b68e6d: movabs $0x10cc6405e,%rdi
  0x0000000116b68e77: movabs $0x116b68e17,%rsi
  0x0000000116b68e81: mov    %rsp,%rdx
  0x0000000116b68e84: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68e88: callq  0x000000010c7dd830
  0x0000000116b68e8d: hlt    
  0x0000000116b68e8e: pop    %rax
  0x0000000116b68e8f: movabs $0x0,%r10
  0x0000000116b68e99: mov    %r10,0x280(%r15)
  0x0000000116b68ea0: movabs $0x0,%r10
  0x0000000116b68eaa: mov    %r10,0x290(%r15)
  0x0000000116b68eb1: movabs $0x0,%r10
  0x0000000116b68ebb: mov    %r10,0x288(%r15)
  0x0000000116b68ec2: cmpq   $0x0,0x8(%r15)
  0x0000000116b68eca: je     0x0000000116b68ed5
  0x0000000116b68ed0: jmpq   0x0000000116b30420
  0x0000000116b68ed5: mov    -0x38(%rbp),%r13
  0x0000000116b68ed9: mov    -0x30(%rbp),%r14
  0x0000000116b68edd: retq   
  0x0000000116b68ede: mov    %rsp,-0x28(%rsp)
  0x0000000116b68ee3: sub    $0x80,%rsp
  0x0000000116b68eea: mov    %rax,0x78(%rsp)
  0x0000000116b68eef: mov    %rcx,0x70(%rsp)
  0x0000000116b68ef4: mov    %rdx,0x68(%rsp)
  0x0000000116b68ef9: mov    %rbx,0x60(%rsp)
  0x0000000116b68efe: mov    %rbp,0x50(%rsp)
  0x0000000116b68f03: mov    %rsi,0x48(%rsp)
  0x0000000116b68f08: mov    %rdi,0x40(%rsp)
  0x0000000116b68f0d: mov    %r8,0x38(%rsp)
  0x0000000116b68f12: mov    %r9,0x30(%rsp)
  0x0000000116b68f17: mov    %r10,0x28(%rsp)
  0x0000000116b68f1c: mov    %r11,0x20(%rsp)
  0x0000000116b68f21: mov    %r12,0x18(%rsp)
  0x0000000116b68f26: mov    %r13,0x10(%rsp)
  0x0000000116b68f2b: mov    %r14,0x8(%rsp)
  0x0000000116b68f30: mov    %r15,(%rsp)
  0x0000000116b68f34: movabs $0x10cb763be,%rdi
  0x0000000116b68f3e: movabs $0x116b68ede,%rsi
  0x0000000116b68f48: mov    %rsp,%rdx
  0x0000000116b68f4b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68f4f: callq  0x000000010c7dd830
  0x0000000116b68f54: hlt    
  0x0000000116b68f55: cmpq   $0x0,0x8(%rsi)
  0x0000000116b68f5d: jne    0x0000000116b68c85
  0x0000000116b68f63: add    $0x10,%rsi
  0x0000000116b68f67: cmp    %rbx,%rsi
  0x0000000116b68f6a: jne    0x0000000116b68f55
  0x0000000116b68f6c: cmpb   $0x0,-0x9d4bd71(%rip)        # 0x000000010ce1d202
  0x0000000116b68f73: je     0x0000000116b69028
  0x0000000116b68f79: mov    -0x18(%rbp),%rsi
  0x0000000116b68f7d: mov    %r15,%rdi
  0x0000000116b68f80: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b68f88: je     0x0000000116b69005
  0x0000000116b68f8e: mov    %rsp,-0x28(%rsp)
  0x0000000116b68f93: sub    $0x80,%rsp
  0x0000000116b68f9a: mov    %rax,0x78(%rsp)
  0x0000000116b68f9f: mov    %rcx,0x70(%rsp)
  0x0000000116b68fa4: mov    %rdx,0x68(%rsp)
  0x0000000116b68fa9: mov    %rbx,0x60(%rsp)
  0x0000000116b68fae: mov    %rbp,0x50(%rsp)
  0x0000000116b68fb3: mov    %rsi,0x48(%rsp)
  0x0000000116b68fb8: mov    %rdi,0x40(%rsp)
  0x0000000116b68fbd: mov    %r8,0x38(%rsp)
  0x0000000116b68fc2: mov    %r9,0x30(%rsp)
  0x0000000116b68fc7: mov    %r10,0x28(%rsp)
  0x0000000116b68fcc: mov    %r11,0x20(%rsp)
  0x0000000116b68fd1: mov    %r12,0x18(%rsp)
  0x0000000116b68fd6: mov    %r13,0x10(%rsp)
  0x0000000116b68fdb: mov    %r14,0x8(%rsp)
  0x0000000116b68fe0: mov    %r15,(%rsp)
  0x0000000116b68fe4: movabs $0x10cc2363b,%rdi
  0x0000000116b68fee: movabs $0x116b68f8e,%rsi
  0x0000000116b68ff8: mov    %rsp,%rdx
  0x0000000116b68ffb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b68fff: callq  0x000000010c7dd830
  0x0000000116b69004: hlt    
  0x0000000116b69005: test   $0xf,%esp
  0x0000000116b6900b: je     0x0000000116b69023
  0x0000000116b69011: sub    $0x8,%rsp
  0x0000000116b69015: callq  0x000000010c9c9850
  0x0000000116b6901a: add    $0x8,%rsp
  0x0000000116b6901e: jmpq   0x0000000116b69028
  0x0000000116b69023: callq  0x000000010c9c9850
  0x0000000116b69028: mov    -0x8(%rbp),%rbx
  0x0000000116b6902c: leaveq 
  0x0000000116b6902d: pop    %r13
  0x0000000116b6902f: mov    %rbx,%rsp
  0x0000000116b69032: jmpq   *%r13
  0x0000000116b69035: mov    %rsp,-0x28(%rsp)
  0x0000000116b6903a: sub    $0x80,%rsp
  0x0000000116b69041: mov    %rax,0x78(%rsp)
  0x0000000116b69046: mov    %rcx,0x70(%rsp)
  0x0000000116b6904b: mov    %rdx,0x68(%rsp)
  0x0000000116b69050: mov    %rbx,0x60(%rsp)
  0x0000000116b69055: mov    %rbp,0x50(%rsp)
  0x0000000116b6905a: mov    %rsi,0x48(%rsp)
  0x0000000116b6905f: mov    %rdi,0x40(%rsp)
  0x0000000116b69064: mov    %r8,0x38(%rsp)
  0x0000000116b69069: mov    %r9,0x30(%rsp)
  0x0000000116b6906e: mov    %r10,0x28(%rsp)
  0x0000000116b69073: mov    %r11,0x20(%rsp)
  0x0000000116b69078: mov    %r12,0x18(%rsp)
  0x0000000116b6907d: mov    %r13,0x10(%rsp)
  0x0000000116b69082: mov    %r14,0x8(%rsp)
  0x0000000116b69087: mov    %r15,(%rsp)
  0x0000000116b6908b: movabs $0x10cb763be,%rdi
  0x0000000116b69095: movabs $0x116b69035,%rsi
  0x0000000116b6909f: mov    %rsp,%rdx
  0x0000000116b690a2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b690a6: callq  0x000000010c7dd830
  0x0000000116b690ab: hlt    
  0x0000000116b690ac: nop
  0x0000000116b690ad: nop
  0x0000000116b690ae: nop
  0x0000000116b690af: nop
  0x0000000116b690b0: int3   
  0x0000000116b690b1: int3   
  0x0000000116b690b2: int3   
  0x0000000116b690b3: int3   
  0x0000000116b690b4: int3   
  0x0000000116b690b5: int3   
  0x0000000116b690b6: int3   
  0x0000000116b690b7: int3   
  0x0000000116b690b8: int3   
  0x0000000116b690b9: int3   
  0x0000000116b690ba: int3   
  0x0000000116b690bb: int3   
  0x0000000116b690bc: int3   
  0x0000000116b690bd: int3   
  0x0000000116b690be: int3   
  0x0000000116b690bf: int3   

----------------------------------------------------------------------
getstatic  178 getstatic  [0x0000000116b69100, 0x0000000116b695c0]  1216 bytes

  0x0000000116b69100: push   %rax
  0x0000000116b69101: jmpq   0x0000000116b69130
  0x0000000116b69106: sub    $0x8,%rsp
  0x0000000116b6910a: vmovss %xmm0,(%rsp)
  0x0000000116b6910f: jmpq   0x0000000116b69130
  0x0000000116b69114: sub    $0x10,%rsp
  0x0000000116b69118: vmovsd %xmm0,(%rsp)
  0x0000000116b6911d: jmpq   0x0000000116b69130
  0x0000000116b69122: sub    $0x10,%rsp
  0x0000000116b69126: mov    %rax,(%rsp)
  0x0000000116b6912a: jmpq   0x0000000116b69130
  0x0000000116b6912f: push   %rax
  0x0000000116b69130: movzwl 0x1(%r13),%edx
  0x0000000116b69135: mov    -0x28(%rbp),%rcx
  0x0000000116b69139: shl    $0x2,%edx
  0x0000000116b6913c: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b69140: shr    $0x10,%ebx
  0x0000000116b69143: and    $0xff,%ebx
  0x0000000116b69149: cmp    $0xb2,%ebx
  0x0000000116b6914f: je     0x0000000116b693c2
  0x0000000116b69155: mov    $0xb2,%ebx
  0x0000000116b6915a: callq  0x0000000116b69164
  0x0000000116b6915f: jmpq   0x0000000116b693b6
  0x0000000116b69164: mov    %rbx,%rsi
  0x0000000116b69167: lea    0x8(%rsp),%rax
  0x0000000116b6916c: mov    %r13,-0x38(%rbp)
  0x0000000116b69170: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b69178: je     0x0000000116b691f5
  0x0000000116b6917e: mov    %rsp,-0x28(%rsp)
  0x0000000116b69183: sub    $0x80,%rsp
  0x0000000116b6918a: mov    %rax,0x78(%rsp)
  0x0000000116b6918f: mov    %rcx,0x70(%rsp)
  0x0000000116b69194: mov    %rdx,0x68(%rsp)
  0x0000000116b69199: mov    %rbx,0x60(%rsp)
  0x0000000116b6919e: mov    %rbp,0x50(%rsp)
  0x0000000116b691a3: mov    %rsi,0x48(%rsp)
  0x0000000116b691a8: mov    %rdi,0x40(%rsp)
  0x0000000116b691ad: mov    %r8,0x38(%rsp)
  0x0000000116b691b2: mov    %r9,0x30(%rsp)
  0x0000000116b691b7: mov    %r10,0x28(%rsp)
  0x0000000116b691bc: mov    %r11,0x20(%rsp)
  0x0000000116b691c1: mov    %r12,0x18(%rsp)
  0x0000000116b691c6: mov    %r13,0x10(%rsp)
  0x0000000116b691cb: mov    %r14,0x8(%rsp)
  0x0000000116b691d0: mov    %r15,(%rsp)
  0x0000000116b691d4: movabs $0x10cc2363b,%rdi
  0x0000000116b691de: movabs $0x116b6917e,%rsi
  0x0000000116b691e8: mov    %rsp,%rdx
  0x0000000116b691eb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b691ef: callq  0x000000010c7dd830
  0x0000000116b691f4: hlt    
  0x0000000116b691f5: push   %r10
  0x0000000116b691f7: cmp    -0x9d2294e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b691fe: je     0x0000000116b6927b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b69204: mov    %rsp,-0x28(%rsp)
  0x0000000116b69209: sub    $0x80,%rsp
  0x0000000116b69210: mov    %rax,0x78(%rsp)
  0x0000000116b69215: mov    %rcx,0x70(%rsp)
  0x0000000116b6921a: mov    %rdx,0x68(%rsp)
  0x0000000116b6921f: mov    %rbx,0x60(%rsp)
  0x0000000116b69224: mov    %rbp,0x50(%rsp)
  0x0000000116b69229: mov    %rsi,0x48(%rsp)
  0x0000000116b6922e: mov    %rdi,0x40(%rsp)
  0x0000000116b69233: mov    %r8,0x38(%rsp)
  0x0000000116b69238: mov    %r9,0x30(%rsp)
  0x0000000116b6923d: mov    %r10,0x28(%rsp)
  0x0000000116b69242: mov    %r11,0x20(%rsp)
  0x0000000116b69247: mov    %r12,0x18(%rsp)
  0x0000000116b6924c: mov    %r13,0x10(%rsp)
  0x0000000116b69251: mov    %r14,0x8(%rsp)
  0x0000000116b69256: mov    %r15,(%rsp)
  0x0000000116b6925a: movabs $0x10cc63f17,%rdi
  0x0000000116b69264: movabs $0x116b69204,%rsi
  0x0000000116b6926e: mov    %rsp,%rdx
  0x0000000116b69271: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69275: callq  0x000000010c7dd830
  0x0000000116b6927a: hlt    
  0x0000000116b6927b: pop    %r10
  0x0000000116b6927d: mov    %r15,%rdi
  0x0000000116b69280: mov    %rbp,0x290(%r15)
  0x0000000116b69287: mov    %rax,0x280(%r15)
  0x0000000116b6928e: test   $0xf,%esp
  0x0000000116b69294: je     0x0000000116b692ac
  0x0000000116b6929a: sub    $0x8,%rsp
  0x0000000116b6929e: callq  0x000000010c588600
  0x0000000116b692a3: add    $0x8,%rsp
  0x0000000116b692a7: jmpq   0x0000000116b692b1
  0x0000000116b692ac: callq  0x000000010c588600
  0x0000000116b692b1: push   %rax
  0x0000000116b692b2: push   %rdi
  0x0000000116b692b3: push   %rsi
  0x0000000116b692b4: push   %rdx
  0x0000000116b692b5: push   %rcx
  0x0000000116b692b6: push   %r8
  0x0000000116b692b8: push   %r9
  0x0000000116b692ba: push   %r10
  0x0000000116b692bc: mov    %rsp,%r10
  0x0000000116b692bf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b692c3: push   %r10
  0x0000000116b692c5: push   %r11
  0x0000000116b692c7: mov    $0x109,%edi
  0x0000000116b692cc: movabs $0x7ff815049fd5,%r10
  0x0000000116b692d6: callq  *%r10
  0x0000000116b692d9: pop    %r11
  0x0000000116b692db: pop    %rsp
  0x0000000116b692dc: pop    %r10
  0x0000000116b692de: pop    %r9
  0x0000000116b692e0: pop    %r8
  0x0000000116b692e2: pop    %rcx
  0x0000000116b692e3: pop    %rdx
  0x0000000116b692e4: pop    %rsi
  0x0000000116b692e5: pop    %rdi
  0x0000000116b692e6: cmp    %rax,%r15
  0x0000000116b692e9: je     0x0000000116b69366
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b692ef: mov    %rsp,-0x28(%rsp)
  0x0000000116b692f4: sub    $0x80,%rsp
  0x0000000116b692fb: mov    %rax,0x78(%rsp)
  0x0000000116b69300: mov    %rcx,0x70(%rsp)
  0x0000000116b69305: mov    %rdx,0x68(%rsp)
  0x0000000116b6930a: mov    %rbx,0x60(%rsp)
  0x0000000116b6930f: mov    %rbp,0x50(%rsp)
  0x0000000116b69314: mov    %rsi,0x48(%rsp)
  0x0000000116b69319: mov    %rdi,0x40(%rsp)
  0x0000000116b6931e: mov    %r8,0x38(%rsp)
  0x0000000116b69323: mov    %r9,0x30(%rsp)
  0x0000000116b69328: mov    %r10,0x28(%rsp)
  0x0000000116b6932d: mov    %r11,0x20(%rsp)
  0x0000000116b69332: mov    %r12,0x18(%rsp)
  0x0000000116b69337: mov    %r13,0x10(%rsp)
  0x0000000116b6933c: mov    %r14,0x8(%rsp)
  0x0000000116b69341: mov    %r15,(%rsp)
  0x0000000116b69345: movabs $0x10cc6405e,%rdi
  0x0000000116b6934f: movabs $0x116b692ef,%rsi
  0x0000000116b69359: mov    %rsp,%rdx
  0x0000000116b6935c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69360: callq  0x000000010c7dd830
  0x0000000116b69365: hlt    
  0x0000000116b69366: pop    %rax
  0x0000000116b69367: movabs $0x0,%r10
  0x0000000116b69371: mov    %r10,0x280(%r15)
  0x0000000116b69378: movabs $0x0,%r10
  0x0000000116b69382: mov    %r10,0x290(%r15)
  0x0000000116b69389: movabs $0x0,%r10
  0x0000000116b69393: mov    %r10,0x288(%r15)
  0x0000000116b6939a: cmpq   $0x0,0x8(%r15)
  0x0000000116b693a2: je     0x0000000116b693ad
  0x0000000116b693a8: jmpq   0x0000000116b30420
  0x0000000116b693ad: mov    -0x38(%rbp),%r13
  0x0000000116b693b1: mov    -0x30(%rbp),%r14
  0x0000000116b693b5: retq   
  0x0000000116b693b6: movzwl 0x1(%r13),%edx
  0x0000000116b693bb: mov    -0x28(%rbp),%rcx
  0x0000000116b693bf: shl    $0x2,%edx
  0x0000000116b693c2: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b693c7: mov    0x28(%rcx,%rdx,8),%eax
  0x0000000116b693cb: mov    0x18(%rcx,%rdx,8),%rcx
  0x0000000116b693d0: mov    0x70(%rcx),%rcx
  0x0000000116b693d4: shr    $0x1c,%eax
  0x0000000116b693d7: and    $0xf,%eax
  0x0000000116b693da: jne    0x0000000116b693ea
  0x0000000116b693e0: movsbl (%rcx,%rbx,1),%eax
  0x0000000116b693e4: push   %rax
  0x0000000116b693e5: jmpq   0x0000000116b6959c
  0x0000000116b693ea: cmp    $0x1,%eax
  0x0000000116b693ed: jne    0x0000000116b693fd
  0x0000000116b693f3: movsbl (%rcx,%rbx,1),%eax
  0x0000000116b693f7: push   %rax
  0x0000000116b693f8: jmpq   0x0000000116b6959c
  0x0000000116b693fd: cmp    $0x8,%eax
  0x0000000116b69400: jne    0x0000000116b6949b
  0x0000000116b69406: mov    (%rcx,%rbx,1),%eax
  0x0000000116b69409: push   %r10
  0x0000000116b6940b: cmp    -0x9d22b62(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b69412: je     0x0000000116b6948f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b69418: mov    %rsp,-0x28(%rsp)
  0x0000000116b6941d: sub    $0x80,%rsp
  0x0000000116b69424: mov    %rax,0x78(%rsp)
  0x0000000116b69429: mov    %rcx,0x70(%rsp)
  0x0000000116b6942e: mov    %rdx,0x68(%rsp)
  0x0000000116b69433: mov    %rbx,0x60(%rsp)
  0x0000000116b69438: mov    %rbp,0x50(%rsp)
  0x0000000116b6943d: mov    %rsi,0x48(%rsp)
  0x0000000116b69442: mov    %rdi,0x40(%rsp)
  0x0000000116b69447: mov    %r8,0x38(%rsp)
  0x0000000116b6944c: mov    %r9,0x30(%rsp)
  0x0000000116b69451: mov    %r10,0x28(%rsp)
  0x0000000116b69456: mov    %r11,0x20(%rsp)
  0x0000000116b6945b: mov    %r12,0x18(%rsp)
  0x0000000116b69460: mov    %r13,0x10(%rsp)
  0x0000000116b69465: mov    %r14,0x8(%rsp)
  0x0000000116b6946a: mov    %r15,(%rsp)
  0x0000000116b6946e: movabs $0x10cc64abb,%rdi
  0x0000000116b69478: movabs $0x116b69418,%rsi
  0x0000000116b69482: mov    %rsp,%rdx
  0x0000000116b69485: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69489: callq  0x000000010c7dd830
  0x0000000116b6948e: hlt    
  0x0000000116b6948f: pop    %r10
  0x0000000116b69491: shl    $0x3,%rax
  0x0000000116b69495: push   %rax
  0x0000000116b69496: jmpq   0x0000000116b6959c
  0x0000000116b6949b: cmp    $0x4,%eax
  0x0000000116b6949e: jne    0x0000000116b694ad
  0x0000000116b694a4: mov    (%rcx,%rbx,1),%eax
  0x0000000116b694a7: push   %rax
  0x0000000116b694a8: jmpq   0x0000000116b6959c
  0x0000000116b694ad: cmp    $0x2,%eax
  0x0000000116b694b0: jne    0x0000000116b694c0
  0x0000000116b694b6: movzwl (%rcx,%rbx,1),%eax
  0x0000000116b694ba: push   %rax
  0x0000000116b694bb: jmpq   0x0000000116b6959c
  0x0000000116b694c0: cmp    $0x3,%eax
  0x0000000116b694c3: jne    0x0000000116b694d3
  0x0000000116b694c9: movswl (%rcx,%rbx,1),%eax
  0x0000000116b694cd: push   %rax
  0x0000000116b694ce: jmpq   0x0000000116b6959c
  0x0000000116b694d3: cmp    $0x5,%eax
  0x0000000116b694d6: jne    0x0000000116b694ed
  0x0000000116b694dc: mov    (%rcx,%rbx,1),%rax
  0x0000000116b694e0: sub    $0x10,%rsp
  0x0000000116b694e4: mov    %rax,(%rsp)
  0x0000000116b694e8: jmpq   0x0000000116b6959c
  0x0000000116b694ed: cmp    $0x6,%eax
  0x0000000116b694f0: jne    0x0000000116b69509
  0x0000000116b694f6: vmovss (%rcx,%rbx,1),%xmm0
  0x0000000116b694fb: sub    $0x8,%rsp
  0x0000000116b694ff: vmovss %xmm0,(%rsp)
  0x0000000116b69504: jmpq   0x0000000116b6959c
  0x0000000116b69509: cmp    $0x7,%eax
  0x0000000116b6950c: jne    0x0000000116b69525
  0x0000000116b69512: vmovsd (%rcx,%rbx,1),%xmm0
  0x0000000116b69517: sub    $0x10,%rsp
  0x0000000116b6951b: vmovsd %xmm0,(%rsp)
  0x0000000116b69520: jmpq   0x0000000116b6959c
  0x0000000116b69525: mov    %rsp,-0x28(%rsp)
  0x0000000116b6952a: sub    $0x80,%rsp
  0x0000000116b69531: mov    %rax,0x78(%rsp)
  0x0000000116b69536: mov    %rcx,0x70(%rsp)
  0x0000000116b6953b: mov    %rdx,0x68(%rsp)
  0x0000000116b69540: mov    %rbx,0x60(%rsp)
  0x0000000116b69545: mov    %rbp,0x50(%rsp)
  0x0000000116b6954a: mov    %rsi,0x48(%rsp)
  0x0000000116b6954f: mov    %rdi,0x40(%rsp)
  0x0000000116b69554: mov    %r8,0x38(%rsp)
  0x0000000116b69559: mov    %r9,0x30(%rsp)
  0x0000000116b6955e: mov    %r10,0x28(%rsp)
  0x0000000116b69563: mov    %r11,0x20(%rsp)
  0x0000000116b69568: mov    %r12,0x18(%rsp)
  0x0000000116b6956d: mov    %r13,0x10(%rsp)
  0x0000000116b69572: mov    %r14,0x8(%rsp)
  0x0000000116b69577: mov    %r15,(%rsp)
  0x0000000116b6957b: movabs $0x10ccb07b1,%rdi
  0x0000000116b69585: movabs $0x116b69525,%rsi
  0x0000000116b6958f: mov    %rsp,%rdx
  0x0000000116b69592: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69596: callq  0x000000010c7dd830
  0x0000000116b6959b: hlt    
  0x0000000116b6959c: movzbl 0x3(%r13),%ebx
  0x0000000116b695a1: add    $0x3,%r13
  0x0000000116b695a5: movabs $0x10ce3b680,%r10
  0x0000000116b695af: jmpq   *(%r10,%rbx,8)
  0x0000000116b695b3: nop
  0x0000000116b695b4: nop
  0x0000000116b695b5: nop
  0x0000000116b695b6: nop
  0x0000000116b695b7: nop
  0x0000000116b695b8: int3   
  0x0000000116b695b9: int3   
  0x0000000116b695ba: int3   
  0x0000000116b695bb: int3   
  0x0000000116b695bc: int3   
  0x0000000116b695bd: int3   
  0x0000000116b695be: int3   
  0x0000000116b695bf: int3   

----------------------------------------------------------------------
putstatic  179 putstatic  [0x0000000116b69600, 0x0000000116b69b00]  1280 bytes

  0x0000000116b69600: push   %rax
  0x0000000116b69601: jmpq   0x0000000116b69630
  0x0000000116b69606: sub    $0x8,%rsp
  0x0000000116b6960a: vmovss %xmm0,(%rsp)
  0x0000000116b6960f: jmpq   0x0000000116b69630
  0x0000000116b69614: sub    $0x10,%rsp
  0x0000000116b69618: vmovsd %xmm0,(%rsp)
  0x0000000116b6961d: jmpq   0x0000000116b69630
  0x0000000116b69622: sub    $0x10,%rsp
  0x0000000116b69626: mov    %rax,(%rsp)
  0x0000000116b6962a: jmpq   0x0000000116b69630
  0x0000000116b6962f: push   %rax
  0x0000000116b69630: movzwl 0x1(%r13),%edx
  0x0000000116b69635: mov    -0x28(%rbp),%rcx
  0x0000000116b69639: shl    $0x2,%edx
  0x0000000116b6963c: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b69640: shr    $0x18,%ebx
  0x0000000116b69643: and    $0xff,%ebx
  0x0000000116b69649: cmp    $0xb3,%ebx
  0x0000000116b6964f: je     0x0000000116b698c2
  0x0000000116b69655: mov    $0xb3,%ebx
  0x0000000116b6965a: callq  0x0000000116b69664
  0x0000000116b6965f: jmpq   0x0000000116b698b6
  0x0000000116b69664: mov    %rbx,%rsi
  0x0000000116b69667: lea    0x8(%rsp),%rax
  0x0000000116b6966c: mov    %r13,-0x38(%rbp)
  0x0000000116b69670: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b69678: je     0x0000000116b696f5
  0x0000000116b6967e: mov    %rsp,-0x28(%rsp)
  0x0000000116b69683: sub    $0x80,%rsp
  0x0000000116b6968a: mov    %rax,0x78(%rsp)
  0x0000000116b6968f: mov    %rcx,0x70(%rsp)
  0x0000000116b69694: mov    %rdx,0x68(%rsp)
  0x0000000116b69699: mov    %rbx,0x60(%rsp)
  0x0000000116b6969e: mov    %rbp,0x50(%rsp)
  0x0000000116b696a3: mov    %rsi,0x48(%rsp)
  0x0000000116b696a8: mov    %rdi,0x40(%rsp)
  0x0000000116b696ad: mov    %r8,0x38(%rsp)
  0x0000000116b696b2: mov    %r9,0x30(%rsp)
  0x0000000116b696b7: mov    %r10,0x28(%rsp)
  0x0000000116b696bc: mov    %r11,0x20(%rsp)
  0x0000000116b696c1: mov    %r12,0x18(%rsp)
  0x0000000116b696c6: mov    %r13,0x10(%rsp)
  0x0000000116b696cb: mov    %r14,0x8(%rsp)
  0x0000000116b696d0: mov    %r15,(%rsp)
  0x0000000116b696d4: movabs $0x10cc2363b,%rdi
  0x0000000116b696de: movabs $0x116b6967e,%rsi
  0x0000000116b696e8: mov    %rsp,%rdx
  0x0000000116b696eb: and    $0xfffffffffffffff0,%rsp
  0x0000000116b696ef: callq  0x000000010c7dd830
  0x0000000116b696f4: hlt    
  0x0000000116b696f5: push   %r10
  0x0000000116b696f7: cmp    -0x9d22e4e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b696fe: je     0x0000000116b6977b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b69704: mov    %rsp,-0x28(%rsp)
  0x0000000116b69709: sub    $0x80,%rsp
  0x0000000116b69710: mov    %rax,0x78(%rsp)
  0x0000000116b69715: mov    %rcx,0x70(%rsp)
  0x0000000116b6971a: mov    %rdx,0x68(%rsp)
  0x0000000116b6971f: mov    %rbx,0x60(%rsp)
  0x0000000116b69724: mov    %rbp,0x50(%rsp)
  0x0000000116b69729: mov    %rsi,0x48(%rsp)
  0x0000000116b6972e: mov    %rdi,0x40(%rsp)
  0x0000000116b69733: mov    %r8,0x38(%rsp)
  0x0000000116b69738: mov    %r9,0x30(%rsp)
  0x0000000116b6973d: mov    %r10,0x28(%rsp)
  0x0000000116b69742: mov    %r11,0x20(%rsp)
  0x0000000116b69747: mov    %r12,0x18(%rsp)
  0x0000000116b6974c: mov    %r13,0x10(%rsp)
  0x0000000116b69751: mov    %r14,0x8(%rsp)
  0x0000000116b69756: mov    %r15,(%rsp)
  0x0000000116b6975a: movabs $0x10cc63f17,%rdi
  0x0000000116b69764: movabs $0x116b69704,%rsi
  0x0000000116b6976e: mov    %rsp,%rdx
  0x0000000116b69771: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69775: callq  0x000000010c7dd830
  0x0000000116b6977a: hlt    
  0x0000000116b6977b: pop    %r10
  0x0000000116b6977d: mov    %r15,%rdi
  0x0000000116b69780: mov    %rbp,0x290(%r15)
  0x0000000116b69787: mov    %rax,0x280(%r15)
  0x0000000116b6978e: test   $0xf,%esp
  0x0000000116b69794: je     0x0000000116b697ac
  0x0000000116b6979a: sub    $0x8,%rsp
  0x0000000116b6979e: callq  0x000000010c588600
  0x0000000116b697a3: add    $0x8,%rsp
  0x0000000116b697a7: jmpq   0x0000000116b697b1
  0x0000000116b697ac: callq  0x000000010c588600
  0x0000000116b697b1: push   %rax
  0x0000000116b697b2: push   %rdi
  0x0000000116b697b3: push   %rsi
  0x0000000116b697b4: push   %rdx
  0x0000000116b697b5: push   %rcx
  0x0000000116b697b6: push   %r8
  0x0000000116b697b8: push   %r9
  0x0000000116b697ba: push   %r10
  0x0000000116b697bc: mov    %rsp,%r10
  0x0000000116b697bf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b697c3: push   %r10
  0x0000000116b697c5: push   %r11
  0x0000000116b697c7: mov    $0x109,%edi
  0x0000000116b697cc: movabs $0x7ff815049fd5,%r10
  0x0000000116b697d6: callq  *%r10
  0x0000000116b697d9: pop    %r11
  0x0000000116b697db: pop    %rsp
  0x0000000116b697dc: pop    %r10
  0x0000000116b697de: pop    %r9
  0x0000000116b697e0: pop    %r8
  0x0000000116b697e2: pop    %rcx
  0x0000000116b697e3: pop    %rdx
  0x0000000116b697e4: pop    %rsi
  0x0000000116b697e5: pop    %rdi
  0x0000000116b697e6: cmp    %rax,%r15
  0x0000000116b697e9: je     0x0000000116b69866
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b697ef: mov    %rsp,-0x28(%rsp)
  0x0000000116b697f4: sub    $0x80,%rsp
  0x0000000116b697fb: mov    %rax,0x78(%rsp)
  0x0000000116b69800: mov    %rcx,0x70(%rsp)
  0x0000000116b69805: mov    %rdx,0x68(%rsp)
  0x0000000116b6980a: mov    %rbx,0x60(%rsp)
  0x0000000116b6980f: mov    %rbp,0x50(%rsp)
  0x0000000116b69814: mov    %rsi,0x48(%rsp)
  0x0000000116b69819: mov    %rdi,0x40(%rsp)
  0x0000000116b6981e: mov    %r8,0x38(%rsp)
  0x0000000116b69823: mov    %r9,0x30(%rsp)
  0x0000000116b69828: mov    %r10,0x28(%rsp)
  0x0000000116b6982d: mov    %r11,0x20(%rsp)
  0x0000000116b69832: mov    %r12,0x18(%rsp)
  0x0000000116b69837: mov    %r13,0x10(%rsp)
  0x0000000116b6983c: mov    %r14,0x8(%rsp)
  0x0000000116b69841: mov    %r15,(%rsp)
  0x0000000116b69845: movabs $0x10cc6405e,%rdi
  0x0000000116b6984f: movabs $0x116b697ef,%rsi
  0x0000000116b69859: mov    %rsp,%rdx
  0x0000000116b6985c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69860: callq  0x000000010c7dd830
  0x0000000116b69865: hlt    
  0x0000000116b69866: pop    %rax
  0x0000000116b69867: movabs $0x0,%r10
  0x0000000116b69871: mov    %r10,0x280(%r15)
  0x0000000116b69878: movabs $0x0,%r10
  0x0000000116b69882: mov    %r10,0x290(%r15)
  0x0000000116b69889: movabs $0x0,%r10
  0x0000000116b69893: mov    %r10,0x288(%r15)
  0x0000000116b6989a: cmpq   $0x0,0x8(%r15)
  0x0000000116b698a2: je     0x0000000116b698ad
  0x0000000116b698a8: jmpq   0x0000000116b30420
  0x0000000116b698ad: mov    -0x38(%rbp),%r13
  0x0000000116b698b1: mov    -0x30(%rbp),%r14
  0x0000000116b698b5: retq   
  0x0000000116b698b6: movzwl 0x1(%r13),%edx
  0x0000000116b698bb: mov    -0x28(%rbp),%rcx
  0x0000000116b698bf: shl    $0x2,%edx
  0x0000000116b698c2: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b698c7: mov    0x28(%rcx,%rdx,8),%eax
  0x0000000116b698cb: mov    0x18(%rcx,%rdx,8),%rcx
  0x0000000116b698d0: mov    0x70(%rcx),%rcx
  0x0000000116b698d4: mov    %eax,%edx
  0x0000000116b698d6: shr    $0x15,%edx
  0x0000000116b698d9: and    $0x1,%edx
  0x0000000116b698dc: shr    $0x1c,%eax
  0x0000000116b698df: and    $0xf,%eax
  0x0000000116b698e2: jne    0x0000000116b698f7
  0x0000000116b698e8: mov    (%rsp),%eax
  0x0000000116b698eb: add    $0x8,%rsp
  0x0000000116b698ef: mov    %al,(%rcx,%rbx,1)
  0x0000000116b698f2: jmpq   0x0000000116b69ad6
  0x0000000116b698f7: cmp    $0x1,%eax
  0x0000000116b698fa: jne    0x0000000116b69912
  0x0000000116b69900: mov    (%rsp),%eax
  0x0000000116b69903: add    $0x8,%rsp
  0x0000000116b69907: and    $0x1,%eax
  0x0000000116b6990a: mov    %al,(%rcx,%rbx,1)
  0x0000000116b6990d: jmpq   0x0000000116b69ad6
  0x0000000116b69912: cmp    $0x8,%eax
  0x0000000116b69915: jne    0x0000000116b699c3
  0x0000000116b6991b: pop    %rax
  0x0000000116b6991c: push   %r10
  0x0000000116b6991e: cmp    -0x9d23075(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b69925: je     0x0000000116b699a2
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x0000000116b6992b: mov    %rsp,-0x28(%rsp)
  0x0000000116b69930: sub    $0x80,%rsp
  0x0000000116b69937: mov    %rax,0x78(%rsp)
  0x0000000116b6993c: mov    %rcx,0x70(%rsp)
  0x0000000116b69941: mov    %rdx,0x68(%rsp)
  0x0000000116b69946: mov    %rbx,0x60(%rsp)
  0x0000000116b6994b: mov    %rbp,0x50(%rsp)
  0x0000000116b69950: mov    %rsi,0x48(%rsp)
  0x0000000116b69955: mov    %rdi,0x40(%rsp)
  0x0000000116b6995a: mov    %r8,0x38(%rsp)
  0x0000000116b6995f: mov    %r9,0x30(%rsp)
  0x0000000116b69964: mov    %r10,0x28(%rsp)
  0x0000000116b69969: mov    %r11,0x20(%rsp)
  0x0000000116b6996e: mov    %r12,0x18(%rsp)
  0x0000000116b69973: mov    %r13,0x10(%rsp)
  0x0000000116b69978: mov    %r14,0x8(%rsp)
  0x0000000116b6997d: mov    %r15,(%rsp)
  0x0000000116b69981: movabs $0x10cc648e6,%rdi
  0x0000000116b6998b: movabs $0x116b6992b,%rsi
  0x0000000116b69995: mov    %rsp,%rdx
  0x0000000116b69998: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6999c: callq  0x000000010c7dd830
  0x0000000116b699a1: hlt    
  0x0000000116b699a2: pop    %r10
  0x0000000116b699a4: shr    $0x3,%rax
  0x0000000116b699a8: mov    %eax,(%rcx,%rbx,1)
  0x0000000116b699ab: shr    $0x9,%rcx
  0x0000000116b699af: movabs $0x1071e1000,%r10
  0x0000000116b699b9: movb   $0x0,(%r10,%rcx,1)
  0x0000000116b699be: jmpq   0x0000000116b69ad6
  0x0000000116b699c3: cmp    $0x4,%eax
  0x0000000116b699c6: jne    0x0000000116b699db
  0x0000000116b699cc: mov    (%rsp),%eax
  0x0000000116b699cf: add    $0x8,%rsp
  0x0000000116b699d3: mov    %eax,(%rcx,%rbx,1)
  0x0000000116b699d6: jmpq   0x0000000116b69ad6
  0x0000000116b699db: cmp    $0x2,%eax
  0x0000000116b699de: jne    0x0000000116b699f4
  0x0000000116b699e4: mov    (%rsp),%eax
  0x0000000116b699e7: add    $0x8,%rsp
  0x0000000116b699eb: mov    %ax,(%rcx,%rbx,1)
  0x0000000116b699ef: jmpq   0x0000000116b69ad6
  0x0000000116b699f4: cmp    $0x3,%eax
  0x0000000116b699f7: jne    0x0000000116b69a0d
  0x0000000116b699fd: mov    (%rsp),%eax
  0x0000000116b69a00: add    $0x8,%rsp
  0x0000000116b69a04: mov    %ax,(%rcx,%rbx,1)
  0x0000000116b69a08: jmpq   0x0000000116b69ad6
  0x0000000116b69a0d: cmp    $0x5,%eax
  0x0000000116b69a10: jne    0x0000000116b69a27
  0x0000000116b69a16: mov    (%rsp),%rax
  0x0000000116b69a1a: add    $0x10,%rsp
  0x0000000116b69a1e: mov    %rax,(%rcx,%rbx,1)
  0x0000000116b69a22: jmpq   0x0000000116b69ad6
  0x0000000116b69a27: cmp    $0x6,%eax
  0x0000000116b69a2a: jne    0x0000000116b69a43
  0x0000000116b69a30: vmovss (%rsp),%xmm0
  0x0000000116b69a35: add    $0x8,%rsp
  0x0000000116b69a39: vmovss %xmm0,(%rcx,%rbx,1)
  0x0000000116b69a3e: jmpq   0x0000000116b69ad6
  0x0000000116b69a43: cmp    $0x7,%eax
  0x0000000116b69a46: jne    0x0000000116b69a5f
  0x0000000116b69a4c: vmovsd (%rsp),%xmm0
  0x0000000116b69a51: add    $0x10,%rsp
  0x0000000116b69a55: vmovsd %xmm0,(%rcx,%rbx,1)
  0x0000000116b69a5a: jmpq   0x0000000116b69ad6
  0x0000000116b69a5f: mov    %rsp,-0x28(%rsp)
  0x0000000116b69a64: sub    $0x80,%rsp
  0x0000000116b69a6b: mov    %rax,0x78(%rsp)
  0x0000000116b69a70: mov    %rcx,0x70(%rsp)
  0x0000000116b69a75: mov    %rdx,0x68(%rsp)
  0x0000000116b69a7a: mov    %rbx,0x60(%rsp)
  0x0000000116b69a7f: mov    %rbp,0x50(%rsp)
  0x0000000116b69a84: mov    %rsi,0x48(%rsp)
  0x0000000116b69a89: mov    %rdi,0x40(%rsp)
  0x0000000116b69a8e: mov    %r8,0x38(%rsp)
  0x0000000116b69a93: mov    %r9,0x30(%rsp)
  0x0000000116b69a98: mov    %r10,0x28(%rsp)
  0x0000000116b69a9d: mov    %r11,0x20(%rsp)
  0x0000000116b69aa2: mov    %r12,0x18(%rsp)
  0x0000000116b69aa7: mov    %r13,0x10(%rsp)
  0x0000000116b69aac: mov    %r14,0x8(%rsp)
  0x0000000116b69ab1: mov    %r15,(%rsp)
  0x0000000116b69ab5: movabs $0x10ccb07b1,%rdi
  0x0000000116b69abf: movabs $0x116b69a5f,%rsi
  0x0000000116b69ac9: mov    %rsp,%rdx
  0x0000000116b69acc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69ad0: callq  0x000000010c7dd830
  0x0000000116b69ad5: hlt    
  0x0000000116b69ad6: test   %edx,%edx
  0x0000000116b69ad8: je     0x0000000116b69ae3
  0x0000000116b69ade: lock addl $0x0,(%rsp)
  0x0000000116b69ae3: movzbl 0x3(%r13),%ebx
  0x0000000116b69ae8: add    $0x3,%r13
  0x0000000116b69aec: movabs $0x10ce3b680,%r10
  0x0000000116b69af6: jmpq   *(%r10,%rbx,8)
  0x0000000116b69afa: nop
  0x0000000116b69afb: nop
  0x0000000116b69afc: nop
  0x0000000116b69afd: nop
  0x0000000116b69afe: nop
  0x0000000116b69aff: nop

----------------------------------------------------------------------
getfield  180 getfield  [0x0000000116b69b40, 0x0000000116b6a560]  2592 bytes

  0x0000000116b69b40: push   %rax
  0x0000000116b69b41: jmpq   0x0000000116b69b70
  0x0000000116b69b46: sub    $0x8,%rsp
  0x0000000116b69b4a: vmovss %xmm0,(%rsp)
  0x0000000116b69b4f: jmpq   0x0000000116b69b70
  0x0000000116b69b54: sub    $0x10,%rsp
  0x0000000116b69b58: vmovsd %xmm0,(%rsp)
  0x0000000116b69b5d: jmpq   0x0000000116b69b70
  0x0000000116b69b62: sub    $0x10,%rsp
  0x0000000116b69b66: mov    %rax,(%rsp)
  0x0000000116b69b6a: jmpq   0x0000000116b69b70
  0x0000000116b69b6f: push   %rax
  0x0000000116b69b70: movzwl 0x1(%r13),%edx
  0x0000000116b69b75: mov    -0x28(%rbp),%rcx
  0x0000000116b69b79: shl    $0x2,%edx
  0x0000000116b69b7c: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b69b80: shr    $0x10,%ebx
  0x0000000116b69b83: and    $0xff,%ebx
  0x0000000116b69b89: cmp    $0xb4,%ebx
  0x0000000116b69b8f: je     0x0000000116b69e02
  0x0000000116b69b95: mov    $0xb4,%ebx
  0x0000000116b69b9a: callq  0x0000000116b69ba4
  0x0000000116b69b9f: jmpq   0x0000000116b69df6
  0x0000000116b69ba4: mov    %rbx,%rsi
  0x0000000116b69ba7: lea    0x8(%rsp),%rax
  0x0000000116b69bac: mov    %r13,-0x38(%rbp)
  0x0000000116b69bb0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b69bb8: je     0x0000000116b69c35
  0x0000000116b69bbe: mov    %rsp,-0x28(%rsp)
  0x0000000116b69bc3: sub    $0x80,%rsp
  0x0000000116b69bca: mov    %rax,0x78(%rsp)
  0x0000000116b69bcf: mov    %rcx,0x70(%rsp)
  0x0000000116b69bd4: mov    %rdx,0x68(%rsp)
  0x0000000116b69bd9: mov    %rbx,0x60(%rsp)
  0x0000000116b69bde: mov    %rbp,0x50(%rsp)
  0x0000000116b69be3: mov    %rsi,0x48(%rsp)
  0x0000000116b69be8: mov    %rdi,0x40(%rsp)
  0x0000000116b69bed: mov    %r8,0x38(%rsp)
  0x0000000116b69bf2: mov    %r9,0x30(%rsp)
  0x0000000116b69bf7: mov    %r10,0x28(%rsp)
  0x0000000116b69bfc: mov    %r11,0x20(%rsp)
  0x0000000116b69c01: mov    %r12,0x18(%rsp)
  0x0000000116b69c06: mov    %r13,0x10(%rsp)
  0x0000000116b69c0b: mov    %r14,0x8(%rsp)
  0x0000000116b69c10: mov    %r15,(%rsp)
  0x0000000116b69c14: movabs $0x10cc2363b,%rdi
  0x0000000116b69c1e: movabs $0x116b69bbe,%rsi
  0x0000000116b69c28: mov    %rsp,%rdx
  0x0000000116b69c2b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69c2f: callq  0x000000010c7dd830
  0x0000000116b69c34: hlt    
  0x0000000116b69c35: push   %r10
  0x0000000116b69c37: cmp    -0x9d2338e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b69c3e: je     0x0000000116b69cbb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b69c44: mov    %rsp,-0x28(%rsp)
  0x0000000116b69c49: sub    $0x80,%rsp
  0x0000000116b69c50: mov    %rax,0x78(%rsp)
  0x0000000116b69c55: mov    %rcx,0x70(%rsp)
  0x0000000116b69c5a: mov    %rdx,0x68(%rsp)
  0x0000000116b69c5f: mov    %rbx,0x60(%rsp)
  0x0000000116b69c64: mov    %rbp,0x50(%rsp)
  0x0000000116b69c69: mov    %rsi,0x48(%rsp)
  0x0000000116b69c6e: mov    %rdi,0x40(%rsp)
  0x0000000116b69c73: mov    %r8,0x38(%rsp)
  0x0000000116b69c78: mov    %r9,0x30(%rsp)
  0x0000000116b69c7d: mov    %r10,0x28(%rsp)
  0x0000000116b69c82: mov    %r11,0x20(%rsp)
  0x0000000116b69c87: mov    %r12,0x18(%rsp)
  0x0000000116b69c8c: mov    %r13,0x10(%rsp)
  0x0000000116b69c91: mov    %r14,0x8(%rsp)
  0x0000000116b69c96: mov    %r15,(%rsp)
  0x0000000116b69c9a: movabs $0x10cc63f17,%rdi
  0x0000000116b69ca4: movabs $0x116b69c44,%rsi
  0x0000000116b69cae: mov    %rsp,%rdx
  0x0000000116b69cb1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69cb5: callq  0x000000010c7dd830
  0x0000000116b69cba: hlt    
  0x0000000116b69cbb: pop    %r10
  0x0000000116b69cbd: mov    %r15,%rdi
  0x0000000116b69cc0: mov    %rbp,0x290(%r15)
  0x0000000116b69cc7: mov    %rax,0x280(%r15)
  0x0000000116b69cce: test   $0xf,%esp
  0x0000000116b69cd4: je     0x0000000116b69cec
  0x0000000116b69cda: sub    $0x8,%rsp
  0x0000000116b69cde: callq  0x000000010c588600
  0x0000000116b69ce3: add    $0x8,%rsp
  0x0000000116b69ce7: jmpq   0x0000000116b69cf1
  0x0000000116b69cec: callq  0x000000010c588600
  0x0000000116b69cf1: push   %rax
  0x0000000116b69cf2: push   %rdi
  0x0000000116b69cf3: push   %rsi
  0x0000000116b69cf4: push   %rdx
  0x0000000116b69cf5: push   %rcx
  0x0000000116b69cf6: push   %r8
  0x0000000116b69cf8: push   %r9
  0x0000000116b69cfa: push   %r10
  0x0000000116b69cfc: mov    %rsp,%r10
  0x0000000116b69cff: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69d03: push   %r10
  0x0000000116b69d05: push   %r11
  0x0000000116b69d07: mov    $0x109,%edi
  0x0000000116b69d0c: movabs $0x7ff815049fd5,%r10
  0x0000000116b69d16: callq  *%r10
  0x0000000116b69d19: pop    %r11
  0x0000000116b69d1b: pop    %rsp
  0x0000000116b69d1c: pop    %r10
  0x0000000116b69d1e: pop    %r9
  0x0000000116b69d20: pop    %r8
  0x0000000116b69d22: pop    %rcx
  0x0000000116b69d23: pop    %rdx
  0x0000000116b69d24: pop    %rsi
  0x0000000116b69d25: pop    %rdi
  0x0000000116b69d26: cmp    %rax,%r15
  0x0000000116b69d29: je     0x0000000116b69da6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b69d2f: mov    %rsp,-0x28(%rsp)
  0x0000000116b69d34: sub    $0x80,%rsp
  0x0000000116b69d3b: mov    %rax,0x78(%rsp)
  0x0000000116b69d40: mov    %rcx,0x70(%rsp)
  0x0000000116b69d45: mov    %rdx,0x68(%rsp)
  0x0000000116b69d4a: mov    %rbx,0x60(%rsp)
  0x0000000116b69d4f: mov    %rbp,0x50(%rsp)
  0x0000000116b69d54: mov    %rsi,0x48(%rsp)
  0x0000000116b69d59: mov    %rdi,0x40(%rsp)
  0x0000000116b69d5e: mov    %r8,0x38(%rsp)
  0x0000000116b69d63: mov    %r9,0x30(%rsp)
  0x0000000116b69d68: mov    %r10,0x28(%rsp)
  0x0000000116b69d6d: mov    %r11,0x20(%rsp)
  0x0000000116b69d72: mov    %r12,0x18(%rsp)
  0x0000000116b69d77: mov    %r13,0x10(%rsp)
  0x0000000116b69d7c: mov    %r14,0x8(%rsp)
  0x0000000116b69d81: mov    %r15,(%rsp)
  0x0000000116b69d85: movabs $0x10cc6405e,%rdi
  0x0000000116b69d8f: movabs $0x116b69d2f,%rsi
  0x0000000116b69d99: mov    %rsp,%rdx
  0x0000000116b69d9c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69da0: callq  0x000000010c7dd830
  0x0000000116b69da5: hlt    
  0x0000000116b69da6: pop    %rax
  0x0000000116b69da7: movabs $0x0,%r10
  0x0000000116b69db1: mov    %r10,0x280(%r15)
  0x0000000116b69db8: movabs $0x0,%r10
  0x0000000116b69dc2: mov    %r10,0x290(%r15)
  0x0000000116b69dc9: movabs $0x0,%r10
  0x0000000116b69dd3: mov    %r10,0x288(%r15)
  0x0000000116b69dda: cmpq   $0x0,0x8(%r15)
  0x0000000116b69de2: je     0x0000000116b69ded
  0x0000000116b69de8: jmpq   0x0000000116b30420
  0x0000000116b69ded: mov    -0x38(%rbp),%r13
  0x0000000116b69df1: mov    -0x30(%rbp),%r14
  0x0000000116b69df5: retq   
  0x0000000116b69df6: movzwl 0x1(%r13),%edx
  0x0000000116b69dfb: mov    -0x28(%rbp),%rcx
  0x0000000116b69dff: shl    $0x2,%edx
  0x0000000116b69e02: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b69e07: mov    0x28(%rcx,%rdx,8),%eax
  0x0000000116b69e0b: pop    %rcx
  0x0000000116b69e0c: cmp    (%rcx),%rax
  0x0000000116b69e0f: shr    $0x1c,%eax
  0x0000000116b69e12: and    $0xf,%eax
  0x0000000116b69e15: jne    0x0000000116b69ebe
  0x0000000116b69e1b: movsbl (%rcx,%rbx,1),%eax
  0x0000000116b69e1f: push   %rax
  0x0000000116b69e20: mov    $0xcc,%ecx
  0x0000000116b69e25: movzbl 0x0(%r13),%ebx
  0x0000000116b69e2a: cmp    $0xb4,%ebx
  0x0000000116b69e30: je     0x0000000116b69eb5
  0x0000000116b69e36: cmp    %ecx,%ebx
  0x0000000116b69e38: je     0x0000000116b69eb5
  0x0000000116b69e3e: mov    %rsp,-0x28(%rsp)
  0x0000000116b69e43: sub    $0x80,%rsp
  0x0000000116b69e4a: mov    %rax,0x78(%rsp)
  0x0000000116b69e4f: mov    %rcx,0x70(%rsp)
  0x0000000116b69e54: mov    %rdx,0x68(%rsp)
  0x0000000116b69e59: mov    %rbx,0x60(%rsp)
  0x0000000116b69e5e: mov    %rbp,0x50(%rsp)
  0x0000000116b69e63: mov    %rsi,0x48(%rsp)
  0x0000000116b69e68: mov    %rdi,0x40(%rsp)
  0x0000000116b69e6d: mov    %r8,0x38(%rsp)
  0x0000000116b69e72: mov    %r9,0x30(%rsp)
  0x0000000116b69e77: mov    %r10,0x28(%rsp)
  0x0000000116b69e7c: mov    %r11,0x20(%rsp)
  0x0000000116b69e81: mov    %r12,0x18(%rsp)
  0x0000000116b69e86: mov    %r13,0x10(%rsp)
  0x0000000116b69e8b: mov    %r14,0x8(%rsp)
  0x0000000116b69e90: mov    %r15,(%rsp)
  0x0000000116b69e94: movabs $0x10ccb040d,%rdi
  0x0000000116b69e9e: movabs $0x116b69e3e,%rsi
  0x0000000116b69ea8: mov    %rsp,%rdx
  0x0000000116b69eab: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69eaf: callq  0x000000010c7dd830
  0x0000000116b69eb4: hlt    
  0x0000000116b69eb5: mov    %cl,0x0(%r13)
  0x0000000116b69eb9: jmpq   0x0000000116b6a538
  0x0000000116b69ebe: cmp    $0x1,%eax
  0x0000000116b69ec1: jne    0x0000000116b69f6a
  0x0000000116b69ec7: movsbl (%rcx,%rbx,1),%eax
  0x0000000116b69ecb: push   %rax
  0x0000000116b69ecc: mov    $0xcc,%ecx
  0x0000000116b69ed1: movzbl 0x0(%r13),%ebx
  0x0000000116b69ed6: cmp    $0xb4,%ebx
  0x0000000116b69edc: je     0x0000000116b69f61
  0x0000000116b69ee2: cmp    %ecx,%ebx
  0x0000000116b69ee4: je     0x0000000116b69f61
  0x0000000116b69eea: mov    %rsp,-0x28(%rsp)
  0x0000000116b69eef: sub    $0x80,%rsp
  0x0000000116b69ef6: mov    %rax,0x78(%rsp)
  0x0000000116b69efb: mov    %rcx,0x70(%rsp)
  0x0000000116b69f00: mov    %rdx,0x68(%rsp)
  0x0000000116b69f05: mov    %rbx,0x60(%rsp)
  0x0000000116b69f0a: mov    %rbp,0x50(%rsp)
  0x0000000116b69f0f: mov    %rsi,0x48(%rsp)
  0x0000000116b69f14: mov    %rdi,0x40(%rsp)
  0x0000000116b69f19: mov    %r8,0x38(%rsp)
  0x0000000116b69f1e: mov    %r9,0x30(%rsp)
  0x0000000116b69f23: mov    %r10,0x28(%rsp)
  0x0000000116b69f28: mov    %r11,0x20(%rsp)
  0x0000000116b69f2d: mov    %r12,0x18(%rsp)
  0x0000000116b69f32: mov    %r13,0x10(%rsp)
  0x0000000116b69f37: mov    %r14,0x8(%rsp)
  0x0000000116b69f3c: mov    %r15,(%rsp)
  0x0000000116b69f40: movabs $0x10ccb040d,%rdi
  0x0000000116b69f4a: movabs $0x116b69eea,%rsi
  0x0000000116b69f54: mov    %rsp,%rdx
  0x0000000116b69f57: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69f5b: callq  0x000000010c7dd830
  0x0000000116b69f60: hlt    
  0x0000000116b69f61: mov    %cl,0x0(%r13)
  0x0000000116b69f65: jmpq   0x0000000116b6a538
  0x0000000116b69f6a: cmp    $0x8,%eax
  0x0000000116b69f6d: jne    0x0000000116b6a0a1
  0x0000000116b69f73: mov    (%rcx,%rbx,1),%eax
  0x0000000116b69f76: push   %r10
  0x0000000116b69f78: cmp    -0x9d236cf(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b69f7f: je     0x0000000116b69ffc
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b69f85: mov    %rsp,-0x28(%rsp)
  0x0000000116b69f8a: sub    $0x80,%rsp
  0x0000000116b69f91: mov    %rax,0x78(%rsp)
  0x0000000116b69f96: mov    %rcx,0x70(%rsp)
  0x0000000116b69f9b: mov    %rdx,0x68(%rsp)
  0x0000000116b69fa0: mov    %rbx,0x60(%rsp)
  0x0000000116b69fa5: mov    %rbp,0x50(%rsp)
  0x0000000116b69faa: mov    %rsi,0x48(%rsp)
  0x0000000116b69faf: mov    %rdi,0x40(%rsp)
  0x0000000116b69fb4: mov    %r8,0x38(%rsp)
  0x0000000116b69fb9: mov    %r9,0x30(%rsp)
  0x0000000116b69fbe: mov    %r10,0x28(%rsp)
  0x0000000116b69fc3: mov    %r11,0x20(%rsp)
  0x0000000116b69fc8: mov    %r12,0x18(%rsp)
  0x0000000116b69fcd: mov    %r13,0x10(%rsp)
  0x0000000116b69fd2: mov    %r14,0x8(%rsp)
  0x0000000116b69fd7: mov    %r15,(%rsp)
  0x0000000116b69fdb: movabs $0x10cc64abb,%rdi
  0x0000000116b69fe5: movabs $0x116b69f85,%rsi
  0x0000000116b69fef: mov    %rsp,%rdx
  0x0000000116b69ff2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b69ff6: callq  0x000000010c7dd830
  0x0000000116b69ffb: hlt    
  0x0000000116b69ffc: pop    %r10
  0x0000000116b69ffe: shl    $0x3,%rax
  0x0000000116b6a002: push   %rax
  0x0000000116b6a003: mov    $0xcb,%ecx
  0x0000000116b6a008: movzbl 0x0(%r13),%ebx
  0x0000000116b6a00d: cmp    $0xb4,%ebx
  0x0000000116b6a013: je     0x0000000116b6a098
  0x0000000116b6a019: cmp    %ecx,%ebx
  0x0000000116b6a01b: je     0x0000000116b6a098
  0x0000000116b6a021: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a026: sub    $0x80,%rsp
  0x0000000116b6a02d: mov    %rax,0x78(%rsp)
  0x0000000116b6a032: mov    %rcx,0x70(%rsp)
  0x0000000116b6a037: mov    %rdx,0x68(%rsp)
  0x0000000116b6a03c: mov    %rbx,0x60(%rsp)
  0x0000000116b6a041: mov    %rbp,0x50(%rsp)
  0x0000000116b6a046: mov    %rsi,0x48(%rsp)
  0x0000000116b6a04b: mov    %rdi,0x40(%rsp)
  0x0000000116b6a050: mov    %r8,0x38(%rsp)
  0x0000000116b6a055: mov    %r9,0x30(%rsp)
  0x0000000116b6a05a: mov    %r10,0x28(%rsp)
  0x0000000116b6a05f: mov    %r11,0x20(%rsp)
  0x0000000116b6a064: mov    %r12,0x18(%rsp)
  0x0000000116b6a069: mov    %r13,0x10(%rsp)
  0x0000000116b6a06e: mov    %r14,0x8(%rsp)
  0x0000000116b6a073: mov    %r15,(%rsp)
  0x0000000116b6a077: movabs $0x10ccb040d,%rdi
  0x0000000116b6a081: movabs $0x116b6a021,%rsi
  0x0000000116b6a08b: mov    %rsp,%rdx
  0x0000000116b6a08e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a092: callq  0x000000010c7dd830
  0x0000000116b6a097: hlt    
  0x0000000116b6a098: mov    %cl,0x0(%r13)
  0x0000000116b6a09c: jmpq   0x0000000116b6a538
  0x0000000116b6a0a1: cmp    $0x4,%eax
  0x0000000116b6a0a4: jne    0x0000000116b6a14c
  0x0000000116b6a0aa: mov    (%rcx,%rbx,1),%eax
  0x0000000116b6a0ad: push   %rax
  0x0000000116b6a0ae: mov    $0xd0,%ecx
  0x0000000116b6a0b3: movzbl 0x0(%r13),%ebx
  0x0000000116b6a0b8: cmp    $0xb4,%ebx
  0x0000000116b6a0be: je     0x0000000116b6a143
  0x0000000116b6a0c4: cmp    %ecx,%ebx
  0x0000000116b6a0c6: je     0x0000000116b6a143
  0x0000000116b6a0cc: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a0d1: sub    $0x80,%rsp
  0x0000000116b6a0d8: mov    %rax,0x78(%rsp)
  0x0000000116b6a0dd: mov    %rcx,0x70(%rsp)
  0x0000000116b6a0e2: mov    %rdx,0x68(%rsp)
  0x0000000116b6a0e7: mov    %rbx,0x60(%rsp)
  0x0000000116b6a0ec: mov    %rbp,0x50(%rsp)
  0x0000000116b6a0f1: mov    %rsi,0x48(%rsp)
  0x0000000116b6a0f6: mov    %rdi,0x40(%rsp)
  0x0000000116b6a0fb: mov    %r8,0x38(%rsp)
  0x0000000116b6a100: mov    %r9,0x30(%rsp)
  0x0000000116b6a105: mov    %r10,0x28(%rsp)
  0x0000000116b6a10a: mov    %r11,0x20(%rsp)
  0x0000000116b6a10f: mov    %r12,0x18(%rsp)
  0x0000000116b6a114: mov    %r13,0x10(%rsp)
  0x0000000116b6a119: mov    %r14,0x8(%rsp)
  0x0000000116b6a11e: mov    %r15,(%rsp)
  0x0000000116b6a122: movabs $0x10ccb040d,%rdi
  0x0000000116b6a12c: movabs $0x116b6a0cc,%rsi
  0x0000000116b6a136: mov    %rsp,%rdx
  0x0000000116b6a139: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a13d: callq  0x000000010c7dd830
  0x0000000116b6a142: hlt    
  0x0000000116b6a143: mov    %cl,0x0(%r13)
  0x0000000116b6a147: jmpq   0x0000000116b6a538
  0x0000000116b6a14c: cmp    $0x2,%eax
  0x0000000116b6a14f: jne    0x0000000116b6a1f8
  0x0000000116b6a155: movzwl (%rcx,%rbx,1),%eax
  0x0000000116b6a159: push   %rax
  0x0000000116b6a15a: mov    $0xcd,%ecx
  0x0000000116b6a15f: movzbl 0x0(%r13),%ebx
  0x0000000116b6a164: cmp    $0xb4,%ebx
  0x0000000116b6a16a: je     0x0000000116b6a1ef
  0x0000000116b6a170: cmp    %ecx,%ebx
  0x0000000116b6a172: je     0x0000000116b6a1ef
  0x0000000116b6a178: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a17d: sub    $0x80,%rsp
  0x0000000116b6a184: mov    %rax,0x78(%rsp)
  0x0000000116b6a189: mov    %rcx,0x70(%rsp)
  0x0000000116b6a18e: mov    %rdx,0x68(%rsp)
  0x0000000116b6a193: mov    %rbx,0x60(%rsp)
  0x0000000116b6a198: mov    %rbp,0x50(%rsp)
  0x0000000116b6a19d: mov    %rsi,0x48(%rsp)
  0x0000000116b6a1a2: mov    %rdi,0x40(%rsp)
  0x0000000116b6a1a7: mov    %r8,0x38(%rsp)
  0x0000000116b6a1ac: mov    %r9,0x30(%rsp)
  0x0000000116b6a1b1: mov    %r10,0x28(%rsp)
  0x0000000116b6a1b6: mov    %r11,0x20(%rsp)
  0x0000000116b6a1bb: mov    %r12,0x18(%rsp)
  0x0000000116b6a1c0: mov    %r13,0x10(%rsp)
  0x0000000116b6a1c5: mov    %r14,0x8(%rsp)
  0x0000000116b6a1ca: mov    %r15,(%rsp)
  0x0000000116b6a1ce: movabs $0x10ccb040d,%rdi
  0x0000000116b6a1d8: movabs $0x116b6a178,%rsi
  0x0000000116b6a1e2: mov    %rsp,%rdx
  0x0000000116b6a1e5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a1e9: callq  0x000000010c7dd830
  0x0000000116b6a1ee: hlt    
  0x0000000116b6a1ef: mov    %cl,0x0(%r13)
  0x0000000116b6a1f3: jmpq   0x0000000116b6a538
  0x0000000116b6a1f8: cmp    $0x3,%eax
  0x0000000116b6a1fb: jne    0x0000000116b6a2a4
  0x0000000116b6a201: movswl (%rcx,%rbx,1),%eax
  0x0000000116b6a205: push   %rax
  0x0000000116b6a206: mov    $0xd2,%ecx
  0x0000000116b6a20b: movzbl 0x0(%r13),%ebx
  0x0000000116b6a210: cmp    $0xb4,%ebx
  0x0000000116b6a216: je     0x0000000116b6a29b
  0x0000000116b6a21c: cmp    %ecx,%ebx
  0x0000000116b6a21e: je     0x0000000116b6a29b
  0x0000000116b6a224: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a229: sub    $0x80,%rsp
  0x0000000116b6a230: mov    %rax,0x78(%rsp)
  0x0000000116b6a235: mov    %rcx,0x70(%rsp)
  0x0000000116b6a23a: mov    %rdx,0x68(%rsp)
  0x0000000116b6a23f: mov    %rbx,0x60(%rsp)
  0x0000000116b6a244: mov    %rbp,0x50(%rsp)
  0x0000000116b6a249: mov    %rsi,0x48(%rsp)
  0x0000000116b6a24e: mov    %rdi,0x40(%rsp)
  0x0000000116b6a253: mov    %r8,0x38(%rsp)
  0x0000000116b6a258: mov    %r9,0x30(%rsp)
  0x0000000116b6a25d: mov    %r10,0x28(%rsp)
  0x0000000116b6a262: mov    %r11,0x20(%rsp)
  0x0000000116b6a267: mov    %r12,0x18(%rsp)
  0x0000000116b6a26c: mov    %r13,0x10(%rsp)
  0x0000000116b6a271: mov    %r14,0x8(%rsp)
  0x0000000116b6a276: mov    %r15,(%rsp)
  0x0000000116b6a27a: movabs $0x10ccb040d,%rdi
  0x0000000116b6a284: movabs $0x116b6a224,%rsi
  0x0000000116b6a28e: mov    %rsp,%rdx
  0x0000000116b6a291: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a295: callq  0x000000010c7dd830
  0x0000000116b6a29a: hlt    
  0x0000000116b6a29b: mov    %cl,0x0(%r13)
  0x0000000116b6a29f: jmpq   0x0000000116b6a538
  0x0000000116b6a2a4: cmp    $0x5,%eax
  0x0000000116b6a2a7: jne    0x0000000116b6a357
  0x0000000116b6a2ad: mov    (%rcx,%rbx,1),%rax
  0x0000000116b6a2b1: sub    $0x10,%rsp
  0x0000000116b6a2b5: mov    %rax,(%rsp)
  0x0000000116b6a2b9: mov    $0xd1,%ecx
  0x0000000116b6a2be: movzbl 0x0(%r13),%ebx
  0x0000000116b6a2c3: cmp    $0xb4,%ebx
  0x0000000116b6a2c9: je     0x0000000116b6a34e
  0x0000000116b6a2cf: cmp    %ecx,%ebx
  0x0000000116b6a2d1: je     0x0000000116b6a34e
  0x0000000116b6a2d7: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a2dc: sub    $0x80,%rsp
  0x0000000116b6a2e3: mov    %rax,0x78(%rsp)
  0x0000000116b6a2e8: mov    %rcx,0x70(%rsp)
  0x0000000116b6a2ed: mov    %rdx,0x68(%rsp)
  0x0000000116b6a2f2: mov    %rbx,0x60(%rsp)
  0x0000000116b6a2f7: mov    %rbp,0x50(%rsp)
  0x0000000116b6a2fc: mov    %rsi,0x48(%rsp)
  0x0000000116b6a301: mov    %rdi,0x40(%rsp)
  0x0000000116b6a306: mov    %r8,0x38(%rsp)
  0x0000000116b6a30b: mov    %r9,0x30(%rsp)
  0x0000000116b6a310: mov    %r10,0x28(%rsp)
  0x0000000116b6a315: mov    %r11,0x20(%rsp)
  0x0000000116b6a31a: mov    %r12,0x18(%rsp)
  0x0000000116b6a31f: mov    %r13,0x10(%rsp)
  0x0000000116b6a324: mov    %r14,0x8(%rsp)
  0x0000000116b6a329: mov    %r15,(%rsp)
  0x0000000116b6a32d: movabs $0x10ccb040d,%rdi
  0x0000000116b6a337: movabs $0x116b6a2d7,%rsi
  0x0000000116b6a341: mov    %rsp,%rdx
  0x0000000116b6a344: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a348: callq  0x000000010c7dd830
  0x0000000116b6a34d: hlt    
  0x0000000116b6a34e: mov    %cl,0x0(%r13)
  0x0000000116b6a352: jmpq   0x0000000116b6a538
  0x0000000116b6a357: cmp    $0x6,%eax
  0x0000000116b6a35a: jne    0x0000000116b6a40c
  0x0000000116b6a360: vmovss (%rcx,%rbx,1),%xmm0
  0x0000000116b6a365: sub    $0x8,%rsp
  0x0000000116b6a369: vmovss %xmm0,(%rsp)
  0x0000000116b6a36e: mov    $0xcf,%ecx
  0x0000000116b6a373: movzbl 0x0(%r13),%ebx
  0x0000000116b6a378: cmp    $0xb4,%ebx
  0x0000000116b6a37e: je     0x0000000116b6a403
  0x0000000116b6a384: cmp    %ecx,%ebx
  0x0000000116b6a386: je     0x0000000116b6a403
  0x0000000116b6a38c: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a391: sub    $0x80,%rsp
  0x0000000116b6a398: mov    %rax,0x78(%rsp)
  0x0000000116b6a39d: mov    %rcx,0x70(%rsp)
  0x0000000116b6a3a2: mov    %rdx,0x68(%rsp)
  0x0000000116b6a3a7: mov    %rbx,0x60(%rsp)
  0x0000000116b6a3ac: mov    %rbp,0x50(%rsp)
  0x0000000116b6a3b1: mov    %rsi,0x48(%rsp)
  0x0000000116b6a3b6: mov    %rdi,0x40(%rsp)
  0x0000000116b6a3bb: mov    %r8,0x38(%rsp)
  0x0000000116b6a3c0: mov    %r9,0x30(%rsp)
  0x0000000116b6a3c5: mov    %r10,0x28(%rsp)
  0x0000000116b6a3ca: mov    %r11,0x20(%rsp)
  0x0000000116b6a3cf: mov    %r12,0x18(%rsp)
  0x0000000116b6a3d4: mov    %r13,0x10(%rsp)
  0x0000000116b6a3d9: mov    %r14,0x8(%rsp)
  0x0000000116b6a3de: mov    %r15,(%rsp)
  0x0000000116b6a3e2: movabs $0x10ccb040d,%rdi
  0x0000000116b6a3ec: movabs $0x116b6a38c,%rsi
  0x0000000116b6a3f6: mov    %rsp,%rdx
  0x0000000116b6a3f9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a3fd: callq  0x000000010c7dd830
  0x0000000116b6a402: hlt    
  0x0000000116b6a403: mov    %cl,0x0(%r13)
  0x0000000116b6a407: jmpq   0x0000000116b6a538
  0x0000000116b6a40c: cmp    $0x7,%eax
  0x0000000116b6a40f: jne    0x0000000116b6a4c1
  0x0000000116b6a415: vmovsd (%rcx,%rbx,1),%xmm0
  0x0000000116b6a41a: sub    $0x10,%rsp
  0x0000000116b6a41e: vmovsd %xmm0,(%rsp)
  0x0000000116b6a423: mov    $0xce,%ecx
  0x0000000116b6a428: movzbl 0x0(%r13),%ebx
  0x0000000116b6a42d: cmp    $0xb4,%ebx
  0x0000000116b6a433: je     0x0000000116b6a4b8
  0x0000000116b6a439: cmp    %ecx,%ebx
  0x0000000116b6a43b: je     0x0000000116b6a4b8
  0x0000000116b6a441: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a446: sub    $0x80,%rsp
  0x0000000116b6a44d: mov    %rax,0x78(%rsp)
  0x0000000116b6a452: mov    %rcx,0x70(%rsp)
  0x0000000116b6a457: mov    %rdx,0x68(%rsp)
  0x0000000116b6a45c: mov    %rbx,0x60(%rsp)
  0x0000000116b6a461: mov    %rbp,0x50(%rsp)
  0x0000000116b6a466: mov    %rsi,0x48(%rsp)
  0x0000000116b6a46b: mov    %rdi,0x40(%rsp)
  0x0000000116b6a470: mov    %r8,0x38(%rsp)
  0x0000000116b6a475: mov    %r9,0x30(%rsp)
  0x0000000116b6a47a: mov    %r10,0x28(%rsp)
  0x0000000116b6a47f: mov    %r11,0x20(%rsp)
  0x0000000116b6a484: mov    %r12,0x18(%rsp)
  0x0000000116b6a489: mov    %r13,0x10(%rsp)
  0x0000000116b6a48e: mov    %r14,0x8(%rsp)
  0x0000000116b6a493: mov    %r15,(%rsp)
  0x0000000116b6a497: movabs $0x10ccb040d,%rdi
  0x0000000116b6a4a1: movabs $0x116b6a441,%rsi
  0x0000000116b6a4ab: mov    %rsp,%rdx
  0x0000000116b6a4ae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a4b2: callq  0x000000010c7dd830
  0x0000000116b6a4b7: hlt    
  0x0000000116b6a4b8: mov    %cl,0x0(%r13)
  0x0000000116b6a4bc: jmpq   0x0000000116b6a538
  0x0000000116b6a4c1: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a4c6: sub    $0x80,%rsp
  0x0000000116b6a4cd: mov    %rax,0x78(%rsp)
  0x0000000116b6a4d2: mov    %rcx,0x70(%rsp)
  0x0000000116b6a4d7: mov    %rdx,0x68(%rsp)
  0x0000000116b6a4dc: mov    %rbx,0x60(%rsp)
  0x0000000116b6a4e1: mov    %rbp,0x50(%rsp)
  0x0000000116b6a4e6: mov    %rsi,0x48(%rsp)
  0x0000000116b6a4eb: mov    %rdi,0x40(%rsp)
  0x0000000116b6a4f0: mov    %r8,0x38(%rsp)
  0x0000000116b6a4f5: mov    %r9,0x30(%rsp)
  0x0000000116b6a4fa: mov    %r10,0x28(%rsp)
  0x0000000116b6a4ff: mov    %r11,0x20(%rsp)
  0x0000000116b6a504: mov    %r12,0x18(%rsp)
  0x0000000116b6a509: mov    %r13,0x10(%rsp)
  0x0000000116b6a50e: mov    %r14,0x8(%rsp)
  0x0000000116b6a513: mov    %r15,(%rsp)
  0x0000000116b6a517: movabs $0x10ccb07b1,%rdi
  0x0000000116b6a521: movabs $0x116b6a4c1,%rsi
  0x0000000116b6a52b: mov    %rsp,%rdx
  0x0000000116b6a52e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a532: callq  0x000000010c7dd830
  0x0000000116b6a537: hlt    
  0x0000000116b6a538: movzbl 0x3(%r13),%ebx
  0x0000000116b6a53d: add    $0x3,%r13
  0x0000000116b6a541: movabs $0x10ce3b680,%r10
  0x0000000116b6a54b: jmpq   *(%r10,%rbx,8)
  0x0000000116b6a54f: nop
  0x0000000116b6a550: int3   
  0x0000000116b6a551: int3   
  0x0000000116b6a552: int3   
  0x0000000116b6a553: int3   
  0x0000000116b6a554: int3   
  0x0000000116b6a555: int3   
  0x0000000116b6a556: int3   
  0x0000000116b6a557: int3   
  0x0000000116b6a558: int3   
  0x0000000116b6a559: int3   
  0x0000000116b6a55a: int3   
  0x0000000116b6a55b: int3   
  0x0000000116b6a55c: int3   
  0x0000000116b6a55d: int3   
  0x0000000116b6a55e: int3   
  0x0000000116b6a55f: int3   

----------------------------------------------------------------------
putfield  181 putfield  [0x0000000116b6a5a0, 0x0000000116b6b160]  3008 bytes

  0x0000000116b6a5a0: push   %rax
  0x0000000116b6a5a1: jmpq   0x0000000116b6a5d0
  0x0000000116b6a5a6: sub    $0x8,%rsp
  0x0000000116b6a5aa: vmovss %xmm0,(%rsp)
  0x0000000116b6a5af: jmpq   0x0000000116b6a5d0
  0x0000000116b6a5b4: sub    $0x10,%rsp
  0x0000000116b6a5b8: vmovsd %xmm0,(%rsp)
  0x0000000116b6a5bd: jmpq   0x0000000116b6a5d0
  0x0000000116b6a5c2: sub    $0x10,%rsp
  0x0000000116b6a5c6: mov    %rax,(%rsp)
  0x0000000116b6a5ca: jmpq   0x0000000116b6a5d0
  0x0000000116b6a5cf: push   %rax
  0x0000000116b6a5d0: movzwl 0x1(%r13),%edx
  0x0000000116b6a5d5: mov    -0x28(%rbp),%rcx
  0x0000000116b6a5d9: shl    $0x2,%edx
  0x0000000116b6a5dc: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b6a5e0: shr    $0x18,%ebx
  0x0000000116b6a5e3: and    $0xff,%ebx
  0x0000000116b6a5e9: cmp    $0xb5,%ebx
  0x0000000116b6a5ef: je     0x0000000116b6a862
  0x0000000116b6a5f5: mov    $0xb5,%ebx
  0x0000000116b6a5fa: callq  0x0000000116b6a604
  0x0000000116b6a5ff: jmpq   0x0000000116b6a856
  0x0000000116b6a604: mov    %rbx,%rsi
  0x0000000116b6a607: lea    0x8(%rsp),%rax
  0x0000000116b6a60c: mov    %r13,-0x38(%rbp)
  0x0000000116b6a610: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6a618: je     0x0000000116b6a695
  0x0000000116b6a61e: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a623: sub    $0x80,%rsp
  0x0000000116b6a62a: mov    %rax,0x78(%rsp)
  0x0000000116b6a62f: mov    %rcx,0x70(%rsp)
  0x0000000116b6a634: mov    %rdx,0x68(%rsp)
  0x0000000116b6a639: mov    %rbx,0x60(%rsp)
  0x0000000116b6a63e: mov    %rbp,0x50(%rsp)
  0x0000000116b6a643: mov    %rsi,0x48(%rsp)
  0x0000000116b6a648: mov    %rdi,0x40(%rsp)
  0x0000000116b6a64d: mov    %r8,0x38(%rsp)
  0x0000000116b6a652: mov    %r9,0x30(%rsp)
  0x0000000116b6a657: mov    %r10,0x28(%rsp)
  0x0000000116b6a65c: mov    %r11,0x20(%rsp)
  0x0000000116b6a661: mov    %r12,0x18(%rsp)
  0x0000000116b6a666: mov    %r13,0x10(%rsp)
  0x0000000116b6a66b: mov    %r14,0x8(%rsp)
  0x0000000116b6a670: mov    %r15,(%rsp)
  0x0000000116b6a674: movabs $0x10cc2363b,%rdi
  0x0000000116b6a67e: movabs $0x116b6a61e,%rsi
  0x0000000116b6a688: mov    %rsp,%rdx
  0x0000000116b6a68b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a68f: callq  0x000000010c7dd830
  0x0000000116b6a694: hlt    
  0x0000000116b6a695: push   %r10
  0x0000000116b6a697: cmp    -0x9d23dee(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6a69e: je     0x0000000116b6a71b
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6a6a4: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a6a9: sub    $0x80,%rsp
  0x0000000116b6a6b0: mov    %rax,0x78(%rsp)
  0x0000000116b6a6b5: mov    %rcx,0x70(%rsp)
  0x0000000116b6a6ba: mov    %rdx,0x68(%rsp)
  0x0000000116b6a6bf: mov    %rbx,0x60(%rsp)
  0x0000000116b6a6c4: mov    %rbp,0x50(%rsp)
  0x0000000116b6a6c9: mov    %rsi,0x48(%rsp)
  0x0000000116b6a6ce: mov    %rdi,0x40(%rsp)
  0x0000000116b6a6d3: mov    %r8,0x38(%rsp)
  0x0000000116b6a6d8: mov    %r9,0x30(%rsp)
  0x0000000116b6a6dd: mov    %r10,0x28(%rsp)
  0x0000000116b6a6e2: mov    %r11,0x20(%rsp)
  0x0000000116b6a6e7: mov    %r12,0x18(%rsp)
  0x0000000116b6a6ec: mov    %r13,0x10(%rsp)
  0x0000000116b6a6f1: mov    %r14,0x8(%rsp)
  0x0000000116b6a6f6: mov    %r15,(%rsp)
  0x0000000116b6a6fa: movabs $0x10cc63f17,%rdi
  0x0000000116b6a704: movabs $0x116b6a6a4,%rsi
  0x0000000116b6a70e: mov    %rsp,%rdx
  0x0000000116b6a711: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a715: callq  0x000000010c7dd830
  0x0000000116b6a71a: hlt    
  0x0000000116b6a71b: pop    %r10
  0x0000000116b6a71d: mov    %r15,%rdi
  0x0000000116b6a720: mov    %rbp,0x290(%r15)
  0x0000000116b6a727: mov    %rax,0x280(%r15)
  0x0000000116b6a72e: test   $0xf,%esp
  0x0000000116b6a734: je     0x0000000116b6a74c
  0x0000000116b6a73a: sub    $0x8,%rsp
  0x0000000116b6a73e: callq  0x000000010c588600
  0x0000000116b6a743: add    $0x8,%rsp
  0x0000000116b6a747: jmpq   0x0000000116b6a751
  0x0000000116b6a74c: callq  0x000000010c588600
  0x0000000116b6a751: push   %rax
  0x0000000116b6a752: push   %rdi
  0x0000000116b6a753: push   %rsi
  0x0000000116b6a754: push   %rdx
  0x0000000116b6a755: push   %rcx
  0x0000000116b6a756: push   %r8
  0x0000000116b6a758: push   %r9
  0x0000000116b6a75a: push   %r10
  0x0000000116b6a75c: mov    %rsp,%r10
  0x0000000116b6a75f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a763: push   %r10
  0x0000000116b6a765: push   %r11
  0x0000000116b6a767: mov    $0x109,%edi
  0x0000000116b6a76c: movabs $0x7ff815049fd5,%r10
  0x0000000116b6a776: callq  *%r10
  0x0000000116b6a779: pop    %r11
  0x0000000116b6a77b: pop    %rsp
  0x0000000116b6a77c: pop    %r10
  0x0000000116b6a77e: pop    %r9
  0x0000000116b6a780: pop    %r8
  0x0000000116b6a782: pop    %rcx
  0x0000000116b6a783: pop    %rdx
  0x0000000116b6a784: pop    %rsi
  0x0000000116b6a785: pop    %rdi
  0x0000000116b6a786: cmp    %rax,%r15
  0x0000000116b6a789: je     0x0000000116b6a806
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6a78f: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a794: sub    $0x80,%rsp
  0x0000000116b6a79b: mov    %rax,0x78(%rsp)
  0x0000000116b6a7a0: mov    %rcx,0x70(%rsp)
  0x0000000116b6a7a5: mov    %rdx,0x68(%rsp)
  0x0000000116b6a7aa: mov    %rbx,0x60(%rsp)
  0x0000000116b6a7af: mov    %rbp,0x50(%rsp)
  0x0000000116b6a7b4: mov    %rsi,0x48(%rsp)
  0x0000000116b6a7b9: mov    %rdi,0x40(%rsp)
  0x0000000116b6a7be: mov    %r8,0x38(%rsp)
  0x0000000116b6a7c3: mov    %r9,0x30(%rsp)
  0x0000000116b6a7c8: mov    %r10,0x28(%rsp)
  0x0000000116b6a7cd: mov    %r11,0x20(%rsp)
  0x0000000116b6a7d2: mov    %r12,0x18(%rsp)
  0x0000000116b6a7d7: mov    %r13,0x10(%rsp)
  0x0000000116b6a7dc: mov    %r14,0x8(%rsp)
  0x0000000116b6a7e1: mov    %r15,(%rsp)
  0x0000000116b6a7e5: movabs $0x10cc6405e,%rdi
  0x0000000116b6a7ef: movabs $0x116b6a78f,%rsi
  0x0000000116b6a7f9: mov    %rsp,%rdx
  0x0000000116b6a7fc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a800: callq  0x000000010c7dd830
  0x0000000116b6a805: hlt    
  0x0000000116b6a806: pop    %rax
  0x0000000116b6a807: movabs $0x0,%r10
  0x0000000116b6a811: mov    %r10,0x280(%r15)
  0x0000000116b6a818: movabs $0x0,%r10
  0x0000000116b6a822: mov    %r10,0x290(%r15)
  0x0000000116b6a829: movabs $0x0,%r10
  0x0000000116b6a833: mov    %r10,0x288(%r15)
  0x0000000116b6a83a: cmpq   $0x0,0x8(%r15)
  0x0000000116b6a842: je     0x0000000116b6a84d
  0x0000000116b6a848: jmpq   0x0000000116b30420
  0x0000000116b6a84d: mov    -0x38(%rbp),%r13
  0x0000000116b6a851: mov    -0x30(%rbp),%r14
  0x0000000116b6a855: retq   
  0x0000000116b6a856: movzwl 0x1(%r13),%edx
  0x0000000116b6a85b: mov    -0x28(%rbp),%rcx
  0x0000000116b6a85f: shl    $0x2,%edx
  0x0000000116b6a862: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b6a867: mov    0x28(%rcx,%rdx,8),%eax
  0x0000000116b6a86b: mov    %eax,%edx
  0x0000000116b6a86d: shr    $0x15,%edx
  0x0000000116b6a870: and    $0x1,%edx
  0x0000000116b6a873: shr    $0x1c,%eax
  0x0000000116b6a876: and    $0xf,%eax
  0x0000000116b6a879: jne    0x0000000116b6a94d
  0x0000000116b6a87f: mov    (%rsp),%eax
  0x0000000116b6a882: add    $0x8,%rsp
  0x0000000116b6a886: pop    %rcx
  0x0000000116b6a887: cmp    (%rcx),%rax
  0x0000000116b6a88a: mov    %al,(%rcx,%rbx,1)
  0x0000000116b6a88d: movzwl 0x1(%r13),%ecx
  0x0000000116b6a892: mov    -0x28(%rbp),%rbx
  0x0000000116b6a896: shl    $0x2,%ecx
  0x0000000116b6a899: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6a89d: shr    $0x18,%ebx
  0x0000000116b6a8a0: and    $0xff,%ebx
  0x0000000116b6a8a6: mov    $0xd4,%ecx
  0x0000000116b6a8ab: cmp    $0x0,%ebx
  0x0000000116b6a8ae: je     0x0000000116b6a948
  0x0000000116b6a8b4: movzbl 0x0(%r13),%ebx
  0x0000000116b6a8b9: cmp    $0xb5,%ebx
  0x0000000116b6a8bf: je     0x0000000116b6a944
  0x0000000116b6a8c5: cmp    %ecx,%ebx
  0x0000000116b6a8c7: je     0x0000000116b6a944
  0x0000000116b6a8cd: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a8d2: sub    $0x80,%rsp
  0x0000000116b6a8d9: mov    %rax,0x78(%rsp)
  0x0000000116b6a8de: mov    %rcx,0x70(%rsp)
  0x0000000116b6a8e3: mov    %rdx,0x68(%rsp)
  0x0000000116b6a8e8: mov    %rbx,0x60(%rsp)
  0x0000000116b6a8ed: mov    %rbp,0x50(%rsp)
  0x0000000116b6a8f2: mov    %rsi,0x48(%rsp)
  0x0000000116b6a8f7: mov    %rdi,0x40(%rsp)
  0x0000000116b6a8fc: mov    %r8,0x38(%rsp)
  0x0000000116b6a901: mov    %r9,0x30(%rsp)
  0x0000000116b6a906: mov    %r10,0x28(%rsp)
  0x0000000116b6a90b: mov    %r11,0x20(%rsp)
  0x0000000116b6a910: mov    %r12,0x18(%rsp)
  0x0000000116b6a915: mov    %r13,0x10(%rsp)
  0x0000000116b6a91a: mov    %r14,0x8(%rsp)
  0x0000000116b6a91f: mov    %r15,(%rsp)
  0x0000000116b6a923: movabs $0x10ccb040d,%rdi
  0x0000000116b6a92d: movabs $0x116b6a8cd,%rsi
  0x0000000116b6a937: mov    %rsp,%rdx
  0x0000000116b6a93a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6a93e: callq  0x000000010c7dd830
  0x0000000116b6a943: hlt    
  0x0000000116b6a944: mov    %cl,0x0(%r13)
  0x0000000116b6a948: jmpq   0x0000000116b6b124
  0x0000000116b6a94d: cmp    $0x1,%eax
  0x0000000116b6a950: jne    0x0000000116b6aa27
  0x0000000116b6a956: mov    (%rsp),%eax
  0x0000000116b6a959: add    $0x8,%rsp
  0x0000000116b6a95d: pop    %rcx
  0x0000000116b6a95e: cmp    (%rcx),%rax
  0x0000000116b6a961: and    $0x1,%eax
  0x0000000116b6a964: mov    %al,(%rcx,%rbx,1)
  0x0000000116b6a967: movzwl 0x1(%r13),%ecx
  0x0000000116b6a96c: mov    -0x28(%rbp),%rbx
  0x0000000116b6a970: shl    $0x2,%ecx
  0x0000000116b6a973: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6a977: shr    $0x18,%ebx
  0x0000000116b6a97a: and    $0xff,%ebx
  0x0000000116b6a980: mov    $0xd5,%ecx
  0x0000000116b6a985: cmp    $0x0,%ebx
  0x0000000116b6a988: je     0x0000000116b6aa22
  0x0000000116b6a98e: movzbl 0x0(%r13),%ebx
  0x0000000116b6a993: cmp    $0xb5,%ebx
  0x0000000116b6a999: je     0x0000000116b6aa1e
  0x0000000116b6a99f: cmp    %ecx,%ebx
  0x0000000116b6a9a1: je     0x0000000116b6aa1e
  0x0000000116b6a9a7: mov    %rsp,-0x28(%rsp)
  0x0000000116b6a9ac: sub    $0x80,%rsp
  0x0000000116b6a9b3: mov    %rax,0x78(%rsp)
  0x0000000116b6a9b8: mov    %rcx,0x70(%rsp)
  0x0000000116b6a9bd: mov    %rdx,0x68(%rsp)
  0x0000000116b6a9c2: mov    %rbx,0x60(%rsp)
  0x0000000116b6a9c7: mov    %rbp,0x50(%rsp)
  0x0000000116b6a9cc: mov    %rsi,0x48(%rsp)
  0x0000000116b6a9d1: mov    %rdi,0x40(%rsp)
  0x0000000116b6a9d6: mov    %r8,0x38(%rsp)
  0x0000000116b6a9db: mov    %r9,0x30(%rsp)
  0x0000000116b6a9e0: mov    %r10,0x28(%rsp)
  0x0000000116b6a9e5: mov    %r11,0x20(%rsp)
  0x0000000116b6a9ea: mov    %r12,0x18(%rsp)
  0x0000000116b6a9ef: mov    %r13,0x10(%rsp)
  0x0000000116b6a9f4: mov    %r14,0x8(%rsp)
  0x0000000116b6a9f9: mov    %r15,(%rsp)
  0x0000000116b6a9fd: movabs $0x10ccb040d,%rdi
  0x0000000116b6aa07: movabs $0x116b6a9a7,%rsi
  0x0000000116b6aa11: mov    %rsp,%rdx
  0x0000000116b6aa14: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6aa18: callq  0x000000010c7dd830
  0x0000000116b6aa1d: hlt    
  0x0000000116b6aa1e: mov    %cl,0x0(%r13)
  0x0000000116b6aa22: jmpq   0x0000000116b6b124
  0x0000000116b6aa27: cmp    $0x8,%eax
  0x0000000116b6aa2a: jne    0x0000000116b6ab97
  0x0000000116b6aa30: pop    %rax
  0x0000000116b6aa31: pop    %rcx
  0x0000000116b6aa32: cmp    (%rcx),%rax
  0x0000000116b6aa35: push   %r10
  0x0000000116b6aa37: cmp    -0x9d2418e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6aa3e: je     0x0000000116b6aabb
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x0000000116b6aa44: mov    %rsp,-0x28(%rsp)
  0x0000000116b6aa49: sub    $0x80,%rsp
  0x0000000116b6aa50: mov    %rax,0x78(%rsp)
  0x0000000116b6aa55: mov    %rcx,0x70(%rsp)
  0x0000000116b6aa5a: mov    %rdx,0x68(%rsp)
  0x0000000116b6aa5f: mov    %rbx,0x60(%rsp)
  0x0000000116b6aa64: mov    %rbp,0x50(%rsp)
  0x0000000116b6aa69: mov    %rsi,0x48(%rsp)
  0x0000000116b6aa6e: mov    %rdi,0x40(%rsp)
  0x0000000116b6aa73: mov    %r8,0x38(%rsp)
  0x0000000116b6aa78: mov    %r9,0x30(%rsp)
  0x0000000116b6aa7d: mov    %r10,0x28(%rsp)
  0x0000000116b6aa82: mov    %r11,0x20(%rsp)
  0x0000000116b6aa87: mov    %r12,0x18(%rsp)
  0x0000000116b6aa8c: mov    %r13,0x10(%rsp)
  0x0000000116b6aa91: mov    %r14,0x8(%rsp)
  0x0000000116b6aa96: mov    %r15,(%rsp)
  0x0000000116b6aa9a: movabs $0x10cc648e6,%rdi
  0x0000000116b6aaa4: movabs $0x116b6aa44,%rsi
  0x0000000116b6aaae: mov    %rsp,%rdx
  0x0000000116b6aab1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6aab5: callq  0x000000010c7dd830
  0x0000000116b6aaba: hlt    
  0x0000000116b6aabb: pop    %r10
  0x0000000116b6aabd: shr    $0x3,%rax
  0x0000000116b6aac1: mov    %eax,(%rcx,%rbx,1)
  0x0000000116b6aac4: shr    $0x9,%rcx
  0x0000000116b6aac8: movabs $0x1071e1000,%r10
  0x0000000116b6aad2: movb   $0x0,(%r10,%rcx,1)
  0x0000000116b6aad7: movzwl 0x1(%r13),%ecx
  0x0000000116b6aadc: mov    -0x28(%rbp),%rbx
  0x0000000116b6aae0: shl    $0x2,%ecx
  0x0000000116b6aae3: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6aae7: shr    $0x18,%ebx
  0x0000000116b6aaea: and    $0xff,%ebx
  0x0000000116b6aaf0: mov    $0xd3,%ecx
  0x0000000116b6aaf5: cmp    $0x0,%ebx
  0x0000000116b6aaf8: je     0x0000000116b6ab92
  0x0000000116b6aafe: movzbl 0x0(%r13),%ebx
  0x0000000116b6ab03: cmp    $0xb5,%ebx
  0x0000000116b6ab09: je     0x0000000116b6ab8e
  0x0000000116b6ab0f: cmp    %ecx,%ebx
  0x0000000116b6ab11: je     0x0000000116b6ab8e
  0x0000000116b6ab17: mov    %rsp,-0x28(%rsp)
  0x0000000116b6ab1c: sub    $0x80,%rsp
  0x0000000116b6ab23: mov    %rax,0x78(%rsp)
  0x0000000116b6ab28: mov    %rcx,0x70(%rsp)
  0x0000000116b6ab2d: mov    %rdx,0x68(%rsp)
  0x0000000116b6ab32: mov    %rbx,0x60(%rsp)
  0x0000000116b6ab37: mov    %rbp,0x50(%rsp)
  0x0000000116b6ab3c: mov    %rsi,0x48(%rsp)
  0x0000000116b6ab41: mov    %rdi,0x40(%rsp)
  0x0000000116b6ab46: mov    %r8,0x38(%rsp)
  0x0000000116b6ab4b: mov    %r9,0x30(%rsp)
  0x0000000116b6ab50: mov    %r10,0x28(%rsp)
  0x0000000116b6ab55: mov    %r11,0x20(%rsp)
  0x0000000116b6ab5a: mov    %r12,0x18(%rsp)
  0x0000000116b6ab5f: mov    %r13,0x10(%rsp)
  0x0000000116b6ab64: mov    %r14,0x8(%rsp)
  0x0000000116b6ab69: mov    %r15,(%rsp)
  0x0000000116b6ab6d: movabs $0x10ccb040d,%rdi
  0x0000000116b6ab77: movabs $0x116b6ab17,%rsi
  0x0000000116b6ab81: mov    %rsp,%rdx
  0x0000000116b6ab84: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ab88: callq  0x000000010c7dd830
  0x0000000116b6ab8d: hlt    
  0x0000000116b6ab8e: mov    %cl,0x0(%r13)
  0x0000000116b6ab92: jmpq   0x0000000116b6b124
  0x0000000116b6ab97: cmp    $0x4,%eax
  0x0000000116b6ab9a: jne    0x0000000116b6ac6e
  0x0000000116b6aba0: mov    (%rsp),%eax
  0x0000000116b6aba3: add    $0x8,%rsp
  0x0000000116b6aba7: pop    %rcx
  0x0000000116b6aba8: cmp    (%rcx),%rax
  0x0000000116b6abab: mov    %eax,(%rcx,%rbx,1)
  0x0000000116b6abae: movzwl 0x1(%r13),%ecx
  0x0000000116b6abb3: mov    -0x28(%rbp),%rbx
  0x0000000116b6abb7: shl    $0x2,%ecx
  0x0000000116b6abba: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6abbe: shr    $0x18,%ebx
  0x0000000116b6abc1: and    $0xff,%ebx
  0x0000000116b6abc7: mov    $0xd9,%ecx
  0x0000000116b6abcc: cmp    $0x0,%ebx
  0x0000000116b6abcf: je     0x0000000116b6ac69
  0x0000000116b6abd5: movzbl 0x0(%r13),%ebx
  0x0000000116b6abda: cmp    $0xb5,%ebx
  0x0000000116b6abe0: je     0x0000000116b6ac65
  0x0000000116b6abe6: cmp    %ecx,%ebx
  0x0000000116b6abe8: je     0x0000000116b6ac65
  0x0000000116b6abee: mov    %rsp,-0x28(%rsp)
  0x0000000116b6abf3: sub    $0x80,%rsp
  0x0000000116b6abfa: mov    %rax,0x78(%rsp)
  0x0000000116b6abff: mov    %rcx,0x70(%rsp)
  0x0000000116b6ac04: mov    %rdx,0x68(%rsp)
  0x0000000116b6ac09: mov    %rbx,0x60(%rsp)
  0x0000000116b6ac0e: mov    %rbp,0x50(%rsp)
  0x0000000116b6ac13: mov    %rsi,0x48(%rsp)
  0x0000000116b6ac18: mov    %rdi,0x40(%rsp)
  0x0000000116b6ac1d: mov    %r8,0x38(%rsp)
  0x0000000116b6ac22: mov    %r9,0x30(%rsp)
  0x0000000116b6ac27: mov    %r10,0x28(%rsp)
  0x0000000116b6ac2c: mov    %r11,0x20(%rsp)
  0x0000000116b6ac31: mov    %r12,0x18(%rsp)
  0x0000000116b6ac36: mov    %r13,0x10(%rsp)
  0x0000000116b6ac3b: mov    %r14,0x8(%rsp)
  0x0000000116b6ac40: mov    %r15,(%rsp)
  0x0000000116b6ac44: movabs $0x10ccb040d,%rdi
  0x0000000116b6ac4e: movabs $0x116b6abee,%rsi
  0x0000000116b6ac58: mov    %rsp,%rdx
  0x0000000116b6ac5b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ac5f: callq  0x000000010c7dd830
  0x0000000116b6ac64: hlt    
  0x0000000116b6ac65: mov    %cl,0x0(%r13)
  0x0000000116b6ac69: jmpq   0x0000000116b6b124
  0x0000000116b6ac6e: cmp    $0x2,%eax
  0x0000000116b6ac71: jne    0x0000000116b6ad46
  0x0000000116b6ac77: mov    (%rsp),%eax
  0x0000000116b6ac7a: add    $0x8,%rsp
  0x0000000116b6ac7e: pop    %rcx
  0x0000000116b6ac7f: cmp    (%rcx),%rax
  0x0000000116b6ac82: mov    %ax,(%rcx,%rbx,1)
  0x0000000116b6ac86: movzwl 0x1(%r13),%ecx
  0x0000000116b6ac8b: mov    -0x28(%rbp),%rbx
  0x0000000116b6ac8f: shl    $0x2,%ecx
  0x0000000116b6ac92: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6ac96: shr    $0x18,%ebx
  0x0000000116b6ac99: and    $0xff,%ebx
  0x0000000116b6ac9f: mov    $0xd6,%ecx
  0x0000000116b6aca4: cmp    $0x0,%ebx
  0x0000000116b6aca7: je     0x0000000116b6ad41
  0x0000000116b6acad: movzbl 0x0(%r13),%ebx
  0x0000000116b6acb2: cmp    $0xb5,%ebx
  0x0000000116b6acb8: je     0x0000000116b6ad3d
  0x0000000116b6acbe: cmp    %ecx,%ebx
  0x0000000116b6acc0: je     0x0000000116b6ad3d
  0x0000000116b6acc6: mov    %rsp,-0x28(%rsp)
  0x0000000116b6accb: sub    $0x80,%rsp
  0x0000000116b6acd2: mov    %rax,0x78(%rsp)
  0x0000000116b6acd7: mov    %rcx,0x70(%rsp)
  0x0000000116b6acdc: mov    %rdx,0x68(%rsp)
  0x0000000116b6ace1: mov    %rbx,0x60(%rsp)
  0x0000000116b6ace6: mov    %rbp,0x50(%rsp)
  0x0000000116b6aceb: mov    %rsi,0x48(%rsp)
  0x0000000116b6acf0: mov    %rdi,0x40(%rsp)
  0x0000000116b6acf5: mov    %r8,0x38(%rsp)
  0x0000000116b6acfa: mov    %r9,0x30(%rsp)
  0x0000000116b6acff: mov    %r10,0x28(%rsp)
  0x0000000116b6ad04: mov    %r11,0x20(%rsp)
  0x0000000116b6ad09: mov    %r12,0x18(%rsp)
  0x0000000116b6ad0e: mov    %r13,0x10(%rsp)
  0x0000000116b6ad13: mov    %r14,0x8(%rsp)
  0x0000000116b6ad18: mov    %r15,(%rsp)
  0x0000000116b6ad1c: movabs $0x10ccb040d,%rdi
  0x0000000116b6ad26: movabs $0x116b6acc6,%rsi
  0x0000000116b6ad30: mov    %rsp,%rdx
  0x0000000116b6ad33: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ad37: callq  0x000000010c7dd830
  0x0000000116b6ad3c: hlt    
  0x0000000116b6ad3d: mov    %cl,0x0(%r13)
  0x0000000116b6ad41: jmpq   0x0000000116b6b124
  0x0000000116b6ad46: cmp    $0x3,%eax
  0x0000000116b6ad49: jne    0x0000000116b6ae1e
  0x0000000116b6ad4f: mov    (%rsp),%eax
  0x0000000116b6ad52: add    $0x8,%rsp
  0x0000000116b6ad56: pop    %rcx
  0x0000000116b6ad57: cmp    (%rcx),%rax
  0x0000000116b6ad5a: mov    %ax,(%rcx,%rbx,1)
  0x0000000116b6ad5e: movzwl 0x1(%r13),%ecx
  0x0000000116b6ad63: mov    -0x28(%rbp),%rbx
  0x0000000116b6ad67: shl    $0x2,%ecx
  0x0000000116b6ad6a: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6ad6e: shr    $0x18,%ebx
  0x0000000116b6ad71: and    $0xff,%ebx
  0x0000000116b6ad77: mov    $0xdb,%ecx
  0x0000000116b6ad7c: cmp    $0x0,%ebx
  0x0000000116b6ad7f: je     0x0000000116b6ae19
  0x0000000116b6ad85: movzbl 0x0(%r13),%ebx
  0x0000000116b6ad8a: cmp    $0xb5,%ebx
  0x0000000116b6ad90: je     0x0000000116b6ae15
  0x0000000116b6ad96: cmp    %ecx,%ebx
  0x0000000116b6ad98: je     0x0000000116b6ae15
  0x0000000116b6ad9e: mov    %rsp,-0x28(%rsp)
  0x0000000116b6ada3: sub    $0x80,%rsp
  0x0000000116b6adaa: mov    %rax,0x78(%rsp)
  0x0000000116b6adaf: mov    %rcx,0x70(%rsp)
  0x0000000116b6adb4: mov    %rdx,0x68(%rsp)
  0x0000000116b6adb9: mov    %rbx,0x60(%rsp)
  0x0000000116b6adbe: mov    %rbp,0x50(%rsp)
  0x0000000116b6adc3: mov    %rsi,0x48(%rsp)
  0x0000000116b6adc8: mov    %rdi,0x40(%rsp)
  0x0000000116b6adcd: mov    %r8,0x38(%rsp)
  0x0000000116b6add2: mov    %r9,0x30(%rsp)
  0x0000000116b6add7: mov    %r10,0x28(%rsp)
  0x0000000116b6addc: mov    %r11,0x20(%rsp)
  0x0000000116b6ade1: mov    %r12,0x18(%rsp)
  0x0000000116b6ade6: mov    %r13,0x10(%rsp)
  0x0000000116b6adeb: mov    %r14,0x8(%rsp)
  0x0000000116b6adf0: mov    %r15,(%rsp)
  0x0000000116b6adf4: movabs $0x10ccb040d,%rdi
  0x0000000116b6adfe: movabs $0x116b6ad9e,%rsi
  0x0000000116b6ae08: mov    %rsp,%rdx
  0x0000000116b6ae0b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ae0f: callq  0x000000010c7dd830
  0x0000000116b6ae14: hlt    
  0x0000000116b6ae15: mov    %cl,0x0(%r13)
  0x0000000116b6ae19: jmpq   0x0000000116b6b124
  0x0000000116b6ae1e: cmp    $0x5,%eax
  0x0000000116b6ae21: jne    0x0000000116b6aef7
  0x0000000116b6ae27: mov    (%rsp),%rax
  0x0000000116b6ae2b: add    $0x10,%rsp
  0x0000000116b6ae2f: pop    %rcx
  0x0000000116b6ae30: cmp    (%rcx),%rax
  0x0000000116b6ae33: mov    %rax,(%rcx,%rbx,1)
  0x0000000116b6ae37: movzwl 0x1(%r13),%ecx
  0x0000000116b6ae3c: mov    -0x28(%rbp),%rbx
  0x0000000116b6ae40: shl    $0x2,%ecx
  0x0000000116b6ae43: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6ae47: shr    $0x18,%ebx
  0x0000000116b6ae4a: and    $0xff,%ebx
  0x0000000116b6ae50: mov    $0xda,%ecx
  0x0000000116b6ae55: cmp    $0x0,%ebx
  0x0000000116b6ae58: je     0x0000000116b6aef2
  0x0000000116b6ae5e: movzbl 0x0(%r13),%ebx
  0x0000000116b6ae63: cmp    $0xb5,%ebx
  0x0000000116b6ae69: je     0x0000000116b6aeee
  0x0000000116b6ae6f: cmp    %ecx,%ebx
  0x0000000116b6ae71: je     0x0000000116b6aeee
  0x0000000116b6ae77: mov    %rsp,-0x28(%rsp)
  0x0000000116b6ae7c: sub    $0x80,%rsp
  0x0000000116b6ae83: mov    %rax,0x78(%rsp)
  0x0000000116b6ae88: mov    %rcx,0x70(%rsp)
  0x0000000116b6ae8d: mov    %rdx,0x68(%rsp)
  0x0000000116b6ae92: mov    %rbx,0x60(%rsp)
  0x0000000116b6ae97: mov    %rbp,0x50(%rsp)
  0x0000000116b6ae9c: mov    %rsi,0x48(%rsp)
  0x0000000116b6aea1: mov    %rdi,0x40(%rsp)
  0x0000000116b6aea6: mov    %r8,0x38(%rsp)
  0x0000000116b6aeab: mov    %r9,0x30(%rsp)
  0x0000000116b6aeb0: mov    %r10,0x28(%rsp)
  0x0000000116b6aeb5: mov    %r11,0x20(%rsp)
  0x0000000116b6aeba: mov    %r12,0x18(%rsp)
  0x0000000116b6aebf: mov    %r13,0x10(%rsp)
  0x0000000116b6aec4: mov    %r14,0x8(%rsp)
  0x0000000116b6aec9: mov    %r15,(%rsp)
  0x0000000116b6aecd: movabs $0x10ccb040d,%rdi
  0x0000000116b6aed7: movabs $0x116b6ae77,%rsi
  0x0000000116b6aee1: mov    %rsp,%rdx
  0x0000000116b6aee4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6aee8: callq  0x000000010c7dd830
  0x0000000116b6aeed: hlt    
  0x0000000116b6aeee: mov    %cl,0x0(%r13)
  0x0000000116b6aef2: jmpq   0x0000000116b6b124
  0x0000000116b6aef7: cmp    $0x6,%eax
  0x0000000116b6aefa: jne    0x0000000116b6afd2
  0x0000000116b6af00: vmovss (%rsp),%xmm0
  0x0000000116b6af05: add    $0x8,%rsp
  0x0000000116b6af09: pop    %rcx
  0x0000000116b6af0a: cmp    (%rcx),%rax
  0x0000000116b6af0d: vmovss %xmm0,(%rcx,%rbx,1)
  0x0000000116b6af12: movzwl 0x1(%r13),%ecx
  0x0000000116b6af17: mov    -0x28(%rbp),%rbx
  0x0000000116b6af1b: shl    $0x2,%ecx
  0x0000000116b6af1e: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6af22: shr    $0x18,%ebx
  0x0000000116b6af25: and    $0xff,%ebx
  0x0000000116b6af2b: mov    $0xd8,%ecx
  0x0000000116b6af30: cmp    $0x0,%ebx
  0x0000000116b6af33: je     0x0000000116b6afcd
  0x0000000116b6af39: movzbl 0x0(%r13),%ebx
  0x0000000116b6af3e: cmp    $0xb5,%ebx
  0x0000000116b6af44: je     0x0000000116b6afc9
  0x0000000116b6af4a: cmp    %ecx,%ebx
  0x0000000116b6af4c: je     0x0000000116b6afc9
  0x0000000116b6af52: mov    %rsp,-0x28(%rsp)
  0x0000000116b6af57: sub    $0x80,%rsp
  0x0000000116b6af5e: mov    %rax,0x78(%rsp)
  0x0000000116b6af63: mov    %rcx,0x70(%rsp)
  0x0000000116b6af68: mov    %rdx,0x68(%rsp)
  0x0000000116b6af6d: mov    %rbx,0x60(%rsp)
  0x0000000116b6af72: mov    %rbp,0x50(%rsp)
  0x0000000116b6af77: mov    %rsi,0x48(%rsp)
  0x0000000116b6af7c: mov    %rdi,0x40(%rsp)
  0x0000000116b6af81: mov    %r8,0x38(%rsp)
  0x0000000116b6af86: mov    %r9,0x30(%rsp)
  0x0000000116b6af8b: mov    %r10,0x28(%rsp)
  0x0000000116b6af90: mov    %r11,0x20(%rsp)
  0x0000000116b6af95: mov    %r12,0x18(%rsp)
  0x0000000116b6af9a: mov    %r13,0x10(%rsp)
  0x0000000116b6af9f: mov    %r14,0x8(%rsp)
  0x0000000116b6afa4: mov    %r15,(%rsp)
  0x0000000116b6afa8: movabs $0x10ccb040d,%rdi
  0x0000000116b6afb2: movabs $0x116b6af52,%rsi
  0x0000000116b6afbc: mov    %rsp,%rdx
  0x0000000116b6afbf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6afc3: callq  0x000000010c7dd830
  0x0000000116b6afc8: hlt    
  0x0000000116b6afc9: mov    %cl,0x0(%r13)
  0x0000000116b6afcd: jmpq   0x0000000116b6b124
  0x0000000116b6afd2: cmp    $0x7,%eax
  0x0000000116b6afd5: jne    0x0000000116b6b0ad
  0x0000000116b6afdb: vmovsd (%rsp),%xmm0
  0x0000000116b6afe0: add    $0x10,%rsp
  0x0000000116b6afe4: pop    %rcx
  0x0000000116b6afe5: cmp    (%rcx),%rax
  0x0000000116b6afe8: vmovsd %xmm0,(%rcx,%rbx,1)
  0x0000000116b6afed: movzwl 0x1(%r13),%ecx
  0x0000000116b6aff2: mov    -0x28(%rbp),%rbx
  0x0000000116b6aff6: shl    $0x2,%ecx
  0x0000000116b6aff9: mov    0x10(%rbx,%rcx,8),%ebx
  0x0000000116b6affd: shr    $0x18,%ebx
  0x0000000116b6b000: and    $0xff,%ebx
  0x0000000116b6b006: mov    $0xd7,%ecx
  0x0000000116b6b00b: cmp    $0x0,%ebx
  0x0000000116b6b00e: je     0x0000000116b6b0a8
  0x0000000116b6b014: movzbl 0x0(%r13),%ebx
  0x0000000116b6b019: cmp    $0xb5,%ebx
  0x0000000116b6b01f: je     0x0000000116b6b0a4
  0x0000000116b6b025: cmp    %ecx,%ebx
  0x0000000116b6b027: je     0x0000000116b6b0a4
  0x0000000116b6b02d: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b032: sub    $0x80,%rsp
  0x0000000116b6b039: mov    %rax,0x78(%rsp)
  0x0000000116b6b03e: mov    %rcx,0x70(%rsp)
  0x0000000116b6b043: mov    %rdx,0x68(%rsp)
  0x0000000116b6b048: mov    %rbx,0x60(%rsp)
  0x0000000116b6b04d: mov    %rbp,0x50(%rsp)
  0x0000000116b6b052: mov    %rsi,0x48(%rsp)
  0x0000000116b6b057: mov    %rdi,0x40(%rsp)
  0x0000000116b6b05c: mov    %r8,0x38(%rsp)
  0x0000000116b6b061: mov    %r9,0x30(%rsp)
  0x0000000116b6b066: mov    %r10,0x28(%rsp)
  0x0000000116b6b06b: mov    %r11,0x20(%rsp)
  0x0000000116b6b070: mov    %r12,0x18(%rsp)
  0x0000000116b6b075: mov    %r13,0x10(%rsp)
  0x0000000116b6b07a: mov    %r14,0x8(%rsp)
  0x0000000116b6b07f: mov    %r15,(%rsp)
  0x0000000116b6b083: movabs $0x10ccb040d,%rdi
  0x0000000116b6b08d: movabs $0x116b6b02d,%rsi
  0x0000000116b6b097: mov    %rsp,%rdx
  0x0000000116b6b09a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b09e: callq  0x000000010c7dd830
  0x0000000116b6b0a3: hlt    
  0x0000000116b6b0a4: mov    %cl,0x0(%r13)
  0x0000000116b6b0a8: jmpq   0x0000000116b6b124
  0x0000000116b6b0ad: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b0b2: sub    $0x80,%rsp
  0x0000000116b6b0b9: mov    %rax,0x78(%rsp)
  0x0000000116b6b0be: mov    %rcx,0x70(%rsp)
  0x0000000116b6b0c3: mov    %rdx,0x68(%rsp)
  0x0000000116b6b0c8: mov    %rbx,0x60(%rsp)
  0x0000000116b6b0cd: mov    %rbp,0x50(%rsp)
  0x0000000116b6b0d2: mov    %rsi,0x48(%rsp)
  0x0000000116b6b0d7: mov    %rdi,0x40(%rsp)
  0x0000000116b6b0dc: mov    %r8,0x38(%rsp)
  0x0000000116b6b0e1: mov    %r9,0x30(%rsp)
  0x0000000116b6b0e6: mov    %r10,0x28(%rsp)
  0x0000000116b6b0eb: mov    %r11,0x20(%rsp)
  0x0000000116b6b0f0: mov    %r12,0x18(%rsp)
  0x0000000116b6b0f5: mov    %r13,0x10(%rsp)
  0x0000000116b6b0fa: mov    %r14,0x8(%rsp)
  0x0000000116b6b0ff: mov    %r15,(%rsp)
  0x0000000116b6b103: movabs $0x10ccb07b1,%rdi
  0x0000000116b6b10d: movabs $0x116b6b0ad,%rsi
  0x0000000116b6b117: mov    %rsp,%rdx
  0x0000000116b6b11a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b11e: callq  0x000000010c7dd830
  0x0000000116b6b123: hlt    
  0x0000000116b6b124: test   %edx,%edx
  0x0000000116b6b126: je     0x0000000116b6b131
  0x0000000116b6b12c: lock addl $0x0,(%rsp)
  0x0000000116b6b131: movzbl 0x3(%r13),%ebx
  0x0000000116b6b136: add    $0x3,%r13
  0x0000000116b6b13a: movabs $0x10ce3b680,%r10
  0x0000000116b6b144: jmpq   *(%r10,%rbx,8)
  0x0000000116b6b148: int3   
  0x0000000116b6b149: int3   
  0x0000000116b6b14a: int3   
  0x0000000116b6b14b: int3   
  0x0000000116b6b14c: int3   
  0x0000000116b6b14d: int3   
  0x0000000116b6b14e: int3   
  0x0000000116b6b14f: int3   
  0x0000000116b6b150: int3   
  0x0000000116b6b151: int3   
  0x0000000116b6b152: int3   
  0x0000000116b6b153: int3   
  0x0000000116b6b154: int3   
  0x0000000116b6b155: int3   
  0x0000000116b6b156: int3   
  0x0000000116b6b157: int3   
  0x0000000116b6b158: int3   
  0x0000000116b6b159: int3   
  0x0000000116b6b15a: int3   
  0x0000000116b6b15b: int3   
  0x0000000116b6b15c: int3   
  0x0000000116b6b15d: int3   
  0x0000000116b6b15e: int3   
  0x0000000116b6b15f: int3   

----------------------------------------------------------------------
invokevirtual  182 invokevirtual  [0x0000000116b6b1a0, 0x0000000116b6b560]  960 bytes

  0x0000000116b6b1a0: push   %rax
  0x0000000116b6b1a1: jmpq   0x0000000116b6b1d0
  0x0000000116b6b1a6: sub    $0x8,%rsp
  0x0000000116b6b1aa: vmovss %xmm0,(%rsp)
  0x0000000116b6b1af: jmpq   0x0000000116b6b1d0
  0x0000000116b6b1b4: sub    $0x10,%rsp
  0x0000000116b6b1b8: vmovsd %xmm0,(%rsp)
  0x0000000116b6b1bd: jmpq   0x0000000116b6b1d0
  0x0000000116b6b1c2: sub    $0x10,%rsp
  0x0000000116b6b1c6: mov    %rax,(%rsp)
  0x0000000116b6b1ca: jmpq   0x0000000116b6b1d0
  0x0000000116b6b1cf: push   %rax
  0x0000000116b6b1d0: mov    %r13,-0x38(%rbp)
  0x0000000116b6b1d4: movzwl 0x1(%r13),%edx
  0x0000000116b6b1d9: mov    -0x28(%rbp),%rcx
  0x0000000116b6b1dd: shl    $0x2,%edx
  0x0000000116b6b1e0: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b6b1e4: shr    $0x18,%ebx
  0x0000000116b6b1e7: and    $0xff,%ebx
  0x0000000116b6b1ed: cmp    $0xb6,%ebx
  0x0000000116b6b1f3: je     0x0000000116b6b466
  0x0000000116b6b1f9: mov    $0xb6,%ebx
  0x0000000116b6b1fe: callq  0x0000000116b6b208
  0x0000000116b6b203: jmpq   0x0000000116b6b45a
  0x0000000116b6b208: mov    %rbx,%rsi
  0x0000000116b6b20b: lea    0x8(%rsp),%rax
  0x0000000116b6b210: mov    %r13,-0x38(%rbp)
  0x0000000116b6b214: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6b21c: je     0x0000000116b6b299
  0x0000000116b6b222: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b227: sub    $0x80,%rsp
  0x0000000116b6b22e: mov    %rax,0x78(%rsp)
  0x0000000116b6b233: mov    %rcx,0x70(%rsp)
  0x0000000116b6b238: mov    %rdx,0x68(%rsp)
  0x0000000116b6b23d: mov    %rbx,0x60(%rsp)
  0x0000000116b6b242: mov    %rbp,0x50(%rsp)
  0x0000000116b6b247: mov    %rsi,0x48(%rsp)
  0x0000000116b6b24c: mov    %rdi,0x40(%rsp)
  0x0000000116b6b251: mov    %r8,0x38(%rsp)
  0x0000000116b6b256: mov    %r9,0x30(%rsp)
  0x0000000116b6b25b: mov    %r10,0x28(%rsp)
  0x0000000116b6b260: mov    %r11,0x20(%rsp)
  0x0000000116b6b265: mov    %r12,0x18(%rsp)
  0x0000000116b6b26a: mov    %r13,0x10(%rsp)
  0x0000000116b6b26f: mov    %r14,0x8(%rsp)
  0x0000000116b6b274: mov    %r15,(%rsp)
  0x0000000116b6b278: movabs $0x10cc2363b,%rdi
  0x0000000116b6b282: movabs $0x116b6b222,%rsi
  0x0000000116b6b28c: mov    %rsp,%rdx
  0x0000000116b6b28f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b293: callq  0x000000010c7dd830
  0x0000000116b6b298: hlt    
  0x0000000116b6b299: push   %r10
  0x0000000116b6b29b: cmp    -0x9d249f2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6b2a2: je     0x0000000116b6b31f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6b2a8: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b2ad: sub    $0x80,%rsp
  0x0000000116b6b2b4: mov    %rax,0x78(%rsp)
  0x0000000116b6b2b9: mov    %rcx,0x70(%rsp)
  0x0000000116b6b2be: mov    %rdx,0x68(%rsp)
  0x0000000116b6b2c3: mov    %rbx,0x60(%rsp)
  0x0000000116b6b2c8: mov    %rbp,0x50(%rsp)
  0x0000000116b6b2cd: mov    %rsi,0x48(%rsp)
  0x0000000116b6b2d2: mov    %rdi,0x40(%rsp)
  0x0000000116b6b2d7: mov    %r8,0x38(%rsp)
  0x0000000116b6b2dc: mov    %r9,0x30(%rsp)
  0x0000000116b6b2e1: mov    %r10,0x28(%rsp)
  0x0000000116b6b2e6: mov    %r11,0x20(%rsp)
  0x0000000116b6b2eb: mov    %r12,0x18(%rsp)
  0x0000000116b6b2f0: mov    %r13,0x10(%rsp)
  0x0000000116b6b2f5: mov    %r14,0x8(%rsp)
  0x0000000116b6b2fa: mov    %r15,(%rsp)
  0x0000000116b6b2fe: movabs $0x10cc63f17,%rdi
  0x0000000116b6b308: movabs $0x116b6b2a8,%rsi
  0x0000000116b6b312: mov    %rsp,%rdx
  0x0000000116b6b315: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b319: callq  0x000000010c7dd830
  0x0000000116b6b31e: hlt    
  0x0000000116b6b31f: pop    %r10
  0x0000000116b6b321: mov    %r15,%rdi
  0x0000000116b6b324: mov    %rbp,0x290(%r15)
  0x0000000116b6b32b: mov    %rax,0x280(%r15)
  0x0000000116b6b332: test   $0xf,%esp
  0x0000000116b6b338: je     0x0000000116b6b350
  0x0000000116b6b33e: sub    $0x8,%rsp
  0x0000000116b6b342: callq  0x000000010c589b30
  0x0000000116b6b347: add    $0x8,%rsp
  0x0000000116b6b34b: jmpq   0x0000000116b6b355
  0x0000000116b6b350: callq  0x000000010c589b30
  0x0000000116b6b355: push   %rax
  0x0000000116b6b356: push   %rdi
  0x0000000116b6b357: push   %rsi
  0x0000000116b6b358: push   %rdx
  0x0000000116b6b359: push   %rcx
  0x0000000116b6b35a: push   %r8
  0x0000000116b6b35c: push   %r9
  0x0000000116b6b35e: push   %r10
  0x0000000116b6b360: mov    %rsp,%r10
  0x0000000116b6b363: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b367: push   %r10
  0x0000000116b6b369: push   %r11
  0x0000000116b6b36b: mov    $0x109,%edi
  0x0000000116b6b370: movabs $0x7ff815049fd5,%r10
  0x0000000116b6b37a: callq  *%r10
  0x0000000116b6b37d: pop    %r11
  0x0000000116b6b37f: pop    %rsp
  0x0000000116b6b380: pop    %r10
  0x0000000116b6b382: pop    %r9
  0x0000000116b6b384: pop    %r8
  0x0000000116b6b386: pop    %rcx
  0x0000000116b6b387: pop    %rdx
  0x0000000116b6b388: pop    %rsi
  0x0000000116b6b389: pop    %rdi
  0x0000000116b6b38a: cmp    %rax,%r15
  0x0000000116b6b38d: je     0x0000000116b6b40a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6b393: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b398: sub    $0x80,%rsp
  0x0000000116b6b39f: mov    %rax,0x78(%rsp)
  0x0000000116b6b3a4: mov    %rcx,0x70(%rsp)
  0x0000000116b6b3a9: mov    %rdx,0x68(%rsp)
  0x0000000116b6b3ae: mov    %rbx,0x60(%rsp)
  0x0000000116b6b3b3: mov    %rbp,0x50(%rsp)
  0x0000000116b6b3b8: mov    %rsi,0x48(%rsp)
  0x0000000116b6b3bd: mov    %rdi,0x40(%rsp)
  0x0000000116b6b3c2: mov    %r8,0x38(%rsp)
  0x0000000116b6b3c7: mov    %r9,0x30(%rsp)
  0x0000000116b6b3cc: mov    %r10,0x28(%rsp)
  0x0000000116b6b3d1: mov    %r11,0x20(%rsp)
  0x0000000116b6b3d6: mov    %r12,0x18(%rsp)
  0x0000000116b6b3db: mov    %r13,0x10(%rsp)
  0x0000000116b6b3e0: mov    %r14,0x8(%rsp)
  0x0000000116b6b3e5: mov    %r15,(%rsp)
  0x0000000116b6b3e9: movabs $0x10cc6405e,%rdi
  0x0000000116b6b3f3: movabs $0x116b6b393,%rsi
  0x0000000116b6b3fd: mov    %rsp,%rdx
  0x0000000116b6b400: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b404: callq  0x000000010c7dd830
  0x0000000116b6b409: hlt    
  0x0000000116b6b40a: pop    %rax
  0x0000000116b6b40b: movabs $0x0,%r10
  0x0000000116b6b415: mov    %r10,0x280(%r15)
  0x0000000116b6b41c: movabs $0x0,%r10
  0x0000000116b6b426: mov    %r10,0x290(%r15)
  0x0000000116b6b42d: movabs $0x0,%r10
  0x0000000116b6b437: mov    %r10,0x288(%r15)
  0x0000000116b6b43e: cmpq   $0x0,0x8(%r15)
  0x0000000116b6b446: je     0x0000000116b6b451
  0x0000000116b6b44c: jmpq   0x0000000116b30420
  0x0000000116b6b451: mov    -0x38(%rbp),%r13
  0x0000000116b6b455: mov    -0x30(%rbp),%r14
  0x0000000116b6b459: retq   
  0x0000000116b6b45a: movzwl 0x1(%r13),%edx
  0x0000000116b6b45f: mov    -0x28(%rbp),%rcx
  0x0000000116b6b463: shl    $0x2,%edx
  0x0000000116b6b466: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b6b46b: mov    0x28(%rcx,%rdx,8),%edx
  0x0000000116b6b46f: mov    %edx,%ecx
  0x0000000116b6b471: and    $0xff,%ecx
  0x0000000116b6b477: mov    -0x8(%rsp,%rcx,8),%rcx
  0x0000000116b6b47c: mov    %edx,%r13d
  0x0000000116b6b47f: shr    $0x1c,%edx
  0x0000000116b6b482: movabs $0x10ce3c650,%r10
  0x0000000116b6b48c: mov    (%r10,%rdx,8),%rdx
  0x0000000116b6b490: push   %rdx
  0x0000000116b6b491: mov    %r13d,%edx
  0x0000000116b6b494: mov    -0x38(%rbp),%r13
  0x0000000116b6b498: mov    %edx,%eax
  0x0000000116b6b49a: and    $0x100000,%eax
  0x0000000116b6b4a0: je     0x0000000116b6b4b5
  0x0000000116b6b4a6: cmp    (%rcx),%rax
  0x0000000116b6b4a9: lea    0x8(%rsp),%r13
  0x0000000116b6b4ae: mov    %r13,-0x10(%rbp)
  0x0000000116b6b4b2: jmpq   *0x60(%rbx)
  0x0000000116b6b4b5: mov    0x8(%rcx),%eax
  0x0000000116b6b4b8: shl    $0x3,%rax
  0x0000000116b6b4bc: mov    0x1c8(%rax,%rbx,8),%rbx
  0x0000000116b6b4c4: lea    0x8(%rsp),%r13
  0x0000000116b6b4c9: mov    %r13,-0x10(%rbp)
  0x0000000116b6b4cd: jmpq   *0x60(%rbx)
  0x0000000116b6b4d0: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b4d5: sub    $0x80,%rsp
  0x0000000116b6b4dc: mov    %rax,0x78(%rsp)
  0x0000000116b6b4e1: mov    %rcx,0x70(%rsp)
  0x0000000116b6b4e6: mov    %rdx,0x68(%rsp)
  0x0000000116b6b4eb: mov    %rbx,0x60(%rsp)
  0x0000000116b6b4f0: mov    %rbp,0x50(%rsp)
  0x0000000116b6b4f5: mov    %rsi,0x48(%rsp)
  0x0000000116b6b4fa: mov    %rdi,0x40(%rsp)
  0x0000000116b6b4ff: mov    %r8,0x38(%rsp)
  0x0000000116b6b504: mov    %r9,0x30(%rsp)
  0x0000000116b6b509: mov    %r10,0x28(%rsp)
  0x0000000116b6b50e: mov    %r11,0x20(%rsp)
  0x0000000116b6b513: mov    %r12,0x18(%rsp)
  0x0000000116b6b518: mov    %r13,0x10(%rsp)
  0x0000000116b6b51d: mov    %r14,0x8(%rsp)
  0x0000000116b6b522: mov    %r15,(%rsp)
  0x0000000116b6b526: movabs $0x10cb763be,%rdi
  0x0000000116b6b530: movabs $0x116b6b4d0,%rsi
  0x0000000116b6b53a: mov    %rsp,%rdx
  0x0000000116b6b53d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b541: callq  0x000000010c7dd830
  0x0000000116b6b546: hlt    
  0x0000000116b6b547: nop
  0x0000000116b6b548: int3   
  0x0000000116b6b549: int3   
  0x0000000116b6b54a: int3   
  0x0000000116b6b54b: int3   
  0x0000000116b6b54c: int3   
  0x0000000116b6b54d: int3   
  0x0000000116b6b54e: int3   
  0x0000000116b6b54f: int3   
  0x0000000116b6b550: int3   
  0x0000000116b6b551: int3   
  0x0000000116b6b552: int3   
  0x0000000116b6b553: int3   
  0x0000000116b6b554: int3   
  0x0000000116b6b555: int3   
  0x0000000116b6b556: int3   
  0x0000000116b6b557: int3   
  0x0000000116b6b558: int3   
  0x0000000116b6b559: int3   
  0x0000000116b6b55a: int3   
  0x0000000116b6b55b: int3   
  0x0000000116b6b55c: int3   
  0x0000000116b6b55d: int3   
  0x0000000116b6b55e: int3   
  0x0000000116b6b55f: int3   

----------------------------------------------------------------------
invokespecial  183 invokespecial  [0x0000000116b6b5a0, 0x0000000116b6b920]  896 bytes

  0x0000000116b6b5a0: push   %rax
  0x0000000116b6b5a1: jmpq   0x0000000116b6b5d0
  0x0000000116b6b5a6: sub    $0x8,%rsp
  0x0000000116b6b5aa: vmovss %xmm0,(%rsp)
  0x0000000116b6b5af: jmpq   0x0000000116b6b5d0
  0x0000000116b6b5b4: sub    $0x10,%rsp
  0x0000000116b6b5b8: vmovsd %xmm0,(%rsp)
  0x0000000116b6b5bd: jmpq   0x0000000116b6b5d0
  0x0000000116b6b5c2: sub    $0x10,%rsp
  0x0000000116b6b5c6: mov    %rax,(%rsp)
  0x0000000116b6b5ca: jmpq   0x0000000116b6b5d0
  0x0000000116b6b5cf: push   %rax
  0x0000000116b6b5d0: mov    %r13,-0x38(%rbp)
  0x0000000116b6b5d4: movzwl 0x1(%r13),%edx
  0x0000000116b6b5d9: mov    -0x28(%rbp),%rcx
  0x0000000116b6b5dd: shl    $0x2,%edx
  0x0000000116b6b5e0: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b6b5e4: shr    $0x10,%ebx
  0x0000000116b6b5e7: and    $0xff,%ebx
  0x0000000116b6b5ed: cmp    $0xb7,%ebx
  0x0000000116b6b5f3: je     0x0000000116b6b866
  0x0000000116b6b5f9: mov    $0xb7,%ebx
  0x0000000116b6b5fe: callq  0x0000000116b6b608
  0x0000000116b6b603: jmpq   0x0000000116b6b85a
  0x0000000116b6b608: mov    %rbx,%rsi
  0x0000000116b6b60b: lea    0x8(%rsp),%rax
  0x0000000116b6b610: mov    %r13,-0x38(%rbp)
  0x0000000116b6b614: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6b61c: je     0x0000000116b6b699
  0x0000000116b6b622: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b627: sub    $0x80,%rsp
  0x0000000116b6b62e: mov    %rax,0x78(%rsp)
  0x0000000116b6b633: mov    %rcx,0x70(%rsp)
  0x0000000116b6b638: mov    %rdx,0x68(%rsp)
  0x0000000116b6b63d: mov    %rbx,0x60(%rsp)
  0x0000000116b6b642: mov    %rbp,0x50(%rsp)
  0x0000000116b6b647: mov    %rsi,0x48(%rsp)
  0x0000000116b6b64c: mov    %rdi,0x40(%rsp)
  0x0000000116b6b651: mov    %r8,0x38(%rsp)
  0x0000000116b6b656: mov    %r9,0x30(%rsp)
  0x0000000116b6b65b: mov    %r10,0x28(%rsp)
  0x0000000116b6b660: mov    %r11,0x20(%rsp)
  0x0000000116b6b665: mov    %r12,0x18(%rsp)
  0x0000000116b6b66a: mov    %r13,0x10(%rsp)
  0x0000000116b6b66f: mov    %r14,0x8(%rsp)
  0x0000000116b6b674: mov    %r15,(%rsp)
  0x0000000116b6b678: movabs $0x10cc2363b,%rdi
  0x0000000116b6b682: movabs $0x116b6b622,%rsi
  0x0000000116b6b68c: mov    %rsp,%rdx
  0x0000000116b6b68f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b693: callq  0x000000010c7dd830
  0x0000000116b6b698: hlt    
  0x0000000116b6b699: push   %r10
  0x0000000116b6b69b: cmp    -0x9d24df2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6b6a2: je     0x0000000116b6b71f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6b6a8: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b6ad: sub    $0x80,%rsp
  0x0000000116b6b6b4: mov    %rax,0x78(%rsp)
  0x0000000116b6b6b9: mov    %rcx,0x70(%rsp)
  0x0000000116b6b6be: mov    %rdx,0x68(%rsp)
  0x0000000116b6b6c3: mov    %rbx,0x60(%rsp)
  0x0000000116b6b6c8: mov    %rbp,0x50(%rsp)
  0x0000000116b6b6cd: mov    %rsi,0x48(%rsp)
  0x0000000116b6b6d2: mov    %rdi,0x40(%rsp)
  0x0000000116b6b6d7: mov    %r8,0x38(%rsp)
  0x0000000116b6b6dc: mov    %r9,0x30(%rsp)
  0x0000000116b6b6e1: mov    %r10,0x28(%rsp)
  0x0000000116b6b6e6: mov    %r11,0x20(%rsp)
  0x0000000116b6b6eb: mov    %r12,0x18(%rsp)
  0x0000000116b6b6f0: mov    %r13,0x10(%rsp)
  0x0000000116b6b6f5: mov    %r14,0x8(%rsp)
  0x0000000116b6b6fa: mov    %r15,(%rsp)
  0x0000000116b6b6fe: movabs $0x10cc63f17,%rdi
  0x0000000116b6b708: movabs $0x116b6b6a8,%rsi
  0x0000000116b6b712: mov    %rsp,%rdx
  0x0000000116b6b715: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b719: callq  0x000000010c7dd830
  0x0000000116b6b71e: hlt    
  0x0000000116b6b71f: pop    %r10
  0x0000000116b6b721: mov    %r15,%rdi
  0x0000000116b6b724: mov    %rbp,0x290(%r15)
  0x0000000116b6b72b: mov    %rax,0x280(%r15)
  0x0000000116b6b732: test   $0xf,%esp
  0x0000000116b6b738: je     0x0000000116b6b750
  0x0000000116b6b73e: sub    $0x8,%rsp
  0x0000000116b6b742: callq  0x000000010c589b30
  0x0000000116b6b747: add    $0x8,%rsp
  0x0000000116b6b74b: jmpq   0x0000000116b6b755
  0x0000000116b6b750: callq  0x000000010c589b30
  0x0000000116b6b755: push   %rax
  0x0000000116b6b756: push   %rdi
  0x0000000116b6b757: push   %rsi
  0x0000000116b6b758: push   %rdx
  0x0000000116b6b759: push   %rcx
  0x0000000116b6b75a: push   %r8
  0x0000000116b6b75c: push   %r9
  0x0000000116b6b75e: push   %r10
  0x0000000116b6b760: mov    %rsp,%r10
  0x0000000116b6b763: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b767: push   %r10
  0x0000000116b6b769: push   %r11
  0x0000000116b6b76b: mov    $0x109,%edi
  0x0000000116b6b770: movabs $0x7ff815049fd5,%r10
  0x0000000116b6b77a: callq  *%r10
  0x0000000116b6b77d: pop    %r11
  0x0000000116b6b77f: pop    %rsp
  0x0000000116b6b780: pop    %r10
  0x0000000116b6b782: pop    %r9
  0x0000000116b6b784: pop    %r8
  0x0000000116b6b786: pop    %rcx
  0x0000000116b6b787: pop    %rdx
  0x0000000116b6b788: pop    %rsi
  0x0000000116b6b789: pop    %rdi
  0x0000000116b6b78a: cmp    %rax,%r15
  0x0000000116b6b78d: je     0x0000000116b6b80a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6b793: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b798: sub    $0x80,%rsp
  0x0000000116b6b79f: mov    %rax,0x78(%rsp)
  0x0000000116b6b7a4: mov    %rcx,0x70(%rsp)
  0x0000000116b6b7a9: mov    %rdx,0x68(%rsp)
  0x0000000116b6b7ae: mov    %rbx,0x60(%rsp)
  0x0000000116b6b7b3: mov    %rbp,0x50(%rsp)
  0x0000000116b6b7b8: mov    %rsi,0x48(%rsp)
  0x0000000116b6b7bd: mov    %rdi,0x40(%rsp)
  0x0000000116b6b7c2: mov    %r8,0x38(%rsp)
  0x0000000116b6b7c7: mov    %r9,0x30(%rsp)
  0x0000000116b6b7cc: mov    %r10,0x28(%rsp)
  0x0000000116b6b7d1: mov    %r11,0x20(%rsp)
  0x0000000116b6b7d6: mov    %r12,0x18(%rsp)
  0x0000000116b6b7db: mov    %r13,0x10(%rsp)
  0x0000000116b6b7e0: mov    %r14,0x8(%rsp)
  0x0000000116b6b7e5: mov    %r15,(%rsp)
  0x0000000116b6b7e9: movabs $0x10cc6405e,%rdi
  0x0000000116b6b7f3: movabs $0x116b6b793,%rsi
  0x0000000116b6b7fd: mov    %rsp,%rdx
  0x0000000116b6b800: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b804: callq  0x000000010c7dd830
  0x0000000116b6b809: hlt    
  0x0000000116b6b80a: pop    %rax
  0x0000000116b6b80b: movabs $0x0,%r10
  0x0000000116b6b815: mov    %r10,0x280(%r15)
  0x0000000116b6b81c: movabs $0x0,%r10
  0x0000000116b6b826: mov    %r10,0x290(%r15)
  0x0000000116b6b82d: movabs $0x0,%r10
  0x0000000116b6b837: mov    %r10,0x288(%r15)
  0x0000000116b6b83e: cmpq   $0x0,0x8(%r15)
  0x0000000116b6b846: je     0x0000000116b6b851
  0x0000000116b6b84c: jmpq   0x0000000116b30420
  0x0000000116b6b851: mov    -0x38(%rbp),%r13
  0x0000000116b6b855: mov    -0x30(%rbp),%r14
  0x0000000116b6b859: retq   
  0x0000000116b6b85a: movzwl 0x1(%r13),%edx
  0x0000000116b6b85f: mov    -0x28(%rbp),%rcx
  0x0000000116b6b863: shl    $0x2,%edx
  0x0000000116b6b866: mov    0x18(%rcx,%rdx,8),%rbx
  0x0000000116b6b86b: mov    0x28(%rcx,%rdx,8),%edx
  0x0000000116b6b86f: mov    %edx,%ecx
  0x0000000116b6b871: and    $0xff,%ecx
  0x0000000116b6b877: mov    -0x8(%rsp,%rcx,8),%rcx
  0x0000000116b6b87c: shr    $0x1c,%edx
  0x0000000116b6b87f: movabs $0x10ce3c650,%r10
  0x0000000116b6b889: mov    (%r10,%rdx,8),%rdx
  0x0000000116b6b88d: push   %rdx
  0x0000000116b6b88e: cmp    (%rcx),%rax
  0x0000000116b6b891: lea    0x8(%rsp),%r13
  0x0000000116b6b896: mov    %r13,-0x10(%rbp)
  0x0000000116b6b89a: jmpq   *0x60(%rbx)
  0x0000000116b6b89d: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b8a2: sub    $0x80,%rsp
  0x0000000116b6b8a9: mov    %rax,0x78(%rsp)
  0x0000000116b6b8ae: mov    %rcx,0x70(%rsp)
  0x0000000116b6b8b3: mov    %rdx,0x68(%rsp)
  0x0000000116b6b8b8: mov    %rbx,0x60(%rsp)
  0x0000000116b6b8bd: mov    %rbp,0x50(%rsp)
  0x0000000116b6b8c2: mov    %rsi,0x48(%rsp)
  0x0000000116b6b8c7: mov    %rdi,0x40(%rsp)
  0x0000000116b6b8cc: mov    %r8,0x38(%rsp)
  0x0000000116b6b8d1: mov    %r9,0x30(%rsp)
  0x0000000116b6b8d6: mov    %r10,0x28(%rsp)
  0x0000000116b6b8db: mov    %r11,0x20(%rsp)
  0x0000000116b6b8e0: mov    %r12,0x18(%rsp)
  0x0000000116b6b8e5: mov    %r13,0x10(%rsp)
  0x0000000116b6b8ea: mov    %r14,0x8(%rsp)
  0x0000000116b6b8ef: mov    %r15,(%rsp)
  0x0000000116b6b8f3: movabs $0x10cb763be,%rdi
  0x0000000116b6b8fd: movabs $0x116b6b89d,%rsi
  0x0000000116b6b907: mov    %rsp,%rdx
  0x0000000116b6b90a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6b90e: callq  0x000000010c7dd830
  0x0000000116b6b913: hlt    
  0x0000000116b6b914: nop
  0x0000000116b6b915: nop
  0x0000000116b6b916: nop
  0x0000000116b6b917: nop
  0x0000000116b6b918: int3   
  0x0000000116b6b919: int3   
  0x0000000116b6b91a: int3   
  0x0000000116b6b91b: int3   
  0x0000000116b6b91c: int3   
  0x0000000116b6b91d: int3   
  0x0000000116b6b91e: int3   
  0x0000000116b6b91f: int3   

----------------------------------------------------------------------
invokestatic  184 invokestatic  [0x0000000116b6b960, 0x0000000116b6bce0]  896 bytes

  0x0000000116b6b960: push   %rax
  0x0000000116b6b961: jmpq   0x0000000116b6b990
  0x0000000116b6b966: sub    $0x8,%rsp
  0x0000000116b6b96a: vmovss %xmm0,(%rsp)
  0x0000000116b6b96f: jmpq   0x0000000116b6b990
  0x0000000116b6b974: sub    $0x10,%rsp
  0x0000000116b6b978: vmovsd %xmm0,(%rsp)
  0x0000000116b6b97d: jmpq   0x0000000116b6b990
  0x0000000116b6b982: sub    $0x10,%rsp
  0x0000000116b6b986: mov    %rax,(%rsp)
  0x0000000116b6b98a: jmpq   0x0000000116b6b990
  0x0000000116b6b98f: push   %rax
  0x0000000116b6b990: mov    %r13,-0x38(%rbp)
  0x0000000116b6b994: movzwl 0x1(%r13),%edx
  0x0000000116b6b999: mov    -0x28(%rbp),%rcx
  0x0000000116b6b99d: shl    $0x2,%edx
  0x0000000116b6b9a0: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b6b9a4: shr    $0x10,%ebx
  0x0000000116b6b9a7: and    $0xff,%ebx
  0x0000000116b6b9ad: cmp    $0xb8,%ebx
  0x0000000116b6b9b3: je     0x0000000116b6bc26
  0x0000000116b6b9b9: mov    $0xb8,%ebx
  0x0000000116b6b9be: callq  0x0000000116b6b9c8
  0x0000000116b6b9c3: jmpq   0x0000000116b6bc1a
  0x0000000116b6b9c8: mov    %rbx,%rsi
  0x0000000116b6b9cb: lea    0x8(%rsp),%rax
  0x0000000116b6b9d0: mov    %r13,-0x38(%rbp)
  0x0000000116b6b9d4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6b9dc: je     0x0000000116b6ba59
  0x0000000116b6b9e2: mov    %rsp,-0x28(%rsp)
  0x0000000116b6b9e7: sub    $0x80,%rsp
  0x0000000116b6b9ee: mov    %rax,0x78(%rsp)
  0x0000000116b6b9f3: mov    %rcx,0x70(%rsp)
  0x0000000116b6b9f8: mov    %rdx,0x68(%rsp)
  0x0000000116b6b9fd: mov    %rbx,0x60(%rsp)
  0x0000000116b6ba02: mov    %rbp,0x50(%rsp)
  0x0000000116b6ba07: mov    %rsi,0x48(%rsp)
  0x0000000116b6ba0c: mov    %rdi,0x40(%rsp)
  0x0000000116b6ba11: mov    %r8,0x38(%rsp)
  0x0000000116b6ba16: mov    %r9,0x30(%rsp)
  0x0000000116b6ba1b: mov    %r10,0x28(%rsp)
  0x0000000116b6ba20: mov    %r11,0x20(%rsp)
  0x0000000116b6ba25: mov    %r12,0x18(%rsp)
  0x0000000116b6ba2a: mov    %r13,0x10(%rsp)
  0x0000000116b6ba2f: mov    %r14,0x8(%rsp)
  0x0000000116b6ba34: mov    %r15,(%rsp)
  0x0000000116b6ba38: movabs $0x10cc2363b,%rdi
  0x0000000116b6ba42: movabs $0x116b6b9e2,%rsi
  0x0000000116b6ba4c: mov    %rsp,%rdx
  0x0000000116b6ba4f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ba53: callq  0x000000010c7dd830
  0x0000000116b6ba58: hlt    
  0x0000000116b6ba59: push   %r10
  0x0000000116b6ba5b: cmp    -0x9d251b2(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6ba62: je     0x0000000116b6badf
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6ba68: mov    %rsp,-0x28(%rsp)
  0x0000000116b6ba6d: sub    $0x80,%rsp
  0x0000000116b6ba74: mov    %rax,0x78(%rsp)
  0x0000000116b6ba79: mov    %rcx,0x70(%rsp)
  0x0000000116b6ba7e: mov    %rdx,0x68(%rsp)
  0x0000000116b6ba83: mov    %rbx,0x60(%rsp)
  0x0000000116b6ba88: mov    %rbp,0x50(%rsp)
  0x0000000116b6ba8d: mov    %rsi,0x48(%rsp)
  0x0000000116b6ba92: mov    %rdi,0x40(%rsp)
  0x0000000116b6ba97: mov    %r8,0x38(%rsp)
  0x0000000116b6ba9c: mov    %r9,0x30(%rsp)
  0x0000000116b6baa1: mov    %r10,0x28(%rsp)
  0x0000000116b6baa6: mov    %r11,0x20(%rsp)
  0x0000000116b6baab: mov    %r12,0x18(%rsp)
  0x0000000116b6bab0: mov    %r13,0x10(%rsp)
  0x0000000116b6bab5: mov    %r14,0x8(%rsp)
  0x0000000116b6baba: mov    %r15,(%rsp)
  0x0000000116b6babe: movabs $0x10cc63f17,%rdi
  0x0000000116b6bac8: movabs $0x116b6ba68,%rsi
  0x0000000116b6bad2: mov    %rsp,%rdx
  0x0000000116b6bad5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6bad9: callq  0x000000010c7dd830
  0x0000000116b6bade: hlt    
  0x0000000116b6badf: pop    %r10
  0x0000000116b6bae1: mov    %r15,%rdi
  0x0000000116b6bae4: mov    %rbp,0x290(%r15)
  0x0000000116b6baeb: mov    %rax,0x280(%r15)
  0x0000000116b6baf2: test   $0xf,%esp
  0x0000000116b6baf8: je     0x0000000116b6bb10
  0x0000000116b6bafe: sub    $0x8,%rsp
  0x0000000116b6bb02: callq  0x000000010c589b30
  0x0000000116b6bb07: add    $0x8,%rsp
  0x0000000116b6bb0b: jmpq   0x0000000116b6bb15
  0x0000000116b6bb10: callq  0x000000010c589b30
  0x0000000116b6bb15: push   %rax
  0x0000000116b6bb16: push   %rdi
  0x0000000116b6bb17: push   %rsi
  0x0000000116b6bb18: push   %rdx
  0x0000000116b6bb19: push   %rcx
  0x0000000116b6bb1a: push   %r8
  0x0000000116b6bb1c: push   %r9
  0x0000000116b6bb1e: push   %r10
  0x0000000116b6bb20: mov    %rsp,%r10
  0x0000000116b6bb23: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6bb27: push   %r10
  0x0000000116b6bb29: push   %r11
  0x0000000116b6bb2b: mov    $0x109,%edi
  0x0000000116b6bb30: movabs $0x7ff815049fd5,%r10
  0x0000000116b6bb3a: callq  *%r10
  0x0000000116b6bb3d: pop    %r11
  0x0000000116b6bb3f: pop    %rsp
  0x0000000116b6bb40: pop    %r10
  0x0000000116b6bb42: pop    %r9
  0x0000000116b6bb44: pop    %r8
  0x0000000116b6bb46: pop    %rcx
  0x0000000116b6bb47: pop    %rdx
  0x0000000116b6bb48: pop    %rsi
  0x0000000116b6bb49: pop    %rdi
  0x0000000116b6bb4a: cmp    %rax,%r15
  0x0000000116b6bb4d: je     0x0000000116b6bbca
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6bb53: mov    %rsp,-0x28(%rsp)
  0x0000000116b6bb58: sub    $0x80,%rsp
  0x0000000116b6bb5f: mov    %rax,0x78(%rsp)
  0x0000000116b6bb64: mov    %rcx,0x70(%rsp)
  0x0000000116b6bb69: mov    %rdx,0x68(%rsp)
  0x0000000116b6bb6e: mov    %rbx,0x60(%rsp)
  0x0000000116b6bb73: mov    %rbp,0x50(%rsp)
  0x0000000116b6bb78: mov    %rsi,0x48(%rsp)
  0x0000000116b6bb7d: mov    %rdi,0x40(%rsp)
  0x0000000116b6bb82: mov    %r8,0x38(%rsp)
  0x0000000116b6bb87: mov    %r9,0x30(%rsp)
  0x0000000116b6bb8c: mov    %r10,0x28(%rsp)
  0x0000000116b6bb91: mov    %r11,0x20(%rsp)
  0x0000000116b6bb96: mov    %r12,0x18(%rsp)
  0x0000000116b6bb9b: mov    %r13,0x10(%rsp)
  0x0000000116b6bba0: mov    %r14,0x8(%rsp)
  0x0000000116b6bba5: mov    %r15,(%rsp)
  0x0000000116b6bba9: movabs $0x10cc6405e,%rdi
  0x0000000116b6bbb3: movabs $0x116b6bb53,%rsi
  0x0000000116b6bbbd: mov    %rsp,%rdx
  0x0000000116b6bbc0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6bbc4: callq  0x000000010c7dd830
  0x0000000116b6bbc9: hlt    
  0x0000000116b6bbca: pop    %rax
  0x0000000116b6bbcb: movabs $0x0,%r10
  0x0000000116b6bbd5: mov    %r10,0x280(%r15)
  0x0000000116b6bbdc: movabs $0x0,%r10
  0x0000000116b6bbe6: mov    %r10,0x290(%r15)
  0x0000000116b6bbed: movabs $0x0,%r10
  0x0000000116b6bbf7: mov    %r10,0x288(%r15)
  0x0000000116b6bbfe: cmpq   $0x0,0x8(%r15)
  0x0000000116b6bc06: je     0x0000000116b6bc11
  0x0000000116b6bc0c: jmpq   0x0000000116b30420
  0x0000000116b6bc11: mov    -0x38(%rbp),%r13
  0x0000000116b6bc15: mov    -0x30(%rbp),%r14
  0x0000000116b6bc19: retq   
  0x0000000116b6bc1a: movzwl 0x1(%r13),%edx
  0x0000000116b6bc1f: mov    -0x28(%rbp),%rcx
  0x0000000116b6bc23: shl    $0x2,%edx
  0x0000000116b6bc26: mov    0x18(%rcx,%rdx,8),%rbx
  0x0000000116b6bc2b: mov    0x28(%rcx,%rdx,8),%edx
  0x0000000116b6bc2f: shr    $0x1c,%edx
  0x0000000116b6bc32: movabs $0x10ce3c650,%r10
  0x0000000116b6bc3c: mov    (%r10,%rdx,8),%rdx
  0x0000000116b6bc40: push   %rdx
  0x0000000116b6bc41: lea    0x8(%rsp),%r13
  0x0000000116b6bc46: mov    %r13,-0x10(%rbp)
  0x0000000116b6bc4a: jmpq   *0x60(%rbx)
  0x0000000116b6bc4d: mov    %rsp,-0x28(%rsp)
  0x0000000116b6bc52: sub    $0x80,%rsp
  0x0000000116b6bc59: mov    %rax,0x78(%rsp)
  0x0000000116b6bc5e: mov    %rcx,0x70(%rsp)
  0x0000000116b6bc63: mov    %rdx,0x68(%rsp)
  0x0000000116b6bc68: mov    %rbx,0x60(%rsp)
  0x0000000116b6bc6d: mov    %rbp,0x50(%rsp)
  0x0000000116b6bc72: mov    %rsi,0x48(%rsp)
  0x0000000116b6bc77: mov    %rdi,0x40(%rsp)
  0x0000000116b6bc7c: mov    %r8,0x38(%rsp)
  0x0000000116b6bc81: mov    %r9,0x30(%rsp)
  0x0000000116b6bc86: mov    %r10,0x28(%rsp)
  0x0000000116b6bc8b: mov    %r11,0x20(%rsp)
  0x0000000116b6bc90: mov    %r12,0x18(%rsp)
  0x0000000116b6bc95: mov    %r13,0x10(%rsp)
  0x0000000116b6bc9a: mov    %r14,0x8(%rsp)
  0x0000000116b6bc9f: mov    %r15,(%rsp)
  0x0000000116b6bca3: movabs $0x10cb763be,%rdi
  0x0000000116b6bcad: movabs $0x116b6bc4d,%rsi
  0x0000000116b6bcb7: mov    %rsp,%rdx
  0x0000000116b6bcba: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6bcbe: callq  0x000000010c7dd830
  0x0000000116b6bcc3: hlt    
  0x0000000116b6bcc4: nop
  0x0000000116b6bcc5: nop
  0x0000000116b6bcc6: nop
  0x0000000116b6bcc7: nop
  0x0000000116b6bcc8: int3   
  0x0000000116b6bcc9: int3   
  0x0000000116b6bcca: int3   
  0x0000000116b6bccb: int3   
  0x0000000116b6bccc: int3   
  0x0000000116b6bccd: int3   
  0x0000000116b6bcce: int3   
  0x0000000116b6bccf: int3   
  0x0000000116b6bcd0: int3   
  0x0000000116b6bcd1: int3   
  0x0000000116b6bcd2: int3   
  0x0000000116b6bcd3: int3   
  0x0000000116b6bcd4: int3   
  0x0000000116b6bcd5: int3   
  0x0000000116b6bcd6: int3   
  0x0000000116b6bcd7: int3   
  0x0000000116b6bcd8: int3   
  0x0000000116b6bcd9: int3   
  0x0000000116b6bcda: int3   
  0x0000000116b6bcdb: int3   
  0x0000000116b6bcdc: int3   
  0x0000000116b6bcdd: int3   
  0x0000000116b6bcde: int3   
  0x0000000116b6bcdf: int3   

----------------------------------------------------------------------
invokeinterface  185 invokeinterface  [0x0000000116b6bd20, 0x0000000116b6c7c0]  2720 bytes

  0x0000000116b6bd20: push   %rax
  0x0000000116b6bd21: jmpq   0x0000000116b6bd50
  0x0000000116b6bd26: sub    $0x8,%rsp
  0x0000000116b6bd2a: vmovss %xmm0,(%rsp)
  0x0000000116b6bd2f: jmpq   0x0000000116b6bd50
  0x0000000116b6bd34: sub    $0x10,%rsp
  0x0000000116b6bd38: vmovsd %xmm0,(%rsp)
  0x0000000116b6bd3d: jmpq   0x0000000116b6bd50
  0x0000000116b6bd42: sub    $0x10,%rsp
  0x0000000116b6bd46: mov    %rax,(%rsp)
  0x0000000116b6bd4a: jmpq   0x0000000116b6bd50
  0x0000000116b6bd4f: push   %rax
  0x0000000116b6bd50: mov    %r13,-0x38(%rbp)
  0x0000000116b6bd54: movzwl 0x1(%r13),%edx
  0x0000000116b6bd59: mov    -0x28(%rbp),%rcx
  0x0000000116b6bd5d: shl    $0x2,%edx
  0x0000000116b6bd60: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b6bd64: shr    $0x10,%ebx
  0x0000000116b6bd67: and    $0xff,%ebx
  0x0000000116b6bd6d: cmp    $0xb9,%ebx
  0x0000000116b6bd73: je     0x0000000116b6bfe6
  0x0000000116b6bd79: mov    $0xb9,%ebx
  0x0000000116b6bd7e: callq  0x0000000116b6bd88
  0x0000000116b6bd83: jmpq   0x0000000116b6bfda
  0x0000000116b6bd88: mov    %rbx,%rsi
  0x0000000116b6bd8b: lea    0x8(%rsp),%rax
  0x0000000116b6bd90: mov    %r13,-0x38(%rbp)
  0x0000000116b6bd94: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6bd9c: je     0x0000000116b6be19
  0x0000000116b6bda2: mov    %rsp,-0x28(%rsp)
  0x0000000116b6bda7: sub    $0x80,%rsp
  0x0000000116b6bdae: mov    %rax,0x78(%rsp)
  0x0000000116b6bdb3: mov    %rcx,0x70(%rsp)
  0x0000000116b6bdb8: mov    %rdx,0x68(%rsp)
  0x0000000116b6bdbd: mov    %rbx,0x60(%rsp)
  0x0000000116b6bdc2: mov    %rbp,0x50(%rsp)
  0x0000000116b6bdc7: mov    %rsi,0x48(%rsp)
  0x0000000116b6bdcc: mov    %rdi,0x40(%rsp)
  0x0000000116b6bdd1: mov    %r8,0x38(%rsp)
  0x0000000116b6bdd6: mov    %r9,0x30(%rsp)
  0x0000000116b6bddb: mov    %r10,0x28(%rsp)
  0x0000000116b6bde0: mov    %r11,0x20(%rsp)
  0x0000000116b6bde5: mov    %r12,0x18(%rsp)
  0x0000000116b6bdea: mov    %r13,0x10(%rsp)
  0x0000000116b6bdef: mov    %r14,0x8(%rsp)
  0x0000000116b6bdf4: mov    %r15,(%rsp)
  0x0000000116b6bdf8: movabs $0x10cc2363b,%rdi
  0x0000000116b6be02: movabs $0x116b6bda2,%rsi
  0x0000000116b6be0c: mov    %rsp,%rdx
  0x0000000116b6be0f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6be13: callq  0x000000010c7dd830
  0x0000000116b6be18: hlt    
  0x0000000116b6be19: push   %r10
  0x0000000116b6be1b: cmp    -0x9d25572(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6be22: je     0x0000000116b6be9f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6be28: mov    %rsp,-0x28(%rsp)
  0x0000000116b6be2d: sub    $0x80,%rsp
  0x0000000116b6be34: mov    %rax,0x78(%rsp)
  0x0000000116b6be39: mov    %rcx,0x70(%rsp)
  0x0000000116b6be3e: mov    %rdx,0x68(%rsp)
  0x0000000116b6be43: mov    %rbx,0x60(%rsp)
  0x0000000116b6be48: mov    %rbp,0x50(%rsp)
  0x0000000116b6be4d: mov    %rsi,0x48(%rsp)
  0x0000000116b6be52: mov    %rdi,0x40(%rsp)
  0x0000000116b6be57: mov    %r8,0x38(%rsp)
  0x0000000116b6be5c: mov    %r9,0x30(%rsp)
  0x0000000116b6be61: mov    %r10,0x28(%rsp)
  0x0000000116b6be66: mov    %r11,0x20(%rsp)
  0x0000000116b6be6b: mov    %r12,0x18(%rsp)
  0x0000000116b6be70: mov    %r13,0x10(%rsp)
  0x0000000116b6be75: mov    %r14,0x8(%rsp)
  0x0000000116b6be7a: mov    %r15,(%rsp)
  0x0000000116b6be7e: movabs $0x10cc63f17,%rdi
  0x0000000116b6be88: movabs $0x116b6be28,%rsi
  0x0000000116b6be92: mov    %rsp,%rdx
  0x0000000116b6be95: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6be99: callq  0x000000010c7dd830
  0x0000000116b6be9e: hlt    
  0x0000000116b6be9f: pop    %r10
  0x0000000116b6bea1: mov    %r15,%rdi
  0x0000000116b6bea4: mov    %rbp,0x290(%r15)
  0x0000000116b6beab: mov    %rax,0x280(%r15)
  0x0000000116b6beb2: test   $0xf,%esp
  0x0000000116b6beb8: je     0x0000000116b6bed0
  0x0000000116b6bebe: sub    $0x8,%rsp
  0x0000000116b6bec2: callq  0x000000010c589b30
  0x0000000116b6bec7: add    $0x8,%rsp
  0x0000000116b6becb: jmpq   0x0000000116b6bed5
  0x0000000116b6bed0: callq  0x000000010c589b30
  0x0000000116b6bed5: push   %rax
  0x0000000116b6bed6: push   %rdi
  0x0000000116b6bed7: push   %rsi
  0x0000000116b6bed8: push   %rdx
  0x0000000116b6bed9: push   %rcx
  0x0000000116b6beda: push   %r8
  0x0000000116b6bedc: push   %r9
  0x0000000116b6bede: push   %r10
  0x0000000116b6bee0: mov    %rsp,%r10
  0x0000000116b6bee3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6bee7: push   %r10
  0x0000000116b6bee9: push   %r11
  0x0000000116b6beeb: mov    $0x109,%edi
  0x0000000116b6bef0: movabs $0x7ff815049fd5,%r10
  0x0000000116b6befa: callq  *%r10
  0x0000000116b6befd: pop    %r11
  0x0000000116b6beff: pop    %rsp
  0x0000000116b6bf00: pop    %r10
  0x0000000116b6bf02: pop    %r9
  0x0000000116b6bf04: pop    %r8
  0x0000000116b6bf06: pop    %rcx
  0x0000000116b6bf07: pop    %rdx
  0x0000000116b6bf08: pop    %rsi
  0x0000000116b6bf09: pop    %rdi
  0x0000000116b6bf0a: cmp    %rax,%r15
  0x0000000116b6bf0d: je     0x0000000116b6bf8a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6bf13: mov    %rsp,-0x28(%rsp)
  0x0000000116b6bf18: sub    $0x80,%rsp
  0x0000000116b6bf1f: mov    %rax,0x78(%rsp)
  0x0000000116b6bf24: mov    %rcx,0x70(%rsp)
  0x0000000116b6bf29: mov    %rdx,0x68(%rsp)
  0x0000000116b6bf2e: mov    %rbx,0x60(%rsp)
  0x0000000116b6bf33: mov    %rbp,0x50(%rsp)
  0x0000000116b6bf38: mov    %rsi,0x48(%rsp)
  0x0000000116b6bf3d: mov    %rdi,0x40(%rsp)
  0x0000000116b6bf42: mov    %r8,0x38(%rsp)
  0x0000000116b6bf47: mov    %r9,0x30(%rsp)
  0x0000000116b6bf4c: mov    %r10,0x28(%rsp)
  0x0000000116b6bf51: mov    %r11,0x20(%rsp)
  0x0000000116b6bf56: mov    %r12,0x18(%rsp)
  0x0000000116b6bf5b: mov    %r13,0x10(%rsp)
  0x0000000116b6bf60: mov    %r14,0x8(%rsp)
  0x0000000116b6bf65: mov    %r15,(%rsp)
  0x0000000116b6bf69: movabs $0x10cc6405e,%rdi
  0x0000000116b6bf73: movabs $0x116b6bf13,%rsi
  0x0000000116b6bf7d: mov    %rsp,%rdx
  0x0000000116b6bf80: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6bf84: callq  0x000000010c7dd830
  0x0000000116b6bf89: hlt    
  0x0000000116b6bf8a: pop    %rax
  0x0000000116b6bf8b: movabs $0x0,%r10
  0x0000000116b6bf95: mov    %r10,0x280(%r15)
  0x0000000116b6bf9c: movabs $0x0,%r10
  0x0000000116b6bfa6: mov    %r10,0x290(%r15)
  0x0000000116b6bfad: movabs $0x0,%r10
  0x0000000116b6bfb7: mov    %r10,0x288(%r15)
  0x0000000116b6bfbe: cmpq   $0x0,0x8(%r15)
  0x0000000116b6bfc6: je     0x0000000116b6bfd1
  0x0000000116b6bfcc: jmpq   0x0000000116b30420
  0x0000000116b6bfd1: mov    -0x38(%rbp),%r13
  0x0000000116b6bfd5: mov    -0x30(%rbp),%r14
  0x0000000116b6bfd9: retq   
  0x0000000116b6bfda: movzwl 0x1(%r13),%edx
  0x0000000116b6bfdf: mov    -0x28(%rbp),%rcx
  0x0000000116b6bfe3: shl    $0x2,%edx
  0x0000000116b6bfe6: mov    0x18(%rcx,%rdx,8),%rax
  0x0000000116b6bfeb: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b6bff0: mov    0x28(%rcx,%rdx,8),%edx
  0x0000000116b6bff4: mov    %edx,%ecx
  0x0000000116b6bff6: and    $0xff,%ecx
  0x0000000116b6bffc: mov    -0x8(%rsp,%rcx,8),%rcx
  0x0000000116b6c001: mov    %edx,%r13d
  0x0000000116b6c004: shr    $0x1c,%edx
  0x0000000116b6c007: movabs $0x10ce3c6a0,%r10
  0x0000000116b6c011: mov    (%r10,%rdx,8),%rdx
  0x0000000116b6c015: push   %rdx
  0x0000000116b6c016: mov    %r13d,%edx
  0x0000000116b6c019: mov    -0x38(%rbp),%r13
  0x0000000116b6c01d: mov    %edx,%r14d
  0x0000000116b6c020: and    $0x800000,%r14d
  0x0000000116b6c027: je     0x0000000116b6c065
  0x0000000116b6c02d: mov    %edx,%eax
  0x0000000116b6c02f: and    $0x100000,%eax
  0x0000000116b6c035: je     0x0000000116b6c04a
  0x0000000116b6c03b: cmp    (%rcx),%rax
  0x0000000116b6c03e: lea    0x8(%rsp),%r13
  0x0000000116b6c043: mov    %r13,-0x10(%rbp)
  0x0000000116b6c047: jmpq   *0x60(%rbx)
  0x0000000116b6c04a: mov    0x8(%rcx),%eax
  0x0000000116b6c04d: shl    $0x3,%rax
  0x0000000116b6c051: mov    0x1c8(%rax,%rbx,8),%rbx
  0x0000000116b6c059: lea    0x8(%rsp),%r13
  0x0000000116b6c05e: mov    %r13,-0x10(%rbp)
  0x0000000116b6c062: jmpq   *0x60(%rbx)
  0x0000000116b6c065: mov    -0x30(%rbp),%r14
  0x0000000116b6c069: mov    0x8(%rcx),%edx
  0x0000000116b6c06c: shl    $0x3,%rdx
  0x0000000116b6c070: mov    0x128(%rdx),%r14d
  0x0000000116b6c077: lea    0x1c8(%rdx,%r14,8),%r14
  0x0000000116b6c07f: mov    (%r14),%r13
  0x0000000116b6c082: cmp    %r13,%rax
  0x0000000116b6c085: je     0x0000000116b6c09c
  0x0000000116b6c087: test   %r13,%r13
  0x0000000116b6c08a: je     0x0000000116b6c453
  0x0000000116b6c090: add    $0x10,%r14
  0x0000000116b6c094: mov    (%r14),%r13
  0x0000000116b6c097: cmp    %r13,%rax
  0x0000000116b6c09a: jne    0x0000000116b6c087
  0x0000000116b6c09c: mov    -0x38(%rbp),%r13
  0x0000000116b6c0a0: mov    0x10(%rbx),%rax
  0x0000000116b6c0a4: mov    0x8(%rax),%rax
  0x0000000116b6c0a8: mov    0x20(%rax),%rax
  0x0000000116b6c0ac: mov    0x2c(%rbx),%ebx
  0x0000000116b6c0af: sub    $0xfffffff6,%ebx
  0x0000000116b6c0b2: neg    %ebx
  0x0000000116b6c0b4: mov    0x128(%rdx),%r13d
  0x0000000116b6c0bb: lea    0x1c8(%rdx,%r13,8),%r13
  0x0000000116b6c0c3: lea    (%rdx,%rbx,8),%rdx
  0x0000000116b6c0c7: mov    0x0(%r13),%rbx
  0x0000000116b6c0cb: cmp    %rbx,%rax
  0x0000000116b6c0ce: je     0x0000000116b6c0e6
  0x0000000116b6c0d0: test   %rbx,%rbx
  0x0000000116b6c0d3: je     0x0000000116b6c453
  0x0000000116b6c0d9: add    $0x10,%r13
  0x0000000116b6c0dd: mov    0x0(%r13),%rbx
  0x0000000116b6c0e1: cmp    %rbx,%rax
  0x0000000116b6c0e4: jne    0x0000000116b6c0d0
  0x0000000116b6c0e6: mov    0x8(%r13),%r13d
  0x0000000116b6c0ea: mov    (%rdx,%r13,1),%rbx
  0x0000000116b6c0ee: test   %rbx,%rbx
  0x0000000116b6c0f1: je     0x0000000116b6c17a
  0x0000000116b6c0f7: lea    0x8(%rsp),%r13
  0x0000000116b6c0fc: mov    %r13,-0x10(%rbp)
  0x0000000116b6c100: jmpq   *0x60(%rbx)
  0x0000000116b6c103: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c108: sub    $0x80,%rsp
  0x0000000116b6c10f: mov    %rax,0x78(%rsp)
  0x0000000116b6c114: mov    %rcx,0x70(%rsp)
  0x0000000116b6c119: mov    %rdx,0x68(%rsp)
  0x0000000116b6c11e: mov    %rbx,0x60(%rsp)
  0x0000000116b6c123: mov    %rbp,0x50(%rsp)
  0x0000000116b6c128: mov    %rsi,0x48(%rsp)
  0x0000000116b6c12d: mov    %rdi,0x40(%rsp)
  0x0000000116b6c132: mov    %r8,0x38(%rsp)
  0x0000000116b6c137: mov    %r9,0x30(%rsp)
  0x0000000116b6c13c: mov    %r10,0x28(%rsp)
  0x0000000116b6c141: mov    %r11,0x20(%rsp)
  0x0000000116b6c146: mov    %r12,0x18(%rsp)
  0x0000000116b6c14b: mov    %r13,0x10(%rsp)
  0x0000000116b6c150: mov    %r14,0x8(%rsp)
  0x0000000116b6c155: mov    %r15,(%rsp)
  0x0000000116b6c159: movabs $0x10cb763be,%rdi
  0x0000000116b6c163: movabs $0x116b6c103,%rsi
  0x0000000116b6c16d: mov    %rsp,%rdx
  0x0000000116b6c170: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c174: callq  0x000000010c7dd830
  0x0000000116b6c179: hlt    
  0x0000000116b6c17a: pop    %rbx
  0x0000000116b6c17b: mov    -0x38(%rbp),%r13
  0x0000000116b6c17f: mov    -0x30(%rbp),%r14
  0x0000000116b6c183: callq  0x0000000116b6c18d
  0x0000000116b6c188: jmpq   0x0000000116b6c3dc
  0x0000000116b6c18d: lea    0x8(%rsp),%rax
  0x0000000116b6c192: mov    %r13,-0x38(%rbp)
  0x0000000116b6c196: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6c19e: je     0x0000000116b6c21b
  0x0000000116b6c1a4: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c1a9: sub    $0x80,%rsp
  0x0000000116b6c1b0: mov    %rax,0x78(%rsp)
  0x0000000116b6c1b5: mov    %rcx,0x70(%rsp)
  0x0000000116b6c1ba: mov    %rdx,0x68(%rsp)
  0x0000000116b6c1bf: mov    %rbx,0x60(%rsp)
  0x0000000116b6c1c4: mov    %rbp,0x50(%rsp)
  0x0000000116b6c1c9: mov    %rsi,0x48(%rsp)
  0x0000000116b6c1ce: mov    %rdi,0x40(%rsp)
  0x0000000116b6c1d3: mov    %r8,0x38(%rsp)
  0x0000000116b6c1d8: mov    %r9,0x30(%rsp)
  0x0000000116b6c1dd: mov    %r10,0x28(%rsp)
  0x0000000116b6c1e2: mov    %r11,0x20(%rsp)
  0x0000000116b6c1e7: mov    %r12,0x18(%rsp)
  0x0000000116b6c1ec: mov    %r13,0x10(%rsp)
  0x0000000116b6c1f1: mov    %r14,0x8(%rsp)
  0x0000000116b6c1f6: mov    %r15,(%rsp)
  0x0000000116b6c1fa: movabs $0x10cc2363b,%rdi
  0x0000000116b6c204: movabs $0x116b6c1a4,%rsi
  0x0000000116b6c20e: mov    %rsp,%rdx
  0x0000000116b6c211: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c215: callq  0x000000010c7dd830
  0x0000000116b6c21a: hlt    
  0x0000000116b6c21b: push   %r10
  0x0000000116b6c21d: cmp    -0x9d25974(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6c224: je     0x0000000116b6c2a1
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6c22a: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c22f: sub    $0x80,%rsp
  0x0000000116b6c236: mov    %rax,0x78(%rsp)
  0x0000000116b6c23b: mov    %rcx,0x70(%rsp)
  0x0000000116b6c240: mov    %rdx,0x68(%rsp)
  0x0000000116b6c245: mov    %rbx,0x60(%rsp)
  0x0000000116b6c24a: mov    %rbp,0x50(%rsp)
  0x0000000116b6c24f: mov    %rsi,0x48(%rsp)
  0x0000000116b6c254: mov    %rdi,0x40(%rsp)
  0x0000000116b6c259: mov    %r8,0x38(%rsp)
  0x0000000116b6c25e: mov    %r9,0x30(%rsp)
  0x0000000116b6c263: mov    %r10,0x28(%rsp)
  0x0000000116b6c268: mov    %r11,0x20(%rsp)
  0x0000000116b6c26d: mov    %r12,0x18(%rsp)
  0x0000000116b6c272: mov    %r13,0x10(%rsp)
  0x0000000116b6c277: mov    %r14,0x8(%rsp)
  0x0000000116b6c27c: mov    %r15,(%rsp)
  0x0000000116b6c280: movabs $0x10cc63f17,%rdi
  0x0000000116b6c28a: movabs $0x116b6c22a,%rsi
  0x0000000116b6c294: mov    %rsp,%rdx
  0x0000000116b6c297: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c29b: callq  0x000000010c7dd830
  0x0000000116b6c2a0: hlt    
  0x0000000116b6c2a1: pop    %r10
  0x0000000116b6c2a3: mov    %r15,%rdi
  0x0000000116b6c2a6: mov    %rbp,0x290(%r15)
  0x0000000116b6c2ad: mov    %rax,0x280(%r15)
  0x0000000116b6c2b4: test   $0xf,%esp
  0x0000000116b6c2ba: je     0x0000000116b6c2d2
  0x0000000116b6c2c0: sub    $0x8,%rsp
  0x0000000116b6c2c4: callq  0x000000010c588320
  0x0000000116b6c2c9: add    $0x8,%rsp
  0x0000000116b6c2cd: jmpq   0x0000000116b6c2d7
  0x0000000116b6c2d2: callq  0x000000010c588320
  0x0000000116b6c2d7: push   %rax
  0x0000000116b6c2d8: push   %rdi
  0x0000000116b6c2d9: push   %rsi
  0x0000000116b6c2da: push   %rdx
  0x0000000116b6c2db: push   %rcx
  0x0000000116b6c2dc: push   %r8
  0x0000000116b6c2de: push   %r9
  0x0000000116b6c2e0: push   %r10
  0x0000000116b6c2e2: mov    %rsp,%r10
  0x0000000116b6c2e5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c2e9: push   %r10
  0x0000000116b6c2eb: push   %r11
  0x0000000116b6c2ed: mov    $0x109,%edi
  0x0000000116b6c2f2: movabs $0x7ff815049fd5,%r10
  0x0000000116b6c2fc: callq  *%r10
  0x0000000116b6c2ff: pop    %r11
  0x0000000116b6c301: pop    %rsp
  0x0000000116b6c302: pop    %r10
  0x0000000116b6c304: pop    %r9
  0x0000000116b6c306: pop    %r8
  0x0000000116b6c308: pop    %rcx
  0x0000000116b6c309: pop    %rdx
  0x0000000116b6c30a: pop    %rsi
  0x0000000116b6c30b: pop    %rdi
  0x0000000116b6c30c: cmp    %rax,%r15
  0x0000000116b6c30f: je     0x0000000116b6c38c
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6c315: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c31a: sub    $0x80,%rsp
  0x0000000116b6c321: mov    %rax,0x78(%rsp)
  0x0000000116b6c326: mov    %rcx,0x70(%rsp)
  0x0000000116b6c32b: mov    %rdx,0x68(%rsp)
  0x0000000116b6c330: mov    %rbx,0x60(%rsp)
  0x0000000116b6c335: mov    %rbp,0x50(%rsp)
  0x0000000116b6c33a: mov    %rsi,0x48(%rsp)
  0x0000000116b6c33f: mov    %rdi,0x40(%rsp)
  0x0000000116b6c344: mov    %r8,0x38(%rsp)
  0x0000000116b6c349: mov    %r9,0x30(%rsp)
  0x0000000116b6c34e: mov    %r10,0x28(%rsp)
  0x0000000116b6c353: mov    %r11,0x20(%rsp)
  0x0000000116b6c358: mov    %r12,0x18(%rsp)
  0x0000000116b6c35d: mov    %r13,0x10(%rsp)
  0x0000000116b6c362: mov    %r14,0x8(%rsp)
  0x0000000116b6c367: mov    %r15,(%rsp)
  0x0000000116b6c36b: movabs $0x10cc6405e,%rdi
  0x0000000116b6c375: movabs $0x116b6c315,%rsi
  0x0000000116b6c37f: mov    %rsp,%rdx
  0x0000000116b6c382: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c386: callq  0x000000010c7dd830
  0x0000000116b6c38b: hlt    
  0x0000000116b6c38c: pop    %rax
  0x0000000116b6c38d: movabs $0x0,%r10
  0x0000000116b6c397: mov    %r10,0x280(%r15)
  0x0000000116b6c39e: movabs $0x0,%r10
  0x0000000116b6c3a8: mov    %r10,0x290(%r15)
  0x0000000116b6c3af: movabs $0x0,%r10
  0x0000000116b6c3b9: mov    %r10,0x288(%r15)
  0x0000000116b6c3c0: cmpq   $0x0,0x8(%r15)
  0x0000000116b6c3c8: je     0x0000000116b6c3d3
  0x0000000116b6c3ce: jmpq   0x0000000116b30420
  0x0000000116b6c3d3: mov    -0x38(%rbp),%r13
  0x0000000116b6c3d7: mov    -0x30(%rbp),%r14
  0x0000000116b6c3db: retq   
  0x0000000116b6c3dc: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c3e1: sub    $0x80,%rsp
  0x0000000116b6c3e8: mov    %rax,0x78(%rsp)
  0x0000000116b6c3ed: mov    %rcx,0x70(%rsp)
  0x0000000116b6c3f2: mov    %rdx,0x68(%rsp)
  0x0000000116b6c3f7: mov    %rbx,0x60(%rsp)
  0x0000000116b6c3fc: mov    %rbp,0x50(%rsp)
  0x0000000116b6c401: mov    %rsi,0x48(%rsp)
  0x0000000116b6c406: mov    %rdi,0x40(%rsp)
  0x0000000116b6c40b: mov    %r8,0x38(%rsp)
  0x0000000116b6c410: mov    %r9,0x30(%rsp)
  0x0000000116b6c415: mov    %r10,0x28(%rsp)
  0x0000000116b6c41a: mov    %r11,0x20(%rsp)
  0x0000000116b6c41f: mov    %r12,0x18(%rsp)
  0x0000000116b6c424: mov    %r13,0x10(%rsp)
  0x0000000116b6c429: mov    %r14,0x8(%rsp)
  0x0000000116b6c42e: mov    %r15,(%rsp)
  0x0000000116b6c432: movabs $0x10cb763be,%rdi
  0x0000000116b6c43c: movabs $0x116b6c3dc,%rsi
  0x0000000116b6c446: mov    %rsp,%rdx
  0x0000000116b6c449: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c44d: callq  0x000000010c7dd830
  0x0000000116b6c452: hlt    
  0x0000000116b6c453: pop    %rbx
  0x0000000116b6c454: mov    -0x38(%rbp),%r13
  0x0000000116b6c458: mov    -0x30(%rbp),%r14
  0x0000000116b6c45c: callq  0x0000000116b6c466
  0x0000000116b6c461: jmpq   0x0000000116b6c6b5
  0x0000000116b6c466: lea    0x8(%rsp),%rax
  0x0000000116b6c46b: mov    %r13,-0x38(%rbp)
  0x0000000116b6c46f: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6c477: je     0x0000000116b6c4f4
  0x0000000116b6c47d: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c482: sub    $0x80,%rsp
  0x0000000116b6c489: mov    %rax,0x78(%rsp)
  0x0000000116b6c48e: mov    %rcx,0x70(%rsp)
  0x0000000116b6c493: mov    %rdx,0x68(%rsp)
  0x0000000116b6c498: mov    %rbx,0x60(%rsp)
  0x0000000116b6c49d: mov    %rbp,0x50(%rsp)
  0x0000000116b6c4a2: mov    %rsi,0x48(%rsp)
  0x0000000116b6c4a7: mov    %rdi,0x40(%rsp)
  0x0000000116b6c4ac: mov    %r8,0x38(%rsp)
  0x0000000116b6c4b1: mov    %r9,0x30(%rsp)
  0x0000000116b6c4b6: mov    %r10,0x28(%rsp)
  0x0000000116b6c4bb: mov    %r11,0x20(%rsp)
  0x0000000116b6c4c0: mov    %r12,0x18(%rsp)
  0x0000000116b6c4c5: mov    %r13,0x10(%rsp)
  0x0000000116b6c4ca: mov    %r14,0x8(%rsp)
  0x0000000116b6c4cf: mov    %r15,(%rsp)
  0x0000000116b6c4d3: movabs $0x10cc2363b,%rdi
  0x0000000116b6c4dd: movabs $0x116b6c47d,%rsi
  0x0000000116b6c4e7: mov    %rsp,%rdx
  0x0000000116b6c4ea: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c4ee: callq  0x000000010c7dd830
  0x0000000116b6c4f3: hlt    
  0x0000000116b6c4f4: push   %r10
  0x0000000116b6c4f6: cmp    -0x9d25c4d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6c4fd: je     0x0000000116b6c57a
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6c503: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c508: sub    $0x80,%rsp
  0x0000000116b6c50f: mov    %rax,0x78(%rsp)
  0x0000000116b6c514: mov    %rcx,0x70(%rsp)
  0x0000000116b6c519: mov    %rdx,0x68(%rsp)
  0x0000000116b6c51e: mov    %rbx,0x60(%rsp)
  0x0000000116b6c523: mov    %rbp,0x50(%rsp)
  0x0000000116b6c528: mov    %rsi,0x48(%rsp)
  0x0000000116b6c52d: mov    %rdi,0x40(%rsp)
  0x0000000116b6c532: mov    %r8,0x38(%rsp)
  0x0000000116b6c537: mov    %r9,0x30(%rsp)
  0x0000000116b6c53c: mov    %r10,0x28(%rsp)
  0x0000000116b6c541: mov    %r11,0x20(%rsp)
  0x0000000116b6c546: mov    %r12,0x18(%rsp)
  0x0000000116b6c54b: mov    %r13,0x10(%rsp)
  0x0000000116b6c550: mov    %r14,0x8(%rsp)
  0x0000000116b6c555: mov    %r15,(%rsp)
  0x0000000116b6c559: movabs $0x10cc63f17,%rdi
  0x0000000116b6c563: movabs $0x116b6c503,%rsi
  0x0000000116b6c56d: mov    %rsp,%rdx
  0x0000000116b6c570: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c574: callq  0x000000010c7dd830
  0x0000000116b6c579: hlt    
  0x0000000116b6c57a: pop    %r10
  0x0000000116b6c57c: mov    %r15,%rdi
  0x0000000116b6c57f: mov    %rbp,0x290(%r15)
  0x0000000116b6c586: mov    %rax,0x280(%r15)
  0x0000000116b6c58d: test   $0xf,%esp
  0x0000000116b6c593: je     0x0000000116b6c5ab
  0x0000000116b6c599: sub    $0x8,%rsp
  0x0000000116b6c59d: callq  0x000000010c588490
  0x0000000116b6c5a2: add    $0x8,%rsp
  0x0000000116b6c5a6: jmpq   0x0000000116b6c5b0
  0x0000000116b6c5ab: callq  0x000000010c588490
  0x0000000116b6c5b0: push   %rax
  0x0000000116b6c5b1: push   %rdi
  0x0000000116b6c5b2: push   %rsi
  0x0000000116b6c5b3: push   %rdx
  0x0000000116b6c5b4: push   %rcx
  0x0000000116b6c5b5: push   %r8
  0x0000000116b6c5b7: push   %r9
  0x0000000116b6c5b9: push   %r10
  0x0000000116b6c5bb: mov    %rsp,%r10
  0x0000000116b6c5be: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c5c2: push   %r10
  0x0000000116b6c5c4: push   %r11
  0x0000000116b6c5c6: mov    $0x109,%edi
  0x0000000116b6c5cb: movabs $0x7ff815049fd5,%r10
  0x0000000116b6c5d5: callq  *%r10
  0x0000000116b6c5d8: pop    %r11
  0x0000000116b6c5da: pop    %rsp
  0x0000000116b6c5db: pop    %r10
  0x0000000116b6c5dd: pop    %r9
  0x0000000116b6c5df: pop    %r8
  0x0000000116b6c5e1: pop    %rcx
  0x0000000116b6c5e2: pop    %rdx
  0x0000000116b6c5e3: pop    %rsi
  0x0000000116b6c5e4: pop    %rdi
  0x0000000116b6c5e5: cmp    %rax,%r15
  0x0000000116b6c5e8: je     0x0000000116b6c665
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6c5ee: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c5f3: sub    $0x80,%rsp
  0x0000000116b6c5fa: mov    %rax,0x78(%rsp)
  0x0000000116b6c5ff: mov    %rcx,0x70(%rsp)
  0x0000000116b6c604: mov    %rdx,0x68(%rsp)
  0x0000000116b6c609: mov    %rbx,0x60(%rsp)
  0x0000000116b6c60e: mov    %rbp,0x50(%rsp)
  0x0000000116b6c613: mov    %rsi,0x48(%rsp)
  0x0000000116b6c618: mov    %rdi,0x40(%rsp)
  0x0000000116b6c61d: mov    %r8,0x38(%rsp)
  0x0000000116b6c622: mov    %r9,0x30(%rsp)
  0x0000000116b6c627: mov    %r10,0x28(%rsp)
  0x0000000116b6c62c: mov    %r11,0x20(%rsp)
  0x0000000116b6c631: mov    %r12,0x18(%rsp)
  0x0000000116b6c636: mov    %r13,0x10(%rsp)
  0x0000000116b6c63b: mov    %r14,0x8(%rsp)
  0x0000000116b6c640: mov    %r15,(%rsp)
  0x0000000116b6c644: movabs $0x10cc6405e,%rdi
  0x0000000116b6c64e: movabs $0x116b6c5ee,%rsi
  0x0000000116b6c658: mov    %rsp,%rdx
  0x0000000116b6c65b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c65f: callq  0x000000010c7dd830
  0x0000000116b6c664: hlt    
  0x0000000116b6c665: pop    %rax
  0x0000000116b6c666: movabs $0x0,%r10
  0x0000000116b6c670: mov    %r10,0x280(%r15)
  0x0000000116b6c677: movabs $0x0,%r10
  0x0000000116b6c681: mov    %r10,0x290(%r15)
  0x0000000116b6c688: movabs $0x0,%r10
  0x0000000116b6c692: mov    %r10,0x288(%r15)
  0x0000000116b6c699: cmpq   $0x0,0x8(%r15)
  0x0000000116b6c6a1: je     0x0000000116b6c6ac
  0x0000000116b6c6a7: jmpq   0x0000000116b30420
  0x0000000116b6c6ac: mov    -0x38(%rbp),%r13
  0x0000000116b6c6b0: mov    -0x30(%rbp),%r14
  0x0000000116b6c6b4: retq   
  0x0000000116b6c6b5: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c6ba: sub    $0x80,%rsp
  0x0000000116b6c6c1: mov    %rax,0x78(%rsp)
  0x0000000116b6c6c6: mov    %rcx,0x70(%rsp)
  0x0000000116b6c6cb: mov    %rdx,0x68(%rsp)
  0x0000000116b6c6d0: mov    %rbx,0x60(%rsp)
  0x0000000116b6c6d5: mov    %rbp,0x50(%rsp)
  0x0000000116b6c6da: mov    %rsi,0x48(%rsp)
  0x0000000116b6c6df: mov    %rdi,0x40(%rsp)
  0x0000000116b6c6e4: mov    %r8,0x38(%rsp)
  0x0000000116b6c6e9: mov    %r9,0x30(%rsp)
  0x0000000116b6c6ee: mov    %r10,0x28(%rsp)
  0x0000000116b6c6f3: mov    %r11,0x20(%rsp)
  0x0000000116b6c6f8: mov    %r12,0x18(%rsp)
  0x0000000116b6c6fd: mov    %r13,0x10(%rsp)
  0x0000000116b6c702: mov    %r14,0x8(%rsp)
  0x0000000116b6c707: mov    %r15,(%rsp)
  0x0000000116b6c70b: movabs $0x10cb763be,%rdi
  0x0000000116b6c715: movabs $0x116b6c6b5,%rsi
  0x0000000116b6c71f: mov    %rsp,%rdx
  0x0000000116b6c722: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c726: callq  0x000000010c7dd830
  0x0000000116b6c72b: hlt    
  0x0000000116b6c72c: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c731: sub    $0x80,%rsp
  0x0000000116b6c738: mov    %rax,0x78(%rsp)
  0x0000000116b6c73d: mov    %rcx,0x70(%rsp)
  0x0000000116b6c742: mov    %rdx,0x68(%rsp)
  0x0000000116b6c747: mov    %rbx,0x60(%rsp)
  0x0000000116b6c74c: mov    %rbp,0x50(%rsp)
  0x0000000116b6c751: mov    %rsi,0x48(%rsp)
  0x0000000116b6c756: mov    %rdi,0x40(%rsp)
  0x0000000116b6c75b: mov    %r8,0x38(%rsp)
  0x0000000116b6c760: mov    %r9,0x30(%rsp)
  0x0000000116b6c765: mov    %r10,0x28(%rsp)
  0x0000000116b6c76a: mov    %r11,0x20(%rsp)
  0x0000000116b6c76f: mov    %r12,0x18(%rsp)
  0x0000000116b6c774: mov    %r13,0x10(%rsp)
  0x0000000116b6c779: mov    %r14,0x8(%rsp)
  0x0000000116b6c77e: mov    %r15,(%rsp)
  0x0000000116b6c782: movabs $0x10cb763be,%rdi
  0x0000000116b6c78c: movabs $0x116b6c72c,%rsi
  0x0000000116b6c796: mov    %rsp,%rdx
  0x0000000116b6c799: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c79d: callq  0x000000010c7dd830
  0x0000000116b6c7a2: hlt    
  0x0000000116b6c7a3: nop
  0x0000000116b6c7a4: nop
  0x0000000116b6c7a5: nop
  0x0000000116b6c7a6: nop
  0x0000000116b6c7a7: nop
  0x0000000116b6c7a8: int3   
  0x0000000116b6c7a9: int3   
  0x0000000116b6c7aa: int3   
  0x0000000116b6c7ab: int3   
  0x0000000116b6c7ac: int3   
  0x0000000116b6c7ad: int3   
  0x0000000116b6c7ae: int3   
  0x0000000116b6c7af: int3   
  0x0000000116b6c7b0: int3   
  0x0000000116b6c7b1: int3   
  0x0000000116b6c7b2: int3   
  0x0000000116b6c7b3: int3   
  0x0000000116b6c7b4: int3   
  0x0000000116b6c7b5: int3   
  0x0000000116b6c7b6: int3   
  0x0000000116b6c7b7: int3   
  0x0000000116b6c7b8: int3   
  0x0000000116b6c7b9: int3   
  0x0000000116b6c7ba: int3   
  0x0000000116b6c7bb: int3   
  0x0000000116b6c7bc: int3   
  0x0000000116b6c7bd: int3   
  0x0000000116b6c7be: int3   
  0x0000000116b6c7bf: int3   

----------------------------------------------------------------------
invokedynamic  186 invokedynamic  [0x0000000116b6c800, 0x0000000116b6cc40]  1088 bytes

  0x0000000116b6c800: push   %rax
  0x0000000116b6c801: jmpq   0x0000000116b6c830
  0x0000000116b6c806: sub    $0x8,%rsp
  0x0000000116b6c80a: vmovss %xmm0,(%rsp)
  0x0000000116b6c80f: jmpq   0x0000000116b6c830
  0x0000000116b6c814: sub    $0x10,%rsp
  0x0000000116b6c818: vmovsd %xmm0,(%rsp)
  0x0000000116b6c81d: jmpq   0x0000000116b6c830
  0x0000000116b6c822: sub    $0x10,%rsp
  0x0000000116b6c826: mov    %rax,(%rsp)
  0x0000000116b6c82a: jmpq   0x0000000116b6c830
  0x0000000116b6c82f: push   %rax
  0x0000000116b6c830: mov    %r13,-0x38(%rbp)
  0x0000000116b6c834: mov    0x1(%r13),%edx
  0x0000000116b6c838: not    %edx
  0x0000000116b6c83a: mov    -0x28(%rbp),%rcx
  0x0000000116b6c83e: shl    $0x2,%edx
  0x0000000116b6c841: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b6c845: shr    $0x10,%ebx
  0x0000000116b6c848: and    $0xff,%ebx
  0x0000000116b6c84e: cmp    $0xba,%ebx
  0x0000000116b6c854: je     0x0000000116b6cac8
  0x0000000116b6c85a: mov    $0xba,%ebx
  0x0000000116b6c85f: callq  0x0000000116b6c869
  0x0000000116b6c864: jmpq   0x0000000116b6cabb
  0x0000000116b6c869: mov    %rbx,%rsi
  0x0000000116b6c86c: lea    0x8(%rsp),%rax
  0x0000000116b6c871: mov    %r13,-0x38(%rbp)
  0x0000000116b6c875: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6c87d: je     0x0000000116b6c8fa
  0x0000000116b6c883: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c888: sub    $0x80,%rsp
  0x0000000116b6c88f: mov    %rax,0x78(%rsp)
  0x0000000116b6c894: mov    %rcx,0x70(%rsp)
  0x0000000116b6c899: mov    %rdx,0x68(%rsp)
  0x0000000116b6c89e: mov    %rbx,0x60(%rsp)
  0x0000000116b6c8a3: mov    %rbp,0x50(%rsp)
  0x0000000116b6c8a8: mov    %rsi,0x48(%rsp)
  0x0000000116b6c8ad: mov    %rdi,0x40(%rsp)
  0x0000000116b6c8b2: mov    %r8,0x38(%rsp)
  0x0000000116b6c8b7: mov    %r9,0x30(%rsp)
  0x0000000116b6c8bc: mov    %r10,0x28(%rsp)
  0x0000000116b6c8c1: mov    %r11,0x20(%rsp)
  0x0000000116b6c8c6: mov    %r12,0x18(%rsp)
  0x0000000116b6c8cb: mov    %r13,0x10(%rsp)
  0x0000000116b6c8d0: mov    %r14,0x8(%rsp)
  0x0000000116b6c8d5: mov    %r15,(%rsp)
  0x0000000116b6c8d9: movabs $0x10cc2363b,%rdi
  0x0000000116b6c8e3: movabs $0x116b6c883,%rsi
  0x0000000116b6c8ed: mov    %rsp,%rdx
  0x0000000116b6c8f0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c8f4: callq  0x000000010c7dd830
  0x0000000116b6c8f9: hlt    
  0x0000000116b6c8fa: push   %r10
  0x0000000116b6c8fc: cmp    -0x9d26053(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6c903: je     0x0000000116b6c980
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6c909: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c90e: sub    $0x80,%rsp
  0x0000000116b6c915: mov    %rax,0x78(%rsp)
  0x0000000116b6c91a: mov    %rcx,0x70(%rsp)
  0x0000000116b6c91f: mov    %rdx,0x68(%rsp)
  0x0000000116b6c924: mov    %rbx,0x60(%rsp)
  0x0000000116b6c929: mov    %rbp,0x50(%rsp)
  0x0000000116b6c92e: mov    %rsi,0x48(%rsp)
  0x0000000116b6c933: mov    %rdi,0x40(%rsp)
  0x0000000116b6c938: mov    %r8,0x38(%rsp)
  0x0000000116b6c93d: mov    %r9,0x30(%rsp)
  0x0000000116b6c942: mov    %r10,0x28(%rsp)
  0x0000000116b6c947: mov    %r11,0x20(%rsp)
  0x0000000116b6c94c: mov    %r12,0x18(%rsp)
  0x0000000116b6c951: mov    %r13,0x10(%rsp)
  0x0000000116b6c956: mov    %r14,0x8(%rsp)
  0x0000000116b6c95b: mov    %r15,(%rsp)
  0x0000000116b6c95f: movabs $0x10cc63f17,%rdi
  0x0000000116b6c969: movabs $0x116b6c909,%rsi
  0x0000000116b6c973: mov    %rsp,%rdx
  0x0000000116b6c976: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c97a: callq  0x000000010c7dd830
  0x0000000116b6c97f: hlt    
  0x0000000116b6c980: pop    %r10
  0x0000000116b6c982: mov    %r15,%rdi
  0x0000000116b6c985: mov    %rbp,0x290(%r15)
  0x0000000116b6c98c: mov    %rax,0x280(%r15)
  0x0000000116b6c993: test   $0xf,%esp
  0x0000000116b6c999: je     0x0000000116b6c9b1
  0x0000000116b6c99f: sub    $0x8,%rsp
  0x0000000116b6c9a3: callq  0x000000010c58ab90
  0x0000000116b6c9a8: add    $0x8,%rsp
  0x0000000116b6c9ac: jmpq   0x0000000116b6c9b6
  0x0000000116b6c9b1: callq  0x000000010c58ab90
  0x0000000116b6c9b6: push   %rax
  0x0000000116b6c9b7: push   %rdi
  0x0000000116b6c9b8: push   %rsi
  0x0000000116b6c9b9: push   %rdx
  0x0000000116b6c9ba: push   %rcx
  0x0000000116b6c9bb: push   %r8
  0x0000000116b6c9bd: push   %r9
  0x0000000116b6c9bf: push   %r10
  0x0000000116b6c9c1: mov    %rsp,%r10
  0x0000000116b6c9c4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6c9c8: push   %r10
  0x0000000116b6c9ca: push   %r11
  0x0000000116b6c9cc: mov    $0x109,%edi
  0x0000000116b6c9d1: movabs $0x7ff815049fd5,%r10
  0x0000000116b6c9db: callq  *%r10
  0x0000000116b6c9de: pop    %r11
  0x0000000116b6c9e0: pop    %rsp
  0x0000000116b6c9e1: pop    %r10
  0x0000000116b6c9e3: pop    %r9
  0x0000000116b6c9e5: pop    %r8
  0x0000000116b6c9e7: pop    %rcx
  0x0000000116b6c9e8: pop    %rdx
  0x0000000116b6c9e9: pop    %rsi
  0x0000000116b6c9ea: pop    %rdi
  0x0000000116b6c9eb: cmp    %rax,%r15
  0x0000000116b6c9ee: je     0x0000000116b6ca6b
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6c9f4: mov    %rsp,-0x28(%rsp)
  0x0000000116b6c9f9: sub    $0x80,%rsp
  0x0000000116b6ca00: mov    %rax,0x78(%rsp)
  0x0000000116b6ca05: mov    %rcx,0x70(%rsp)
  0x0000000116b6ca0a: mov    %rdx,0x68(%rsp)
  0x0000000116b6ca0f: mov    %rbx,0x60(%rsp)
  0x0000000116b6ca14: mov    %rbp,0x50(%rsp)
  0x0000000116b6ca19: mov    %rsi,0x48(%rsp)
  0x0000000116b6ca1e: mov    %rdi,0x40(%rsp)
  0x0000000116b6ca23: mov    %r8,0x38(%rsp)
  0x0000000116b6ca28: mov    %r9,0x30(%rsp)
  0x0000000116b6ca2d: mov    %r10,0x28(%rsp)
  0x0000000116b6ca32: mov    %r11,0x20(%rsp)
  0x0000000116b6ca37: mov    %r12,0x18(%rsp)
  0x0000000116b6ca3c: mov    %r13,0x10(%rsp)
  0x0000000116b6ca41: mov    %r14,0x8(%rsp)
  0x0000000116b6ca46: mov    %r15,(%rsp)
  0x0000000116b6ca4a: movabs $0x10cc6405e,%rdi
  0x0000000116b6ca54: movabs $0x116b6c9f4,%rsi
  0x0000000116b6ca5e: mov    %rsp,%rdx
  0x0000000116b6ca61: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ca65: callq  0x000000010c7dd830
  0x0000000116b6ca6a: hlt    
  0x0000000116b6ca6b: pop    %rax
  0x0000000116b6ca6c: movabs $0x0,%r10
  0x0000000116b6ca76: mov    %r10,0x280(%r15)
  0x0000000116b6ca7d: movabs $0x0,%r10
  0x0000000116b6ca87: mov    %r10,0x290(%r15)
  0x0000000116b6ca8e: movabs $0x0,%r10
  0x0000000116b6ca98: mov    %r10,0x288(%r15)
  0x0000000116b6ca9f: cmpq   $0x0,0x8(%r15)
  0x0000000116b6caa7: je     0x0000000116b6cab2
  0x0000000116b6caad: jmpq   0x0000000116b30420
  0x0000000116b6cab2: mov    -0x38(%rbp),%r13
  0x0000000116b6cab6: mov    -0x30(%rbp),%r14
  0x0000000116b6caba: retq   
  0x0000000116b6cabb: mov    0x1(%r13),%edx
  0x0000000116b6cabf: not    %edx
  0x0000000116b6cac1: mov    -0x28(%rbp),%rcx
  0x0000000116b6cac5: shl    $0x2,%edx
  0x0000000116b6cac8: mov    0x18(%rcx,%rdx,8),%rbx
  0x0000000116b6cacd: mov    0x20(%rcx,%rdx,8),%rax
  0x0000000116b6cad2: mov    0x28(%rcx,%rdx,8),%edx
  0x0000000116b6cad6: test   $0x1000000,%edx
  0x0000000116b6cadc: je     0x0000000116b6cb90
  0x0000000116b6cae2: push   %rbx
  0x0000000116b6cae3: mov    %rax,%rbx
  0x0000000116b6cae6: shl    $0x2,%ebx
  0x0000000116b6cae9: mov    -0x18(%rbp),%rax
  0x0000000116b6caed: mov    0x10(%rax),%rax
  0x0000000116b6caf1: mov    0x8(%rax),%rax
  0x0000000116b6caf5: mov    0x30(%rax),%rax
  0x0000000116b6caf9: mov    (%rax),%rax
  0x0000000116b6cafc: add    %rbx,%rax
  0x0000000116b6caff: mov    0x10(%rax),%eax
  0x0000000116b6cb02: push   %r10
  0x0000000116b6cb04: cmp    -0x9d2625b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6cb0b: je     0x0000000116b6cb88
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b6cb11: mov    %rsp,-0x28(%rsp)
  0x0000000116b6cb16: sub    $0x80,%rsp
  0x0000000116b6cb1d: mov    %rax,0x78(%rsp)
  0x0000000116b6cb22: mov    %rcx,0x70(%rsp)
  0x0000000116b6cb27: mov    %rdx,0x68(%rsp)
  0x0000000116b6cb2c: mov    %rbx,0x60(%rsp)
  0x0000000116b6cb31: mov    %rbp,0x50(%rsp)
  0x0000000116b6cb36: mov    %rsi,0x48(%rsp)
  0x0000000116b6cb3b: mov    %rdi,0x40(%rsp)
  0x0000000116b6cb40: mov    %r8,0x38(%rsp)
  0x0000000116b6cb45: mov    %r9,0x30(%rsp)
  0x0000000116b6cb4a: mov    %r10,0x28(%rsp)
  0x0000000116b6cb4f: mov    %r11,0x20(%rsp)
  0x0000000116b6cb54: mov    %r12,0x18(%rsp)
  0x0000000116b6cb59: mov    %r13,0x10(%rsp)
  0x0000000116b6cb5e: mov    %r14,0x8(%rsp)
  0x0000000116b6cb63: mov    %r15,(%rsp)
  0x0000000116b6cb67: movabs $0x10cc64abb,%rdi
  0x0000000116b6cb71: movabs $0x116b6cb11,%rsi
  0x0000000116b6cb7b: mov    %rsp,%rdx
  0x0000000116b6cb7e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6cb82: callq  0x000000010c7dd830
  0x0000000116b6cb87: hlt    
  0x0000000116b6cb88: pop    %r10
  0x0000000116b6cb8a: shl    $0x3,%rax
  0x0000000116b6cb8e: pop    %rbx
  0x0000000116b6cb8f: push   %rax
  0x0000000116b6cb90: shr    $0x1c,%edx
  0x0000000116b6cb93: movabs $0x10ce3c6f0,%r10
  0x0000000116b6cb9d: mov    (%r10,%rdx,8),%rdx
  0x0000000116b6cba1: push   %rdx
  0x0000000116b6cba2: lea    0x8(%rsp),%r13
  0x0000000116b6cba7: mov    %r13,-0x10(%rbp)
  0x0000000116b6cbab: jmpq   *0x60(%rbx)
  0x0000000116b6cbae: mov    %rsp,-0x28(%rsp)
  0x0000000116b6cbb3: sub    $0x80,%rsp
  0x0000000116b6cbba: mov    %rax,0x78(%rsp)
  0x0000000116b6cbbf: mov    %rcx,0x70(%rsp)
  0x0000000116b6cbc4: mov    %rdx,0x68(%rsp)
  0x0000000116b6cbc9: mov    %rbx,0x60(%rsp)
  0x0000000116b6cbce: mov    %rbp,0x50(%rsp)
  0x0000000116b6cbd3: mov    %rsi,0x48(%rsp)
  0x0000000116b6cbd8: mov    %rdi,0x40(%rsp)
  0x0000000116b6cbdd: mov    %r8,0x38(%rsp)
  0x0000000116b6cbe2: mov    %r9,0x30(%rsp)
  0x0000000116b6cbe7: mov    %r10,0x28(%rsp)
  0x0000000116b6cbec: mov    %r11,0x20(%rsp)
  0x0000000116b6cbf1: mov    %r12,0x18(%rsp)
  0x0000000116b6cbf6: mov    %r13,0x10(%rsp)
  0x0000000116b6cbfb: mov    %r14,0x8(%rsp)
  0x0000000116b6cc00: mov    %r15,(%rsp)
  0x0000000116b6cc04: movabs $0x10cb763be,%rdi
  0x0000000116b6cc0e: movabs $0x116b6cbae,%rsi
  0x0000000116b6cc18: mov    %rsp,%rdx
  0x0000000116b6cc1b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6cc1f: callq  0x000000010c7dd830
  0x0000000116b6cc24: hlt    
  0x0000000116b6cc25: nop
  0x0000000116b6cc26: nop
  0x0000000116b6cc27: nop
  0x0000000116b6cc28: int3   
  0x0000000116b6cc29: int3   
  0x0000000116b6cc2a: int3   
  0x0000000116b6cc2b: int3   
  0x0000000116b6cc2c: int3   
  0x0000000116b6cc2d: int3   
  0x0000000116b6cc2e: int3   
  0x0000000116b6cc2f: int3   
  0x0000000116b6cc30: int3   
  0x0000000116b6cc31: int3   
  0x0000000116b6cc32: int3   
  0x0000000116b6cc33: int3   
  0x0000000116b6cc34: int3   
  0x0000000116b6cc35: int3   
  0x0000000116b6cc36: int3   
  0x0000000116b6cc37: int3   
  0x0000000116b6cc38: int3   
  0x0000000116b6cc39: int3   
  0x0000000116b6cc3a: int3   
  0x0000000116b6cc3b: int3   
  0x0000000116b6cc3c: int3   
  0x0000000116b6cc3d: int3   
  0x0000000116b6cc3e: int3   
  0x0000000116b6cc3f: int3   

----------------------------------------------------------------------
new  187 new  [0x0000000116b6cc80, 0x0000000116b6d0e0]  1120 bytes

  0x0000000116b6cc80: push   %rax
  0x0000000116b6cc81: jmpq   0x0000000116b6ccb0
  0x0000000116b6cc86: sub    $0x8,%rsp
  0x0000000116b6cc8a: vmovss %xmm0,(%rsp)
  0x0000000116b6cc8f: jmpq   0x0000000116b6ccb0
  0x0000000116b6cc94: sub    $0x10,%rsp
  0x0000000116b6cc98: vmovsd %xmm0,(%rsp)
  0x0000000116b6cc9d: jmpq   0x0000000116b6ccb0
  0x0000000116b6cca2: sub    $0x10,%rsp
  0x0000000116b6cca6: mov    %rax,(%rsp)
  0x0000000116b6ccaa: jmpq   0x0000000116b6ccb0
  0x0000000116b6ccaf: push   %rax
  0x0000000116b6ccb0: movzwl 0x1(%r13),%edx
  0x0000000116b6ccb5: bswap  %edx
  0x0000000116b6ccb7: shr    $0x10,%edx
  0x0000000116b6ccba: mov    -0x18(%rbp),%rsi
  0x0000000116b6ccbe: mov    0x10(%rsi),%rsi
  0x0000000116b6ccc2: mov    0x8(%rsi),%rsi
  0x0000000116b6ccc6: mov    0x10(%rsi),%rax
  0x0000000116b6ccca: cmpb   $0x7,0x4(%rax,%rdx,1)
  0x0000000116b6cccf: jne    0x0000000116b6ce32
  0x0000000116b6ccd5: mov    0x58(%rsi,%rdx,8),%rsi
  0x0000000116b6ccda: cmpb   $0x4,0x17a(%rsi)
  0x0000000116b6cce1: jne    0x0000000116b6ce32
  0x0000000116b6cce7: mov    0xc(%rsi),%edx
  0x0000000116b6ccea: test   $0x1,%edx
  0x0000000116b6ccf0: jne    0x0000000116b6ce32
  0x0000000116b6ccf6: mov    0x70(%r15),%rax
  0x0000000116b6ccfa: lea    (%rax,%rdx,1),%rbx
  0x0000000116b6ccfe: cmp    0x80(%r15),%rbx
  0x0000000116b6cd05: ja     0x0000000116b6cd14
  0x0000000116b6cd0b: mov    %rbx,0x70(%r15)
  0x0000000116b6cd0f: jmpq   0x0000000116b6cd46
  0x0000000116b6cd14: movabs $0x600000d2e7b8,%r10
  0x0000000116b6cd1e: movabs $0x600000d2e790,%r11
  0x0000000116b6cd28: mov    (%r10),%rax
  0x0000000116b6cd2b: lea    (%rax,%rdx,1),%rbx
  0x0000000116b6cd2f: cmp    (%r11),%rbx
  0x0000000116b6cd32: ja     0x0000000116b6ce32
  0x0000000116b6cd38: lock cmpxchg %rbx,(%r10)
  0x0000000116b6cd3d: jne    0x0000000116b6cd2b
  0x0000000116b6cd3f: add    %rdx,0xd8(%r15)
  0x0000000116b6cd46: sub    $0x10,%edx
  0x0000000116b6cd49: je     0x0000000116b6cd5d
  0x0000000116b6cd4f: xor    %ecx,%ecx
  0x0000000116b6cd51: shr    $0x3,%edx
  0x0000000116b6cd54: mov    %rcx,0x8(%rax,%rdx,8)
  0x0000000116b6cd59: dec    %edx
  0x0000000116b6cd5b: jne    0x0000000116b6cd54
  0x0000000116b6cd5d: mov    0xb0(%rsi),%r10
  0x0000000116b6cd64: mov    %r10,(%rax)
  0x0000000116b6cd67: xor    %ecx,%ecx
  0x0000000116b6cd69: mov    %ecx,0xc(%rax)
  0x0000000116b6cd6c: shr    $0x3,%rsi
  0x0000000116b6cd70: mov    %esi,0x8(%rax)
  0x0000000116b6cd73: cmpb   $0x0,-0x9d4fb77(%rip)        # 0x000000010ce1d203
  0x0000000116b6cd7a: je     0x0000000116b6ce2d
  0x0000000116b6cd80: push   %rax
  0x0000000116b6cd81: mov    %rax,%rdi
  0x0000000116b6cd84: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6cd8c: je     0x0000000116b6ce09
  0x0000000116b6cd92: mov    %rsp,-0x28(%rsp)
  0x0000000116b6cd97: sub    $0x80,%rsp
  0x0000000116b6cd9e: mov    %rax,0x78(%rsp)
  0x0000000116b6cda3: mov    %rcx,0x70(%rsp)
  0x0000000116b6cda8: mov    %rdx,0x68(%rsp)
  0x0000000116b6cdad: mov    %rbx,0x60(%rsp)
  0x0000000116b6cdb2: mov    %rbp,0x50(%rsp)
  0x0000000116b6cdb7: mov    %rsi,0x48(%rsp)
  0x0000000116b6cdbc: mov    %rdi,0x40(%rsp)
  0x0000000116b6cdc1: mov    %r8,0x38(%rsp)
  0x0000000116b6cdc6: mov    %r9,0x30(%rsp)
  0x0000000116b6cdcb: mov    %r10,0x28(%rsp)
  0x0000000116b6cdd0: mov    %r11,0x20(%rsp)
  0x0000000116b6cdd5: mov    %r12,0x18(%rsp)
  0x0000000116b6cdda: mov    %r13,0x10(%rsp)
  0x0000000116b6cddf: mov    %r14,0x8(%rsp)
  0x0000000116b6cde4: mov    %r15,(%rsp)
  0x0000000116b6cde8: movabs $0x10cc2363b,%rdi
  0x0000000116b6cdf2: movabs $0x116b6cd92,%rsi
  0x0000000116b6cdfc: mov    %rsp,%rdx
  0x0000000116b6cdff: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ce03: callq  0x000000010c7dd830
  0x0000000116b6ce08: hlt    
  0x0000000116b6ce09: test   $0xf,%esp
  0x0000000116b6ce0f: je     0x0000000116b6ce27
  0x0000000116b6ce15: sub    $0x8,%rsp
  0x0000000116b6ce19: callq  0x000000010c9c9550
  0x0000000116b6ce1e: add    $0x8,%rsp
  0x0000000116b6ce22: jmpq   0x0000000116b6ce2c
  0x0000000116b6ce27: callq  0x000000010c9c9550
  0x0000000116b6ce2c: pop    %rax
  0x0000000116b6ce2d: jmpq   0x0000000116b6d0b9
  0x0000000116b6ce32: mov    -0x18(%rbp),%rsi
  0x0000000116b6ce36: mov    0x10(%rsi),%rsi
  0x0000000116b6ce3a: mov    0x8(%rsi),%rsi
  0x0000000116b6ce3e: movzwl 0x1(%r13),%edx
  0x0000000116b6ce43: bswap  %edx
  0x0000000116b6ce45: shr    $0x10,%edx
  0x0000000116b6ce48: callq  0x0000000116b6ce52
  0x0000000116b6ce4d: jmpq   0x0000000116b6d0b9
  0x0000000116b6ce52: lea    0x8(%rsp),%rax
  0x0000000116b6ce57: mov    %r13,-0x38(%rbp)
  0x0000000116b6ce5b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6ce63: je     0x0000000116b6cee0
  0x0000000116b6ce69: mov    %rsp,-0x28(%rsp)
  0x0000000116b6ce6e: sub    $0x80,%rsp
  0x0000000116b6ce75: mov    %rax,0x78(%rsp)
  0x0000000116b6ce7a: mov    %rcx,0x70(%rsp)
  0x0000000116b6ce7f: mov    %rdx,0x68(%rsp)
  0x0000000116b6ce84: mov    %rbx,0x60(%rsp)
  0x0000000116b6ce89: mov    %rbp,0x50(%rsp)
  0x0000000116b6ce8e: mov    %rsi,0x48(%rsp)
  0x0000000116b6ce93: mov    %rdi,0x40(%rsp)
  0x0000000116b6ce98: mov    %r8,0x38(%rsp)
  0x0000000116b6ce9d: mov    %r9,0x30(%rsp)
  0x0000000116b6cea2: mov    %r10,0x28(%rsp)
  0x0000000116b6cea7: mov    %r11,0x20(%rsp)
  0x0000000116b6ceac: mov    %r12,0x18(%rsp)
  0x0000000116b6ceb1: mov    %r13,0x10(%rsp)
  0x0000000116b6ceb6: mov    %r14,0x8(%rsp)
  0x0000000116b6cebb: mov    %r15,(%rsp)
  0x0000000116b6cebf: movabs $0x10cc2363b,%rdi
  0x0000000116b6cec9: movabs $0x116b6ce69,%rsi
  0x0000000116b6ced3: mov    %rsp,%rdx
  0x0000000116b6ced6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ceda: callq  0x000000010c7dd830
  0x0000000116b6cedf: hlt    
  0x0000000116b6cee0: push   %r10
  0x0000000116b6cee2: cmp    -0x9d26639(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6cee9: je     0x0000000116b6cf66
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6ceef: mov    %rsp,-0x28(%rsp)
  0x0000000116b6cef4: sub    $0x80,%rsp
  0x0000000116b6cefb: mov    %rax,0x78(%rsp)
  0x0000000116b6cf00: mov    %rcx,0x70(%rsp)
  0x0000000116b6cf05: mov    %rdx,0x68(%rsp)
  0x0000000116b6cf0a: mov    %rbx,0x60(%rsp)
  0x0000000116b6cf0f: mov    %rbp,0x50(%rsp)
  0x0000000116b6cf14: mov    %rsi,0x48(%rsp)
  0x0000000116b6cf19: mov    %rdi,0x40(%rsp)
  0x0000000116b6cf1e: mov    %r8,0x38(%rsp)
  0x0000000116b6cf23: mov    %r9,0x30(%rsp)
  0x0000000116b6cf28: mov    %r10,0x28(%rsp)
  0x0000000116b6cf2d: mov    %r11,0x20(%rsp)
  0x0000000116b6cf32: mov    %r12,0x18(%rsp)
  0x0000000116b6cf37: mov    %r13,0x10(%rsp)
  0x0000000116b6cf3c: mov    %r14,0x8(%rsp)
  0x0000000116b6cf41: mov    %r15,(%rsp)
  0x0000000116b6cf45: movabs $0x10cc63f17,%rdi
  0x0000000116b6cf4f: movabs $0x116b6ceef,%rsi
  0x0000000116b6cf59: mov    %rsp,%rdx
  0x0000000116b6cf5c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6cf60: callq  0x000000010c7dd830
  0x0000000116b6cf65: hlt    
  0x0000000116b6cf66: pop    %r10
  0x0000000116b6cf68: mov    %r15,%rdi
  0x0000000116b6cf6b: mov    %rbp,0x290(%r15)
  0x0000000116b6cf72: mov    %rax,0x280(%r15)
  0x0000000116b6cf79: test   $0xf,%esp
  0x0000000116b6cf7f: je     0x0000000116b6cf97
  0x0000000116b6cf85: sub    $0x8,%rsp
  0x0000000116b6cf89: callq  0x000000010c585b90
  0x0000000116b6cf8e: add    $0x8,%rsp
  0x0000000116b6cf92: jmpq   0x0000000116b6cf9c
  0x0000000116b6cf97: callq  0x000000010c585b90
  0x0000000116b6cf9c: push   %rax
  0x0000000116b6cf9d: push   %rdi
  0x0000000116b6cf9e: push   %rsi
  0x0000000116b6cf9f: push   %rdx
  0x0000000116b6cfa0: push   %rcx
  0x0000000116b6cfa1: push   %r8
  0x0000000116b6cfa3: push   %r9
  0x0000000116b6cfa5: push   %r10
  0x0000000116b6cfa7: mov    %rsp,%r10
  0x0000000116b6cfaa: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6cfae: push   %r10
  0x0000000116b6cfb0: push   %r11
  0x0000000116b6cfb2: mov    $0x109,%edi
  0x0000000116b6cfb7: movabs $0x7ff815049fd5,%r10
  0x0000000116b6cfc1: callq  *%r10
  0x0000000116b6cfc4: pop    %r11
  0x0000000116b6cfc6: pop    %rsp
  0x0000000116b6cfc7: pop    %r10
  0x0000000116b6cfc9: pop    %r9
  0x0000000116b6cfcb: pop    %r8
  0x0000000116b6cfcd: pop    %rcx
  0x0000000116b6cfce: pop    %rdx
  0x0000000116b6cfcf: pop    %rsi
  0x0000000116b6cfd0: pop    %rdi
  0x0000000116b6cfd1: cmp    %rax,%r15
  0x0000000116b6cfd4: je     0x0000000116b6d051
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6cfda: mov    %rsp,-0x28(%rsp)
  0x0000000116b6cfdf: sub    $0x80,%rsp
  0x0000000116b6cfe6: mov    %rax,0x78(%rsp)
  0x0000000116b6cfeb: mov    %rcx,0x70(%rsp)
  0x0000000116b6cff0: mov    %rdx,0x68(%rsp)
  0x0000000116b6cff5: mov    %rbx,0x60(%rsp)
  0x0000000116b6cffa: mov    %rbp,0x50(%rsp)
  0x0000000116b6cfff: mov    %rsi,0x48(%rsp)
  0x0000000116b6d004: mov    %rdi,0x40(%rsp)
  0x0000000116b6d009: mov    %r8,0x38(%rsp)
  0x0000000116b6d00e: mov    %r9,0x30(%rsp)
  0x0000000116b6d013: mov    %r10,0x28(%rsp)
  0x0000000116b6d018: mov    %r11,0x20(%rsp)
  0x0000000116b6d01d: mov    %r12,0x18(%rsp)
  0x0000000116b6d022: mov    %r13,0x10(%rsp)
  0x0000000116b6d027: mov    %r14,0x8(%rsp)
  0x0000000116b6d02c: mov    %r15,(%rsp)
  0x0000000116b6d030: movabs $0x10cc6405e,%rdi
  0x0000000116b6d03a: movabs $0x116b6cfda,%rsi
  0x0000000116b6d044: mov    %rsp,%rdx
  0x0000000116b6d047: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d04b: callq  0x000000010c7dd830
  0x0000000116b6d050: hlt    
  0x0000000116b6d051: pop    %rax
  0x0000000116b6d052: movabs $0x0,%r10
  0x0000000116b6d05c: mov    %r10,0x280(%r15)
  0x0000000116b6d063: movabs $0x0,%r10
  0x0000000116b6d06d: mov    %r10,0x290(%r15)
  0x0000000116b6d074: movabs $0x0,%r10
  0x0000000116b6d07e: mov    %r10,0x288(%r15)
  0x0000000116b6d085: cmpq   $0x0,0x8(%r15)
  0x0000000116b6d08d: je     0x0000000116b6d098
  0x0000000116b6d093: jmpq   0x0000000116b30420
  0x0000000116b6d098: mov    0x2e0(%r15),%rax
  0x0000000116b6d09f: movabs $0x0,%r10
  0x0000000116b6d0a9: mov    %r10,0x2e0(%r15)
  0x0000000116b6d0b0: mov    -0x38(%rbp),%r13
  0x0000000116b6d0b4: mov    -0x30(%rbp),%r14
  0x0000000116b6d0b8: retq   
  0x0000000116b6d0b9: movzbl 0x3(%r13),%ebx
  0x0000000116b6d0be: add    $0x3,%r13
  0x0000000116b6d0c2: movabs $0x10ce3ae80,%r10
  0x0000000116b6d0cc: jmpq   *(%r10,%rbx,8)
  0x0000000116b6d0d0: int3   
  0x0000000116b6d0d1: int3   
  0x0000000116b6d0d2: int3   
  0x0000000116b6d0d3: int3   
  0x0000000116b6d0d4: int3   
  0x0000000116b6d0d5: int3   
  0x0000000116b6d0d6: int3   
  0x0000000116b6d0d7: int3   
  0x0000000116b6d0d8: int3   
  0x0000000116b6d0d9: int3   
  0x0000000116b6d0da: int3   
  0x0000000116b6d0db: int3   
  0x0000000116b6d0dc: int3   
  0x0000000116b6d0dd: int3   
  0x0000000116b6d0de: int3   
  0x0000000116b6d0df: int3   

----------------------------------------------------------------------
newarray  188 newarray  [0x0000000116b6d120, 0x0000000116b6d3c0]  672 bytes

  0x0000000116b6d120: mov    (%rsp),%eax
  0x0000000116b6d123: add    $0x8,%rsp
  0x0000000116b6d127: movzbl 0x1(%r13),%esi
  0x0000000116b6d12c: mov    %eax,%edx
  0x0000000116b6d12e: callq  0x0000000116b6d138
  0x0000000116b6d133: jmpq   0x0000000116b6d39f
  0x0000000116b6d138: lea    0x8(%rsp),%rax
  0x0000000116b6d13d: mov    %r13,-0x38(%rbp)
  0x0000000116b6d141: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6d149: je     0x0000000116b6d1c6
  0x0000000116b6d14f: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d154: sub    $0x80,%rsp
  0x0000000116b6d15b: mov    %rax,0x78(%rsp)
  0x0000000116b6d160: mov    %rcx,0x70(%rsp)
  0x0000000116b6d165: mov    %rdx,0x68(%rsp)
  0x0000000116b6d16a: mov    %rbx,0x60(%rsp)
  0x0000000116b6d16f: mov    %rbp,0x50(%rsp)
  0x0000000116b6d174: mov    %rsi,0x48(%rsp)
  0x0000000116b6d179: mov    %rdi,0x40(%rsp)
  0x0000000116b6d17e: mov    %r8,0x38(%rsp)
  0x0000000116b6d183: mov    %r9,0x30(%rsp)
  0x0000000116b6d188: mov    %r10,0x28(%rsp)
  0x0000000116b6d18d: mov    %r11,0x20(%rsp)
  0x0000000116b6d192: mov    %r12,0x18(%rsp)
  0x0000000116b6d197: mov    %r13,0x10(%rsp)
  0x0000000116b6d19c: mov    %r14,0x8(%rsp)
  0x0000000116b6d1a1: mov    %r15,(%rsp)
  0x0000000116b6d1a5: movabs $0x10cc2363b,%rdi
  0x0000000116b6d1af: movabs $0x116b6d14f,%rsi
  0x0000000116b6d1b9: mov    %rsp,%rdx
  0x0000000116b6d1bc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d1c0: callq  0x000000010c7dd830
  0x0000000116b6d1c5: hlt    
  0x0000000116b6d1c6: push   %r10
  0x0000000116b6d1c8: cmp    -0x9d2691f(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6d1cf: je     0x0000000116b6d24c
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6d1d5: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d1da: sub    $0x80,%rsp
  0x0000000116b6d1e1: mov    %rax,0x78(%rsp)
  0x0000000116b6d1e6: mov    %rcx,0x70(%rsp)
  0x0000000116b6d1eb: mov    %rdx,0x68(%rsp)
  0x0000000116b6d1f0: mov    %rbx,0x60(%rsp)
  0x0000000116b6d1f5: mov    %rbp,0x50(%rsp)
  0x0000000116b6d1fa: mov    %rsi,0x48(%rsp)
  0x0000000116b6d1ff: mov    %rdi,0x40(%rsp)
  0x0000000116b6d204: mov    %r8,0x38(%rsp)
  0x0000000116b6d209: mov    %r9,0x30(%rsp)
  0x0000000116b6d20e: mov    %r10,0x28(%rsp)
  0x0000000116b6d213: mov    %r11,0x20(%rsp)
  0x0000000116b6d218: mov    %r12,0x18(%rsp)
  0x0000000116b6d21d: mov    %r13,0x10(%rsp)
  0x0000000116b6d222: mov    %r14,0x8(%rsp)
  0x0000000116b6d227: mov    %r15,(%rsp)
  0x0000000116b6d22b: movabs $0x10cc63f17,%rdi
  0x0000000116b6d235: movabs $0x116b6d1d5,%rsi
  0x0000000116b6d23f: mov    %rsp,%rdx
  0x0000000116b6d242: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d246: callq  0x000000010c7dd830
  0x0000000116b6d24b: hlt    
  0x0000000116b6d24c: pop    %r10
  0x0000000116b6d24e: mov    %r15,%rdi
  0x0000000116b6d251: mov    %rbp,0x290(%r15)
  0x0000000116b6d258: mov    %rax,0x280(%r15)
  0x0000000116b6d25f: test   $0xf,%esp
  0x0000000116b6d265: je     0x0000000116b6d27d
  0x0000000116b6d26b: sub    $0x8,%rsp
  0x0000000116b6d26f: callq  0x000000010c585e00
  0x0000000116b6d274: add    $0x8,%rsp
  0x0000000116b6d278: jmpq   0x0000000116b6d282
  0x0000000116b6d27d: callq  0x000000010c585e00
  0x0000000116b6d282: push   %rax
  0x0000000116b6d283: push   %rdi
  0x0000000116b6d284: push   %rsi
  0x0000000116b6d285: push   %rdx
  0x0000000116b6d286: push   %rcx
  0x0000000116b6d287: push   %r8
  0x0000000116b6d289: push   %r9
  0x0000000116b6d28b: push   %r10
  0x0000000116b6d28d: mov    %rsp,%r10
  0x0000000116b6d290: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d294: push   %r10
  0x0000000116b6d296: push   %r11
  0x0000000116b6d298: mov    $0x109,%edi
  0x0000000116b6d29d: movabs $0x7ff815049fd5,%r10
  0x0000000116b6d2a7: callq  *%r10
  0x0000000116b6d2aa: pop    %r11
  0x0000000116b6d2ac: pop    %rsp
  0x0000000116b6d2ad: pop    %r10
  0x0000000116b6d2af: pop    %r9
  0x0000000116b6d2b1: pop    %r8
  0x0000000116b6d2b3: pop    %rcx
  0x0000000116b6d2b4: pop    %rdx
  0x0000000116b6d2b5: pop    %rsi
  0x0000000116b6d2b6: pop    %rdi
  0x0000000116b6d2b7: cmp    %rax,%r15
  0x0000000116b6d2ba: je     0x0000000116b6d337
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6d2c0: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d2c5: sub    $0x80,%rsp
  0x0000000116b6d2cc: mov    %rax,0x78(%rsp)
  0x0000000116b6d2d1: mov    %rcx,0x70(%rsp)
  0x0000000116b6d2d6: mov    %rdx,0x68(%rsp)
  0x0000000116b6d2db: mov    %rbx,0x60(%rsp)
  0x0000000116b6d2e0: mov    %rbp,0x50(%rsp)
  0x0000000116b6d2e5: mov    %rsi,0x48(%rsp)
  0x0000000116b6d2ea: mov    %rdi,0x40(%rsp)
  0x0000000116b6d2ef: mov    %r8,0x38(%rsp)
  0x0000000116b6d2f4: mov    %r9,0x30(%rsp)
  0x0000000116b6d2f9: mov    %r10,0x28(%rsp)
  0x0000000116b6d2fe: mov    %r11,0x20(%rsp)
  0x0000000116b6d303: mov    %r12,0x18(%rsp)
  0x0000000116b6d308: mov    %r13,0x10(%rsp)
  0x0000000116b6d30d: mov    %r14,0x8(%rsp)
  0x0000000116b6d312: mov    %r15,(%rsp)
  0x0000000116b6d316: movabs $0x10cc6405e,%rdi
  0x0000000116b6d320: movabs $0x116b6d2c0,%rsi
  0x0000000116b6d32a: mov    %rsp,%rdx
  0x0000000116b6d32d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d331: callq  0x000000010c7dd830
  0x0000000116b6d336: hlt    
  0x0000000116b6d337: pop    %rax
  0x0000000116b6d338: movabs $0x0,%r10
  0x0000000116b6d342: mov    %r10,0x280(%r15)
  0x0000000116b6d349: movabs $0x0,%r10
  0x0000000116b6d353: mov    %r10,0x290(%r15)
  0x0000000116b6d35a: movabs $0x0,%r10
  0x0000000116b6d364: mov    %r10,0x288(%r15)
  0x0000000116b6d36b: cmpq   $0x0,0x8(%r15)
  0x0000000116b6d373: je     0x0000000116b6d37e
  0x0000000116b6d379: jmpq   0x0000000116b30420
  0x0000000116b6d37e: mov    0x2e0(%r15),%rax
  0x0000000116b6d385: movabs $0x0,%r10
  0x0000000116b6d38f: mov    %r10,0x2e0(%r15)
  0x0000000116b6d396: mov    -0x38(%rbp),%r13
  0x0000000116b6d39a: mov    -0x30(%rbp),%r14
  0x0000000116b6d39e: retq   
  0x0000000116b6d39f: movzbl 0x2(%r13),%ebx
  0x0000000116b6d3a4: add    $0x2,%r13
  0x0000000116b6d3a8: movabs $0x10ce3ae80,%r10
  0x0000000116b6d3b2: jmpq   *(%r10,%rbx,8)
  0x0000000116b6d3b6: nop
  0x0000000116b6d3b7: nop
  0x0000000116b6d3b8: int3   
  0x0000000116b6d3b9: int3   
  0x0000000116b6d3ba: int3   
  0x0000000116b6d3bb: int3   
  0x0000000116b6d3bc: int3   
  0x0000000116b6d3bd: int3   
  0x0000000116b6d3be: int3   
  0x0000000116b6d3bf: int3   

----------------------------------------------------------------------
anewarray  189 anewarray  [0x0000000116b6d400, 0x0000000116b6d6c0]  704 bytes

  0x0000000116b6d400: mov    (%rsp),%eax
  0x0000000116b6d403: add    $0x8,%rsp
  0x0000000116b6d407: movzwl 0x1(%r13),%edx
  0x0000000116b6d40c: bswap  %edx
  0x0000000116b6d40e: shr    $0x10,%edx
  0x0000000116b6d411: mov    -0x18(%rbp),%rsi
  0x0000000116b6d415: mov    0x10(%rsi),%rsi
  0x0000000116b6d419: mov    0x8(%rsi),%rsi
  0x0000000116b6d41d: mov    %eax,%ecx
  0x0000000116b6d41f: callq  0x0000000116b6d429
  0x0000000116b6d424: jmpq   0x0000000116b6d690
  0x0000000116b6d429: lea    0x8(%rsp),%rax
  0x0000000116b6d42e: mov    %r13,-0x38(%rbp)
  0x0000000116b6d432: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6d43a: je     0x0000000116b6d4b7
  0x0000000116b6d440: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d445: sub    $0x80,%rsp
  0x0000000116b6d44c: mov    %rax,0x78(%rsp)
  0x0000000116b6d451: mov    %rcx,0x70(%rsp)
  0x0000000116b6d456: mov    %rdx,0x68(%rsp)
  0x0000000116b6d45b: mov    %rbx,0x60(%rsp)
  0x0000000116b6d460: mov    %rbp,0x50(%rsp)
  0x0000000116b6d465: mov    %rsi,0x48(%rsp)
  0x0000000116b6d46a: mov    %rdi,0x40(%rsp)
  0x0000000116b6d46f: mov    %r8,0x38(%rsp)
  0x0000000116b6d474: mov    %r9,0x30(%rsp)
  0x0000000116b6d479: mov    %r10,0x28(%rsp)
  0x0000000116b6d47e: mov    %r11,0x20(%rsp)
  0x0000000116b6d483: mov    %r12,0x18(%rsp)
  0x0000000116b6d488: mov    %r13,0x10(%rsp)
  0x0000000116b6d48d: mov    %r14,0x8(%rsp)
  0x0000000116b6d492: mov    %r15,(%rsp)
  0x0000000116b6d496: movabs $0x10cc2363b,%rdi
  0x0000000116b6d4a0: movabs $0x116b6d440,%rsi
  0x0000000116b6d4aa: mov    %rsp,%rdx
  0x0000000116b6d4ad: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d4b1: callq  0x000000010c7dd830
  0x0000000116b6d4b6: hlt    
  0x0000000116b6d4b7: push   %r10
  0x0000000116b6d4b9: cmp    -0x9d26c10(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6d4c0: je     0x0000000116b6d53d
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6d4c6: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d4cb: sub    $0x80,%rsp
  0x0000000116b6d4d2: mov    %rax,0x78(%rsp)
  0x0000000116b6d4d7: mov    %rcx,0x70(%rsp)
  0x0000000116b6d4dc: mov    %rdx,0x68(%rsp)
  0x0000000116b6d4e1: mov    %rbx,0x60(%rsp)
  0x0000000116b6d4e6: mov    %rbp,0x50(%rsp)
  0x0000000116b6d4eb: mov    %rsi,0x48(%rsp)
  0x0000000116b6d4f0: mov    %rdi,0x40(%rsp)
  0x0000000116b6d4f5: mov    %r8,0x38(%rsp)
  0x0000000116b6d4fa: mov    %r9,0x30(%rsp)
  0x0000000116b6d4ff: mov    %r10,0x28(%rsp)
  0x0000000116b6d504: mov    %r11,0x20(%rsp)
  0x0000000116b6d509: mov    %r12,0x18(%rsp)
  0x0000000116b6d50e: mov    %r13,0x10(%rsp)
  0x0000000116b6d513: mov    %r14,0x8(%rsp)
  0x0000000116b6d518: mov    %r15,(%rsp)
  0x0000000116b6d51c: movabs $0x10cc63f17,%rdi
  0x0000000116b6d526: movabs $0x116b6d4c6,%rsi
  0x0000000116b6d530: mov    %rsp,%rdx
  0x0000000116b6d533: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d537: callq  0x000000010c7dd830
  0x0000000116b6d53c: hlt    
  0x0000000116b6d53d: pop    %r10
  0x0000000116b6d53f: mov    %r15,%rdi
  0x0000000116b6d542: mov    %rbp,0x290(%r15)
  0x0000000116b6d549: mov    %rax,0x280(%r15)
  0x0000000116b6d550: test   $0xf,%esp
  0x0000000116b6d556: je     0x0000000116b6d56e
  0x0000000116b6d55c: sub    $0x8,%rsp
  0x0000000116b6d560: callq  0x000000010c585fa0
  0x0000000116b6d565: add    $0x8,%rsp
  0x0000000116b6d569: jmpq   0x0000000116b6d573
  0x0000000116b6d56e: callq  0x000000010c585fa0
  0x0000000116b6d573: push   %rax
  0x0000000116b6d574: push   %rdi
  0x0000000116b6d575: push   %rsi
  0x0000000116b6d576: push   %rdx
  0x0000000116b6d577: push   %rcx
  0x0000000116b6d578: push   %r8
  0x0000000116b6d57a: push   %r9
  0x0000000116b6d57c: push   %r10
  0x0000000116b6d57e: mov    %rsp,%r10
  0x0000000116b6d581: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d585: push   %r10
  0x0000000116b6d587: push   %r11
  0x0000000116b6d589: mov    $0x109,%edi
  0x0000000116b6d58e: movabs $0x7ff815049fd5,%r10
  0x0000000116b6d598: callq  *%r10
  0x0000000116b6d59b: pop    %r11
  0x0000000116b6d59d: pop    %rsp
  0x0000000116b6d59e: pop    %r10
  0x0000000116b6d5a0: pop    %r9
  0x0000000116b6d5a2: pop    %r8
  0x0000000116b6d5a4: pop    %rcx
  0x0000000116b6d5a5: pop    %rdx
  0x0000000116b6d5a6: pop    %rsi
  0x0000000116b6d5a7: pop    %rdi
  0x0000000116b6d5a8: cmp    %rax,%r15
  0x0000000116b6d5ab: je     0x0000000116b6d628
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6d5b1: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d5b6: sub    $0x80,%rsp
  0x0000000116b6d5bd: mov    %rax,0x78(%rsp)
  0x0000000116b6d5c2: mov    %rcx,0x70(%rsp)
  0x0000000116b6d5c7: mov    %rdx,0x68(%rsp)
  0x0000000116b6d5cc: mov    %rbx,0x60(%rsp)
  0x0000000116b6d5d1: mov    %rbp,0x50(%rsp)
  0x0000000116b6d5d6: mov    %rsi,0x48(%rsp)
  0x0000000116b6d5db: mov    %rdi,0x40(%rsp)
  0x0000000116b6d5e0: mov    %r8,0x38(%rsp)
  0x0000000116b6d5e5: mov    %r9,0x30(%rsp)
  0x0000000116b6d5ea: mov    %r10,0x28(%rsp)
  0x0000000116b6d5ef: mov    %r11,0x20(%rsp)
  0x0000000116b6d5f4: mov    %r12,0x18(%rsp)
  0x0000000116b6d5f9: mov    %r13,0x10(%rsp)
  0x0000000116b6d5fe: mov    %r14,0x8(%rsp)
  0x0000000116b6d603: mov    %r15,(%rsp)
  0x0000000116b6d607: movabs $0x10cc6405e,%rdi
  0x0000000116b6d611: movabs $0x116b6d5b1,%rsi
  0x0000000116b6d61b: mov    %rsp,%rdx
  0x0000000116b6d61e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d622: callq  0x000000010c7dd830
  0x0000000116b6d627: hlt    
  0x0000000116b6d628: pop    %rax
  0x0000000116b6d629: movabs $0x0,%r10
  0x0000000116b6d633: mov    %r10,0x280(%r15)
  0x0000000116b6d63a: movabs $0x0,%r10
  0x0000000116b6d644: mov    %r10,0x290(%r15)
  0x0000000116b6d64b: movabs $0x0,%r10
  0x0000000116b6d655: mov    %r10,0x288(%r15)
  0x0000000116b6d65c: cmpq   $0x0,0x8(%r15)
  0x0000000116b6d664: je     0x0000000116b6d66f
  0x0000000116b6d66a: jmpq   0x0000000116b30420
  0x0000000116b6d66f: mov    0x2e0(%r15),%rax
  0x0000000116b6d676: movabs $0x0,%r10
  0x0000000116b6d680: mov    %r10,0x2e0(%r15)
  0x0000000116b6d687: mov    -0x38(%rbp),%r13
  0x0000000116b6d68b: mov    -0x30(%rbp),%r14
  0x0000000116b6d68f: retq   
  0x0000000116b6d690: movzbl 0x3(%r13),%ebx
  0x0000000116b6d695: add    $0x3,%r13
  0x0000000116b6d699: movabs $0x10ce3ae80,%r10
  0x0000000116b6d6a3: jmpq   *(%r10,%rbx,8)
  0x0000000116b6d6a7: nop
  0x0000000116b6d6a8: int3   
  0x0000000116b6d6a9: int3   
  0x0000000116b6d6aa: int3   
  0x0000000116b6d6ab: int3   
  0x0000000116b6d6ac: int3   
  0x0000000116b6d6ad: int3   
  0x0000000116b6d6ae: int3   
  0x0000000116b6d6af: int3   
  0x0000000116b6d6b0: int3   
  0x0000000116b6d6b1: int3   
  0x0000000116b6d6b2: int3   
  0x0000000116b6d6b3: int3   
  0x0000000116b6d6b4: int3   
  0x0000000116b6d6b5: int3   
  0x0000000116b6d6b6: int3   
  0x0000000116b6d6b7: int3   
  0x0000000116b6d6b8: int3   
  0x0000000116b6d6b9: int3   
  0x0000000116b6d6ba: int3   
  0x0000000116b6d6bb: int3   
  0x0000000116b6d6bc: int3   
  0x0000000116b6d6bd: int3   
  0x0000000116b6d6be: int3   
  0x0000000116b6d6bf: int3   

----------------------------------------------------------------------
arraylength  190 arraylength  [0x0000000116b6d700, 0x0000000116b6d720]  32 bytes

  0x0000000116b6d700: pop    %rax
  0x0000000116b6d701: mov    0xc(%rax),%eax
  0x0000000116b6d704: movzbl 0x1(%r13),%ebx
  0x0000000116b6d709: inc    %r13
  0x0000000116b6d70c: movabs $0x10ce38e80,%r10
  0x0000000116b6d716: jmpq   *(%r10,%rbx,8)
  0x0000000116b6d71a: nop
  0x0000000116b6d71b: nop
  0x0000000116b6d71c: nop
  0x0000000116b6d71d: nop
  0x0000000116b6d71e: nop
  0x0000000116b6d71f: nop

----------------------------------------------------------------------
athrow  191 athrow  [0x0000000116b6d760, 0x0000000116b6d7e0]  128 bytes

  0x0000000116b6d760: pop    %rax
  0x0000000116b6d761: cmp    (%rax),%rax
  0x0000000116b6d764: jmpq   0x0000000116b50993
  0x0000000116b6d769: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d76e: sub    $0x80,%rsp
  0x0000000116b6d775: mov    %rax,0x78(%rsp)
  0x0000000116b6d77a: mov    %rcx,0x70(%rsp)
  0x0000000116b6d77f: mov    %rdx,0x68(%rsp)
  0x0000000116b6d784: mov    %rbx,0x60(%rsp)
  0x0000000116b6d789: mov    %rbp,0x50(%rsp)
  0x0000000116b6d78e: mov    %rsi,0x48(%rsp)
  0x0000000116b6d793: mov    %rdi,0x40(%rsp)
  0x0000000116b6d798: mov    %r8,0x38(%rsp)
  0x0000000116b6d79d: mov    %r9,0x30(%rsp)
  0x0000000116b6d7a2: mov    %r10,0x28(%rsp)
  0x0000000116b6d7a7: mov    %r11,0x20(%rsp)
  0x0000000116b6d7ac: mov    %r12,0x18(%rsp)
  0x0000000116b6d7b1: mov    %r13,0x10(%rsp)
  0x0000000116b6d7b6: mov    %r14,0x8(%rsp)
  0x0000000116b6d7bb: mov    %r15,(%rsp)
  0x0000000116b6d7bf: movabs $0x10cb763be,%rdi
  0x0000000116b6d7c9: movabs $0x116b6d769,%rsi
  0x0000000116b6d7d3: mov    %rsp,%rdx
  0x0000000116b6d7d6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d7da: callq  0x000000010c7dd830
  0x0000000116b6d7df: hlt    

----------------------------------------------------------------------
checkcast  192 checkcast  [0x0000000116b6d820, 0x0000000116b6db40]  800 bytes

  0x0000000116b6d820: pop    %rax
  0x0000000116b6d821: test   %rax,%rax
  0x0000000116b6d824: je     0x0000000116b6db29
  0x0000000116b6d82a: mov    -0x18(%rbp),%rcx
  0x0000000116b6d82e: mov    0x10(%rcx),%rcx
  0x0000000116b6d832: mov    0x8(%rcx),%rcx
  0x0000000116b6d836: mov    0x10(%rcx),%rdx
  0x0000000116b6d83a: movzwl 0x1(%r13),%ebx
  0x0000000116b6d83f: bswap  %ebx
  0x0000000116b6d841: shr    $0x10,%ebx
  0x0000000116b6d844: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x0000000116b6d849: je     0x0000000116b6dac4
  0x0000000116b6d84f: push   %rax
  0x0000000116b6d850: callq  0x0000000116b6d85a
  0x0000000116b6d855: jmpq   0x0000000116b6daa9
  0x0000000116b6d85a: lea    0x8(%rsp),%rax
  0x0000000116b6d85f: mov    %r13,-0x38(%rbp)
  0x0000000116b6d863: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6d86b: je     0x0000000116b6d8e8
  0x0000000116b6d871: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d876: sub    $0x80,%rsp
  0x0000000116b6d87d: mov    %rax,0x78(%rsp)
  0x0000000116b6d882: mov    %rcx,0x70(%rsp)
  0x0000000116b6d887: mov    %rdx,0x68(%rsp)
  0x0000000116b6d88c: mov    %rbx,0x60(%rsp)
  0x0000000116b6d891: mov    %rbp,0x50(%rsp)
  0x0000000116b6d896: mov    %rsi,0x48(%rsp)
  0x0000000116b6d89b: mov    %rdi,0x40(%rsp)
  0x0000000116b6d8a0: mov    %r8,0x38(%rsp)
  0x0000000116b6d8a5: mov    %r9,0x30(%rsp)
  0x0000000116b6d8aa: mov    %r10,0x28(%rsp)
  0x0000000116b6d8af: mov    %r11,0x20(%rsp)
  0x0000000116b6d8b4: mov    %r12,0x18(%rsp)
  0x0000000116b6d8b9: mov    %r13,0x10(%rsp)
  0x0000000116b6d8be: mov    %r14,0x8(%rsp)
  0x0000000116b6d8c3: mov    %r15,(%rsp)
  0x0000000116b6d8c7: movabs $0x10cc2363b,%rdi
  0x0000000116b6d8d1: movabs $0x116b6d871,%rsi
  0x0000000116b6d8db: mov    %rsp,%rdx
  0x0000000116b6d8de: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d8e2: callq  0x000000010c7dd830
  0x0000000116b6d8e7: hlt    
  0x0000000116b6d8e8: push   %r10
  0x0000000116b6d8ea: cmp    -0x9d27041(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6d8f1: je     0x0000000116b6d96e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6d8f7: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d8fc: sub    $0x80,%rsp
  0x0000000116b6d903: mov    %rax,0x78(%rsp)
  0x0000000116b6d908: mov    %rcx,0x70(%rsp)
  0x0000000116b6d90d: mov    %rdx,0x68(%rsp)
  0x0000000116b6d912: mov    %rbx,0x60(%rsp)
  0x0000000116b6d917: mov    %rbp,0x50(%rsp)
  0x0000000116b6d91c: mov    %rsi,0x48(%rsp)
  0x0000000116b6d921: mov    %rdi,0x40(%rsp)
  0x0000000116b6d926: mov    %r8,0x38(%rsp)
  0x0000000116b6d92b: mov    %r9,0x30(%rsp)
  0x0000000116b6d930: mov    %r10,0x28(%rsp)
  0x0000000116b6d935: mov    %r11,0x20(%rsp)
  0x0000000116b6d93a: mov    %r12,0x18(%rsp)
  0x0000000116b6d93f: mov    %r13,0x10(%rsp)
  0x0000000116b6d944: mov    %r14,0x8(%rsp)
  0x0000000116b6d949: mov    %r15,(%rsp)
  0x0000000116b6d94d: movabs $0x10cc63f17,%rdi
  0x0000000116b6d957: movabs $0x116b6d8f7,%rsi
  0x0000000116b6d961: mov    %rsp,%rdx
  0x0000000116b6d964: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d968: callq  0x000000010c7dd830
  0x0000000116b6d96d: hlt    
  0x0000000116b6d96e: pop    %r10
  0x0000000116b6d970: mov    %r15,%rdi
  0x0000000116b6d973: mov    %rbp,0x290(%r15)
  0x0000000116b6d97a: mov    %rax,0x280(%r15)
  0x0000000116b6d981: test   $0xf,%esp
  0x0000000116b6d987: je     0x0000000116b6d99f
  0x0000000116b6d98d: sub    $0x8,%rsp
  0x0000000116b6d991: callq  0x000000010c586760
  0x0000000116b6d996: add    $0x8,%rsp
  0x0000000116b6d99a: jmpq   0x0000000116b6d9a4
  0x0000000116b6d99f: callq  0x000000010c586760
  0x0000000116b6d9a4: push   %rax
  0x0000000116b6d9a5: push   %rdi
  0x0000000116b6d9a6: push   %rsi
  0x0000000116b6d9a7: push   %rdx
  0x0000000116b6d9a8: push   %rcx
  0x0000000116b6d9a9: push   %r8
  0x0000000116b6d9ab: push   %r9
  0x0000000116b6d9ad: push   %r10
  0x0000000116b6d9af: mov    %rsp,%r10
  0x0000000116b6d9b2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6d9b6: push   %r10
  0x0000000116b6d9b8: push   %r11
  0x0000000116b6d9ba: mov    $0x109,%edi
  0x0000000116b6d9bf: movabs $0x7ff815049fd5,%r10
  0x0000000116b6d9c9: callq  *%r10
  0x0000000116b6d9cc: pop    %r11
  0x0000000116b6d9ce: pop    %rsp
  0x0000000116b6d9cf: pop    %r10
  0x0000000116b6d9d1: pop    %r9
  0x0000000116b6d9d3: pop    %r8
  0x0000000116b6d9d5: pop    %rcx
  0x0000000116b6d9d6: pop    %rdx
  0x0000000116b6d9d7: pop    %rsi
  0x0000000116b6d9d8: pop    %rdi
  0x0000000116b6d9d9: cmp    %rax,%r15
  0x0000000116b6d9dc: je     0x0000000116b6da59
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6d9e2: mov    %rsp,-0x28(%rsp)
  0x0000000116b6d9e7: sub    $0x80,%rsp
  0x0000000116b6d9ee: mov    %rax,0x78(%rsp)
  0x0000000116b6d9f3: mov    %rcx,0x70(%rsp)
  0x0000000116b6d9f8: mov    %rdx,0x68(%rsp)
  0x0000000116b6d9fd: mov    %rbx,0x60(%rsp)
  0x0000000116b6da02: mov    %rbp,0x50(%rsp)
  0x0000000116b6da07: mov    %rsi,0x48(%rsp)
  0x0000000116b6da0c: mov    %rdi,0x40(%rsp)
  0x0000000116b6da11: mov    %r8,0x38(%rsp)
  0x0000000116b6da16: mov    %r9,0x30(%rsp)
  0x0000000116b6da1b: mov    %r10,0x28(%rsp)
  0x0000000116b6da20: mov    %r11,0x20(%rsp)
  0x0000000116b6da25: mov    %r12,0x18(%rsp)
  0x0000000116b6da2a: mov    %r13,0x10(%rsp)
  0x0000000116b6da2f: mov    %r14,0x8(%rsp)
  0x0000000116b6da34: mov    %r15,(%rsp)
  0x0000000116b6da38: movabs $0x10cc6405e,%rdi
  0x0000000116b6da42: movabs $0x116b6d9e2,%rsi
  0x0000000116b6da4c: mov    %rsp,%rdx
  0x0000000116b6da4f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6da53: callq  0x000000010c7dd830
  0x0000000116b6da58: hlt    
  0x0000000116b6da59: pop    %rax
  0x0000000116b6da5a: movabs $0x0,%r10
  0x0000000116b6da64: mov    %r10,0x280(%r15)
  0x0000000116b6da6b: movabs $0x0,%r10
  0x0000000116b6da75: mov    %r10,0x290(%r15)
  0x0000000116b6da7c: movabs $0x0,%r10
  0x0000000116b6da86: mov    %r10,0x288(%r15)
  0x0000000116b6da8d: cmpq   $0x0,0x8(%r15)
  0x0000000116b6da95: je     0x0000000116b6daa0
  0x0000000116b6da9b: jmpq   0x0000000116b30420
  0x0000000116b6daa0: mov    -0x38(%rbp),%r13
  0x0000000116b6daa4: mov    -0x30(%rbp),%r14
  0x0000000116b6daa8: retq   
  0x0000000116b6daa9: mov    0x2e8(%r15),%rax
  0x0000000116b6dab0: movabs $0x0,%r10
  0x0000000116b6daba: mov    %r10,0x2e8(%r15)
  0x0000000116b6dac1: pop    %rdx
  0x0000000116b6dac2: jmp    0x0000000116b6dacc
  0x0000000116b6dac4: mov    %rax,%rdx
  0x0000000116b6dac7: mov    0x58(%rcx,%rbx,8),%rax
  0x0000000116b6dacc: mov    0x8(%rdx),%ebx
  0x0000000116b6dacf: shl    $0x3,%rbx
  0x0000000116b6dad3: cmp    %rax,%rbx
  0x0000000116b6dad6: je     0x0000000116b6db26
  0x0000000116b6dadc: mov    0x10(%rax),%ecx
  0x0000000116b6dadf: cmp    (%rbx,%rcx,1),%rax
  0x0000000116b6dae3: je     0x0000000116b6db26
  0x0000000116b6dae9: cmp    $0x20,%ecx
  0x0000000116b6daec: jne    0x0000000116b6db20
  0x0000000116b6daf2: push   %rax
  0x0000000116b6daf3: mov    %rax,%rax
  0x0000000116b6daf6: push   %rdi
  0x0000000116b6daf7: movabs $0x10ce26960,%rcx
  0x0000000116b6db01: incl   (%rcx)
  0x0000000116b6db03: mov    0x28(%rbx),%rdi
  0x0000000116b6db07: mov    (%rdi),%ecx
  0x0000000116b6db09: add    $0x8,%rdi
  0x0000000116b6db0d: test   %rax,%rax
  0x0000000116b6db10: repnz scas %es:(%rdi),%rax
  0x0000000116b6db13: pop    %rdi
  0x0000000116b6db14: pop    %rax
  0x0000000116b6db15: jne    0x0000000116b6db20
  0x0000000116b6db17: mov    %rax,0x20(%rbx)
  0x0000000116b6db1b: jmpq   0x0000000116b6db26
  0x0000000116b6db20: push   %rdx
  0x0000000116b6db21: jmpq   0x0000000116b53015
  0x0000000116b6db26: mov    %rdx,%rax
  0x0000000116b6db29: movzbl 0x3(%r13),%ebx
  0x0000000116b6db2e: add    $0x3,%r13
  0x0000000116b6db32: movabs $0x10ce3ae80,%r10
  0x0000000116b6db3c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
instanceof  193 instanceof  [0x0000000116b6db80, 0x0000000116b6dec0]  832 bytes

  0x0000000116b6db80: pop    %rax
  0x0000000116b6db81: test   %rax,%rax
  0x0000000116b6db84: je     0x0000000116b6de8d
  0x0000000116b6db8a: mov    -0x18(%rbp),%rcx
  0x0000000116b6db8e: mov    0x10(%rcx),%rcx
  0x0000000116b6db92: mov    0x8(%rcx),%rcx
  0x0000000116b6db96: mov    0x10(%rcx),%rdx
  0x0000000116b6db9a: movzwl 0x1(%r13),%ebx
  0x0000000116b6db9f: bswap  %ebx
  0x0000000116b6dba1: shr    $0x10,%ebx
  0x0000000116b6dba4: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x0000000116b6dba9: je     0x0000000116b6de2b
  0x0000000116b6dbaf: push   %rax
  0x0000000116b6dbb0: callq  0x0000000116b6dbba
  0x0000000116b6dbb5: jmpq   0x0000000116b6de09
  0x0000000116b6dbba: lea    0x8(%rsp),%rax
  0x0000000116b6dbbf: mov    %r13,-0x38(%rbp)
  0x0000000116b6dbc3: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6dbcb: je     0x0000000116b6dc48
  0x0000000116b6dbd1: mov    %rsp,-0x28(%rsp)
  0x0000000116b6dbd6: sub    $0x80,%rsp
  0x0000000116b6dbdd: mov    %rax,0x78(%rsp)
  0x0000000116b6dbe2: mov    %rcx,0x70(%rsp)
  0x0000000116b6dbe7: mov    %rdx,0x68(%rsp)
  0x0000000116b6dbec: mov    %rbx,0x60(%rsp)
  0x0000000116b6dbf1: mov    %rbp,0x50(%rsp)
  0x0000000116b6dbf6: mov    %rsi,0x48(%rsp)
  0x0000000116b6dbfb: mov    %rdi,0x40(%rsp)
  0x0000000116b6dc00: mov    %r8,0x38(%rsp)
  0x0000000116b6dc05: mov    %r9,0x30(%rsp)
  0x0000000116b6dc0a: mov    %r10,0x28(%rsp)
  0x0000000116b6dc0f: mov    %r11,0x20(%rsp)
  0x0000000116b6dc14: mov    %r12,0x18(%rsp)
  0x0000000116b6dc19: mov    %r13,0x10(%rsp)
  0x0000000116b6dc1e: mov    %r14,0x8(%rsp)
  0x0000000116b6dc23: mov    %r15,(%rsp)
  0x0000000116b6dc27: movabs $0x10cc2363b,%rdi
  0x0000000116b6dc31: movabs $0x116b6dbd1,%rsi
  0x0000000116b6dc3b: mov    %rsp,%rdx
  0x0000000116b6dc3e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6dc42: callq  0x000000010c7dd830
  0x0000000116b6dc47: hlt    
  0x0000000116b6dc48: push   %r10
  0x0000000116b6dc4a: cmp    -0x9d273a1(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6dc51: je     0x0000000116b6dcce
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6dc57: mov    %rsp,-0x28(%rsp)
  0x0000000116b6dc5c: sub    $0x80,%rsp
  0x0000000116b6dc63: mov    %rax,0x78(%rsp)
  0x0000000116b6dc68: mov    %rcx,0x70(%rsp)
  0x0000000116b6dc6d: mov    %rdx,0x68(%rsp)
  0x0000000116b6dc72: mov    %rbx,0x60(%rsp)
  0x0000000116b6dc77: mov    %rbp,0x50(%rsp)
  0x0000000116b6dc7c: mov    %rsi,0x48(%rsp)
  0x0000000116b6dc81: mov    %rdi,0x40(%rsp)
  0x0000000116b6dc86: mov    %r8,0x38(%rsp)
  0x0000000116b6dc8b: mov    %r9,0x30(%rsp)
  0x0000000116b6dc90: mov    %r10,0x28(%rsp)
  0x0000000116b6dc95: mov    %r11,0x20(%rsp)
  0x0000000116b6dc9a: mov    %r12,0x18(%rsp)
  0x0000000116b6dc9f: mov    %r13,0x10(%rsp)
  0x0000000116b6dca4: mov    %r14,0x8(%rsp)
  0x0000000116b6dca9: mov    %r15,(%rsp)
  0x0000000116b6dcad: movabs $0x10cc63f17,%rdi
  0x0000000116b6dcb7: movabs $0x116b6dc57,%rsi
  0x0000000116b6dcc1: mov    %rsp,%rdx
  0x0000000116b6dcc4: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6dcc8: callq  0x000000010c7dd830
  0x0000000116b6dccd: hlt    
  0x0000000116b6dcce: pop    %r10
  0x0000000116b6dcd0: mov    %r15,%rdi
  0x0000000116b6dcd3: mov    %rbp,0x290(%r15)
  0x0000000116b6dcda: mov    %rax,0x280(%r15)
  0x0000000116b6dce1: test   $0xf,%esp
  0x0000000116b6dce7: je     0x0000000116b6dcff
  0x0000000116b6dced: sub    $0x8,%rsp
  0x0000000116b6dcf1: callq  0x000000010c586760
  0x0000000116b6dcf6: add    $0x8,%rsp
  0x0000000116b6dcfa: jmpq   0x0000000116b6dd04
  0x0000000116b6dcff: callq  0x000000010c586760
  0x0000000116b6dd04: push   %rax
  0x0000000116b6dd05: push   %rdi
  0x0000000116b6dd06: push   %rsi
  0x0000000116b6dd07: push   %rdx
  0x0000000116b6dd08: push   %rcx
  0x0000000116b6dd09: push   %r8
  0x0000000116b6dd0b: push   %r9
  0x0000000116b6dd0d: push   %r10
  0x0000000116b6dd0f: mov    %rsp,%r10
  0x0000000116b6dd12: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6dd16: push   %r10
  0x0000000116b6dd18: push   %r11
  0x0000000116b6dd1a: mov    $0x109,%edi
  0x0000000116b6dd1f: movabs $0x7ff815049fd5,%r10
  0x0000000116b6dd29: callq  *%r10
  0x0000000116b6dd2c: pop    %r11
  0x0000000116b6dd2e: pop    %rsp
  0x0000000116b6dd2f: pop    %r10
  0x0000000116b6dd31: pop    %r9
  0x0000000116b6dd33: pop    %r8
  0x0000000116b6dd35: pop    %rcx
  0x0000000116b6dd36: pop    %rdx
  0x0000000116b6dd37: pop    %rsi
  0x0000000116b6dd38: pop    %rdi
  0x0000000116b6dd39: cmp    %rax,%r15
  0x0000000116b6dd3c: je     0x0000000116b6ddb9
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6dd42: mov    %rsp,-0x28(%rsp)
  0x0000000116b6dd47: sub    $0x80,%rsp
  0x0000000116b6dd4e: mov    %rax,0x78(%rsp)
  0x0000000116b6dd53: mov    %rcx,0x70(%rsp)
  0x0000000116b6dd58: mov    %rdx,0x68(%rsp)
  0x0000000116b6dd5d: mov    %rbx,0x60(%rsp)
  0x0000000116b6dd62: mov    %rbp,0x50(%rsp)
  0x0000000116b6dd67: mov    %rsi,0x48(%rsp)
  0x0000000116b6dd6c: mov    %rdi,0x40(%rsp)
  0x0000000116b6dd71: mov    %r8,0x38(%rsp)
  0x0000000116b6dd76: mov    %r9,0x30(%rsp)
  0x0000000116b6dd7b: mov    %r10,0x28(%rsp)
  0x0000000116b6dd80: mov    %r11,0x20(%rsp)
  0x0000000116b6dd85: mov    %r12,0x18(%rsp)
  0x0000000116b6dd8a: mov    %r13,0x10(%rsp)
  0x0000000116b6dd8f: mov    %r14,0x8(%rsp)
  0x0000000116b6dd94: mov    %r15,(%rsp)
  0x0000000116b6dd98: movabs $0x10cc6405e,%rdi
  0x0000000116b6dda2: movabs $0x116b6dd42,%rsi
  0x0000000116b6ddac: mov    %rsp,%rdx
  0x0000000116b6ddaf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ddb3: callq  0x000000010c7dd830
  0x0000000116b6ddb8: hlt    
  0x0000000116b6ddb9: pop    %rax
  0x0000000116b6ddba: movabs $0x0,%r10
  0x0000000116b6ddc4: mov    %r10,0x280(%r15)
  0x0000000116b6ddcb: movabs $0x0,%r10
  0x0000000116b6ddd5: mov    %r10,0x290(%r15)
  0x0000000116b6dddc: movabs $0x0,%r10
  0x0000000116b6dde6: mov    %r10,0x288(%r15)
  0x0000000116b6dded: cmpq   $0x0,0x8(%r15)
  0x0000000116b6ddf5: je     0x0000000116b6de00
  0x0000000116b6ddfb: jmpq   0x0000000116b30420
  0x0000000116b6de00: mov    -0x38(%rbp),%r13
  0x0000000116b6de04: mov    -0x30(%rbp),%r14
  0x0000000116b6de08: retq   
  0x0000000116b6de09: mov    0x2e8(%r15),%rax
  0x0000000116b6de10: movabs $0x0,%r10
  0x0000000116b6de1a: mov    %r10,0x2e8(%r15)
  0x0000000116b6de21: pop    %rdx
  0x0000000116b6de22: mov    0x8(%rdx),%edx
  0x0000000116b6de25: shl    $0x3,%rdx
  0x0000000116b6de29: jmp    0x0000000116b6de37
  0x0000000116b6de2b: mov    0x8(%rax),%edx
  0x0000000116b6de2e: shl    $0x3,%rdx
  0x0000000116b6de32: mov    0x58(%rcx,%rbx,8),%rax
  0x0000000116b6de37: cmp    %rax,%rdx
  0x0000000116b6de3a: je     0x0000000116b6de88
  0x0000000116b6de40: mov    0x10(%rax),%ecx
  0x0000000116b6de43: cmp    (%rdx,%rcx,1),%rax
  0x0000000116b6de47: je     0x0000000116b6de88
  0x0000000116b6de4d: cmp    $0x20,%ecx
  0x0000000116b6de50: jne    0x0000000116b6de84
  0x0000000116b6de56: push   %rax
  0x0000000116b6de57: mov    %rax,%rax
  0x0000000116b6de5a: push   %rdi
  0x0000000116b6de5b: movabs $0x10ce26960,%rcx
  0x0000000116b6de65: incl   (%rcx)
  0x0000000116b6de67: mov    0x28(%rdx),%rdi
  0x0000000116b6de6b: mov    (%rdi),%ecx
  0x0000000116b6de6d: add    $0x8,%rdi
  0x0000000116b6de71: test   %rax,%rax
  0x0000000116b6de74: repnz scas %es:(%rdi),%rax
  0x0000000116b6de77: pop    %rdi
  0x0000000116b6de78: pop    %rax
  0x0000000116b6de79: jne    0x0000000116b6de84
  0x0000000116b6de7b: mov    %rax,0x20(%rdx)
  0x0000000116b6de7f: jmpq   0x0000000116b6de88
  0x0000000116b6de84: xor    %eax,%eax
  0x0000000116b6de86: jmp    0x0000000116b6de8d
  0x0000000116b6de88: mov    $0x1,%eax
  0x0000000116b6de8d: movzbl 0x3(%r13),%ebx
  0x0000000116b6de92: add    $0x3,%r13
  0x0000000116b6de96: movabs $0x10ce38e80,%r10
  0x0000000116b6dea0: jmpq   *(%r10,%rbx,8)
  0x0000000116b6dea4: nop
  0x0000000116b6dea5: nop
  0x0000000116b6dea6: nop
  0x0000000116b6dea7: nop
  0x0000000116b6dea8: int3   
  0x0000000116b6dea9: int3   
  0x0000000116b6deaa: int3   
  0x0000000116b6deab: int3   
  0x0000000116b6deac: int3   
  0x0000000116b6dead: int3   
  0x0000000116b6deae: int3   
  0x0000000116b6deaf: int3   
  0x0000000116b6deb0: int3   
  0x0000000116b6deb1: int3   
  0x0000000116b6deb2: int3   
  0x0000000116b6deb3: int3   
  0x0000000116b6deb4: int3   
  0x0000000116b6deb5: int3   
  0x0000000116b6deb6: int3   
  0x0000000116b6deb7: int3   
  0x0000000116b6deb8: int3   
  0x0000000116b6deb9: int3   
  0x0000000116b6deba: int3   
  0x0000000116b6debb: int3   
  0x0000000116b6debc: int3   
  0x0000000116b6debd: int3   
  0x0000000116b6debe: int3   
  0x0000000116b6debf: int3   

----------------------------------------------------------------------
monitorenter  194 monitorenter  [0x0000000116b6df00, 0x0000000116b6e320]  1056 bytes

  0x0000000116b6df00: pop    %rax
  0x0000000116b6df01: cmp    (%rax),%rax
  0x0000000116b6df04: xor    %esi,%esi
  0x0000000116b6df06: mov    -0x40(%rbp),%rcx
  0x0000000116b6df0a: lea    -0x40(%rbp),%rdx
  0x0000000116b6df0e: jmp    0x0000000116b6df26
  0x0000000116b6df10: cmpq   $0x0,0x8(%rcx)
  0x0000000116b6df18: cmove  %rcx,%rsi
  0x0000000116b6df1c: cmp    0x8(%rcx),%rax
  0x0000000116b6df20: je     0x0000000116b6df2b
  0x0000000116b6df22: add    $0x10,%rcx
  0x0000000116b6df26: cmp    %rdx,%rcx
  0x0000000116b6df29: jne    0x0000000116b6df10
  0x0000000116b6df2b: test   %rsi,%rsi
  0x0000000116b6df2e: jne    0x0000000116b6df5c
  0x0000000116b6df34: mov    -0x40(%rbp),%rsi
  0x0000000116b6df38: sub    $0x10,%rsp
  0x0000000116b6df3c: sub    $0x10,%rsi
  0x0000000116b6df40: mov    %rsp,%rcx
  0x0000000116b6df43: mov    %rsi,-0x40(%rbp)
  0x0000000116b6df47: jmpq   0x0000000116b6df57
  0x0000000116b6df4c: mov    0x10(%rcx),%rdx
  0x0000000116b6df50: mov    %rdx,(%rcx)
  0x0000000116b6df53: add    $0x8,%rcx
  0x0000000116b6df57: cmp    %rsi,%rcx
  0x0000000116b6df5a: jne    0x0000000116b6df4c
  0x0000000116b6df5c: inc    %r13
  0x0000000116b6df5f: mov    %rax,0x8(%rsi)
  0x0000000116b6df63: mov    0x8(%rsi),%rcx
  0x0000000116b6df67: mov    (%rcx),%rax
  0x0000000116b6df6a: mov    %rax,%r10
  0x0000000116b6df6d: and    $0x7,%r10
  0x0000000116b6df71: cmp    $0x5,%r10
  0x0000000116b6df75: jne    0x0000000116b6dfff
  0x0000000116b6df7b: mov    0x8(%rcx),%r10d
  0x0000000116b6df7f: shl    $0x3,%r10
  0x0000000116b6df83: mov    0xb0(%r10),%r10
  0x0000000116b6df8a: or     %r15,%r10
  0x0000000116b6df8d: xor    %rax,%r10
  0x0000000116b6df90: and    $0xffffffffffffff87,%r10
  0x0000000116b6df94: je     0x0000000116b6e281
  0x0000000116b6df9a: test   $0x7,%r10
  0x0000000116b6dfa1: jne    0x0000000116b6dfeb
  0x0000000116b6dfa3: test   $0x300,%r10
  0x0000000116b6dfaa: jne    0x0000000116b6dfc9
  0x0000000116b6dfac: and    $0x37f,%rax
  0x0000000116b6dfb3: mov    %rax,%r10
  0x0000000116b6dfb6: or     %r15,%r10
  0x0000000116b6dfb9: lock cmpxchg %r10,(%rcx)
  0x0000000116b6dfbe: jne    0x0000000116b6e028
  0x0000000116b6dfc4: jmpq   0x0000000116b6e281
  0x0000000116b6dfc9: mov    0x8(%rcx),%r10d
  0x0000000116b6dfcd: shl    $0x3,%r10
  0x0000000116b6dfd1: mov    0xb0(%r10),%r10
  0x0000000116b6dfd8: or     %r15,%r10
  0x0000000116b6dfdb: lock cmpxchg %r10,(%rcx)
  0x0000000116b6dfe0: jne    0x0000000116b6e028
  0x0000000116b6dfe6: jmpq   0x0000000116b6e281
  0x0000000116b6dfeb: mov    0x8(%rcx),%r10d
  0x0000000116b6dfef: shl    $0x3,%r10
  0x0000000116b6dff3: mov    0xb0(%r10),%r10
  0x0000000116b6dffa: lock cmpxchg %r10,(%rcx)
  0x0000000116b6dfff: mov    $0x1,%eax
  0x0000000116b6e004: or     (%rcx),%rax
  0x0000000116b6e007: mov    %rax,(%rsi)
  0x0000000116b6e00a: lock cmpxchg %rsi,(%rcx)
  0x0000000116b6e00f: je     0x0000000116b6e281
  0x0000000116b6e015: sub    %rsp,%rax
  0x0000000116b6e018: and    $0xfffffffffffff007,%rax
  0x0000000116b6e01f: mov    %rax,(%rsi)
  0x0000000116b6e022: je     0x0000000116b6e281
  0x0000000116b6e028: callq  0x0000000116b6e032
  0x0000000116b6e02d: jmpq   0x0000000116b6e281
  0x0000000116b6e032: lea    0x8(%rsp),%rax
  0x0000000116b6e037: mov    %r13,-0x38(%rbp)
  0x0000000116b6e03b: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6e043: je     0x0000000116b6e0c0
  0x0000000116b6e049: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e04e: sub    $0x80,%rsp
  0x0000000116b6e055: mov    %rax,0x78(%rsp)
  0x0000000116b6e05a: mov    %rcx,0x70(%rsp)
  0x0000000116b6e05f: mov    %rdx,0x68(%rsp)
  0x0000000116b6e064: mov    %rbx,0x60(%rsp)
  0x0000000116b6e069: mov    %rbp,0x50(%rsp)
  0x0000000116b6e06e: mov    %rsi,0x48(%rsp)
  0x0000000116b6e073: mov    %rdi,0x40(%rsp)
  0x0000000116b6e078: mov    %r8,0x38(%rsp)
  0x0000000116b6e07d: mov    %r9,0x30(%rsp)
  0x0000000116b6e082: mov    %r10,0x28(%rsp)
  0x0000000116b6e087: mov    %r11,0x20(%rsp)
  0x0000000116b6e08c: mov    %r12,0x18(%rsp)
  0x0000000116b6e091: mov    %r13,0x10(%rsp)
  0x0000000116b6e096: mov    %r14,0x8(%rsp)
  0x0000000116b6e09b: mov    %r15,(%rsp)
  0x0000000116b6e09f: movabs $0x10cc2363b,%rdi
  0x0000000116b6e0a9: movabs $0x116b6e049,%rsi
  0x0000000116b6e0b3: mov    %rsp,%rdx
  0x0000000116b6e0b6: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e0ba: callq  0x000000010c7dd830
  0x0000000116b6e0bf: hlt    
  0x0000000116b6e0c0: push   %r10
  0x0000000116b6e0c2: cmp    -0x9d27819(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6e0c9: je     0x0000000116b6e146
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6e0cf: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e0d4: sub    $0x80,%rsp
  0x0000000116b6e0db: mov    %rax,0x78(%rsp)
  0x0000000116b6e0e0: mov    %rcx,0x70(%rsp)
  0x0000000116b6e0e5: mov    %rdx,0x68(%rsp)
  0x0000000116b6e0ea: mov    %rbx,0x60(%rsp)
  0x0000000116b6e0ef: mov    %rbp,0x50(%rsp)
  0x0000000116b6e0f4: mov    %rsi,0x48(%rsp)
  0x0000000116b6e0f9: mov    %rdi,0x40(%rsp)
  0x0000000116b6e0fe: mov    %r8,0x38(%rsp)
  0x0000000116b6e103: mov    %r9,0x30(%rsp)
  0x0000000116b6e108: mov    %r10,0x28(%rsp)
  0x0000000116b6e10d: mov    %r11,0x20(%rsp)
  0x0000000116b6e112: mov    %r12,0x18(%rsp)
  0x0000000116b6e117: mov    %r13,0x10(%rsp)
  0x0000000116b6e11c: mov    %r14,0x8(%rsp)
  0x0000000116b6e121: mov    %r15,(%rsp)
  0x0000000116b6e125: movabs $0x10cc63f17,%rdi
  0x0000000116b6e12f: movabs $0x116b6e0cf,%rsi
  0x0000000116b6e139: mov    %rsp,%rdx
  0x0000000116b6e13c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e140: callq  0x000000010c7dd830
  0x0000000116b6e145: hlt    
  0x0000000116b6e146: pop    %r10
  0x0000000116b6e148: mov    %r15,%rdi
  0x0000000116b6e14b: mov    %rbp,0x290(%r15)
  0x0000000116b6e152: mov    %rax,0x280(%r15)
  0x0000000116b6e159: test   $0xf,%esp
  0x0000000116b6e15f: je     0x0000000116b6e177
  0x0000000116b6e165: sub    $0x8,%rsp
  0x0000000116b6e169: callq  0x000000010c588c20
  0x0000000116b6e16e: add    $0x8,%rsp
  0x0000000116b6e172: jmpq   0x0000000116b6e17c
  0x0000000116b6e177: callq  0x000000010c588c20
  0x0000000116b6e17c: push   %rax
  0x0000000116b6e17d: push   %rdi
  0x0000000116b6e17e: push   %rsi
  0x0000000116b6e17f: push   %rdx
  0x0000000116b6e180: push   %rcx
  0x0000000116b6e181: push   %r8
  0x0000000116b6e183: push   %r9
  0x0000000116b6e185: push   %r10
  0x0000000116b6e187: mov    %rsp,%r10
  0x0000000116b6e18a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e18e: push   %r10
  0x0000000116b6e190: push   %r11
  0x0000000116b6e192: mov    $0x109,%edi
  0x0000000116b6e197: movabs $0x7ff815049fd5,%r10
  0x0000000116b6e1a1: callq  *%r10
  0x0000000116b6e1a4: pop    %r11
  0x0000000116b6e1a6: pop    %rsp
  0x0000000116b6e1a7: pop    %r10
  0x0000000116b6e1a9: pop    %r9
  0x0000000116b6e1ab: pop    %r8
  0x0000000116b6e1ad: pop    %rcx
  0x0000000116b6e1ae: pop    %rdx
  0x0000000116b6e1af: pop    %rsi
  0x0000000116b6e1b0: pop    %rdi
  0x0000000116b6e1b1: cmp    %rax,%r15
  0x0000000116b6e1b4: je     0x0000000116b6e231
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6e1ba: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e1bf: sub    $0x80,%rsp
  0x0000000116b6e1c6: mov    %rax,0x78(%rsp)
  0x0000000116b6e1cb: mov    %rcx,0x70(%rsp)
  0x0000000116b6e1d0: mov    %rdx,0x68(%rsp)
  0x0000000116b6e1d5: mov    %rbx,0x60(%rsp)
  0x0000000116b6e1da: mov    %rbp,0x50(%rsp)
  0x0000000116b6e1df: mov    %rsi,0x48(%rsp)
  0x0000000116b6e1e4: mov    %rdi,0x40(%rsp)
  0x0000000116b6e1e9: mov    %r8,0x38(%rsp)
  0x0000000116b6e1ee: mov    %r9,0x30(%rsp)
  0x0000000116b6e1f3: mov    %r10,0x28(%rsp)
  0x0000000116b6e1f8: mov    %r11,0x20(%rsp)
  0x0000000116b6e1fd: mov    %r12,0x18(%rsp)
  0x0000000116b6e202: mov    %r13,0x10(%rsp)
  0x0000000116b6e207: mov    %r14,0x8(%rsp)
  0x0000000116b6e20c: mov    %r15,(%rsp)
  0x0000000116b6e210: movabs $0x10cc6405e,%rdi
  0x0000000116b6e21a: movabs $0x116b6e1ba,%rsi
  0x0000000116b6e224: mov    %rsp,%rdx
  0x0000000116b6e227: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e22b: callq  0x000000010c7dd830
  0x0000000116b6e230: hlt    
  0x0000000116b6e231: pop    %rax
  0x0000000116b6e232: movabs $0x0,%r10
  0x0000000116b6e23c: mov    %r10,0x280(%r15)
  0x0000000116b6e243: movabs $0x0,%r10
  0x0000000116b6e24d: mov    %r10,0x290(%r15)
  0x0000000116b6e254: movabs $0x0,%r10
  0x0000000116b6e25e: mov    %r10,0x288(%r15)
  0x0000000116b6e265: cmpq   $0x0,0x8(%r15)
  0x0000000116b6e26d: je     0x0000000116b6e278
  0x0000000116b6e273: jmpq   0x0000000116b30420
  0x0000000116b6e278: mov    -0x38(%rbp),%r13
  0x0000000116b6e27c: mov    -0x30(%rbp),%r14
  0x0000000116b6e280: retq   
  0x0000000116b6e281: mov    %r13,-0x38(%rbp)
  0x0000000116b6e285: mov    %eax,-0x16000(%rsp)
  0x0000000116b6e28c: movzbl 0x0(%r13),%ebx
  0x0000000116b6e291: movabs $0x10ce3b680,%r10
  0x0000000116b6e29b: jmpq   *(%r10,%rbx,8)
  0x0000000116b6e29f: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e2a4: sub    $0x80,%rsp
  0x0000000116b6e2ab: mov    %rax,0x78(%rsp)
  0x0000000116b6e2b0: mov    %rcx,0x70(%rsp)
  0x0000000116b6e2b5: mov    %rdx,0x68(%rsp)
  0x0000000116b6e2ba: mov    %rbx,0x60(%rsp)
  0x0000000116b6e2bf: mov    %rbp,0x50(%rsp)
  0x0000000116b6e2c4: mov    %rsi,0x48(%rsp)
  0x0000000116b6e2c9: mov    %rdi,0x40(%rsp)
  0x0000000116b6e2ce: mov    %r8,0x38(%rsp)
  0x0000000116b6e2d3: mov    %r9,0x30(%rsp)
  0x0000000116b6e2d8: mov    %r10,0x28(%rsp)
  0x0000000116b6e2dd: mov    %r11,0x20(%rsp)
  0x0000000116b6e2e2: mov    %r12,0x18(%rsp)
  0x0000000116b6e2e7: mov    %r13,0x10(%rsp)
  0x0000000116b6e2ec: mov    %r14,0x8(%rsp)
  0x0000000116b6e2f1: mov    %r15,(%rsp)
  0x0000000116b6e2f5: movabs $0x10cb763be,%rdi
  0x0000000116b6e2ff: movabs $0x116b6e29f,%rsi
  0x0000000116b6e309: mov    %rsp,%rdx
  0x0000000116b6e30c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e310: callq  0x000000010c7dd830
  0x0000000116b6e315: hlt    
  0x0000000116b6e316: nop
  0x0000000116b6e317: nop
  0x0000000116b6e318: int3   
  0x0000000116b6e319: int3   
  0x0000000116b6e31a: int3   
  0x0000000116b6e31b: int3   
  0x0000000116b6e31c: int3   
  0x0000000116b6e31d: int3   
  0x0000000116b6e31e: int3   
  0x0000000116b6e31f: int3   

----------------------------------------------------------------------
monitorexit  195 monitorexit  [0x0000000116b6e360, 0x0000000116b6e920]  1472 bytes

  0x0000000116b6e360: pop    %rax
  0x0000000116b6e361: cmp    (%rax),%rax
  0x0000000116b6e364: mov    -0x40(%rbp),%rsi
  0x0000000116b6e368: lea    -0x40(%rbp),%rdx
  0x0000000116b6e36c: jmp    0x0000000116b6e37c
  0x0000000116b6e36e: cmp    0x8(%rsi),%rax
  0x0000000116b6e372: je     0x0000000116b6e651
  0x0000000116b6e378: add    $0x10,%rsi
  0x0000000116b6e37c: cmp    %rdx,%rsi
  0x0000000116b6e37f: jne    0x0000000116b6e36e
  0x0000000116b6e381: callq  0x0000000116b6e38b
  0x0000000116b6e386: jmpq   0x0000000116b6e5da
  0x0000000116b6e38b: lea    0x8(%rsp),%rax
  0x0000000116b6e390: mov    %r13,-0x38(%rbp)
  0x0000000116b6e394: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6e39c: je     0x0000000116b6e419
  0x0000000116b6e3a2: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e3a7: sub    $0x80,%rsp
  0x0000000116b6e3ae: mov    %rax,0x78(%rsp)
  0x0000000116b6e3b3: mov    %rcx,0x70(%rsp)
  0x0000000116b6e3b8: mov    %rdx,0x68(%rsp)
  0x0000000116b6e3bd: mov    %rbx,0x60(%rsp)
  0x0000000116b6e3c2: mov    %rbp,0x50(%rsp)
  0x0000000116b6e3c7: mov    %rsi,0x48(%rsp)
  0x0000000116b6e3cc: mov    %rdi,0x40(%rsp)
  0x0000000116b6e3d1: mov    %r8,0x38(%rsp)
  0x0000000116b6e3d6: mov    %r9,0x30(%rsp)
  0x0000000116b6e3db: mov    %r10,0x28(%rsp)
  0x0000000116b6e3e0: mov    %r11,0x20(%rsp)
  0x0000000116b6e3e5: mov    %r12,0x18(%rsp)
  0x0000000116b6e3ea: mov    %r13,0x10(%rsp)
  0x0000000116b6e3ef: mov    %r14,0x8(%rsp)
  0x0000000116b6e3f4: mov    %r15,(%rsp)
  0x0000000116b6e3f8: movabs $0x10cc2363b,%rdi
  0x0000000116b6e402: movabs $0x116b6e3a2,%rsi
  0x0000000116b6e40c: mov    %rsp,%rdx
  0x0000000116b6e40f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e413: callq  0x000000010c7dd830
  0x0000000116b6e418: hlt    
  0x0000000116b6e419: push   %r10
  0x0000000116b6e41b: cmp    -0x9d27b72(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6e422: je     0x0000000116b6e49f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6e428: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e42d: sub    $0x80,%rsp
  0x0000000116b6e434: mov    %rax,0x78(%rsp)
  0x0000000116b6e439: mov    %rcx,0x70(%rsp)
  0x0000000116b6e43e: mov    %rdx,0x68(%rsp)
  0x0000000116b6e443: mov    %rbx,0x60(%rsp)
  0x0000000116b6e448: mov    %rbp,0x50(%rsp)
  0x0000000116b6e44d: mov    %rsi,0x48(%rsp)
  0x0000000116b6e452: mov    %rdi,0x40(%rsp)
  0x0000000116b6e457: mov    %r8,0x38(%rsp)
  0x0000000116b6e45c: mov    %r9,0x30(%rsp)
  0x0000000116b6e461: mov    %r10,0x28(%rsp)
  0x0000000116b6e466: mov    %r11,0x20(%rsp)
  0x0000000116b6e46b: mov    %r12,0x18(%rsp)
  0x0000000116b6e470: mov    %r13,0x10(%rsp)
  0x0000000116b6e475: mov    %r14,0x8(%rsp)
  0x0000000116b6e47a: mov    %r15,(%rsp)
  0x0000000116b6e47e: movabs $0x10cc63f17,%rdi
  0x0000000116b6e488: movabs $0x116b6e428,%rsi
  0x0000000116b6e492: mov    %rsp,%rdx
  0x0000000116b6e495: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e499: callq  0x000000010c7dd830
  0x0000000116b6e49e: hlt    
  0x0000000116b6e49f: pop    %r10
  0x0000000116b6e4a1: mov    %r15,%rdi
  0x0000000116b6e4a4: mov    %rbp,0x290(%r15)
  0x0000000116b6e4ab: mov    %rax,0x280(%r15)
  0x0000000116b6e4b2: test   $0xf,%esp
  0x0000000116b6e4b8: je     0x0000000116b6e4d0
  0x0000000116b6e4be: sub    $0x8,%rsp
  0x0000000116b6e4c2: callq  0x000000010c5892a0
  0x0000000116b6e4c7: add    $0x8,%rsp
  0x0000000116b6e4cb: jmpq   0x0000000116b6e4d5
  0x0000000116b6e4d0: callq  0x000000010c5892a0
  0x0000000116b6e4d5: push   %rax
  0x0000000116b6e4d6: push   %rdi
  0x0000000116b6e4d7: push   %rsi
  0x0000000116b6e4d8: push   %rdx
  0x0000000116b6e4d9: push   %rcx
  0x0000000116b6e4da: push   %r8
  0x0000000116b6e4dc: push   %r9
  0x0000000116b6e4de: push   %r10
  0x0000000116b6e4e0: mov    %rsp,%r10
  0x0000000116b6e4e3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e4e7: push   %r10
  0x0000000116b6e4e9: push   %r11
  0x0000000116b6e4eb: mov    $0x109,%edi
  0x0000000116b6e4f0: movabs $0x7ff815049fd5,%r10
  0x0000000116b6e4fa: callq  *%r10
  0x0000000116b6e4fd: pop    %r11
  0x0000000116b6e4ff: pop    %rsp
  0x0000000116b6e500: pop    %r10
  0x0000000116b6e502: pop    %r9
  0x0000000116b6e504: pop    %r8
  0x0000000116b6e506: pop    %rcx
  0x0000000116b6e507: pop    %rdx
  0x0000000116b6e508: pop    %rsi
  0x0000000116b6e509: pop    %rdi
  0x0000000116b6e50a: cmp    %rax,%r15
  0x0000000116b6e50d: je     0x0000000116b6e58a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6e513: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e518: sub    $0x80,%rsp
  0x0000000116b6e51f: mov    %rax,0x78(%rsp)
  0x0000000116b6e524: mov    %rcx,0x70(%rsp)
  0x0000000116b6e529: mov    %rdx,0x68(%rsp)
  0x0000000116b6e52e: mov    %rbx,0x60(%rsp)
  0x0000000116b6e533: mov    %rbp,0x50(%rsp)
  0x0000000116b6e538: mov    %rsi,0x48(%rsp)
  0x0000000116b6e53d: mov    %rdi,0x40(%rsp)
  0x0000000116b6e542: mov    %r8,0x38(%rsp)
  0x0000000116b6e547: mov    %r9,0x30(%rsp)
  0x0000000116b6e54c: mov    %r10,0x28(%rsp)
  0x0000000116b6e551: mov    %r11,0x20(%rsp)
  0x0000000116b6e556: mov    %r12,0x18(%rsp)
  0x0000000116b6e55b: mov    %r13,0x10(%rsp)
  0x0000000116b6e560: mov    %r14,0x8(%rsp)
  0x0000000116b6e565: mov    %r15,(%rsp)
  0x0000000116b6e569: movabs $0x10cc6405e,%rdi
  0x0000000116b6e573: movabs $0x116b6e513,%rsi
  0x0000000116b6e57d: mov    %rsp,%rdx
  0x0000000116b6e580: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e584: callq  0x000000010c7dd830
  0x0000000116b6e589: hlt    
  0x0000000116b6e58a: pop    %rax
  0x0000000116b6e58b: movabs $0x0,%r10
  0x0000000116b6e595: mov    %r10,0x280(%r15)
  0x0000000116b6e59c: movabs $0x0,%r10
  0x0000000116b6e5a6: mov    %r10,0x290(%r15)
  0x0000000116b6e5ad: movabs $0x0,%r10
  0x0000000116b6e5b7: mov    %r10,0x288(%r15)
  0x0000000116b6e5be: cmpq   $0x0,0x8(%r15)
  0x0000000116b6e5c6: je     0x0000000116b6e5d1
  0x0000000116b6e5cc: jmpq   0x0000000116b30420
  0x0000000116b6e5d1: mov    -0x38(%rbp),%r13
  0x0000000116b6e5d5: mov    -0x30(%rbp),%r14
  0x0000000116b6e5d9: retq   
  0x0000000116b6e5da: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e5df: sub    $0x80,%rsp
  0x0000000116b6e5e6: mov    %rax,0x78(%rsp)
  0x0000000116b6e5eb: mov    %rcx,0x70(%rsp)
  0x0000000116b6e5f0: mov    %rdx,0x68(%rsp)
  0x0000000116b6e5f5: mov    %rbx,0x60(%rsp)
  0x0000000116b6e5fa: mov    %rbp,0x50(%rsp)
  0x0000000116b6e5ff: mov    %rsi,0x48(%rsp)
  0x0000000116b6e604: mov    %rdi,0x40(%rsp)
  0x0000000116b6e609: mov    %r8,0x38(%rsp)
  0x0000000116b6e60e: mov    %r9,0x30(%rsp)
  0x0000000116b6e613: mov    %r10,0x28(%rsp)
  0x0000000116b6e618: mov    %r11,0x20(%rsp)
  0x0000000116b6e61d: mov    %r12,0x18(%rsp)
  0x0000000116b6e622: mov    %r13,0x10(%rsp)
  0x0000000116b6e627: mov    %r14,0x8(%rsp)
  0x0000000116b6e62c: mov    %r15,(%rsp)
  0x0000000116b6e630: movabs $0x10cb763be,%rdi
  0x0000000116b6e63a: movabs $0x116b6e5da,%rsi
  0x0000000116b6e644: mov    %rsp,%rdx
  0x0000000116b6e647: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e64b: callq  0x000000010c7dd830
  0x0000000116b6e650: hlt    
  0x0000000116b6e651: push   %rax
  0x0000000116b6e652: mov    %r13,-0x38(%rbp)
  0x0000000116b6e656: lea    (%rsi),%rax
  0x0000000116b6e659: mov    0x8(%rsi),%rcx
  0x0000000116b6e65d: movq   $0x0,0x8(%rsi)
  0x0000000116b6e665: mov    (%rcx),%rdx
  0x0000000116b6e668: and    $0x7,%rdx
  0x0000000116b6e66c: cmp    $0x5,%rdx
  0x0000000116b6e670: je     0x0000000116b6e8ea
  0x0000000116b6e676: mov    (%rax),%rdx
  0x0000000116b6e679: test   %rdx,%rdx
  0x0000000116b6e67c: je     0x0000000116b6e8ea
  0x0000000116b6e682: lock cmpxchg %rdx,(%rcx)
  0x0000000116b6e687: je     0x0000000116b6e8ea
  0x0000000116b6e68d: mov    %rcx,0x8(%rsi)
  0x0000000116b6e691: callq  0x0000000116b6e69b
  0x0000000116b6e696: jmpq   0x0000000116b6e8ea
  0x0000000116b6e69b: lea    0x8(%rsp),%rax
  0x0000000116b6e6a0: mov    %r13,-0x38(%rbp)
  0x0000000116b6e6a4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6e6ac: je     0x0000000116b6e729
  0x0000000116b6e6b2: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e6b7: sub    $0x80,%rsp
  0x0000000116b6e6be: mov    %rax,0x78(%rsp)
  0x0000000116b6e6c3: mov    %rcx,0x70(%rsp)
  0x0000000116b6e6c8: mov    %rdx,0x68(%rsp)
  0x0000000116b6e6cd: mov    %rbx,0x60(%rsp)
  0x0000000116b6e6d2: mov    %rbp,0x50(%rsp)
  0x0000000116b6e6d7: mov    %rsi,0x48(%rsp)
  0x0000000116b6e6dc: mov    %rdi,0x40(%rsp)
  0x0000000116b6e6e1: mov    %r8,0x38(%rsp)
  0x0000000116b6e6e6: mov    %r9,0x30(%rsp)
  0x0000000116b6e6eb: mov    %r10,0x28(%rsp)
  0x0000000116b6e6f0: mov    %r11,0x20(%rsp)
  0x0000000116b6e6f5: mov    %r12,0x18(%rsp)
  0x0000000116b6e6fa: mov    %r13,0x10(%rsp)
  0x0000000116b6e6ff: mov    %r14,0x8(%rsp)
  0x0000000116b6e704: mov    %r15,(%rsp)
  0x0000000116b6e708: movabs $0x10cc2363b,%rdi
  0x0000000116b6e712: movabs $0x116b6e6b2,%rsi
  0x0000000116b6e71c: mov    %rsp,%rdx
  0x0000000116b6e71f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e723: callq  0x000000010c7dd830
  0x0000000116b6e728: hlt    
  0x0000000116b6e729: push   %r10
  0x0000000116b6e72b: cmp    -0x9d27e82(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6e732: je     0x0000000116b6e7af
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6e738: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e73d: sub    $0x80,%rsp
  0x0000000116b6e744: mov    %rax,0x78(%rsp)
  0x0000000116b6e749: mov    %rcx,0x70(%rsp)
  0x0000000116b6e74e: mov    %rdx,0x68(%rsp)
  0x0000000116b6e753: mov    %rbx,0x60(%rsp)
  0x0000000116b6e758: mov    %rbp,0x50(%rsp)
  0x0000000116b6e75d: mov    %rsi,0x48(%rsp)
  0x0000000116b6e762: mov    %rdi,0x40(%rsp)
  0x0000000116b6e767: mov    %r8,0x38(%rsp)
  0x0000000116b6e76c: mov    %r9,0x30(%rsp)
  0x0000000116b6e771: mov    %r10,0x28(%rsp)
  0x0000000116b6e776: mov    %r11,0x20(%rsp)
  0x0000000116b6e77b: mov    %r12,0x18(%rsp)
  0x0000000116b6e780: mov    %r13,0x10(%rsp)
  0x0000000116b6e785: mov    %r14,0x8(%rsp)
  0x0000000116b6e78a: mov    %r15,(%rsp)
  0x0000000116b6e78e: movabs $0x10cc63f17,%rdi
  0x0000000116b6e798: movabs $0x116b6e738,%rsi
  0x0000000116b6e7a2: mov    %rsp,%rdx
  0x0000000116b6e7a5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e7a9: callq  0x000000010c7dd830
  0x0000000116b6e7ae: hlt    
  0x0000000116b6e7af: pop    %r10
  0x0000000116b6e7b1: mov    %r15,%rdi
  0x0000000116b6e7b4: mov    %rbp,0x290(%r15)
  0x0000000116b6e7bb: mov    %rax,0x280(%r15)
  0x0000000116b6e7c2: test   $0xf,%esp
  0x0000000116b6e7c8: je     0x0000000116b6e7e0
  0x0000000116b6e7ce: sub    $0x8,%rsp
  0x0000000116b6e7d2: callq  0x000000010c588f80
  0x0000000116b6e7d7: add    $0x8,%rsp
  0x0000000116b6e7db: jmpq   0x0000000116b6e7e5
  0x0000000116b6e7e0: callq  0x000000010c588f80
  0x0000000116b6e7e5: push   %rax
  0x0000000116b6e7e6: push   %rdi
  0x0000000116b6e7e7: push   %rsi
  0x0000000116b6e7e8: push   %rdx
  0x0000000116b6e7e9: push   %rcx
  0x0000000116b6e7ea: push   %r8
  0x0000000116b6e7ec: push   %r9
  0x0000000116b6e7ee: push   %r10
  0x0000000116b6e7f0: mov    %rsp,%r10
  0x0000000116b6e7f3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e7f7: push   %r10
  0x0000000116b6e7f9: push   %r11
  0x0000000116b6e7fb: mov    $0x109,%edi
  0x0000000116b6e800: movabs $0x7ff815049fd5,%r10
  0x0000000116b6e80a: callq  *%r10
  0x0000000116b6e80d: pop    %r11
  0x0000000116b6e80f: pop    %rsp
  0x0000000116b6e810: pop    %r10
  0x0000000116b6e812: pop    %r9
  0x0000000116b6e814: pop    %r8
  0x0000000116b6e816: pop    %rcx
  0x0000000116b6e817: pop    %rdx
  0x0000000116b6e818: pop    %rsi
  0x0000000116b6e819: pop    %rdi
  0x0000000116b6e81a: cmp    %rax,%r15
  0x0000000116b6e81d: je     0x0000000116b6e89a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6e823: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e828: sub    $0x80,%rsp
  0x0000000116b6e82f: mov    %rax,0x78(%rsp)
  0x0000000116b6e834: mov    %rcx,0x70(%rsp)
  0x0000000116b6e839: mov    %rdx,0x68(%rsp)
  0x0000000116b6e83e: mov    %rbx,0x60(%rsp)
  0x0000000116b6e843: mov    %rbp,0x50(%rsp)
  0x0000000116b6e848: mov    %rsi,0x48(%rsp)
  0x0000000116b6e84d: mov    %rdi,0x40(%rsp)
  0x0000000116b6e852: mov    %r8,0x38(%rsp)
  0x0000000116b6e857: mov    %r9,0x30(%rsp)
  0x0000000116b6e85c: mov    %r10,0x28(%rsp)
  0x0000000116b6e861: mov    %r11,0x20(%rsp)
  0x0000000116b6e866: mov    %r12,0x18(%rsp)
  0x0000000116b6e86b: mov    %r13,0x10(%rsp)
  0x0000000116b6e870: mov    %r14,0x8(%rsp)
  0x0000000116b6e875: mov    %r15,(%rsp)
  0x0000000116b6e879: movabs $0x10cc6405e,%rdi
  0x0000000116b6e883: movabs $0x116b6e823,%rsi
  0x0000000116b6e88d: mov    %rsp,%rdx
  0x0000000116b6e890: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6e894: callq  0x000000010c7dd830
  0x0000000116b6e899: hlt    
  0x0000000116b6e89a: pop    %rax
  0x0000000116b6e89b: movabs $0x0,%r10
  0x0000000116b6e8a5: mov    %r10,0x280(%r15)
  0x0000000116b6e8ac: movabs $0x0,%r10
  0x0000000116b6e8b6: mov    %r10,0x290(%r15)
  0x0000000116b6e8bd: movabs $0x0,%r10
  0x0000000116b6e8c7: mov    %r10,0x288(%r15)
  0x0000000116b6e8ce: cmpq   $0x0,0x8(%r15)
  0x0000000116b6e8d6: je     0x0000000116b6e8e1
  0x0000000116b6e8dc: jmpq   0x0000000116b30420
  0x0000000116b6e8e1: mov    -0x38(%rbp),%r13
  0x0000000116b6e8e5: mov    -0x30(%rbp),%r14
  0x0000000116b6e8e9: retq   
  0x0000000116b6e8ea: mov    -0x38(%rbp),%r13
  0x0000000116b6e8ee: pop    %rax
  0x0000000116b6e8ef: movzbl 0x1(%r13),%ebx
  0x0000000116b6e8f4: inc    %r13
  0x0000000116b6e8f7: movabs $0x10ce3b680,%r10
  0x0000000116b6e901: jmpq   *(%r10,%rbx,8)
  0x0000000116b6e905: nop
  0x0000000116b6e906: nop
  0x0000000116b6e907: nop
  0x0000000116b6e908: int3   
  0x0000000116b6e909: int3   
  0x0000000116b6e90a: int3   
  0x0000000116b6e90b: int3   
  0x0000000116b6e90c: int3   
  0x0000000116b6e90d: int3   
  0x0000000116b6e90e: int3   
  0x0000000116b6e90f: int3   
  0x0000000116b6e910: int3   
  0x0000000116b6e911: int3   
  0x0000000116b6e912: int3   
  0x0000000116b6e913: int3   
  0x0000000116b6e914: int3   
  0x0000000116b6e915: int3   
  0x0000000116b6e916: int3   
  0x0000000116b6e917: int3   
  0x0000000116b6e918: int3   
  0x0000000116b6e919: int3   
  0x0000000116b6e91a: int3   
  0x0000000116b6e91b: int3   
  0x0000000116b6e91c: int3   
  0x0000000116b6e91d: int3   
  0x0000000116b6e91e: int3   
  0x0000000116b6e91f: int3   

----------------------------------------------------------------------
wide  196 wide  [0x0000000116b6e960, 0x0000000116b6ea20]  192 bytes

  0x0000000116b6e960: push   %rax
  0x0000000116b6e961: jmpq   0x0000000116b6e990
  0x0000000116b6e966: sub    $0x8,%rsp
  0x0000000116b6e96a: vmovss %xmm0,(%rsp)
  0x0000000116b6e96f: jmpq   0x0000000116b6e990
  0x0000000116b6e974: sub    $0x10,%rsp
  0x0000000116b6e978: vmovsd %xmm0,(%rsp)
  0x0000000116b6e97d: jmpq   0x0000000116b6e990
  0x0000000116b6e982: sub    $0x10,%rsp
  0x0000000116b6e986: mov    %rax,(%rsp)
  0x0000000116b6e98a: jmpq   0x0000000116b6e990
  0x0000000116b6e98f: push   %rax
  0x0000000116b6e990: movzbl 0x1(%r13),%ebx
  0x0000000116b6e995: movabs $0x10ce41740,%r10
  0x0000000116b6e99f: jmpq   *(%r10,%rbx,8)
  0x0000000116b6e9a3: mov    %rsp,-0x28(%rsp)
  0x0000000116b6e9a8: sub    $0x80,%rsp
  0x0000000116b6e9af: mov    %rax,0x78(%rsp)
  0x0000000116b6e9b4: mov    %rcx,0x70(%rsp)
  0x0000000116b6e9b9: mov    %rdx,0x68(%rsp)
  0x0000000116b6e9be: mov    %rbx,0x60(%rsp)
  0x0000000116b6e9c3: mov    %rbp,0x50(%rsp)
  0x0000000116b6e9c8: mov    %rsi,0x48(%rsp)
  0x0000000116b6e9cd: mov    %rdi,0x40(%rsp)
  0x0000000116b6e9d2: mov    %r8,0x38(%rsp)
  0x0000000116b6e9d7: mov    %r9,0x30(%rsp)
  0x0000000116b6e9dc: mov    %r10,0x28(%rsp)
  0x0000000116b6e9e1: mov    %r11,0x20(%rsp)
  0x0000000116b6e9e6: mov    %r12,0x18(%rsp)
  0x0000000116b6e9eb: mov    %r13,0x10(%rsp)
  0x0000000116b6e9f0: mov    %r14,0x8(%rsp)
  0x0000000116b6e9f5: mov    %r15,(%rsp)
  0x0000000116b6e9f9: movabs $0x10cb763be,%rdi
  0x0000000116b6ea03: movabs $0x116b6e9a3,%rsi
  0x0000000116b6ea0d: mov    %rsp,%rdx
  0x0000000116b6ea10: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ea14: callq  0x000000010c7dd830
  0x0000000116b6ea19: hlt    
  0x0000000116b6ea1a: nop
  0x0000000116b6ea1b: nop
  0x0000000116b6ea1c: nop
  0x0000000116b6ea1d: nop
  0x0000000116b6ea1e: nop
  0x0000000116b6ea1f: nop

----------------------------------------------------------------------
multianewarray  197 multianewarray  [0x0000000116b6ea60, 0x0000000116b6ed40]  736 bytes

  0x0000000116b6ea60: push   %rax
  0x0000000116b6ea61: jmpq   0x0000000116b6ea90
  0x0000000116b6ea66: sub    $0x8,%rsp
  0x0000000116b6ea6a: vmovss %xmm0,(%rsp)
  0x0000000116b6ea6f: jmpq   0x0000000116b6ea90
  0x0000000116b6ea74: sub    $0x10,%rsp
  0x0000000116b6ea78: vmovsd %xmm0,(%rsp)
  0x0000000116b6ea7d: jmpq   0x0000000116b6ea90
  0x0000000116b6ea82: sub    $0x10,%rsp
  0x0000000116b6ea86: mov    %rax,(%rsp)
  0x0000000116b6ea8a: jmpq   0x0000000116b6ea90
  0x0000000116b6ea8f: push   %rax
  0x0000000116b6ea90: movzbl 0x3(%r13),%eax
  0x0000000116b6ea95: lea    -0x8(%rsp,%rax,8),%rsi
  0x0000000116b6ea9a: callq  0x0000000116b6eaa4
  0x0000000116b6ea9f: jmpq   0x0000000116b6ed0b
  0x0000000116b6eaa4: lea    0x8(%rsp),%rax
  0x0000000116b6eaa9: mov    %r13,-0x38(%rbp)
  0x0000000116b6eaad: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6eab5: je     0x0000000116b6eb32
  0x0000000116b6eabb: mov    %rsp,-0x28(%rsp)
  0x0000000116b6eac0: sub    $0x80,%rsp
  0x0000000116b6eac7: mov    %rax,0x78(%rsp)
  0x0000000116b6eacc: mov    %rcx,0x70(%rsp)
  0x0000000116b6ead1: mov    %rdx,0x68(%rsp)
  0x0000000116b6ead6: mov    %rbx,0x60(%rsp)
  0x0000000116b6eadb: mov    %rbp,0x50(%rsp)
  0x0000000116b6eae0: mov    %rsi,0x48(%rsp)
  0x0000000116b6eae5: mov    %rdi,0x40(%rsp)
  0x0000000116b6eaea: mov    %r8,0x38(%rsp)
  0x0000000116b6eaef: mov    %r9,0x30(%rsp)
  0x0000000116b6eaf4: mov    %r10,0x28(%rsp)
  0x0000000116b6eaf9: mov    %r11,0x20(%rsp)
  0x0000000116b6eafe: mov    %r12,0x18(%rsp)
  0x0000000116b6eb03: mov    %r13,0x10(%rsp)
  0x0000000116b6eb08: mov    %r14,0x8(%rsp)
  0x0000000116b6eb0d: mov    %r15,(%rsp)
  0x0000000116b6eb11: movabs $0x10cc2363b,%rdi
  0x0000000116b6eb1b: movabs $0x116b6eabb,%rsi
  0x0000000116b6eb25: mov    %rsp,%rdx
  0x0000000116b6eb28: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6eb2c: callq  0x000000010c7dd830
  0x0000000116b6eb31: hlt    
  0x0000000116b6eb32: push   %r10
  0x0000000116b6eb34: cmp    -0x9d2828b(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6eb3b: je     0x0000000116b6ebb8
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6eb41: mov    %rsp,-0x28(%rsp)
  0x0000000116b6eb46: sub    $0x80,%rsp
  0x0000000116b6eb4d: mov    %rax,0x78(%rsp)
  0x0000000116b6eb52: mov    %rcx,0x70(%rsp)
  0x0000000116b6eb57: mov    %rdx,0x68(%rsp)
  0x0000000116b6eb5c: mov    %rbx,0x60(%rsp)
  0x0000000116b6eb61: mov    %rbp,0x50(%rsp)
  0x0000000116b6eb66: mov    %rsi,0x48(%rsp)
  0x0000000116b6eb6b: mov    %rdi,0x40(%rsp)
  0x0000000116b6eb70: mov    %r8,0x38(%rsp)
  0x0000000116b6eb75: mov    %r9,0x30(%rsp)
  0x0000000116b6eb7a: mov    %r10,0x28(%rsp)
  0x0000000116b6eb7f: mov    %r11,0x20(%rsp)
  0x0000000116b6eb84: mov    %r12,0x18(%rsp)
  0x0000000116b6eb89: mov    %r13,0x10(%rsp)
  0x0000000116b6eb8e: mov    %r14,0x8(%rsp)
  0x0000000116b6eb93: mov    %r15,(%rsp)
  0x0000000116b6eb97: movabs $0x10cc63f17,%rdi
  0x0000000116b6eba1: movabs $0x116b6eb41,%rsi
  0x0000000116b6ebab: mov    %rsp,%rdx
  0x0000000116b6ebae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ebb2: callq  0x000000010c7dd830
  0x0000000116b6ebb7: hlt    
  0x0000000116b6ebb8: pop    %r10
  0x0000000116b6ebba: mov    %r15,%rdi
  0x0000000116b6ebbd: mov    %rbp,0x290(%r15)
  0x0000000116b6ebc4: mov    %rax,0x280(%r15)
  0x0000000116b6ebcb: test   $0xf,%esp
  0x0000000116b6ebd1: je     0x0000000116b6ebe9
  0x0000000116b6ebd7: sub    $0x8,%rsp
  0x0000000116b6ebdb: callq  0x000000010c586180
  0x0000000116b6ebe0: add    $0x8,%rsp
  0x0000000116b6ebe4: jmpq   0x0000000116b6ebee
  0x0000000116b6ebe9: callq  0x000000010c586180
  0x0000000116b6ebee: push   %rax
  0x0000000116b6ebef: push   %rdi
  0x0000000116b6ebf0: push   %rsi
  0x0000000116b6ebf1: push   %rdx
  0x0000000116b6ebf2: push   %rcx
  0x0000000116b6ebf3: push   %r8
  0x0000000116b6ebf5: push   %r9
  0x0000000116b6ebf7: push   %r10
  0x0000000116b6ebf9: mov    %rsp,%r10
  0x0000000116b6ebfc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ec00: push   %r10
  0x0000000116b6ec02: push   %r11
  0x0000000116b6ec04: mov    $0x109,%edi
  0x0000000116b6ec09: movabs $0x7ff815049fd5,%r10
  0x0000000116b6ec13: callq  *%r10
  0x0000000116b6ec16: pop    %r11
  0x0000000116b6ec18: pop    %rsp
  0x0000000116b6ec19: pop    %r10
  0x0000000116b6ec1b: pop    %r9
  0x0000000116b6ec1d: pop    %r8
  0x0000000116b6ec1f: pop    %rcx
  0x0000000116b6ec20: pop    %rdx
  0x0000000116b6ec21: pop    %rsi
  0x0000000116b6ec22: pop    %rdi
  0x0000000116b6ec23: cmp    %rax,%r15
  0x0000000116b6ec26: je     0x0000000116b6eca3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6ec2c: mov    %rsp,-0x28(%rsp)
  0x0000000116b6ec31: sub    $0x80,%rsp
  0x0000000116b6ec38: mov    %rax,0x78(%rsp)
  0x0000000116b6ec3d: mov    %rcx,0x70(%rsp)
  0x0000000116b6ec42: mov    %rdx,0x68(%rsp)
  0x0000000116b6ec47: mov    %rbx,0x60(%rsp)
  0x0000000116b6ec4c: mov    %rbp,0x50(%rsp)
  0x0000000116b6ec51: mov    %rsi,0x48(%rsp)
  0x0000000116b6ec56: mov    %rdi,0x40(%rsp)
  0x0000000116b6ec5b: mov    %r8,0x38(%rsp)
  0x0000000116b6ec60: mov    %r9,0x30(%rsp)
  0x0000000116b6ec65: mov    %r10,0x28(%rsp)
  0x0000000116b6ec6a: mov    %r11,0x20(%rsp)
  0x0000000116b6ec6f: mov    %r12,0x18(%rsp)
  0x0000000116b6ec74: mov    %r13,0x10(%rsp)
  0x0000000116b6ec79: mov    %r14,0x8(%rsp)
  0x0000000116b6ec7e: mov    %r15,(%rsp)
  0x0000000116b6ec82: movabs $0x10cc6405e,%rdi
  0x0000000116b6ec8c: movabs $0x116b6ec2c,%rsi
  0x0000000116b6ec96: mov    %rsp,%rdx
  0x0000000116b6ec99: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6ec9d: callq  0x000000010c7dd830
  0x0000000116b6eca2: hlt    
  0x0000000116b6eca3: pop    %rax
  0x0000000116b6eca4: movabs $0x0,%r10
  0x0000000116b6ecae: mov    %r10,0x280(%r15)
  0x0000000116b6ecb5: movabs $0x0,%r10
  0x0000000116b6ecbf: mov    %r10,0x290(%r15)
  0x0000000116b6ecc6: movabs $0x0,%r10
  0x0000000116b6ecd0: mov    %r10,0x288(%r15)
  0x0000000116b6ecd7: cmpq   $0x0,0x8(%r15)
  0x0000000116b6ecdf: je     0x0000000116b6ecea
  0x0000000116b6ece5: jmpq   0x0000000116b30420
  0x0000000116b6ecea: mov    0x2e0(%r15),%rax
  0x0000000116b6ecf1: movabs $0x0,%r10
  0x0000000116b6ecfb: mov    %r10,0x2e0(%r15)
  0x0000000116b6ed02: mov    -0x38(%rbp),%r13
  0x0000000116b6ed06: mov    -0x30(%rbp),%r14
  0x0000000116b6ed0a: retq   
  0x0000000116b6ed0b: movzbl 0x3(%r13),%ebx
  0x0000000116b6ed10: lea    (%rsp,%rbx,8),%rsp
  0x0000000116b6ed14: movzbl 0x4(%r13),%ebx
  0x0000000116b6ed19: add    $0x4,%r13
  0x0000000116b6ed1d: movabs $0x10ce3ae80,%r10
  0x0000000116b6ed27: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ed2b: nop
  0x0000000116b6ed2c: nop
  0x0000000116b6ed2d: nop
  0x0000000116b6ed2e: nop
  0x0000000116b6ed2f: nop
  0x0000000116b6ed30: int3   
  0x0000000116b6ed31: int3   
  0x0000000116b6ed32: int3   
  0x0000000116b6ed33: int3   
  0x0000000116b6ed34: int3   
  0x0000000116b6ed35: int3   
  0x0000000116b6ed36: int3   
  0x0000000116b6ed37: int3   
  0x0000000116b6ed38: int3   
  0x0000000116b6ed39: int3   
  0x0000000116b6ed3a: int3   
  0x0000000116b6ed3b: int3   
  0x0000000116b6ed3c: int3   
  0x0000000116b6ed3d: int3   
  0x0000000116b6ed3e: int3   
  0x0000000116b6ed3f: int3   

----------------------------------------------------------------------
ifnull  198 ifnull  [0x0000000116b6ed80, 0x0000000116b6ede0]  96 bytes

  0x0000000116b6ed80: pop    %rax
  0x0000000116b6ed81: test   %rax,%rax
  0x0000000116b6ed84: jne    0x0000000116b6edb1
  0x0000000116b6ed8a: mov    -0x18(%rbp),%rcx
  0x0000000116b6ed8e: movswl 0x1(%r13),%edx
  0x0000000116b6ed93: bswap  %edx
  0x0000000116b6ed95: sar    $0x10,%edx
  0x0000000116b6ed98: movslq %edx,%rdx
  0x0000000116b6ed9b: add    %rdx,%r13
  0x0000000116b6ed9e: movzbl 0x0(%r13),%ebx
  0x0000000116b6eda3: movabs $0x10ce3b680,%r10
  0x0000000116b6edad: jmpq   *(%r10,%rbx,8)
  0x0000000116b6edb1: movzbl 0x3(%r13),%ebx
  0x0000000116b6edb6: add    $0x3,%r13
  0x0000000116b6edba: movabs $0x10ce3b680,%r10
  0x0000000116b6edc4: jmpq   *(%r10,%rbx,8)
  0x0000000116b6edc8: int3   
  0x0000000116b6edc9: int3   
  0x0000000116b6edca: int3   
  0x0000000116b6edcb: int3   
  0x0000000116b6edcc: int3   
  0x0000000116b6edcd: int3   
  0x0000000116b6edce: int3   
  0x0000000116b6edcf: int3   
  0x0000000116b6edd0: int3   
  0x0000000116b6edd1: int3   
  0x0000000116b6edd2: int3   
  0x0000000116b6edd3: int3   
  0x0000000116b6edd4: int3   
  0x0000000116b6edd5: int3   
  0x0000000116b6edd6: int3   
  0x0000000116b6edd7: int3   
  0x0000000116b6edd8: int3   
  0x0000000116b6edd9: int3   
  0x0000000116b6edda: int3   
  0x0000000116b6eddb: int3   
  0x0000000116b6eddc: int3   
  0x0000000116b6eddd: int3   
  0x0000000116b6edde: int3   
  0x0000000116b6eddf: int3   

----------------------------------------------------------------------
ifnonnull  199 ifnonnull  [0x0000000116b6ee20, 0x0000000116b6ee80]  96 bytes

  0x0000000116b6ee20: pop    %rax
  0x0000000116b6ee21: test   %rax,%rax
  0x0000000116b6ee24: je     0x0000000116b6ee51
  0x0000000116b6ee2a: mov    -0x18(%rbp),%rcx
  0x0000000116b6ee2e: movswl 0x1(%r13),%edx
  0x0000000116b6ee33: bswap  %edx
  0x0000000116b6ee35: sar    $0x10,%edx
  0x0000000116b6ee38: movslq %edx,%rdx
  0x0000000116b6ee3b: add    %rdx,%r13
  0x0000000116b6ee3e: movzbl 0x0(%r13),%ebx
  0x0000000116b6ee43: movabs $0x10ce3b680,%r10
  0x0000000116b6ee4d: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ee51: movzbl 0x3(%r13),%ebx
  0x0000000116b6ee56: add    $0x3,%r13
  0x0000000116b6ee5a: movabs $0x10ce3b680,%r10
  0x0000000116b6ee64: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ee68: int3   
  0x0000000116b6ee69: int3   
  0x0000000116b6ee6a: int3   
  0x0000000116b6ee6b: int3   
  0x0000000116b6ee6c: int3   
  0x0000000116b6ee6d: int3   
  0x0000000116b6ee6e: int3   
  0x0000000116b6ee6f: int3   
  0x0000000116b6ee70: int3   
  0x0000000116b6ee71: int3   
  0x0000000116b6ee72: int3   
  0x0000000116b6ee73: int3   
  0x0000000116b6ee74: int3   
  0x0000000116b6ee75: int3   
  0x0000000116b6ee76: int3   
  0x0000000116b6ee77: int3   
  0x0000000116b6ee78: int3   
  0x0000000116b6ee79: int3   
  0x0000000116b6ee7a: int3   
  0x0000000116b6ee7b: int3   
  0x0000000116b6ee7c: int3   
  0x0000000116b6ee7d: int3   
  0x0000000116b6ee7e: int3   
  0x0000000116b6ee7f: int3   

----------------------------------------------------------------------
goto_w  200 goto_w  [0x0000000116b6eec0, 0x0000000116b6ef40]  128 bytes

  0x0000000116b6eec0: push   %rax
  0x0000000116b6eec1: jmpq   0x0000000116b6eef0
  0x0000000116b6eec6: sub    $0x8,%rsp
  0x0000000116b6eeca: vmovss %xmm0,(%rsp)
  0x0000000116b6eecf: jmpq   0x0000000116b6eef0
  0x0000000116b6eed4: sub    $0x10,%rsp
  0x0000000116b6eed8: vmovsd %xmm0,(%rsp)
  0x0000000116b6eedd: jmpq   0x0000000116b6eef0
  0x0000000116b6eee2: sub    $0x10,%rsp
  0x0000000116b6eee6: mov    %rax,(%rsp)
  0x0000000116b6eeea: jmpq   0x0000000116b6eef0
  0x0000000116b6eeef: push   %rax
  0x0000000116b6eef0: mov    -0x18(%rbp),%rcx
  0x0000000116b6eef4: mov    0x1(%r13),%edx
  0x0000000116b6eef8: bswap  %edx
  0x0000000116b6eefa: movslq %edx,%rdx
  0x0000000116b6eefd: add    %rdx,%r13
  0x0000000116b6ef00: movzbl 0x0(%r13),%ebx
  0x0000000116b6ef05: movabs $0x10ce3b680,%r10
  0x0000000116b6ef0f: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ef13: movzbl 0x5(%r13),%ebx
  0x0000000116b6ef18: add    $0x5,%r13
  0x0000000116b6ef1c: movabs $0x10ce3b680,%r10
  0x0000000116b6ef26: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ef2a: nop
  0x0000000116b6ef2b: nop
  0x0000000116b6ef2c: nop
  0x0000000116b6ef2d: nop
  0x0000000116b6ef2e: nop
  0x0000000116b6ef2f: nop
  0x0000000116b6ef30: int3   
  0x0000000116b6ef31: int3   
  0x0000000116b6ef32: int3   
  0x0000000116b6ef33: int3   
  0x0000000116b6ef34: int3   
  0x0000000116b6ef35: int3   
  0x0000000116b6ef36: int3   
  0x0000000116b6ef37: int3   
  0x0000000116b6ef38: int3   
  0x0000000116b6ef39: int3   
  0x0000000116b6ef3a: int3   
  0x0000000116b6ef3b: int3   
  0x0000000116b6ef3c: int3   
  0x0000000116b6ef3d: int3   
  0x0000000116b6ef3e: int3   
  0x0000000116b6ef3f: int3   

----------------------------------------------------------------------
jsr_w  201 jsr_w  [0x0000000116b6ef80, 0x0000000116b6f000]  128 bytes

  0x0000000116b6ef80: push   %rax
  0x0000000116b6ef81: jmpq   0x0000000116b6efb0
  0x0000000116b6ef86: sub    $0x8,%rsp
  0x0000000116b6ef8a: vmovss %xmm0,(%rsp)
  0x0000000116b6ef8f: jmpq   0x0000000116b6efb0
  0x0000000116b6ef94: sub    $0x10,%rsp
  0x0000000116b6ef98: vmovsd %xmm0,(%rsp)
  0x0000000116b6ef9d: jmpq   0x0000000116b6efb0
  0x0000000116b6efa2: sub    $0x10,%rsp
  0x0000000116b6efa6: mov    %rax,(%rsp)
  0x0000000116b6efaa: jmpq   0x0000000116b6efb0
  0x0000000116b6efaf: push   %rax
  0x0000000116b6efb0: mov    -0x18(%rbp),%rcx
  0x0000000116b6efb4: mov    0x1(%r13),%edx
  0x0000000116b6efb8: bswap  %edx
  0x0000000116b6efba: movslq %edx,%rdx
  0x0000000116b6efbd: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000116b6efc3: lea    -0x2b(%r13),%rax
  0x0000000116b6efc7: sub    0x10(%rcx),%rax
  0x0000000116b6efcb: add    %rdx,%r13
  0x0000000116b6efce: push   %rax
  0x0000000116b6efcf: movabs $0x10ce3b680,%r10
  0x0000000116b6efd9: jmpq   *(%r10,%rbx,8)
  0x0000000116b6efdd: movzbl 0x5(%r13),%ebx
  0x0000000116b6efe2: add    $0x5,%r13
  0x0000000116b6efe6: movabs $0x10ce3b680,%r10
  0x0000000116b6eff0: jmpq   *(%r10,%rbx,8)
  0x0000000116b6eff4: nop
  0x0000000116b6eff5: nop
  0x0000000116b6eff6: nop
  0x0000000116b6eff7: nop
  0x0000000116b6eff8: int3   
  0x0000000116b6eff9: int3   
  0x0000000116b6effa: int3   
  0x0000000116b6effb: int3   
  0x0000000116b6effc: int3   
  0x0000000116b6effd: int3   
  0x0000000116b6effe: int3   
  0x0000000116b6efff: int3   

----------------------------------------------------------------------
breakpoint  202 breakpoint  [0x0000000116b6f040, 0x0000000116b6f5c0]  1408 bytes

  0x0000000116b6f040: push   %rax
  0x0000000116b6f041: jmpq   0x0000000116b6f070
  0x0000000116b6f046: sub    $0x8,%rsp
  0x0000000116b6f04a: vmovss %xmm0,(%rsp)
  0x0000000116b6f04f: jmpq   0x0000000116b6f070
  0x0000000116b6f054: sub    $0x10,%rsp
  0x0000000116b6f058: vmovsd %xmm0,(%rsp)
  0x0000000116b6f05d: jmpq   0x0000000116b6f070
  0x0000000116b6f062: sub    $0x10,%rsp
  0x0000000116b6f066: mov    %rax,(%rsp)
  0x0000000116b6f06a: jmpq   0x0000000116b6f070
  0x0000000116b6f06f: push   %rax
  0x0000000116b6f070: mov    -0x18(%rbp),%rsi
  0x0000000116b6f074: callq  0x0000000116b6f07e
  0x0000000116b6f079: jmpq   0x0000000116b6f2d0
  0x0000000116b6f07e: mov    %r13,%rdx
  0x0000000116b6f081: lea    0x8(%rsp),%rax
  0x0000000116b6f086: mov    %r13,-0x38(%rbp)
  0x0000000116b6f08a: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6f092: je     0x0000000116b6f10f
  0x0000000116b6f098: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f09d: sub    $0x80,%rsp
  0x0000000116b6f0a4: mov    %rax,0x78(%rsp)
  0x0000000116b6f0a9: mov    %rcx,0x70(%rsp)
  0x0000000116b6f0ae: mov    %rdx,0x68(%rsp)
  0x0000000116b6f0b3: mov    %rbx,0x60(%rsp)
  0x0000000116b6f0b8: mov    %rbp,0x50(%rsp)
  0x0000000116b6f0bd: mov    %rsi,0x48(%rsp)
  0x0000000116b6f0c2: mov    %rdi,0x40(%rsp)
  0x0000000116b6f0c7: mov    %r8,0x38(%rsp)
  0x0000000116b6f0cc: mov    %r9,0x30(%rsp)
  0x0000000116b6f0d1: mov    %r10,0x28(%rsp)
  0x0000000116b6f0d6: mov    %r11,0x20(%rsp)
  0x0000000116b6f0db: mov    %r12,0x18(%rsp)
  0x0000000116b6f0e0: mov    %r13,0x10(%rsp)
  0x0000000116b6f0e5: mov    %r14,0x8(%rsp)
  0x0000000116b6f0ea: mov    %r15,(%rsp)
  0x0000000116b6f0ee: movabs $0x10cc2363b,%rdi
  0x0000000116b6f0f8: movabs $0x116b6f098,%rsi
  0x0000000116b6f102: mov    %rsp,%rdx
  0x0000000116b6f105: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f109: callq  0x000000010c7dd830
  0x0000000116b6f10e: hlt    
  0x0000000116b6f10f: push   %r10
  0x0000000116b6f111: cmp    -0x9d28868(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6f118: je     0x0000000116b6f195
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6f11e: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f123: sub    $0x80,%rsp
  0x0000000116b6f12a: mov    %rax,0x78(%rsp)
  0x0000000116b6f12f: mov    %rcx,0x70(%rsp)
  0x0000000116b6f134: mov    %rdx,0x68(%rsp)
  0x0000000116b6f139: mov    %rbx,0x60(%rsp)
  0x0000000116b6f13e: mov    %rbp,0x50(%rsp)
  0x0000000116b6f143: mov    %rsi,0x48(%rsp)
  0x0000000116b6f148: mov    %rdi,0x40(%rsp)
  0x0000000116b6f14d: mov    %r8,0x38(%rsp)
  0x0000000116b6f152: mov    %r9,0x30(%rsp)
  0x0000000116b6f157: mov    %r10,0x28(%rsp)
  0x0000000116b6f15c: mov    %r11,0x20(%rsp)
  0x0000000116b6f161: mov    %r12,0x18(%rsp)
  0x0000000116b6f166: mov    %r13,0x10(%rsp)
  0x0000000116b6f16b: mov    %r14,0x8(%rsp)
  0x0000000116b6f170: mov    %r15,(%rsp)
  0x0000000116b6f174: movabs $0x10cc63f17,%rdi
  0x0000000116b6f17e: movabs $0x116b6f11e,%rsi
  0x0000000116b6f188: mov    %rsp,%rdx
  0x0000000116b6f18b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f18f: callq  0x000000010c7dd830
  0x0000000116b6f194: hlt    
  0x0000000116b6f195: pop    %r10
  0x0000000116b6f197: mov    %r15,%rdi
  0x0000000116b6f19a: mov    %rbp,0x290(%r15)
  0x0000000116b6f1a1: mov    %rax,0x280(%r15)
  0x0000000116b6f1a8: test   $0xf,%esp
  0x0000000116b6f1ae: je     0x0000000116b6f1c6
  0x0000000116b6f1b4: sub    $0x8,%rsp
  0x0000000116b6f1b8: callq  0x000000010c5896f0
  0x0000000116b6f1bd: add    $0x8,%rsp
  0x0000000116b6f1c1: jmpq   0x0000000116b6f1cb
  0x0000000116b6f1c6: callq  0x000000010c5896f0
  0x0000000116b6f1cb: push   %rax
  0x0000000116b6f1cc: push   %rdi
  0x0000000116b6f1cd: push   %rsi
  0x0000000116b6f1ce: push   %rdx
  0x0000000116b6f1cf: push   %rcx
  0x0000000116b6f1d0: push   %r8
  0x0000000116b6f1d2: push   %r9
  0x0000000116b6f1d4: push   %r10
  0x0000000116b6f1d6: mov    %rsp,%r10
  0x0000000116b6f1d9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f1dd: push   %r10
  0x0000000116b6f1df: push   %r11
  0x0000000116b6f1e1: mov    $0x109,%edi
  0x0000000116b6f1e6: movabs $0x7ff815049fd5,%r10
  0x0000000116b6f1f0: callq  *%r10
  0x0000000116b6f1f3: pop    %r11
  0x0000000116b6f1f5: pop    %rsp
  0x0000000116b6f1f6: pop    %r10
  0x0000000116b6f1f8: pop    %r9
  0x0000000116b6f1fa: pop    %r8
  0x0000000116b6f1fc: pop    %rcx
  0x0000000116b6f1fd: pop    %rdx
  0x0000000116b6f1fe: pop    %rsi
  0x0000000116b6f1ff: pop    %rdi
  0x0000000116b6f200: cmp    %rax,%r15
  0x0000000116b6f203: je     0x0000000116b6f280
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6f209: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f20e: sub    $0x80,%rsp
  0x0000000116b6f215: mov    %rax,0x78(%rsp)
  0x0000000116b6f21a: mov    %rcx,0x70(%rsp)
  0x0000000116b6f21f: mov    %rdx,0x68(%rsp)
  0x0000000116b6f224: mov    %rbx,0x60(%rsp)
  0x0000000116b6f229: mov    %rbp,0x50(%rsp)
  0x0000000116b6f22e: mov    %rsi,0x48(%rsp)
  0x0000000116b6f233: mov    %rdi,0x40(%rsp)
  0x0000000116b6f238: mov    %r8,0x38(%rsp)
  0x0000000116b6f23d: mov    %r9,0x30(%rsp)
  0x0000000116b6f242: mov    %r10,0x28(%rsp)
  0x0000000116b6f247: mov    %r11,0x20(%rsp)
  0x0000000116b6f24c: mov    %r12,0x18(%rsp)
  0x0000000116b6f251: mov    %r13,0x10(%rsp)
  0x0000000116b6f256: mov    %r14,0x8(%rsp)
  0x0000000116b6f25b: mov    %r15,(%rsp)
  0x0000000116b6f25f: movabs $0x10cc6405e,%rdi
  0x0000000116b6f269: movabs $0x116b6f209,%rsi
  0x0000000116b6f273: mov    %rsp,%rdx
  0x0000000116b6f276: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f27a: callq  0x000000010c7dd830
  0x0000000116b6f27f: hlt    
  0x0000000116b6f280: pop    %rax
  0x0000000116b6f281: movabs $0x0,%r10
  0x0000000116b6f28b: mov    %r10,0x280(%r15)
  0x0000000116b6f292: movabs $0x0,%r10
  0x0000000116b6f29c: mov    %r10,0x290(%r15)
  0x0000000116b6f2a3: movabs $0x0,%r10
  0x0000000116b6f2ad: mov    %r10,0x288(%r15)
  0x0000000116b6f2b4: cmpq   $0x0,0x8(%r15)
  0x0000000116b6f2bc: je     0x0000000116b6f2c7
  0x0000000116b6f2c2: jmpq   0x0000000116b30420
  0x0000000116b6f2c7: mov    -0x38(%rbp),%r13
  0x0000000116b6f2cb: mov    -0x30(%rbp),%r14
  0x0000000116b6f2cf: retq   
  0x0000000116b6f2d0: mov    %rax,%rbx
  0x0000000116b6f2d3: mov    -0x18(%rbp),%rsi
  0x0000000116b6f2d7: callq  0x0000000116b6f2e1
  0x0000000116b6f2dc: jmpq   0x0000000116b6f533
  0x0000000116b6f2e1: mov    %r13,%rdx
  0x0000000116b6f2e4: lea    0x8(%rsp),%rax
  0x0000000116b6f2e9: mov    %r13,-0x38(%rbp)
  0x0000000116b6f2ed: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b6f2f5: je     0x0000000116b6f372
  0x0000000116b6f2fb: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f300: sub    $0x80,%rsp
  0x0000000116b6f307: mov    %rax,0x78(%rsp)
  0x0000000116b6f30c: mov    %rcx,0x70(%rsp)
  0x0000000116b6f311: mov    %rdx,0x68(%rsp)
  0x0000000116b6f316: mov    %rbx,0x60(%rsp)
  0x0000000116b6f31b: mov    %rbp,0x50(%rsp)
  0x0000000116b6f320: mov    %rsi,0x48(%rsp)
  0x0000000116b6f325: mov    %rdi,0x40(%rsp)
  0x0000000116b6f32a: mov    %r8,0x38(%rsp)
  0x0000000116b6f32f: mov    %r9,0x30(%rsp)
  0x0000000116b6f334: mov    %r10,0x28(%rsp)
  0x0000000116b6f339: mov    %r11,0x20(%rsp)
  0x0000000116b6f33e: mov    %r12,0x18(%rsp)
  0x0000000116b6f343: mov    %r13,0x10(%rsp)
  0x0000000116b6f348: mov    %r14,0x8(%rsp)
  0x0000000116b6f34d: mov    %r15,(%rsp)
  0x0000000116b6f351: movabs $0x10cc2363b,%rdi
  0x0000000116b6f35b: movabs $0x116b6f2fb,%rsi
  0x0000000116b6f365: mov    %rsp,%rdx
  0x0000000116b6f368: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f36c: callq  0x000000010c7dd830
  0x0000000116b6f371: hlt    
  0x0000000116b6f372: push   %r10
  0x0000000116b6f374: cmp    -0x9d28acb(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6f37b: je     0x0000000116b6f3f8
  ;; call_VM_base: heap base corrupted?
  0x0000000116b6f381: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f386: sub    $0x80,%rsp
  0x0000000116b6f38d: mov    %rax,0x78(%rsp)
  0x0000000116b6f392: mov    %rcx,0x70(%rsp)
  0x0000000116b6f397: mov    %rdx,0x68(%rsp)
  0x0000000116b6f39c: mov    %rbx,0x60(%rsp)
  0x0000000116b6f3a1: mov    %rbp,0x50(%rsp)
  0x0000000116b6f3a6: mov    %rsi,0x48(%rsp)
  0x0000000116b6f3ab: mov    %rdi,0x40(%rsp)
  0x0000000116b6f3b0: mov    %r8,0x38(%rsp)
  0x0000000116b6f3b5: mov    %r9,0x30(%rsp)
  0x0000000116b6f3ba: mov    %r10,0x28(%rsp)
  0x0000000116b6f3bf: mov    %r11,0x20(%rsp)
  0x0000000116b6f3c4: mov    %r12,0x18(%rsp)
  0x0000000116b6f3c9: mov    %r13,0x10(%rsp)
  0x0000000116b6f3ce: mov    %r14,0x8(%rsp)
  0x0000000116b6f3d3: mov    %r15,(%rsp)
  0x0000000116b6f3d7: movabs $0x10cc63f17,%rdi
  0x0000000116b6f3e1: movabs $0x116b6f381,%rsi
  0x0000000116b6f3eb: mov    %rsp,%rdx
  0x0000000116b6f3ee: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f3f2: callq  0x000000010c7dd830
  0x0000000116b6f3f7: hlt    
  0x0000000116b6f3f8: pop    %r10
  0x0000000116b6f3fa: mov    %r15,%rdi
  0x0000000116b6f3fd: mov    %rbp,0x290(%r15)
  0x0000000116b6f404: mov    %rax,0x280(%r15)
  0x0000000116b6f40b: test   $0xf,%esp
  0x0000000116b6f411: je     0x0000000116b6f429
  0x0000000116b6f417: sub    $0x8,%rsp
  0x0000000116b6f41b: callq  0x000000010c5899d0
  0x0000000116b6f420: add    $0x8,%rsp
  0x0000000116b6f424: jmpq   0x0000000116b6f42e
  0x0000000116b6f429: callq  0x000000010c5899d0
  0x0000000116b6f42e: push   %rax
  0x0000000116b6f42f: push   %rdi
  0x0000000116b6f430: push   %rsi
  0x0000000116b6f431: push   %rdx
  0x0000000116b6f432: push   %rcx
  0x0000000116b6f433: push   %r8
  0x0000000116b6f435: push   %r9
  0x0000000116b6f437: push   %r10
  0x0000000116b6f439: mov    %rsp,%r10
  0x0000000116b6f43c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f440: push   %r10
  0x0000000116b6f442: push   %r11
  0x0000000116b6f444: mov    $0x109,%edi
  0x0000000116b6f449: movabs $0x7ff815049fd5,%r10
  0x0000000116b6f453: callq  *%r10
  0x0000000116b6f456: pop    %r11
  0x0000000116b6f458: pop    %rsp
  0x0000000116b6f459: pop    %r10
  0x0000000116b6f45b: pop    %r9
  0x0000000116b6f45d: pop    %r8
  0x0000000116b6f45f: pop    %rcx
  0x0000000116b6f460: pop    %rdx
  0x0000000116b6f461: pop    %rsi
  0x0000000116b6f462: pop    %rdi
  0x0000000116b6f463: cmp    %rax,%r15
  0x0000000116b6f466: je     0x0000000116b6f4e3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b6f46c: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f471: sub    $0x80,%rsp
  0x0000000116b6f478: mov    %rax,0x78(%rsp)
  0x0000000116b6f47d: mov    %rcx,0x70(%rsp)
  0x0000000116b6f482: mov    %rdx,0x68(%rsp)
  0x0000000116b6f487: mov    %rbx,0x60(%rsp)
  0x0000000116b6f48c: mov    %rbp,0x50(%rsp)
  0x0000000116b6f491: mov    %rsi,0x48(%rsp)
  0x0000000116b6f496: mov    %rdi,0x40(%rsp)
  0x0000000116b6f49b: mov    %r8,0x38(%rsp)
  0x0000000116b6f4a0: mov    %r9,0x30(%rsp)
  0x0000000116b6f4a5: mov    %r10,0x28(%rsp)
  0x0000000116b6f4aa: mov    %r11,0x20(%rsp)
  0x0000000116b6f4af: mov    %r12,0x18(%rsp)
  0x0000000116b6f4b4: mov    %r13,0x10(%rsp)
  0x0000000116b6f4b9: mov    %r14,0x8(%rsp)
  0x0000000116b6f4be: mov    %r15,(%rsp)
  0x0000000116b6f4c2: movabs $0x10cc6405e,%rdi
  0x0000000116b6f4cc: movabs $0x116b6f46c,%rsi
  0x0000000116b6f4d6: mov    %rsp,%rdx
  0x0000000116b6f4d9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f4dd: callq  0x000000010c7dd830
  0x0000000116b6f4e2: hlt    
  0x0000000116b6f4e3: pop    %rax
  0x0000000116b6f4e4: movabs $0x0,%r10
  0x0000000116b6f4ee: mov    %r10,0x280(%r15)
  0x0000000116b6f4f5: movabs $0x0,%r10
  0x0000000116b6f4ff: mov    %r10,0x290(%r15)
  0x0000000116b6f506: movabs $0x0,%r10
  0x0000000116b6f510: mov    %r10,0x288(%r15)
  0x0000000116b6f517: cmpq   $0x0,0x8(%r15)
  0x0000000116b6f51f: je     0x0000000116b6f52a
  0x0000000116b6f525: jmpq   0x0000000116b30420
  0x0000000116b6f52a: mov    -0x38(%rbp),%r13
  0x0000000116b6f52e: mov    -0x30(%rbp),%r14
  0x0000000116b6f532: retq   
  0x0000000116b6f533: movabs $0x10ce36680,%r10
  0x0000000116b6f53d: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f541: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f546: sub    $0x80,%rsp
  0x0000000116b6f54d: mov    %rax,0x78(%rsp)
  0x0000000116b6f552: mov    %rcx,0x70(%rsp)
  0x0000000116b6f557: mov    %rdx,0x68(%rsp)
  0x0000000116b6f55c: mov    %rbx,0x60(%rsp)
  0x0000000116b6f561: mov    %rbp,0x50(%rsp)
  0x0000000116b6f566: mov    %rsi,0x48(%rsp)
  0x0000000116b6f56b: mov    %rdi,0x40(%rsp)
  0x0000000116b6f570: mov    %r8,0x38(%rsp)
  0x0000000116b6f575: mov    %r9,0x30(%rsp)
  0x0000000116b6f57a: mov    %r10,0x28(%rsp)
  0x0000000116b6f57f: mov    %r11,0x20(%rsp)
  0x0000000116b6f584: mov    %r12,0x18(%rsp)
  0x0000000116b6f589: mov    %r13,0x10(%rsp)
  0x0000000116b6f58e: mov    %r14,0x8(%rsp)
  0x0000000116b6f593: mov    %r15,(%rsp)
  0x0000000116b6f597: movabs $0x10cb763be,%rdi
  0x0000000116b6f5a1: movabs $0x116b6f541,%rsi
  0x0000000116b6f5ab: mov    %rsp,%rdx
  0x0000000116b6f5ae: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f5b2: callq  0x000000010c7dd830
  0x0000000116b6f5b7: hlt    
  0x0000000116b6f5b8: int3   
  0x0000000116b6f5b9: int3   
  0x0000000116b6f5ba: int3   
  0x0000000116b6f5bb: int3   
  0x0000000116b6f5bc: int3   
  0x0000000116b6f5bd: int3   
  0x0000000116b6f5be: int3   
  0x0000000116b6f5bf: int3   

----------------------------------------------------------------------
fast_agetfield  203 fast_agetfield  [0x0000000116b6f600, 0x0000000116b6f6c0]  192 bytes

  0x0000000116b6f600: pop    %rax
  0x0000000116b6f601: movzwl 0x1(%r13),%ebx
  0x0000000116b6f606: mov    -0x28(%rbp),%rcx
  0x0000000116b6f60a: shl    $0x2,%ebx
  0x0000000116b6f60d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f612: cmp    (%rax),%rax
  0x0000000116b6f615: mov    (%rax,%rbx,1),%eax
  0x0000000116b6f618: push   %r10
  0x0000000116b6f61a: cmp    -0x9d28d71(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6f621: je     0x0000000116b6f69e
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b6f627: mov    %rsp,-0x28(%rsp)
  0x0000000116b6f62c: sub    $0x80,%rsp
  0x0000000116b6f633: mov    %rax,0x78(%rsp)
  0x0000000116b6f638: mov    %rcx,0x70(%rsp)
  0x0000000116b6f63d: mov    %rdx,0x68(%rsp)
  0x0000000116b6f642: mov    %rbx,0x60(%rsp)
  0x0000000116b6f647: mov    %rbp,0x50(%rsp)
  0x0000000116b6f64c: mov    %rsi,0x48(%rsp)
  0x0000000116b6f651: mov    %rdi,0x40(%rsp)
  0x0000000116b6f656: mov    %r8,0x38(%rsp)
  0x0000000116b6f65b: mov    %r9,0x30(%rsp)
  0x0000000116b6f660: mov    %r10,0x28(%rsp)
  0x0000000116b6f665: mov    %r11,0x20(%rsp)
  0x0000000116b6f66a: mov    %r12,0x18(%rsp)
  0x0000000116b6f66f: mov    %r13,0x10(%rsp)
  0x0000000116b6f674: mov    %r14,0x8(%rsp)
  0x0000000116b6f679: mov    %r15,(%rsp)
  0x0000000116b6f67d: movabs $0x10cc64abb,%rdi
  0x0000000116b6f687: movabs $0x116b6f627,%rsi
  0x0000000116b6f691: mov    %rsp,%rdx
  0x0000000116b6f694: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6f698: callq  0x000000010c7dd830
  0x0000000116b6f69d: hlt    
  0x0000000116b6f69e: pop    %r10
  0x0000000116b6f6a0: shl    $0x3,%rax
  0x0000000116b6f6a4: movzbl 0x3(%r13),%ebx
  0x0000000116b6f6a9: add    $0x3,%r13
  0x0000000116b6f6ad: movabs $0x10ce3ae80,%r10
  0x0000000116b6f6b7: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f6bb: nop
  0x0000000116b6f6bc: nop
  0x0000000116b6f6bd: nop
  0x0000000116b6f6be: nop
  0x0000000116b6f6bf: nop

----------------------------------------------------------------------
fast_bgetfield  204 fast_bgetfield  [0x0000000116b6f700, 0x0000000116b6f740]  64 bytes

  0x0000000116b6f700: pop    %rax
  0x0000000116b6f701: movzwl 0x1(%r13),%ebx
  0x0000000116b6f706: mov    -0x28(%rbp),%rcx
  0x0000000116b6f70a: shl    $0x2,%ebx
  0x0000000116b6f70d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f712: cmp    (%rax),%rax
  0x0000000116b6f715: movsbl (%rax,%rbx,1),%eax
  0x0000000116b6f719: movzbl 0x3(%r13),%ebx
  0x0000000116b6f71e: add    $0x3,%r13
  0x0000000116b6f722: movabs $0x10ce38e80,%r10
  0x0000000116b6f72c: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f730: int3   
  0x0000000116b6f731: int3   
  0x0000000116b6f732: int3   
  0x0000000116b6f733: int3   
  0x0000000116b6f734: int3   
  0x0000000116b6f735: int3   
  0x0000000116b6f736: int3   
  0x0000000116b6f737: int3   
  0x0000000116b6f738: int3   
  0x0000000116b6f739: int3   
  0x0000000116b6f73a: int3   
  0x0000000116b6f73b: int3   
  0x0000000116b6f73c: int3   
  0x0000000116b6f73d: int3   
  0x0000000116b6f73e: int3   
  0x0000000116b6f73f: int3   

----------------------------------------------------------------------
fast_cgetfield  205 fast_cgetfield  [0x0000000116b6f780, 0x0000000116b6f7c0]  64 bytes

  0x0000000116b6f780: pop    %rax
  0x0000000116b6f781: movzwl 0x1(%r13),%ebx
  0x0000000116b6f786: mov    -0x28(%rbp),%rcx
  0x0000000116b6f78a: shl    $0x2,%ebx
  0x0000000116b6f78d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f792: cmp    (%rax),%rax
  0x0000000116b6f795: movzwl (%rax,%rbx,1),%eax
  0x0000000116b6f799: movzbl 0x3(%r13),%ebx
  0x0000000116b6f79e: add    $0x3,%r13
  0x0000000116b6f7a2: movabs $0x10ce38e80,%r10
  0x0000000116b6f7ac: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f7b0: int3   
  0x0000000116b6f7b1: int3   
  0x0000000116b6f7b2: int3   
  0x0000000116b6f7b3: int3   
  0x0000000116b6f7b4: int3   
  0x0000000116b6f7b5: int3   
  0x0000000116b6f7b6: int3   
  0x0000000116b6f7b7: int3   
  0x0000000116b6f7b8: int3   
  0x0000000116b6f7b9: int3   
  0x0000000116b6f7ba: int3   
  0x0000000116b6f7bb: int3   
  0x0000000116b6f7bc: int3   
  0x0000000116b6f7bd: int3   
  0x0000000116b6f7be: int3   
  0x0000000116b6f7bf: int3   

----------------------------------------------------------------------
fast_dgetfield  206 fast_dgetfield  [0x0000000116b6f800, 0x0000000116b6f840]  64 bytes

  0x0000000116b6f800: pop    %rax
  0x0000000116b6f801: movzwl 0x1(%r13),%ebx
  0x0000000116b6f806: mov    -0x28(%rbp),%rcx
  0x0000000116b6f80a: shl    $0x2,%ebx
  0x0000000116b6f80d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f812: cmp    (%rax),%rax
  0x0000000116b6f815: vmovsd (%rax,%rbx,1),%xmm0
  0x0000000116b6f81a: movzbl 0x3(%r13),%ebx
  0x0000000116b6f81f: add    $0x3,%r13
  0x0000000116b6f823: movabs $0x10ce3a680,%r10
  0x0000000116b6f82d: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f831: nop
  0x0000000116b6f832: nop
  0x0000000116b6f833: nop
  0x0000000116b6f834: nop
  0x0000000116b6f835: nop
  0x0000000116b6f836: nop
  0x0000000116b6f837: nop
  0x0000000116b6f838: int3   
  0x0000000116b6f839: int3   
  0x0000000116b6f83a: int3   
  0x0000000116b6f83b: int3   
  0x0000000116b6f83c: int3   
  0x0000000116b6f83d: int3   
  0x0000000116b6f83e: int3   
  0x0000000116b6f83f: int3   

----------------------------------------------------------------------
fast_fgetfield  207 fast_fgetfield  [0x0000000116b6f880, 0x0000000116b6f8c0]  64 bytes

  0x0000000116b6f880: pop    %rax
  0x0000000116b6f881: movzwl 0x1(%r13),%ebx
  0x0000000116b6f886: mov    -0x28(%rbp),%rcx
  0x0000000116b6f88a: shl    $0x2,%ebx
  0x0000000116b6f88d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f892: cmp    (%rax),%rax
  0x0000000116b6f895: vmovss (%rax,%rbx,1),%xmm0
  0x0000000116b6f89a: movzbl 0x3(%r13),%ebx
  0x0000000116b6f89f: add    $0x3,%r13
  0x0000000116b6f8a3: movabs $0x10ce39e80,%r10
  0x0000000116b6f8ad: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f8b1: nop
  0x0000000116b6f8b2: nop
  0x0000000116b6f8b3: nop
  0x0000000116b6f8b4: nop
  0x0000000116b6f8b5: nop
  0x0000000116b6f8b6: nop
  0x0000000116b6f8b7: nop
  0x0000000116b6f8b8: int3   
  0x0000000116b6f8b9: int3   
  0x0000000116b6f8ba: int3   
  0x0000000116b6f8bb: int3   
  0x0000000116b6f8bc: int3   
  0x0000000116b6f8bd: int3   
  0x0000000116b6f8be: int3   
  0x0000000116b6f8bf: int3   

----------------------------------------------------------------------
fast_igetfield  208 fast_igetfield  [0x0000000116b6f900, 0x0000000116b6f940]  64 bytes

  0x0000000116b6f900: pop    %rax
  0x0000000116b6f901: movzwl 0x1(%r13),%ebx
  0x0000000116b6f906: mov    -0x28(%rbp),%rcx
  0x0000000116b6f90a: shl    $0x2,%ebx
  0x0000000116b6f90d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f912: cmp    (%rax),%rax
  0x0000000116b6f915: mov    (%rax,%rbx,1),%eax
  0x0000000116b6f918: movzbl 0x3(%r13),%ebx
  0x0000000116b6f91d: add    $0x3,%r13
  0x0000000116b6f921: movabs $0x10ce38e80,%r10
  0x0000000116b6f92b: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f92f: nop
  0x0000000116b6f930: int3   
  0x0000000116b6f931: int3   
  0x0000000116b6f932: int3   
  0x0000000116b6f933: int3   
  0x0000000116b6f934: int3   
  0x0000000116b6f935: int3   
  0x0000000116b6f936: int3   
  0x0000000116b6f937: int3   
  0x0000000116b6f938: int3   
  0x0000000116b6f939: int3   
  0x0000000116b6f93a: int3   
  0x0000000116b6f93b: int3   
  0x0000000116b6f93c: int3   
  0x0000000116b6f93d: int3   
  0x0000000116b6f93e: int3   
  0x0000000116b6f93f: int3   

----------------------------------------------------------------------
fast_lgetfield  209 fast_lgetfield  [0x0000000116b6f980, 0x0000000116b6f9c0]  64 bytes

  0x0000000116b6f980: pop    %rax
  0x0000000116b6f981: movzwl 0x1(%r13),%ebx
  0x0000000116b6f986: mov    -0x28(%rbp),%rcx
  0x0000000116b6f98a: shl    $0x2,%ebx
  0x0000000116b6f98d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6f992: cmp    (%rax),%rax
  0x0000000116b6f995: mov    (%rax,%rbx,1),%rax
  0x0000000116b6f999: movzbl 0x3(%r13),%ebx
  0x0000000116b6f99e: add    $0x3,%r13
  0x0000000116b6f9a2: movabs $0x10ce39680,%r10
  0x0000000116b6f9ac: jmpq   *(%r10,%rbx,8)
  0x0000000116b6f9b0: int3   
  0x0000000116b6f9b1: int3   
  0x0000000116b6f9b2: int3   
  0x0000000116b6f9b3: int3   
  0x0000000116b6f9b4: int3   
  0x0000000116b6f9b5: int3   
  0x0000000116b6f9b6: int3   
  0x0000000116b6f9b7: int3   
  0x0000000116b6f9b8: int3   
  0x0000000116b6f9b9: int3   
  0x0000000116b6f9ba: int3   
  0x0000000116b6f9bb: int3   
  0x0000000116b6f9bc: int3   
  0x0000000116b6f9bd: int3   
  0x0000000116b6f9be: int3   
  0x0000000116b6f9bf: int3   

----------------------------------------------------------------------
fast_sgetfield  210 fast_sgetfield  [0x0000000116b6fa00, 0x0000000116b6fa40]  64 bytes

  0x0000000116b6fa00: pop    %rax
  0x0000000116b6fa01: movzwl 0x1(%r13),%ebx
  0x0000000116b6fa06: mov    -0x28(%rbp),%rcx
  0x0000000116b6fa0a: shl    $0x2,%ebx
  0x0000000116b6fa0d: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fa12: cmp    (%rax),%rax
  0x0000000116b6fa15: movswl (%rax,%rbx,1),%eax
  0x0000000116b6fa19: movzbl 0x3(%r13),%ebx
  0x0000000116b6fa1e: add    $0x3,%r13
  0x0000000116b6fa22: movabs $0x10ce38e80,%r10
  0x0000000116b6fa2c: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fa30: int3   
  0x0000000116b6fa31: int3   
  0x0000000116b6fa32: int3   
  0x0000000116b6fa33: int3   
  0x0000000116b6fa34: int3   
  0x0000000116b6fa35: int3   
  0x0000000116b6fa36: int3   
  0x0000000116b6fa37: int3   
  0x0000000116b6fa38: int3   
  0x0000000116b6fa39: int3   
  0x0000000116b6fa3a: int3   
  0x0000000116b6fa3b: int3   
  0x0000000116b6fa3c: int3   
  0x0000000116b6fa3d: int3   
  0x0000000116b6fa3e: int3   
  0x0000000116b6fa3f: int3   

----------------------------------------------------------------------
fast_aputfield  211 fast_aputfield  [0x0000000116b6fa80, 0x0000000116b6fb80]  256 bytes

  0x0000000116b6fa80: pop    %rax
  0x0000000116b6fa81: movzwl 0x1(%r13),%ebx
  0x0000000116b6fa86: mov    -0x28(%rbp),%rcx
  0x0000000116b6fa8a: shl    $0x2,%ebx
  0x0000000116b6fa8d: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fa91: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fa96: shr    $0x15,%edx
  0x0000000116b6fa99: and    $0x1,%edx
  0x0000000116b6fa9c: pop    %rcx
  0x0000000116b6fa9d: cmp    (%rcx),%rax
  0x0000000116b6faa0: push   %r10
  0x0000000116b6faa2: cmp    -0x9d291f9(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b6faa9: je     0x0000000116b6fb26
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x0000000116b6faaf: mov    %rsp,-0x28(%rsp)
  0x0000000116b6fab4: sub    $0x80,%rsp
  0x0000000116b6fabb: mov    %rax,0x78(%rsp)
  0x0000000116b6fac0: mov    %rcx,0x70(%rsp)
  0x0000000116b6fac5: mov    %rdx,0x68(%rsp)
  0x0000000116b6faca: mov    %rbx,0x60(%rsp)
  0x0000000116b6facf: mov    %rbp,0x50(%rsp)
  0x0000000116b6fad4: mov    %rsi,0x48(%rsp)
  0x0000000116b6fad9: mov    %rdi,0x40(%rsp)
  0x0000000116b6fade: mov    %r8,0x38(%rsp)
  0x0000000116b6fae3: mov    %r9,0x30(%rsp)
  0x0000000116b6fae8: mov    %r10,0x28(%rsp)
  0x0000000116b6faed: mov    %r11,0x20(%rsp)
  0x0000000116b6faf2: mov    %r12,0x18(%rsp)
  0x0000000116b6faf7: mov    %r13,0x10(%rsp)
  0x0000000116b6fafc: mov    %r14,0x8(%rsp)
  0x0000000116b6fb01: mov    %r15,(%rsp)
  0x0000000116b6fb05: movabs $0x10cc648e6,%rdi
  0x0000000116b6fb0f: movabs $0x116b6faaf,%rsi
  0x0000000116b6fb19: mov    %rsp,%rdx
  0x0000000116b6fb1c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b6fb20: callq  0x000000010c7dd830
  0x0000000116b6fb25: hlt    
  0x0000000116b6fb26: pop    %r10
  0x0000000116b6fb28: shr    $0x3,%rax
  0x0000000116b6fb2c: mov    %eax,(%rcx,%rbx,1)
  0x0000000116b6fb2f: shr    $0x9,%rcx
  0x0000000116b6fb33: movabs $0x1071e1000,%r10
  0x0000000116b6fb3d: movb   $0x0,(%r10,%rcx,1)
  0x0000000116b6fb42: test   %edx,%edx
  0x0000000116b6fb44: je     0x0000000116b6fb4f
  0x0000000116b6fb4a: lock addl $0x0,(%rsp)
  0x0000000116b6fb4f: movzbl 0x3(%r13),%ebx
  0x0000000116b6fb54: add    $0x3,%r13
  0x0000000116b6fb58: movabs $0x10ce3b680,%r10
  0x0000000116b6fb62: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fb66: nop
  0x0000000116b6fb67: nop
  0x0000000116b6fb68: int3   
  0x0000000116b6fb69: int3   
  0x0000000116b6fb6a: int3   
  0x0000000116b6fb6b: int3   
  0x0000000116b6fb6c: int3   
  0x0000000116b6fb6d: int3   
  0x0000000116b6fb6e: int3   
  0x0000000116b6fb6f: int3   
  0x0000000116b6fb70: int3   
  0x0000000116b6fb71: int3   
  0x0000000116b6fb72: int3   
  0x0000000116b6fb73: int3   
  0x0000000116b6fb74: int3   
  0x0000000116b6fb75: int3   
  0x0000000116b6fb76: int3   
  0x0000000116b6fb77: int3   
  0x0000000116b6fb78: int3   
  0x0000000116b6fb79: int3   
  0x0000000116b6fb7a: int3   
  0x0000000116b6fb7b: int3   
  0x0000000116b6fb7c: int3   
  0x0000000116b6fb7d: int3   
  0x0000000116b6fb7e: int3   
  0x0000000116b6fb7f: int3   

----------------------------------------------------------------------
fast_bputfield  212 fast_bputfield  [0x0000000116b6fbc0, 0x0000000116b6fc20]  96 bytes

  0x0000000116b6fbc0: mov    (%rsp),%eax
  0x0000000116b6fbc3: add    $0x8,%rsp
  0x0000000116b6fbc7: movzwl 0x1(%r13),%ebx
  0x0000000116b6fbcc: mov    -0x28(%rbp),%rcx
  0x0000000116b6fbd0: shl    $0x2,%ebx
  0x0000000116b6fbd3: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fbd7: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fbdc: shr    $0x15,%edx
  0x0000000116b6fbdf: and    $0x1,%edx
  0x0000000116b6fbe2: pop    %rcx
  0x0000000116b6fbe3: cmp    (%rcx),%rax
  0x0000000116b6fbe6: mov    %al,(%rcx,%rbx,1)
  0x0000000116b6fbe9: test   %edx,%edx
  0x0000000116b6fbeb: je     0x0000000116b6fbf6
  0x0000000116b6fbf1: lock addl $0x0,(%rsp)
  0x0000000116b6fbf6: movzbl 0x3(%r13),%ebx
  0x0000000116b6fbfb: add    $0x3,%r13
  0x0000000116b6fbff: movabs $0x10ce3b680,%r10
  0x0000000116b6fc09: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fc0d: nop
  0x0000000116b6fc0e: nop
  0x0000000116b6fc0f: nop
  0x0000000116b6fc10: int3   
  0x0000000116b6fc11: int3   
  0x0000000116b6fc12: int3   
  0x0000000116b6fc13: int3   
  0x0000000116b6fc14: int3   
  0x0000000116b6fc15: int3   
  0x0000000116b6fc16: int3   
  0x0000000116b6fc17: int3   
  0x0000000116b6fc18: int3   
  0x0000000116b6fc19: int3   
  0x0000000116b6fc1a: int3   
  0x0000000116b6fc1b: int3   
  0x0000000116b6fc1c: int3   
  0x0000000116b6fc1d: int3   
  0x0000000116b6fc1e: int3   
  0x0000000116b6fc1f: int3   

----------------------------------------------------------------------
fast_zputfield  213 fast_zputfield  [0x0000000116b6fc60, 0x0000000116b6fcc0]  96 bytes

  0x0000000116b6fc60: mov    (%rsp),%eax
  0x0000000116b6fc63: add    $0x8,%rsp
  0x0000000116b6fc67: movzwl 0x1(%r13),%ebx
  0x0000000116b6fc6c: mov    -0x28(%rbp),%rcx
  0x0000000116b6fc70: shl    $0x2,%ebx
  0x0000000116b6fc73: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fc77: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fc7c: shr    $0x15,%edx
  0x0000000116b6fc7f: and    $0x1,%edx
  0x0000000116b6fc82: pop    %rcx
  0x0000000116b6fc83: cmp    (%rcx),%rax
  0x0000000116b6fc86: and    $0x1,%eax
  0x0000000116b6fc89: mov    %al,(%rcx,%rbx,1)
  0x0000000116b6fc8c: test   %edx,%edx
  0x0000000116b6fc8e: je     0x0000000116b6fc99
  0x0000000116b6fc94: lock addl $0x0,(%rsp)
  0x0000000116b6fc99: movzbl 0x3(%r13),%ebx
  0x0000000116b6fc9e: add    $0x3,%r13
  0x0000000116b6fca2: movabs $0x10ce3b680,%r10
  0x0000000116b6fcac: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fcb0: int3   
  0x0000000116b6fcb1: int3   
  0x0000000116b6fcb2: int3   
  0x0000000116b6fcb3: int3   
  0x0000000116b6fcb4: int3   
  0x0000000116b6fcb5: int3   
  0x0000000116b6fcb6: int3   
  0x0000000116b6fcb7: int3   
  0x0000000116b6fcb8: int3   
  0x0000000116b6fcb9: int3   
  0x0000000116b6fcba: int3   
  0x0000000116b6fcbb: int3   
  0x0000000116b6fcbc: int3   
  0x0000000116b6fcbd: int3   
  0x0000000116b6fcbe: int3   
  0x0000000116b6fcbf: int3   

----------------------------------------------------------------------
fast_cputfield  214 fast_cputfield  [0x0000000116b6fd00, 0x0000000116b6fd60]  96 bytes

  0x0000000116b6fd00: mov    (%rsp),%eax
  0x0000000116b6fd03: add    $0x8,%rsp
  0x0000000116b6fd07: movzwl 0x1(%r13),%ebx
  0x0000000116b6fd0c: mov    -0x28(%rbp),%rcx
  0x0000000116b6fd10: shl    $0x2,%ebx
  0x0000000116b6fd13: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fd17: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fd1c: shr    $0x15,%edx
  0x0000000116b6fd1f: and    $0x1,%edx
  0x0000000116b6fd22: pop    %rcx
  0x0000000116b6fd23: cmp    (%rcx),%rax
  0x0000000116b6fd26: mov    %ax,(%rcx,%rbx,1)
  0x0000000116b6fd2a: test   %edx,%edx
  0x0000000116b6fd2c: je     0x0000000116b6fd37
  0x0000000116b6fd32: lock addl $0x0,(%rsp)
  0x0000000116b6fd37: movzbl 0x3(%r13),%ebx
  0x0000000116b6fd3c: add    $0x3,%r13
  0x0000000116b6fd40: movabs $0x10ce3b680,%r10
  0x0000000116b6fd4a: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fd4e: nop
  0x0000000116b6fd4f: nop
  0x0000000116b6fd50: int3   
  0x0000000116b6fd51: int3   
  0x0000000116b6fd52: int3   
  0x0000000116b6fd53: int3   
  0x0000000116b6fd54: int3   
  0x0000000116b6fd55: int3   
  0x0000000116b6fd56: int3   
  0x0000000116b6fd57: int3   
  0x0000000116b6fd58: int3   
  0x0000000116b6fd59: int3   
  0x0000000116b6fd5a: int3   
  0x0000000116b6fd5b: int3   
  0x0000000116b6fd5c: int3   
  0x0000000116b6fd5d: int3   
  0x0000000116b6fd5e: int3   
  0x0000000116b6fd5f: int3   

----------------------------------------------------------------------
fast_dputfield  215 fast_dputfield  [0x0000000116b6fda0, 0x0000000116b6fe00]  96 bytes

  0x0000000116b6fda0: vmovsd (%rsp),%xmm0
  0x0000000116b6fda5: add    $0x10,%rsp
  0x0000000116b6fda9: movzwl 0x1(%r13),%ebx
  0x0000000116b6fdae: mov    -0x28(%rbp),%rcx
  0x0000000116b6fdb2: shl    $0x2,%ebx
  0x0000000116b6fdb5: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fdb9: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fdbe: shr    $0x15,%edx
  0x0000000116b6fdc1: and    $0x1,%edx
  0x0000000116b6fdc4: pop    %rcx
  0x0000000116b6fdc5: cmp    (%rcx),%rax
  0x0000000116b6fdc8: vmovsd %xmm0,(%rcx,%rbx,1)
  0x0000000116b6fdcd: test   %edx,%edx
  0x0000000116b6fdcf: je     0x0000000116b6fdda
  0x0000000116b6fdd5: lock addl $0x0,(%rsp)
  0x0000000116b6fdda: movzbl 0x3(%r13),%ebx
  0x0000000116b6fddf: add    $0x3,%r13
  0x0000000116b6fde3: movabs $0x10ce3b680,%r10
  0x0000000116b6fded: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fdf1: nop
  0x0000000116b6fdf2: nop
  0x0000000116b6fdf3: nop
  0x0000000116b6fdf4: nop
  0x0000000116b6fdf5: nop
  0x0000000116b6fdf6: nop
  0x0000000116b6fdf7: nop
  0x0000000116b6fdf8: int3   
  0x0000000116b6fdf9: int3   
  0x0000000116b6fdfa: int3   
  0x0000000116b6fdfb: int3   
  0x0000000116b6fdfc: int3   
  0x0000000116b6fdfd: int3   
  0x0000000116b6fdfe: int3   
  0x0000000116b6fdff: int3   

----------------------------------------------------------------------
fast_fputfield  216 fast_fputfield  [0x0000000116b6fe40, 0x0000000116b6fea0]  96 bytes

  0x0000000116b6fe40: vmovss (%rsp),%xmm0
  0x0000000116b6fe45: add    $0x8,%rsp
  0x0000000116b6fe49: movzwl 0x1(%r13),%ebx
  0x0000000116b6fe4e: mov    -0x28(%rbp),%rcx
  0x0000000116b6fe52: shl    $0x2,%ebx
  0x0000000116b6fe55: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fe59: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fe5e: shr    $0x15,%edx
  0x0000000116b6fe61: and    $0x1,%edx
  0x0000000116b6fe64: pop    %rcx
  0x0000000116b6fe65: cmp    (%rcx),%rax
  0x0000000116b6fe68: vmovss %xmm0,(%rcx,%rbx,1)
  0x0000000116b6fe6d: test   %edx,%edx
  0x0000000116b6fe6f: je     0x0000000116b6fe7a
  0x0000000116b6fe75: lock addl $0x0,(%rsp)
  0x0000000116b6fe7a: movzbl 0x3(%r13),%ebx
  0x0000000116b6fe7f: add    $0x3,%r13
  0x0000000116b6fe83: movabs $0x10ce3b680,%r10
  0x0000000116b6fe8d: jmpq   *(%r10,%rbx,8)
  0x0000000116b6fe91: nop
  0x0000000116b6fe92: nop
  0x0000000116b6fe93: nop
  0x0000000116b6fe94: nop
  0x0000000116b6fe95: nop
  0x0000000116b6fe96: nop
  0x0000000116b6fe97: nop
  0x0000000116b6fe98: int3   
  0x0000000116b6fe99: int3   
  0x0000000116b6fe9a: int3   
  0x0000000116b6fe9b: int3   
  0x0000000116b6fe9c: int3   
  0x0000000116b6fe9d: int3   
  0x0000000116b6fe9e: int3   
  0x0000000116b6fe9f: int3   

----------------------------------------------------------------------
fast_iputfield  217 fast_iputfield  [0x0000000116b6fee0, 0x0000000116b6ff40]  96 bytes

  0x0000000116b6fee0: mov    (%rsp),%eax
  0x0000000116b6fee3: add    $0x8,%rsp
  0x0000000116b6fee7: movzwl 0x1(%r13),%ebx
  0x0000000116b6feec: mov    -0x28(%rbp),%rcx
  0x0000000116b6fef0: shl    $0x2,%ebx
  0x0000000116b6fef3: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6fef7: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6fefc: shr    $0x15,%edx
  0x0000000116b6feff: and    $0x1,%edx
  0x0000000116b6ff02: pop    %rcx
  0x0000000116b6ff03: cmp    (%rcx),%rax
  0x0000000116b6ff06: mov    %eax,(%rcx,%rbx,1)
  0x0000000116b6ff09: test   %edx,%edx
  0x0000000116b6ff0b: je     0x0000000116b6ff16
  0x0000000116b6ff11: lock addl $0x0,(%rsp)
  0x0000000116b6ff16: movzbl 0x3(%r13),%ebx
  0x0000000116b6ff1b: add    $0x3,%r13
  0x0000000116b6ff1f: movabs $0x10ce3b680,%r10
  0x0000000116b6ff29: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ff2d: nop
  0x0000000116b6ff2e: nop
  0x0000000116b6ff2f: nop
  0x0000000116b6ff30: int3   
  0x0000000116b6ff31: int3   
  0x0000000116b6ff32: int3   
  0x0000000116b6ff33: int3   
  0x0000000116b6ff34: int3   
  0x0000000116b6ff35: int3   
  0x0000000116b6ff36: int3   
  0x0000000116b6ff37: int3   
  0x0000000116b6ff38: int3   
  0x0000000116b6ff39: int3   
  0x0000000116b6ff3a: int3   
  0x0000000116b6ff3b: int3   
  0x0000000116b6ff3c: int3   
  0x0000000116b6ff3d: int3   
  0x0000000116b6ff3e: int3   
  0x0000000116b6ff3f: int3   

----------------------------------------------------------------------
fast_lputfield  218 fast_lputfield  [0x0000000116b6ff80, 0x0000000116b6ffe0]  96 bytes

  0x0000000116b6ff80: mov    (%rsp),%rax
  0x0000000116b6ff84: add    $0x10,%rsp
  0x0000000116b6ff88: movzwl 0x1(%r13),%ebx
  0x0000000116b6ff8d: mov    -0x28(%rbp),%rcx
  0x0000000116b6ff91: shl    $0x2,%ebx
  0x0000000116b6ff94: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b6ff98: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b6ff9d: shr    $0x15,%edx
  0x0000000116b6ffa0: and    $0x1,%edx
  0x0000000116b6ffa3: pop    %rcx
  0x0000000116b6ffa4: cmp    (%rcx),%rax
  0x0000000116b6ffa7: mov    %rax,(%rcx,%rbx,1)
  0x0000000116b6ffab: test   %edx,%edx
  0x0000000116b6ffad: je     0x0000000116b6ffb8
  0x0000000116b6ffb3: lock addl $0x0,(%rsp)
  0x0000000116b6ffb8: movzbl 0x3(%r13),%ebx
  0x0000000116b6ffbd: add    $0x3,%r13
  0x0000000116b6ffc1: movabs $0x10ce3b680,%r10
  0x0000000116b6ffcb: jmpq   *(%r10,%rbx,8)
  0x0000000116b6ffcf: nop
  0x0000000116b6ffd0: int3   
  0x0000000116b6ffd1: int3   
  0x0000000116b6ffd2: int3   
  0x0000000116b6ffd3: int3   
  0x0000000116b6ffd4: int3   
  0x0000000116b6ffd5: int3   
  0x0000000116b6ffd6: int3   
  0x0000000116b6ffd7: int3   
  0x0000000116b6ffd8: int3   
  0x0000000116b6ffd9: int3   
  0x0000000116b6ffda: int3   
  0x0000000116b6ffdb: int3   
  0x0000000116b6ffdc: int3   
  0x0000000116b6ffdd: int3   
  0x0000000116b6ffde: int3   
  0x0000000116b6ffdf: int3   

----------------------------------------------------------------------
fast_sputfield  219 fast_sputfield  [0x0000000116b70020, 0x0000000116b70080]  96 bytes

  0x0000000116b70020: mov    (%rsp),%eax
  0x0000000116b70023: add    $0x8,%rsp
  0x0000000116b70027: movzwl 0x1(%r13),%ebx
  0x0000000116b7002c: mov    -0x28(%rbp),%rcx
  0x0000000116b70030: shl    $0x2,%ebx
  0x0000000116b70033: mov    0x28(%rcx,%rbx,8),%edx
  0x0000000116b70037: mov    0x20(%rcx,%rbx,8),%rbx
  0x0000000116b7003c: shr    $0x15,%edx
  0x0000000116b7003f: and    $0x1,%edx
  0x0000000116b70042: pop    %rcx
  0x0000000116b70043: cmp    (%rcx),%rax
  0x0000000116b70046: mov    %ax,(%rcx,%rbx,1)
  0x0000000116b7004a: test   %edx,%edx
  0x0000000116b7004c: je     0x0000000116b70057
  0x0000000116b70052: lock addl $0x0,(%rsp)
  0x0000000116b70057: movzbl 0x3(%r13),%ebx
  0x0000000116b7005c: add    $0x3,%r13
  0x0000000116b70060: movabs $0x10ce3b680,%r10
  0x0000000116b7006a: jmpq   *(%r10,%rbx,8)
  0x0000000116b7006e: nop
  0x0000000116b7006f: nop
  0x0000000116b70070: int3   
  0x0000000116b70071: int3   
  0x0000000116b70072: int3   
  0x0000000116b70073: int3   
  0x0000000116b70074: int3   
  0x0000000116b70075: int3   
  0x0000000116b70076: int3   
  0x0000000116b70077: int3   
  0x0000000116b70078: int3   
  0x0000000116b70079: int3   
  0x0000000116b7007a: int3   
  0x0000000116b7007b: int3   
  0x0000000116b7007c: int3   
  0x0000000116b7007d: int3   
  0x0000000116b7007e: int3   
  0x0000000116b7007f: int3   

----------------------------------------------------------------------
fast_aload_0  220 fast_aload_0  [0x0000000116b700c0, 0x0000000116b70120]  96 bytes

  0x0000000116b700c0: push   %rax
  0x0000000116b700c1: jmpq   0x0000000116b700f0
  0x0000000116b700c6: sub    $0x8,%rsp
  0x0000000116b700ca: vmovss %xmm0,(%rsp)
  0x0000000116b700cf: jmpq   0x0000000116b700f0
  0x0000000116b700d4: sub    $0x10,%rsp
  0x0000000116b700d8: vmovsd %xmm0,(%rsp)
  0x0000000116b700dd: jmpq   0x0000000116b700f0
  0x0000000116b700e2: sub    $0x10,%rsp
  0x0000000116b700e6: mov    %rax,(%rsp)
  0x0000000116b700ea: jmpq   0x0000000116b700f0
  0x0000000116b700ef: push   %rax
  0x0000000116b700f0: mov    (%r14),%rax
  0x0000000116b700f3: movzbl 0x1(%r13),%ebx
  0x0000000116b700f8: inc    %r13
  0x0000000116b700fb: movabs $0x10ce3ae80,%r10
  0x0000000116b70105: jmpq   *(%r10,%rbx,8)
  0x0000000116b70109: nop
  0x0000000116b7010a: nop
  0x0000000116b7010b: nop
  0x0000000116b7010c: nop
  0x0000000116b7010d: nop
  0x0000000116b7010e: nop
  0x0000000116b7010f: nop
  0x0000000116b70110: int3   
  0x0000000116b70111: int3   
  0x0000000116b70112: int3   
  0x0000000116b70113: int3   
  0x0000000116b70114: int3   
  0x0000000116b70115: int3   
  0x0000000116b70116: int3   
  0x0000000116b70117: int3   
  0x0000000116b70118: int3   
  0x0000000116b70119: int3   
  0x0000000116b7011a: int3   
  0x0000000116b7011b: int3   
  0x0000000116b7011c: int3   
  0x0000000116b7011d: int3   
  0x0000000116b7011e: int3   
  0x0000000116b7011f: int3   

----------------------------------------------------------------------
fast_iaccess_0  221 fast_iaccess_0  [0x0000000116b70160, 0x0000000116b701e0]  128 bytes

  0x0000000116b70160: push   %rax
  0x0000000116b70161: jmpq   0x0000000116b70190
  0x0000000116b70166: sub    $0x8,%rsp
  0x0000000116b7016a: vmovss %xmm0,(%rsp)
  0x0000000116b7016f: jmpq   0x0000000116b70190
  0x0000000116b70174: sub    $0x10,%rsp
  0x0000000116b70178: vmovsd %xmm0,(%rsp)
  0x0000000116b7017d: jmpq   0x0000000116b70190
  0x0000000116b70182: sub    $0x10,%rsp
  0x0000000116b70186: mov    %rax,(%rsp)
  0x0000000116b7018a: jmpq   0x0000000116b70190
  0x0000000116b7018f: push   %rax
  0x0000000116b70190: mov    (%r14),%rax
  0x0000000116b70193: movzwl 0x2(%r13),%edx
  0x0000000116b70198: mov    -0x28(%rbp),%rcx
  0x0000000116b7019c: shl    $0x2,%edx
  0x0000000116b7019f: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b701a4: inc    %r13
  0x0000000116b701a7: cmp    (%rax),%rax
  0x0000000116b701aa: mov    (%rax,%rbx,1),%eax
  0x0000000116b701ad: dec    %r13
  0x0000000116b701b0: movzbl 0x4(%r13),%ebx
  0x0000000116b701b5: add    $0x4,%r13
  0x0000000116b701b9: movabs $0x10ce38e80,%r10
  0x0000000116b701c3: jmpq   *(%r10,%rbx,8)
  0x0000000116b701c7: nop
  0x0000000116b701c8: int3   
  0x0000000116b701c9: int3   
  0x0000000116b701ca: int3   
  0x0000000116b701cb: int3   
  0x0000000116b701cc: int3   
  0x0000000116b701cd: int3   
  0x0000000116b701ce: int3   
  0x0000000116b701cf: int3   
  0x0000000116b701d0: int3   
  0x0000000116b701d1: int3   
  0x0000000116b701d2: int3   
  0x0000000116b701d3: int3   
  0x0000000116b701d4: int3   
  0x0000000116b701d5: int3   
  0x0000000116b701d6: int3   
  0x0000000116b701d7: int3   
  0x0000000116b701d8: int3   
  0x0000000116b701d9: int3   
  0x0000000116b701da: int3   
  0x0000000116b701db: int3   
  0x0000000116b701dc: int3   
  0x0000000116b701dd: int3   
  0x0000000116b701de: int3   
  0x0000000116b701df: int3   

----------------------------------------------------------------------
fast_aaccess_0  222 fast_aaccess_0  [0x0000000116b70220, 0x0000000116b70320]  256 bytes

  0x0000000116b70220: push   %rax
  0x0000000116b70221: jmpq   0x0000000116b70250
  0x0000000116b70226: sub    $0x8,%rsp
  0x0000000116b7022a: vmovss %xmm0,(%rsp)
  0x0000000116b7022f: jmpq   0x0000000116b70250
  0x0000000116b70234: sub    $0x10,%rsp
  0x0000000116b70238: vmovsd %xmm0,(%rsp)
  0x0000000116b7023d: jmpq   0x0000000116b70250
  0x0000000116b70242: sub    $0x10,%rsp
  0x0000000116b70246: mov    %rax,(%rsp)
  0x0000000116b7024a: jmpq   0x0000000116b70250
  0x0000000116b7024f: push   %rax
  0x0000000116b70250: mov    (%r14),%rax
  0x0000000116b70253: movzwl 0x2(%r13),%edx
  0x0000000116b70258: mov    -0x28(%rbp),%rcx
  0x0000000116b7025c: shl    $0x2,%edx
  0x0000000116b7025f: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b70264: inc    %r13
  0x0000000116b70267: cmp    (%rax),%rax
  0x0000000116b7026a: mov    (%rax,%rbx,1),%eax
  0x0000000116b7026d: push   %r10
  0x0000000116b7026f: cmp    -0x9d299c6(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b70276: je     0x0000000116b702f3
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b7027c: mov    %rsp,-0x28(%rsp)
  0x0000000116b70281: sub    $0x80,%rsp
  0x0000000116b70288: mov    %rax,0x78(%rsp)
  0x0000000116b7028d: mov    %rcx,0x70(%rsp)
  0x0000000116b70292: mov    %rdx,0x68(%rsp)
  0x0000000116b70297: mov    %rbx,0x60(%rsp)
  0x0000000116b7029c: mov    %rbp,0x50(%rsp)
  0x0000000116b702a1: mov    %rsi,0x48(%rsp)
  0x0000000116b702a6: mov    %rdi,0x40(%rsp)
  0x0000000116b702ab: mov    %r8,0x38(%rsp)
  0x0000000116b702b0: mov    %r9,0x30(%rsp)
  0x0000000116b702b5: mov    %r10,0x28(%rsp)
  0x0000000116b702ba: mov    %r11,0x20(%rsp)
  0x0000000116b702bf: mov    %r12,0x18(%rsp)
  0x0000000116b702c4: mov    %r13,0x10(%rsp)
  0x0000000116b702c9: mov    %r14,0x8(%rsp)
  0x0000000116b702ce: mov    %r15,(%rsp)
  0x0000000116b702d2: movabs $0x10cc64abb,%rdi
  0x0000000116b702dc: movabs $0x116b7027c,%rsi
  0x0000000116b702e6: mov    %rsp,%rdx
  0x0000000116b702e9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b702ed: callq  0x000000010c7dd830
  0x0000000116b702f2: hlt    
  0x0000000116b702f3: pop    %r10
  0x0000000116b702f5: shl    $0x3,%rax
  0x0000000116b702f9: dec    %r13
  0x0000000116b702fc: movzbl 0x4(%r13),%ebx
  0x0000000116b70301: add    $0x4,%r13
  0x0000000116b70305: movabs $0x10ce3ae80,%r10
  0x0000000116b7030f: jmpq   *(%r10,%rbx,8)
  0x0000000116b70313: nop
  0x0000000116b70314: nop
  0x0000000116b70315: nop
  0x0000000116b70316: nop
  0x0000000116b70317: nop
  0x0000000116b70318: int3   
  0x0000000116b70319: int3   
  0x0000000116b7031a: int3   
  0x0000000116b7031b: int3   
  0x0000000116b7031c: int3   
  0x0000000116b7031d: int3   
  0x0000000116b7031e: int3   
  0x0000000116b7031f: int3   

----------------------------------------------------------------------
fast_faccess_0  223 fast_faccess_0  [0x0000000116b70360, 0x0000000116b703e0]  128 bytes

  0x0000000116b70360: push   %rax
  0x0000000116b70361: jmpq   0x0000000116b70390
  0x0000000116b70366: sub    $0x8,%rsp
  0x0000000116b7036a: vmovss %xmm0,(%rsp)
  0x0000000116b7036f: jmpq   0x0000000116b70390
  0x0000000116b70374: sub    $0x10,%rsp
  0x0000000116b70378: vmovsd %xmm0,(%rsp)
  0x0000000116b7037d: jmpq   0x0000000116b70390
  0x0000000116b70382: sub    $0x10,%rsp
  0x0000000116b70386: mov    %rax,(%rsp)
  0x0000000116b7038a: jmpq   0x0000000116b70390
  0x0000000116b7038f: push   %rax
  0x0000000116b70390: mov    (%r14),%rax
  0x0000000116b70393: movzwl 0x2(%r13),%edx
  0x0000000116b70398: mov    -0x28(%rbp),%rcx
  0x0000000116b7039c: shl    $0x2,%edx
  0x0000000116b7039f: mov    0x20(%rcx,%rdx,8),%rbx
  0x0000000116b703a4: inc    %r13
  0x0000000116b703a7: cmp    (%rax),%rax
  0x0000000116b703aa: vmovss (%rax,%rbx,1),%xmm0
  0x0000000116b703af: dec    %r13
  0x0000000116b703b2: movzbl 0x4(%r13),%ebx
  0x0000000116b703b7: add    $0x4,%r13
  0x0000000116b703bb: movabs $0x10ce39e80,%r10
  0x0000000116b703c5: jmpq   *(%r10,%rbx,8)
  0x0000000116b703c9: nop
  0x0000000116b703ca: nop
  0x0000000116b703cb: nop
  0x0000000116b703cc: nop
  0x0000000116b703cd: nop
  0x0000000116b703ce: nop
  0x0000000116b703cf: nop
  0x0000000116b703d0: int3   
  0x0000000116b703d1: int3   
  0x0000000116b703d2: int3   
  0x0000000116b703d3: int3   
  0x0000000116b703d4: int3   
  0x0000000116b703d5: int3   
  0x0000000116b703d6: int3   
  0x0000000116b703d7: int3   
  0x0000000116b703d8: int3   
  0x0000000116b703d9: int3   
  0x0000000116b703da: int3   
  0x0000000116b703db: int3   
  0x0000000116b703dc: int3   
  0x0000000116b703dd: int3   
  0x0000000116b703de: int3   
  0x0000000116b703df: int3   

----------------------------------------------------------------------
fast_iload  224 fast_iload  [0x0000000116b70420, 0x0000000116b70480]  96 bytes

  0x0000000116b70420: push   %rax
  0x0000000116b70421: jmpq   0x0000000116b70450
  0x0000000116b70426: sub    $0x8,%rsp
  0x0000000116b7042a: vmovss %xmm0,(%rsp)
  0x0000000116b7042f: jmpq   0x0000000116b70450
  0x0000000116b70434: sub    $0x10,%rsp
  0x0000000116b70438: vmovsd %xmm0,(%rsp)
  0x0000000116b7043d: jmpq   0x0000000116b70450
  0x0000000116b70442: sub    $0x10,%rsp
  0x0000000116b70446: mov    %rax,(%rsp)
  0x0000000116b7044a: jmpq   0x0000000116b70450
  0x0000000116b7044f: push   %rax
  0x0000000116b70450: movzbl 0x1(%r13),%ebx
  0x0000000116b70455: neg    %rbx
  0x0000000116b70458: mov    (%r14,%rbx,8),%eax
  0x0000000116b7045c: movzbl 0x2(%r13),%ebx
  0x0000000116b70461: add    $0x2,%r13
  0x0000000116b70465: movabs $0x10ce38e80,%r10
  0x0000000116b7046f: jmpq   *(%r10,%rbx,8)
  0x0000000116b70473: nop
  0x0000000116b70474: nop
  0x0000000116b70475: nop
  0x0000000116b70476: nop
  0x0000000116b70477: nop
  0x0000000116b70478: int3   
  0x0000000116b70479: int3   
  0x0000000116b7047a: int3   
  0x0000000116b7047b: int3   
  0x0000000116b7047c: int3   
  0x0000000116b7047d: int3   
  0x0000000116b7047e: int3   
  0x0000000116b7047f: int3   

----------------------------------------------------------------------
fast_iload2  225 fast_iload2  [0x0000000116b704c0, 0x0000000116b70520]  96 bytes

  0x0000000116b704c0: push   %rax
  0x0000000116b704c1: jmpq   0x0000000116b704f0
  0x0000000116b704c6: sub    $0x8,%rsp
  0x0000000116b704ca: vmovss %xmm0,(%rsp)
  0x0000000116b704cf: jmpq   0x0000000116b704f0
  0x0000000116b704d4: sub    $0x10,%rsp
  0x0000000116b704d8: vmovsd %xmm0,(%rsp)
  0x0000000116b704dd: jmpq   0x0000000116b704f0
  0x0000000116b704e2: sub    $0x10,%rsp
  0x0000000116b704e6: mov    %rax,(%rsp)
  0x0000000116b704ea: jmpq   0x0000000116b704f0
  0x0000000116b704ef: push   %rax
  0x0000000116b704f0: movzbl 0x1(%r13),%ebx
  0x0000000116b704f5: neg    %rbx
  0x0000000116b704f8: mov    (%r14,%rbx,8),%eax
  0x0000000116b704fc: push   %rax
  0x0000000116b704fd: movzbl 0x3(%r13),%ebx
  0x0000000116b70502: neg    %rbx
  0x0000000116b70505: mov    (%r14,%rbx,8),%eax
  0x0000000116b70509: movzbl 0x4(%r13),%ebx
  0x0000000116b7050e: add    $0x4,%r13
  0x0000000116b70512: movabs $0x10ce38e80,%r10
  0x0000000116b7051c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
fast_icaload  226 fast_icaload  [0x0000000116b70560, 0x0000000116b705e0]  128 bytes

  0x0000000116b70560: push   %rax
  0x0000000116b70561: jmpq   0x0000000116b70590
  0x0000000116b70566: sub    $0x8,%rsp
  0x0000000116b7056a: vmovss %xmm0,(%rsp)
  0x0000000116b7056f: jmpq   0x0000000116b70590
  0x0000000116b70574: sub    $0x10,%rsp
  0x0000000116b70578: vmovsd %xmm0,(%rsp)
  0x0000000116b7057d: jmpq   0x0000000116b70590
  0x0000000116b70582: sub    $0x10,%rsp
  0x0000000116b70586: mov    %rax,(%rsp)
  0x0000000116b7058a: jmpq   0x0000000116b70590
  0x0000000116b7058f: push   %rax
  0x0000000116b70590: movzbl 0x1(%r13),%ebx
  0x0000000116b70595: neg    %rbx
  0x0000000116b70598: mov    (%r14,%rbx,8),%eax
  0x0000000116b7059c: pop    %rdx
  0x0000000116b7059d: movslq %eax,%rax
  0x0000000116b705a0: cmp    0xc(%rdx),%eax
  0x0000000116b705a3: mov    %eax,%ebx
  0x0000000116b705a5: jae    0x0000000116b52880
  0x0000000116b705ab: movzwl 0x10(%rdx,%rax,2),%eax
  0x0000000116b705b0: movzbl 0x3(%r13),%ebx
  0x0000000116b705b5: add    $0x3,%r13
  0x0000000116b705b9: movabs $0x10ce38e80,%r10
  0x0000000116b705c3: jmpq   *(%r10,%rbx,8)
  0x0000000116b705c7: nop
  0x0000000116b705c8: int3   
  0x0000000116b705c9: int3   
  0x0000000116b705ca: int3   
  0x0000000116b705cb: int3   
  0x0000000116b705cc: int3   
  0x0000000116b705cd: int3   
  0x0000000116b705ce: int3   
  0x0000000116b705cf: int3   
  0x0000000116b705d0: int3   
  0x0000000116b705d1: int3   
  0x0000000116b705d2: int3   
  0x0000000116b705d3: int3   
  0x0000000116b705d4: int3   
  0x0000000116b705d5: int3   
  0x0000000116b705d6: int3   
  0x0000000116b705d7: int3   
  0x0000000116b705d8: int3   
  0x0000000116b705d9: int3   
  0x0000000116b705da: int3   
  0x0000000116b705db: int3   
  0x0000000116b705dc: int3   
  0x0000000116b705dd: int3   
  0x0000000116b705de: int3   
  0x0000000116b705df: int3   

----------------------------------------------------------------------
fast_invokevfinal  227 fast_invokevfinal  [0x0000000116b70620, 0x0000000116b70740]  288 bytes

  0x0000000116b70620: push   %rax
  0x0000000116b70621: jmpq   0x0000000116b70650
  0x0000000116b70626: sub    $0x8,%rsp
  0x0000000116b7062a: vmovss %xmm0,(%rsp)
  0x0000000116b7062f: jmpq   0x0000000116b70650
  0x0000000116b70634: sub    $0x10,%rsp
  0x0000000116b70638: vmovsd %xmm0,(%rsp)
  0x0000000116b7063d: jmpq   0x0000000116b70650
  0x0000000116b70642: sub    $0x10,%rsp
  0x0000000116b70646: mov    %rax,(%rsp)
  0x0000000116b7064a: jmpq   0x0000000116b70650
  0x0000000116b7064f: push   %rax
  0x0000000116b70650: mov    %rsp,-0x28(%rsp)
  0x0000000116b70655: sub    $0x80,%rsp
  0x0000000116b7065c: mov    %rax,0x78(%rsp)
  0x0000000116b70661: mov    %rcx,0x70(%rsp)
  0x0000000116b70666: mov    %rdx,0x68(%rsp)
  0x0000000116b7066b: mov    %rbx,0x60(%rsp)
  0x0000000116b70670: mov    %rbp,0x50(%rsp)
  0x0000000116b70675: mov    %rsi,0x48(%rsp)
  0x0000000116b7067a: mov    %rdi,0x40(%rsp)
  0x0000000116b7067f: mov    %r8,0x38(%rsp)
  0x0000000116b70684: mov    %r9,0x30(%rsp)
  0x0000000116b70689: mov    %r10,0x28(%rsp)
  0x0000000116b7068e: mov    %r11,0x20(%rsp)
  0x0000000116b70693: mov    %r12,0x18(%rsp)
  0x0000000116b70698: mov    %r13,0x10(%rsp)
  0x0000000116b7069d: mov    %r14,0x8(%rsp)
  0x0000000116b706a2: mov    %r15,(%rsp)
  0x0000000116b706a6: movabs $0x10ccb099d,%rdi
  0x0000000116b706b0: movabs $0x116b70650,%rsi
  0x0000000116b706ba: mov    %rsp,%rdx
  0x0000000116b706bd: and    $0xfffffffffffffff0,%rsp
  0x0000000116b706c1: callq  0x000000010c7dd830
  0x0000000116b706c6: hlt    
  0x0000000116b706c7: mov    %rsp,-0x28(%rsp)
  0x0000000116b706cc: sub    $0x80,%rsp
  0x0000000116b706d3: mov    %rax,0x78(%rsp)
  0x0000000116b706d8: mov    %rcx,0x70(%rsp)
  0x0000000116b706dd: mov    %rdx,0x68(%rsp)
  0x0000000116b706e2: mov    %rbx,0x60(%rsp)
  0x0000000116b706e7: mov    %rbp,0x50(%rsp)
  0x0000000116b706ec: mov    %rsi,0x48(%rsp)
  0x0000000116b706f1: mov    %rdi,0x40(%rsp)
  0x0000000116b706f6: mov    %r8,0x38(%rsp)
  0x0000000116b706fb: mov    %r9,0x30(%rsp)
  0x0000000116b70700: mov    %r10,0x28(%rsp)
  0x0000000116b70705: mov    %r11,0x20(%rsp)
  0x0000000116b7070a: mov    %r12,0x18(%rsp)
  0x0000000116b7070f: mov    %r13,0x10(%rsp)
  0x0000000116b70714: mov    %r14,0x8(%rsp)
  0x0000000116b70719: mov    %r15,(%rsp)
  0x0000000116b7071d: movabs $0x10cb763be,%rdi
  0x0000000116b70727: movabs $0x116b706c7,%rsi
  0x0000000116b70731: mov    %rsp,%rdx
  0x0000000116b70734: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70738: callq  0x000000010c7dd830
  0x0000000116b7073d: hlt    
  0x0000000116b7073e: nop
  0x0000000116b7073f: nop

----------------------------------------------------------------------
fast_linearswitch  228 fast_linearswitch  [0x0000000116b70780, 0x0000000116b70860]  224 bytes

  0x0000000116b70780: mov    (%rsp),%eax
  0x0000000116b70783: add    $0x8,%rsp
  0x0000000116b70787: bswap  %eax
  0x0000000116b70789: lea    0x4(%r13),%rbx
  0x0000000116b7078d: and    $0xfffffffffffffffc,%rbx
  0x0000000116b70791: mov    0x4(%rbx),%ecx
  0x0000000116b70794: bswap  %ecx
  0x0000000116b70796: jmp    0x0000000116b707a2
  0x0000000116b70798: cmp    0x8(%rbx,%rcx,8),%eax
  0x0000000116b7079c: je     0x0000000116b707ad
  0x0000000116b707a2: dec    %ecx
  0x0000000116b707a4: jge    0x0000000116b70798
  0x0000000116b707a6: mov    (%rbx),%edx
  0x0000000116b707a8: jmpq   0x0000000116b707b1
  0x0000000116b707ad: mov    0xc(%rbx,%rcx,8),%edx
  0x0000000116b707b1: bswap  %edx
  0x0000000116b707b3: movslq %edx,%rdx
  0x0000000116b707b6: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000116b707bc: add    %rdx,%r13
  0x0000000116b707bf: movabs $0x10ce3b680,%r10
  0x0000000116b707c9: jmpq   *(%r10,%rbx,8)
  0x0000000116b707cd: mov    %rsp,-0x28(%rsp)
  0x0000000116b707d2: sub    $0x80,%rsp
  0x0000000116b707d9: mov    %rax,0x78(%rsp)
  0x0000000116b707de: mov    %rcx,0x70(%rsp)
  0x0000000116b707e3: mov    %rdx,0x68(%rsp)
  0x0000000116b707e8: mov    %rbx,0x60(%rsp)
  0x0000000116b707ed: mov    %rbp,0x50(%rsp)
  0x0000000116b707f2: mov    %rsi,0x48(%rsp)
  0x0000000116b707f7: mov    %rdi,0x40(%rsp)
  0x0000000116b707fc: mov    %r8,0x38(%rsp)
  0x0000000116b70801: mov    %r9,0x30(%rsp)
  0x0000000116b70806: mov    %r10,0x28(%rsp)
  0x0000000116b7080b: mov    %r11,0x20(%rsp)
  0x0000000116b70810: mov    %r12,0x18(%rsp)
  0x0000000116b70815: mov    %r13,0x10(%rsp)
  0x0000000116b7081a: mov    %r14,0x8(%rsp)
  0x0000000116b7081f: mov    %r15,(%rsp)
  0x0000000116b70823: movabs $0x10cb763be,%rdi
  0x0000000116b7082d: movabs $0x116b707cd,%rsi
  0x0000000116b70837: mov    %rsp,%rdx
  0x0000000116b7083a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b7083e: callq  0x000000010c7dd830
  0x0000000116b70843: hlt    
  0x0000000116b70844: nop
  0x0000000116b70845: nop
  0x0000000116b70846: nop
  0x0000000116b70847: nop
  0x0000000116b70848: int3   
  0x0000000116b70849: int3   
  0x0000000116b7084a: int3   
  0x0000000116b7084b: int3   
  0x0000000116b7084c: int3   
  0x0000000116b7084d: int3   
  0x0000000116b7084e: int3   
  0x0000000116b7084f: int3   
  0x0000000116b70850: int3   
  0x0000000116b70851: int3   
  0x0000000116b70852: int3   
  0x0000000116b70853: int3   
  0x0000000116b70854: int3   
  0x0000000116b70855: int3   
  0x0000000116b70856: int3   
  0x0000000116b70857: int3   
  0x0000000116b70858: int3   
  0x0000000116b70859: int3   
  0x0000000116b7085a: int3   
  0x0000000116b7085b: int3   
  0x0000000116b7085c: int3   
  0x0000000116b7085d: int3   
  0x0000000116b7085e: int3   
  0x0000000116b7085f: int3   

----------------------------------------------------------------------
fast_binaryswitch  229 fast_binaryswitch  [0x0000000116b708a0, 0x0000000116b709a0]  256 bytes

  0x0000000116b708a0: mov    (%rsp),%eax
  0x0000000116b708a3: add    $0x8,%rsp
  0x0000000116b708a7: lea    0xc(%r13),%rbx
  0x0000000116b708ab: and    $0xfffffffffffffffc,%rbx
  0x0000000116b708af: xor    %ecx,%ecx
  0x0000000116b708b1: mov    -0x4(%rbx),%edx
  0x0000000116b708b4: bswap  %edx
  0x0000000116b708b6: jmpq   0x0000000116b708ce
  0x0000000116b708bb: lea    (%ecx,%edx,1),%edi
  0x0000000116b708bf: sar    %edi
  0x0000000116b708c1: mov    (%rbx,%rdi,8),%esi
  0x0000000116b708c4: bswap  %esi
  0x0000000116b708c6: cmp    %esi,%eax
  0x0000000116b708c8: cmovl  %edi,%edx
  0x0000000116b708cb: cmovge %edi,%ecx
  0x0000000116b708ce: lea    0x1(%ecx),%edi
  0x0000000116b708d2: cmp    %edx,%edi
  0x0000000116b708d4: jl     0x0000000116b708bb
  0x0000000116b708d6: mov    (%rbx,%rcx,8),%esi
  0x0000000116b708d9: bswap  %esi
  0x0000000116b708db: cmp    %esi,%eax
  0x0000000116b708dd: jne    0x0000000116b70903
  0x0000000116b708e3: mov    0x4(%rbx,%rcx,8),%edx
  0x0000000116b708e7: bswap  %edx
  0x0000000116b708e9: movslq %edx,%rdx
  0x0000000116b708ec: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000116b708f2: add    %rdx,%r13
  0x0000000116b708f5: movabs $0x10ce3b680,%r10
  0x0000000116b708ff: jmpq   *(%r10,%rbx,8)
  0x0000000116b70903: mov    -0x8(%rbx),%edx
  0x0000000116b70906: bswap  %edx
  0x0000000116b70908: movslq %edx,%rdx
  0x0000000116b7090b: movzbl 0x0(%r13,%rdx,1),%ebx
  0x0000000116b70911: add    %rdx,%r13
  0x0000000116b70914: movabs $0x10ce3b680,%r10
  0x0000000116b7091e: jmpq   *(%r10,%rbx,8)
  0x0000000116b70922: mov    %rsp,-0x28(%rsp)
  0x0000000116b70927: sub    $0x80,%rsp
  0x0000000116b7092e: mov    %rax,0x78(%rsp)
  0x0000000116b70933: mov    %rcx,0x70(%rsp)
  0x0000000116b70938: mov    %rdx,0x68(%rsp)
  0x0000000116b7093d: mov    %rbx,0x60(%rsp)
  0x0000000116b70942: mov    %rbp,0x50(%rsp)
  0x0000000116b70947: mov    %rsi,0x48(%rsp)
  0x0000000116b7094c: mov    %rdi,0x40(%rsp)
  0x0000000116b70951: mov    %r8,0x38(%rsp)
  0x0000000116b70956: mov    %r9,0x30(%rsp)
  0x0000000116b7095b: mov    %r10,0x28(%rsp)
  0x0000000116b70960: mov    %r11,0x20(%rsp)
  0x0000000116b70965: mov    %r12,0x18(%rsp)
  0x0000000116b7096a: mov    %r13,0x10(%rsp)
  0x0000000116b7096f: mov    %r14,0x8(%rsp)
  0x0000000116b70974: mov    %r15,(%rsp)
  0x0000000116b70978: movabs $0x10cb763be,%rdi
  0x0000000116b70982: movabs $0x116b70922,%rsi
  0x0000000116b7098c: mov    %rsp,%rdx
  0x0000000116b7098f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70993: callq  0x000000010c7dd830
  0x0000000116b70998: hlt    
  0x0000000116b70999: nop
  0x0000000116b7099a: nop
  0x0000000116b7099b: nop
  0x0000000116b7099c: nop
  0x0000000116b7099d: nop
  0x0000000116b7099e: nop
  0x0000000116b7099f: nop

----------------------------------------------------------------------
fast_aldc  230 fast_aldc  [0x0000000116b709e0, 0x0000000116b70d60]  896 bytes

  0x0000000116b709e0: push   %rax
  0x0000000116b709e1: jmpq   0x0000000116b70a10
  0x0000000116b709e6: sub    $0x8,%rsp
  0x0000000116b709ea: vmovss %xmm0,(%rsp)
  0x0000000116b709ef: jmpq   0x0000000116b70a10
  0x0000000116b709f4: sub    $0x10,%rsp
  0x0000000116b709f8: vmovsd %xmm0,(%rsp)
  0x0000000116b709fd: jmpq   0x0000000116b70a10
  0x0000000116b70a02: sub    $0x10,%rsp
  0x0000000116b70a06: mov    %rax,(%rsp)
  0x0000000116b70a0a: jmpq   0x0000000116b70a10
  0x0000000116b70a0f: push   %rax
  0x0000000116b70a10: movzbl 0x1(%r13),%edx
  0x0000000116b70a15: shl    $0x2,%edx
  0x0000000116b70a18: mov    -0x18(%rbp),%rax
  0x0000000116b70a1c: mov    0x10(%rax),%rax
  0x0000000116b70a20: mov    0x8(%rax),%rax
  0x0000000116b70a24: mov    0x30(%rax),%rax
  0x0000000116b70a28: mov    (%rax),%rax
  0x0000000116b70a2b: add    %rdx,%rax
  0x0000000116b70a2e: mov    0x10(%rax),%eax
  0x0000000116b70a31: push   %r10
  0x0000000116b70a33: cmp    -0x9d2a18a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b70a3a: je     0x0000000116b70ab7
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b70a40: mov    %rsp,-0x28(%rsp)
  0x0000000116b70a45: sub    $0x80,%rsp
  0x0000000116b70a4c: mov    %rax,0x78(%rsp)
  0x0000000116b70a51: mov    %rcx,0x70(%rsp)
  0x0000000116b70a56: mov    %rdx,0x68(%rsp)
  0x0000000116b70a5b: mov    %rbx,0x60(%rsp)
  0x0000000116b70a60: mov    %rbp,0x50(%rsp)
  0x0000000116b70a65: mov    %rsi,0x48(%rsp)
  0x0000000116b70a6a: mov    %rdi,0x40(%rsp)
  0x0000000116b70a6f: mov    %r8,0x38(%rsp)
  0x0000000116b70a74: mov    %r9,0x30(%rsp)
  0x0000000116b70a79: mov    %r10,0x28(%rsp)
  0x0000000116b70a7e: mov    %r11,0x20(%rsp)
  0x0000000116b70a83: mov    %r12,0x18(%rsp)
  0x0000000116b70a88: mov    %r13,0x10(%rsp)
  0x0000000116b70a8d: mov    %r14,0x8(%rsp)
  0x0000000116b70a92: mov    %r15,(%rsp)
  0x0000000116b70a96: movabs $0x10cc64abb,%rdi
  0x0000000116b70aa0: movabs $0x116b70a40,%rsi
  0x0000000116b70aaa: mov    %rsp,%rdx
  0x0000000116b70aad: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70ab1: callq  0x000000010c7dd830
  0x0000000116b70ab6: hlt    
  0x0000000116b70ab7: pop    %r10
  0x0000000116b70ab9: shl    $0x3,%rax
  0x0000000116b70abd: test   %eax,%eax
  0x0000000116b70abf: jne    0x0000000116b70d3e
  0x0000000116b70ac5: mov    $0xe6,%edx
  0x0000000116b70aca: callq  0x0000000116b70ad4
  0x0000000116b70acf: jmpq   0x0000000116b70d3e
  0x0000000116b70ad4: mov    %rdx,%rsi
  0x0000000116b70ad7: lea    0x8(%rsp),%rax
  0x0000000116b70adc: mov    %r13,-0x38(%rbp)
  0x0000000116b70ae0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b70ae8: je     0x0000000116b70b65
  0x0000000116b70aee: mov    %rsp,-0x28(%rsp)
  0x0000000116b70af3: sub    $0x80,%rsp
  0x0000000116b70afa: mov    %rax,0x78(%rsp)
  0x0000000116b70aff: mov    %rcx,0x70(%rsp)
  0x0000000116b70b04: mov    %rdx,0x68(%rsp)
  0x0000000116b70b09: mov    %rbx,0x60(%rsp)
  0x0000000116b70b0e: mov    %rbp,0x50(%rsp)
  0x0000000116b70b13: mov    %rsi,0x48(%rsp)
  0x0000000116b70b18: mov    %rdi,0x40(%rsp)
  0x0000000116b70b1d: mov    %r8,0x38(%rsp)
  0x0000000116b70b22: mov    %r9,0x30(%rsp)
  0x0000000116b70b27: mov    %r10,0x28(%rsp)
  0x0000000116b70b2c: mov    %r11,0x20(%rsp)
  0x0000000116b70b31: mov    %r12,0x18(%rsp)
  0x0000000116b70b36: mov    %r13,0x10(%rsp)
  0x0000000116b70b3b: mov    %r14,0x8(%rsp)
  0x0000000116b70b40: mov    %r15,(%rsp)
  0x0000000116b70b44: movabs $0x10cc2363b,%rdi
  0x0000000116b70b4e: movabs $0x116b70aee,%rsi
  0x0000000116b70b58: mov    %rsp,%rdx
  0x0000000116b70b5b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70b5f: callq  0x000000010c7dd830
  0x0000000116b70b64: hlt    
  0x0000000116b70b65: push   %r10
  0x0000000116b70b67: cmp    -0x9d2a2be(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b70b6e: je     0x0000000116b70beb
  ;; call_VM_base: heap base corrupted?
  0x0000000116b70b74: mov    %rsp,-0x28(%rsp)
  0x0000000116b70b79: sub    $0x80,%rsp
  0x0000000116b70b80: mov    %rax,0x78(%rsp)
  0x0000000116b70b85: mov    %rcx,0x70(%rsp)
  0x0000000116b70b8a: mov    %rdx,0x68(%rsp)
  0x0000000116b70b8f: mov    %rbx,0x60(%rsp)
  0x0000000116b70b94: mov    %rbp,0x50(%rsp)
  0x0000000116b70b99: mov    %rsi,0x48(%rsp)
  0x0000000116b70b9e: mov    %rdi,0x40(%rsp)
  0x0000000116b70ba3: mov    %r8,0x38(%rsp)
  0x0000000116b70ba8: mov    %r9,0x30(%rsp)
  0x0000000116b70bad: mov    %r10,0x28(%rsp)
  0x0000000116b70bb2: mov    %r11,0x20(%rsp)
  0x0000000116b70bb7: mov    %r12,0x18(%rsp)
  0x0000000116b70bbc: mov    %r13,0x10(%rsp)
  0x0000000116b70bc1: mov    %r14,0x8(%rsp)
  0x0000000116b70bc6: mov    %r15,(%rsp)
  0x0000000116b70bca: movabs $0x10cc63f17,%rdi
  0x0000000116b70bd4: movabs $0x116b70b74,%rsi
  0x0000000116b70bde: mov    %rsp,%rdx
  0x0000000116b70be1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70be5: callq  0x000000010c7dd830
  0x0000000116b70bea: hlt    
  0x0000000116b70beb: pop    %r10
  0x0000000116b70bed: mov    %r15,%rdi
  0x0000000116b70bf0: mov    %rbp,0x290(%r15)
  0x0000000116b70bf7: mov    %rax,0x280(%r15)
  0x0000000116b70bfe: test   $0xf,%esp
  0x0000000116b70c04: je     0x0000000116b70c1c
  0x0000000116b70c0a: sub    $0x8,%rsp
  0x0000000116b70c0e: callq  0x000000010c585790
  0x0000000116b70c13: add    $0x8,%rsp
  0x0000000116b70c17: jmpq   0x0000000116b70c21
  0x0000000116b70c1c: callq  0x000000010c585790
  0x0000000116b70c21: push   %rax
  0x0000000116b70c22: push   %rdi
  0x0000000116b70c23: push   %rsi
  0x0000000116b70c24: push   %rdx
  0x0000000116b70c25: push   %rcx
  0x0000000116b70c26: push   %r8
  0x0000000116b70c28: push   %r9
  0x0000000116b70c2a: push   %r10
  0x0000000116b70c2c: mov    %rsp,%r10
  0x0000000116b70c2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70c33: push   %r10
  0x0000000116b70c35: push   %r11
  0x0000000116b70c37: mov    $0x109,%edi
  0x0000000116b70c3c: movabs $0x7ff815049fd5,%r10
  0x0000000116b70c46: callq  *%r10
  0x0000000116b70c49: pop    %r11
  0x0000000116b70c4b: pop    %rsp
  0x0000000116b70c4c: pop    %r10
  0x0000000116b70c4e: pop    %r9
  0x0000000116b70c50: pop    %r8
  0x0000000116b70c52: pop    %rcx
  0x0000000116b70c53: pop    %rdx
  0x0000000116b70c54: pop    %rsi
  0x0000000116b70c55: pop    %rdi
  0x0000000116b70c56: cmp    %rax,%r15
  0x0000000116b70c59: je     0x0000000116b70cd6
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b70c5f: mov    %rsp,-0x28(%rsp)
  0x0000000116b70c64: sub    $0x80,%rsp
  0x0000000116b70c6b: mov    %rax,0x78(%rsp)
  0x0000000116b70c70: mov    %rcx,0x70(%rsp)
  0x0000000116b70c75: mov    %rdx,0x68(%rsp)
  0x0000000116b70c7a: mov    %rbx,0x60(%rsp)
  0x0000000116b70c7f: mov    %rbp,0x50(%rsp)
  0x0000000116b70c84: mov    %rsi,0x48(%rsp)
  0x0000000116b70c89: mov    %rdi,0x40(%rsp)
  0x0000000116b70c8e: mov    %r8,0x38(%rsp)
  0x0000000116b70c93: mov    %r9,0x30(%rsp)
  0x0000000116b70c98: mov    %r10,0x28(%rsp)
  0x0000000116b70c9d: mov    %r11,0x20(%rsp)
  0x0000000116b70ca2: mov    %r12,0x18(%rsp)
  0x0000000116b70ca7: mov    %r13,0x10(%rsp)
  0x0000000116b70cac: mov    %r14,0x8(%rsp)
  0x0000000116b70cb1: mov    %r15,(%rsp)
  0x0000000116b70cb5: movabs $0x10cc6405e,%rdi
  0x0000000116b70cbf: movabs $0x116b70c5f,%rsi
  0x0000000116b70cc9: mov    %rsp,%rdx
  0x0000000116b70ccc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70cd0: callq  0x000000010c7dd830
  0x0000000116b70cd5: hlt    
  0x0000000116b70cd6: pop    %rax
  0x0000000116b70cd7: movabs $0x0,%r10
  0x0000000116b70ce1: mov    %r10,0x280(%r15)
  0x0000000116b70ce8: movabs $0x0,%r10
  0x0000000116b70cf2: mov    %r10,0x290(%r15)
  0x0000000116b70cf9: movabs $0x0,%r10
  0x0000000116b70d03: mov    %r10,0x288(%r15)
  0x0000000116b70d0a: cmpq   $0x0,0x8(%r15)
  0x0000000116b70d12: je     0x0000000116b70d1d
  0x0000000116b70d18: jmpq   0x0000000116b30420
  0x0000000116b70d1d: mov    0x2e0(%r15),%rax
  0x0000000116b70d24: movabs $0x0,%r10
  0x0000000116b70d2e: mov    %r10,0x2e0(%r15)
  0x0000000116b70d35: mov    -0x38(%rbp),%r13
  0x0000000116b70d39: mov    -0x30(%rbp),%r14
  0x0000000116b70d3d: retq   
  0x0000000116b70d3e: movzbl 0x2(%r13),%ebx
  0x0000000116b70d43: add    $0x2,%r13
  0x0000000116b70d47: movabs $0x10ce3ae80,%r10
  0x0000000116b70d51: jmpq   *(%r10,%rbx,8)
  0x0000000116b70d55: nop
  0x0000000116b70d56: nop
  0x0000000116b70d57: nop
  0x0000000116b70d58: int3   
  0x0000000116b70d59: int3   
  0x0000000116b70d5a: int3   
  0x0000000116b70d5b: int3   
  0x0000000116b70d5c: int3   
  0x0000000116b70d5d: int3   
  0x0000000116b70d5e: int3   
  0x0000000116b70d5f: int3   

----------------------------------------------------------------------
fast_aldc_w  231 fast_aldc_w  [0x0000000116b70da0, 0x0000000116b71120]  896 bytes

  0x0000000116b70da0: push   %rax
  0x0000000116b70da1: jmpq   0x0000000116b70dd0
  0x0000000116b70da6: sub    $0x8,%rsp
  0x0000000116b70daa: vmovss %xmm0,(%rsp)
  0x0000000116b70daf: jmpq   0x0000000116b70dd0
  0x0000000116b70db4: sub    $0x10,%rsp
  0x0000000116b70db8: vmovsd %xmm0,(%rsp)
  0x0000000116b70dbd: jmpq   0x0000000116b70dd0
  0x0000000116b70dc2: sub    $0x10,%rsp
  0x0000000116b70dc6: mov    %rax,(%rsp)
  0x0000000116b70dca: jmpq   0x0000000116b70dd0
  0x0000000116b70dcf: push   %rax
  0x0000000116b70dd0: movzwl 0x1(%r13),%edx
  0x0000000116b70dd5: shl    $0x2,%edx
  0x0000000116b70dd8: mov    -0x18(%rbp),%rax
  0x0000000116b70ddc: mov    0x10(%rax),%rax
  0x0000000116b70de0: mov    0x8(%rax),%rax
  0x0000000116b70de4: mov    0x30(%rax),%rax
  0x0000000116b70de8: mov    (%rax),%rax
  0x0000000116b70deb: add    %rdx,%rax
  0x0000000116b70dee: mov    0x10(%rax),%eax
  0x0000000116b70df1: push   %r10
  0x0000000116b70df3: cmp    -0x9d2a54a(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b70dfa: je     0x0000000116b70e77
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b70e00: mov    %rsp,-0x28(%rsp)
  0x0000000116b70e05: sub    $0x80,%rsp
  0x0000000116b70e0c: mov    %rax,0x78(%rsp)
  0x0000000116b70e11: mov    %rcx,0x70(%rsp)
  0x0000000116b70e16: mov    %rdx,0x68(%rsp)
  0x0000000116b70e1b: mov    %rbx,0x60(%rsp)
  0x0000000116b70e20: mov    %rbp,0x50(%rsp)
  0x0000000116b70e25: mov    %rsi,0x48(%rsp)
  0x0000000116b70e2a: mov    %rdi,0x40(%rsp)
  0x0000000116b70e2f: mov    %r8,0x38(%rsp)
  0x0000000116b70e34: mov    %r9,0x30(%rsp)
  0x0000000116b70e39: mov    %r10,0x28(%rsp)
  0x0000000116b70e3e: mov    %r11,0x20(%rsp)
  0x0000000116b70e43: mov    %r12,0x18(%rsp)
  0x0000000116b70e48: mov    %r13,0x10(%rsp)
  0x0000000116b70e4d: mov    %r14,0x8(%rsp)
  0x0000000116b70e52: mov    %r15,(%rsp)
  0x0000000116b70e56: movabs $0x10cc64abb,%rdi
  0x0000000116b70e60: movabs $0x116b70e00,%rsi
  0x0000000116b70e6a: mov    %rsp,%rdx
  0x0000000116b70e6d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70e71: callq  0x000000010c7dd830
  0x0000000116b70e76: hlt    
  0x0000000116b70e77: pop    %r10
  0x0000000116b70e79: shl    $0x3,%rax
  0x0000000116b70e7d: test   %eax,%eax
  0x0000000116b70e7f: jne    0x0000000116b710fe
  0x0000000116b70e85: mov    $0xe7,%edx
  0x0000000116b70e8a: callq  0x0000000116b70e94
  0x0000000116b70e8f: jmpq   0x0000000116b710fe
  0x0000000116b70e94: mov    %rdx,%rsi
  0x0000000116b70e97: lea    0x8(%rsp),%rax
  0x0000000116b70e9c: mov    %r13,-0x38(%rbp)
  0x0000000116b70ea0: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b70ea8: je     0x0000000116b70f25
  0x0000000116b70eae: mov    %rsp,-0x28(%rsp)
  0x0000000116b70eb3: sub    $0x80,%rsp
  0x0000000116b70eba: mov    %rax,0x78(%rsp)
  0x0000000116b70ebf: mov    %rcx,0x70(%rsp)
  0x0000000116b70ec4: mov    %rdx,0x68(%rsp)
  0x0000000116b70ec9: mov    %rbx,0x60(%rsp)
  0x0000000116b70ece: mov    %rbp,0x50(%rsp)
  0x0000000116b70ed3: mov    %rsi,0x48(%rsp)
  0x0000000116b70ed8: mov    %rdi,0x40(%rsp)
  0x0000000116b70edd: mov    %r8,0x38(%rsp)
  0x0000000116b70ee2: mov    %r9,0x30(%rsp)
  0x0000000116b70ee7: mov    %r10,0x28(%rsp)
  0x0000000116b70eec: mov    %r11,0x20(%rsp)
  0x0000000116b70ef1: mov    %r12,0x18(%rsp)
  0x0000000116b70ef6: mov    %r13,0x10(%rsp)
  0x0000000116b70efb: mov    %r14,0x8(%rsp)
  0x0000000116b70f00: mov    %r15,(%rsp)
  0x0000000116b70f04: movabs $0x10cc2363b,%rdi
  0x0000000116b70f0e: movabs $0x116b70eae,%rsi
  0x0000000116b70f18: mov    %rsp,%rdx
  0x0000000116b70f1b: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70f1f: callq  0x000000010c7dd830
  0x0000000116b70f24: hlt    
  0x0000000116b70f25: push   %r10
  0x0000000116b70f27: cmp    -0x9d2a67e(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b70f2e: je     0x0000000116b70fab
  ;; call_VM_base: heap base corrupted?
  0x0000000116b70f34: mov    %rsp,-0x28(%rsp)
  0x0000000116b70f39: sub    $0x80,%rsp
  0x0000000116b70f40: mov    %rax,0x78(%rsp)
  0x0000000116b70f45: mov    %rcx,0x70(%rsp)
  0x0000000116b70f4a: mov    %rdx,0x68(%rsp)
  0x0000000116b70f4f: mov    %rbx,0x60(%rsp)
  0x0000000116b70f54: mov    %rbp,0x50(%rsp)
  0x0000000116b70f59: mov    %rsi,0x48(%rsp)
  0x0000000116b70f5e: mov    %rdi,0x40(%rsp)
  0x0000000116b70f63: mov    %r8,0x38(%rsp)
  0x0000000116b70f68: mov    %r9,0x30(%rsp)
  0x0000000116b70f6d: mov    %r10,0x28(%rsp)
  0x0000000116b70f72: mov    %r11,0x20(%rsp)
  0x0000000116b70f77: mov    %r12,0x18(%rsp)
  0x0000000116b70f7c: mov    %r13,0x10(%rsp)
  0x0000000116b70f81: mov    %r14,0x8(%rsp)
  0x0000000116b70f86: mov    %r15,(%rsp)
  0x0000000116b70f8a: movabs $0x10cc63f17,%rdi
  0x0000000116b70f94: movabs $0x116b70f34,%rsi
  0x0000000116b70f9e: mov    %rsp,%rdx
  0x0000000116b70fa1: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70fa5: callq  0x000000010c7dd830
  0x0000000116b70faa: hlt    
  0x0000000116b70fab: pop    %r10
  0x0000000116b70fad: mov    %r15,%rdi
  0x0000000116b70fb0: mov    %rbp,0x290(%r15)
  0x0000000116b70fb7: mov    %rax,0x280(%r15)
  0x0000000116b70fbe: test   $0xf,%esp
  0x0000000116b70fc4: je     0x0000000116b70fdc
  0x0000000116b70fca: sub    $0x8,%rsp
  0x0000000116b70fce: callq  0x000000010c585790
  0x0000000116b70fd3: add    $0x8,%rsp
  0x0000000116b70fd7: jmpq   0x0000000116b70fe1
  0x0000000116b70fdc: callq  0x000000010c585790
  0x0000000116b70fe1: push   %rax
  0x0000000116b70fe2: push   %rdi
  0x0000000116b70fe3: push   %rsi
  0x0000000116b70fe4: push   %rdx
  0x0000000116b70fe5: push   %rcx
  0x0000000116b70fe6: push   %r8
  0x0000000116b70fe8: push   %r9
  0x0000000116b70fea: push   %r10
  0x0000000116b70fec: mov    %rsp,%r10
  0x0000000116b70fef: and    $0xfffffffffffffff0,%rsp
  0x0000000116b70ff3: push   %r10
  0x0000000116b70ff5: push   %r11
  0x0000000116b70ff7: mov    $0x109,%edi
  0x0000000116b70ffc: movabs $0x7ff815049fd5,%r10
  0x0000000116b71006: callq  *%r10
  0x0000000116b71009: pop    %r11
  0x0000000116b7100b: pop    %rsp
  0x0000000116b7100c: pop    %r10
  0x0000000116b7100e: pop    %r9
  0x0000000116b71010: pop    %r8
  0x0000000116b71012: pop    %rcx
  0x0000000116b71013: pop    %rdx
  0x0000000116b71014: pop    %rsi
  0x0000000116b71015: pop    %rdi
  0x0000000116b71016: cmp    %rax,%r15
  0x0000000116b71019: je     0x0000000116b71096
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b7101f: mov    %rsp,-0x28(%rsp)
  0x0000000116b71024: sub    $0x80,%rsp
  0x0000000116b7102b: mov    %rax,0x78(%rsp)
  0x0000000116b71030: mov    %rcx,0x70(%rsp)
  0x0000000116b71035: mov    %rdx,0x68(%rsp)
  0x0000000116b7103a: mov    %rbx,0x60(%rsp)
  0x0000000116b7103f: mov    %rbp,0x50(%rsp)
  0x0000000116b71044: mov    %rsi,0x48(%rsp)
  0x0000000116b71049: mov    %rdi,0x40(%rsp)
  0x0000000116b7104e: mov    %r8,0x38(%rsp)
  0x0000000116b71053: mov    %r9,0x30(%rsp)
  0x0000000116b71058: mov    %r10,0x28(%rsp)
  0x0000000116b7105d: mov    %r11,0x20(%rsp)
  0x0000000116b71062: mov    %r12,0x18(%rsp)
  0x0000000116b71067: mov    %r13,0x10(%rsp)
  0x0000000116b7106c: mov    %r14,0x8(%rsp)
  0x0000000116b71071: mov    %r15,(%rsp)
  0x0000000116b71075: movabs $0x10cc6405e,%rdi
  0x0000000116b7107f: movabs $0x116b7101f,%rsi
  0x0000000116b71089: mov    %rsp,%rdx
  0x0000000116b7108c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71090: callq  0x000000010c7dd830
  0x0000000116b71095: hlt    
  0x0000000116b71096: pop    %rax
  0x0000000116b71097: movabs $0x0,%r10
  0x0000000116b710a1: mov    %r10,0x280(%r15)
  0x0000000116b710a8: movabs $0x0,%r10
  0x0000000116b710b2: mov    %r10,0x290(%r15)
  0x0000000116b710b9: movabs $0x0,%r10
  0x0000000116b710c3: mov    %r10,0x288(%r15)
  0x0000000116b710ca: cmpq   $0x0,0x8(%r15)
  0x0000000116b710d2: je     0x0000000116b710dd
  0x0000000116b710d8: jmpq   0x0000000116b30420
  0x0000000116b710dd: mov    0x2e0(%r15),%rax
  0x0000000116b710e4: movabs $0x0,%r10
  0x0000000116b710ee: mov    %r10,0x2e0(%r15)
  0x0000000116b710f5: mov    -0x38(%rbp),%r13
  0x0000000116b710f9: mov    -0x30(%rbp),%r14
  0x0000000116b710fd: retq   
  0x0000000116b710fe: movzbl 0x3(%r13),%ebx
  0x0000000116b71103: add    $0x3,%r13
  0x0000000116b71107: movabs $0x10ce3ae80,%r10
  0x0000000116b71111: jmpq   *(%r10,%rbx,8)
  0x0000000116b71115: nop
  0x0000000116b71116: nop
  0x0000000116b71117: nop
  0x0000000116b71118: int3   
  0x0000000116b71119: int3   
  0x0000000116b7111a: int3   
  0x0000000116b7111b: int3   
  0x0000000116b7111c: int3   
  0x0000000116b7111d: int3   
  0x0000000116b7111e: int3   
  0x0000000116b7111f: int3   

----------------------------------------------------------------------
return_register_finalizer  232 return_register_finalizer  [0x0000000116b71160, 0x0000000116b71e00]  3232 bytes

  0x0000000116b71160: push   %rax
  0x0000000116b71161: jmpq   0x0000000116b71190
  0x0000000116b71166: sub    $0x8,%rsp
  0x0000000116b7116a: vmovss %xmm0,(%rsp)
  0x0000000116b7116f: jmpq   0x0000000116b71190
  0x0000000116b71174: sub    $0x10,%rsp
  0x0000000116b71178: vmovsd %xmm0,(%rsp)
  0x0000000116b7117d: jmpq   0x0000000116b71190
  0x0000000116b71182: sub    $0x10,%rsp
  0x0000000116b71186: mov    %rax,(%rsp)
  0x0000000116b7118a: jmpq   0x0000000116b71190
  0x0000000116b7118f: push   %rax
  0x0000000116b71190: mov    (%r14),%rsi
  0x0000000116b71193: mov    0x8(%rsi),%edi
  0x0000000116b71196: shl    $0x3,%rdi
  0x0000000116b7119a: mov    0xa4(%rdi),%edi
  0x0000000116b711a0: test   $0x40000000,%edi
  0x0000000116b711a6: je     0x0000000116b71405
  0x0000000116b711ac: callq  0x0000000116b711b6
  0x0000000116b711b1: jmpq   0x0000000116b71405
  0x0000000116b711b6: lea    0x8(%rsp),%rax
  0x0000000116b711bb: mov    %r13,-0x38(%rbp)
  0x0000000116b711bf: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b711c7: je     0x0000000116b71244
  0x0000000116b711cd: mov    %rsp,-0x28(%rsp)
  0x0000000116b711d2: sub    $0x80,%rsp
  0x0000000116b711d9: mov    %rax,0x78(%rsp)
  0x0000000116b711de: mov    %rcx,0x70(%rsp)
  0x0000000116b711e3: mov    %rdx,0x68(%rsp)
  0x0000000116b711e8: mov    %rbx,0x60(%rsp)
  0x0000000116b711ed: mov    %rbp,0x50(%rsp)
  0x0000000116b711f2: mov    %rsi,0x48(%rsp)
  0x0000000116b711f7: mov    %rdi,0x40(%rsp)
  0x0000000116b711fc: mov    %r8,0x38(%rsp)
  0x0000000116b71201: mov    %r9,0x30(%rsp)
  0x0000000116b71206: mov    %r10,0x28(%rsp)
  0x0000000116b7120b: mov    %r11,0x20(%rsp)
  0x0000000116b71210: mov    %r12,0x18(%rsp)
  0x0000000116b71215: mov    %r13,0x10(%rsp)
  0x0000000116b7121a: mov    %r14,0x8(%rsp)
  0x0000000116b7121f: mov    %r15,(%rsp)
  0x0000000116b71223: movabs $0x10cc2363b,%rdi
  0x0000000116b7122d: movabs $0x116b711cd,%rsi
  0x0000000116b71237: mov    %rsp,%rdx
  0x0000000116b7123a: and    $0xfffffffffffffff0,%rsp
  0x0000000116b7123e: callq  0x000000010c7dd830
  0x0000000116b71243: hlt    
  0x0000000116b71244: push   %r10
  0x0000000116b71246: cmp    -0x9d2a99d(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b7124d: je     0x0000000116b712ca
  ;; call_VM_base: heap base corrupted?
  0x0000000116b71253: mov    %rsp,-0x28(%rsp)
  0x0000000116b71258: sub    $0x80,%rsp
  0x0000000116b7125f: mov    %rax,0x78(%rsp)
  0x0000000116b71264: mov    %rcx,0x70(%rsp)
  0x0000000116b71269: mov    %rdx,0x68(%rsp)
  0x0000000116b7126e: mov    %rbx,0x60(%rsp)
  0x0000000116b71273: mov    %rbp,0x50(%rsp)
  0x0000000116b71278: mov    %rsi,0x48(%rsp)
  0x0000000116b7127d: mov    %rdi,0x40(%rsp)
  0x0000000116b71282: mov    %r8,0x38(%rsp)
  0x0000000116b71287: mov    %r9,0x30(%rsp)
  0x0000000116b7128c: mov    %r10,0x28(%rsp)
  0x0000000116b71291: mov    %r11,0x20(%rsp)
  0x0000000116b71296: mov    %r12,0x18(%rsp)
  0x0000000116b7129b: mov    %r13,0x10(%rsp)
  0x0000000116b712a0: mov    %r14,0x8(%rsp)
  0x0000000116b712a5: mov    %r15,(%rsp)
  0x0000000116b712a9: movabs $0x10cc63f17,%rdi
  0x0000000116b712b3: movabs $0x116b71253,%rsi
  0x0000000116b712bd: mov    %rsp,%rdx
  0x0000000116b712c0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b712c4: callq  0x000000010c7dd830
  0x0000000116b712c9: hlt    
  0x0000000116b712ca: pop    %r10
  0x0000000116b712cc: mov    %r15,%rdi
  0x0000000116b712cf: mov    %rbp,0x290(%r15)
  0x0000000116b712d6: mov    %rax,0x280(%r15)
  0x0000000116b712dd: test   $0xf,%esp
  0x0000000116b712e3: je     0x0000000116b712fb
  0x0000000116b712e9: sub    $0x8,%rsp
  0x0000000116b712ed: callq  0x000000010c586550
  0x0000000116b712f2: add    $0x8,%rsp
  0x0000000116b712f6: jmpq   0x0000000116b71300
  0x0000000116b712fb: callq  0x000000010c586550
  0x0000000116b71300: push   %rax
  0x0000000116b71301: push   %rdi
  0x0000000116b71302: push   %rsi
  0x0000000116b71303: push   %rdx
  0x0000000116b71304: push   %rcx
  0x0000000116b71305: push   %r8
  0x0000000116b71307: push   %r9
  0x0000000116b71309: push   %r10
  0x0000000116b7130b: mov    %rsp,%r10
  0x0000000116b7130e: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71312: push   %r10
  0x0000000116b71314: push   %r11
  0x0000000116b71316: mov    $0x109,%edi
  0x0000000116b7131b: movabs $0x7ff815049fd5,%r10
  0x0000000116b71325: callq  *%r10
  0x0000000116b71328: pop    %r11
  0x0000000116b7132a: pop    %rsp
  0x0000000116b7132b: pop    %r10
  0x0000000116b7132d: pop    %r9
  0x0000000116b7132f: pop    %r8
  0x0000000116b71331: pop    %rcx
  0x0000000116b71332: pop    %rdx
  0x0000000116b71333: pop    %rsi
  0x0000000116b71334: pop    %rdi
  0x0000000116b71335: cmp    %rax,%r15
  0x0000000116b71338: je     0x0000000116b713b5
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b7133e: mov    %rsp,-0x28(%rsp)
  0x0000000116b71343: sub    $0x80,%rsp
  0x0000000116b7134a: mov    %rax,0x78(%rsp)
  0x0000000116b7134f: mov    %rcx,0x70(%rsp)
  0x0000000116b71354: mov    %rdx,0x68(%rsp)
  0x0000000116b71359: mov    %rbx,0x60(%rsp)
  0x0000000116b7135e: mov    %rbp,0x50(%rsp)
  0x0000000116b71363: mov    %rsi,0x48(%rsp)
  0x0000000116b71368: mov    %rdi,0x40(%rsp)
  0x0000000116b7136d: mov    %r8,0x38(%rsp)
  0x0000000116b71372: mov    %r9,0x30(%rsp)
  0x0000000116b71377: mov    %r10,0x28(%rsp)
  0x0000000116b7137c: mov    %r11,0x20(%rsp)
  0x0000000116b71381: mov    %r12,0x18(%rsp)
  0x0000000116b71386: mov    %r13,0x10(%rsp)
  0x0000000116b7138b: mov    %r14,0x8(%rsp)
  0x0000000116b71390: mov    %r15,(%rsp)
  0x0000000116b71394: movabs $0x10cc6405e,%rdi
  0x0000000116b7139e: movabs $0x116b7133e,%rsi
  0x0000000116b713a8: mov    %rsp,%rdx
  0x0000000116b713ab: and    $0xfffffffffffffff0,%rsp
  0x0000000116b713af: callq  0x000000010c7dd830
  0x0000000116b713b4: hlt    
  0x0000000116b713b5: pop    %rax
  0x0000000116b713b6: movabs $0x0,%r10
  0x0000000116b713c0: mov    %r10,0x280(%r15)
  0x0000000116b713c7: movabs $0x0,%r10
  0x0000000116b713d1: mov    %r10,0x290(%r15)
  0x0000000116b713d8: movabs $0x0,%r10
  0x0000000116b713e2: mov    %r10,0x288(%r15)
  0x0000000116b713e9: cmpq   $0x0,0x8(%r15)
  0x0000000116b713f1: je     0x0000000116b713fc
  0x0000000116b713f7: jmpq   0x0000000116b30420
  0x0000000116b713fc: mov    -0x38(%rbp),%r13
  0x0000000116b71400: mov    -0x30(%rbp),%r14
  0x0000000116b71404: retq   
  0x0000000116b71405: mov    0x33d(%r15),%dl
  0x0000000116b7140c: movb   $0x0,0x33d(%r15)
  0x0000000116b71414: mov    -0x18(%rbp),%rbx
  0x0000000116b71418: mov    0x28(%rbx),%ecx
  0x0000000116b7141b: test   $0x20,%ecx
  0x0000000116b71421: je     0x0000000116b719ad
  0x0000000116b71427: test   $0xff,%dl
  0x0000000116b7142a: jne    0x0000000116b71ca1
  0x0000000116b71430: lea    -0x50(%rbp),%rsi
  0x0000000116b71434: mov    0x8(%rsi),%rax
  0x0000000116b71438: test   %rax,%rax
  0x0000000116b7143b: jne    0x0000000116b71711
  0x0000000116b71441: callq  0x0000000116b7144b
  0x0000000116b71446: jmpq   0x0000000116b7169a
  0x0000000116b7144b: lea    0x8(%rsp),%rax
  0x0000000116b71450: mov    %r13,-0x38(%rbp)
  0x0000000116b71454: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b7145c: je     0x0000000116b714d9
  0x0000000116b71462: mov    %rsp,-0x28(%rsp)
  0x0000000116b71467: sub    $0x80,%rsp
  0x0000000116b7146e: mov    %rax,0x78(%rsp)
  0x0000000116b71473: mov    %rcx,0x70(%rsp)
  0x0000000116b71478: mov    %rdx,0x68(%rsp)
  0x0000000116b7147d: mov    %rbx,0x60(%rsp)
  0x0000000116b71482: mov    %rbp,0x50(%rsp)
  0x0000000116b71487: mov    %rsi,0x48(%rsp)
  0x0000000116b7148c: mov    %rdi,0x40(%rsp)
  0x0000000116b71491: mov    %r8,0x38(%rsp)
  0x0000000116b71496: mov    %r9,0x30(%rsp)
  0x0000000116b7149b: mov    %r10,0x28(%rsp)
  0x0000000116b714a0: mov    %r11,0x20(%rsp)
  0x0000000116b714a5: mov    %r12,0x18(%rsp)
  0x0000000116b714aa: mov    %r13,0x10(%rsp)
  0x0000000116b714af: mov    %r14,0x8(%rsp)
  0x0000000116b714b4: mov    %r15,(%rsp)
  0x0000000116b714b8: movabs $0x10cc2363b,%rdi
  0x0000000116b714c2: movabs $0x116b71462,%rsi
  0x0000000116b714cc: mov    %rsp,%rdx
  0x0000000116b714cf: and    $0xfffffffffffffff0,%rsp
  0x0000000116b714d3: callq  0x000000010c7dd830
  0x0000000116b714d8: hlt    
  0x0000000116b714d9: push   %r10
  0x0000000116b714db: cmp    -0x9d2ac32(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b714e2: je     0x0000000116b7155f
  ;; call_VM_base: heap base corrupted?
  0x0000000116b714e8: mov    %rsp,-0x28(%rsp)
  0x0000000116b714ed: sub    $0x80,%rsp
  0x0000000116b714f4: mov    %rax,0x78(%rsp)
  0x0000000116b714f9: mov    %rcx,0x70(%rsp)
  0x0000000116b714fe: mov    %rdx,0x68(%rsp)
  0x0000000116b71503: mov    %rbx,0x60(%rsp)
  0x0000000116b71508: mov    %rbp,0x50(%rsp)
  0x0000000116b7150d: mov    %rsi,0x48(%rsp)
  0x0000000116b71512: mov    %rdi,0x40(%rsp)
  0x0000000116b71517: mov    %r8,0x38(%rsp)
  0x0000000116b7151c: mov    %r9,0x30(%rsp)
  0x0000000116b71521: mov    %r10,0x28(%rsp)
  0x0000000116b71526: mov    %r11,0x20(%rsp)
  0x0000000116b7152b: mov    %r12,0x18(%rsp)
  0x0000000116b71530: mov    %r13,0x10(%rsp)
  0x0000000116b71535: mov    %r14,0x8(%rsp)
  0x0000000116b7153a: mov    %r15,(%rsp)
  0x0000000116b7153e: movabs $0x10cc63f17,%rdi
  0x0000000116b71548: movabs $0x116b714e8,%rsi
  0x0000000116b71552: mov    %rsp,%rdx
  0x0000000116b71555: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71559: callq  0x000000010c7dd830
  0x0000000116b7155e: hlt    
  0x0000000116b7155f: pop    %r10
  0x0000000116b71561: mov    %r15,%rdi
  0x0000000116b71564: mov    %rbp,0x290(%r15)
  0x0000000116b7156b: mov    %rax,0x280(%r15)
  0x0000000116b71572: test   $0xf,%esp
  0x0000000116b71578: je     0x0000000116b71590
  0x0000000116b7157e: sub    $0x8,%rsp
  0x0000000116b71582: callq  0x000000010c5892a0
  0x0000000116b71587: add    $0x8,%rsp
  0x0000000116b7158b: jmpq   0x0000000116b71595
  0x0000000116b71590: callq  0x000000010c5892a0
  0x0000000116b71595: push   %rax
  0x0000000116b71596: push   %rdi
  0x0000000116b71597: push   %rsi
  0x0000000116b71598: push   %rdx
  0x0000000116b71599: push   %rcx
  0x0000000116b7159a: push   %r8
  0x0000000116b7159c: push   %r9
  0x0000000116b7159e: push   %r10
  0x0000000116b715a0: mov    %rsp,%r10
  0x0000000116b715a3: and    $0xfffffffffffffff0,%rsp
  0x0000000116b715a7: push   %r10
  0x0000000116b715a9: push   %r11
  0x0000000116b715ab: mov    $0x109,%edi
  0x0000000116b715b0: movabs $0x7ff815049fd5,%r10
  0x0000000116b715ba: callq  *%r10
  0x0000000116b715bd: pop    %r11
  0x0000000116b715bf: pop    %rsp
  0x0000000116b715c0: pop    %r10
  0x0000000116b715c2: pop    %r9
  0x0000000116b715c4: pop    %r8
  0x0000000116b715c6: pop    %rcx
  0x0000000116b715c7: pop    %rdx
  0x0000000116b715c8: pop    %rsi
  0x0000000116b715c9: pop    %rdi
  0x0000000116b715ca: cmp    %rax,%r15
  0x0000000116b715cd: je     0x0000000116b7164a
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b715d3: mov    %rsp,-0x28(%rsp)
  0x0000000116b715d8: sub    $0x80,%rsp
  0x0000000116b715df: mov    %rax,0x78(%rsp)
  0x0000000116b715e4: mov    %rcx,0x70(%rsp)
  0x0000000116b715e9: mov    %rdx,0x68(%rsp)
  0x0000000116b715ee: mov    %rbx,0x60(%rsp)
  0x0000000116b715f3: mov    %rbp,0x50(%rsp)
  0x0000000116b715f8: mov    %rsi,0x48(%rsp)
  0x0000000116b715fd: mov    %rdi,0x40(%rsp)
  0x0000000116b71602: mov    %r8,0x38(%rsp)
  0x0000000116b71607: mov    %r9,0x30(%rsp)
  0x0000000116b7160c: mov    %r10,0x28(%rsp)
  0x0000000116b71611: mov    %r11,0x20(%rsp)
  0x0000000116b71616: mov    %r12,0x18(%rsp)
  0x0000000116b7161b: mov    %r13,0x10(%rsp)
  0x0000000116b71620: mov    %r14,0x8(%rsp)
  0x0000000116b71625: mov    %r15,(%rsp)
  0x0000000116b71629: movabs $0x10cc6405e,%rdi
  0x0000000116b71633: movabs $0x116b715d3,%rsi
  0x0000000116b7163d: mov    %rsp,%rdx
  0x0000000116b71640: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71644: callq  0x000000010c7dd830
  0x0000000116b71649: hlt    
  0x0000000116b7164a: pop    %rax
  0x0000000116b7164b: movabs $0x0,%r10
  0x0000000116b71655: mov    %r10,0x280(%r15)
  0x0000000116b7165c: movabs $0x0,%r10
  0x0000000116b71666: mov    %r10,0x290(%r15)
  0x0000000116b7166d: movabs $0x0,%r10
  0x0000000116b71677: mov    %r10,0x288(%r15)
  0x0000000116b7167e: cmpq   $0x0,0x8(%r15)
  0x0000000116b71686: je     0x0000000116b71691
  0x0000000116b7168c: jmpq   0x0000000116b30420
  0x0000000116b71691: mov    -0x38(%rbp),%r13
  0x0000000116b71695: mov    -0x30(%rbp),%r14
  0x0000000116b71699: retq   
  0x0000000116b7169a: mov    %rsp,-0x28(%rsp)
  0x0000000116b7169f: sub    $0x80,%rsp
  0x0000000116b716a6: mov    %rax,0x78(%rsp)
  0x0000000116b716ab: mov    %rcx,0x70(%rsp)
  0x0000000116b716b0: mov    %rdx,0x68(%rsp)
  0x0000000116b716b5: mov    %rbx,0x60(%rsp)
  0x0000000116b716ba: mov    %rbp,0x50(%rsp)
  0x0000000116b716bf: mov    %rsi,0x48(%rsp)
  0x0000000116b716c4: mov    %rdi,0x40(%rsp)
  0x0000000116b716c9: mov    %r8,0x38(%rsp)
  0x0000000116b716ce: mov    %r9,0x30(%rsp)
  0x0000000116b716d3: mov    %r10,0x28(%rsp)
  0x0000000116b716d8: mov    %r11,0x20(%rsp)
  0x0000000116b716dd: mov    %r12,0x18(%rsp)
  0x0000000116b716e2: mov    %r13,0x10(%rsp)
  0x0000000116b716e7: mov    %r14,0x8(%rsp)
  0x0000000116b716ec: mov    %r15,(%rsp)
  0x0000000116b716f0: movabs $0x10cb763be,%rdi
  0x0000000116b716fa: movabs $0x116b7169a,%rsi
  0x0000000116b71704: mov    %rsp,%rdx
  0x0000000116b71707: and    $0xfffffffffffffff0,%rsp
  0x0000000116b7170b: callq  0x000000010c7dd830
  0x0000000116b71710: hlt    
  0x0000000116b71711: mov    %r13,-0x38(%rbp)
  0x0000000116b71715: lea    (%rsi),%rax
  0x0000000116b71718: mov    0x8(%rsi),%rcx
  0x0000000116b7171c: movq   $0x0,0x8(%rsi)
  0x0000000116b71724: mov    (%rcx),%rdx
  0x0000000116b71727: and    $0x7,%rdx
  0x0000000116b7172b: cmp    $0x5,%rdx
  0x0000000116b7172f: je     0x0000000116b719a9
  0x0000000116b71735: mov    (%rax),%rdx
  0x0000000116b71738: test   %rdx,%rdx
  0x0000000116b7173b: je     0x0000000116b719a9
  0x0000000116b71741: lock cmpxchg %rdx,(%rcx)
  0x0000000116b71746: je     0x0000000116b719a9
  0x0000000116b7174c: mov    %rcx,0x8(%rsi)
  0x0000000116b71750: callq  0x0000000116b7175a
  0x0000000116b71755: jmpq   0x0000000116b719a9
  0x0000000116b7175a: lea    0x8(%rsp),%rax
  0x0000000116b7175f: mov    %r13,-0x38(%rbp)
  0x0000000116b71763: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b7176b: je     0x0000000116b717e8
  0x0000000116b71771: mov    %rsp,-0x28(%rsp)
  0x0000000116b71776: sub    $0x80,%rsp
  0x0000000116b7177d: mov    %rax,0x78(%rsp)
  0x0000000116b71782: mov    %rcx,0x70(%rsp)
  0x0000000116b71787: mov    %rdx,0x68(%rsp)
  0x0000000116b7178c: mov    %rbx,0x60(%rsp)
  0x0000000116b71791: mov    %rbp,0x50(%rsp)
  0x0000000116b71796: mov    %rsi,0x48(%rsp)
  0x0000000116b7179b: mov    %rdi,0x40(%rsp)
  0x0000000116b717a0: mov    %r8,0x38(%rsp)
  0x0000000116b717a5: mov    %r9,0x30(%rsp)
  0x0000000116b717aa: mov    %r10,0x28(%rsp)
  0x0000000116b717af: mov    %r11,0x20(%rsp)
  0x0000000116b717b4: mov    %r12,0x18(%rsp)
  0x0000000116b717b9: mov    %r13,0x10(%rsp)
  0x0000000116b717be: mov    %r14,0x8(%rsp)
  0x0000000116b717c3: mov    %r15,(%rsp)
  0x0000000116b717c7: movabs $0x10cc2363b,%rdi
  0x0000000116b717d1: movabs $0x116b71771,%rsi
  0x0000000116b717db: mov    %rsp,%rdx
  0x0000000116b717de: and    $0xfffffffffffffff0,%rsp
  0x0000000116b717e2: callq  0x000000010c7dd830
  0x0000000116b717e7: hlt    
  0x0000000116b717e8: push   %r10
  0x0000000116b717ea: cmp    -0x9d2af41(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b717f1: je     0x0000000116b7186e
  ;; call_VM_base: heap base corrupted?
  0x0000000116b717f7: mov    %rsp,-0x28(%rsp)
  0x0000000116b717fc: sub    $0x80,%rsp
  0x0000000116b71803: mov    %rax,0x78(%rsp)
  0x0000000116b71808: mov    %rcx,0x70(%rsp)
  0x0000000116b7180d: mov    %rdx,0x68(%rsp)
  0x0000000116b71812: mov    %rbx,0x60(%rsp)
  0x0000000116b71817: mov    %rbp,0x50(%rsp)
  0x0000000116b7181c: mov    %rsi,0x48(%rsp)
  0x0000000116b71821: mov    %rdi,0x40(%rsp)
  0x0000000116b71826: mov    %r8,0x38(%rsp)
  0x0000000116b7182b: mov    %r9,0x30(%rsp)
  0x0000000116b71830: mov    %r10,0x28(%rsp)
  0x0000000116b71835: mov    %r11,0x20(%rsp)
  0x0000000116b7183a: mov    %r12,0x18(%rsp)
  0x0000000116b7183f: mov    %r13,0x10(%rsp)
  0x0000000116b71844: mov    %r14,0x8(%rsp)
  0x0000000116b71849: mov    %r15,(%rsp)
  0x0000000116b7184d: movabs $0x10cc63f17,%rdi
  0x0000000116b71857: movabs $0x116b717f7,%rsi
  0x0000000116b71861: mov    %rsp,%rdx
  0x0000000116b71864: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71868: callq  0x000000010c7dd830
  0x0000000116b7186d: hlt    
  0x0000000116b7186e: pop    %r10
  0x0000000116b71870: mov    %r15,%rdi
  0x0000000116b71873: mov    %rbp,0x290(%r15)
  0x0000000116b7187a: mov    %rax,0x280(%r15)
  0x0000000116b71881: test   $0xf,%esp
  0x0000000116b71887: je     0x0000000116b7189f
  0x0000000116b7188d: sub    $0x8,%rsp
  0x0000000116b71891: callq  0x000000010c588f80
  0x0000000116b71896: add    $0x8,%rsp
  0x0000000116b7189a: jmpq   0x0000000116b718a4
  0x0000000116b7189f: callq  0x000000010c588f80
  0x0000000116b718a4: push   %rax
  0x0000000116b718a5: push   %rdi
  0x0000000116b718a6: push   %rsi
  0x0000000116b718a7: push   %rdx
  0x0000000116b718a8: push   %rcx
  0x0000000116b718a9: push   %r8
  0x0000000116b718ab: push   %r9
  0x0000000116b718ad: push   %r10
  0x0000000116b718af: mov    %rsp,%r10
  0x0000000116b718b2: and    $0xfffffffffffffff0,%rsp
  0x0000000116b718b6: push   %r10
  0x0000000116b718b8: push   %r11
  0x0000000116b718ba: mov    $0x109,%edi
  0x0000000116b718bf: movabs $0x7ff815049fd5,%r10
  0x0000000116b718c9: callq  *%r10
  0x0000000116b718cc: pop    %r11
  0x0000000116b718ce: pop    %rsp
  0x0000000116b718cf: pop    %r10
  0x0000000116b718d1: pop    %r9
  0x0000000116b718d3: pop    %r8
  0x0000000116b718d5: pop    %rcx
  0x0000000116b718d6: pop    %rdx
  0x0000000116b718d7: pop    %rsi
  0x0000000116b718d8: pop    %rdi
  0x0000000116b718d9: cmp    %rax,%r15
  0x0000000116b718dc: je     0x0000000116b71959
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b718e2: mov    %rsp,-0x28(%rsp)
  0x0000000116b718e7: sub    $0x80,%rsp
  0x0000000116b718ee: mov    %rax,0x78(%rsp)
  0x0000000116b718f3: mov    %rcx,0x70(%rsp)
  0x0000000116b718f8: mov    %rdx,0x68(%rsp)
  0x0000000116b718fd: mov    %rbx,0x60(%rsp)
  0x0000000116b71902: mov    %rbp,0x50(%rsp)
  0x0000000116b71907: mov    %rsi,0x48(%rsp)
  0x0000000116b7190c: mov    %rdi,0x40(%rsp)
  0x0000000116b71911: mov    %r8,0x38(%rsp)
  0x0000000116b71916: mov    %r9,0x30(%rsp)
  0x0000000116b7191b: mov    %r10,0x28(%rsp)
  0x0000000116b71920: mov    %r11,0x20(%rsp)
  0x0000000116b71925: mov    %r12,0x18(%rsp)
  0x0000000116b7192a: mov    %r13,0x10(%rsp)
  0x0000000116b7192f: mov    %r14,0x8(%rsp)
  0x0000000116b71934: mov    %r15,(%rsp)
  0x0000000116b71938: movabs $0x10cc6405e,%rdi
  0x0000000116b71942: movabs $0x116b718e2,%rsi
  0x0000000116b7194c: mov    %rsp,%rdx
  0x0000000116b7194f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71953: callq  0x000000010c7dd830
  0x0000000116b71958: hlt    
  0x0000000116b71959: pop    %rax
  0x0000000116b7195a: movabs $0x0,%r10
  0x0000000116b71964: mov    %r10,0x280(%r15)
  0x0000000116b7196b: movabs $0x0,%r10
  0x0000000116b71975: mov    %r10,0x290(%r15)
  0x0000000116b7197c: movabs $0x0,%r10
  0x0000000116b71986: mov    %r10,0x288(%r15)
  0x0000000116b7198d: cmpq   $0x0,0x8(%r15)
  0x0000000116b71995: je     0x0000000116b719a0
  0x0000000116b7199b: jmpq   0x0000000116b30420
  0x0000000116b719a0: mov    -0x38(%rbp),%r13
  0x0000000116b719a4: mov    -0x30(%rbp),%r14
  0x0000000116b719a8: retq   
  0x0000000116b719a9: mov    -0x38(%rbp),%r13
  0x0000000116b719ad: mov    -0x40(%rbp),%rsi
  0x0000000116b719b1: lea    -0x40(%rbp),%rbx
  0x0000000116b719b5: jmpq   0x0000000116b71c9c
  0x0000000116b719ba: callq  0x0000000116b719c4
  0x0000000116b719bf: jmpq   0x0000000116b71c13
  0x0000000116b719c4: lea    0x8(%rsp),%rax
  0x0000000116b719c9: mov    %r13,-0x38(%rbp)
  0x0000000116b719cd: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b719d5: je     0x0000000116b71a52
  0x0000000116b719db: mov    %rsp,-0x28(%rsp)
  0x0000000116b719e0: sub    $0x80,%rsp
  0x0000000116b719e7: mov    %rax,0x78(%rsp)
  0x0000000116b719ec: mov    %rcx,0x70(%rsp)
  0x0000000116b719f1: mov    %rdx,0x68(%rsp)
  0x0000000116b719f6: mov    %rbx,0x60(%rsp)
  0x0000000116b719fb: mov    %rbp,0x50(%rsp)
  0x0000000116b71a00: mov    %rsi,0x48(%rsp)
  0x0000000116b71a05: mov    %rdi,0x40(%rsp)
  0x0000000116b71a0a: mov    %r8,0x38(%rsp)
  0x0000000116b71a0f: mov    %r9,0x30(%rsp)
  0x0000000116b71a14: mov    %r10,0x28(%rsp)
  0x0000000116b71a19: mov    %r11,0x20(%rsp)
  0x0000000116b71a1e: mov    %r12,0x18(%rsp)
  0x0000000116b71a23: mov    %r13,0x10(%rsp)
  0x0000000116b71a28: mov    %r14,0x8(%rsp)
  0x0000000116b71a2d: mov    %r15,(%rsp)
  0x0000000116b71a31: movabs $0x10cc2363b,%rdi
  0x0000000116b71a3b: movabs $0x116b719db,%rsi
  0x0000000116b71a45: mov    %rsp,%rdx
  0x0000000116b71a48: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71a4c: callq  0x000000010c7dd830
  0x0000000116b71a51: hlt    
  0x0000000116b71a52: push   %r10
  0x0000000116b71a54: cmp    -0x9d2b1ab(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b71a5b: je     0x0000000116b71ad8
  ;; call_VM_base: heap base corrupted?
  0x0000000116b71a61: mov    %rsp,-0x28(%rsp)
  0x0000000116b71a66: sub    $0x80,%rsp
  0x0000000116b71a6d: mov    %rax,0x78(%rsp)
  0x0000000116b71a72: mov    %rcx,0x70(%rsp)
  0x0000000116b71a77: mov    %rdx,0x68(%rsp)
  0x0000000116b71a7c: mov    %rbx,0x60(%rsp)
  0x0000000116b71a81: mov    %rbp,0x50(%rsp)
  0x0000000116b71a86: mov    %rsi,0x48(%rsp)
  0x0000000116b71a8b: mov    %rdi,0x40(%rsp)
  0x0000000116b71a90: mov    %r8,0x38(%rsp)
  0x0000000116b71a95: mov    %r9,0x30(%rsp)
  0x0000000116b71a9a: mov    %r10,0x28(%rsp)
  0x0000000116b71a9f: mov    %r11,0x20(%rsp)
  0x0000000116b71aa4: mov    %r12,0x18(%rsp)
  0x0000000116b71aa9: mov    %r13,0x10(%rsp)
  0x0000000116b71aae: mov    %r14,0x8(%rsp)
  0x0000000116b71ab3: mov    %r15,(%rsp)
  0x0000000116b71ab7: movabs $0x10cc63f17,%rdi
  0x0000000116b71ac1: movabs $0x116b71a61,%rsi
  0x0000000116b71acb: mov    %rsp,%rdx
  0x0000000116b71ace: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71ad2: callq  0x000000010c7dd830
  0x0000000116b71ad7: hlt    
  0x0000000116b71ad8: pop    %r10
  0x0000000116b71ada: mov    %r15,%rdi
  0x0000000116b71add: mov    %rbp,0x290(%r15)
  0x0000000116b71ae4: mov    %rax,0x280(%r15)
  0x0000000116b71aeb: test   $0xf,%esp
  0x0000000116b71af1: je     0x0000000116b71b09
  0x0000000116b71af7: sub    $0x8,%rsp
  0x0000000116b71afb: callq  0x000000010c5892a0
  0x0000000116b71b00: add    $0x8,%rsp
  0x0000000116b71b04: jmpq   0x0000000116b71b0e
  0x0000000116b71b09: callq  0x000000010c5892a0
  0x0000000116b71b0e: push   %rax
  0x0000000116b71b0f: push   %rdi
  0x0000000116b71b10: push   %rsi
  0x0000000116b71b11: push   %rdx
  0x0000000116b71b12: push   %rcx
  0x0000000116b71b13: push   %r8
  0x0000000116b71b15: push   %r9
  0x0000000116b71b17: push   %r10
  0x0000000116b71b19: mov    %rsp,%r10
  0x0000000116b71b1c: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71b20: push   %r10
  0x0000000116b71b22: push   %r11
  0x0000000116b71b24: mov    $0x109,%edi
  0x0000000116b71b29: movabs $0x7ff815049fd5,%r10
  0x0000000116b71b33: callq  *%r10
  0x0000000116b71b36: pop    %r11
  0x0000000116b71b38: pop    %rsp
  0x0000000116b71b39: pop    %r10
  0x0000000116b71b3b: pop    %r9
  0x0000000116b71b3d: pop    %r8
  0x0000000116b71b3f: pop    %rcx
  0x0000000116b71b40: pop    %rdx
  0x0000000116b71b41: pop    %rsi
  0x0000000116b71b42: pop    %rdi
  0x0000000116b71b43: cmp    %rax,%r15
  0x0000000116b71b46: je     0x0000000116b71bc3
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b71b4c: mov    %rsp,-0x28(%rsp)
  0x0000000116b71b51: sub    $0x80,%rsp
  0x0000000116b71b58: mov    %rax,0x78(%rsp)
  0x0000000116b71b5d: mov    %rcx,0x70(%rsp)
  0x0000000116b71b62: mov    %rdx,0x68(%rsp)
  0x0000000116b71b67: mov    %rbx,0x60(%rsp)
  0x0000000116b71b6c: mov    %rbp,0x50(%rsp)
  0x0000000116b71b71: mov    %rsi,0x48(%rsp)
  0x0000000116b71b76: mov    %rdi,0x40(%rsp)
  0x0000000116b71b7b: mov    %r8,0x38(%rsp)
  0x0000000116b71b80: mov    %r9,0x30(%rsp)
  0x0000000116b71b85: mov    %r10,0x28(%rsp)
  0x0000000116b71b8a: mov    %r11,0x20(%rsp)
  0x0000000116b71b8f: mov    %r12,0x18(%rsp)
  0x0000000116b71b94: mov    %r13,0x10(%rsp)
  0x0000000116b71b99: mov    %r14,0x8(%rsp)
  0x0000000116b71b9e: mov    %r15,(%rsp)
  0x0000000116b71ba2: movabs $0x10cc6405e,%rdi
  0x0000000116b71bac: movabs $0x116b71b4c,%rsi
  0x0000000116b71bb6: mov    %rsp,%rdx
  0x0000000116b71bb9: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71bbd: callq  0x000000010c7dd830
  0x0000000116b71bc2: hlt    
  0x0000000116b71bc3: pop    %rax
  0x0000000116b71bc4: movabs $0x0,%r10
  0x0000000116b71bce: mov    %r10,0x280(%r15)
  0x0000000116b71bd5: movabs $0x0,%r10
  0x0000000116b71bdf: mov    %r10,0x290(%r15)
  0x0000000116b71be6: movabs $0x0,%r10
  0x0000000116b71bf0: mov    %r10,0x288(%r15)
  0x0000000116b71bf7: cmpq   $0x0,0x8(%r15)
  0x0000000116b71bff: je     0x0000000116b71c0a
  0x0000000116b71c05: jmpq   0x0000000116b30420
  0x0000000116b71c0a: mov    -0x38(%rbp),%r13
  0x0000000116b71c0e: mov    -0x30(%rbp),%r14
  0x0000000116b71c12: retq   
  0x0000000116b71c13: mov    %rsp,-0x28(%rsp)
  0x0000000116b71c18: sub    $0x80,%rsp
  0x0000000116b71c1f: mov    %rax,0x78(%rsp)
  0x0000000116b71c24: mov    %rcx,0x70(%rsp)
  0x0000000116b71c29: mov    %rdx,0x68(%rsp)
  0x0000000116b71c2e: mov    %rbx,0x60(%rsp)
  0x0000000116b71c33: mov    %rbp,0x50(%rsp)
  0x0000000116b71c38: mov    %rsi,0x48(%rsp)
  0x0000000116b71c3d: mov    %rdi,0x40(%rsp)
  0x0000000116b71c42: mov    %r8,0x38(%rsp)
  0x0000000116b71c47: mov    %r9,0x30(%rsp)
  0x0000000116b71c4c: mov    %r10,0x28(%rsp)
  0x0000000116b71c51: mov    %r11,0x20(%rsp)
  0x0000000116b71c56: mov    %r12,0x18(%rsp)
  0x0000000116b71c5b: mov    %r13,0x10(%rsp)
  0x0000000116b71c60: mov    %r14,0x8(%rsp)
  0x0000000116b71c65: mov    %r15,(%rsp)
  0x0000000116b71c69: movabs $0x10cb763be,%rdi
  0x0000000116b71c73: movabs $0x116b71c13,%rsi
  0x0000000116b71c7d: mov    %rsp,%rdx
  0x0000000116b71c80: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71c84: callq  0x000000010c7dd830
  0x0000000116b71c89: hlt    
  0x0000000116b71c8a: cmpq   $0x0,0x8(%rsi)
  0x0000000116b71c92: jne    0x0000000116b719ba
  0x0000000116b71c98: add    $0x10,%rsi
  0x0000000116b71c9c: cmp    %rbx,%rsi
  0x0000000116b71c9f: jne    0x0000000116b71c8a
  0x0000000116b71ca1: cmpb   $0x0,-0x9d54aa6(%rip)        # 0x000000010ce1d202
  0x0000000116b71ca8: je     0x0000000116b71d5d
  0x0000000116b71cae: mov    -0x18(%rbp),%rsi
  0x0000000116b71cb2: mov    %r15,%rdi
  0x0000000116b71cb5: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b71cbd: je     0x0000000116b71d3a
  0x0000000116b71cc3: mov    %rsp,-0x28(%rsp)
  0x0000000116b71cc8: sub    $0x80,%rsp
  0x0000000116b71ccf: mov    %rax,0x78(%rsp)
  0x0000000116b71cd4: mov    %rcx,0x70(%rsp)
  0x0000000116b71cd9: mov    %rdx,0x68(%rsp)
  0x0000000116b71cde: mov    %rbx,0x60(%rsp)
  0x0000000116b71ce3: mov    %rbp,0x50(%rsp)
  0x0000000116b71ce8: mov    %rsi,0x48(%rsp)
  0x0000000116b71ced: mov    %rdi,0x40(%rsp)
  0x0000000116b71cf2: mov    %r8,0x38(%rsp)
  0x0000000116b71cf7: mov    %r9,0x30(%rsp)
  0x0000000116b71cfc: mov    %r10,0x28(%rsp)
  0x0000000116b71d01: mov    %r11,0x20(%rsp)
  0x0000000116b71d06: mov    %r12,0x18(%rsp)
  0x0000000116b71d0b: mov    %r13,0x10(%rsp)
  0x0000000116b71d10: mov    %r14,0x8(%rsp)
  0x0000000116b71d15: mov    %r15,(%rsp)
  0x0000000116b71d19: movabs $0x10cc2363b,%rdi
  0x0000000116b71d23: movabs $0x116b71cc3,%rsi
  0x0000000116b71d2d: mov    %rsp,%rdx
  0x0000000116b71d30: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71d34: callq  0x000000010c7dd830
  0x0000000116b71d39: hlt    
  0x0000000116b71d3a: test   $0xf,%esp
  0x0000000116b71d40: je     0x0000000116b71d58
  0x0000000116b71d46: sub    $0x8,%rsp
  0x0000000116b71d4a: callq  0x000000010c9c9850
  0x0000000116b71d4f: add    $0x8,%rsp
  0x0000000116b71d53: jmpq   0x0000000116b71d5d
  0x0000000116b71d58: callq  0x000000010c9c9850
  0x0000000116b71d5d: mov    -0x8(%rbp),%rbx
  0x0000000116b71d61: leaveq 
  0x0000000116b71d62: pop    %r13
  0x0000000116b71d64: mov    %rbx,%rsp
  0x0000000116b71d67: jmpq   *%r13
  0x0000000116b71d6a: mov    %rsp,-0x28(%rsp)
  0x0000000116b71d6f: sub    $0x80,%rsp
  0x0000000116b71d76: mov    %rax,0x78(%rsp)
  0x0000000116b71d7b: mov    %rcx,0x70(%rsp)
  0x0000000116b71d80: mov    %rdx,0x68(%rsp)
  0x0000000116b71d85: mov    %rbx,0x60(%rsp)
  0x0000000116b71d8a: mov    %rbp,0x50(%rsp)
  0x0000000116b71d8f: mov    %rsi,0x48(%rsp)
  0x0000000116b71d94: mov    %rdi,0x40(%rsp)
  0x0000000116b71d99: mov    %r8,0x38(%rsp)
  0x0000000116b71d9e: mov    %r9,0x30(%rsp)
  0x0000000116b71da3: mov    %r10,0x28(%rsp)
  0x0000000116b71da8: mov    %r11,0x20(%rsp)
  0x0000000116b71dad: mov    %r12,0x18(%rsp)
  0x0000000116b71db2: mov    %r13,0x10(%rsp)
  0x0000000116b71db7: mov    %r14,0x8(%rsp)
  0x0000000116b71dbc: mov    %r15,(%rsp)
  0x0000000116b71dc0: movabs $0x10cb763be,%rdi
  0x0000000116b71dca: movabs $0x116b71d6a,%rsi
  0x0000000116b71dd4: mov    %rsp,%rdx
  0x0000000116b71dd7: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71ddb: callq  0x000000010c7dd830
  0x0000000116b71de0: hlt    
  0x0000000116b71de1: nop
  0x0000000116b71de2: nop
  0x0000000116b71de3: nop
  0x0000000116b71de4: nop
  0x0000000116b71de5: nop
  0x0000000116b71de6: nop
  0x0000000116b71de7: nop
  0x0000000116b71de8: int3   
  0x0000000116b71de9: int3   
  0x0000000116b71dea: int3   
  0x0000000116b71deb: int3   
  0x0000000116b71dec: int3   
  0x0000000116b71ded: int3   
  0x0000000116b71dee: int3   
  0x0000000116b71def: int3   
  0x0000000116b71df0: int3   
  0x0000000116b71df1: int3   
  0x0000000116b71df2: int3   
  0x0000000116b71df3: int3   
  0x0000000116b71df4: int3   
  0x0000000116b71df5: int3   
  0x0000000116b71df6: int3   
  0x0000000116b71df7: int3   
  0x0000000116b71df8: int3   
  0x0000000116b71df9: int3   
  0x0000000116b71dfa: int3   
  0x0000000116b71dfb: int3   
  0x0000000116b71dfc: int3   
  0x0000000116b71dfd: int3   
  0x0000000116b71dfe: int3   
  0x0000000116b71dff: int3   

----------------------------------------------------------------------
invokehandle  233 invokehandle  [0x0000000116b71e40, 0x0000000116b72280]  1088 bytes

  0x0000000116b71e40: push   %rax
  0x0000000116b71e41: jmpq   0x0000000116b71e70
  0x0000000116b71e46: sub    $0x8,%rsp
  0x0000000116b71e4a: vmovss %xmm0,(%rsp)
  0x0000000116b71e4f: jmpq   0x0000000116b71e70
  0x0000000116b71e54: sub    $0x10,%rsp
  0x0000000116b71e58: vmovsd %xmm0,(%rsp)
  0x0000000116b71e5d: jmpq   0x0000000116b71e70
  0x0000000116b71e62: sub    $0x10,%rsp
  0x0000000116b71e66: mov    %rax,(%rsp)
  0x0000000116b71e6a: jmpq   0x0000000116b71e70
  0x0000000116b71e6f: push   %rax
  0x0000000116b71e70: mov    %r13,-0x38(%rbp)
  0x0000000116b71e74: movzwl 0x1(%r13),%edx
  0x0000000116b71e79: mov    -0x28(%rbp),%rcx
  0x0000000116b71e7d: shl    $0x2,%edx
  0x0000000116b71e80: mov    0x10(%rcx,%rdx,8),%ebx
  0x0000000116b71e84: shr    $0x10,%ebx
  0x0000000116b71e87: and    $0xff,%ebx
  0x0000000116b71e8d: cmp    $0xe9,%ebx
  0x0000000116b71e93: je     0x0000000116b72106
  0x0000000116b71e99: mov    $0xe9,%ebx
  0x0000000116b71e9e: callq  0x0000000116b71ea8
  0x0000000116b71ea3: jmpq   0x0000000116b720fa
  0x0000000116b71ea8: mov    %rbx,%rsi
  0x0000000116b71eab: lea    0x8(%rsp),%rax
  0x0000000116b71eb0: mov    %r13,-0x38(%rbp)
  0x0000000116b71eb4: cmpq   $0x0,-0x10(%rbp)
  0x0000000116b71ebc: je     0x0000000116b71f39
  0x0000000116b71ec2: mov    %rsp,-0x28(%rsp)
  0x0000000116b71ec7: sub    $0x80,%rsp
  0x0000000116b71ece: mov    %rax,0x78(%rsp)
  0x0000000116b71ed3: mov    %rcx,0x70(%rsp)
  0x0000000116b71ed8: mov    %rdx,0x68(%rsp)
  0x0000000116b71edd: mov    %rbx,0x60(%rsp)
  0x0000000116b71ee2: mov    %rbp,0x50(%rsp)
  0x0000000116b71ee7: mov    %rsi,0x48(%rsp)
  0x0000000116b71eec: mov    %rdi,0x40(%rsp)
  0x0000000116b71ef1: mov    %r8,0x38(%rsp)
  0x0000000116b71ef6: mov    %r9,0x30(%rsp)
  0x0000000116b71efb: mov    %r10,0x28(%rsp)
  0x0000000116b71f00: mov    %r11,0x20(%rsp)
  0x0000000116b71f05: mov    %r12,0x18(%rsp)
  0x0000000116b71f0a: mov    %r13,0x10(%rsp)
  0x0000000116b71f0f: mov    %r14,0x8(%rsp)
  0x0000000116b71f14: mov    %r15,(%rsp)
  0x0000000116b71f18: movabs $0x10cc2363b,%rdi
  0x0000000116b71f22: movabs $0x116b71ec2,%rsi
  0x0000000116b71f2c: mov    %rsp,%rdx
  0x0000000116b71f2f: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71f33: callq  0x000000010c7dd830
  0x0000000116b71f38: hlt    
  0x0000000116b71f39: push   %r10
  0x0000000116b71f3b: cmp    -0x9d2b692(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b71f42: je     0x0000000116b71fbf
  ;; call_VM_base: heap base corrupted?
  0x0000000116b71f48: mov    %rsp,-0x28(%rsp)
  0x0000000116b71f4d: sub    $0x80,%rsp
  0x0000000116b71f54: mov    %rax,0x78(%rsp)
  0x0000000116b71f59: mov    %rcx,0x70(%rsp)
  0x0000000116b71f5e: mov    %rdx,0x68(%rsp)
  0x0000000116b71f63: mov    %rbx,0x60(%rsp)
  0x0000000116b71f68: mov    %rbp,0x50(%rsp)
  0x0000000116b71f6d: mov    %rsi,0x48(%rsp)
  0x0000000116b71f72: mov    %rdi,0x40(%rsp)
  0x0000000116b71f77: mov    %r8,0x38(%rsp)
  0x0000000116b71f7c: mov    %r9,0x30(%rsp)
  0x0000000116b71f81: mov    %r10,0x28(%rsp)
  0x0000000116b71f86: mov    %r11,0x20(%rsp)
  0x0000000116b71f8b: mov    %r12,0x18(%rsp)
  0x0000000116b71f90: mov    %r13,0x10(%rsp)
  0x0000000116b71f95: mov    %r14,0x8(%rsp)
  0x0000000116b71f9a: mov    %r15,(%rsp)
  0x0000000116b71f9e: movabs $0x10cc63f17,%rdi
  0x0000000116b71fa8: movabs $0x116b71f48,%rsi
  0x0000000116b71fb2: mov    %rsp,%rdx
  0x0000000116b71fb5: and    $0xfffffffffffffff0,%rsp
  0x0000000116b71fb9: callq  0x000000010c7dd830
  0x0000000116b71fbe: hlt    
  0x0000000116b71fbf: pop    %r10
  0x0000000116b71fc1: mov    %r15,%rdi
  0x0000000116b71fc4: mov    %rbp,0x290(%r15)
  0x0000000116b71fcb: mov    %rax,0x280(%r15)
  0x0000000116b71fd2: test   $0xf,%esp
  0x0000000116b71fd8: je     0x0000000116b71ff0
  0x0000000116b71fde: sub    $0x8,%rsp
  0x0000000116b71fe2: callq  0x000000010c58a860
  0x0000000116b71fe7: add    $0x8,%rsp
  0x0000000116b71feb: jmpq   0x0000000116b71ff5
  0x0000000116b71ff0: callq  0x000000010c58a860
  0x0000000116b71ff5: push   %rax
  0x0000000116b71ff6: push   %rdi
  0x0000000116b71ff7: push   %rsi
  0x0000000116b71ff8: push   %rdx
  0x0000000116b71ff9: push   %rcx
  0x0000000116b71ffa: push   %r8
  0x0000000116b71ffc: push   %r9
  0x0000000116b71ffe: push   %r10
  0x0000000116b72000: mov    %rsp,%r10
  0x0000000116b72003: and    $0xfffffffffffffff0,%rsp
  0x0000000116b72007: push   %r10
  0x0000000116b72009: push   %r11
  0x0000000116b7200b: mov    $0x109,%edi
  0x0000000116b72010: movabs $0x7ff815049fd5,%r10
  0x0000000116b7201a: callq  *%r10
  0x0000000116b7201d: pop    %r11
  0x0000000116b7201f: pop    %rsp
  0x0000000116b72020: pop    %r10
  0x0000000116b72022: pop    %r9
  0x0000000116b72024: pop    %r8
  0x0000000116b72026: pop    %rcx
  0x0000000116b72027: pop    %rdx
  0x0000000116b72028: pop    %rsi
  0x0000000116b72029: pop    %rdi
  0x0000000116b7202a: cmp    %rax,%r15
  0x0000000116b7202d: je     0x0000000116b720aa
  ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x0000000116b72033: mov    %rsp,-0x28(%rsp)
  0x0000000116b72038: sub    $0x80,%rsp
  0x0000000116b7203f: mov    %rax,0x78(%rsp)
  0x0000000116b72044: mov    %rcx,0x70(%rsp)
  0x0000000116b72049: mov    %rdx,0x68(%rsp)
  0x0000000116b7204e: mov    %rbx,0x60(%rsp)
  0x0000000116b72053: mov    %rbp,0x50(%rsp)
  0x0000000116b72058: mov    %rsi,0x48(%rsp)
  0x0000000116b7205d: mov    %rdi,0x40(%rsp)
  0x0000000116b72062: mov    %r8,0x38(%rsp)
  0x0000000116b72067: mov    %r9,0x30(%rsp)
  0x0000000116b7206c: mov    %r10,0x28(%rsp)
  0x0000000116b72071: mov    %r11,0x20(%rsp)
  0x0000000116b72076: mov    %r12,0x18(%rsp)
  0x0000000116b7207b: mov    %r13,0x10(%rsp)
  0x0000000116b72080: mov    %r14,0x8(%rsp)
  0x0000000116b72085: mov    %r15,(%rsp)
  0x0000000116b72089: movabs $0x10cc6405e,%rdi
  0x0000000116b72093: movabs $0x116b72033,%rsi
  0x0000000116b7209d: mov    %rsp,%rdx
  0x0000000116b720a0: and    $0xfffffffffffffff0,%rsp
  0x0000000116b720a4: callq  0x000000010c7dd830
  0x0000000116b720a9: hlt    
  0x0000000116b720aa: pop    %rax
  0x0000000116b720ab: movabs $0x0,%r10
  0x0000000116b720b5: mov    %r10,0x280(%r15)
  0x0000000116b720bc: movabs $0x0,%r10
  0x0000000116b720c6: mov    %r10,0x290(%r15)
  0x0000000116b720cd: movabs $0x0,%r10
  0x0000000116b720d7: mov    %r10,0x288(%r15)
  0x0000000116b720de: cmpq   $0x0,0x8(%r15)
  0x0000000116b720e6: je     0x0000000116b720f1
  0x0000000116b720ec: jmpq   0x0000000116b30420
  0x0000000116b720f1: mov    -0x38(%rbp),%r13
  0x0000000116b720f5: mov    -0x30(%rbp),%r14
  0x0000000116b720f9: retq   
  0x0000000116b720fa: movzwl 0x1(%r13),%edx
  0x0000000116b720ff: mov    -0x28(%rbp),%rcx
  0x0000000116b72103: shl    $0x2,%edx
  0x0000000116b72106: mov    0x18(%rcx,%rdx,8),%rbx
  0x0000000116b7210b: mov    0x20(%rcx,%rdx,8),%rax
  0x0000000116b72110: mov    0x28(%rcx,%rdx,8),%edx
  0x0000000116b72114: test   $0x1000000,%edx
  0x0000000116b7211a: je     0x0000000116b721ce
  0x0000000116b72120: push   %rbx
  0x0000000116b72121: mov    %rax,%rbx
  0x0000000116b72124: shl    $0x2,%ebx
  0x0000000116b72127: mov    -0x18(%rbp),%rax
  0x0000000116b7212b: mov    0x10(%rax),%rax
  0x0000000116b7212f: mov    0x8(%rax),%rax
  0x0000000116b72133: mov    0x30(%rax),%rax
  0x0000000116b72137: mov    (%rax),%rax
  0x0000000116b7213a: add    %rbx,%rax
  0x0000000116b7213d: mov    0x10(%rax),%eax
  0x0000000116b72140: push   %r10
  0x0000000116b72142: cmp    -0x9d2b899(%rip),%r12        # 0x000000010ce468b0
  0x0000000116b72149: je     0x0000000116b721c6
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x0000000116b7214f: mov    %rsp,-0x28(%rsp)
  0x0000000116b72154: sub    $0x80,%rsp
  0x0000000116b7215b: mov    %rax,0x78(%rsp)
  0x0000000116b72160: mov    %rcx,0x70(%rsp)
  0x0000000116b72165: mov    %rdx,0x68(%rsp)
  0x0000000116b7216a: mov    %rbx,0x60(%rsp)
  0x0000000116b7216f: mov    %rbp,0x50(%rsp)
  0x0000000116b72174: mov    %rsi,0x48(%rsp)
  0x0000000116b72179: mov    %rdi,0x40(%rsp)
  0x0000000116b7217e: mov    %r8,0x38(%rsp)
  0x0000000116b72183: mov    %r9,0x30(%rsp)
  0x0000000116b72188: mov    %r10,0x28(%rsp)
  0x0000000116b7218d: mov    %r11,0x20(%rsp)
  0x0000000116b72192: mov    %r12,0x18(%rsp)
  0x0000000116b72197: mov    %r13,0x10(%rsp)
  0x0000000116b7219c: mov    %r14,0x8(%rsp)
  0x0000000116b721a1: mov    %r15,(%rsp)
  0x0000000116b721a5: movabs $0x10cc64abb,%rdi
  0x0000000116b721af: movabs $0x116b7214f,%rsi
  0x0000000116b721b9: mov    %rsp,%rdx
  0x0000000116b721bc: and    $0xfffffffffffffff0,%rsp
  0x0000000116b721c0: callq  0x000000010c7dd830
  0x0000000116b721c5: hlt    
  0x0000000116b721c6: pop    %r10
  0x0000000116b721c8: shl    $0x3,%rax
  0x0000000116b721cc: pop    %rbx
  0x0000000116b721cd: push   %rax
  0x0000000116b721ce: mov    %edx,%ecx
  0x0000000116b721d0: and    $0xff,%ecx
  0x0000000116b721d6: mov    -0x8(%rsp,%rcx,8),%rcx
  0x0000000116b721db: shr    $0x1c,%edx
  0x0000000116b721de: movabs $0x10ce3c650,%r10
  0x0000000116b721e8: mov    (%r10,%rdx,8),%rdx
  0x0000000116b721ec: push   %rdx
  0x0000000116b721ed: cmp    (%rcx),%rax
  0x0000000116b721f0: lea    0x8(%rsp),%r13
  0x0000000116b721f5: mov    %r13,-0x10(%rbp)
  0x0000000116b721f9: jmpq   *0x60(%rbx)
  0x0000000116b721fc: mov    %rsp,-0x28(%rsp)
  0x0000000116b72201: sub    $0x80,%rsp
  0x0000000116b72208: mov    %rax,0x78(%rsp)
  0x0000000116b7220d: mov    %rcx,0x70(%rsp)
  0x0000000116b72212: mov    %rdx,0x68(%rsp)
  0x0000000116b72217: mov    %rbx,0x60(%rsp)
  0x0000000116b7221c: mov    %rbp,0x50(%rsp)
  0x0000000116b72221: mov    %rsi,0x48(%rsp)
  0x0000000116b72226: mov    %rdi,0x40(%rsp)
  0x0000000116b7222b: mov    %r8,0x38(%rsp)
  0x0000000116b72230: mov    %r9,0x30(%rsp)
  0x0000000116b72235: mov    %r10,0x28(%rsp)
  0x0000000116b7223a: mov    %r11,0x20(%rsp)
  0x0000000116b7223f: mov    %r12,0x18(%rsp)
  0x0000000116b72244: mov    %r13,0x10(%rsp)
  0x0000000116b72249: mov    %r14,0x8(%rsp)
  0x0000000116b7224e: mov    %r15,(%rsp)
  0x0000000116b72252: movabs $0x10cb763be,%rdi
  0x0000000116b7225c: movabs $0x116b721fc,%rsi
  0x0000000116b72266: mov    %rsp,%rdx
  0x0000000116b72269: and    $0xfffffffffffffff0,%rsp
  0x0000000116b7226d: callq  0x000000010c7dd830
  0x0000000116b72272: hlt    
  0x0000000116b72273: nop
  0x0000000116b72274: nop
  0x0000000116b72275: nop
  0x0000000116b72276: nop
  0x0000000116b72277: nop
  0x0000000116b72278: int3   
  0x0000000116b72279: int3   
  0x0000000116b7227a: int3   
  0x0000000116b7227b: int3   
  0x0000000116b7227c: int3   
  0x0000000116b7227d: int3   
  0x0000000116b7227e: int3   
  0x0000000116b7227f: int3   

----------------------------------------------------------------------
_shouldnotreachhere  234 _shouldnotreachhere  [0x0000000116b722c0, 0x0000000116b72380]  192 bytes

  0x0000000116b722c0: push   %rax
  0x0000000116b722c1: jmpq   0x0000000116b722f0
  0x0000000116b722c6: sub    $0x8,%rsp
  0x0000000116b722ca: vmovss %xmm0,(%rsp)
  0x0000000116b722cf: jmpq   0x0000000116b722f0
  0x0000000116b722d4: sub    $0x10,%rsp
  0x0000000116b722d8: vmovsd %xmm0,(%rsp)
  0x0000000116b722dd: jmpq   0x0000000116b722f0
  0x0000000116b722e2: sub    $0x10,%rsp
  0x0000000116b722e6: mov    %rax,(%rsp)
  0x0000000116b722ea: jmpq   0x0000000116b722f0
  0x0000000116b722ef: push   %rax
  0x0000000116b722f0: mov    %rsp,-0x28(%rsp)
  0x0000000116b722f5: sub    $0x80,%rsp
  0x0000000116b722fc: mov    %rax,0x78(%rsp)
  0x0000000116b72301: mov    %rcx,0x70(%rsp)
  0x0000000116b72306: mov    %rdx,0x68(%rsp)
  0x0000000116b7230b: mov    %rbx,0x60(%rsp)
  0x0000000116b72310: mov    %rbp,0x50(%rsp)
  0x0000000116b72315: mov    %rsi,0x48(%rsp)
  0x0000000116b7231a: mov    %rdi,0x40(%rsp)
  0x0000000116b7231f: mov    %r8,0x38(%rsp)
  0x0000000116b72324: mov    %r9,0x30(%rsp)
  0x0000000116b72329: mov    %r10,0x28(%rsp)
  0x0000000116b7232e: mov    %r11,0x20(%rsp)
  0x0000000116b72333: mov    %r12,0x18(%rsp)
  0x0000000116b72338: mov    %r13,0x10(%rsp)
  0x0000000116b7233d: mov    %r14,0x8(%rsp)
  0x0000000116b72342: mov    %r15,(%rsp)
  0x0000000116b72346: movabs $0x10ccb0429,%rdi
  0x0000000116b72350: movabs $0x116b722f0,%rsi
  0x0000000116b7235a: mov    %rsp,%rdx
  0x0000000116b7235d: and    $0xfffffffffffffff0,%rsp
  0x0000000116b72361: callq  0x000000010c7dd830
  0x0000000116b72366: hlt    
  0x0000000116b72367: movzbl 0x1(%r13),%ebx
  0x0000000116b7236c: inc    %r13
  0x0000000116b7236f: movabs $0x10ce3b680,%r10
  0x0000000116b72379: jmpq   *(%r10,%rbx,8)
  0x0000000116b7237d: nop
  0x0000000116b7237e: nop
  0x0000000116b7237f: nop
----------------------------------------------------------------------

